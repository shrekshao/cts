{"version":3,"sources":["../../../../../src/webgpu/api/validation/shader_module/entry_point.spec.ts"],"names":["description","makeTestGroup","kDefaultVertexShaderCode","getShaderWithEntryPoint","ValidationTest","g","kEntryPointTestCases","shaderModuleEntryPoint","stageEntryPoint","test","desc","params","u","combine","combineWithParams","fn","t","isAsync","descriptor","layout","compute","module","device","createShaderModule","code","entryPoint","_success","doCreateComputePipelineTest","vertex","doCreateRenderPipelineTest","fragment","targets","format"],"mappings":"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","sourcesContent":["export const description = `\nThis tests entry point validation of compute/render pipelines and their shader modules.\n\nThe entryPoint in shader module include standard \"main\" and others.\nThe entryPoint assigned in descriptor include:\n- Matching case (control case)\n- Empty string\n- Mistyping\n- Containing invalid char, including space and control codes (Null character)\n- Unicode entrypoints and their ASCIIfied version\n\nTODO:\n- Test unicode normalization (gpuweb/gpuweb#1160)\n- Fine-tune test cases to reduce number by removing trivially similiar cases\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { kDefaultVertexShaderCode, getShaderWithEntryPoint } from '../../../util/shader.js';\nimport { ValidationTest } from '../validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\nconst kEntryPointTestCases = [\n  { shaderModuleEntryPoint: 'main', stageEntryPoint: 'main' },\n  { shaderModuleEntryPoint: 'main', stageEntryPoint: '' },\n  { shaderModuleEntryPoint: 'main', stageEntryPoint: 'main\\0' },\n  { shaderModuleEntryPoint: 'main', stageEntryPoint: 'main\\0a' },\n  { shaderModuleEntryPoint: 'main', stageEntryPoint: 'mian' },\n  { shaderModuleEntryPoint: 'main', stageEntryPoint: 'main ' },\n  { shaderModuleEntryPoint: 'main', stageEntryPoint: 'ma in' },\n  { shaderModuleEntryPoint: 'main', stageEntryPoint: 'main\\n' },\n  { shaderModuleEntryPoint: 'mian', stageEntryPoint: 'mian' },\n  { shaderModuleEntryPoint: 'mian', stageEntryPoint: 'main' },\n  { shaderModuleEntryPoint: 'mainmain', stageEntryPoint: 'mainmain' },\n  { shaderModuleEntryPoint: 'mainmain', stageEntryPoint: 'foo' },\n  { shaderModuleEntryPoint: 'main_t12V3', stageEntryPoint: 'main_t12V3' },\n  { shaderModuleEntryPoint: 'main_t12V3', stageEntryPoint: 'main_t12V5' },\n  { shaderModuleEntryPoint: 'main_t12V3', stageEntryPoint: '_main_t12V3' },\n  { shaderModuleEntryPoint: 'séquençage', stageEntryPoint: 'séquençage' },\n  { shaderModuleEntryPoint: 'séquençage', stageEntryPoint: 'sequencage' },\n];\n\ng.test('compute')\n  .desc(\n    `\nTests calling createComputePipeline(Async) with valid vertex stage shader and different entryPoints,\nand check that the APIs only accept matching entryPoint.\n`\n  )\n  .params(u => u.combine('isAsync', [true, false]).combineWithParams(kEntryPointTestCases))\n  .fn(async t => {\n    const { isAsync, shaderModuleEntryPoint, stageEntryPoint } = t.params;\n    const descriptor: GPUComputePipelineDescriptor = {\n      layout: 'auto',\n      compute: {\n        module: t.device.createShaderModule({\n          code: getShaderWithEntryPoint('compute', shaderModuleEntryPoint),\n        }),\n        entryPoint: stageEntryPoint,\n      },\n    };\n    const _success = shaderModuleEntryPoint === stageEntryPoint;\n    t.doCreateComputePipelineTest(isAsync, _success, descriptor);\n  });\n\ng.test('vertex')\n  .desc(\n    `\nTests calling createRenderPipeline(Async) with valid vertex stage shader and different entryPoints,\nand check that the APIs only accept matching entryPoint.\n`\n  )\n  .params(u => u.combine('isAsync', [true, false]).combineWithParams(kEntryPointTestCases))\n  .fn(async t => {\n    const { isAsync, shaderModuleEntryPoint, stageEntryPoint } = t.params;\n    const descriptor: GPURenderPipelineDescriptor = {\n      layout: 'auto',\n      vertex: {\n        module: t.device.createShaderModule({\n          code: getShaderWithEntryPoint('vertex', shaderModuleEntryPoint),\n        }),\n        entryPoint: stageEntryPoint,\n      },\n    };\n    const _success = shaderModuleEntryPoint === stageEntryPoint;\n    t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n  });\n\ng.test('fragment')\n  .desc(\n    `\nTests calling createRenderPipeline(Async) with valid fragment stage shader and different entryPoints,\nand check that the APIs only accept matching entryPoint.\n`\n  )\n  .params(u => u.combine('isAsync', [true, false]).combineWithParams(kEntryPointTestCases))\n  .fn(async t => {\n    const { isAsync, shaderModuleEntryPoint, stageEntryPoint } = t.params;\n    const descriptor: GPURenderPipelineDescriptor = {\n      layout: 'auto',\n      vertex: {\n        module: t.device.createShaderModule({\n          code: kDefaultVertexShaderCode,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: getShaderWithEntryPoint('fragment', shaderModuleEntryPoint),\n        }),\n        entryPoint: stageEntryPoint,\n        targets: [{ format: 'rgba8unorm' }],\n      },\n    };\n    const _success = shaderModuleEntryPoint === stageEntryPoint;\n    t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n  });\n"],"file":"entry_point.spec.js"}