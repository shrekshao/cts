{"version":3,"sources":["../../../../../src/webgpu/api/validation/shader_module/overrides.spec.ts"],"names":["description","makeTestGroup","ValidationTest","g","test","desc","fn","t","expectValidationError","device","createShaderModule","code"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAFO,CAIP,SAASC,aAAT,QAA8B,4CAA9B;AACA,SAASC,cAAT,QAA+B,uBAA/B;;AAEA,OAAO,MAAMC,CAAC,GAAGF,aAAa,CAACC,cAAD,CAAvB;;AAEPC,CAAC,CAACC,IAAF,CAAO,aAAP;AACGC,IADH;AAEK;AACL;AACA,CAJA;;AAMGC,EANH,CAMM,OAAMC,CAAN,KAAW;AACbA,EAAAA,CAAC,CAACC,qBAAF,CAAwB,MAAM;AAC5BD,IAAAA,CAAC,CAACE,MAAF,CAASC,kBAAT,CAA4B;AAC1BC,MAAAA,IAAI,EAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAVkC,EAA5B;;AAYD,GAbD,EAaG,KAbH;;AAeAJ,EAAAA,CAAC,CAACC,qBAAF,CAAwB,MAAM;AAC5BD,IAAAA,CAAC,CAACE,MAAF,CAASC,kBAAT,CAA4B;AAC1BC,MAAAA,IAAI,EAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAVkC,EAA5B;;AAYD,GAbD,EAaG,IAbH;AAcD,CApCH;;AAsCAR,CAAC,CAACC,IAAF,CAAO,eAAP;AACGC,IADH;AAEK;AACL;AACA,CAJA;;AAMGC,EANH,CAMM,OAAMC,CAAN,KAAW;AACbA,EAAAA,CAAC,CAACC,qBAAF,CAAwB,MAAM;AAC5BD,IAAAA,CAAC,CAACE,MAAF,CAASC,kBAAT,CAA4B;AAC1BC,MAAAA,IAAI,EAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WATkC,EAA5B;;AAWD,GAZD,EAYG,IAZH;;AAcAJ,EAAAA,CAAC,CAACC,qBAAF,CAAwB,MAAM;AAC5BD,IAAAA,CAAC,CAACE,MAAF,CAASC,kBAAT,CAA4B;AAC1BC,MAAAA,IAAI,EAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WATkC,EAA5B;;AAWD,GAZD,EAYG,IAZH;;AAcAJ,EAAAA,CAAC,CAACC,qBAAF,CAAwB,MAAM;AAC5BD,IAAAA,CAAC,CAACE,MAAF,CAASC,kBAAT,CAA4B;AAC1BC,MAAAA,IAAI,EAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WATkC,EAA5B;;AAWD,GAZD,EAYG,IAZH;AAaD,CAhDH","sourcesContent":["export const description = `\nThis tests overrides numeric identifiers should not conflict.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { ValidationTest } from '../validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('id_conflict')\n  .desc(\n    `\nTests that overrides' explicit numeric identifier should not conflict.\n`\n  )\n  .fn(async t => {\n    t.expectValidationError(() => {\n      t.device.createShaderModule({\n        code: `\n@id(1234) override c0: u32;\n@id(4321) override c1: u32;\n\n@compute @workgroup_size(1) fn main() {\n  // make sure the overridable constants are not optimized out\n  _ = c0;\n  _ = c1;\n}\n          `,\n      });\n    }, false);\n\n    t.expectValidationError(() => {\n      t.device.createShaderModule({\n        code: `\n@id(1234) override c0: u32;\n@id(1234) override c1: u32;\n\n@compute @workgroup_size(1) fn main() {\n  // make sure the overridable constants are not optimized out\n  _ = c0;\n  _ = c1;\n}\n          `,\n      });\n    }, true);\n  });\n\ng.test('name_conflict')\n  .desc(\n    `\nTests that overrides' variable name should not conflict, regardless of their numeric identifiers.\n`\n  )\n  .fn(async t => {\n    t.expectValidationError(() => {\n      t.device.createShaderModule({\n        code: `\noverride c0: u32;\noverride c0: u32;\n\n@compute @workgroup_size(1) fn main() {\n  // make sure the overridable constants are not optimized out\n  _ = c0;\n}\n          `,\n      });\n    }, true);\n\n    t.expectValidationError(() => {\n      t.device.createShaderModule({\n        code: `\n@id(1) override c0: u32;\noverride c0: u32;\n\n@compute @workgroup_size(1) fn main() {\n  // make sure the overridable constants are not optimized out\n  _ = c0;\n}\n          `,\n      });\n    }, true);\n\n    t.expectValidationError(() => {\n      t.device.createShaderModule({\n        code: `\n@id(1) override c0: u32;\n@id(2) override c0: u32;\n\n@compute @workgroup_size(1) fn main() {\n  // make sure the overridable constants are not optimized out\n  _ = c0;\n}\n          `,\n      });\n    }, true);\n  });\n"],"file":"overrides.spec.js"}