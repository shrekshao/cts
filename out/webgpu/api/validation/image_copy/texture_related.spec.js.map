{"version":3,"sources":["../../../../../src/webgpu/api/validation/image_copy/texture_related.spec.ts"],"names":["description","makeTestGroup","assert","kColorTextureFormats","kSizedTextureFormats","kTextureDimensions","kTextureFormatInfo","textureDimensionAndFormatCompatible","GPUConst","kResourceStates","align","virtualMipSize","kImageCopyTypes","ImageCopyTest","texelBlockAlignmentTestExpanderForValueToCoordinate","formatCopyableWithMethod","getACopyableAspectWithMethod","g","test","desc","params","u","combine","combineWithParams","dimension","size","fn","t","method","textureState","texture","createTextureWithState","format","usage","GPUTextureUsage","COPY_SRC","COPY_DST","success","submit","testRun","bytesPerRow","width","height","depthOrArrayLayers","dataSize","paramsSubcasesOnly","mismatched","selectMismatchedDeviceOrSkipTestCase","undefined","device","mismatchedDevice","createTexture","beginSubcases","TextureUsage","TEXTURE_BINDING","sampleCount","unless","p","mipLevelCount","mipLevel","filter","expand","d","copyWidthModifier","copyHeightModifier","copyDepthModifier","info","selectDeviceOrSkipTestCase","feature","blockWidth","blockHeight","depth","stencil","levelSize","copySize","aspect","rowsPerImage","coordinateToTest","valueToCoordinate","origin","x","y","z","createAlignedTexture","Math","max","ceil","bytesPerBlock","originValue","copySizeValue","textureSizeValue","textureSize"],"mappings":"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","sourcesContent":["export const description = `Texture related validation tests for B2T copy and T2B copy and writeTexture.`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert } from '../../../../common/util/util.js';\nimport {\n  kColorTextureFormats,\n  kSizedTextureFormats,\n  kTextureDimensions,\n  kTextureFormatInfo,\n  textureDimensionAndFormatCompatible,\n} from '../../../capability_info.js';\nimport { GPUConst } from '../../../constants.js';\nimport { kResourceStates } from '../../../gpu_test.js';\nimport { align } from '../../../util/math.js';\nimport { virtualMipSize } from '../../../util/texture/base.js';\nimport { kImageCopyTypes } from '../../../util/texture/layout.js';\n\nimport {\n  ImageCopyTest,\n  texelBlockAlignmentTestExpanderForValueToCoordinate,\n  formatCopyableWithMethod,\n  getACopyableAspectWithMethod,\n} from './image_copy.js';\n\nexport const g = makeTestGroup(ImageCopyTest);\n\ng.test('valid')\n  .desc(\n    `\nTest that the texture must be valid and not destroyed.\n- for all copy methods\n- for all texture states\n- for various dimensions\n`\n  )\n  .params(u =>\n    u //\n      .combine('method', kImageCopyTypes)\n      .combine('textureState', kResourceStates)\n      .combineWithParams([\n        { dimension: '1d', size: [4, 1, 1] },\n        { dimension: '2d', size: [4, 4, 1] },\n        { dimension: '2d', size: [4, 4, 3] },\n        { dimension: '3d', size: [4, 4, 3] },\n      ] as const)\n  )\n  .fn(async t => {\n    const { method, textureState, size, dimension } = t.params;\n\n    const texture = t.createTextureWithState(textureState, {\n      size,\n      dimension,\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    const success = textureState === 'valid';\n    const submit = textureState !== 'invalid';\n\n    t.testRun(\n      { texture },\n      { bytesPerRow: 0 },\n      { width: 0, height: 0, depthOrArrayLayers: 0 },\n      { dataSize: 1, method, success, submit }\n    );\n  });\n\ng.test('texture,device_mismatch')\n  .desc('Tests the image copies cannot be called with a texture created from another device')\n  .paramsSubcasesOnly(u =>\n    u.combine('method', kImageCopyTypes).combine('mismatched', [true, false])\n  )\n  .fn(async t => {\n    const { method, mismatched } = t.params;\n\n    if (mismatched) {\n      await t.selectMismatchedDeviceOrSkipTestCase(undefined);\n    }\n\n    const device = mismatched ? t.mismatchedDevice : t.device;\n\n    const texture = device.createTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    t.testRun(\n      { texture },\n      { bytesPerRow: 0 },\n      { width: 0, height: 0, depthOrArrayLayers: 0 },\n      { dataSize: 1, method, success: !mismatched }\n    );\n  });\n\ng.test('usage')\n  .desc(\n    `\nThe texture must have the appropriate COPY_SRC/COPY_DST usage.\n- for various copy methods\n- for various dimensions\n- for various usages\n\nTODO: update to test all texture usages`\n  )\n  .params(u =>\n    u\n      .combine('method', kImageCopyTypes)\n      .combineWithParams([\n        { dimension: '1d', size: [4, 1, 1] },\n        { dimension: '2d', size: [4, 4, 1] },\n        { dimension: '2d', size: [4, 4, 3] },\n        { dimension: '3d', size: [4, 4, 3] },\n      ] as const)\n      .beginSubcases()\n      .combine('usage', [\n        GPUConst.TextureUsage.COPY_SRC | GPUConst.TextureUsage.TEXTURE_BINDING,\n        GPUConst.TextureUsage.COPY_DST | GPUConst.TextureUsage.TEXTURE_BINDING,\n        GPUConst.TextureUsage.COPY_SRC | GPUConst.TextureUsage.COPY_DST,\n      ])\n  )\n  .fn(async t => {\n    const { usage, method, size, dimension } = t.params;\n\n    const texture = t.device.createTexture({\n      size,\n      dimension,\n      format: 'rgba8unorm',\n      usage,\n    });\n\n    const success =\n      method === 'CopyT2B'\n        ? (usage & GPUTextureUsage.COPY_SRC) !== 0\n        : (usage & GPUTextureUsage.COPY_DST) !== 0;\n\n    t.testRun(\n      { texture },\n      { bytesPerRow: 0 },\n      { width: 0, height: 0, depthOrArrayLayers: 0 },\n      { dataSize: 1, method, success }\n    );\n  });\n\ng.test('sample_count')\n  .desc(\n    `\nTest that multisampled textures cannot be copied.\n- for various copy methods\n- multisampled or not\n\nNote: we don't test 1D, 2D array and 3D textures because multisample is not supported them.\n`\n  )\n  .params(u =>\n    u //\n      .combine('method', kImageCopyTypes)\n      .beginSubcases()\n      .combine('sampleCount', [1, 4])\n  )\n  .fn(async t => {\n    const { sampleCount, method } = t.params;\n\n    const texture = t.device.createTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      sampleCount,\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n    });\n\n    const success = sampleCount === 1;\n\n    t.testRun(\n      { texture },\n      { bytesPerRow: 0 },\n      { width: 0, height: 0, depthOrArrayLayers: 0 },\n      { dataSize: 1, method, success }\n    );\n  });\n\ng.test('mip_level')\n  .desc(\n    `\nTest that the mipLevel of the copy must be in range of the texture.\n- for various copy methods\n- for various dimensions\n- for several mipLevelCounts\n- for several target/source mipLevels`\n  )\n  .params(u =>\n    u\n      .combine('method', kImageCopyTypes)\n      .combineWithParams([\n        { dimension: '1d', size: [32, 1, 1] },\n        { dimension: '2d', size: [32, 32, 1] },\n        { dimension: '2d', size: [32, 32, 3] },\n        { dimension: '3d', size: [32, 32, 3] },\n      ] as const)\n      .beginSubcases()\n      .combine('mipLevelCount', [1, 3, 5])\n      .unless(p => p.dimension === '1d' && p.mipLevelCount !== 1)\n      .combine('mipLevel', [0, 1, 3, 4])\n  )\n  .fn(async t => {\n    const { mipLevelCount, mipLevel, method, size, dimension } = t.params;\n\n    const texture = t.device.createTexture({\n      size,\n      dimension,\n      mipLevelCount,\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    const success = mipLevel < mipLevelCount;\n\n    t.testRun(\n      { texture, mipLevel },\n      { bytesPerRow: 0 },\n      { width: 0, height: 0, depthOrArrayLayers: 0 },\n      { dataSize: 1, method, success }\n    );\n  });\n\ng.test('format')\n  .desc(\n    `\nTest the copy must be a full subresource if the texture's format is depth/stencil format.\n- for various copy methods\n- for various dimensions\n- for all sized formats\n- for a couple target/source mipLevels\n- for some modifier (or not) for the full copy size\n`\n  )\n  .params(u =>\n    u //\n      .combine('method', kImageCopyTypes)\n      .combineWithParams([\n        { depthOrArrayLayers: 1, dimension: '1d' },\n        { depthOrArrayLayers: 1, dimension: '2d' },\n        { depthOrArrayLayers: 3, dimension: '2d' },\n        { depthOrArrayLayers: 32, dimension: '3d' },\n      ] as const)\n      .combine('format', kSizedTextureFormats)\n      .filter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format))\n      .filter(formatCopyableWithMethod)\n      .beginSubcases()\n      .combine('mipLevel', [0, 2])\n      .unless(p => p.dimension === '1d' && p.mipLevel !== 0)\n      .combine('copyWidthModifier', [0, -1])\n      .combine('copyHeightModifier', [0, -1])\n      // If the texture has multiple depth/array slices and it is not a 3D texture, which means it is an array texture,\n      // depthModifier is not needed upon the third dimension. Because different layers are different subresources in\n      // an array texture. Whether it is a full copy or non-full copy doesn't make sense across different subresources.\n      // However, different depth slices on the same mip level are within the same subresource for a 3d texture. So we\n      // need to examine depth dimension via copyDepthModifier to determine whether it is a full copy for a 3D texture.\n      .expand('copyDepthModifier', ({ dimension: d }) => (d === '3d' ? [0, -1] : [0]))\n  )\n  .fn(async t => {\n    const {\n      method,\n      depthOrArrayLayers,\n      dimension,\n      format,\n      mipLevel,\n      copyWidthModifier,\n      copyHeightModifier,\n      copyDepthModifier,\n    } = t.params;\n\n    const info = kTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    const size = { width: 32 * info.blockWidth, height: 32 * info.blockHeight, depthOrArrayLayers };\n    if (dimension === '1d') {\n      size.height = 1;\n    }\n\n    const texture = t.device.createTexture({\n      size,\n      dimension,\n      format,\n      mipLevelCount: dimension === '1d' ? 1 : 5,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    let success = true;\n    if (\n      (info.depth || info.stencil) &&\n      (copyWidthModifier !== 0 || copyHeightModifier !== 0 || copyDepthModifier !== 0)\n    ) {\n      success = false;\n    }\n\n    const levelSize = virtualMipSize(\n      dimension,\n      [size.width, size.height, size.depthOrArrayLayers],\n      mipLevel\n    );\n    const copySize = [\n      levelSize[0] + copyWidthModifier * info.blockWidth,\n      levelSize[1] + copyHeightModifier * info.blockHeight,\n      // Note that compressed format is not supported for 3D textures yet, so there is no info.blockDepth.\n      levelSize[2] + copyDepthModifier,\n    ];\n\n    t.testRun(\n      { texture, mipLevel, aspect: getACopyableAspectWithMethod({ format, method }) },\n      { bytesPerRow: 512, rowsPerImage: 32 },\n      copySize,\n      {\n        dataSize: 512 * 32 * 32,\n        method,\n        success,\n      }\n    );\n  });\n\ng.test('origin_alignment')\n  .desc(\n    `\nTest that the texture copy origin must be aligned to the format's block size.\n- for various copy methods\n- for all color formats (depth stencil formats require a full copy)\n- for X, Y and Z coordinates\n- for various values for that coordinate depending on the block size\n`\n  )\n  .params(u =>\n    u\n      .combine('method', kImageCopyTypes)\n      // No need to test depth/stencil formats because its copy origin must be [0, 0, 0], which is already aligned with block size.\n      .combine('format', kColorTextureFormats)\n      .filter(formatCopyableWithMethod)\n      .combineWithParams([\n        { depthOrArrayLayers: 1, dimension: '1d' },\n        { depthOrArrayLayers: 1, dimension: '2d' },\n        { depthOrArrayLayers: 3, dimension: '2d' },\n        { depthOrArrayLayers: 3, dimension: '3d' },\n      ] as const)\n      .filter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format))\n      .beginSubcases()\n      .combine('coordinateToTest', ['x', 'y', 'z'] as const)\n      .unless(p => p.dimension === '1d' && p.coordinateToTest !== 'x')\n      .expand('valueToCoordinate', texelBlockAlignmentTestExpanderForValueToCoordinate)\n  )\n  .fn(async t => {\n    const {\n      valueToCoordinate,\n      coordinateToTest,\n      format,\n      method,\n      depthOrArrayLayers,\n      dimension,\n    } = t.params;\n    const info = kTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    const size = { width: 0, height: 0, depthOrArrayLayers };\n    const origin = { x: 0, y: 0, z: 0 };\n    let success = true;\n\n    origin[coordinateToTest] = valueToCoordinate;\n    switch (coordinateToTest) {\n      case 'x': {\n        success = origin.x % info.blockWidth === 0;\n        break;\n      }\n      case 'y': {\n        success = origin.y % info.blockHeight === 0;\n        break;\n      }\n    }\n\n    const texture = t.createAlignedTexture(format, size, origin, dimension);\n\n    t.testRun({ texture, origin }, { bytesPerRow: 0, rowsPerImage: 0 }, size, {\n      dataSize: 1,\n      method,\n      success,\n    });\n  });\n\ng.test('size_alignment')\n  .desc(\n    `\nTest that the copy size must be aligned to the texture's format's block size.\n- for various copy methods\n- for all formats (depth-stencil formats require a full copy)\n- for all texture dimensions\n- for the size's parameters to test (width / height / depth)\n- for various values for that copy size parameters, depending on the block size\n`\n  )\n  .params(u =>\n    u\n      .combine('method', kImageCopyTypes)\n      // No need to test depth/stencil formats because its copy size must be subresource's size, which is already aligned with block size.\n      .combine('format', kColorTextureFormats)\n      .filter(formatCopyableWithMethod)\n      .combine('dimension', kTextureDimensions)\n      .filter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format))\n      .beginSubcases()\n      .combine('coordinateToTest', ['width', 'height', 'depthOrArrayLayers'] as const)\n      .unless(p => p.dimension === '1d' && p.coordinateToTest !== 'width')\n      .expand('valueToCoordinate', texelBlockAlignmentTestExpanderForValueToCoordinate)\n  )\n  .fn(async t => {\n    const { valueToCoordinate, coordinateToTest, dimension, format, method } = t.params;\n    const info = kTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    const size = { width: 0, height: 0, depthOrArrayLayers: 0 };\n    const origin = { x: 0, y: 0, z: 0 };\n    let success = true;\n\n    size[coordinateToTest] = valueToCoordinate;\n    switch (coordinateToTest) {\n      case 'width': {\n        success = size.width % info.blockWidth === 0;\n        break;\n      }\n      case 'height': {\n        success = size.height % info.blockHeight === 0;\n        break;\n      }\n    }\n\n    const texture = t.createAlignedTexture(format, size, origin, dimension);\n\n    const bytesPerRow = align(\n      Math.max(1, Math.ceil(size.width / info.blockWidth)) * info.bytesPerBlock,\n      256\n    );\n    const rowsPerImage = Math.ceil(size.height / info.blockHeight);\n    t.testRun({ texture, origin }, { bytesPerRow, rowsPerImage }, size, {\n      dataSize: 1,\n      method,\n      success,\n    });\n  });\n\ng.test('copy_rectangle')\n  .desc(\n    `\nTest that the max corner of the copy rectangle (origin+copySize) must be inside the texture.\n- for various copy methods\n- for all dimensions\n- for the X, Y and Z dimensions\n- for various origin and copy size values (and texture sizes)\n- for various mip levels\n`\n  )\n  .params(u =>\n    u\n      .combine('method', kImageCopyTypes)\n      .combine('dimension', kTextureDimensions)\n      .beginSubcases()\n      .combine('originValue', [7, 8])\n      .combine('copySizeValue', [7, 8])\n      .combine('textureSizeValue', [14, 15])\n      .combine('mipLevel', [0, 2])\n      .combine('coordinateToTest', [0, 1, 2] as const)\n      .unless(p => p.dimension === '1d' && (p.coordinateToTest !== 0 || p.mipLevel !== 0))\n  )\n  .fn(async t => {\n    const {\n      originValue,\n      copySizeValue,\n      textureSizeValue,\n      mipLevel,\n      coordinateToTest,\n      method,\n      dimension,\n    } = t.params;\n    const format = 'rgba8unorm';\n    const info = kTextureFormatInfo[format];\n\n    const origin = [0, 0, 0];\n    const copySize = [0, 0, 0];\n    const textureSize = { width: 16 << mipLevel, height: 16 << mipLevel, depthOrArrayLayers: 16 };\n    if (dimension === '1d') {\n      textureSize.height = 1;\n      textureSize.depthOrArrayLayers = 1;\n    }\n    const success = originValue + copySizeValue <= textureSizeValue;\n\n    origin[coordinateToTest] = originValue;\n    copySize[coordinateToTest] = copySizeValue;\n    switch (coordinateToTest) {\n      case 0: {\n        textureSize.width = textureSizeValue << mipLevel;\n        break;\n      }\n      case 1: {\n        textureSize.height = textureSizeValue << mipLevel;\n        break;\n      }\n      case 2: {\n        textureSize.depthOrArrayLayers =\n          dimension === '3d' ? textureSizeValue << mipLevel : textureSizeValue;\n        break;\n      }\n    }\n\n    const texture = t.device.createTexture({\n      size: textureSize,\n      dimension,\n      mipLevelCount: dimension === '1d' ? 1 : 3,\n      format,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    assert(copySize[0] % info.blockWidth === 0);\n    const bytesPerRow = align(copySize[0] / info.blockWidth, 256);\n    assert(copySize[1] % info.blockHeight === 0);\n    const rowsPerImage = copySize[1] / info.blockHeight;\n    t.testRun({ texture, origin, mipLevel }, { bytesPerRow, rowsPerImage }, copySize, {\n      dataSize: 1,\n      method,\n      success,\n    });\n  });\n"],"file":"texture_related.spec.js"}