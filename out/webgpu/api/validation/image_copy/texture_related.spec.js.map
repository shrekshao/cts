{"version":3,"sources":["../../../../../src/webgpu/api/validation/image_copy/texture_related.spec.ts"],"names":["description","makeTestGroup","assert","kSizedTextureFormats","kTextureFormatInfo","GPUConst","align","kImageCopyTypes","ImageCopyTest","texelBlockAlignmentTestExpanderForValueToCoordinate","formatCopyableWithMethod","g","test","desc","params","u","combine","fn","t","method","textureState","texture","device","createTexture","size","width","height","depthOrArrayLayers","format","usage","GPUTextureUsage","COPY_SRC","COPY_DST","destroy","getErrorTexture","success","submit","testRun","bytesPerRow","dataSize","beginSubcases","TextureUsage","SAMPLED","sampleCount","mipLevelCount","mipLevel","filter","expand","valueToCoordinate","coordinateToTest","info","selectDeviceOrSkipTestCase","feature","origin","x","y","z","blockWidth","blockHeight","createAlignedTexture","combineWithParams","dimension","rowsPerImage","originValue","copySizeValue","textureSizeValue","copySize","textureSize"],"mappings":"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","sourcesContent":["export const description = '';\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert } from '../../../../common/util/util.js';\nimport { kSizedTextureFormats, kTextureFormatInfo } from '../../../capability_info.js';\nimport { GPUConst } from '../../../constants.js';\nimport { align } from '../../../util/math.js';\nimport { kImageCopyTypes } from '../../../util/texture/layout.js';\n\nimport {\n  ImageCopyTest,\n  texelBlockAlignmentTestExpanderForValueToCoordinate,\n  formatCopyableWithMethod,\n} from './image_copy.js';\n\nexport const g = makeTestGroup(ImageCopyTest);\n\ng.test('valid')\n  .desc(`The texture must be valid and not destroyed.`)\n  .params(u =>\n    u //\n      .combine('method', kImageCopyTypes)\n      .combine('textureState', ['valid', 'destroyed', 'error'])\n  )\n  .fn(async t => {\n    const { method, textureState } = t.params;\n\n    // A valid texture.\n    let texture = t.device.createTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    switch (textureState) {\n      case 'destroyed': {\n        texture.destroy();\n        break;\n      }\n      case 'error': {\n        texture = t.getErrorTexture();\n        break;\n      }\n    }\n\n    const success = textureState === 'valid';\n    const submit = textureState === 'destroyed';\n\n    t.testRun(\n      { texture },\n      { bytesPerRow: 0 },\n      { width: 0, height: 0, depthOrArrayLayers: 0 },\n      { dataSize: 1, method, success, submit }\n    );\n  });\n\ng.test('usage')\n  .desc(`The texture must have the appropriate COPY_SRC/COPY_DST usage.`)\n  .params(u =>\n    u\n      .combine('method', kImageCopyTypes)\n      .beginSubcases()\n      .combine('usage', [\n        GPUConst.TextureUsage.COPY_SRC | GPUConst.TextureUsage.SAMPLED,\n        GPUConst.TextureUsage.COPY_DST | GPUConst.TextureUsage.SAMPLED,\n        GPUConst.TextureUsage.COPY_SRC | GPUConst.TextureUsage.COPY_DST,\n      ])\n  )\n  .fn(async t => {\n    const { usage, method } = t.params;\n\n    const texture = t.device.createTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage,\n    });\n\n    const success =\n      method === 'CopyT2B'\n        ? (usage & GPUTextureUsage.COPY_SRC) !== 0\n        : (usage & GPUTextureUsage.COPY_DST) !== 0;\n\n    t.testRun(\n      { texture },\n      { bytesPerRow: 0 },\n      { width: 0, height: 0, depthOrArrayLayers: 0 },\n      { dataSize: 1, method, success }\n    );\n  });\n\ng.test('sample_count')\n  .desc(`Multisampled textures cannot be copied.`)\n  .params(u =>\n    u //\n      .combine('method', kImageCopyTypes)\n      .beginSubcases()\n      .combine('sampleCount', [1, 4])\n  )\n  .fn(async t => {\n    const { sampleCount, method } = t.params;\n\n    const texture = t.device.createTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      sampleCount,\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST | GPUTextureUsage.SAMPLED,\n    });\n\n    const success = sampleCount === 1;\n\n    t.testRun(\n      { texture },\n      { bytesPerRow: 0 },\n      { width: 0, height: 0, depthOrArrayLayers: 0 },\n      { dataSize: 1, method, success }\n    );\n  });\n\ng.test('mip_level')\n  .desc(`The mipLevel of the copy must be in range of the texture.`)\n  .params(u =>\n    u\n      .combine('method', kImageCopyTypes)\n      .beginSubcases()\n      .combine('mipLevelCount', [3, 5])\n      .combine('mipLevel', [3, 4])\n  )\n  .fn(async t => {\n    const { mipLevelCount, mipLevel, method } = t.params;\n\n    const texture = t.device.createTexture({\n      size: { width: 32, height: 32, depthOrArrayLayers: 1 },\n      mipLevelCount,\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    const success = mipLevel < mipLevelCount;\n\n    t.testRun(\n      { texture, mipLevel },\n      { bytesPerRow: 0 },\n      { width: 0, height: 0, depthOrArrayLayers: 0 },\n      { dataSize: 1, method, success }\n    );\n  });\n\ng.test('origin_alignment')\n  .desc(`Copy origin must be aligned to block size.`)\n  .params(u =>\n    u\n      .combine('method', kImageCopyTypes)\n      .combine('format', kSizedTextureFormats)\n      .filter(formatCopyableWithMethod)\n      .beginSubcases()\n      .combine('coordinateToTest', ['x', 'y', 'z'] as const)\n      .expand('valueToCoordinate', texelBlockAlignmentTestExpanderForValueToCoordinate)\n  )\n  .fn(async t => {\n    const { valueToCoordinate, coordinateToTest, format, method } = t.params;\n    const info = kTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    const origin = { x: 0, y: 0, z: 0 };\n    const size = { width: 0, height: 0, depthOrArrayLayers: 0 };\n    let success = true;\n\n    origin[coordinateToTest] = valueToCoordinate;\n    switch (coordinateToTest) {\n      case 'x': {\n        success = origin.x % info.blockWidth === 0;\n        break;\n      }\n      case 'y': {\n        success = origin.y % info.blockHeight === 0;\n        break;\n      }\n    }\n\n    const texture = t.createAlignedTexture(format, size, origin);\n\n    t.testRun({ texture, origin }, { bytesPerRow: 0 }, size, {\n      dataSize: 1,\n      method,\n      success,\n    });\n  });\n\ng.test('1d')\n  .desc(`1d texture copies must have height=depth=1.`)\n  .params(u =>\n    u\n      .combine('method', kImageCopyTypes)\n      .beginSubcases()\n      .combine('width', [0, 1])\n      .combineWithParams([\n        { height: 1, depthOrArrayLayers: 1 },\n        { height: 1, depthOrArrayLayers: 0 },\n        { height: 1, depthOrArrayLayers: 2 },\n        { height: 0, depthOrArrayLayers: 1 },\n        { height: 2, depthOrArrayLayers: 1 },\n      ])\n  )\n  .fn(async t => {\n    const { method, width, height, depthOrArrayLayers } = t.params;\n    const size = { width, height, depthOrArrayLayers };\n\n    const texture = t.device.createTexture({\n      size: { width: 2, height: 1, depthOrArrayLayers: 1 },\n      dimension: '1d',\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    // For 1d textures we require copyHeight and copyDepth to be 1,\n    // copyHeight or copyDepth being 0 should cause a validation error.\n    const success = size.height === 1 && size.depthOrArrayLayers === 1;\n\n    t.testRun({ texture }, { bytesPerRow: 256, rowsPerImage: 4 }, size, {\n      dataSize: 16,\n      method,\n      success,\n    });\n  });\n\ng.test('size_alignment')\n  .desc(`Copy size must be aligned to block size.`)\n  .params(u =>\n    u\n      .combine('method', kImageCopyTypes)\n      .combine('format', kSizedTextureFormats)\n      .filter(formatCopyableWithMethod)\n      .beginSubcases()\n      .combine('coordinateToTest', ['width', 'height', 'depthOrArrayLayers'] as const)\n      .expand('valueToCoordinate', texelBlockAlignmentTestExpanderForValueToCoordinate)\n  )\n  .fn(async t => {\n    const { valueToCoordinate, coordinateToTest, format, method } = t.params;\n    const info = kTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    const origin = { x: 0, y: 0, z: 0 };\n    const size = { width: 0, height: 0, depthOrArrayLayers: 0 };\n    let success = true;\n\n    size[coordinateToTest] = valueToCoordinate;\n    switch (coordinateToTest) {\n      case 'width': {\n        success = size.width % info.blockWidth === 0;\n        break;\n      }\n      case 'height': {\n        success = size.height % info.blockHeight === 0;\n        break;\n      }\n    }\n\n    const texture = t.createAlignedTexture(format, size, origin);\n\n    assert(size.width % info.blockWidth === 0);\n    const bytesPerRow = align(size.width / info.blockWidth, 256);\n    assert(size.height % info.blockHeight === 0);\n    const rowsPerImage = size.height / info.blockHeight;\n    t.testRun({ texture, origin }, { bytesPerRow, rowsPerImage }, size, {\n      dataSize: 1,\n      method,\n      success,\n    });\n  });\n\ng.test('copy_rectangle')\n  .desc(`The max corner of the copy rectangle (origin+copySize) must be inside the texture.`)\n  .params(u =>\n    u\n      .combine('method', kImageCopyTypes)\n      .beginSubcases()\n      .combine('originValue', [7, 8])\n      .combine('copySizeValue', [7, 8])\n      .combine('textureSizeValue', [14, 15])\n      .combine('mipLevel', [0, 2])\n      .combine('coordinateToTest', [0, 1, 2] as const)\n  )\n  .fn(async t => {\n    const {\n      originValue,\n      copySizeValue,\n      textureSizeValue,\n      mipLevel,\n      coordinateToTest,\n      method,\n    } = t.params;\n    const format = 'rgba8unorm';\n    const info = kTextureFormatInfo[format];\n\n    const origin = [0, 0, 0];\n    const copySize = [0, 0, 0];\n    const textureSize = { width: 16 << mipLevel, height: 16 << mipLevel, depthOrArrayLayers: 16 };\n    const success = originValue + copySizeValue <= textureSizeValue;\n\n    origin[coordinateToTest] = originValue;\n    copySize[coordinateToTest] = copySizeValue;\n    switch (coordinateToTest) {\n      case 0: {\n        textureSize.width = textureSizeValue << mipLevel;\n        break;\n      }\n      case 1: {\n        textureSize.height = textureSizeValue << mipLevel;\n        break;\n      }\n      case 2: {\n        textureSize.depthOrArrayLayers = textureSizeValue;\n        break;\n      }\n    }\n\n    const texture = t.device.createTexture({\n      size: textureSize,\n      mipLevelCount: 3,\n      format,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    assert(copySize[0] % info.blockWidth === 0);\n    const bytesPerRow = align(copySize[0] / info.blockWidth, 256);\n    assert(copySize[1] % info.blockHeight === 0);\n    const rowsPerImage = copySize[1] / info.blockHeight;\n    t.testRun({ texture, origin, mipLevel }, { bytesPerRow, rowsPerImage }, copySize, {\n      dataSize: 1,\n      method,\n      success,\n    });\n  });\n"],"file":"texture_related.spec.js"}