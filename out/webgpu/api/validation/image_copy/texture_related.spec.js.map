{"version":3,"sources":["../../../../../src/webgpu/api/validation/image_copy/texture_related.spec.ts"],"names":["description","makeTestGroup","assert","kColorTextureFormats","kSizedTextureFormats","kTextureFormatInfo","textureDimensionAndFormatCompatible","GPUConst","align","virtualMipSize","kImageCopyTypes","ImageCopyTest","texelBlockAlignmentTestExpanderForValueToCoordinate","formatCopyableWithMethod","getACopyableAspectWithMethod","g","test","desc","params","u","combine","combineWithParams","depthOrArrayLayers","dimension","fn","t","method","textureState","texture","device","createTexture","size","width","height","format","usage","GPUTextureUsage","COPY_SRC","COPY_DST","destroy","getErrorTexture","success","submit","testRun","bytesPerRow","dataSize","paramsSubcasesOnly","unimplemented","beginSubcases","TextureUsage","TEXTURE_BINDING","sampleCount","mipLevelCount","mipLevel","filter","expand","d","copyWidthModifier","copyHeightModifier","copyDepthModifier","info","selectDeviceOrSkipTestCase","feature","blockWidth","blockHeight","depth","stencil","levelSize","copySize","aspect","rowsPerImage","valueToCoordinate","coordinateToTest","origin","x","y","z","createAlignedTexture","Math","max","ceil","bytesPerBlock","originValue","copySizeValue","textureSizeValue","textureSize"],"mappings":"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","sourcesContent":["export const description = `\n  texture related validation tests for B2T copy and T2B copy and writeTexture.\n\n  Note: see api,validation,encoding,cmds,copyTextureToTexture:* for validation tests of T2T copy.\n\n  TODO: expand the tests below to 1d texture.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert } from '../../../../common/util/util.js';\nimport {\n  kColorTextureFormats,\n  kSizedTextureFormats,\n  kTextureFormatInfo,\n  textureDimensionAndFormatCompatible,\n} from '../../../capability_info.js';\nimport { GPUConst } from '../../../constants.js';\nimport { align } from '../../../util/math.js';\nimport { virtualMipSize } from '../../../util/texture/base.js';\nimport { kImageCopyTypes } from '../../../util/texture/layout.js';\n\nimport {\n  ImageCopyTest,\n  texelBlockAlignmentTestExpanderForValueToCoordinate,\n  formatCopyableWithMethod,\n  getACopyableAspectWithMethod,\n} from './image_copy.js';\n\nexport const g = makeTestGroup(ImageCopyTest);\n\ng.test('valid')\n  .desc(`The texture must be valid and not destroyed.`)\n  .params(u =>\n    u //\n      .combine('method', kImageCopyTypes)\n      .combine('textureState', ['valid', 'destroyed', 'error'])\n      .combineWithParams([\n        { depthOrArrayLayers: 1, dimension: '2d' },\n        { depthOrArrayLayers: 3, dimension: '2d' },\n        { depthOrArrayLayers: 3, dimension: '3d' },\n      ] as const)\n  )\n  .fn(async t => {\n    const { method, textureState, depthOrArrayLayers, dimension } = t.params;\n\n    // A valid texture.\n    let texture = t.device.createTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers },\n      dimension,\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    switch (textureState) {\n      case 'destroyed': {\n        texture.destroy();\n        break;\n      }\n      case 'error': {\n        texture = t.getErrorTexture();\n        break;\n      }\n    }\n\n    const success = textureState === 'valid';\n    const submit = textureState === 'destroyed';\n\n    t.testRun(\n      { texture },\n      { bytesPerRow: 0 },\n      { width: 0, height: 0, depthOrArrayLayers: 0 },\n      { dataSize: 1, method, success, submit }\n    );\n  });\n\ng.test('texture,device_mismatch')\n  .desc('Tests the image copies cannot be called with a texture created from another device')\n  .paramsSubcasesOnly(u =>\n    u.combine('method', kImageCopyTypes).combine('mismatched', [true, false])\n  )\n  .unimplemented();\n\ng.test('buffer,device_mismatch')\n  .desc('Tests the image copies cannot be called with a buffer created from another device')\n  .paramsSubcasesOnly(u =>\n    u.combine('method', ['CopyB2T', 'CopyT2B'] as const).combine('mismatched', [true, false])\n  )\n  .unimplemented();\n\ng.test('usage')\n  .desc(`The texture must have the appropriate COPY_SRC/COPY_DST usage.`)\n  .params(u =>\n    u\n      .combine('method', kImageCopyTypes)\n      .combineWithParams([\n        { depthOrArrayLayers: 1, dimension: '2d' },\n        { depthOrArrayLayers: 3, dimension: '2d' },\n        { depthOrArrayLayers: 3, dimension: '3d' },\n      ] as const)\n      .beginSubcases()\n      .combine('usage', [\n        GPUConst.TextureUsage.COPY_SRC | GPUConst.TextureUsage.TEXTURE_BINDING,\n        GPUConst.TextureUsage.COPY_DST | GPUConst.TextureUsage.TEXTURE_BINDING,\n        GPUConst.TextureUsage.COPY_SRC | GPUConst.TextureUsage.COPY_DST,\n      ])\n  )\n  .fn(async t => {\n    const { usage, method, depthOrArrayLayers, dimension } = t.params;\n\n    const texture = t.device.createTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers },\n      dimension,\n      format: 'rgba8unorm',\n      usage,\n    });\n\n    const success =\n      method === 'CopyT2B'\n        ? (usage & GPUTextureUsage.COPY_SRC) !== 0\n        : (usage & GPUTextureUsage.COPY_DST) !== 0;\n\n    t.testRun(\n      { texture },\n      { bytesPerRow: 0 },\n      { width: 0, height: 0, depthOrArrayLayers: 0 },\n      { dataSize: 1, method, success }\n    );\n  });\n\ng.test('sample_count')\n  .desc(\n    `Multisampled textures cannot be copied. Note that we don't test 2D array and 3D textures because multisample is not supported for 2D array and 3D texture creation`\n  )\n  .params(u =>\n    u //\n      .combine('method', kImageCopyTypes)\n      .beginSubcases()\n      .combine('sampleCount', [1, 4])\n  )\n  .fn(async t => {\n    const { sampleCount, method } = t.params;\n\n    const texture = t.device.createTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      sampleCount,\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n    });\n\n    const success = sampleCount === 1;\n\n    t.testRun(\n      { texture },\n      { bytesPerRow: 0 },\n      { width: 0, height: 0, depthOrArrayLayers: 0 },\n      { dataSize: 1, method, success }\n    );\n  });\n\ng.test('mip_level')\n  .desc(`The mipLevel of the copy must be in range of the texture.`)\n  .params(u =>\n    u\n      .combine('method', kImageCopyTypes)\n      .combineWithParams([\n        { depthOrArrayLayers: 1, dimension: '2d' },\n        { depthOrArrayLayers: 3, dimension: '2d' },\n        { depthOrArrayLayers: 3, dimension: '3d' },\n      ] as const)\n      .beginSubcases()\n      .combine('mipLevelCount', [3, 5])\n      .combine('mipLevel', [3, 4])\n  )\n  .fn(async t => {\n    const { mipLevelCount, mipLevel, method, depthOrArrayLayers, dimension } = t.params;\n\n    const texture = t.device.createTexture({\n      size: { width: 32, height: 32, depthOrArrayLayers },\n      dimension,\n      mipLevelCount,\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    const success = mipLevel < mipLevelCount;\n\n    t.testRun(\n      { texture, mipLevel },\n      { bytesPerRow: 0 },\n      { width: 0, height: 0, depthOrArrayLayers: 0 },\n      { dataSize: 1, method, success }\n    );\n  });\n\ng.test('format')\n  .desc(`Test that it must be a full copy if the texture's format is depth/stencil format`)\n  .params(u =>\n    u //\n      .combine('method', kImageCopyTypes)\n      .combineWithParams([\n        { depthOrArrayLayers: 1, dimension: '2d' },\n        { depthOrArrayLayers: 3, dimension: '2d' },\n        { depthOrArrayLayers: 32, dimension: '3d' },\n      ] as const)\n      .combine('format', kSizedTextureFormats)\n      .filter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format))\n      .filter(formatCopyableWithMethod)\n      .beginSubcases()\n      .combine('mipLevel', [0, 2])\n      .combine('copyWidthModifier', [0, -1])\n      .combine('copyHeightModifier', [0, -1])\n      // If the texture has multiple depth/array slices and it is not a 3D texture, which means it is an array texture,\n      // depthModifier is not needed upon the third dimension. Because different layers are different subresources in\n      // an array texture. Whether it is a full copy or non-full copy doesn't make sense across different subresources.\n      // However, different depth slices on the same mip level are within the same subresource for a 3d texture. So we\n      // need to examine depth dimension via copyDepthModifier to determine whether it is a full copy for a 3D texture.\n      .expand('copyDepthModifier', ({ dimension: d }) => (d === '3d' ? [0, -1] : [0]))\n  )\n  .fn(async t => {\n    const {\n      method,\n      depthOrArrayLayers,\n      dimension,\n      format,\n      mipLevel,\n      copyWidthModifier,\n      copyHeightModifier,\n      copyDepthModifier,\n    } = t.params;\n\n    const info = kTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    const size = { width: 32 * info.blockWidth, height: 32 * info.blockHeight, depthOrArrayLayers };\n    const texture = t.device.createTexture({\n      size,\n      dimension,\n      format,\n      mipLevelCount: 5,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    let success = true;\n    if (\n      (info.depth || info.stencil) &&\n      (copyWidthModifier !== 0 || copyHeightModifier !== 0 || copyDepthModifier !== 0)\n    ) {\n      success = false;\n    }\n\n    const levelSize = virtualMipSize(\n      dimension,\n      [size.width, size.height, size.depthOrArrayLayers],\n      mipLevel\n    );\n    const copySize = [\n      levelSize[0] + copyWidthModifier * info.blockWidth,\n      levelSize[1] + copyHeightModifier * info.blockHeight,\n      // Note that compressed format is not supported for 3D textures yet, so there is no info.blockDepth.\n      levelSize[2] + copyDepthModifier,\n    ];\n\n    t.testRun(\n      { texture, mipLevel, aspect: getACopyableAspectWithMethod({ format, method }) },\n      { bytesPerRow: 512, rowsPerImage: 32 },\n      copySize,\n      {\n        dataSize: 512 * 32 * 32,\n        method,\n        success,\n      }\n    );\n  });\n\ng.test('origin_alignment')\n  .desc(`Copy origin must be aligned to block size.`)\n  .params(u =>\n    u\n      .combine('method', kImageCopyTypes)\n      // No need to test depth/stencil formats because its copy origin must be [0, 0, 0], which is already aligned with block size.\n      .combine('format', kColorTextureFormats)\n      .filter(formatCopyableWithMethod)\n      .combineWithParams([\n        { depthOrArrayLayers: 1, dimension: '2d' },\n        { depthOrArrayLayers: 3, dimension: '2d' },\n        { depthOrArrayLayers: 3, dimension: '3d' },\n      ] as const)\n      .filter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format))\n      .beginSubcases()\n      .combine('coordinateToTest', ['x', 'y', 'z'] as const)\n      .expand('valueToCoordinate', texelBlockAlignmentTestExpanderForValueToCoordinate)\n  )\n  .fn(async t => {\n    const {\n      valueToCoordinate,\n      coordinateToTest,\n      format,\n      method,\n      depthOrArrayLayers,\n      dimension,\n    } = t.params;\n    const info = kTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    const size = { width: 0, height: 0, depthOrArrayLayers };\n    const origin = { x: 0, y: 0, z: 0 };\n    let success = true;\n\n    origin[coordinateToTest] = valueToCoordinate;\n    switch (coordinateToTest) {\n      case 'x': {\n        success = origin.x % info.blockWidth === 0;\n        break;\n      }\n      case 'y': {\n        success = origin.y % info.blockHeight === 0;\n        break;\n      }\n    }\n\n    const texture = t.createAlignedTexture(format, size, origin, dimension);\n\n    t.testRun({ texture, origin }, { bytesPerRow: 0, rowsPerImage: 0 }, size, {\n      dataSize: 1,\n      method,\n      success,\n    });\n  });\n\ng.test('1d')\n  .desc(`1d texture copies must have height=depth=1.`)\n  .params(u =>\n    u\n      .combine('method', kImageCopyTypes)\n      .beginSubcases()\n      .combine('width', [0, 1])\n      .combineWithParams([\n        { height: 1, depthOrArrayLayers: 1 },\n        { height: 1, depthOrArrayLayers: 0 },\n        { height: 1, depthOrArrayLayers: 2 },\n        { height: 0, depthOrArrayLayers: 1 },\n        { height: 2, depthOrArrayLayers: 1 },\n      ])\n  )\n  .fn(async t => {\n    const { method, width, height, depthOrArrayLayers } = t.params;\n    const size = { width, height, depthOrArrayLayers };\n\n    const texture = t.device.createTexture({\n      size: { width: 2, height: 1, depthOrArrayLayers: 1 },\n      dimension: '1d',\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    // For 1d textures we require copyHeight and copyDepth to be 1,\n    // copyHeight or copyDepth being 0 should cause a validation error.\n    const success = size.height === 1 && size.depthOrArrayLayers === 1;\n\n    t.testRun({ texture }, { bytesPerRow: 256, rowsPerImage: 4 }, size, {\n      dataSize: 16,\n      method,\n      success,\n    });\n  });\n\ng.test('size_alignment')\n  .desc(`Copy size must be aligned to block size.`)\n  .params(u =>\n    u\n      .combine('method', kImageCopyTypes)\n      // No need to test depth/stencil formats because its copy size must be subresource's size, which is already aligned with block size.\n      .combine('format', kColorTextureFormats)\n      .filter(formatCopyableWithMethod)\n      .combine('dimension', ['2d', '3d'] as const)\n      .filter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format))\n      .beginSubcases()\n      .combine('coordinateToTest', ['width', 'height', 'depthOrArrayLayers'] as const)\n      .expand('valueToCoordinate', texelBlockAlignmentTestExpanderForValueToCoordinate)\n  )\n  .fn(async t => {\n    const { valueToCoordinate, coordinateToTest, dimension, format, method } = t.params;\n    const info = kTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    const size = { width: 0, height: 0, depthOrArrayLayers: 0 };\n    const origin = { x: 0, y: 0, z: 0 };\n    let success = true;\n\n    size[coordinateToTest] = valueToCoordinate;\n    switch (coordinateToTest) {\n      case 'width': {\n        success = size.width % info.blockWidth === 0;\n        break;\n      }\n      case 'height': {\n        success = size.height % info.blockHeight === 0;\n        break;\n      }\n    }\n\n    const texture = t.createAlignedTexture(format, size, origin, dimension);\n\n    const bytesPerRow = align(\n      Math.max(1, Math.ceil(size.width / info.blockWidth)) * info.bytesPerBlock,\n      256\n    );\n    const rowsPerImage = Math.ceil(size.height / info.blockHeight);\n    t.testRun({ texture, origin }, { bytesPerRow, rowsPerImage }, size, {\n      dataSize: 1,\n      method,\n      success,\n    });\n  });\n\ng.test('copy_rectangle')\n  .desc(`The max corner of the copy rectangle (origin+copySize) must be inside the texture.`)\n  .params(u =>\n    u\n      .combine('method', kImageCopyTypes)\n      .combine('dimension', ['2d', '3d'] as const)\n      .beginSubcases()\n      .combine('originValue', [7, 8])\n      .combine('copySizeValue', [7, 8])\n      .combine('textureSizeValue', [14, 15])\n      .combine('mipLevel', [0, 2])\n      .combine('coordinateToTest', [0, 1, 2] as const)\n  )\n  .fn(async t => {\n    const {\n      originValue,\n      copySizeValue,\n      textureSizeValue,\n      mipLevel,\n      coordinateToTest,\n      method,\n      dimension,\n    } = t.params;\n    const format = 'rgba8unorm';\n    const info = kTextureFormatInfo[format];\n\n    const origin = [0, 0, 0];\n    const copySize = [0, 0, 0];\n    const textureSize = { width: 16 << mipLevel, height: 16 << mipLevel, depthOrArrayLayers: 16 };\n    const success = originValue + copySizeValue <= textureSizeValue;\n\n    origin[coordinateToTest] = originValue;\n    copySize[coordinateToTest] = copySizeValue;\n    switch (coordinateToTest) {\n      case 0: {\n        textureSize.width = textureSizeValue << mipLevel;\n        break;\n      }\n      case 1: {\n        textureSize.height = textureSizeValue << mipLevel;\n        break;\n      }\n      case 2: {\n        textureSize.depthOrArrayLayers =\n          dimension === '3d' ? textureSizeValue << mipLevel : textureSizeValue;\n        break;\n      }\n    }\n\n    const texture = t.device.createTexture({\n      size: textureSize,\n      dimension,\n      mipLevelCount: 3,\n      format,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    assert(copySize[0] % info.blockWidth === 0);\n    const bytesPerRow = align(copySize[0] / info.blockWidth, 256);\n    assert(copySize[1] % info.blockHeight === 0);\n    const rowsPerImage = copySize[1] / info.blockHeight;\n    t.testRun({ texture, origin, mipLevel }, { bytesPerRow, rowsPerImage }, copySize, {\n      dataSize: 1,\n      method,\n      success,\n    });\n  });\n"],"file":"texture_related.spec.js"}