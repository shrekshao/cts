{"version":3,"file":"maxStorageBuffersPerShaderStage.spec.js","names":["range","reorder","kReorderOrderKeys","GPUConst","kMaximumLimitBaseParams","makeLimitTestGroup","kBindGroupTests","kBindingCombinations","getPipelineTypeForBindingCombination","getPerStageWGSLForBindingCombination","kExtraLimits","maxFragmentCombinedOutputResources","limit","g","description","createBindGroupLayout","device","visibility","type","order","numBindings","entries","i","binding","buffer","test","desc","params","combine","ShaderStage","VERTEX","FRAGMENT","COMPUTE","fn","t","limitTest","testValueName","testDeviceWithRequestedMaximumLimits","testValue","shouldError","expectValidationError","kNumGroups","bindGroupLayouts","minInGroup","Math","floor","numInGroup","createPipelineLayout","async","bindingCombination","bindGroupTest","pipelineType","actualLimit","code","j","module","createShaderModule","testCreatePipeline"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/limits/maxStorageBuffersPerShaderStage.spec.ts"],"sourcesContent":["import {\n  range,\n  reorder,\n  kReorderOrderKeys,\n  ReorderOrder,\n} from '../../../../../common/util/util.js';\nimport { GPUConst } from '../../../../constants.js';\n\nimport {\n  kMaximumLimitBaseParams,\n  makeLimitTestGroup,\n  kBindGroupTests,\n  kBindingCombinations,\n  getPipelineTypeForBindingCombination,\n  getPerStageWGSLForBindingCombination,\n  LimitsRequest,\n} from './limit_utils.js';\n\nconst kExtraLimits: LimitsRequest = {\n  maxFragmentCombinedOutputResources: 'adapterLimit',\n};\n\nconst limit = 'maxStorageBuffersPerShaderStage';\nexport const { g, description } = makeLimitTestGroup(limit);\n\nfunction createBindGroupLayout(\n  device: GPUDevice,\n  visibility: number,\n  type: GPUBufferBindingType,\n  order: ReorderOrder,\n  numBindings: number\n) {\n  return device.createBindGroupLayout({\n    entries: reorder(\n      order,\n      range(numBindings, i => ({\n        binding: i,\n        visibility,\n        buffer: { type },\n      }))\n    ),\n  });\n}\n\ng.test('createBindGroupLayout,at_over')\n  .desc(\n    `\n  Test using at and over ${limit} limit in createBindGroupLayout\n  \n  Note: We also test order to make sure the implementation isn't just looking\n  at just the last entry.\n  `\n  )\n  .params(\n    kMaximumLimitBaseParams\n      .combine('visibility', [\n        GPUConst.ShaderStage.VERTEX,\n        GPUConst.ShaderStage.FRAGMENT,\n        GPUConst.ShaderStage.VERTEX | GPUConst.ShaderStage.FRAGMENT,\n        GPUConst.ShaderStage.COMPUTE,\n        GPUConst.ShaderStage.VERTEX | GPUConst.ShaderStage.COMPUTE,\n        GPUConst.ShaderStage.FRAGMENT | GPUConst.ShaderStage.COMPUTE,\n        GPUConst.ShaderStage.VERTEX | GPUConst.ShaderStage.FRAGMENT | GPUConst.ShaderStage.COMPUTE,\n      ])\n      .combine('type', ['storage', 'read-only-storage'] as GPUBufferBindingType[])\n      .combine('order', kReorderOrderKeys)\n  )\n  .fn(async t => {\n    const { limitTest, testValueName, visibility, order, type } = t.params;\n\n    if (visibility & GPUConst.ShaderStage.VERTEX && type === 'storage') {\n      // vertex stage does not support storage buffers\n      return;\n    }\n\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError }) => {\n        await t.expectValidationError(() => {\n          createBindGroupLayout(device, visibility, type, order, testValue);\n        }, shouldError);\n      }\n    );\n  });\n\ng.test('createPipelineLayout,at_over')\n  .desc(\n    `\n  Test using at and over ${limit} limit in createPipelineLayout\n  \n  Note: We also test order to make sure the implementation isn't just looking\n  at just the last entry.\n  `\n  )\n  .params(\n    kMaximumLimitBaseParams\n      .combine('visibility', [\n        GPUConst.ShaderStage.VERTEX,\n        GPUConst.ShaderStage.FRAGMENT,\n        GPUConst.ShaderStage.VERTEX | GPUConst.ShaderStage.FRAGMENT,\n        GPUConst.ShaderStage.COMPUTE,\n        GPUConst.ShaderStage.VERTEX | GPUConst.ShaderStage.COMPUTE,\n        GPUConst.ShaderStage.FRAGMENT | GPUConst.ShaderStage.COMPUTE,\n        GPUConst.ShaderStage.VERTEX | GPUConst.ShaderStage.FRAGMENT | GPUConst.ShaderStage.COMPUTE,\n      ])\n      .combine('type', ['storage', 'read-only-storage'] as GPUBufferBindingType[])\n      .combine('order', kReorderOrderKeys)\n  )\n  .fn(async t => {\n    const { limitTest, testValueName, visibility, order, type } = t.params;\n\n    if (visibility & GPUConst.ShaderStage.VERTEX && type === 'storage') {\n      // vertex stage does not support storage buffers\n      return;\n    }\n\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError }) => {\n        const kNumGroups = 3;\n        const bindGroupLayouts = range(kNumGroups, i => {\n          const minInGroup = Math.floor(testValue / kNumGroups);\n          const numInGroup = i ? minInGroup : testValue - minInGroup * (kNumGroups - 1);\n          return createBindGroupLayout(device, visibility, type, order, numInGroup);\n        });\n        await t.expectValidationError(\n          () => device.createPipelineLayout({ bindGroupLayouts }),\n          shouldError\n        );\n      }\n    );\n  });\n\ng.test('createPipeline,at_over')\n  .desc(\n    `\n  Test using createRenderPipeline(Async) and createComputePipeline(Async) at and over ${limit} limit\n  \n  Note: We also test order to make sure the implementation isn't just looking\n  at just the last entry.\n  `\n  )\n  .params(\n    kMaximumLimitBaseParams\n      .combine('async', [false, true] as const)\n      .combine('bindingCombination', kBindingCombinations)\n      .combine('order', kReorderOrderKeys)\n      .combine('bindGroupTest', kBindGroupTests)\n  )\n  .fn(async t => {\n    const { limitTest, testValueName, async, bindingCombination, order, bindGroupTest } = t.params;\n    const pipelineType = getPipelineTypeForBindingCombination(bindingCombination);\n\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, actualLimit, shouldError }) => {\n        const code = getPerStageWGSLForBindingCombination(\n          bindingCombination,\n          order,\n          bindGroupTest,\n          (i, j) => `var<storage> u${j}_${i}: f32`,\n          (i, j) => `_ = u${j}_${i};`,\n          testValue\n        );\n        const module = device.createShaderModule({ code });\n\n        await t.testCreatePipeline(\n          pipelineType,\n          async,\n          module,\n          shouldError,\n          `actualLimit: ${actualLimit}, testValue: ${testValue}\\n:${code}`\n        );\n      },\n      kExtraLimits\n    );\n  });\n"],"mappings":"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"}