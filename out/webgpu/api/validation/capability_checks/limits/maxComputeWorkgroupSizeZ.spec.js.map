{"version":3,"file":"maxComputeWorkgroupSizeZ.spec.js","names":["kMaximumLimitBaseParams","makeLimitTestGroup","limit","g","description","test","desc","params","fn","t","limitTest","testValueName","testDeviceWithRequestedMaximumLimits","device","testValue","actualLimit","shouldError","module","getModuleForWorkgroupSize","testForValidationErrorWithPossibleOutOfMemoryError","createComputePipeline","layout","compute","entryPoint","promise","createComputePipelineAsync","shouldRejectConditionally"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/limits/maxComputeWorkgroupSizeZ.spec.ts"],"sourcesContent":["import { kMaximumLimitBaseParams, makeLimitTestGroup } from './limit_utils.js';\n\nconst limit = 'maxComputeWorkgroupSizeZ';\nexport const { g, description } = makeLimitTestGroup(limit);\n\ng.test('createComputePipeline,at_over')\n  .desc(`Test using createComputePipeline at and over ${limit} limit`)\n  .params(kMaximumLimitBaseParams)\n  .fn(async t => {\n    const { limitTest, testValueName } = t.params;\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, actualLimit, shouldError }) => {\n        const module = t.getModuleForWorkgroupSize([1, 1, testValue]);\n\n        await t.testForValidationErrorWithPossibleOutOfMemoryError(\n          () => {\n            device.createComputePipeline({\n              layout: 'auto',\n              compute: {\n                module,\n                entryPoint: 'main',\n              },\n            });\n          },\n          shouldError,\n          `size: ${testValue}, limit: ${actualLimit}`\n        );\n      }\n    );\n  });\n\ng.test('createComputePipelineAsync,at_over')\n  .desc(`Test using createComputePipeline at and over ${limit} limit`)\n  .params(kMaximumLimitBaseParams)\n  .fn(async t => {\n    const { limitTest, testValueName } = t.params;\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError }) => {\n        const module = t.getModuleForWorkgroupSize([1, 1, testValue]);\n\n        const promise = device.createComputePipelineAsync({\n          layout: 'auto',\n          compute: {\n            module,\n            entryPoint: 'main',\n          },\n        });\n        await t.shouldRejectConditionally('OperationError', promise, shouldError);\n      }\n    );\n  });\n"],"mappings":";AAAA;AAAA,GAAA,SAASA,uBAAuB,EAAEC,kBAAkB,QAAQ,kBAAkB,CAE9E,MAAMC,KAAK,GAAG,0BAA0B;AACxC,OAAO,MAAM,EAAEC,CAAC,EAAEC,WAAW,CAAC,CAAC,GAAGH,kBAAkB,CAACC,KAAK,CAAC;;AAE3DC,CAAC,CAACE,IAAI,CAAC,+BAA+B,CAAC;AACpCC,IAAI,CAAE,gDAA+CJ,KAAM,QAAO,CAAC;AACnEK,MAAM,CAACP,uBAAuB,CAAC;AAC/BQ,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAM,EAAEC,SAAS,EAAEC,aAAa,CAAC,CAAC,GAAGF,CAAC,CAACF,MAAM;EAC7C,MAAME,CAAC,CAACG,oCAAoC;EAC1CF,SAAS;EACTC,aAAa;EACb,OAAO,EAAEE,MAAM,EAAEC,SAAS,EAAEC,WAAW,EAAEC,WAAW,CAAC,CAAC,KAAK;IACzD,MAAMC,MAAM,GAAGR,CAAC,CAACS,yBAAyB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAEJ,SAAS,CAAC,CAAC;;IAE7D,MAAML,CAAC,CAACU,kDAAkD;IACxD,MAAM;MACJN,MAAM,CAACO,qBAAqB,CAAC;QAC3BC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACPL,MAAM;UACNM,UAAU,EAAE;QACd;MACF,CAAC,CAAC;IACJ,CAAC;IACDP,WAAW;IACV,SAAQF,SAAU,YAAWC,WAAY,EAAC,CAC5C;;EACH,CAAC,CACF;;AACH,CAAC,CAAC;;AAEJZ,CAAC,CAACE,IAAI,CAAC,oCAAoC,CAAC;AACzCC,IAAI,CAAE,gDAA+CJ,KAAM,QAAO,CAAC;AACnEK,MAAM,CAACP,uBAAuB,CAAC;AAC/BQ,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAM,EAAEC,SAAS,EAAEC,aAAa,CAAC,CAAC,GAAGF,CAAC,CAACF,MAAM;EAC7C,MAAME,CAAC,CAACG,oCAAoC;EAC1CF,SAAS;EACTC,aAAa;EACb,OAAO,EAAEE,MAAM,EAAEC,SAAS,EAAEE,WAAW,CAAC,CAAC,KAAK;IAC5C,MAAMC,MAAM,GAAGR,CAAC,CAACS,yBAAyB,CAAC,CAAC,CAAC,EAAE,CAAC,EAAEJ,SAAS,CAAC,CAAC;;IAE7D,MAAMU,OAAO,GAAGX,MAAM,CAACY,0BAA0B,CAAC;MAChDJ,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACPL,MAAM;QACNM,UAAU,EAAE;MACd;IACF,CAAC,CAAC;IACF,MAAMd,CAAC,CAACiB,yBAAyB,CAAC,gBAAgB,EAAEF,OAAO,EAAER,WAAW,CAAC;EAC3E,CAAC,CACF;;AACH,CAAC,CAAC"}