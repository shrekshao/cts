{"version":3,"file":"maxFragmentCombinedOutputResources.spec.js","names":["range","computeBytesPerSample","kMaximumLimitBaseParams","makeLimitTestGroup","select","array","i","length","kTextureStorageTypes","type","coords","getPipelineDescriptor","device","testValue","numStorageResourcesTargetPerType","numStorageBuffers","Math","min","limits","maxStorageBuffersPerShaderStage","numStorageTextures","maxStorageTexturesPerShaderStage","numTargets","bindingAndGroup","bindingOffset","code","join","module","createShaderModule","pipelineDescriptor","layout","vertex","entryPoint","fragment","targets","Array","fill","format","writeMask","kExtraLimits","maxColorAttachments","maxColorAttachmentBytesPerSample","limit","g","description","test","desc","params","combine","fn","t","limitTest","testValueName","async","testDeviceWithRequestedMaximumLimits","shouldError","bytesPerSample","testCreateRenderPipeline"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/limits/maxFragmentCombinedOutputResources.spec.ts"],"sourcesContent":["import { range } from '../../../../../common/util/util.js';\n\nimport {\n  computeBytesPerSample,\n  kMaximumLimitBaseParams,\n  makeLimitTestGroup,\n  LimitsRequest,\n} from './limit_utils.js';\n\nfunction select<T>(array: T[], i: number) {\n  return array[i % array.length];\n}\n\nconst kTextureStorageTypes = [\n  { type: 'texture_storage_1d', coords: '0' },\n  { type: 'texture_storage_2d', coords: 'vec2u(0)' },\n  { type: 'texture_storage_2d_array', coords: 'vec2u(0), 0' },\n  { type: 'texture_storage_3d', coords: 'vec3u(0)' },\n];\n\nfunction getPipelineDescriptor(device: GPUDevice, testValue: number) {\n  const numStorageResourcesTargetPerType = (testValue / 3) | 0;\n  const numStorageBuffers = Math.min(\n    numStorageResourcesTargetPerType,\n    device.limits.maxStorageBuffersPerShaderStage\n  );\n  const numStorageTextures = Math.min(\n    numStorageResourcesTargetPerType,\n    device.limits.maxStorageTexturesPerShaderStage\n  );\n\n  const numTargets = testValue - numStorageBuffers - numStorageTextures;\n\n  const bindingAndGroup = (i: number, bindingOffset: number) =>\n    `@group(${i % 3}) @binding(${((i / 3) | 0) * 2 + bindingOffset})`;\n\n  const code = `\n    @vertex fn vs() -> @builtin(position) vec4f {\n      return vec4f(0);\n    }\n\n    // these are unused and so should not affect the test.\n    @group(3) @binding(0) var unusedTexture1d: texture_storage_1d<rgba32float, write>;\n    @group(3) @binding(1) var unusedTexture2d: texture_storage_2d<rgba32float, write>;\n    @group(3) @binding(2) var unusedTexture2dArray: texture_storage_2d_array<rgba32float, write>;\n    @group(3) @binding(3) var unusedTexture3d: texture_storage_3d<rgba32float, write>;\n\n    // testValue: ${testValue}\n    // numStorageBuffers: ${numStorageBuffers}\n    // numStorageTextures: ${numStorageTextures}\n    // numTargets: ${numTargets}\n\n    // We use rgba32float format storage textures as they take the most size and so are most likely\n    // to trigger any invalid validation.\n\n    ${range(\n      numStorageBuffers,\n      i => `${bindingAndGroup(i, 0)} var<storage, read_write> usedBuffer${i}: array<f32>;`\n    ).join('\\n    ')}\n    ${range(\n      numStorageTextures,\n      i =>\n        `${bindingAndGroup(i, 1)} var usedTexture${i}: ${\n          select(kTextureStorageTypes, i).type\n        }<rgba32float, write>;`\n    ).join('\\n    ')}\n\n    @fragment fn fs() -> @location(0) vec4f {\n      ${range(numStorageBuffers, i => `usedBuffer${i}[0] = 0.0;`).join('\\n      ')}\n      ${range(\n        numStorageTextures,\n        i => `textureStore(usedTexture${i}, ${select(kTextureStorageTypes, i).coords}, vec4f(0));`\n      ).join('\\n      ')}\n      return vec4f(0);\n    }\n  `;\n  const module = device.createShaderModule({ code });\n  const pipelineDescriptor: GPURenderPipelineDescriptor = {\n    layout: 'auto',\n    vertex: {\n      module,\n      entryPoint: 'vs',\n    },\n    fragment: {\n      module,\n      entryPoint: 'fs',\n      targets: new Array(numTargets).fill({ format: 'r8unorm', writeMask: 0 }),\n    },\n  };\n  return { pipelineDescriptor, code };\n}\n\nconst kExtraLimits: LimitsRequest = {\n  maxColorAttachments: 'adapterLimit',\n  maxColorAttachmentBytesPerSample: 'adapterLimit',\n  maxStorageBuffersPerShaderStage: 'adapterLimit',\n  maxStorageTexturesPerShaderStage: 'adapterLimit',\n};\n\nconst limit = 'maxFragmentCombinedOutputResources';\nexport const { g, description } = makeLimitTestGroup(limit);\n\ng.test('createRenderPipeline,at_over')\n  .desc(`Test using at and over ${limit} limit in createRenderPipeline(Async)`)\n  .params(kMaximumLimitBaseParams.combine('async', [false, true] as const))\n  .fn(async t => {\n    const { limitTest, testValueName, async } = t.params;\n    await t.testDeviceWithRequestedMaximumLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError }) => {\n        const { pipelineDescriptor, code } = getPipelineDescriptor(device, testValue);\n        const targets = pipelineDescriptor.fragment?.targets as GPUColorTargetState[];\n        const bytesPerSample = computeBytesPerSample(targets);\n        if (\n          targets.length > device.limits.maxColorAttachments ||\n          bytesPerSample > device.limits.maxColorAttachmentBytesPerSample\n        ) {\n          return;\n        }\n\n        await t.testCreateRenderPipeline(pipelineDescriptor, async, shouldError, code);\n      },\n      kExtraLimits\n    );\n  });\n"],"mappings":";AAAA;AAAA,GAAA,SAASA,KAAK,QAAQ,oCAAoC,CAE1D;AACEC,qBAAqB;AACrBC,uBAAuB;AACvBC,kBAAkB;;AAEb,kBAAkB;;AAEzB,SAASC,MAAM,CAAIC,KAAU,EAAEC,CAAS,EAAE;EACxC,OAAOD,KAAK,CAACC,CAAC,GAAGD,KAAK,CAACE,MAAM,CAAC;AAChC;;AAEA,MAAMC,oBAAoB,GAAG;AAC3B,EAAEC,IAAI,EAAE,oBAAoB,EAAEC,MAAM,EAAE,GAAG,CAAC,CAAC;AAC3C,EAAED,IAAI,EAAE,oBAAoB,EAAEC,MAAM,EAAE,UAAU,CAAC,CAAC;AAClD,EAAED,IAAI,EAAE,0BAA0B,EAAEC,MAAM,EAAE,aAAa,CAAC,CAAC;AAC3D,EAAED,IAAI,EAAE,oBAAoB,EAAEC,MAAM,EAAE,UAAU,CAAC,CAAC,CACnD;;;AAED,SAASC,qBAAqB,CAACC,MAAiB,EAAEC,SAAiB,EAAE;EACnE,MAAMC,gCAAgC,GAAID,SAAS,GAAG,CAAC,GAAI,CAAC;EAC5D,MAAME,iBAAiB,GAAGC,IAAI,CAACC,GAAG;EAChCH,gCAAgC;EAChCF,MAAM,CAACM,MAAM,CAACC,+BAA+B,CAC9C;;EACD,MAAMC,kBAAkB,GAAGJ,IAAI,CAACC,GAAG;EACjCH,gCAAgC;EAChCF,MAAM,CAACM,MAAM,CAACG,gCAAgC,CAC/C;;;EAED,MAAMC,UAAU,GAAGT,SAAS,GAAGE,iBAAiB,GAAGK,kBAAkB;;EAErE,MAAMG,eAAe,GAAG,CAACjB,CAAS,EAAEkB,aAAqB;EACtD,UAASlB,CAAC,GAAG,CAAE,cAAa,CAAEA,CAAC,GAAG,CAAC,GAAI,CAAC,IAAI,CAAC,GAAGkB,aAAc,GAAE;;EAEnE,MAAMC,IAAI,GAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoBZ,SAAU;AAC9B,4BAA4BE,iBAAkB;AAC9C,6BAA6BK,kBAAmB;AAChD,qBAAqBE,UAAW;AAChC;AACA;AACA;AACA;AACA,MAAMtB,KAAK;EACLe,iBAAiB;EACjB,CAAAT,CAAC,KAAK,GAAEiB,eAAe,CAACjB,CAAC,EAAE,CAAC,CAAE,uCAAsCA,CAAE,eAAc,CACrF;EAACoB,IAAI,CAAC,QAAQ,CAAE;AACrB,MAAM1B,KAAK;EACLoB,kBAAkB;EAClB,CAAAd,CAAC;EACE,GAAEiB,eAAe,CAACjB,CAAC,EAAE,CAAC,CAAE,mBAAkBA,CAAE;EAC3CF,MAAM,CAACI,oBAAoB,EAAEF,CAAC,CAAC,CAACG;EACjC,uBAAsB,CAC1B;EAACiB,IAAI,CAAC,QAAQ,CAAE;AACrB;AACA;AACA,QAAQ1B,KAAK,CAACe,iBAAiB,EAAE,CAAAT,CAAC,KAAK,aAAYA,CAAE,YAAW,CAAC,CAACoB,IAAI,CAAC,UAAU,CAAE;AACnF,QAAQ1B,KAAK;EACLoB,kBAAkB;EAClB,CAAAd,CAAC,KAAK,2BAA0BA,CAAE,KAAIF,MAAM,CAACI,oBAAoB,EAAEF,CAAC,CAAC,CAACI,MAAO,cAAa,CAC3F;EAACgB,IAAI,CAAC,UAAU,CAAE;AACzB;AACA;AACA,GAAG;EACD,MAAMC,MAAM,GAAGf,MAAM,CAACgB,kBAAkB,CAAC,EAAEH,IAAI,CAAC,CAAC,CAAC;EAClD,MAAMI,kBAA+C,GAAG;IACtDC,MAAM,EAAE,MAAM;IACdC,MAAM,EAAE;MACNJ,MAAM;MACNK,UAAU,EAAE;IACd,CAAC;IACDC,QAAQ,EAAE;MACRN,MAAM;MACNK,UAAU,EAAE,IAAI;MAChBE,OAAO,EAAE,IAAIC,KAAK,CAACb,UAAU,CAAC,CAACc,IAAI,CAAC,EAAEC,MAAM,EAAE,SAAS,EAAEC,SAAS,EAAE,CAAC,CAAC,CAAC;IACzE;EACF,CAAC;EACD,OAAO,EAAET,kBAAkB,EAAEJ,IAAI,CAAC,CAAC;AACrC;;AAEA,MAAMc,YAA2B,GAAG;EAClCC,mBAAmB,EAAE,cAAc;EACnCC,gCAAgC,EAAE,cAAc;EAChDtB,+BAA+B,EAAE,cAAc;EAC/CE,gCAAgC,EAAE;AACpC,CAAC;;AAED,MAAMqB,KAAK,GAAG,oCAAoC;AAClD,OAAO,MAAM,EAAEC,CAAC,EAAEC,WAAW,CAAC,CAAC,GAAGzC,kBAAkB,CAACuC,KAAK,CAAC;;AAE3DC,CAAC,CAACE,IAAI,CAAC,8BAA8B,CAAC;AACnCC,IAAI,CAAE,0BAAyBJ,KAAM,uCAAsC,CAAC;AAC5EK,MAAM,CAAC7C,uBAAuB,CAAC8C,OAAO,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,CAAU,CAAC;AACxEC,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAM,EAAEC,SAAS,EAAEC,aAAa,EAAEC,KAAK,CAAC,CAAC,GAAGH,CAAC,CAACH,MAAM;EACpD,MAAMG,CAAC,CAACI,oCAAoC;EAC1CH,SAAS;EACTC,aAAa;EACb,OAAO,EAAExC,MAAM,EAAEC,SAAS,EAAE0C,WAAW,CAAC,CAAC,KAAK;IAC5C,MAAM,EAAE1B,kBAAkB,EAAEJ,IAAI,CAAC,CAAC,GAAGd,qBAAqB,CAACC,MAAM,EAAEC,SAAS,CAAC;IAC7E,MAAMqB,OAAO,GAAGL,kBAAkB,CAACI,QAAQ,EAAEC,OAAgC;IAC7E,MAAMsB,cAAc,GAAGvD,qBAAqB,CAACiC,OAAO,CAAC;IACrD;IACEA,OAAO,CAAC3B,MAAM,GAAGK,MAAM,CAACM,MAAM,CAACsB,mBAAmB;IAClDgB,cAAc,GAAG5C,MAAM,CAACM,MAAM,CAACuB,gCAAgC;IAC/D;MACA;IACF;;IAEA,MAAMS,CAAC,CAACO,wBAAwB,CAAC5B,kBAAkB,EAAEwB,KAAK,EAAEE,WAAW,EAAE9B,IAAI,CAAC;EAChF,CAAC;EACDc,YAAY,CACb;;AACH,CAAC,CAAC"}