{"version":3,"file":"maxBindGroups.spec.js","names":["range","kCreatePipelineTypes","kCreatePipelineAsyncTypes","kEncoderTypes","kLimitBaseParams","makeLimitTestGroup","limit","g","description","test","desc","params","fn","t","limitTest","testValueName","testDeviceWithRequestedLimits","device","testValue","shouldError","bindGroupLayouts","i","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","VERTEX","buffer","expectValidationError","createPipelineLayout","combine","createPipelineType","lastIndex","code","getGroupIndexWGSLForPipelineType","module","createShaderModule","createPipeline","createPipelineAsyncType","promise","createPipelineAsync","shouldRejectConditionally","encoderType","actualLimit","testGPUBindingCommandsMixin","mixin","bindGroup","setBindGroup"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/limits/maxBindGroups.spec.ts"],"sourcesContent":["import { range } from '../../../../../common/util/util.js';\n\nimport {\n  kCreatePipelineTypes,\n  kCreatePipelineAsyncTypes,\n  kEncoderTypes,\n  kLimitBaseParams,\n  makeLimitTestGroup,\n} from './limit_utils.js';\n\nconst limit = 'maxBindGroups';\nexport const { g, description } = makeLimitTestGroup(limit);\n\ng.test('createPipelineLayout,at_over')\n  .desc(`Test using createPipelineLayout at and over ${limit} limit`)\n  .params(kLimitBaseParams)\n  .fn(async t => {\n    const { limitTest, testValueName } = t.params;\n    await t.testDeviceWithRequestedLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError }) => {\n        const bindGroupLayouts = range(testValue, (i: number) =>\n          device.createBindGroupLayout({\n            entries: [\n              {\n                binding: 0,\n                visibility: GPUShaderStage.VERTEX,\n                buffer: {},\n              },\n            ],\n          })\n        );\n\n        await t.expectValidationError(() => {\n          device.createPipelineLayout({ bindGroupLayouts });\n        }, shouldError);\n      }\n    );\n  });\n\ng.test('createPipeline,at_over')\n  .desc(`Test using createRenderPipeline and createComputePipeline at and over ${limit} limit`)\n  .params(kLimitBaseParams.combine('createPipelineType', kCreatePipelineTypes))\n  .fn(async t => {\n    const { limitTest, testValueName, createPipelineType } = t.params;\n\n    await t.testDeviceWithRequestedLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError }) => {\n        const lastIndex = testValue - 1;\n\n        const code = t.getGroupIndexWGSLForPipelineType(createPipelineType, lastIndex);\n        const module = device.createShaderModule({ code });\n\n        await t.expectValidationError(() => {\n          t.createPipeline(createPipelineType, module);\n        }, shouldError);\n      }\n    );\n  });\n\ng.test('createPipelineAsync,at_over')\n  .desc(\n    `Test using createRenderPipelineAsync and createComputePipelineAsync at and over ${limit} limit`\n  )\n  .params(kLimitBaseParams.combine('createPipelineAsyncType', kCreatePipelineAsyncTypes))\n  .fn(async t => {\n    const { limitTest, testValueName, createPipelineAsyncType } = t.params;\n\n    await t.testDeviceWithRequestedLimits(\n      limitTest,\n      testValueName,\n      async ({ device, testValue, shouldError }) => {\n        const lastIndex = testValue - 1;\n\n        const code = t.getGroupIndexWGSLForPipelineType(createPipelineAsyncType, lastIndex);\n        const module = device.createShaderModule({ code });\n\n        const promise = t.createPipelineAsync(createPipelineAsyncType, module);\n        await t.shouldRejectConditionally('GPUPipelineError', promise, shouldError);\n      }\n    );\n  });\n\ng.test('setBindGroup,at_over')\n  .desc(`Test using setBindGroup at and over ${limit} limit`)\n  .params(kLimitBaseParams.combine('encoderType', kEncoderTypes))\n  .fn(async t => {\n    const { limitTest, testValueName, encoderType } = t.params;\n    await t.testDeviceWithRequestedLimits(\n      limitTest,\n      testValueName,\n      async ({ testValue, actualLimit, shouldError }) => {\n        const lastIndex = testValue - 1;\n        await t.testGPUBindingCommandsMixin(\n          encoderType,\n          ({ mixin, bindGroup }) => {\n            mixin.setBindGroup(lastIndex, bindGroup);\n          },\n          shouldError,\n          `shouldError: ${shouldError}, actualLimit: ${actualLimit}, testValue: ${lastIndex}`\n        );\n      }\n    );\n  });\n"],"mappings":";AAAA;AAAA,GAAA,SAASA,KAAK,QAAQ,oCAAoC,CAE1D;AACEC,oBAAoB;AACpBC,yBAAyB;AACzBC,aAAa;AACbC,gBAAgB;AAChBC,kBAAkB;AACb,kBAAkB;;AAEzB,MAAMC,KAAK,GAAG,eAAe;AAC7B,OAAO,MAAM,EAAEC,CAAC,EAAEC,WAAW,CAAC,CAAC,GAAGH,kBAAkB,CAACC,KAAK,CAAC;;AAE3DC,CAAC,CAACE,IAAI,CAAC,8BAA8B,CAAC;AACnCC,IAAI,CAAE,+CAA8CJ,KAAM,QAAO,CAAC;AAClEK,MAAM,CAACP,gBAAgB,CAAC;AACxBQ,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAM,EAAEC,SAAS,EAAEC,aAAa,CAAC,CAAC,GAAGF,CAAC,CAACF,MAAM;EAC7C,MAAME,CAAC,CAACG,6BAA6B;EACnCF,SAAS;EACTC,aAAa;EACb,OAAO,EAAEE,MAAM,EAAEC,SAAS,EAAEC,WAAW,CAAC,CAAC,KAAK;IAC5C,MAAMC,gBAAgB,GAAGpB,KAAK,CAACkB,SAAS,EAAE,CAACG,CAAS;IAClDJ,MAAM,CAACK,qBAAqB,CAAC;MAC3BC,OAAO,EAAE;MACP;QACEC,OAAO,EAAE,CAAC;QACVC,UAAU,EAAEC,cAAc,CAACC,MAAM;QACjCC,MAAM,EAAE,CAAC;MACX,CAAC;;IAEL,CAAC,CAAC,CACH;;;IAED,MAAMf,CAAC,CAACgB,qBAAqB,CAAC,MAAM;MAClCZ,MAAM,CAACa,oBAAoB,CAAC,EAAEV,gBAAgB,CAAC,CAAC,CAAC;IACnD,CAAC,EAAED,WAAW,CAAC;EACjB,CAAC,CACF;;AACH,CAAC,CAAC;;AAEJZ,CAAC,CAACE,IAAI,CAAC,wBAAwB,CAAC;AAC7BC,IAAI,CAAE,yEAAwEJ,KAAM,QAAO,CAAC;AAC5FK,MAAM,CAACP,gBAAgB,CAAC2B,OAAO,CAAC,oBAAoB,EAAE9B,oBAAoB,CAAC,CAAC;AAC5EW,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAM,EAAEC,SAAS,EAAEC,aAAa,EAAEiB,kBAAkB,CAAC,CAAC,GAAGnB,CAAC,CAACF,MAAM;;EAEjE,MAAME,CAAC,CAACG,6BAA6B;EACnCF,SAAS;EACTC,aAAa;EACb,OAAO,EAAEE,MAAM,EAAEC,SAAS,EAAEC,WAAW,CAAC,CAAC,KAAK;IAC5C,MAAMc,SAAS,GAAGf,SAAS,GAAG,CAAC;;IAE/B,MAAMgB,IAAI,GAAGrB,CAAC,CAACsB,gCAAgC,CAACH,kBAAkB,EAAEC,SAAS,CAAC;IAC9E,MAAMG,MAAM,GAAGnB,MAAM,CAACoB,kBAAkB,CAAC,EAAEH,IAAI,CAAC,CAAC,CAAC;;IAElD,MAAMrB,CAAC,CAACgB,qBAAqB,CAAC,MAAM;MAClChB,CAAC,CAACyB,cAAc,CAACN,kBAAkB,EAAEI,MAAM,CAAC;IAC9C,CAAC,EAAEjB,WAAW,CAAC;EACjB,CAAC,CACF;;AACH,CAAC,CAAC;;AAEJZ,CAAC,CAACE,IAAI,CAAC,6BAA6B,CAAC;AAClCC,IAAI;AACF,mFAAkFJ,KAAM,QAAO,CACjG;;AACAK,MAAM,CAACP,gBAAgB,CAAC2B,OAAO,CAAC,yBAAyB,EAAE7B,yBAAyB,CAAC,CAAC;AACtFU,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAM,EAAEC,SAAS,EAAEC,aAAa,EAAEwB,uBAAuB,CAAC,CAAC,GAAG1B,CAAC,CAACF,MAAM;;EAEtE,MAAME,CAAC,CAACG,6BAA6B;EACnCF,SAAS;EACTC,aAAa;EACb,OAAO,EAAEE,MAAM,EAAEC,SAAS,EAAEC,WAAW,CAAC,CAAC,KAAK;IAC5C,MAAMc,SAAS,GAAGf,SAAS,GAAG,CAAC;;IAE/B,MAAMgB,IAAI,GAAGrB,CAAC,CAACsB,gCAAgC,CAACI,uBAAuB,EAAEN,SAAS,CAAC;IACnF,MAAMG,MAAM,GAAGnB,MAAM,CAACoB,kBAAkB,CAAC,EAAEH,IAAI,CAAC,CAAC,CAAC;;IAElD,MAAMM,OAAO,GAAG3B,CAAC,CAAC4B,mBAAmB,CAACF,uBAAuB,EAAEH,MAAM,CAAC;IACtE,MAAMvB,CAAC,CAAC6B,yBAAyB,CAAC,kBAAkB,EAAEF,OAAO,EAAErB,WAAW,CAAC;EAC7E,CAAC,CACF;;AACH,CAAC,CAAC;;AAEJZ,CAAC,CAACE,IAAI,CAAC,sBAAsB,CAAC;AAC3BC,IAAI,CAAE,uCAAsCJ,KAAM,QAAO,CAAC;AAC1DK,MAAM,CAACP,gBAAgB,CAAC2B,OAAO,CAAC,aAAa,EAAE5B,aAAa,CAAC,CAAC;AAC9DS,EAAE,CAAC,OAAMC,CAAC,KAAI;EACb,MAAM,EAAEC,SAAS,EAAEC,aAAa,EAAE4B,WAAW,CAAC,CAAC,GAAG9B,CAAC,CAACF,MAAM;EAC1D,MAAME,CAAC,CAACG,6BAA6B;EACnCF,SAAS;EACTC,aAAa;EACb,OAAO,EAAEG,SAAS,EAAE0B,WAAW,EAAEzB,WAAW,CAAC,CAAC,KAAK;IACjD,MAAMc,SAAS,GAAGf,SAAS,GAAG,CAAC;IAC/B,MAAML,CAAC,CAACgC,2BAA2B;IACjCF,WAAW;IACX,CAAC,EAAEG,KAAK,EAAEC,SAAS,CAAC,CAAC,KAAK;MACxBD,KAAK,CAACE,YAAY,CAACf,SAAS,EAAEc,SAAS,CAAC;IAC1C,CAAC;IACD5B,WAAW;IACV,gBAAeA,WAAY,kBAAiByB,WAAY,gBAAeX,SAAU,EAAC,CACpF;;EACH,CAAC,CACF;;AACH,CAAC,CAAC"}