{"version":3,"sources":["../../../../../../src/webgpu/api/validation/capability_checks/features/query_types.spec.ts"],"names":["description","makeTestGroup","ValidationTest","g","test","desc","params","u","combine","beforeAllSubcases","t","timestampQueryEnable","requiredFeatures","push","selectDeviceOrSkipTestCase","fn","type","count","shouldError","expectValidationError","device","createQuerySet"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAFO,CAIP,SAASC,aAAT,QAA8B,+CAA9B;AACA,SAASC,cAAT,QAA+B,0BAA/B;;AAEA,OAAO,MAAMC,CAAC,GAAGF,aAAa,CAACC,cAAD,CAAvB;;AAEPC,CAAC,CAACC,IAAF,CAAO,gBAAP;AACGC,IADH;AAEK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAXA;;AAaGC,MAbH,CAaU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,MADX,EACmB,CAAC,WAAD,EAAc,WAAd,CADnB;AAEGA,OAFH,CAEW,sBAFX,EAEmC,CAAC,KAAD,EAAQ,IAAR,CAFnC,CAdJ;;AAkBGC,iBAlBH,CAkBqB,CAAAC,CAAC,KAAI;AACtB,QAAM,EAAEC,oBAAF,KAA2BD,CAAC,CAACJ,MAAnC;;AAEA,QAAMM,gBAAkC,GAAG,EAA3C;AACA,MAAID,oBAAJ,EAA0B;AACxBC,IAAAA,gBAAgB,CAACC,IAAjB,CAAsB,iBAAtB;AACD;;AAEDH,EAAAA,CAAC,CAACI,0BAAF,CAA6B,EAAEF,gBAAF,EAA7B;AACD,CA3BH;AA4BGG,EA5BH,CA4BM,OAAML,CAAN,KAAW;AACb,QAAM,EAAEM,IAAF,EAAQL,oBAAR,KAAiCD,CAAC,CAACJ,MAAzC;;AAEA,QAAMW,KAAK,GAAG,CAAd;AACA,QAAMC,WAAW,GAAGF,IAAI,KAAK,WAAT,IAAwB,CAACL,oBAA7C;;AAEAD,EAAAA,CAAC,CAACS,qBAAF,CAAwB,MAAM;AAC5BT,IAAAA,CAAC,CAACU,MAAF,CAASC,cAAT,CAAwB,EAAEL,IAAF,EAAQC,KAAR,EAAxB;AACD,GAFD,EAEGC,WAFH;AAGD,CArCH","sourcesContent":["export const description = `\nTests for capability checking for features enabling optional query types.\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('createQuerySet')\n  .desc(\n    `\nTests that creating query set shouldn't be valid without the required feature enabled.\n- createQuerySet\n  - type {occlusion, timestamp}\n  - x= {pipeline statistics, timestamp} query {enable, disable}\n\nTODO: This test should expect *synchronous* exceptions, not validation errors, per\n<https://github.com/gpuweb/gpuweb/blob/main/design/ErrorConventions.md>.\nAs of this writing, the spec needs to be fixed as well.\n  `\n  )\n  .params(u =>\n    u\n      .combine('type', ['occlusion', 'timestamp'] as const)\n      .combine('timestampQueryEnable', [false, true])\n  )\n  .beforeAllSubcases(t => {\n    const { timestampQueryEnable } = t.params;\n\n    const requiredFeatures: GPUFeatureName[] = [];\n    if (timestampQueryEnable) {\n      requiredFeatures.push('timestamp-query');\n    }\n\n    t.selectDeviceOrSkipTestCase({ requiredFeatures });\n  })\n  .fn(async t => {\n    const { type, timestampQueryEnable } = t.params;\n\n    const count = 1;\n    const shouldError = type === 'timestamp' && !timestampQueryEnable;\n\n    t.expectValidationError(() => {\n      t.device.createQuerySet({ type, count });\n    }, shouldError);\n  });\n"],"file":"query_types.spec.js"}