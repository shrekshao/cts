{"version":3,"sources":["../../../../../src/webgpu/api/validation/encoding/render_bundle.spec.ts"],"names":["description","makeTestGroup","ValidationTest","g","test","desc","paramsSubcasesOnly","bundle0Mismatched","bundle1Mismatched","fn","t","params","mismatched","selectMismatchedDeviceOrSkipTestCase","undefined","descriptor","colorFormats","bundle0Encoder","mismatchedDevice","createRenderBundleEncoder","device","bundle0","finish","bundle1Encoder","bundle1","encoder","createEncoder","executeBundles","validateFinish"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA,CANO,CAQP,SAASC,aAAT,QAA8B,4CAA9B;AACA,SAASC,cAAT,QAA+B,uBAA/B;;AAEA,OAAO,MAAMC,CAAC,GAAGF,aAAa,CAACC,cAAD,CAAvB;;AAEPC,CAAC,CAACC,IAAF,CAAO,gCAAP;AACGC,IADH;AAEK;AACL;AACA;AACA;AACA;AACA,KAPA;;AASGC,kBATH,CASsB;AAClB,EAAEC,iBAAiB,EAAE,KAArB,EAA4BC,iBAAiB,EAAE,KAA/C,EADkB,EACsC;AACxD,EAAED,iBAAiB,EAAE,IAArB,EAA2BC,iBAAiB,EAAE,KAA9C,EAFkB;AAGlB,EAAED,iBAAiB,EAAE,KAArB,EAA4BC,iBAAiB,EAAE,IAA/C,EAHkB,CATtB;;AAcGC,EAdH,CAcM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEH,iBAAF,EAAqBC,iBAArB,KAA2CE,CAAC,CAACC,MAAnD;AACA,QAAMC,UAAU,GAAGL,iBAAiB,IAAIC,iBAAxC;;AAEA,MAAII,UAAJ,EAAgB;AACd,UAAMF,CAAC,CAACG,oCAAF,CAAuCC,SAAvC,CAAN;AACD;;AAED,QAAMC,UAA4C,GAAG;AACnDC,IAAAA,YAAY,EAAE,CAAC,YAAD,CADqC,EAArD;;;AAIA,QAAMC,cAAc,GAAGL,UAAU;AAC7BF,EAAAA,CAAC,CAACQ,gBAAF,CAAmBC,yBAAnB,CAA6CJ,UAA7C,CAD6B;AAE7BL,EAAAA,CAAC,CAACU,MAAF,CAASD,yBAAT,CAAmCJ,UAAnC,CAFJ;AAGA,QAAMM,OAAO,GAAGJ,cAAc,CAACK,MAAf,EAAhB;AACA,QAAMC,cAAc,GAAGX,UAAU;AAC7BF,EAAAA,CAAC,CAACQ,gBAAF,CAAmBC,yBAAnB,CAA6CJ,UAA7C,CAD6B;AAE7BL,EAAAA,CAAC,CAACU,MAAF,CAASD,yBAAT,CAAmCJ,UAAnC,CAFJ;AAGA,QAAMS,OAAO,GAAGD,cAAc,CAACD,MAAf,EAAhB;;AAEA,QAAMG,OAAO,GAAGf,CAAC,CAACgB,aAAF,CAAgB,aAAhB,CAAhB;AACAD,EAAAA,OAAO,CAACA,OAAR,CAAgBE,cAAhB,CAA+B,CAACN,OAAD,EAAUG,OAAV,CAA/B;;AAEAC,EAAAA,OAAO,CAACG,cAAR,CAAuB,CAAChB,UAAxB;AACD,CAvCH","sourcesContent":["export const description = `\nTODO:\n- test creating a render bundle, and if it's valid, test that executing it is not an error\n    - color formats {all possible formats} {zero, one, multiple}\n    - depth/stencil format {unset, all possible formats}\n- ?\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { ValidationTest } from '../validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('render_bundles,device_mismatch')\n  .desc(\n    `\n    Tests executeBundles cannot be called with render bundles created from another device\n    Test with two bundles to make sure all bundles can be validated:\n    - bundle0 and bundle1 from same device\n    - bundle0 and bundle1 from different device\n    `\n  )\n  .paramsSubcasesOnly([\n    { bundle0Mismatched: false, bundle1Mismatched: false }, // control case\n    { bundle0Mismatched: true, bundle1Mismatched: false },\n    { bundle0Mismatched: false, bundle1Mismatched: true },\n  ])\n  .fn(async t => {\n    const { bundle0Mismatched, bundle1Mismatched } = t.params;\n    const mismatched = bundle0Mismatched || bundle1Mismatched;\n\n    if (mismatched) {\n      await t.selectMismatchedDeviceOrSkipTestCase(undefined);\n    }\n\n    const descriptor: GPURenderBundleEncoderDescriptor = {\n      colorFormats: ['rgba8unorm'],\n    };\n\n    const bundle0Encoder = mismatched\n      ? t.mismatchedDevice.createRenderBundleEncoder(descriptor)\n      : t.device.createRenderBundleEncoder(descriptor);\n    const bundle0 = bundle0Encoder.finish();\n    const bundle1Encoder = mismatched\n      ? t.mismatchedDevice.createRenderBundleEncoder(descriptor)\n      : t.device.createRenderBundleEncoder(descriptor);\n    const bundle1 = bundle1Encoder.finish();\n\n    const encoder = t.createEncoder('render pass');\n    encoder.encoder.executeBundles([bundle0, bundle1]);\n\n    encoder.validateFinish(!mismatched);\n  });\n"],"file":"render_bundle.spec.js"}