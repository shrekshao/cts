{"version":3,"sources":["../../../../../../src/webgpu/api/validation/encoding/cmds/debug.spec.ts"],"names":["description","makeTestGroup","kEncoderTypes","ValidationTest","g","test","params","u","combine","beginSubcases","fn","t","encoder","validateFinishAndSubmit","createEncoder","encoderType","i","pushCount","pushDebugGroup","popCount","popDebugGroup","label","insertDebugMarker"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXO,CAaP,SAASC,aAAT,QAA8B,+CAA9B;AACA,SAASC,aAAT,QAA8B,0CAA9B;AACA,SAASC,cAAT,QAA+B,0BAA/B;;AAEA,OAAO,MAAMC,CAAC,GAAGH,aAAa,CAACE,cAAD,CAAvB;;AAEPC,CAAC,CAACC,IAAF,CAAO,sBAAP;AACGC,MADH,CACU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,aADX,EAC0BN,aAD1B;AAEGO,aAFH;AAGGD,OAHH,CAGW,WAHX,EAGwB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHxB;AAIGA,OAJH,CAIW,UAJX,EAIuB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAJvB,CAFJ;;AAQGE,EARH,CAQM,CAAAC,CAAC,KAAI;AACP,QAAM,EAAEC,OAAF,EAAWC,uBAAX,KAAuCF,CAAC,CAACG,aAAF,CAAgBH,CAAC,CAACL,MAAF,CAASS,WAAzB,CAA7C;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,CAAC,CAACL,MAAF,CAASW,SAA7B,EAAwC,EAAED,CAA1C,EAA6C;AAC3CJ,IAAAA,OAAO,CAACM,cAAR,CAAwB,GAAEF,CAAE,EAA5B;AACD;AACD,OAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,CAAC,CAACL,MAAF,CAASa,QAA7B,EAAuC,EAAEH,CAAzC,EAA4C;AAC1CJ,IAAAA,OAAO,CAACQ,aAAR;AACD;AACDP,EAAAA,uBAAuB,CAACF,CAAC,CAACL,MAAF,CAASW,SAAT,KAAuBN,CAAC,CAACL,MAAF,CAASa,QAAjC,EAA2C,IAA3C,CAAvB;AACD,CAjBH;;AAmBAf,CAAC,CAACC,IAAF,CAAO,aAAP;AACGC,MADH,CACU,CAAAC,CAAC;AACPA,CAAC,CAAC;AAAD,CACEC,OADH,CACW,aADX,EAC0BN,aAD1B;AAEGO,aAFH;AAGGD,OAHH,CAGW,OAHX,EAGoB,CAAC,EAAD,EAAK,OAAL,CAHpB,CAFJ;;AAOGE,EAPH,CAOM,CAAAC,CAAC,KAAI;AACP,QAAM,EAAEC,OAAF,EAAWC,uBAAX,KAAuCF,CAAC,CAACG,aAAF,CAAgBH,CAAC,CAACL,MAAF,CAASS,WAAzB,CAA7C;AACAH,EAAAA,OAAO,CAACM,cAAR,CAAuBP,CAAC,CAACL,MAAF,CAASe,KAAhC;AACAT,EAAAA,OAAO,CAACQ,aAAR;AACAP,EAAAA,uBAAuB,CAAC,IAAD,EAAO,IAAP,CAAvB;AACD,CAZH;;AAcAT,CAAC,CAACC,IAAF,CAAO,cAAP;AACGC,MADH,CACU,CAAAC,CAAC;AACPA,CAAC,CAAC;AAAD,CACEC,OADH,CACW,aADX,EAC0BN,aAD1B;AAEGO,aAFH;AAGGD,OAHH,CAGW,OAHX,EAGoB,CAAC,EAAD,EAAK,QAAL,CAHpB,CAFJ;;AAOGE,EAPH,CAOM,CAAAC,CAAC,KAAI;AACP,QAAM,EAAEC,OAAF,EAAWC,uBAAX,KAAuCF,CAAC,CAACG,aAAF,CAAgBH,CAAC,CAACL,MAAF,CAASS,WAAzB,CAA7C;AACAH,EAAAA,OAAO,CAACU,iBAAR,CAA0BX,CAAC,CAACL,MAAF,CAASe,KAAnC;AACAR,EAAAA,uBAAuB,CAAC,IAAD,EAAO,IAAP,CAAvB;AACD,CAXH","sourcesContent":["export const description = `\nAPI validation test for debug groups and markers\n\nTest Coverage:\n  - For each encoder type (GPUCommandEncoder, GPUComputeEncoder, GPURenderPassEncoder,\n  GPURenderBundleEncoder):\n    - Test that all pushDebugGroup must have a corresponding popDebugGroup\n      - Push and pop counts of 0, 1, and 2 will be used.\n      - An error must be generated for non matching counts.\n    - Test calling pushDebugGroup with empty and non-empty strings.\n    - Test inserting a debug marker with empty and non-empty strings.\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { kEncoderTypes } from '../../../../util/command_buffer_maker.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('debug_group_balanced')\n  .params(u =>\n    u\n      .combine('encoderType', kEncoderTypes)\n      .beginSubcases()\n      .combine('pushCount', [0, 1, 2])\n      .combine('popCount', [0, 1, 2])\n  )\n  .fn(t => {\n    const { encoder, validateFinishAndSubmit } = t.createEncoder(t.params.encoderType);\n    for (let i = 0; i < t.params.pushCount; ++i) {\n      encoder.pushDebugGroup(`${i}`);\n    }\n    for (let i = 0; i < t.params.popCount; ++i) {\n      encoder.popDebugGroup();\n    }\n    validateFinishAndSubmit(t.params.pushCount === t.params.popCount, true);\n  });\n\ng.test('debug_group')\n  .params(u =>\n    u //\n      .combine('encoderType', kEncoderTypes)\n      .beginSubcases()\n      .combine('label', ['', 'group'])\n  )\n  .fn(t => {\n    const { encoder, validateFinishAndSubmit } = t.createEncoder(t.params.encoderType);\n    encoder.pushDebugGroup(t.params.label);\n    encoder.popDebugGroup();\n    validateFinishAndSubmit(true, true);\n  });\n\ng.test('debug_marker')\n  .params(u =>\n    u //\n      .combine('encoderType', kEncoderTypes)\n      .beginSubcases()\n      .combine('label', ['', 'marker'])\n  )\n  .fn(t => {\n    const { encoder, validateFinishAndSubmit } = t.createEncoder(t.params.encoderType);\n    encoder.insertDebugMarker(t.params.label);\n    validateFinishAndSubmit(true, true);\n  });\n"],"file":"debug.spec.js"}