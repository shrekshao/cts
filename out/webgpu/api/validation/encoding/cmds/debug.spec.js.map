{"version":3,"sources":["../../../../../../src/webgpu/api/validation/encoding/cmds/debug.spec.ts"],"names":["description","makeTestGroup","ValidationTest","kEncoderTypes","g","test","params","u","combine","beginSubcases","fn","t","encoder","finish","createEncoder","encoderType","i","pushCount","pushDebugGroup","popCount","popDebugGroup","shouldError","expectValidationError","commandBuffer","queue","submit","label","maker","insertDebugMarker"],"mappings":"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","sourcesContent":["export const description = `\nAPI validation test for debug groups and markers\n\nTest Coverage:\n  - For each encoder type (GPUCommandEncoder, GPUComputeEncoder, GPURenderPassEncoder,\n  GPURenderBundleEncoder):\n    - Test that all pushDebugGroup must have a corresponding popDebugGroup\n      - Push and pop counts of 0, 1, and 2 will be used.\n      - An error must be generated for non matching counts.\n    - Test calling pushDebugGroup with empty and non-empty strings.\n    - Test inserting a debug marker with empty and non-empty strings.\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { ValidationTest, kEncoderTypes } from '../../validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('debug_group_balanced')\n  .params(u =>\n    u\n      .combine('encoderType', kEncoderTypes)\n      .beginSubcases()\n      .combine('pushCount', [0, 1, 2])\n      .combine('popCount', [0, 1, 2])\n  )\n  .fn(t => {\n    const { encoder, finish } = t.createEncoder(t.params.encoderType);\n    for (let i = 0; i < t.params.pushCount; ++i) {\n      encoder.pushDebugGroup(`${i}`);\n    }\n    for (let i = 0; i < t.params.popCount; ++i) {\n      encoder.popDebugGroup();\n    }\n    const shouldError = t.params.popCount !== t.params.pushCount;\n    t.expectValidationError(() => {\n      const commandBuffer = finish();\n      t.queue.submit([commandBuffer]);\n    }, shouldError);\n  });\n\ng.test('debug_group')\n  .params(u =>\n    u //\n      .combine('encoderType', kEncoderTypes)\n      .beginSubcases()\n      .combine('label', ['', 'group'])\n  )\n  .fn(t => {\n    const { encoder, finish } = t.createEncoder(t.params.encoderType);\n    encoder.pushDebugGroup(t.params.label);\n    encoder.popDebugGroup();\n    const commandBuffer = finish();\n    t.queue.submit([commandBuffer]);\n  });\n\ng.test('debug_marker')\n  .params(u =>\n    u //\n      .combine('encoderType', kEncoderTypes)\n      .beginSubcases()\n      .combine('label', ['', 'marker'])\n  )\n  .fn(t => {\n    const maker = t.createEncoder(t.params.encoderType);\n    maker.encoder.insertDebugMarker(t.params.label);\n    const commandBuffer = maker.finish();\n    t.queue.submit([commandBuffer]);\n  });\n"],"file":"debug.spec.js"}