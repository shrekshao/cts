{"version":3,"sources":["../../../../../../src/webgpu/api/validation/encoding/cmds/copyTextureToTexture.spec.ts"],"names":["description","makeTestGroup","kTextureFormatInfo","kTextureFormats","kCompressedTextureFormats","kDepthStencilFormats","kTextureUsages","align","ValidationTest","F","TestCopyTextureToTexture","source","destination","copySize","isSuccess","commandEncoder","device","createCommandEncoder","copyTextureToTexture","expectValidationError","finish","GetPhysicalSubresourceSize","textureSize","format","mipLevel","virtualWidthAtLevel","Math","max","width","virtualHeightAtLevel","height","physicalWidthAtLevel","blockWidth","physicalHeightAtLevel","blockHeight","depthOrArrayLayers","g","test","fn","t","validTexture","createTexture","size","usage","GPUTextureUsage","COPY_SRC","COPY_DST","errorTexture","getErrorTexture","texture","desc","paramsSubcasesOnly","srcMismatched","dstMismatched","unimplemented","srcLevelCount","dstLevelCount","srcCopyLevel","dstCopyLevel","params","srcTexture","mipLevelCount","dstTexture","u","combine","srcUsage","dstUsage","srcSampleCount","dstSampleCount","sampleCount","x","y","z","expand","p","srcCopyOrigin","dstCopyOrigin","copyWidth","copyHeight","kWidth","kHeight","origin","srcFormat","dstFormat","srcFormatInfo","dstFormatInfo","selectDeviceOrSkipTestCase","feature","kTextureSize","beginSubcases","copyBoxOffsets","srcTextureSize","dstTextureSize","kMipLevelCount","srcSizeAtLevel","dstSizeAtLevel","copyOrigin","min","kFormat","copyDepth","srcCopyOriginZ","dstCopyOriginZ","copyExtentDepth","kArrayLayerCount","testTexture","sourceAspect","destinationAspect","kValidAspectsForFormat","rgba8unorm","depth24plus","depth32float","stencil8","depth16unorm","isSourceAspectValid","includes","isDestinationAspectValid","aspect","texelBlockWidth","texelBlockHeight","isSuccessForCompressedFormats"],"mappings":"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","sourcesContent":["export const description = `\ncopyTextureToTexture tests.\n\nTest Plan: (TODO(jiawei.shao@intel.com): add tests on 1D/3D textures)\n* the source and destination texture\n  - the {source, destination} texture is {invalid, valid}.\n  - mipLevel {>, =, <} the mipmap level count of the {source, destination} texture.\n  - the source texture is created {with, without} GPUTextureUsage::CopySrc.\n  - the destination texture is created {with, without} GPUTextureUsage::CopyDst.\n* sample count\n  - the sample count of the source texture {is, isn't} equal to the one of the destination texture\n  - when the sample count is greater than 1:\n    - it {is, isn't} a copy of the whole subresource of the source texture.\n    - it {is, isn't} a copy of the whole subresource of the destination texture.\n* texture format\n  - the format of the source texture {is, isn't} equal to the one of the destination texture.\n    - including: depth24plus-stencil8 to/from {depth24plus, stencil8}.\n  - for each depth and/or stencil format: a copy between two textures with same format:\n    - it {is, isn't} a copy of the whole subresource of the {source, destination} texture.\n* copy ranges\n  - if the texture dimension is 2D:\n    - (srcOrigin.x + copyExtent.width) {>, =, <} the width of the subresource size of source\n      textureCopyView.\n    - (srcOrigin.y + copyExtent.height) {>, =, <} the height of the subresource size of source\n      textureCopyView.\n    - (srcOrigin.z + copyExtent.depthOrArrayLayers) {>, =, <} the depthOrArrayLayers of the subresource size of source\n      textureCopyView.\n    - (dstOrigin.x + copyExtent.width) {>, =, <} the width of the subresource size of destination\n      textureCopyView.\n    - (dstOrigin.y + copyExtent.height) {>, =, <} the height of the subresource size of destination\n      textureCopyView.\n    - (dstOrigin.z + copyExtent.depthOrArrayLayers) {>, =, <} the depthOrArrayLayers of the subresource size of destination\n      textureCopyView.\n* when the source and destination texture are the same one:\n  - the set of source texture subresources {has, doesn't have} overlaps with the one of destination\n    texture subresources.\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport {\n  kTextureFormatInfo,\n  kTextureFormats,\n  kCompressedTextureFormats,\n  kDepthStencilFormats,\n  kTextureUsages,\n} from '../../../../capability_info.js';\nimport { align } from '../../../../util/math.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nclass F extends ValidationTest {\n  TestCopyTextureToTexture(\n    source: GPUImageCopyTexture,\n    destination: GPUImageCopyTexture,\n    copySize: GPUExtent3D,\n    isSuccess: boolean\n  ): void {\n    const commandEncoder = this.device.createCommandEncoder();\n    commandEncoder.copyTextureToTexture(source, destination, copySize);\n\n    this.expectValidationError(() => {\n      commandEncoder.finish();\n    }, !isSuccess);\n  }\n\n  GetPhysicalSubresourceSize(\n    textureSize: Required<GPUExtent3DDict>,\n    format: GPUTextureFormat,\n    mipLevel: number\n  ): Required<GPUExtent3DDict> {\n    const virtualWidthAtLevel = Math.max(textureSize.width >> mipLevel, 1);\n    const virtualHeightAtLevel = Math.max(textureSize.height >> mipLevel, 1);\n    const physicalWidthAtLevel = align(virtualWidthAtLevel, kTextureFormatInfo[format].blockWidth);\n    const physicalHeightAtLevel = align(\n      virtualHeightAtLevel,\n      kTextureFormatInfo[format].blockHeight\n    );\n    return {\n      width: physicalWidthAtLevel,\n      height: physicalHeightAtLevel,\n      depthOrArrayLayers: textureSize.depthOrArrayLayers,\n    };\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('copy_with_invalid_texture').fn(async t => {\n  const validTexture = t.device.createTexture({\n    size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n    format: 'rgba8unorm',\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n  });\n\n  const errorTexture = t.getErrorTexture();\n\n  t.TestCopyTextureToTexture(\n    { texture: errorTexture },\n    { texture: validTexture },\n    { width: 1, height: 1, depthOrArrayLayers: 1 },\n    false\n  );\n  t.TestCopyTextureToTexture(\n    { texture: validTexture },\n    { texture: errorTexture },\n    { width: 1, height: 1, depthOrArrayLayers: 1 },\n    false\n  );\n});\n\ng.test('texture,device_mismatch')\n  .desc(\n    'Tests copyTextureToTexture cannot be called with src texture or dst texture created from another device'\n  )\n  .paramsSubcasesOnly([\n    { srcMismatched: false, dstMismatched: false }, // control case\n    { srcMismatched: true, dstMismatched: false },\n    { srcMismatched: false, dstMismatched: true },\n  ] as const)\n  .unimplemented();\n\ng.test('mipmap_level')\n  .paramsSubcasesOnly([\n    { srcLevelCount: 1, dstLevelCount: 1, srcCopyLevel: 0, dstCopyLevel: 0 },\n    { srcLevelCount: 1, dstLevelCount: 1, srcCopyLevel: 1, dstCopyLevel: 0 },\n    { srcLevelCount: 1, dstLevelCount: 1, srcCopyLevel: 0, dstCopyLevel: 1 },\n    { srcLevelCount: 3, dstLevelCount: 3, srcCopyLevel: 0, dstCopyLevel: 0 },\n    { srcLevelCount: 3, dstLevelCount: 3, srcCopyLevel: 2, dstCopyLevel: 0 },\n    { srcLevelCount: 3, dstLevelCount: 3, srcCopyLevel: 3, dstCopyLevel: 0 },\n    { srcLevelCount: 3, dstLevelCount: 3, srcCopyLevel: 0, dstCopyLevel: 2 },\n    { srcLevelCount: 3, dstLevelCount: 3, srcCopyLevel: 0, dstCopyLevel: 3 },\n  ] as const)\n\n  .fn(async t => {\n    const { srcLevelCount, dstLevelCount, srcCopyLevel, dstCopyLevel } = t.params;\n\n    const srcTexture = t.device.createTexture({\n      size: { width: 32, height: 32, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC,\n      mipLevelCount: srcLevelCount,\n    });\n    const dstTexture = t.device.createTexture({\n      size: { width: 32, height: 32, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_DST,\n      mipLevelCount: dstLevelCount,\n    });\n\n    const isSuccess = srcCopyLevel < srcLevelCount && dstCopyLevel < dstLevelCount;\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture, mipLevel: srcCopyLevel },\n      { texture: dstTexture, mipLevel: dstCopyLevel },\n      { width: 1, height: 1, depthOrArrayLayers: 1 },\n      isSuccess\n    );\n  });\n\ng.test('texture_usage')\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('srcUsage', kTextureUsages)\n      .combine('dstUsage', kTextureUsages)\n  )\n  .fn(async t => {\n    const { srcUsage, dstUsage } = t.params;\n\n    const srcTexture = t.device.createTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: srcUsage,\n    });\n    const dstTexture = t.device.createTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: dstUsage,\n    });\n\n    const isSuccess =\n      srcUsage === GPUTextureUsage.COPY_SRC && dstUsage === GPUTextureUsage.COPY_DST;\n\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture },\n      { texture: dstTexture },\n      { width: 1, height: 1, depthOrArrayLayers: 1 },\n      isSuccess\n    );\n  });\n\ng.test('sample_count')\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('srcSampleCount', [1, 4])\n      .combine('dstSampleCount', [1, 4])\n  )\n  .fn(async t => {\n    const { srcSampleCount, dstSampleCount } = t.params;\n\n    const srcTexture = t.device.createTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC,\n      sampleCount: srcSampleCount,\n    });\n    const dstTexture = t.device.createTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_DST,\n      sampleCount: dstSampleCount,\n    });\n\n    const isSuccess = srcSampleCount === dstSampleCount;\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture },\n      { texture: dstTexture },\n      { width: 4, height: 4, depthOrArrayLayers: 1 },\n      isSuccess\n    );\n  });\n\ng.test('multisampled_copy_restrictions')\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('srcCopyOrigin', [\n        { x: 0, y: 0, z: 0 },\n        { x: 1, y: 0, z: 0 },\n        { x: 0, y: 1, z: 0 },\n        { x: 1, y: 1, z: 0 },\n      ])\n      .combine('dstCopyOrigin', [\n        { x: 0, y: 0, z: 0 },\n        { x: 1, y: 0, z: 0 },\n        { x: 0, y: 1, z: 0 },\n        { x: 1, y: 1, z: 0 },\n      ])\n      .expand('copyWidth', p => [32 - Math.max(p.srcCopyOrigin.x, p.dstCopyOrigin.x), 16])\n      .expand('copyHeight', p => [16 - Math.max(p.srcCopyOrigin.y, p.dstCopyOrigin.y), 8])\n  )\n  .fn(async t => {\n    const { srcCopyOrigin, dstCopyOrigin, copyWidth, copyHeight } = t.params;\n\n    const kWidth = 32;\n    const kHeight = 16;\n\n    // Currently we don't support multisampled 2D array textures and the mipmap level count of the\n    // multisampled textures must be 1.\n    const srcTexture = t.device.createTexture({\n      size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC,\n      sampleCount: 4,\n    });\n    const dstTexture = t.device.createTexture({\n      size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_DST,\n      sampleCount: 4,\n    });\n\n    const isSuccess = copyWidth === kWidth && copyHeight === kHeight;\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture, origin: srcCopyOrigin },\n      { texture: dstTexture, origin: dstCopyOrigin },\n      { width: copyWidth, height: copyHeight, depthOrArrayLayers: 1 },\n      isSuccess\n    );\n  });\n\ng.test('texture_format_equality')\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('srcFormat', kTextureFormats)\n      .combine('dstFormat', kTextureFormats)\n  )\n  .fn(async t => {\n    const { srcFormat, dstFormat } = t.params;\n    const srcFormatInfo = kTextureFormatInfo[srcFormat];\n    const dstFormatInfo = kTextureFormatInfo[dstFormat];\n    await t.selectDeviceOrSkipTestCase([srcFormatInfo.feature, dstFormatInfo.feature]);\n\n    const kTextureSize = { width: 16, height: 16, depthOrArrayLayers: 1 };\n\n    const srcTexture = t.device.createTexture({\n      size: kTextureSize,\n      format: srcFormat,\n      usage: GPUTextureUsage.COPY_SRC,\n    });\n\n    const dstTexture = t.device.createTexture({\n      size: kTextureSize,\n      format: dstFormat,\n      usage: GPUTextureUsage.COPY_DST,\n    });\n\n    const isSuccess = srcFormat === dstFormat;\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture },\n      { texture: dstTexture },\n      kTextureSize,\n      isSuccess\n    );\n  });\n\ng.test('depth_stencil_copy_restrictions')\n  .params(u =>\n    u\n      .combine('format', kDepthStencilFormats)\n      .beginSubcases()\n      .combine('copyBoxOffsets', [\n        { x: 0, y: 0, width: 0, height: 0 },\n        { x: 1, y: 0, width: 0, height: 0 },\n        { x: 0, y: 1, width: 0, height: 0 },\n        { x: 0, y: 0, width: -1, height: 0 },\n        { x: 0, y: 0, width: 0, height: -1 },\n      ])\n      .combine('srcTextureSize', [\n        { width: 64, height: 64, depthOrArrayLayers: 1 },\n        { width: 64, height: 32, depthOrArrayLayers: 1 },\n        { width: 32, height: 32, depthOrArrayLayers: 1 },\n      ])\n      .combine('dstTextureSize', [\n        { width: 64, height: 64, depthOrArrayLayers: 1 },\n        { width: 64, height: 32, depthOrArrayLayers: 1 },\n        { width: 32, height: 32, depthOrArrayLayers: 1 },\n      ])\n      .combine('srcCopyLevel', [1, 2])\n      .combine('dstCopyLevel', [0, 1])\n  )\n  .fn(async t => {\n    const {\n      format,\n      copyBoxOffsets,\n      srcTextureSize,\n      dstTextureSize,\n      srcCopyLevel,\n      dstCopyLevel,\n    } = t.params;\n    await t.selectDeviceOrSkipTestCase(kTextureFormatInfo[format].feature);\n\n    const kMipLevelCount = 3;\n\n    const srcTexture = t.device.createTexture({\n      size: { width: srcTextureSize.width, height: srcTextureSize.height, depthOrArrayLayers: 1 },\n      format,\n      mipLevelCount: kMipLevelCount,\n      usage: GPUTextureUsage.COPY_SRC,\n    });\n    const dstTexture = t.device.createTexture({\n      size: { width: dstTextureSize.width, height: dstTextureSize.height, depthOrArrayLayers: 1 },\n      format,\n      mipLevelCount: kMipLevelCount,\n      usage: GPUTextureUsage.COPY_DST,\n    });\n\n    const srcSizeAtLevel = t.GetPhysicalSubresourceSize(srcTextureSize, format, srcCopyLevel);\n    const dstSizeAtLevel = t.GetPhysicalSubresourceSize(dstTextureSize, format, dstCopyLevel);\n\n    const copyOrigin = { x: copyBoxOffsets.x, y: copyBoxOffsets.y, z: 0 };\n\n    const copyWidth =\n      Math.min(srcSizeAtLevel.width, dstSizeAtLevel.width) + copyBoxOffsets.width - copyOrigin.x;\n    const copyHeight =\n      Math.min(srcSizeAtLevel.height, dstSizeAtLevel.height) + copyBoxOffsets.height - copyOrigin.y;\n\n    // Depth/stencil copies must copy whole subresources.\n    const isSuccess =\n      copyOrigin.x === 0 &&\n      copyOrigin.y === 0 &&\n      copyWidth === srcSizeAtLevel.width &&\n      copyHeight === srcSizeAtLevel.height &&\n      copyWidth === dstSizeAtLevel.width &&\n      copyHeight === dstSizeAtLevel.height;\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture, origin: { x: 0, y: 0, z: 0 }, mipLevel: srcCopyLevel },\n      { texture: dstTexture, origin: copyOrigin, mipLevel: dstCopyLevel },\n      { width: copyWidth, height: copyHeight, depthOrArrayLayers: 1 },\n      isSuccess\n    );\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture, origin: copyOrigin, mipLevel: srcCopyLevel },\n      { texture: dstTexture, origin: { x: 0, y: 0, z: 0 }, mipLevel: dstCopyLevel },\n      { width: copyWidth, height: copyHeight, depthOrArrayLayers: 1 },\n      isSuccess\n    );\n  });\n\ng.test('copy_ranges')\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('copyBoxOffsets', [\n        { x: 0, y: 0, z: 0, width: 0, height: 0, depthOrArrayLayers: -2 },\n        { x: 1, y: 0, z: 0, width: 0, height: 0, depthOrArrayLayers: -2 },\n        { x: 1, y: 0, z: 0, width: -1, height: 0, depthOrArrayLayers: -2 },\n        { x: 0, y: 1, z: 0, width: 0, height: 0, depthOrArrayLayers: -2 },\n        { x: 0, y: 1, z: 0, width: 0, height: -1, depthOrArrayLayers: -2 },\n        { x: 0, y: 0, z: 1, width: 0, height: 1, depthOrArrayLayers: -2 },\n        { x: 0, y: 0, z: 2, width: 0, height: 1, depthOrArrayLayers: 0 },\n        { x: 0, y: 0, z: 0, width: 1, height: 0, depthOrArrayLayers: -2 },\n        { x: 0, y: 0, z: 0, width: 0, height: 1, depthOrArrayLayers: -2 },\n        { x: 0, y: 0, z: 0, width: 0, height: 0, depthOrArrayLayers: 1 },\n        { x: 0, y: 0, z: 0, width: 0, height: 0, depthOrArrayLayers: 0 },\n        { x: 0, y: 0, z: 1, width: 0, height: 0, depthOrArrayLayers: -1 },\n        { x: 0, y: 0, z: 2, width: 0, height: 0, depthOrArrayLayers: -1 },\n      ])\n      .combine('srcCopyLevel', [0, 1, 3])\n      .combine('dstCopyLevel', [0, 1, 3])\n  )\n  .fn(async t => {\n    const { copyBoxOffsets, srcCopyLevel, dstCopyLevel } = t.params;\n\n    const kTextureSize = { width: 16, height: 8, depthOrArrayLayers: 3 };\n    const kMipLevelCount = 4;\n    const kFormat = 'rgba8unorm';\n\n    const srcTexture = t.device.createTexture({\n      size: kTextureSize,\n      format: kFormat,\n      mipLevelCount: kMipLevelCount,\n      usage: GPUTextureUsage.COPY_SRC,\n    });\n    const dstTexture = t.device.createTexture({\n      size: kTextureSize,\n      format: kFormat,\n      mipLevelCount: kMipLevelCount,\n      usage: GPUTextureUsage.COPY_DST,\n    });\n\n    const srcSizeAtLevel = t.GetPhysicalSubresourceSize(kTextureSize, kFormat, srcCopyLevel);\n    const dstSizeAtLevel = t.GetPhysicalSubresourceSize(kTextureSize, kFormat, dstCopyLevel);\n\n    const copyOrigin = { x: copyBoxOffsets.x, y: copyBoxOffsets.y, z: copyBoxOffsets.z };\n\n    const copyWidth = Math.max(\n      Math.min(srcSizeAtLevel.width, dstSizeAtLevel.width) + copyBoxOffsets.width - copyOrigin.x,\n      0\n    );\n    const copyHeight = Math.max(\n      Math.min(srcSizeAtLevel.height, dstSizeAtLevel.height) + copyBoxOffsets.height - copyOrigin.y,\n      0\n    );\n    const copyDepth =\n      kTextureSize.depthOrArrayLayers + copyBoxOffsets.depthOrArrayLayers - copyOrigin.z;\n\n    {\n      const isSuccess =\n        copyWidth <= srcSizeAtLevel.width &&\n        copyHeight <= srcSizeAtLevel.height &&\n        copyOrigin.x + copyWidth <= dstSizeAtLevel.width &&\n        copyOrigin.y + copyHeight <= dstSizeAtLevel.height &&\n        copyOrigin.z + copyDepth <= kTextureSize.depthOrArrayLayers;\n\n      t.TestCopyTextureToTexture(\n        { texture: srcTexture, origin: { x: 0, y: 0, z: 0 }, mipLevel: srcCopyLevel },\n        { texture: dstTexture, origin: copyOrigin, mipLevel: dstCopyLevel },\n        { width: copyWidth, height: copyHeight, depthOrArrayLayers: copyDepth },\n        isSuccess\n      );\n    }\n\n    {\n      const isSuccess =\n        copyOrigin.x + copyWidth <= srcSizeAtLevel.width &&\n        copyOrigin.y + copyHeight <= srcSizeAtLevel.height &&\n        copyWidth <= dstSizeAtLevel.width &&\n        copyHeight <= dstSizeAtLevel.height &&\n        copyOrigin.z + copyDepth <= kTextureSize.depthOrArrayLayers;\n\n      t.TestCopyTextureToTexture(\n        { texture: srcTexture, origin: copyOrigin, mipLevel: srcCopyLevel },\n        { texture: dstTexture, origin: { x: 0, y: 0, z: 0 }, mipLevel: dstCopyLevel },\n        { width: copyWidth, height: copyHeight, depthOrArrayLayers: copyDepth },\n        isSuccess\n      );\n    }\n  });\n\ng.test('copy_within_same_texture')\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('srcCopyOriginZ', [0, 2, 4])\n      .combine('dstCopyOriginZ', [0, 2, 4])\n      .combine('copyExtentDepth', [1, 2, 3])\n  )\n  .fn(async t => {\n    const { srcCopyOriginZ, dstCopyOriginZ, copyExtentDepth } = t.params;\n\n    const kArrayLayerCount = 7;\n\n    const testTexture = t.device.createTexture({\n      size: { width: 16, height: 16, depthOrArrayLayers: kArrayLayerCount },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    const isSuccess =\n      Math.min(srcCopyOriginZ, dstCopyOriginZ) + copyExtentDepth <=\n      Math.max(srcCopyOriginZ, dstCopyOriginZ);\n    t.TestCopyTextureToTexture(\n      { texture: testTexture, origin: { x: 0, y: 0, z: srcCopyOriginZ } },\n      { texture: testTexture, origin: { x: 0, y: 0, z: dstCopyOriginZ } },\n      { width: 16, height: 16, depthOrArrayLayers: copyExtentDepth },\n      isSuccess\n    );\n  });\n\ng.test('copy_aspects')\n  .desc(\n    `\nTest the validations on the member 'aspect' of GPUImageCopyTexture in CopyTextureToTexture().\n- for all the color and depth-stencil formats: the texture copy aspects must be both 'all'.\n- for all the depth-only formats: the texture copy aspects must be either 'all' or 'depth-only'.\n- for all the stencil-only formats: the texture copy aspects must be either 'all' or 'stencil-only'.\n`\n  )\n  .params(u =>\n    u\n      .combine('format', ['rgba8unorm', ...kDepthStencilFormats] as const)\n      .beginSubcases()\n      .combine('sourceAspect', ['all', 'depth-only', 'stencil-only'] as const)\n      .combine('destinationAspect', ['all', 'depth-only', 'stencil-only'] as const)\n  )\n  .fn(async t => {\n    const { format, sourceAspect, destinationAspect } = t.params;\n    await t.selectDeviceOrSkipTestCase(kTextureFormatInfo[format].feature);\n\n    const kTextureSize = { width: 16, height: 8, depthOrArrayLayers: 1 };\n\n    const srcTexture = t.device.createTexture({\n      size: kTextureSize,\n      format,\n      usage: GPUTextureUsage.COPY_SRC,\n    });\n    const dstTexture = t.device.createTexture({\n      size: kTextureSize,\n      format,\n      usage: GPUTextureUsage.COPY_DST,\n    });\n\n    // MAINTENANCE_TODO: get the valid aspects from capability_info.ts.\n    const kValidAspectsForFormat = {\n      rgba8unorm: ['all'],\n\n      // kUnsizedDepthStencilFormats\n      depth24plus: ['all', 'depth-only'],\n      'depth24plus-stencil8': ['all'],\n      'depth24unorm-stencil8': ['all'],\n      'depth32float-stencil8': ['all'],\n\n      // kSizedDepthStencilFormats\n      depth32float: ['all', 'depth-only'],\n      stencil8: ['all', 'stencil-only'],\n      depth16unorm: ['all', 'depth-only'],\n    };\n\n    const isSourceAspectValid = kValidAspectsForFormat[format].includes(sourceAspect);\n    const isDestinationAspectValid = kValidAspectsForFormat[format].includes(destinationAspect);\n\n    t.TestCopyTextureToTexture(\n      { texture: srcTexture, origin: { x: 0, y: 0, z: 0 }, aspect: sourceAspect },\n      { texture: dstTexture, origin: { x: 0, y: 0, z: 0 }, aspect: destinationAspect },\n      kTextureSize,\n      isSourceAspectValid && isDestinationAspectValid\n    );\n  });\n\ng.test('copy_ranges_with_compressed_texture_formats')\n  .params(u =>\n    u\n      .combine('format', kCompressedTextureFormats)\n      .beginSubcases()\n      .combine('copyBoxOffsets', [\n        { x: 0, y: 0, z: 0, width: 0, height: 0, depthOrArrayLayers: -2 },\n        { x: 1, y: 0, z: 0, width: 0, height: 0, depthOrArrayLayers: -2 },\n        { x: 4, y: 0, z: 0, width: 0, height: 0, depthOrArrayLayers: -2 },\n        { x: 0, y: 0, z: 0, width: -1, height: 0, depthOrArrayLayers: -2 },\n        { x: 0, y: 0, z: 0, width: -4, height: 0, depthOrArrayLayers: -2 },\n        { x: 0, y: 1, z: 0, width: 0, height: 0, depthOrArrayLayers: -2 },\n        { x: 0, y: 4, z: 0, width: 0, height: 0, depthOrArrayLayers: -2 },\n        { x: 0, y: 0, z: 0, width: 0, height: -1, depthOrArrayLayers: -2 },\n        { x: 0, y: 0, z: 0, width: 0, height: -4, depthOrArrayLayers: -2 },\n        { x: 0, y: 0, z: 0, width: 0, height: 0, depthOrArrayLayers: 0 },\n        { x: 0, y: 0, z: 1, width: 0, height: 0, depthOrArrayLayers: -1 },\n      ])\n      .combine('srcCopyLevel', [0, 1, 2])\n      .combine('dstCopyLevel', [0, 1, 2])\n  )\n  .fn(async t => {\n    const { format, copyBoxOffsets, srcCopyLevel, dstCopyLevel } = t.params;\n    await t.selectDeviceOrSkipTestCase(kTextureFormatInfo[format].feature);\n    const { blockWidth, blockHeight } = kTextureFormatInfo[format];\n\n    const kTextureSize = {\n      width: 15 * blockWidth,\n      height: 12 * blockHeight,\n      depthOrArrayLayers: 3,\n    };\n    const kMipLevelCount = 4;\n\n    const srcTexture = t.device.createTexture({\n      size: kTextureSize,\n      format,\n      mipLevelCount: kMipLevelCount,\n      usage: GPUTextureUsage.COPY_SRC,\n    });\n    const dstTexture = t.device.createTexture({\n      size: kTextureSize,\n      format,\n      mipLevelCount: kMipLevelCount,\n      usage: GPUTextureUsage.COPY_DST,\n    });\n\n    const srcSizeAtLevel = t.GetPhysicalSubresourceSize(kTextureSize, format, srcCopyLevel);\n    const dstSizeAtLevel = t.GetPhysicalSubresourceSize(kTextureSize, format, dstCopyLevel);\n\n    const copyOrigin = { x: copyBoxOffsets.x, y: copyBoxOffsets.y, z: copyBoxOffsets.z };\n\n    const copyWidth = Math.max(\n      Math.min(srcSizeAtLevel.width, dstSizeAtLevel.width) + copyBoxOffsets.width - copyOrigin.x,\n      0\n    );\n    const copyHeight = Math.max(\n      Math.min(srcSizeAtLevel.height, dstSizeAtLevel.height) + copyBoxOffsets.height - copyOrigin.y,\n      0\n    );\n    const copyDepth =\n      kTextureSize.depthOrArrayLayers + copyBoxOffsets.depthOrArrayLayers - copyOrigin.z;\n\n    const texelBlockWidth = kTextureFormatInfo[format].blockWidth;\n    const texelBlockHeight = kTextureFormatInfo[format].blockHeight;\n\n    const isSuccessForCompressedFormats =\n      copyOrigin.x % texelBlockWidth === 0 &&\n      copyOrigin.y % texelBlockHeight === 0 &&\n      copyWidth % texelBlockWidth === 0 &&\n      copyHeight % texelBlockHeight === 0;\n\n    {\n      const isSuccess =\n        isSuccessForCompressedFormats &&\n        copyWidth <= srcSizeAtLevel.width &&\n        copyHeight <= srcSizeAtLevel.height &&\n        copyOrigin.x + copyWidth <= dstSizeAtLevel.width &&\n        copyOrigin.y + copyHeight <= dstSizeAtLevel.height &&\n        copyOrigin.z + copyDepth <= kTextureSize.depthOrArrayLayers;\n\n      t.TestCopyTextureToTexture(\n        { texture: srcTexture, origin: { x: 0, y: 0, z: 0 }, mipLevel: srcCopyLevel },\n        { texture: dstTexture, origin: copyOrigin, mipLevel: dstCopyLevel },\n        { width: copyWidth, height: copyHeight, depthOrArrayLayers: copyDepth },\n        isSuccess\n      );\n    }\n\n    {\n      const isSuccess =\n        isSuccessForCompressedFormats &&\n        copyOrigin.x + copyWidth <= srcSizeAtLevel.width &&\n        copyOrigin.y + copyHeight <= srcSizeAtLevel.height &&\n        copyWidth <= dstSizeAtLevel.width &&\n        copyHeight <= dstSizeAtLevel.height &&\n        copyOrigin.z + copyDepth <= kTextureSize.depthOrArrayLayers;\n\n      t.TestCopyTextureToTexture(\n        { texture: srcTexture, origin: copyOrigin, mipLevel: srcCopyLevel },\n        { texture: dstTexture, origin: { x: 0, y: 0, z: 0 }, mipLevel: dstCopyLevel },\n        { width: copyWidth, height: copyHeight, depthOrArrayLayers: copyDepth },\n        isSuccess\n      );\n    }\n  });\n"],"file":"copyTextureToTexture.spec.js"}