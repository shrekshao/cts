{"version":3,"sources":["../../../../../../src/webgpu/api/validation/encoding/cmds/compute_pass.spec.ts"],"names":["description","makeTestGroup","ValidationTest","F","createComputePipeline","state","createNoOpComputePipeline","createErrorComputePipeline","createIndirectBuffer","data","descriptor","size","byteLength","usage","GPUBufferUsage","INDIRECT","COPY_DST","device","pushErrorScope","buffer","createBuffer","popErrorScope","queue","writeBuffer","destroy","g","test","desc","params","u","beginSubcases","combine","fn","t","pipeline","encoder","finish","createEncoder","setPipeline","expectValidationError","x","y","z","workSizes","dispatchType","dispatch","dispatchIndirect","Uint32Array","submit","kBufferData","fill","paramsSubcasesOnly","BYTES_PER_ELEMENT","offset"],"mappings":"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","sourcesContent":["export const description = `\nAPI validation test for compute pass\n\nDoes **not** test usage scopes (resource_usages/) or programmable pass stuff (programmable_pass).\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nclass F extends ValidationTest {\n  createComputePipeline(state: 'valid' | 'invalid'): GPUComputePipeline {\n    if (state === 'valid') {\n      return this.createNoOpComputePipeline();\n    }\n\n    return this.createErrorComputePipeline();\n  }\n\n  createIndirectBuffer(state: 'valid' | 'invalid' | 'destroyed', data: Uint32Array): GPUBuffer {\n    const descriptor: GPUBufferDescriptor = {\n      size: data.byteLength,\n      usage: GPUBufferUsage.INDIRECT | GPUBufferUsage.COPY_DST,\n    };\n\n    if (state === 'invalid') {\n      descriptor.usage = 0xffff; // Invalid GPUBufferUsage\n    }\n\n    this.device.pushErrorScope('validation');\n    const buffer = this.device.createBuffer(descriptor);\n    this.device.popErrorScope();\n\n    if (state === 'valid') {\n      this.queue.writeBuffer(buffer, 0, data);\n    }\n\n    if (state === 'destroyed') {\n      buffer.destroy();\n    }\n\n    return buffer;\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('set_pipeline')\n  .desc(\n    `\nsetPipeline should generate an error iff using an 'invalid' pipeline.\n`\n  )\n  .params(u => u.beginSubcases().combine('state', ['valid', 'invalid'] as const))\n  .fn(t => {\n    const pipeline = t.createComputePipeline(t.params.state);\n    const { encoder, finish } = t.createEncoder('compute pass');\n    encoder.setPipeline(pipeline);\n    t.expectValidationError(() => {\n      finish();\n    }, t.params.state === 'invalid');\n  });\n\ng.test('dispatch_sizes')\n  .desc(\n    `\nTest 'direct' and 'indirect' dispatch with various sizes.\n  - workgroup sizes:\n    - valid, {[0, 0, 0], [1, 1, 1]}\n    - invalid, TODO: workSizes {x,y,z} just under and above limit, once limit is established.\n`\n  )\n  .params(u =>\n    u\n      .combine('dispatchType', ['direct', 'indirect'] as const)\n      .beginSubcases()\n      .combine('workSizes', [\n        [0, 0, 0],\n        [1, 1, 1],\n      ] as const)\n  )\n  .fn(t => {\n    const pipeline = t.createNoOpComputePipeline();\n    const [x, y, z] = t.params.workSizes;\n    const { encoder, finish } = t.createEncoder('compute pass');\n    encoder.setPipeline(pipeline);\n    if (t.params.dispatchType === 'direct') {\n      encoder.dispatch(x, y, z);\n    } else if (t.params.dispatchType === 'indirect') {\n      encoder.dispatchIndirect(t.createIndirectBuffer('valid', new Uint32Array([x, y, z])), 0);\n    }\n    t.queue.submit([finish()]);\n  });\n\nconst kBufferData = new Uint32Array(6).fill(1);\ng.test('indirect_dispatch_buffer')\n  .desc(\n    `\nTest dispatchIndirect validation by submitting various dispatches with a no-op pipeline and an\nindirectBuffer with 6 elements.\n- indirectBuffer: {'valid', 'invalid', 'destroyed'}\n- indirectOffset:\n  - valid, within the buffer: {beginning, middle, end} of the buffer\n  - invalid, non-multiple of 4\n  - invalid, the last element is outside the buffer\n\nTODO: test specifically which call the validation error occurs in.\n      (Should be finish() for invalid, but submit() for destroyed.)\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('state', ['valid', 'invalid', 'destroyed'] as const)\n      .combine('offset', [\n        // valid (for 'valid' buffers)\n        0,\n        Uint32Array.BYTES_PER_ELEMENT,\n        kBufferData.byteLength - 3 * Uint32Array.BYTES_PER_ELEMENT,\n        // invalid, non-multiple of 4 offset\n        1,\n        // invalid, last element outside buffer\n        kBufferData.byteLength - 2 * Uint32Array.BYTES_PER_ELEMENT,\n      ])\n  )\n  .fn(t => {\n    const { state, offset } = t.params;\n    const pipeline = t.createNoOpComputePipeline();\n    const buffer = t.createIndirectBuffer(state, kBufferData);\n    const { encoder, finish } = t.createEncoder('compute pass');\n    encoder.setPipeline(pipeline);\n    t.expectValidationError(() => {\n      encoder.dispatchIndirect(buffer, offset);\n      t.queue.submit([finish()]);\n    }, state !== 'valid' || offset % 4 !== 0 || offset + 3 * Uint32Array.BYTES_PER_ELEMENT > kBufferData.byteLength);\n  });\n"],"file":"compute_pass.spec.js"}