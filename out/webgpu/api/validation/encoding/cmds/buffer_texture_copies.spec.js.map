{"version":3,"sources":["../../../../../../src/webgpu/api/validation/encoding/cmds/buffer_texture_copies.spec.ts"],"names":["description","makeTestGroup","assert","unreachable","kDepthStencilFormats","depthStencilBufferTextureCopySupported","depthStencilFormatAspectSize","align","kBufferCopyAlignment","kBytesPerRowAlignment","ValidationTest","ImageCopyTest","testCopyBufferToTexture","source","destination","copySize","isSuccess","encoder","validateFinishAndSubmit","createEncoder","copyBufferToTexture","testCopyTextureToBuffer","copyTextureToBuffer","testWriteTexture","uploadData","dataLayout","expectGPUError","queue","writeTexture","g","test","desc","params","u","combine","beginSubcases","fn","t","format","aspect","selectDeviceForTextureFormatOrSkipTestCase","textureSize","width","height","depthOrArrayLayers","texture","device","createTexture","size","usage","GPUTextureUsage","COPY_SRC","COPY_DST","uploadBufferSize","buffer","createBuffer","GPUBufferUsage","success","Uint8Array","bytesPerRow","rowsPerImage","filter","param","copyType","texelAspectSize","bytesPerRowAlignment","minimumBufferSize","bigEnoughBuffer","smallerBuffer","enoughUploadData","smallerUploadData","offset"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA,CANO,CAQP,SAASC,aAAT,QAA8B,+CAA9B;AACA,SAASC,MAAT,EAAiBC,WAAjB,QAAoC,oCAApC;AACA;AACEC,oBADF;AAEEC,sCAFF;AAGEC,4BAHF;AAIO,gCAJP;AAKA,SAASC,KAAT,QAAsB,0BAAtB;AACA,SAASC,oBAAT,EAA+BC,qBAA/B,QAA4D,oCAA5D;AACA,SAASC,cAAT,QAA+B,0BAA/B;;AAEA,MAAMC,aAAN,SAA4BD,cAA5B,CAA2C;AACzCE,EAAAA,uBAAuB;AACrBC,EAAAA,MADqB;AAErBC,EAAAA,WAFqB;AAGrBC,EAAAA,QAHqB;AAIrBC,EAAAA,SAJqB;AAKf;AACN,UAAM,EAAEC,OAAF,EAAWC,uBAAX,KAAuC,KAAKC,aAAL,CAAmB,UAAnB,CAA7C;AACAF,IAAAA,OAAO,CAACG,mBAAR,CAA4BP,MAA5B,EAAoCC,WAApC,EAAiDC,QAAjD;AACAG,IAAAA,uBAAuB,CAACF,SAAD,EAAY,IAAZ,CAAvB;AACD;;AAEDK,EAAAA,uBAAuB;AACrBR,EAAAA,MADqB;AAErBC,EAAAA,WAFqB;AAGrBC,EAAAA,QAHqB;AAIrBC,EAAAA,SAJqB;AAKf;AACN,UAAM,EAAEC,OAAF,EAAWC,uBAAX,KAAuC,KAAKC,aAAL,CAAmB,UAAnB,CAA7C;AACAF,IAAAA,OAAO,CAACK,mBAAR,CAA4BT,MAA5B,EAAoCC,WAApC,EAAiDC,QAAjD;AACAG,IAAAA,uBAAuB,CAACF,SAAD,EAAY,IAAZ,CAAvB;AACD;;AAEDO,EAAAA,gBAAgB;AACdT,EAAAA,WADc;AAEdU,EAAAA,UAFc;AAGdC,EAAAA,UAHc;AAIdV,EAAAA,QAJc;AAKdC,EAAAA,SALc;AAMR;AACN,SAAKU,cAAL;AACE,gBADF;AAEE,UAAM,KAAKC,KAAL,CAAWC,YAAX,CAAwBd,WAAxB,EAAqCU,UAArC,EAAiDC,UAAjD,EAA6DV,QAA7D,CAFR;AAGE,KAACC,SAHH;;AAKD,GAnCwC;;;AAsC3C,OAAO,MAAMa,CAAC,GAAG5B,aAAa,CAACU,aAAD,CAAvB;;AAEPkB,CAAC,CAACC,IAAF,CAAO,4CAAP;AACGC,IADH;AAEK;AACL;AACA;AACA;AACA,CANA;;AAQGC,MARH,CAQU,CAAAC,CAAC;AACPA,CAAC,CAAC;AAAD,CACEC,OADH,CACW,QADX,EACqB9B,oBADrB;AAEG+B,aAFH;AAGGD,OAHH,CAGW,QAHX,EAGqB,CAAC,KAAD,EAAQ,YAAR,EAAsB,cAAtB,CAHrB,CATJ;;AAcGE,EAdH,CAcM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEC,MAAF,EAAUC,MAAV,KAAqBF,CAAC,CAACL,MAA7B;AACA,QAAMK,CAAC,CAACG,0CAAF,CAA6CF,MAA7C,CAAN;;AAEA,QAAMG,WAAW,GAAG,EAAEC,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,kBAAkB,EAAE,CAA3C,EAApB;AACA,QAAMC,OAAO,GAAGR,CAAC,CAACS,MAAF,CAASC,aAAT,CAAuB;AACrCC,IAAAA,IAAI,EAAEP,WAD+B;AAErCH,IAAAA,MAFqC;AAGrCW,IAAAA,KAAK,EAAEC,eAAe,CAACC,QAAhB,GAA2BD,eAAe,CAACE,QAHb,EAAvB,CAAhB;;;AAMA,QAAMC,gBAAgB,GAAG,EAAzB;AACA,QAAMC,MAAM,GAAGjB,CAAC,CAACS,MAAF,CAASS,YAAT,CAAsB;AACnCP,IAAAA,IAAI,EAAEK,gBAD6B;AAEnCJ,IAAAA,KAAK,EAAEO,cAAc,CAACL,QAAf,GAA0BK,cAAc,CAACJ,QAFb,EAAtB,CAAf;;;AAKA;AACE,UAAMK,OAAO,GAAGpD,sCAAsC,CAAC,SAAD,EAAYiC,MAAZ,EAAoBC,MAApB,CAAtD;AACAF,IAAAA,CAAC,CAACzB,uBAAF,CAA0B,EAAE0C,MAAF,EAA1B,EAAsC,EAAET,OAAF,EAAWN,MAAX,EAAtC,EAA2DE,WAA3D,EAAwEgB,OAAxE;AACD;;AAED;AACE,UAAMA,OAAO,GAAGpD,sCAAsC,CAAC,SAAD,EAAYiC,MAAZ,EAAoBC,MAApB,CAAtD;AACAF,IAAAA,CAAC,CAAChB,uBAAF,CAA0B,EAAEwB,OAAF,EAAWN,MAAX,EAA1B,EAA+C,EAAEe,MAAF,EAA/C,EAA2Db,WAA3D,EAAwEgB,OAAxE;AACD;;AAED;AACE,UAAMA,OAAO,GAAGpD,sCAAsC,CAAC,cAAD,EAAiBiC,MAAjB,EAAyBC,MAAzB,CAAtD;AACA,UAAMf,UAAU,GAAG,IAAIkC,UAAJ,CAAeL,gBAAf,CAAnB;AACAhB,IAAAA,CAAC,CAACd,gBAAF;AACE,MAAEsB,OAAF,EAAWN,MAAX,EADF;AAEEf,IAAAA,UAFF;AAGE;AACEmC,MAAAA,WAAW,EAAElB,WAAW,CAACC,KAD3B;AAEEkB,MAAAA,YAAY,EAAEnB,WAAW,CAACE,MAF5B,EAHF;;AAOEF,IAAAA,WAPF;AAQEgB,IAAAA,OARF;;AAUD;AACF,CAvDH;;AAyDA5B,CAAC,CAACC,IAAF,CAAO,uCAAP;AACGC,IADH;AAEK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXA;;AAaGC,MAbH,CAaU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,QADX,EACqB9B,oBADrB;AAEG8B,OAFH,CAEW,QAFX,EAEqB,CAAC,YAAD,EAAe,cAAf,CAFrB;AAGGA,OAHH,CAGW,UAHX,EAGuB,CAAC,SAAD,EAAY,SAAZ,EAAuB,cAAvB,CAHvB;AAIG2B,MAJH,CAIU,CAAAC,KAAK;AACXzD,sCAAsC,CAACyD,KAAK,CAACC,QAAP,EAAiBD,KAAK,CAACxB,MAAvB,EAA+BwB,KAAK,CAACvB,MAArC,CAL1C;;AAOGJ,aAPH;AAQGD,OARH,CAQW,UARX,EAQuB;AACnB,EAAEQ,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,kBAAkB,EAAE,CAA3C,EADmB;AAEnB,EAAEF,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,kBAAkB,EAAE,CAA3C,EAFmB;AAGnB,EAAEF,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,kBAAkB,EAAE,CAA3C,EAHmB,CARvB,CAdJ;;;AA4BGR,EA5BH,CA4BM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEC,MAAF,EAAUC,MAAV,EAAkBwB,QAAlB,EAA4BhD,QAA5B,KAAyCsB,CAAC,CAACL,MAAjD;AACA,QAAMK,CAAC,CAACG,0CAAF,CAA6CF,MAA7C,CAAN;;AAEA,QAAMO,OAAO,GAAGR,CAAC,CAACS,MAAF,CAASC,aAAT,CAAuB;AACrCC,IAAAA,IAAI,EAAEjC,QAD+B;AAErCuB,IAAAA,MAFqC;AAGrCW,IAAAA,KAAK,EAAEC,eAAe,CAACC,QAAhB,GAA2BD,eAAe,CAACE,QAHb,EAAvB,CAAhB;;;AAMA,QAAMY,eAAe,GAAG1D,4BAA4B,CAACgC,MAAD,EAASC,MAAT,CAApD;AACArC,EAAAA,MAAM,CAAC8D,eAAe,GAAG,CAAnB,CAAN;;AAEA,QAAMC,oBAAoB,GAAGF,QAAQ,KAAK,cAAb,GAA8B,CAA9B,GAAkCtD,qBAA/D;AACA,QAAMkD,WAAW,GAAGpD,KAAK,CAACyD,eAAe,GAAGjD,QAAQ,CAAC2B,KAA5B,EAAmCuB,oBAAnC,CAAzB;AACA,QAAML,YAAY,GAAG7C,QAAQ,CAAC4B,MAA9B;AACA,QAAMuB,iBAAiB;AACrBP,EAAAA,WAAW,IAAIC,YAAY,GAAG7C,QAAQ,CAAC6B,kBAAxB,GAA6C,CAAjD,CAAX;AACArC,EAAAA,KAAK,CAACyD,eAAe,GAAGjD,QAAQ,CAAC2B,KAA5B,EAAmClC,oBAAnC,CAFP;AAGAN,EAAAA,MAAM,CAACgE,iBAAiB,GAAG1D,oBAArB,CAAN;;AAEA,QAAM2D,eAAe,GAAG9B,CAAC,CAACS,MAAF,CAASS,YAAT,CAAsB;AAC5CP,IAAAA,IAAI,EAAEkB,iBADsC;AAE5CjB,IAAAA,KAAK,EAAEO,cAAc,CAACL,QAAf,GAA0BK,cAAc,CAACJ,QAFJ,EAAtB,CAAxB;;AAIA,QAAMgB,aAAa,GAAG/B,CAAC,CAACS,MAAF,CAASS,YAAT,CAAsB;AAC1CP,IAAAA,IAAI,EAAEkB,iBAAiB,GAAG1D,oBADgB;AAE1CyC,IAAAA,KAAK,EAAEO,cAAc,CAACL,QAAf,GAA0BK,cAAc,CAACJ,QAFN,EAAtB,CAAtB;;;AAKA,MAAIW,QAAQ,KAAK,SAAjB,EAA4B;AAC1B1B,IAAAA,CAAC,CAACzB,uBAAF;AACE,MAAE0C,MAAM,EAAEa,eAAV,EAA2BR,WAA3B,EAAwCC,YAAxC,EADF;AAEE,MAAEf,OAAF,EAAWN,MAAX,EAFF;AAGExB,IAAAA,QAHF;AAIE,QAJF;;AAMAsB,IAAAA,CAAC,CAACzB,uBAAF;AACE,MAAE0C,MAAM,EAAEc,aAAV,EAAyBT,WAAzB,EAAsCC,YAAtC,EADF;AAEE,MAAEf,OAAF,EAAWN,MAAX,EAFF;AAGExB,IAAAA,QAHF;AAIE,SAJF;;AAMD,GAbD,MAaO,IAAIgD,QAAQ,KAAK,SAAjB,EAA4B;AACjC1B,IAAAA,CAAC,CAAChB,uBAAF;AACE,MAAEwB,OAAF,EAAWN,MAAX,EADF;AAEE,MAAEe,MAAM,EAAEa,eAAV,EAA2BR,WAA3B,EAAwCC,YAAxC,EAFF;AAGE7C,IAAAA,QAHF;AAIE,QAJF;;AAMAsB,IAAAA,CAAC,CAAChB,uBAAF;AACE,MAAEwB,OAAF,EAAWN,MAAX,EADF;AAEE,MAAEe,MAAM,EAAEc,aAAV,EAAyBT,WAAzB,EAAsCC,YAAtC,EAFF;AAGE7C,IAAAA,QAHF;AAIE,SAJF;;AAMD,GAbM,MAaA,IAAIgD,QAAQ,KAAK,cAAjB,EAAiC;AACtC,UAAMM,gBAAgB,GAAG,IAAIX,UAAJ,CAAeQ,iBAAf,CAAzB;AACA,UAAMI,iBAAiB,GAAG,IAAIZ,UAAJ,CAAeQ,iBAAiB,GAAG1D,oBAAnC,CAA1B;AACA6B,IAAAA,CAAC,CAACd,gBAAF;AACE,MAAEsB,OAAF,EAAWN,MAAX,EADF;AAEE8B,IAAAA,gBAFF;AAGE;AACEV,MAAAA,WADF;AAEEC,MAAAA,YAFF,EAHF;;AAOE7C,IAAAA,QAPF;AAQE,QARF;;;AAWAsB,IAAAA,CAAC,CAACd,gBAAF;AACE,MAAEsB,OAAF,EAAWN,MAAX,EADF;AAEE+B,IAAAA,iBAFF;AAGE;AACEX,MAAAA,WADF;AAEEC,MAAAA,YAFF,EAHF;;AAOE7C,IAAAA,QAPF;AAQE,SARF;;AAUD,GAxBM,MAwBA;AACLZ,IAAAA,WAAW;AACZ;AACF,CA/GH;;AAiHA0B,CAAC,CAACC,IAAF,CAAO,yCAAP;AACGC,IADH;AAEK;AACL;AACA;AACA;AACA,KANA;;AAQGC,MARH,CAQU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,QADX,EACqB9B,oBADrB;AAEG8B,OAFH,CAEW,QAFX,EAEqB,CAAC,YAAD,EAAe,cAAf,CAFrB;AAGGA,OAHH,CAGW,UAHX,EAGuB,CAAC,SAAD,EAAY,SAAZ,EAAuB,cAAvB,CAHvB;AAIG2B,MAJH,CAIU,CAAAC,KAAK;AACXzD,sCAAsC,CAACyD,KAAK,CAACC,QAAP,EAAiBD,KAAK,CAACxB,MAAvB,EAA+BwB,KAAK,CAACvB,MAArC,CAL1C;;AAOGJ,aAPH;AAQGD,OARH,CAQW,QARX,EAQqB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CARrB,CATJ;;AAmBGE,EAnBH,CAmBM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEC,MAAF,EAAUC,MAAV,EAAkBwB,QAAlB,EAA4BQ,MAA5B,KAAuClC,CAAC,CAACL,MAA/C;AACA,QAAMK,CAAC,CAACG,0CAAF,CAA6CF,MAA7C,CAAN;;AAEA,QAAMG,WAAW,GAAG,EAAEC,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,kBAAkB,EAAE,CAA3C,EAApB;;AAEA,QAAMC,OAAO,GAAGR,CAAC,CAACS,MAAF,CAASC,aAAT,CAAuB;AACrCC,IAAAA,IAAI,EAAEP,WAD+B;AAErCH,IAAAA,MAFqC;AAGrCW,IAAAA,KAAK,EAAEC,eAAe,CAACC,QAAhB,GAA2BD,eAAe,CAACE,QAHb,EAAvB,CAAhB;;;AAMA,QAAMY,eAAe,GAAG1D,4BAA4B,CAACgC,MAAD,EAASC,MAAT,CAApD;AACArC,EAAAA,MAAM,CAAC8D,eAAe,GAAG,CAAnB,CAAN;;AAEA,QAAMC,oBAAoB,GAAGF,QAAQ,KAAK,cAAb,GAA8B,CAA9B,GAAkCtD,qBAA/D;AACA,QAAMkD,WAAW,GAAGpD,KAAK,CAACyD,eAAe,GAAGvB,WAAW,CAACC,KAA/B,EAAsCuB,oBAAtC,CAAzB;AACA,QAAML,YAAY,GAAGnB,WAAW,CAACE,MAAjC;AACA,QAAMuB,iBAAiB;AACrBP,EAAAA,WAAW,IAAIC,YAAY,GAAGnB,WAAW,CAACG,kBAA3B,GAAgD,CAApD,CAAX;AACArC,EAAAA,KAAK,CAACyD,eAAe,GAAGvB,WAAW,CAACC,KAA/B,EAAsClC,oBAAtC,CAFP;AAGAN,EAAAA,MAAM,CAACgE,iBAAiB,GAAG1D,oBAArB,CAAN;;AAEA,QAAM8C,MAAM,GAAGjB,CAAC,CAACS,MAAF,CAASS,YAAT,CAAsB;AACnCP,IAAAA,IAAI,EAAEzC,KAAK,CAAC2D,iBAAiB,GAAGK,MAArB,EAA6B/D,oBAA7B,CADwB;AAEnCyC,IAAAA,KAAK,EAAEO,cAAc,CAACL,QAAf,GAA0BK,cAAc,CAACJ,QAFb,EAAtB,CAAf;;;AAKA,QAAMpC,SAAS,GAAG+C,QAAQ,KAAK,cAAb,GAA8B,IAA9B,GAAqCQ,MAAM,GAAG,CAAT,KAAe,CAAtE;;AAEA,MAAIR,QAAQ,KAAK,SAAjB,EAA4B;AAC1B1B,IAAAA,CAAC,CAACzB,uBAAF;AACE,MAAE0C,MAAF,EAAUiB,MAAV,EAAkBZ,WAAlB,EAA+BC,YAA/B,EADF;AAEE,MAAEf,OAAF,EAAWN,MAAX,EAFF;AAGEE,IAAAA,WAHF;AAIEzB,IAAAA,SAJF;;AAMD,GAPD,MAOO,IAAI+C,QAAQ,KAAK,SAAjB,EAA4B;AACjC1B,IAAAA,CAAC,CAAChB,uBAAF;AACE,MAAEwB,OAAF,EAAWN,MAAX,EADF;AAEE,MAAEe,MAAF,EAAUiB,MAAV,EAAkBZ,WAAlB,EAA+BC,YAA/B,EAFF;AAGEnB,IAAAA,WAHF;AAIEzB,IAAAA,SAJF;;AAMD,GAPM,MAOA,IAAI+C,QAAQ,KAAK,cAAjB,EAAiC;AACtC,UAAMvC,UAAU,GAAG,IAAIkC,UAAJ,CAAeQ,iBAAiB,GAAGK,MAAnC,CAAnB;AACAlC,IAAAA,CAAC,CAACd,gBAAF;AACE,MAAEsB,OAAF,EAAWN,MAAX,EADF;AAEEf,IAAAA,UAFF;AAGE;AACE+C,MAAAA,MADF;AAEEZ,MAAAA,WAFF;AAGEC,MAAAA,YAHF,EAHF;;AAQEnB,IAAAA,WARF;AASEzB,IAAAA,SATF;;AAWD,GAbM,MAaA;AACLb,IAAAA,WAAW;AACZ;AACF,CA/EH","sourcesContent":["export const description = `\ncopyTextureToBuffer and copyBufferToTexture validation tests not covered by\nthe general image_copy tests, or by destroyed,*.\n\nTODO:\n- Move all the tests here to image_copy/.\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { assert, unreachable } from '../../../../../common/util/util.js';\nimport {\n  kDepthStencilFormats,\n  depthStencilBufferTextureCopySupported,\n  depthStencilFormatAspectSize,\n} from '../../../../capability_info.js';\nimport { align } from '../../../../util/math.js';\nimport { kBufferCopyAlignment, kBytesPerRowAlignment } from '../../../../util/texture/layout.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nclass ImageCopyTest extends ValidationTest {\n  testCopyBufferToTexture(\n    source: GPUImageCopyBuffer,\n    destination: GPUImageCopyTexture,\n    copySize: GPUExtent3DStrict,\n    isSuccess: boolean\n  ): void {\n    const { encoder, validateFinishAndSubmit } = this.createEncoder('non-pass');\n    encoder.copyBufferToTexture(source, destination, copySize);\n    validateFinishAndSubmit(isSuccess, true);\n  }\n\n  testCopyTextureToBuffer(\n    source: GPUImageCopyTexture,\n    destination: GPUImageCopyBuffer,\n    copySize: GPUExtent3DStrict,\n    isSuccess: boolean\n  ): void {\n    const { encoder, validateFinishAndSubmit } = this.createEncoder('non-pass');\n    encoder.copyTextureToBuffer(source, destination, copySize);\n    validateFinishAndSubmit(isSuccess, true);\n  }\n\n  testWriteTexture(\n    destination: GPUImageCopyTexture,\n    uploadData: Uint8Array,\n    dataLayout: GPUImageDataLayout,\n    copySize: GPUExtent3DStrict,\n    isSuccess: boolean\n  ): void {\n    this.expectGPUError(\n      'validation',\n      () => this.queue.writeTexture(destination, uploadData, dataLayout, copySize),\n      !isSuccess\n    );\n  }\n}\n\nexport const g = makeTestGroup(ImageCopyTest);\n\ng.test('depth_stencil_format,copy_usage_and_aspect')\n  .desc(\n    `\n  Validate the combination of usage and aspect of each depth stencil format in copyBufferToTexture,\n  copyTextureToBuffer and writeTexture. See https://gpuweb.github.io/gpuweb/#depth-formats for more\n  details.\n`\n  )\n  .params(u =>\n    u //\n      .combine('format', kDepthStencilFormats)\n      .beginSubcases()\n      .combine('aspect', ['all', 'depth-only', 'stencil-only'] as const)\n  )\n  .fn(async t => {\n    const { format, aspect } = t.params;\n    await t.selectDeviceForTextureFormatOrSkipTestCase(format);\n\n    const textureSize = { width: 1, height: 1, depthOrArrayLayers: 1 };\n    const texture = t.device.createTexture({\n      size: textureSize,\n      format,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    const uploadBufferSize = 32;\n    const buffer = t.device.createBuffer({\n      size: uploadBufferSize,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n\n    {\n      const success = depthStencilBufferTextureCopySupported('CopyB2T', format, aspect);\n      t.testCopyBufferToTexture({ buffer }, { texture, aspect }, textureSize, success);\n    }\n\n    {\n      const success = depthStencilBufferTextureCopySupported('CopyT2B', format, aspect);\n      t.testCopyTextureToBuffer({ texture, aspect }, { buffer }, textureSize, success);\n    }\n\n    {\n      const success = depthStencilBufferTextureCopySupported('WriteTexture', format, aspect);\n      const uploadData = new Uint8Array(uploadBufferSize);\n      t.testWriteTexture(\n        { texture, aspect },\n        uploadData,\n        {\n          bytesPerRow: textureSize.width,\n          rowsPerImage: textureSize.height,\n        },\n        textureSize,\n        success\n      );\n    }\n  });\n\ng.test('depth_stencil_format,copy_buffer_size')\n  .desc(\n    `\n  Validate the minimum buffer size for each depth stencil format in copyBufferToTexture,\n  copyTextureToBuffer and writeTexture.\n\n  Given a depth stencil format, a copy aspect ('depth-only' or 'stencil-only'), the copy method\n  (buffer-to-texture or texture-to-buffer) and the copy size, validate\n  - if the copy can be successfully executed with the minimum required buffer size.\n  - if the copy fails with a validation error when the buffer size is less than the minimum\n  required buffer size.\n`\n  )\n  .params(u =>\n    u\n      .combine('format', kDepthStencilFormats)\n      .combine('aspect', ['depth-only', 'stencil-only'] as const)\n      .combine('copyType', ['CopyB2T', 'CopyT2B', 'WriteTexture'] as const)\n      .filter(param =>\n        depthStencilBufferTextureCopySupported(param.copyType, param.format, param.aspect)\n      )\n      .beginSubcases()\n      .combine('copySize', [\n        { width: 8, height: 1, depthOrArrayLayers: 1 },\n        { width: 4, height: 4, depthOrArrayLayers: 1 },\n        { width: 4, height: 4, depthOrArrayLayers: 3 },\n      ])\n  )\n  .fn(async t => {\n    const { format, aspect, copyType, copySize } = t.params;\n    await t.selectDeviceForTextureFormatOrSkipTestCase(format);\n\n    const texture = t.device.createTexture({\n      size: copySize,\n      format,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    const texelAspectSize = depthStencilFormatAspectSize(format, aspect);\n    assert(texelAspectSize > 0);\n\n    const bytesPerRowAlignment = copyType === 'WriteTexture' ? 1 : kBytesPerRowAlignment;\n    const bytesPerRow = align(texelAspectSize * copySize.width, bytesPerRowAlignment);\n    const rowsPerImage = copySize.height;\n    const minimumBufferSize =\n      bytesPerRow * (rowsPerImage * copySize.depthOrArrayLayers - 1) +\n      align(texelAspectSize * copySize.width, kBufferCopyAlignment);\n    assert(minimumBufferSize > kBufferCopyAlignment);\n\n    const bigEnoughBuffer = t.device.createBuffer({\n      size: minimumBufferSize,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n    const smallerBuffer = t.device.createBuffer({\n      size: minimumBufferSize - kBufferCopyAlignment,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n\n    if (copyType === 'CopyB2T') {\n      t.testCopyBufferToTexture(\n        { buffer: bigEnoughBuffer, bytesPerRow, rowsPerImage },\n        { texture, aspect },\n        copySize,\n        true\n      );\n      t.testCopyBufferToTexture(\n        { buffer: smallerBuffer, bytesPerRow, rowsPerImage },\n        { texture, aspect },\n        copySize,\n        false\n      );\n    } else if (copyType === 'CopyT2B') {\n      t.testCopyTextureToBuffer(\n        { texture, aspect },\n        { buffer: bigEnoughBuffer, bytesPerRow, rowsPerImage },\n        copySize,\n        true\n      );\n      t.testCopyTextureToBuffer(\n        { texture, aspect },\n        { buffer: smallerBuffer, bytesPerRow, rowsPerImage },\n        copySize,\n        false\n      );\n    } else if (copyType === 'WriteTexture') {\n      const enoughUploadData = new Uint8Array(minimumBufferSize);\n      const smallerUploadData = new Uint8Array(minimumBufferSize - kBufferCopyAlignment);\n      t.testWriteTexture(\n        { texture, aspect },\n        enoughUploadData,\n        {\n          bytesPerRow,\n          rowsPerImage,\n        },\n        copySize,\n        true\n      );\n\n      t.testWriteTexture(\n        { texture, aspect },\n        smallerUploadData,\n        {\n          bytesPerRow,\n          rowsPerImage,\n        },\n        copySize,\n        false\n      );\n    } else {\n      unreachable();\n    }\n  });\n\ng.test('depth_stencil_format,copy_buffer_offset')\n  .desc(\n    `\n    Validate for every depth stencil formats the buffer offset must be a multiple of 4 in\n    copyBufferToTexture() and copyTextureToBuffer(), but the offset in writeTexture() doesn't always\n    need to be a multiple of 4.\n    `\n  )\n  .params(u =>\n    u\n      .combine('format', kDepthStencilFormats)\n      .combine('aspect', ['depth-only', 'stencil-only'] as const)\n      .combine('copyType', ['CopyB2T', 'CopyT2B', 'WriteTexture'] as const)\n      .filter(param =>\n        depthStencilBufferTextureCopySupported(param.copyType, param.format, param.aspect)\n      )\n      .beginSubcases()\n      .combine('offset', [1, 2, 4, 6, 8])\n  )\n  .fn(async t => {\n    const { format, aspect, copyType, offset } = t.params;\n    await t.selectDeviceForTextureFormatOrSkipTestCase(format);\n\n    const textureSize = { width: 4, height: 4, depthOrArrayLayers: 1 };\n\n    const texture = t.device.createTexture({\n      size: textureSize,\n      format,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    });\n\n    const texelAspectSize = depthStencilFormatAspectSize(format, aspect);\n    assert(texelAspectSize > 0);\n\n    const bytesPerRowAlignment = copyType === 'WriteTexture' ? 1 : kBytesPerRowAlignment;\n    const bytesPerRow = align(texelAspectSize * textureSize.width, bytesPerRowAlignment);\n    const rowsPerImage = textureSize.height;\n    const minimumBufferSize =\n      bytesPerRow * (rowsPerImage * textureSize.depthOrArrayLayers - 1) +\n      align(texelAspectSize * textureSize.width, kBufferCopyAlignment);\n    assert(minimumBufferSize > kBufferCopyAlignment);\n\n    const buffer = t.device.createBuffer({\n      size: align(minimumBufferSize + offset, kBufferCopyAlignment),\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n\n    const isSuccess = copyType === 'WriteTexture' ? true : offset % 4 === 0;\n\n    if (copyType === 'CopyB2T') {\n      t.testCopyBufferToTexture(\n        { buffer, offset, bytesPerRow, rowsPerImage },\n        { texture, aspect },\n        textureSize,\n        isSuccess\n      );\n    } else if (copyType === 'CopyT2B') {\n      t.testCopyTextureToBuffer(\n        { texture, aspect },\n        { buffer, offset, bytesPerRow, rowsPerImage },\n        textureSize,\n        isSuccess\n      );\n    } else if (copyType === 'WriteTexture') {\n      const uploadData = new Uint8Array(minimumBufferSize + offset);\n      t.testWriteTexture(\n        { texture, aspect },\n        uploadData,\n        {\n          offset,\n          bytesPerRow,\n          rowsPerImage,\n        },\n        textureSize,\n        isSuccess\n      );\n    } else {\n      unreachable();\n    }\n  });\n"],"file":"buffer_texture_copies.spec.js"}