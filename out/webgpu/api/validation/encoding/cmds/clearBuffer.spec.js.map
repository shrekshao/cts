{"version":3,"sources":["../../../../../../src/webgpu/api/validation/encoding/cmds/clearBuffer.spec.ts"],"names":["description","makeTestGroup","kBufferUsages","kMaxSafeMultipleOf8","ValidationTest","F","TestClearBuffer","options","buffer","offset","size","isSuccess","commandEncoder","device","createCommandEncoder","clearBuffer","expectValidationError","finish","g","test","desc","fn","t","errorBuffer","getErrorBuffer","paramsSubcasesOnly","undefined","params","createBuffer","usage","GPUBufferUsage","COPY_DST","u","combine","_isSuccess"],"mappings":"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","sourcesContent":["export const description = `\nAPI validation tests for clearBuffer.\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { kBufferUsages } from '../../../../capability_info.js';\nimport { kMaxSafeMultipleOf8 } from '../../../../util/math.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nclass F extends ValidationTest {\n  TestClearBuffer(options: {\n    buffer: GPUBuffer;\n    offset: number | undefined;\n    size: number | undefined;\n    isSuccess: boolean;\n  }): void {\n    const { buffer, offset, size, isSuccess } = options;\n\n    const commandEncoder = this.device.createCommandEncoder();\n    commandEncoder.clearBuffer(buffer, offset, size);\n\n    this.expectValidationError(() => {\n      commandEncoder.finish();\n    }, !isSuccess);\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('invalid_buffer')\n  .desc(`Test that clearing an error buffer fails.`)\n  .fn(async t => {\n    const errorBuffer = t.getErrorBuffer();\n\n    t.TestClearBuffer({\n      buffer: errorBuffer,\n      offset: 0,\n      size: 8,\n      isSuccess: false,\n    });\n  });\n\ng.test('default_args')\n  .desc(`Test that calling clearBuffer with a default offset and size is valid.`)\n  .paramsSubcasesOnly([\n    { offset: undefined, size: undefined },\n    { offset: 4, size: undefined },\n    { offset: undefined, size: 8 },\n  ] as const)\n  .fn(async t => {\n    const { offset, size } = t.params;\n\n    const buffer = t.device.createBuffer({\n      size: 16,\n      usage: GPUBufferUsage.COPY_DST,\n    });\n\n    t.TestClearBuffer({\n      buffer,\n      offset,\n      size,\n      isSuccess: true,\n    });\n  });\n\ng.test('buffer_usage')\n  .desc(`Test that only buffers with COPY_DST usage are valid to use with copyBuffers.`)\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('usage', kBufferUsages)\n  )\n  .fn(async t => {\n    const { usage } = t.params;\n\n    const buffer = t.device.createBuffer({\n      size: 16,\n      usage,\n    });\n\n    t.TestClearBuffer({\n      buffer,\n      offset: 0,\n      size: 16,\n      isSuccess: usage === GPUBufferUsage.COPY_DST,\n    });\n  });\n\ng.test('size_alignment')\n  .desc(\n    `\n    Test that the clear size must be 4 byte aligned.\n    - Test size is not a multiple of 4.\n    - Test size is 0.\n    - Test size overflows the buffer size.\n    - Test size is omitted.\n  `\n  )\n  .paramsSubcasesOnly([\n    { size: 0, _isSuccess: true },\n    { size: 2, _isSuccess: false },\n    { size: 4, _isSuccess: true },\n    { size: 5, _isSuccess: false },\n    { size: 8, _isSuccess: true },\n    { size: 20, _isSuccess: false },\n    { size: undefined, _isSuccess: true },\n  ] as const)\n  .fn(async t => {\n    const { size, _isSuccess: isSuccess } = t.params;\n\n    const buffer = t.device.createBuffer({\n      size: 16,\n      usage: GPUBufferUsage.COPY_DST,\n    });\n\n    t.TestClearBuffer({\n      buffer,\n      offset: 0,\n      size,\n      isSuccess,\n    });\n  });\n\ng.test('offset_alignment')\n  .desc(\n    `\n    Test that the clear offsets must be 4 byte aligned.\n    - Test offset is not a multiple of 4.\n    - Test offset is larger than the buffer size.\n    - Test offset is omitted.\n  `\n  )\n  .paramsSubcasesOnly([\n    { offset: 0, _isSuccess: true },\n    { offset: 2, _isSuccess: false },\n    { offset: 4, _isSuccess: true },\n    { offset: 5, _isSuccess: false },\n    { offset: 8, _isSuccess: true },\n    { offset: 20, _isSuccess: false },\n    { offset: undefined, _isSuccess: true },\n  ] as const)\n  .fn(async t => {\n    const { offset, _isSuccess: isSuccess } = t.params;\n\n    const buffer = t.device.createBuffer({\n      size: 16,\n      usage: GPUBufferUsage.COPY_DST,\n    });\n\n    t.TestClearBuffer({\n      buffer,\n      offset,\n      size: 8,\n      isSuccess,\n    });\n  });\n\ng.test('overflow')\n  .desc(`Test that clears which may cause arthimetic overflows are invalid.`)\n  .paramsSubcasesOnly([\n    { offset: 0, size: kMaxSafeMultipleOf8 },\n    { offset: 16, size: kMaxSafeMultipleOf8 },\n    { offset: kMaxSafeMultipleOf8, size: 16 },\n    { offset: kMaxSafeMultipleOf8, size: kMaxSafeMultipleOf8 },\n  ] as const)\n  .fn(async t => {\n    const { offset, size } = t.params;\n\n    const buffer = t.device.createBuffer({\n      size: 16,\n      usage: GPUBufferUsage.COPY_DST,\n    });\n\n    t.TestClearBuffer({\n      buffer,\n      offset,\n      size,\n      isSuccess: false,\n    });\n  });\n\ng.test('out_of_bounds')\n  .desc(`Test that clears which exceed the buffer bounds are invalid.`)\n  .paramsSubcasesOnly([\n    { offset: 0, size: 32, _isSuccess: true },\n    { offset: 0, size: 36 },\n    { offset: 32, size: 0, _isSuccess: true },\n    { offset: 32, size: 4 },\n    { offset: 36, size: 4 },\n    { offset: 36, size: 0 },\n    { offset: 20, size: 16 },\n    { offset: 20, size: 12, _isSuccess: true },\n  ] as const)\n  .fn(async t => {\n    const { offset, size, _isSuccess = false } = t.params;\n\n    const buffer = t.device.createBuffer({\n      size: 32,\n      usage: GPUBufferUsage.COPY_DST,\n    });\n\n    t.TestClearBuffer({\n      buffer,\n      offset,\n      size,\n      isSuccess: _isSuccess,\n    });\n  });\n"],"file":"clearBuffer.spec.js"}