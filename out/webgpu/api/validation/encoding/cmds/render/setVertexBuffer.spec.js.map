{"version":3,"sources":["../../../../../../../src/webgpu/api/validation/encoding/cmds/render/setVertexBuffer.spec.ts"],"names":["description","makeTestGroup","GPUConst","DefaultLimits","ValidationTest","kRenderEncodeTypeParams","kBufferStates","buildBufferOffsetAndSizeOOBTestParams","g","test","desc","paramsSubcasesOnly","combine","maxVertexBuffers","unimplemented","BufferUsage","VERTEX","COPY_DST"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAFO,CAIP,SAASC,aAAT,QAA8B,kDAA9B;AACA,SAASC,QAAT,EAAmBC,aAAnB,QAAwC,6BAAxC;AACA,SAASC,cAAT,QAA+B,6BAA/B;;AAEA;AACEC,uBADF;AAEEC,aAFF;AAGEC,qCAHF;AAIO,aAJP;;AAMA,OAAO,MAAMC,CAAC,GAAGP,aAAa,CAACG,cAAD,CAAvB;;AAEPI,CAAC,CAACC,IAAF,CAAO,MAAP;AACGC,IADH;AAEK;AACL;AACA,GAJA;;AAMGC,kBANH;AAOIN,uBAAuB,CAACO,OAAxB,CAAgC,MAAhC,EAAwC;AACtC,CADsC;AAEtCT,aAAa,CAACU,gBAAd,GAAiC,CAFK;AAGtCV,aAAa,CAACU,gBAHwB,CAAxC,CAPJ;;;AAaGC,aAbH;;AAeAN,CAAC,CAACC,IAAF,CAAO,eAAP;AACGC,IADH;AAEK;AACL;AACA,GAJA;;AAMGC,kBANH,CAMsBN,uBAAuB,CAACO,OAAxB,CAAgC,OAAhC,EAAyCN,aAAzC,CANtB;AAOGQ,aAPH;;AASAN,CAAC,CAACC,IAAF,CAAO,qBAAP;AACGC,IADH;AAEK;AACL;AACA,GAJA;;AAMGC,kBANH;AAOIN,uBAAuB,CAACO,OAAxB,CAAgC,OAAhC,EAAyC;AACvCV,QAAQ,CAACa,WAAT,CAAqBC,MADkB,EACV;AAC7Bd,QAAQ,CAACa,WAAT,CAAqBE,QAFkB;AAGvCf,QAAQ,CAACa,WAAT,CAAqBE,QAArB,GAAgCf,QAAQ,CAACa,WAAT,CAAqBC,MAHd,CAAzC,CAPJ;;;AAaGF,aAbH;;AAeAN,CAAC,CAACC,IAAF,CAAO,kBAAP;AACGC,IADH;AAEK;AACL;AACA,GAJA;;AAMGC,kBANH,CAMsBN,uBAAuB,CAACO,OAAxB,CAAgC,QAAhC,EAA0C,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAA1C,CANtB;AAOGE,aAPH;;AASAN,CAAC,CAACC,IAAF,CAAO,qBAAP;AACGC,IADH;AAEK;AACL;AACA,GAJA;;AAMGC,kBANH,CAMsBJ,qCAAqC,CAAC,CAAD,EAAI,GAAJ,CAN3D;AAOGO,aAPH","sourcesContent":["export const description = `\nValidation tests for setVertexBuffer on render pass and render bundle.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUConst, DefaultLimits } from '../../../../../constants.js';\nimport { ValidationTest } from '../../../validation_test.js';\n\nimport {\n  kRenderEncodeTypeParams,\n  kBufferStates,\n  buildBufferOffsetAndSizeOOBTestParams,\n} from './render.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('slot')\n  .desc(\n    `\nTests slot must be less than the maxVertexBuffers in device limits.\n  `\n  )\n  .paramsSubcasesOnly(\n    kRenderEncodeTypeParams.combine('slot', [\n      0,\n      DefaultLimits.maxVertexBuffers - 1,\n      DefaultLimits.maxVertexBuffers,\n    ] as const)\n  )\n  .unimplemented();\n\ng.test('vertex_buffer')\n  .desc(\n    `\nTests vertex buffer must be valid.\n  `\n  )\n  .paramsSubcasesOnly(kRenderEncodeTypeParams.combine('state', kBufferStates))\n  .unimplemented();\n\ng.test('vertex_buffer_usage')\n  .desc(\n    `\nTests vertex buffer must have 'Vertex' usage.\n  `\n  )\n  .paramsSubcasesOnly(\n    kRenderEncodeTypeParams.combine('usage', [\n      GPUConst.BufferUsage.VERTEX, // control case\n      GPUConst.BufferUsage.COPY_DST,\n      GPUConst.BufferUsage.COPY_DST | GPUConst.BufferUsage.VERTEX,\n    ] as const)\n  )\n  .unimplemented();\n\ng.test('offset_alignment')\n  .desc(\n    `\nTests offset must be a multiple of 4.\n  `\n  )\n  .paramsSubcasesOnly(kRenderEncodeTypeParams.combine('offset', [0, 2, 4] as const))\n  .unimplemented();\n\ng.test('offset_and_size_oob')\n  .desc(\n    `\nTests offset and size cannot be larger than vertex buffer size.\n  `\n  )\n  .paramsSubcasesOnly(buildBufferOffsetAndSizeOOBTestParams(4, 256))\n  .unimplemented();\n"],"file":"setVertexBuffer.spec.js"}