{"version":3,"sources":["../../../../../../../src/webgpu/api/validation/encoding/cmds/render/render.ts"],"names":["kUnitCaseParamsBuilder","kRenderEncodeTypes","kRenderEncodeTypeParams","combine","buildBufferOffsetAndSizeOOBTestParams","minAlignment","bufferSize","combineWithParams","offset","size","_valid","undefined"],"mappings":";AAAA;AACA,GADA,SAASA,sBAAT,QAAuC,sDAAvC,CACA,SAASC,kBAAT,QAAmC,6CAAnC;AAEA,OAAO,MAAMC,uBAAuB,GAAGF,sBAAsB,CAACG,OAAvB;AACrC,aADqC;AAErCF,kBAFqC,CAAhC;;;AAKP,OAAO,SAASG,qCAAT,CAA+CC,YAA/C,EAAqEC,UAArE,EAAyF;AAC9F,SAAOJ,uBAAuB,CAACK,iBAAxB,CAA0C;AAC/C;AACA,IAAEC,MAAM,EAAE,CAAV,EAAaC,IAAI,EAAE,CAAnB,EAAsBC,MAAM,EAAE,IAA9B,EAF+C;AAG/C,IAAEF,MAAM,EAAE,CAAV,EAAaC,IAAI,EAAE,CAAnB,EAAsBC,MAAM,EAAE,IAA9B,EAH+C;AAI/C,IAAEF,MAAM,EAAE,CAAV,EAAaC,IAAI,EAAE,CAAnB,EAAsBC,MAAM,EAAE,IAA9B,EAJ+C;AAK/C,IAAEF,MAAM,EAAE,CAAV,EAAaC,IAAI,EAAE,CAAnB,EAAsBC,MAAM,EAAE,IAA9B,EAL+C;AAM/C,IAAEF,MAAM,EAAE,CAAV,EAAaC,IAAI,EAAEH,UAAnB,EAA+BI,MAAM,EAAE,IAAvC,EAN+C;AAO/C,IAAEF,MAAM,EAAE,CAAV,EAAaC,IAAI,EAAEH,UAAU,GAAG,CAAhC,EAAmCI,MAAM,EAAE,KAA3C,EAP+C;AAQ/C,IAAEF,MAAM,EAAEH,YAAV,EAAwBI,IAAI,EAAEH,UAA9B,EAA0CI,MAAM,EAAE,KAAlD,EAR+C;AAS/C,IAAEF,MAAM,EAAEH,YAAV,EAAwBI,IAAI,EAAEH,UAAU,GAAGD,YAA3C,EAAyDK,MAAM,EAAE,IAAjE,EAT+C;AAU/C,IAAEF,MAAM,EAAEF,UAAU,GAAGD,YAAvB,EAAqCI,IAAI,EAAEJ,YAA3C,EAAyDK,MAAM,EAAE,IAAjE,EAV+C;AAW/C,IAAEF,MAAM,EAAEF,UAAV,EAAsBG,IAAI,EAAE,CAA5B,EAA+BC,MAAM,EAAE,KAAvC,EAX+C;AAY/C;AACA,IAAEF,MAAM,EAAE,CAAV,EAAaC,IAAI,EAAEE,SAAnB,EAA8BD,MAAM,EAAE,IAAtC,EAb+C;AAc/C,IAAEF,MAAM,EAAEH,YAAV,EAAwBI,IAAI,EAAEE,SAA9B,EAAyCD,MAAM,EAAE,IAAjD,EAd+C;AAe/C,IAAEF,MAAM,EAAEF,UAAU,GAAGD,YAAvB,EAAqCI,IAAI,EAAEE,SAA3C,EAAsDD,MAAM,EAAE,IAA9D,EAf+C;AAgB/C,IAAEF,MAAM,EAAEF,UAAV,EAAsBG,IAAI,EAAEE,SAA5B,EAAuCD,MAAM,EAAE,IAA/C,EAhB+C;AAiB/C,IAAEF,MAAM,EAAEF,UAAU,GAAGD,YAAvB,EAAqCI,IAAI,EAAEE,SAA3C,EAAsDD,MAAM,EAAE,KAA9D,EAjB+C,CAA1C,CAAP;;AAmBD","sourcesContent":["import { kUnitCaseParamsBuilder } from '../../../../../../common/framework/params_builder.js';\nimport { kRenderEncodeTypes } from '../../../../../util/command_buffer_maker.js';\n\nexport const kRenderEncodeTypeParams = kUnitCaseParamsBuilder.combine(\n  'encoderType',\n  kRenderEncodeTypes\n);\n\nexport function buildBufferOffsetAndSizeOOBTestParams(minAlignment: number, bufferSize: number) {\n  return kRenderEncodeTypeParams.combineWithParams([\n    // Explicit size\n    { offset: 0, size: 0, _valid: true },\n    { offset: 0, size: 1, _valid: true },\n    { offset: 0, size: 4, _valid: true },\n    { offset: 0, size: 5, _valid: true },\n    { offset: 0, size: bufferSize, _valid: true },\n    { offset: 0, size: bufferSize + 4, _valid: false },\n    { offset: minAlignment, size: bufferSize, _valid: false },\n    { offset: minAlignment, size: bufferSize - minAlignment, _valid: true },\n    { offset: bufferSize - minAlignment, size: minAlignment, _valid: true },\n    { offset: bufferSize, size: 1, _valid: false },\n    // Implicit size: buffer.size - offset\n    { offset: 0, size: undefined, _valid: true },\n    { offset: minAlignment, size: undefined, _valid: true },\n    { offset: bufferSize - minAlignment, size: undefined, _valid: true },\n    { offset: bufferSize, size: undefined, _valid: true },\n    { offset: bufferSize + minAlignment, size: undefined, _valid: false },\n  ]);\n}\n"],"file":"render.js"}