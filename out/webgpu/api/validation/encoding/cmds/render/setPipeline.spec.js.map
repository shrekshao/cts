{"version":3,"sources":["../../../../../../../src/webgpu/api/validation/encoding/cmds/render/setPipeline.spec.ts"],"names":["description","makeTestGroup","kRenderEncodeTypes","ValidationTest","kRenderEncodeTypeParams","g","test","desc","paramsSubcasesOnly","u","combine","fn","t","encoderType","state","params","pipeline","createRenderPipelineWithState","encoder","validateFinish","createEncoder","setPipeline","beforeAllSubcases","selectMismatchedDeviceOrSkipTestCase","undefined","mismatched","device","mismatchedDevice","createRenderPipeline","layout","vertex","module","createShaderModule","code","entryPoint","fragment","targets","format","writeMask","primitive","topology"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAFO,CAIP,SAASC,aAAT,QAA8B,kDAA9B;AACA,SAASC,kBAAT,QAAmC,6CAAnC;AACA,SAASC,cAAT,QAA+B,6BAA/B;;AAEA,SAASC,uBAAT,QAAwC,aAAxC;;AAEA,OAAO,MAAMC,CAAC,GAAGJ,aAAa,CAACE,cAAD,CAAvB;;AAEPE,CAAC,CAACC,IAAF,CAAO,kBAAP;AACGC,IADH;AAEK;AACL;AACA,GAJA;;AAMGC,kBANH,CAMsB,CAAAC,CAAC;AACnBA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBR,kBAAzB,EAA6CQ,OAA7C,CAAqD,OAArD,EAA8D,CAAC,OAAD,EAAU,SAAV,CAA9D,CAPJ;;AASGC,EATH,CASM,CAAAC,CAAC,KAAI;AACP,QAAM,EAAEC,WAAF,EAAeC,KAAf,KAAyBF,CAAC,CAACG,MAAjC;AACA,QAAMC,QAAQ,GAAGJ,CAAC,CAACK,6BAAF,CAAgCH,KAAhC,CAAjB;;AAEA,QAAM,EAAEI,OAAF,EAAWC,cAAX,KAA8BP,CAAC,CAACQ,aAAF,CAAgBP,WAAhB,CAApC;AACAK,EAAAA,OAAO,CAACG,WAAR,CAAoBL,QAApB;AACAG,EAAAA,cAAc,CAACL,KAAK,KAAK,SAAX,CAAd;AACD,CAhBH;;AAkBAT,CAAC,CAACC,IAAF,CAAO,0BAAP;AACGC,IADH,CACQ,uFADR;AAEGC,kBAFH,CAEsBJ,uBAAuB,CAACM,OAAxB,CAAgC,YAAhC,EAA8C,CAAC,IAAD,EAAO,KAAP,CAA9C,CAFtB;AAGGY,iBAHH,CAGqB,CAAAV,CAAC,KAAI;AACtBA,EAAAA,CAAC,CAACW,oCAAF,CAAuCC,SAAvC;AACD,CALH;AAMGb,EANH,CAMM,OAAMC,CAAN,KAAW;AACb,QAAM,EAAEC,WAAF,EAAeY,UAAf,KAA8Bb,CAAC,CAACG,MAAtC;AACA,QAAMW,MAAM,GAAGD,UAAU,GAAGb,CAAC,CAACe,gBAAL,GAAwBf,CAAC,CAACc,MAAnD;;AAEA,QAAMV,QAAQ,GAAGU,MAAM,CAACE,oBAAP,CAA4B;AAC3CC,IAAAA,MAAM,EAAE,MADmC;AAE3CC,IAAAA,MAAM,EAAE;AACNC,MAAAA,MAAM,EAAEL,MAAM,CAACM,kBAAP,CAA0B;AAChCC,QAAAA,IAAI,EAAG,2EADyB,EAA1B,CADF;;AAINC,MAAAA,UAAU,EAAE,MAJN,EAFmC;;AAQ3CC,IAAAA,QAAQ,EAAE;AACRJ,MAAAA,MAAM,EAAEL,MAAM,CAACM,kBAAP,CAA0B;AAChCC,QAAAA,IAAI,EAAE,wBAD0B,EAA1B,CADA;;AAIRC,MAAAA,UAAU,EAAE,MAJJ;AAKRE,MAAAA,OAAO,EAAE,CAAC,EAAEC,MAAM,EAAE,YAAV,EAAwBC,SAAS,EAAE,CAAnC,EAAD,CALD,EARiC;;AAe3CC,IAAAA,SAAS,EAAE,EAAEC,QAAQ,EAAE,eAAZ,EAfgC,EAA5B,CAAjB;;;AAkBA,QAAM,EAAEtB,OAAF,EAAWC,cAAX,KAA8BP,CAAC,CAACQ,aAAF,CAAgBP,WAAhB,CAApC;AACAK,EAAAA,OAAO,CAACG,WAAR,CAAoBL,QAApB;AACAG,EAAAA,cAAc,CAAC,CAACM,UAAF,CAAd;AACD,CA/BH","sourcesContent":["export const description = `\nValidation tests for setPipeline on render pass and render bundle.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { kRenderEncodeTypes } from '../../../../../util/command_buffer_maker.js';\nimport { ValidationTest } from '../../../validation_test.js';\n\nimport { kRenderEncodeTypeParams } from './render.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('invalid_pipeline')\n  .desc(\n    `\nTests setPipeline should generate an error iff using an 'invalid' pipeline.\n  `\n  )\n  .paramsSubcasesOnly(u =>\n    u.combine('encoderType', kRenderEncodeTypes).combine('state', ['valid', 'invalid'] as const)\n  )\n  .fn(t => {\n    const { encoderType, state } = t.params;\n    const pipeline = t.createRenderPipelineWithState(state);\n\n    const { encoder, validateFinish } = t.createEncoder(encoderType);\n    encoder.setPipeline(pipeline);\n    validateFinish(state !== 'invalid');\n  });\n\ng.test('pipeline,device_mismatch')\n  .desc('Tests setPipeline cannot be called with a render pipeline created from another device')\n  .paramsSubcasesOnly(kRenderEncodeTypeParams.combine('mismatched', [true, false]))\n  .beforeAllSubcases(t => {\n    t.selectMismatchedDeviceOrSkipTestCase(undefined);\n  })\n  .fn(async t => {\n    const { encoderType, mismatched } = t.params;\n    const device = mismatched ? t.mismatchedDevice : t.device;\n\n    const pipeline = device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module: device.createShaderModule({\n          code: `@vertex fn main() -> @builtin(position) vec4<f32> { return vec4<f32>(); }`,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: device.createShaderModule({\n          code: '@fragment fn main() {}',\n        }),\n        entryPoint: 'main',\n        targets: [{ format: 'rgba8unorm', writeMask: 0 }],\n      },\n      primitive: { topology: 'triangle-list' },\n    });\n\n    const { encoder, validateFinish } = t.createEncoder(encoderType);\n    encoder.setPipeline(pipeline);\n    validateFinish(!mismatched);\n  });\n"],"file":"setPipeline.spec.js"}