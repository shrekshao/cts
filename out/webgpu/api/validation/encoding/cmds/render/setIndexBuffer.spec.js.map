{"version":3,"sources":["../../../../../../../src/webgpu/api/validation/encoding/cmds/render/setIndexBuffer.spec.ts"],"names":["description","makeTestGroup","GPUConst","ValidationTest","kRenderEncodeTypeParams","kBufferStates","buildBufferOffsetAndSizeOOBTestParams","g","test","desc","paramsSubcasesOnly","combine","unimplemented","BufferUsage","INDEX","COPY_DST","expand","p","indexFormat"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAFO,CAIP,SAASC,aAAT,QAA8B,kDAA9B;AACA,SAASC,QAAT,QAAyB,6BAAzB;AACA,SAASC,cAAT,QAA+B,6BAA/B;;AAEA;AACEC,uBADF;AAEEC,aAFF;AAGEC,qCAHF;AAIO,aAJP;;AAMA,OAAO,MAAMC,CAAC,GAAGN,aAAa,CAACE,cAAD,CAAvB;;AAEPI,CAAC,CAACC,IAAF,CAAO,cAAP;AACGC,IADH;AAEK;AACL;AACA,GAJA;;AAMGC,kBANH,CAMsBN,uBAAuB,CAACO,OAAxB,CAAgC,OAAhC,EAAyCN,aAAzC,CANtB;AAOGO,aAPH;;AASAL,CAAC,CAACC,IAAF,CAAO,oBAAP;AACGC,IADH;AAEK;AACL;AACA,GAJA;;AAMGC,kBANH;AAOIN,uBAAuB,CAACO,OAAxB,CAAgC,OAAhC,EAAyC;AACvCT,QAAQ,CAACW,WAAT,CAAqBC,KADkB,EACX;AAC5BZ,QAAQ,CAACW,WAAT,CAAqBE,QAFkB;AAGvCb,QAAQ,CAACW,WAAT,CAAqBE,QAArB,GAAgCb,QAAQ,CAACW,WAAT,CAAqBC,KAHd,CAAzC,CAPJ;;;AAaGF,aAbH;;AAeAL,CAAC,CAACC,IAAF,CAAO,kBAAP;AACGC,IADH;AAEK;AACL;AACA,GAJA;;AAMGC,kBANH;AAOIN,uBAAuB;AACpBO,OADH,CACW,aADX,EAC0B,CAAC,QAAD,EAAW,QAAX,CAD1B;AAEGK,MAFH,CAEU,QAFV,EAEoBC,CAAC,IAAI;AACrB,SAAOA,CAAC,CAACC,WAAF,KAAkB,QAAlB,GAA8B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAA9B,GAAqD,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAA5D;AACD,CAJH,CAPJ;;AAaGN,aAbH;;AAeAL,CAAC,CAACC,IAAF,CAAO,qBAAP;AACGC,IADH;AAEK;AACL;AACA,GAJA;;AAMGC,kBANH,CAMsBJ,qCAAqC,CAAC,CAAD,EAAI,GAAJ,CAN3D;AAOGM,aAPH","sourcesContent":["export const description = `\nValidation tests for setIndexBuffer on render pass and render bundle.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUConst } from '../../../../../constants.js';\nimport { ValidationTest } from '../../../validation_test.js';\n\nimport {\n  kRenderEncodeTypeParams,\n  kBufferStates,\n  buildBufferOffsetAndSizeOOBTestParams,\n} from './render.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('index_buffer')\n  .desc(\n    `\nTests index buffer must be valid.\n  `\n  )\n  .paramsSubcasesOnly(kRenderEncodeTypeParams.combine('state', kBufferStates))\n  .unimplemented();\n\ng.test('index_buffer_usage')\n  .desc(\n    `\nTests index buffer must have 'Index' usage.\n  `\n  )\n  .paramsSubcasesOnly(\n    kRenderEncodeTypeParams.combine('usage', [\n      GPUConst.BufferUsage.INDEX, // control case\n      GPUConst.BufferUsage.COPY_DST,\n      GPUConst.BufferUsage.COPY_DST | GPUConst.BufferUsage.INDEX,\n    ] as const)\n  )\n  .unimplemented();\n\ng.test('offset_alignment')\n  .desc(\n    `\nTests offset must be a multiple of index formatâ€™s byte size.\n  `\n  )\n  .paramsSubcasesOnly(\n    kRenderEncodeTypeParams\n      .combine('indexFormat', ['uint16', 'uint32'] as const)\n      .expand('offset', p => {\n        return p.indexFormat === 'uint16' ? ([0, 1, 2] as const) : ([0, 2, 4] as const);\n      })\n  )\n  .unimplemented();\n\ng.test('offset_and_size_oob')\n  .desc(\n    `\nTests offset and size cannot be larger than index buffer size.\n  `\n  )\n  .paramsSubcasesOnly(buildBufferOffsetAndSizeOOBTestParams(4, 256))\n  .unimplemented();\n"],"file":"setIndexBuffer.spec.js"}