{"version":3,"sources":["../../../../../../src/webgpu/api/validation/encoding/programmable/pipeline_bind_group_compat.spec.ts"],"names":["description","makeTestGroup","kSamplerBindingTypes","kShaderStageCombinations","kBufferBindingTypes","GPUConst","kProgrammableEncoderTypes","ValidationTest","getTestCmds","encoderType","kResourceTypes","F","getUniformBuffer","device","createBuffer","size","Float32Array","BYTES_PER_ELEMENT","usage","GPUBufferUsage","UNIFORM","createRenderPipelineWithLayout","bindGroups","shader","module","createShaderModule","code","pipeline","createRenderPipeline","layout","createPipelineLayout","bindGroupLayouts","map","entries","createBindGroupLayout","vertex","entryPoint","fragment","targets","format","primitive","topology","createComputePipelineWithLayout","createComputePipeline","compute","beginRenderPass","commandEncoder","attachmentTexture","createTexture","width","height","depthOrArrayLayers","GPUTextureUsage","RENDER_ATTACHMENT","colorAttachments","view","createView","loadValue","r","g","b","a","storeOp","test","desc","params","u","combine","expand","p","beginSubcases","combineWithParams","setBindGroup0","setUnusedBindGroup1","setBindGroup2","_success","unimplemented","paramsSubcasesOnly","setBindGroup1","fn","t","binding","visibility","GPUShaderStage","VERTEX","buffer","type","uniformBuffer","bindGroup0","createBindGroup","resource","bindGroup1","createCommandEncoder","renderPass","setPipeline","setBindGroup","draw","endPass","expectValidationError","finish","bindGroup","FRAGMENT","success","undefined","bglType","bgType","createSampler","compare","sampler","bgBindings","plBindings","ShaderStage","COMPUTE"],"mappings":"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","sourcesContent":["export const description = `\nTODO:\n- test compatibility between bind groups and pipelines\n    - the binding resource in bindGroups[i].layout is \"group-equivalent\" (value-equal) to pipelineLayout.bgls[i].\n    - in the test fn, test once without the dispatch/draw (should always be valid) and once with\n      the dispatch/draw, to make sure the validation happens in dispatch/draw.\n    - x= {dispatch, all draws} (dispatch/draw should be size 0 to make sure validation still happens if no-op)\n    - x= all relevant stages\n\nTODO: subsume existing test, rewrite fixture as needed.\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport {\n  kSamplerBindingTypes,\n  kShaderStageCombinations,\n  kBufferBindingTypes,\n} from '../../../../capability_info.js';\nimport { GPUConst } from '../../../../constants.js';\nimport {\n  ProgrammableEncoderType,\n  kProgrammableEncoderTypes,\n} from '../../../../util/command_buffer_maker.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nfunction getTestCmds(encoderType: ProgrammableEncoderType): readonly string[] {\n  if (encoderType === 'compute pass') {\n    return ['dispatch', 'dispatchIndirect'] as const;\n  } else {\n    return ['draw', 'drawIndexed', 'drawIndirect', 'drawIndexedIndirect'] as const;\n  }\n}\n\nconst kResourceTypes = ['buffer', 'sampler', 'texture', 'storageTexture', 'externalTexture'];\n\nclass F extends ValidationTest {\n  getUniformBuffer(): GPUBuffer {\n    return this.device.createBuffer({\n      size: 8 * Float32Array.BYTES_PER_ELEMENT,\n      usage: GPUBufferUsage.UNIFORM,\n    });\n  }\n\n  createRenderPipelineWithLayout(\n    device: GPUDevice,\n    bindGroups: Array<Array<GPUBindGroupLayoutEntry>>\n  ): GPURenderPipeline {\n    const shader = `\n      [[stage(vertex)]] fn vs_main() -> [[builtin(position)]] vec4<f32> {\n        return vec4<f32>(1.0, 1.0, 0.0, 1.0);\n      }\n\n      [[stage(fragment)]] fn fs_main() -> [[location(0)]] vec4<f32> {\n        return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n      }\n    `;\n    const module = device.createShaderModule({ code: shader });\n    const pipeline = this.device.createRenderPipeline({\n      layout: device.createPipelineLayout({\n        bindGroupLayouts: bindGroups.map(entries => device.createBindGroupLayout({ entries })),\n      }),\n      vertex: {\n        module,\n        entryPoint: 'vs_main',\n      },\n      fragment: {\n        module,\n        entryPoint: 'fs_main',\n        targets: [{ format: 'rgba8unorm' }],\n      },\n      primitive: { topology: 'triangle-list' },\n    });\n    return pipeline;\n  }\n\n  createComputePipelineWithLayout(\n    device: GPUDevice,\n    bindGroups: Array<Array<GPUBindGroupLayoutEntry>>\n  ): GPUComputePipeline {\n    const shader = `\n      [[stage(compute), workgroup_size(1, 1, 1)]]\n        fn main([[builtin(global_invocation_id)]] GlobalInvocationID : vec3<u32>) {\n      }\n    `;\n\n    const module = device.createShaderModule({ code: shader });\n    const pipeline = this.device.createComputePipeline({\n      layout: device.createPipelineLayout({\n        bindGroupLayouts: bindGroups.map(entries => device.createBindGroupLayout({ entries })),\n      }),\n      compute: {\n        module,\n        entryPoint: 'main',\n      },\n    });\n    return pipeline;\n  }\n\n  beginRenderPass(commandEncoder: GPUCommandEncoder): GPURenderPassEncoder {\n    const attachmentTexture = this.device.createTexture({\n      format: 'rgba8unorm',\n      size: { width: 16, height: 16, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    return commandEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: attachmentTexture.createView(),\n          loadValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n          storeOp: 'store',\n        },\n      ],\n    });\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('bind_groups_and_pipeline_layout_mismatch')\n  .desc(\n    `\n    Tests the bind groups must match the requirements of the pipeline layout.\n    - bind groups required by the pipeline layout are required.\n    - bind groups unused by the pipeline layout can be set or not.\n\n    TODO: merge existing tests to this test\n    `\n  )\n  .params(u =>\n    u\n      .combine('encoderType', kProgrammableEncoderTypes)\n      .expand('call', p => getTestCmds(p.encoderType))\n      .beginSubcases()\n      .combineWithParams([\n        { setBindGroup0: true, setUnusedBindGroup1: true, setBindGroup2: true, _success: true },\n        { setBindGroup0: true, setUnusedBindGroup1: false, setBindGroup2: true, _success: true },\n        { setBindGroup0: true, setUnusedBindGroup1: true, setBindGroup2: false, _success: false },\n        { setBindGroup0: false, setUnusedBindGroup1: true, setBindGroup2: true, _success: false },\n        { setBindGroup0: false, setUnusedBindGroup1: false, setBindGroup2: false, _success: false },\n      ])\n      .combine('useU32Array', [false, true])\n  )\n  .unimplemented();\n\ng.test('it_is_invalid_to_draw_in_a_render_pass_with_missing_bind_groups')\n  .paramsSubcasesOnly([\n    { setBindGroup1: true, setBindGroup2: true, _success: true },\n    { setBindGroup1: true, setBindGroup2: false, _success: false },\n    { setBindGroup1: false, setBindGroup2: true, _success: false },\n    { setBindGroup1: false, setBindGroup2: false, _success: false },\n  ])\n  .fn(async t => {\n    const { setBindGroup1, setBindGroup2, _success } = t.params;\n\n    const bindGroupLayouts: GPUBindGroupLayoutEntry[][] = [\n      // bind group layout 0\n      [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.VERTEX,\n          buffer: { type: 'uniform' },\n        },\n      ],\n\n      // bind group layout 1\n      [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.VERTEX,\n          buffer: { type: 'uniform' },\n        },\n      ],\n    ];\n    const pipeline = t.createRenderPipelineWithLayout(t.device, bindGroupLayouts);\n\n    const uniformBuffer = t.getUniformBuffer();\n\n    const bindGroup0 = t.device.createBindGroup({\n      entries: [\n        {\n          binding: 0,\n          resource: {\n            buffer: uniformBuffer,\n          },\n        },\n      ],\n      layout: t.device.createBindGroupLayout({\n        entries: bindGroupLayouts[0],\n      }),\n    });\n\n    const bindGroup1 = t.device.createBindGroup({\n      entries: [\n        {\n          binding: 0,\n          resource: {\n            buffer: uniformBuffer,\n          },\n        },\n      ],\n      layout: t.device.createBindGroupLayout({\n        entries: bindGroupLayouts[1],\n      }),\n    });\n\n    const commandEncoder = t.device.createCommandEncoder();\n    const renderPass = t.beginRenderPass(commandEncoder);\n    renderPass.setPipeline(pipeline);\n    if (setBindGroup1) {\n      renderPass.setBindGroup(0, bindGroup0);\n    }\n    if (setBindGroup2) {\n      renderPass.setBindGroup(1, bindGroup1);\n    }\n    renderPass.draw(3);\n    renderPass.endPass();\n    t.expectValidationError(() => {\n      commandEncoder.finish();\n    }, !_success);\n  });\n\ng.test('buffer_binding,render_pipeline')\n  .desc(\n    `\n  The GPUBufferBindingLayout bindings configure should be exactly\n  same in PipelineLayout and bindgroup.\n  - TODO: test more draw functions, e.g. indirect\n  - TODO: test more visibilities, e.g. vetex\n  - TODO: bind group should be created with different layout\n  `\n  )\n  .params(u => u.combine('type', kBufferBindingTypes))\n  .fn(async t => {\n    const { type } = t.params;\n\n    // Create fixed bindGroup\n    const uniformBuffer = t.getUniformBuffer();\n\n    const bindGroup = t.device.createBindGroup({\n      entries: [\n        {\n          binding: 0,\n          resource: {\n            buffer: uniformBuffer,\n          },\n        },\n      ],\n      layout: t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: GPUShaderStage.FRAGMENT,\n            buffer: {}, // default type: uniform\n          },\n        ],\n      }),\n    });\n\n    // Create pipeline with different layouts\n    const pipeline = t.createRenderPipelineWithLayout(t.device, [\n      [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.FRAGMENT,\n          buffer: {\n            type,\n          },\n        },\n      ],\n    ]);\n\n    const success = type === undefined || type === 'uniform';\n\n    const commandEncoder = t.device.createCommandEncoder();\n    const renderPass = t.beginRenderPass(commandEncoder);\n    renderPass.setPipeline(pipeline);\n    renderPass.setBindGroup(0, bindGroup);\n    renderPass.draw(3);\n    renderPass.endPass();\n    t.expectValidationError(() => {\n      commandEncoder.finish();\n    }, !success);\n  });\n\ng.test('sampler_binding,render_pipeline')\n  .desc(\n    `\n  The GPUSamplerBindingLayout bindings configure should be exactly\n  same in PipelineLayout and bindgroup.\n  - TODO: test more draw functions, e.g. indirect\n  - TODO: test more visibilities, e.g. vetex\n  `\n  )\n  .params(u =>\n    u //\n      .combine('bglType', kSamplerBindingTypes)\n      .combine('bgType', kSamplerBindingTypes)\n  )\n  .fn(async t => {\n    const { bglType, bgType } = t.params;\n    const bindGroup = t.device.createBindGroup({\n      entries: [\n        {\n          binding: 0,\n          resource:\n            bgType === 'comparison'\n              ? t.device.createSampler({ compare: 'always' })\n              : t.device.createSampler(),\n        },\n      ],\n      layout: t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: GPUShaderStage.FRAGMENT,\n            sampler: { type: bgType },\n          },\n        ],\n      }),\n    });\n\n    // Create pipeline with different layouts\n    const pipeline = t.createRenderPipelineWithLayout(t.device, [\n      [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.FRAGMENT,\n          sampler: {\n            type: bglType,\n          },\n        },\n      ],\n    ]);\n\n    const success = bglType === bgType;\n\n    const commandEncoder = t.device.createCommandEncoder();\n    const renderPass = t.beginRenderPass(commandEncoder);\n    renderPass.setPipeline(pipeline);\n    renderPass.setBindGroup(0, bindGroup);\n    renderPass.draw(3);\n    renderPass.endPass();\n    t.expectValidationError(() => {\n      commandEncoder.finish();\n    }, !success);\n  });\n\ng.test('bgl_binding_mismatch')\n  .desc(\n    'Tests the binding number must exist or not exist in both bindGroups[i].layout and pipelineLayout.bgls[i]'\n  )\n  .params(u =>\n    u\n      .combine('encoderType', kProgrammableEncoderTypes)\n      .expand('call', p => getTestCmds(p.encoderType))\n      .beginSubcases()\n      .combineWithParams([\n        { bgBindings: [0, 1, 2], plBindings: [0, 1, 2], _success: true },\n        { bgBindings: [0, 1, 2], plBindings: [0, 1, 3], _success: false },\n        { bgBindings: [0, 2], plBindings: [0, 2], _success: true },\n        { bgBindings: [0, 2], plBindings: [2, 0], _success: true },\n        { bgBindings: [0, 1, 2], plBindings: [0, 1], _success: false },\n        { bgBindings: [0, 1], plBindings: [0, 1, 2], _success: false },\n      ])\n      .combine('useU32Array', [false, true])\n  )\n  .unimplemented();\n\ng.test('bgl_visibility_mismatch')\n  .desc('Tests the visibility in bindGroups[i].layout and pipelineLayout.bgls[i] must be matched')\n  .params(u =>\n    u\n      .combine('encoderType', kProgrammableEncoderTypes)\n      .expand('call', p => getTestCmds(p.encoderType))\n      .beginSubcases()\n      .combine('bgVisibility', kShaderStageCombinations)\n      .expand('plVisibility', p =>\n        p.encoderType === 'compute pass'\n          ? ([GPUConst.ShaderStage.COMPUTE] as const)\n          : ([\n              GPUConst.ShaderStage.VERTEX,\n              GPUConst.ShaderStage.FRAGMENT,\n              GPUConst.ShaderStage.VERTEX | GPUConst.ShaderStage.FRAGMENT,\n            ] as const)\n      )\n      .combine('useU32Array', [false, true])\n  )\n  .unimplemented();\n\ng.test('bgl_resource_type_mismatch')\n  .desc(\n    'Tests the binding resource type in bindGroups[i].layout and pipelineLayout.bgls[i] must be matched'\n  )\n  .params(u =>\n    u\n      .combine('encoderType', kProgrammableEncoderTypes)\n      .expand('call', p => getTestCmds(p.encoderType))\n      .beginSubcases()\n      .combine('bgResourceType', kResourceTypes)\n      .combine('plResourceType', kResourceTypes)\n      .combine('useU32Array', [false, true])\n  )\n  .unimplemented();\n"],"file":"pipeline_bind_group_compat.spec.js"}