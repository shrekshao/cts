{"version":3,"sources":["../../../../../../src/webgpu/api/validation/encoding/programmable/pipeline_bind_group_compat.spec.ts"],"names":["description","kUnitCaseParamsBuilder","makeTestGroup","memcpy","unreachable","kSamplerBindingTypes","kShaderStageCombinations","kBufferBindingTypes","GPUConst","kProgrammableEncoderTypes","ValidationTest","kComputeCmds","kRenderCmds","kResourceTypes","getTestCmds","encoderType","kCompatTestParams","combine","expand","p","F","getIndexBuffer","device","createBuffer","size","Uint32Array","BYTES_PER_ELEMENT","usage","GPUBufferUsage","INDEX","getIndirectBuffer","indirectParams","buffer","mappedAtCreation","length","INDIRECT","COPY_DST","src","dst","getMappedRange","unmap","getBindingResourceType","entry","undefined","sampler","texture","storageTexture","createRenderPipelineWithLayout","bindGroups","shader","module","createShaderModule","code","pipeline","createRenderPipeline","layout","createPipelineLayout","bindGroupLayouts","map","entries","createBindGroupLayout","vertex","entryPoint","fragment","targets","format","primitive","topology","createComputePipelineWithLayout","createComputePipeline","compute","createBindGroupWithLayout","bglEntries","bgEntries","resource","getBindingResource","push","binding","createBindGroup","doCompute","pass","call","callWithZero","x","dispatchWorkgroups","dispatchWorkgroupsIndirect","doRender","vertexCount","draw","setIndexBuffer","drawIndexed","drawIndirect","drawIndexedIndirect","createBindGroupLayoutEntry","resourceType","useU32Array","visibility","GPUShaderStage","COMPUTE","FRAGMENT","hasDynamicOffset","access","runTest","dynamicOffsets","success","encoder","validateFinish","createEncoder","GPUComputePassEncoder","setPipeline","i","bindGroup","setBindGroup","g","test","desc","params","beginSubcases","combineWithParams","setBindGroup0","setBindGroup1","setUnusedBindGroup2","_success","fn","t","VERTEX","bindGroup0","bindGroup1","unusedBindGroup2","u","type","uniformBuffer","getUniformBuffer","bglType","bgType","createSampler","compare","bgBindings","plBindings","plEntries","Array","fill","ShaderStage","bgVisibility","plVisibility","bgResourceType","plResourceType"],"mappings":"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","sourcesContent":["export const description = `\nTODO:\n- test compatibility between bind groups and pipelines\n    - the binding resource in bindGroups[i].layout is \"group-equivalent\" (value-equal) to pipelineLayout.bgls[i].\n    - in the test fn, test once without the dispatch/draw (should always be valid) and once with\n      the dispatch/draw, to make sure the validation happens in dispatch/draw.\n    - x= {dispatch, all draws} (dispatch/draw should be size 0 to make sure validation still happens if no-op)\n    - x= all relevant stages\n\nTODO: subsume existing test, rewrite fixture as needed.\nTODO: Add externalTexture to kResourceTypes [1]\n`;\n\nimport { kUnitCaseParamsBuilder } from '../../../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { memcpy, unreachable } from '../../../../../common/util/util.js';\nimport {\n  kSamplerBindingTypes,\n  kShaderStageCombinations,\n  kBufferBindingTypes,\n  ValidBindableResource,\n} from '../../../../capability_info.js';\nimport { GPUConst } from '../../../../constants.js';\nimport {\n  ProgrammableEncoderType,\n  kProgrammableEncoderTypes,\n} from '../../../../util/command_buffer_maker.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nconst kComputeCmds = ['dispatch', 'dispatchIndirect'] as const;\ntype ComputeCmd = typeof kComputeCmds[number];\nconst kRenderCmds = ['draw', 'drawIndexed', 'drawIndirect', 'drawIndexedIndirect'] as const;\ntype RenderCmd = typeof kRenderCmds[number];\n\n// Test resource type compatibility in pipeline and bind group\n// [1]: Need to add externalTexture\nconst kResourceTypes: ValidBindableResource[] = [\n  'uniformBuf',\n  'filtSamp',\n  'sampledTex',\n  'storageTex',\n];\n\nfunction getTestCmds(\n  encoderType: ProgrammableEncoderType\n): readonly ComputeCmd[] | readonly RenderCmd[] {\n  return encoderType === 'compute pass' ? kComputeCmds : kRenderCmds;\n}\n\nconst kCompatTestParams = kUnitCaseParamsBuilder\n  .combine('encoderType', kProgrammableEncoderTypes)\n  .expand('call', p => getTestCmds(p.encoderType))\n  .combine('callWithZero', [true, false]);\n\nclass F extends ValidationTest {\n  getIndexBuffer(): GPUBuffer {\n    return this.device.createBuffer({\n      size: 8 * Uint32Array.BYTES_PER_ELEMENT,\n      usage: GPUBufferUsage.INDEX,\n    });\n  }\n\n  getIndirectBuffer(indirectParams: Array<number>): GPUBuffer {\n    const buffer = this.device.createBuffer({\n      mappedAtCreation: true,\n      size: indirectParams.length * Uint32Array.BYTES_PER_ELEMENT,\n      usage: GPUBufferUsage.INDIRECT | GPUBufferUsage.COPY_DST,\n    });\n    memcpy({ src: new Uint32Array(indirectParams) }, { dst: buffer.getMappedRange() });\n    buffer.unmap();\n    return buffer;\n  }\n\n  getBindingResourceType(entry: GPUBindGroupLayoutEntry): ValidBindableResource {\n    if (entry.buffer !== undefined) return 'uniformBuf';\n    if (entry.sampler !== undefined) return 'filtSamp';\n    if (entry.texture !== undefined) return 'sampledTex';\n    if (entry.storageTexture !== undefined) return 'storageTex';\n    unreachable();\n  }\n\n  createRenderPipelineWithLayout(\n    bindGroups: Array<Array<GPUBindGroupLayoutEntry>>\n  ): GPURenderPipeline {\n    const shader = `\n      @vertex fn vs_main() -> @builtin(position) vec4<f32> {\n        return vec4<f32>(1.0, 1.0, 0.0, 1.0);\n      }\n\n      @fragment fn fs_main() -> @location(0) vec4<f32> {\n        return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n      }\n    `;\n    const module = this.device.createShaderModule({ code: shader });\n    const pipeline = this.device.createRenderPipeline({\n      layout: this.device.createPipelineLayout({\n        bindGroupLayouts: bindGroups.map(entries => this.device.createBindGroupLayout({ entries })),\n      }),\n      vertex: {\n        module,\n        entryPoint: 'vs_main',\n      },\n      fragment: {\n        module,\n        entryPoint: 'fs_main',\n        targets: [{ format: 'rgba8unorm' }],\n      },\n      primitive: { topology: 'triangle-list' },\n    });\n    return pipeline;\n  }\n\n  createComputePipelineWithLayout(\n    bindGroups: Array<Array<GPUBindGroupLayoutEntry>>\n  ): GPUComputePipeline {\n    const shader = `\n      @compute @workgroup_size(1)\n        fn main(@builtin(global_invocation_id) GlobalInvocationID : vec3<u32>) {\n      }\n    `;\n\n    const module = this.device.createShaderModule({ code: shader });\n    const pipeline = this.device.createComputePipeline({\n      layout: this.device.createPipelineLayout({\n        bindGroupLayouts: bindGroups.map(entries => this.device.createBindGroupLayout({ entries })),\n      }),\n      compute: {\n        module,\n        entryPoint: 'main',\n      },\n    });\n    return pipeline;\n  }\n\n  createBindGroupWithLayout(bglEntries: Array<GPUBindGroupLayoutEntry>): GPUBindGroup {\n    const bgEntries: Array<GPUBindGroupEntry> = [];\n    for (const entry of bglEntries) {\n      const resource = this.getBindingResource(this.getBindingResourceType(entry));\n      bgEntries.push({\n        binding: entry.binding,\n        resource,\n      });\n    }\n\n    return this.device.createBindGroup({\n      entries: bgEntries,\n      layout: this.device.createBindGroupLayout({ entries: bglEntries }),\n    });\n  }\n\n  doCompute(pass: GPUComputePassEncoder, call: ComputeCmd | undefined, callWithZero: boolean) {\n    const x = callWithZero ? 0 : 1;\n    switch (call) {\n      case 'dispatch':\n        pass.dispatchWorkgroups(x, 1, 1);\n        break;\n      case 'dispatchIndirect':\n        pass.dispatchWorkgroupsIndirect(this.getIndirectBuffer([x, 1, 1]), 0);\n        break;\n      default:\n        break;\n    }\n  }\n\n  doRender(\n    pass: GPURenderPassEncoder | GPURenderBundleEncoder,\n    call: RenderCmd | undefined,\n    callWithZero: boolean\n  ) {\n    const vertexCount = callWithZero ? 0 : 3;\n    switch (call) {\n      case 'draw':\n        pass.draw(vertexCount, 1, 0, 0);\n        break;\n      case 'drawIndexed':\n        pass.setIndexBuffer(this.getIndexBuffer(), 'uint32');\n        pass.drawIndexed(vertexCount, 1, 0, 0, 0);\n        break;\n      case 'drawIndirect':\n        pass.drawIndirect(this.getIndirectBuffer([vertexCount, 1, 0, 0, 0]), 0);\n        break;\n      case 'drawIndexedIndirect':\n        pass.setIndexBuffer(this.getIndexBuffer(), 'uint32');\n        pass.drawIndexedIndirect(this.getIndirectBuffer([vertexCount, 1, 0, 0, 0]), 0);\n        break;\n      default:\n        break;\n    }\n  }\n\n  createBindGroupLayoutEntry(\n    encoderType: ProgrammableEncoderType,\n    resourceType: ValidBindableResource,\n    useU32Array: boolean\n  ): GPUBindGroupLayoutEntry {\n    const entry: GPUBindGroupLayoutEntry = {\n      binding: 0,\n      visibility: encoderType === 'compute pass' ? GPUShaderStage.COMPUTE : GPUShaderStage.FRAGMENT,\n    };\n\n    switch (resourceType) {\n      case 'uniformBuf':\n        entry.buffer = { hasDynamicOffset: useU32Array }; // default type: uniform\n        break;\n      case 'filtSamp':\n        entry.sampler = {}; // default type: filtering\n        break;\n      case 'sampledTex':\n        entry.texture = {}; // default sampleType: float\n        break;\n      case 'storageTex':\n        entry.storageTexture = { access: 'write-only', format: 'rgba8unorm' };\n        break;\n    }\n\n    return entry;\n  }\n\n  runTest(\n    encoderType: ProgrammableEncoderType,\n    pipeline: GPUComputePipeline | GPURenderPipeline,\n    bindGroups: Array<GPUBindGroup | undefined>,\n    dynamicOffsets: Array<number> | undefined,\n    call: ComputeCmd | RenderCmd | undefined,\n    callWithZero: boolean,\n    success: boolean\n  ) {\n    const { encoder, validateFinish } = this.createEncoder(encoderType);\n\n    if (encoder instanceof GPUComputePassEncoder) {\n      encoder.setPipeline(pipeline as GPUComputePipeline);\n    } else {\n      encoder.setPipeline(pipeline as GPURenderPipeline);\n    }\n\n    for (let i = 0; i < bindGroups.length; i++) {\n      const bindGroup = bindGroups[i];\n      if (!bindGroup) {\n        break;\n      }\n      if (dynamicOffsets) {\n        encoder.setBindGroup(\n          i,\n          bindGroup,\n          new Uint32Array(dynamicOffsets),\n          0,\n          dynamicOffsets.length\n        );\n      } else {\n        encoder.setBindGroup(i, bindGroup);\n      }\n    }\n\n    if (encoder instanceof GPUComputePassEncoder) {\n      this.doCompute(encoder, call as ComputeCmd, callWithZero);\n    } else {\n      this.doRender(encoder, call as RenderCmd, callWithZero);\n    }\n\n    validateFinish(success);\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('bind_groups_and_pipeline_layout_mismatch')\n  .desc(\n    `\n    Tests the bind groups must match the requirements of the pipeline layout.\n    - bind groups required by the pipeline layout are required.\n    - bind groups unused by the pipeline layout can be set or not.\n    `\n  )\n  .params(\n    kCompatTestParams\n      .beginSubcases()\n      .combineWithParams([\n        { setBindGroup0: true, setBindGroup1: true, setUnusedBindGroup2: true, _success: true },\n        { setBindGroup0: true, setBindGroup1: true, setUnusedBindGroup2: false, _success: true },\n        { setBindGroup0: true, setBindGroup1: false, setUnusedBindGroup2: true, _success: false },\n        { setBindGroup0: false, setBindGroup1: true, setUnusedBindGroup2: true, _success: false },\n        { setBindGroup0: false, setBindGroup1: false, setUnusedBindGroup2: false, _success: false },\n      ])\n      .combine('useU32Array', [false, true])\n  )\n  .fn(t => {\n    const {\n      encoderType,\n      call,\n      callWithZero,\n      setBindGroup0,\n      setBindGroup1,\n      setUnusedBindGroup2,\n      _success,\n      useU32Array,\n    } = t.params;\n    const visibility =\n      encoderType === 'compute pass' ? GPUShaderStage.COMPUTE : GPUShaderStage.VERTEX;\n\n    const bindGroupLayouts: Array<Array<GPUBindGroupLayoutEntry>> = [\n      // bind group layout 0\n      [\n        {\n          binding: 0,\n          visibility,\n          buffer: { hasDynamicOffset: useU32Array }, // default type: uniform\n        },\n      ],\n      // bind group layout 1\n      [\n        {\n          binding: 0,\n          visibility,\n          buffer: { hasDynamicOffset: useU32Array }, // default type: uniform\n        },\n      ],\n    ];\n\n    // Create required bind groups\n    const bindGroup0 = setBindGroup0 ? t.createBindGroupWithLayout(bindGroupLayouts[0]) : undefined;\n    const bindGroup1 = setBindGroup1 ? t.createBindGroupWithLayout(bindGroupLayouts[1]) : undefined;\n    const unusedBindGroup2 = setUnusedBindGroup2\n      ? t.createBindGroupWithLayout(bindGroupLayouts[1])\n      : undefined;\n\n    // Create fixed pipeline\n    const pipeline =\n      encoderType === 'compute pass'\n        ? t.createComputePipelineWithLayout(bindGroupLayouts)\n        : t.createRenderPipelineWithLayout(bindGroupLayouts);\n\n    const dynamicOffsets = useU32Array ? [0] : undefined;\n\n    // Test without the dispatch/draw (should always be valid)\n    t.runTest(\n      encoderType,\n      pipeline,\n      [bindGroup0, bindGroup1, unusedBindGroup2],\n      dynamicOffsets,\n      undefined,\n      false,\n      true\n    );\n\n    // Test with the dispatch/draw, to make sure the validation happens in dispatch/draw.\n    t.runTest(\n      encoderType,\n      pipeline,\n      [bindGroup0, bindGroup1, unusedBindGroup2],\n      dynamicOffsets,\n      call,\n      callWithZero,\n      _success\n    );\n  });\n\ng.test('buffer_binding,render_pipeline')\n  .desc(\n    `\n  The GPUBufferBindingLayout bindings configure should be exactly\n  same in PipelineLayout and bindgroup.\n  - TODO: test more draw functions, e.g. indirect\n  - TODO: test more visibilities, e.g. vertex\n  - TODO: bind group should be created with different layout\n  `\n  )\n  .params(u => u.combine('type', kBufferBindingTypes))\n  .fn(async t => {\n    const { type } = t.params;\n\n    // Create fixed bindGroup\n    const uniformBuffer = t.getUniformBuffer();\n\n    const bindGroup = t.device.createBindGroup({\n      entries: [\n        {\n          binding: 0,\n          resource: {\n            buffer: uniformBuffer,\n          },\n        },\n      ],\n      layout: t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: GPUShaderStage.FRAGMENT,\n            buffer: {}, // default type: uniform\n          },\n        ],\n      }),\n    });\n\n    // Create pipeline with different layouts\n    const pipeline = t.createRenderPipelineWithLayout([\n      [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.FRAGMENT,\n          buffer: {\n            type,\n          },\n        },\n      ],\n    ]);\n\n    const { encoder, validateFinish } = t.createEncoder('render pass');\n    encoder.setPipeline(pipeline);\n    encoder.setBindGroup(0, bindGroup);\n    encoder.draw(3);\n\n    validateFinish(type === undefined || type === 'uniform');\n  });\n\ng.test('sampler_binding,render_pipeline')\n  .desc(\n    `\n  The GPUSamplerBindingLayout bindings configure should be exactly\n  same in PipelineLayout and bindgroup.\n  - TODO: test more draw functions, e.g. indirect\n  - TODO: test more visibilities, e.g. vertex\n  `\n  )\n  .params(u =>\n    u //\n      .combine('bglType', kSamplerBindingTypes)\n      .combine('bgType', kSamplerBindingTypes)\n  )\n  .fn(async t => {\n    const { bglType, bgType } = t.params;\n    const bindGroup = t.device.createBindGroup({\n      entries: [\n        {\n          binding: 0,\n          resource:\n            bgType === 'comparison'\n              ? t.device.createSampler({ compare: 'always' })\n              : t.device.createSampler(),\n        },\n      ],\n      layout: t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: GPUShaderStage.FRAGMENT,\n            sampler: { type: bgType },\n          },\n        ],\n      }),\n    });\n\n    // Create pipeline with different layouts\n    const pipeline = t.createRenderPipelineWithLayout([\n      [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.FRAGMENT,\n          sampler: {\n            type: bglType,\n          },\n        },\n      ],\n    ]);\n\n    const { encoder, validateFinish } = t.createEncoder('render pass');\n    encoder.setPipeline(pipeline);\n    encoder.setBindGroup(0, bindGroup);\n    encoder.draw(3);\n\n    validateFinish(bglType === bgType);\n  });\n\ng.test('bgl_binding_mismatch')\n  .desc(\n    'Tests the binding number must exist or not exist in both bindGroups[i].layout and pipelineLayout.bgls[i]'\n  )\n  .params(\n    kCompatTestParams\n      .beginSubcases()\n      .combineWithParams([\n        { bgBindings: [0, 1, 2], plBindings: [0, 1, 2], _success: true },\n        { bgBindings: [0, 1, 2], plBindings: [0, 1, 3], _success: false },\n        { bgBindings: [0, 2], plBindings: [0, 2], _success: true },\n        { bgBindings: [0, 2], plBindings: [2, 0], _success: true },\n        { bgBindings: [0, 1, 2], plBindings: [0, 1], _success: false },\n        { bgBindings: [0, 1], plBindings: [0, 1, 2], _success: false },\n      ])\n      .combine('useU32Array', [false, true])\n  )\n  .fn(t => {\n    const {\n      encoderType,\n      call,\n      callWithZero,\n      bgBindings,\n      plBindings,\n      _success,\n      useU32Array,\n    } = t.params;\n    const visibility =\n      encoderType === 'compute pass' ? GPUShaderStage.COMPUTE : GPUShaderStage.VERTEX;\n\n    const bglEntries: Array<GPUBindGroupLayoutEntry> = [];\n    for (const binding of bgBindings) {\n      bglEntries.push({\n        binding,\n        visibility,\n        buffer: { hasDynamicOffset: useU32Array }, // default type: uniform\n      });\n    }\n    const bindGroup = t.createBindGroupWithLayout(bglEntries);\n\n    const plEntries: Array<Array<GPUBindGroupLayoutEntry>> = [[]];\n    for (const binding of plBindings) {\n      plEntries[0].push({\n        binding,\n        visibility,\n        buffer: { hasDynamicOffset: useU32Array }, // default type: uniform\n      });\n    }\n    const pipeline =\n      encoderType === 'compute pass'\n        ? t.createComputePipelineWithLayout(plEntries)\n        : t.createRenderPipelineWithLayout(plEntries);\n\n    const dynamicOffsets = useU32Array ? new Array(bgBindings.length).fill(0) : undefined;\n\n    // Test without the dispatch/draw (should always be valid)\n    t.runTest(encoderType, pipeline, [bindGroup], dynamicOffsets, undefined, false, true);\n\n    // Test with the dispatch/draw, to make sure the validation happens in dispatch/draw.\n    t.runTest(encoderType, pipeline, [bindGroup], dynamicOffsets, call, callWithZero, _success);\n  });\n\ng.test('bgl_visibility_mismatch')\n  .desc('Tests the visibility in bindGroups[i].layout and pipelineLayout.bgls[i] must be matched')\n  .params(\n    kCompatTestParams\n      .beginSubcases()\n      .combine('bgVisibility', kShaderStageCombinations)\n      .expand('plVisibility', p =>\n        p.encoderType === 'compute pass'\n          ? ([GPUConst.ShaderStage.COMPUTE] as const)\n          : ([\n              GPUConst.ShaderStage.VERTEX,\n              GPUConst.ShaderStage.FRAGMENT,\n              GPUConst.ShaderStage.VERTEX | GPUConst.ShaderStage.FRAGMENT,\n            ] as const)\n      )\n      .combine('useU32Array', [false, true])\n  )\n  .fn(t => {\n    const { encoderType, call, callWithZero, bgVisibility, plVisibility, useU32Array } = t.params;\n\n    const bglEntries: Array<GPUBindGroupLayoutEntry> = [\n      {\n        binding: 0,\n        visibility: bgVisibility,\n        buffer: { hasDynamicOffset: useU32Array }, // default type: uniform\n      },\n    ];\n    const bindGroup = t.createBindGroupWithLayout(bglEntries);\n\n    const plEntries: Array<Array<GPUBindGroupLayoutEntry>> = [\n      [\n        {\n          binding: 0,\n          visibility: plVisibility,\n          buffer: { hasDynamicOffset: useU32Array }, // default type: uniform\n        },\n      ],\n    ];\n    const pipeline =\n      encoderType === 'compute pass'\n        ? t.createComputePipelineWithLayout(plEntries)\n        : t.createRenderPipelineWithLayout(plEntries);\n\n    const dynamicOffsets = useU32Array ? [0] : undefined;\n\n    // Test without the dispatch/draw (should always be valid)\n    t.runTest(encoderType, pipeline, [bindGroup], dynamicOffsets, undefined, false, true);\n\n    // Test with the dispatch/draw, to make sure the validation happens in dispatch/draw.\n    t.runTest(\n      encoderType,\n      pipeline,\n      [bindGroup],\n      dynamicOffsets,\n      call,\n      callWithZero,\n      bgVisibility === plVisibility\n    );\n  });\n\ng.test('bgl_resource_type_mismatch')\n  .desc(\n    `\n  Tests the binding resource type in bindGroups[i].layout and pipelineLayout.bgls[i] must be matched\n  - TODO: Test externalTexture\n  `\n  )\n  .params(\n    kCompatTestParams\n      .beginSubcases()\n      .combine('bgResourceType', kResourceTypes)\n      .combine('plResourceType', kResourceTypes)\n      .expand('useU32Array', p => (p.bgResourceType === 'uniformBuf' ? [true, false] : [false]))\n  )\n  .fn(t => {\n    const {\n      encoderType,\n      call,\n      callWithZero,\n      bgResourceType,\n      plResourceType,\n      useU32Array,\n    } = t.params;\n\n    const bglEntries: Array<GPUBindGroupLayoutEntry> = [\n      t.createBindGroupLayoutEntry(encoderType, bgResourceType, useU32Array),\n    ];\n    const bindGroup = t.createBindGroupWithLayout(bglEntries);\n\n    const plEntries: Array<Array<GPUBindGroupLayoutEntry>> = [\n      [t.createBindGroupLayoutEntry(encoderType, plResourceType, useU32Array)],\n    ];\n    const pipeline =\n      encoderType === 'compute pass'\n        ? t.createComputePipelineWithLayout(plEntries)\n        : t.createRenderPipelineWithLayout(plEntries);\n\n    const dynamicOffsets = useU32Array ? [0] : undefined;\n\n    // Test without the dispatch/draw (should always be valid)\n    t.runTest(encoderType, pipeline, [bindGroup], dynamicOffsets, undefined, false, true);\n\n    // Test with the dispatch/draw, to make sure the validation happens in dispatch/draw.\n    t.runTest(\n      encoderType,\n      pipeline,\n      [bindGroup],\n      dynamicOffsets,\n      call,\n      callWithZero,\n      bgResourceType === plResourceType\n    );\n  });\n"],"file":"pipeline_bind_group_compat.spec.js"}