{"version":3,"sources":["../../../../../src/webgpu/api/validation/encoding/createRenderBundleEncoder.spec.ts"],"names":["description","makeTestGroup","kAllTextureFormats","kDepthStencilFormats","kTextureFormatInfo","kMaxColorAttachments","ValidationTest","g","test","desc","params","u","combine","Array","keys","beginSubcases","undefined","filter","colorFormat","colorFormatCount","fn","t","depthStencilFormat","shouldError","expectValidationError","device","createRenderBundleEncoder","colorFormats","fill","beforeAllSubcases","format","selectDeviceForTextureFormatOrSkipTestCase","attachment","colorRenderable","renderable","color","depthStencil","depth","stencil","depthReadOnly","stencilReadOnly"],"mappings":"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","sourcesContent":["export const description = `\ncreateRenderBundleEncoder validation tests.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport {\n  kAllTextureFormats,\n  kDepthStencilFormats,\n  kTextureFormatInfo,\n  kMaxColorAttachments,\n} from '../../../capability_info.js';\nimport { ValidationTest } from '../validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('attachment_state')\n  .desc(\n    `\n    Tests that createRenderBundleEncoder correctly validates the attachment state passed to it.\n      - Must be <= kMaxColorAttachments (8) colorFormats\n      - Must have a depthStencilFormat if no colorFormats are given\n    `\n  )\n  .params(u =>\n    u //\n      .combine('colorFormatCount', [...Array(kMaxColorAttachments + 2).keys()]) // 0-9\n      .beginSubcases()\n      .combine('colorFormat', [undefined, 'bgra8unorm'])\n      .combine('depthStencilFormat', [undefined, 'depth24plus-stencil8'] as const)\n      .filter(({ colorFormat, colorFormatCount }) => {\n        // Only run the test with 0 colorFormats once.\n        return (\n          (colorFormat !== undefined && colorFormatCount > 0) ||\n          (colorFormat === undefined && colorFormatCount === 0)\n        );\n      })\n  )\n  .fn(async t => {\n    const { colorFormat, depthStencilFormat, colorFormatCount } = t.params;\n\n    // Ensure up to kMaxColorAttachments (8) color formats are allowed.\n    let shouldError = colorFormatCount > kMaxColorAttachments;\n\n    // Zero color formats are only allowed if a depthStencilFormat is provided.\n    if (depthStencilFormat === undefined && colorFormatCount === 0) {\n      shouldError = true;\n    }\n\n    t.expectValidationError(() => {\n      t.device.createRenderBundleEncoder({\n        colorFormats: Array(colorFormatCount).fill(colorFormat),\n        depthStencilFormat,\n      });\n    }, shouldError);\n  });\n\ng.test('valid_texture_formats')\n  .desc(\n    `\n    Tests that createRenderBundleEncoder only accepts valid formats for its attachments.\n      - colorFormats\n      - depthStencilFormat\n    `\n  )\n  .params(u =>\n    u //\n      .combine('format', kAllTextureFormats)\n      .beginSubcases()\n      .combine('attachment', ['color', 'depthStencil'])\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    t.selectDeviceForTextureFormatOrSkipTestCase(format);\n  })\n  .fn(async t => {\n    const { format, attachment } = t.params;\n\n    const colorRenderable =\n      kTextureFormatInfo[format].renderable && kTextureFormatInfo[format].color;\n\n    const depthStencil = kTextureFormatInfo[format].depth || kTextureFormatInfo[format].stencil;\n\n    switch (attachment) {\n      case 'color': {\n        t.expectValidationError(() => {\n          t.device.createRenderBundleEncoder({\n            colorFormats: [format],\n          });\n        }, !colorRenderable);\n\n        break;\n      }\n      case 'depthStencil': {\n        t.expectValidationError(() => {\n          t.device.createRenderBundleEncoder({\n            colorFormats: [],\n            depthStencilFormat: format,\n          });\n        }, !depthStencil);\n\n        break;\n      }\n    }\n  });\n\ng.test('depth_stencil_readonly')\n  .desc(\n    `\n    Tests that createRenderBundleEncoder validation of depthReadOnly and stencilReadOnly\n      - With depth-only formats\n      - With stencil-only formats\n      - With depth-stencil-combined formats\n    `\n  )\n  .params(u =>\n    u //\n      .combine('depthStencilFormat', kDepthStencilFormats)\n      .beginSubcases()\n      .combine('depthReadOnly', [false, true])\n      .combine('stencilReadOnly', [false, true])\n  )\n  .beforeAllSubcases(t => {\n    const { depthStencilFormat } = t.params;\n    t.selectDeviceForTextureFormatOrSkipTestCase(depthStencilFormat);\n  })\n  .fn(async t => {\n    const { depthStencilFormat, depthReadOnly, stencilReadOnly } = t.params;\n\n    let shouldError = false;\n    if (\n      kTextureFormatInfo[depthStencilFormat].depth &&\n      kTextureFormatInfo[depthStencilFormat].stencil &&\n      depthReadOnly !== stencilReadOnly\n    ) {\n      shouldError = true;\n    }\n\n    t.expectValidationError(() => {\n      t.device.createRenderBundleEncoder({\n        colorFormats: [],\n        depthStencilFormat,\n        depthReadOnly,\n        stencilReadOnly,\n      });\n    }, shouldError);\n  });\n\ng.test('depth_stencil_readonly_with_undefined_depth')\n  .desc(\n    `\n    Tests that createRenderBundleEncoder validation of depthReadOnly and stencilReadOnly is ignored\n    if there is no depthStencilFormat set.\n    `\n  )\n  .params(u =>\n    u //\n      .beginSubcases()\n      .combine('depthReadOnly', [false, true])\n      .combine('stencilReadOnly', [false, true])\n  )\n  .fn(async t => {\n    const { depthReadOnly, stencilReadOnly } = t.params;\n\n    t.device.createRenderBundleEncoder({\n      colorFormats: ['bgra8unorm'],\n      depthReadOnly,\n      stencilReadOnly,\n    });\n  });\n"],"file":"createRenderBundleEncoder.spec.js"}