{"version":3,"file":"beginComputePass.spec.js","names":["description","makeTestGroup","kQueryTypes","ValidationTest","F","tryComputePass","success","descriptor","encoder","device","createCommandEncoder","computePass","beginComputePass","end","expectValidationError","finish","g","test","desc","params","u","combine","beforeAllSubcases","t","selectDeviceOrSkipTestCase","fn","locationA","locationB","querySet","createQuerySet","type","count","timestampWriteA","queryIndex","location","timestampWriteB","isValid","timestampWrites","selectDeviceForQueryTypeOrSkipTestCase","queryTypeA","queryTypeB","querySetState","createQuerySetWithState","timestampWrite","querySetCount","paramsSubcasesOnly","selectMismatchedDeviceOrSkipTestCase","mismatched","sourceDevice","mismatchedDevice","timestampQuerySet"],"sources":["../../../../../src/webgpu/api/validation/encoding/beginComputePass.spec.ts"],"sourcesContent":["export const description = `\nTests for validation in beginComputePass and GPUComputePassDescriptor as its optional descriptor.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { kQueryTypes } from '../../../capability_info.js';\nimport { ValidationTest } from '../validation_test.js';\n\nclass F extends ValidationTest {\n  tryComputePass(success: boolean, descriptor: GPUComputePassDescriptor): void {\n    const encoder = this.device.createCommandEncoder();\n    const computePass = encoder.beginComputePass(descriptor);\n    computePass.end();\n\n    this.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('timestampWrites,same_location')\n  .desc(\n    `\n  Test that entries in timestampWrites do not have the same location in GPUComputePassDescriptor.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('locationA', ['beginning', 'end'] as const)\n      .combine('locationB', ['beginning', 'end'] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase(['timestamp-query']);\n  })\n  .fn(t => {\n    const { locationA, locationB } = t.params;\n\n    const querySet = t.device.createQuerySet({\n      type: 'timestamp',\n      count: 2,\n    });\n\n    const timestampWriteA = {\n      querySet,\n      queryIndex: 0,\n      location: locationA,\n    };\n\n    const timestampWriteB = {\n      querySet,\n      queryIndex: 1,\n      location: locationB,\n    };\n\n    const isValid = locationA !== locationB;\n\n    const descriptor = {\n      timestampWrites: [timestampWriteA, timestampWriteB],\n    };\n\n    t.tryComputePass(isValid, descriptor);\n  });\n\ng.test('timestampWrites,query_set_type')\n  .desc(\n    `\n  Test that all entries of the timestampWrites must have type 'timestamp'. If all query types are\n  not 'timestamp' in GPUComputePassDescriptor, a validation error should be generated.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('queryTypeA', kQueryTypes)\n      .combine('queryTypeB', kQueryTypes)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceForQueryTypeOrSkipTestCase([\n      'timestamp',\n      t.params.queryTypeA,\n      t.params.queryTypeB,\n    ]);\n  })\n  .fn(t => {\n    const { queryTypeA, queryTypeB } = t.params;\n\n    const timestampWriteA = {\n      querySet: t.device.createQuerySet({ type: queryTypeA, count: 1 }),\n      queryIndex: 0,\n      location: 'beginning' as const,\n    };\n\n    const timestampWriteB = {\n      querySet: t.device.createQuerySet({ type: queryTypeB, count: 1 }),\n      queryIndex: 0,\n      location: 'end' as const,\n    };\n\n    const isValid = queryTypeA === 'timestamp' && queryTypeB === 'timestamp';\n\n    const descriptor = {\n      timestampWrites: [timestampWriteA, timestampWriteB],\n    };\n\n    t.tryComputePass(isValid, descriptor);\n  });\n\ng.test('timestampWrites,invalid_query_set')\n  .desc(`Tests that timestampWrite that has an invalid query set generates a validation error.`)\n  .params(u => u.combine('querySetState', ['valid', 'invalid'] as const))\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase(['timestamp-query']);\n  })\n  .fn(t => {\n    const { querySetState } = t.params;\n\n    const querySet = t.createQuerySetWithState(querySetState, {\n      type: 'timestamp',\n      count: 1,\n    });\n\n    const timestampWrite = {\n      querySet,\n      queryIndex: 0,\n      location: 'beginning' as const,\n    };\n\n    const descriptor = {\n      timestampWrites: [timestampWrite],\n    };\n\n    t.tryComputePass(querySetState === 'valid', descriptor);\n  });\n\ng.test('timestampWrites,query_index_count')\n  .desc(`Test that querySet.count should be greater than timestampWrite.queryIndex.`)\n  .params(u => u.combine('queryIndex', [0, 1, 2, 3]))\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase(['timestamp-query']);\n  })\n  .fn(t => {\n    const { queryIndex } = t.params;\n\n    const querySetCount = 2;\n\n    const timestampWrite = {\n      querySet: t.device.createQuerySet({ type: 'timestamp', count: querySetCount }),\n      queryIndex,\n      location: 'beginning' as const,\n    };\n\n    const isValid = queryIndex < querySetCount;\n\n    const descriptor = {\n      timestampWrites: [timestampWrite],\n    };\n\n    t.tryComputePass(isValid, descriptor);\n  });\n\ng.test('timestamp_query_set,device_mismatch')\n  .desc(\n    `\n  Tests beginComputePass cannot be called with a timestamp query set created from another device.\n  `\n  )\n  .paramsSubcasesOnly(u => u.combine('mismatched', [true, false]))\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase(['timestamp-query']);\n    t.selectMismatchedDeviceOrSkipTestCase('timestamp-query');\n  })\n  .fn(t => {\n    const { mismatched } = t.params;\n    const sourceDevice = mismatched ? t.mismatchedDevice : t.device;\n\n    const timestampQuerySet = sourceDevice.createQuerySet({\n      type: 'timestamp',\n      count: 1,\n    });\n\n    const timestampWrite = {\n      querySet: timestampQuerySet,\n      queryIndex: 0,\n      location: 'beginning' as const,\n    };\n\n    const descriptor = {\n      timestampWrites: [timestampWrite],\n    };\n\n    t.tryComputePass(!mismatched, descriptor);\n  });\n"],"mappings":";AAAA;AAAA,GAAA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAAC,CAED,SAASC,aAAa,QAAQ,4CAA4C;AAC1E,SAASC,WAAW,QAAQ,6BAA6B;AACzD,SAASC,cAAc,QAAQ,uBAAuB;;AAEtD,MAAMC,CAAC,SAASD,cAAc,CAAC;EAC7BE,cAAc,CAACC,OAAgB,EAAEC,UAAoC,EAAQ;IAC3E,MAAMC,OAAO,GAAG,IAAI,CAACC,MAAM,CAACC,oBAAoB,EAAE;IAClD,MAAMC,WAAW,GAAGH,OAAO,CAACI,gBAAgB,CAACL,UAAU,CAAC;IACxDI,WAAW,CAACE,GAAG,EAAE;;IAEjB,IAAI,CAACC,qBAAqB,CAAC,MAAM;MAC/BN,OAAO,CAACO,MAAM,EAAE;IAClB,CAAC,EAAE,CAACT,OAAO,CAAC;EACd;AACF;;AAEA,OAAO,MAAMU,CAAC,GAAGf,aAAa,CAACG,CAAC,CAAC;;AAEjCY,CAAC,CAACC,IAAI,CAAC,+BAA+B,CAAC;AACpCC,IAAI;AACF;AACL;AACA,GAAG,CACA;;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC,CAAC;AAAA,CACCC,OAAO,CAAC,WAAW,EAAE,CAAC,WAAW,EAAE,KAAK,CAAC,CAAU;AACnDA,OAAO,CAAC,WAAW,EAAE,CAAC,WAAW,EAAE,KAAK,CAAC,CAAU,CACvD;;AACAC,iBAAiB,CAAC,CAAAC,CAAC,KAAI;EACtBA,CAAC,CAACC,0BAA0B,CAAC,CAAC,iBAAiB,CAAC,CAAC;AACnD,CAAC,CAAC;AACDC,EAAE,CAAC,CAAAF,CAAC,KAAI;EACP,MAAM,EAAEG,SAAS,EAAEC,SAAS,CAAC,CAAC,GAAGJ,CAAC,CAACJ,MAAM;;EAEzC,MAAMS,QAAQ,GAAGL,CAAC,CAACd,MAAM,CAACoB,cAAc,CAAC;IACvCC,IAAI,EAAE,WAAW;IACjBC,KAAK,EAAE;EACT,CAAC,CAAC;;EAEF,MAAMC,eAAe,GAAG;IACtBJ,QAAQ;IACRK,UAAU,EAAE,CAAC;IACbC,QAAQ,EAAER;EACZ,CAAC;;EAED,MAAMS,eAAe,GAAG;IACtBP,QAAQ;IACRK,UAAU,EAAE,CAAC;IACbC,QAAQ,EAAEP;EACZ,CAAC;;EAED,MAAMS,OAAO,GAAGV,SAAS,KAAKC,SAAS;;EAEvC,MAAMpB,UAAU,GAAG;IACjB8B,eAAe,EAAE,CAACL,eAAe,EAAEG,eAAe;EACpD,CAAC;;EAEDZ,CAAC,CAAClB,cAAc,CAAC+B,OAAO,EAAE7B,UAAU,CAAC;AACvC,CAAC,CAAC;;AAEJS,CAAC,CAACC,IAAI,CAAC,gCAAgC,CAAC;AACrCC,IAAI;AACF;AACL;AACA;AACA,GAAG,CACA;;AACAC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC,CAAC;AAAA,CACCC,OAAO,CAAC,YAAY,EAAEnB,WAAW,CAAC;AAClCmB,OAAO,CAAC,YAAY,EAAEnB,WAAW,CAAC,CACtC;;AACAoB,iBAAiB,CAAC,CAAAC,CAAC,KAAI;EACtBA,CAAC,CAACe,sCAAsC,CAAC;EACvC,WAAW;EACXf,CAAC,CAACJ,MAAM,CAACoB,UAAU;EACnBhB,CAAC,CAACJ,MAAM,CAACqB,UAAU,CACpB,CAAC;;AACJ,CAAC,CAAC;AACDf,EAAE,CAAC,CAAAF,CAAC,KAAI;EACP,MAAM,EAAEgB,UAAU,EAAEC,UAAU,CAAC,CAAC,GAAGjB,CAAC,CAACJ,MAAM;;EAE3C,MAAMa,eAAe,GAAG;IACtBJ,QAAQ,EAAEL,CAAC,CAACd,MAAM,CAACoB,cAAc,CAAC,EAAEC,IAAI,EAAES,UAAU,EAAER,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;IACjEE,UAAU,EAAE,CAAC;IACbC,QAAQ,EAAE;EACZ,CAAC;;EAED,MAAMC,eAAe,GAAG;IACtBP,QAAQ,EAAEL,CAAC,CAACd,MAAM,CAACoB,cAAc,CAAC,EAAEC,IAAI,EAAEU,UAAU,EAAET,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;IACjEE,UAAU,EAAE,CAAC;IACbC,QAAQ,EAAE;EACZ,CAAC;;EAED,MAAME,OAAO,GAAGG,UAAU,KAAK,WAAW,IAAIC,UAAU,KAAK,WAAW;;EAExE,MAAMjC,UAAU,GAAG;IACjB8B,eAAe,EAAE,CAACL,eAAe,EAAEG,eAAe;EACpD,CAAC;;EAEDZ,CAAC,CAAClB,cAAc,CAAC+B,OAAO,EAAE7B,UAAU,CAAC;AACvC,CAAC,CAAC;;AAEJS,CAAC,CAACC,IAAI,CAAC,mCAAmC,CAAC;AACxCC,IAAI,CAAE,uFAAsF,CAAC;AAC7FC,MAAM,CAAC,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAO,CAAC,eAAe,EAAE,CAAC,OAAO,EAAE,SAAS,CAAC,CAAU,CAAC;AACtEC,iBAAiB,CAAC,CAAAC,CAAC,KAAI;EACtBA,CAAC,CAACC,0BAA0B,CAAC,CAAC,iBAAiB,CAAC,CAAC;AACnD,CAAC,CAAC;AACDC,EAAE,CAAC,CAAAF,CAAC,KAAI;EACP,MAAM,EAAEkB,aAAa,CAAC,CAAC,GAAGlB,CAAC,CAACJ,MAAM;;EAElC,MAAMS,QAAQ,GAAGL,CAAC,CAACmB,uBAAuB,CAACD,aAAa,EAAE;IACxDX,IAAI,EAAE,WAAW;IACjBC,KAAK,EAAE;EACT,CAAC,CAAC;;EAEF,MAAMY,cAAc,GAAG;IACrBf,QAAQ;IACRK,UAAU,EAAE,CAAC;IACbC,QAAQ,EAAE;EACZ,CAAC;;EAED,MAAM3B,UAAU,GAAG;IACjB8B,eAAe,EAAE,CAACM,cAAc;EAClC,CAAC;;EAEDpB,CAAC,CAAClB,cAAc,CAACoC,aAAa,KAAK,OAAO,EAAElC,UAAU,CAAC;AACzD,CAAC,CAAC;;AAEJS,CAAC,CAACC,IAAI,CAAC,mCAAmC,CAAC;AACxCC,IAAI,CAAE,4EAA2E,CAAC;AAClFC,MAAM,CAAC,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAO,CAAC,YAAY,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAClDC,iBAAiB,CAAC,CAAAC,CAAC,KAAI;EACtBA,CAAC,CAACC,0BAA0B,CAAC,CAAC,iBAAiB,CAAC,CAAC;AACnD,CAAC,CAAC;AACDC,EAAE,CAAC,CAAAF,CAAC,KAAI;EACP,MAAM,EAAEU,UAAU,CAAC,CAAC,GAAGV,CAAC,CAACJ,MAAM;;EAE/B,MAAMyB,aAAa,GAAG,CAAC;;EAEvB,MAAMD,cAAc,GAAG;IACrBf,QAAQ,EAAEL,CAAC,CAACd,MAAM,CAACoB,cAAc,CAAC,EAAEC,IAAI,EAAE,WAAW,EAAEC,KAAK,EAAEa,aAAa,CAAC,CAAC,CAAC;IAC9EX,UAAU;IACVC,QAAQ,EAAE;EACZ,CAAC;;EAED,MAAME,OAAO,GAAGH,UAAU,GAAGW,aAAa;;EAE1C,MAAMrC,UAAU,GAAG;IACjB8B,eAAe,EAAE,CAACM,cAAc;EAClC,CAAC;;EAEDpB,CAAC,CAAClB,cAAc,CAAC+B,OAAO,EAAE7B,UAAU,CAAC;AACvC,CAAC,CAAC;;AAEJS,CAAC,CAACC,IAAI,CAAC,qCAAqC,CAAC;AAC1CC,IAAI;AACF;AACL;AACA,GAAG,CACA;;AACA2B,kBAAkB,CAAC,CAAAzB,CAAC,KAAIA,CAAC,CAACC,OAAO,CAAC,YAAY,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;AAC/DC,iBAAiB,CAAC,CAAAC,CAAC,KAAI;EACtBA,CAAC,CAACC,0BAA0B,CAAC,CAAC,iBAAiB,CAAC,CAAC;EACjDD,CAAC,CAACuB,oCAAoC,CAAC,iBAAiB,CAAC;AAC3D,CAAC,CAAC;AACDrB,EAAE,CAAC,CAAAF,CAAC,KAAI;EACP,MAAM,EAAEwB,UAAU,CAAC,CAAC,GAAGxB,CAAC,CAACJ,MAAM;EAC/B,MAAM6B,YAAY,GAAGD,UAAU,GAAGxB,CAAC,CAAC0B,gBAAgB,GAAG1B,CAAC,CAACd,MAAM;;EAE/D,MAAMyC,iBAAiB,GAAGF,YAAY,CAACnB,cAAc,CAAC;IACpDC,IAAI,EAAE,WAAW;IACjBC,KAAK,EAAE;EACT,CAAC,CAAC;;EAEF,MAAMY,cAAc,GAAG;IACrBf,QAAQ,EAAEsB,iBAAiB;IAC3BjB,UAAU,EAAE,CAAC;IACbC,QAAQ,EAAE;EACZ,CAAC;;EAED,MAAM3B,UAAU,GAAG;IACjB8B,eAAe,EAAE,CAACM,cAAc;EAClC,CAAC;;EAEDpB,CAAC,CAAClB,cAAc,CAAC,CAAC0C,UAAU,EAAExC,UAAU,CAAC;AAC3C,CAAC,CAAC"}