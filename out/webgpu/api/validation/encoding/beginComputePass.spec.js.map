{"version":3,"sources":["../../../../../src/webgpu/api/validation/encoding/beginComputePass.spec.ts"],"names":["description","makeTestGroup","kQueryTypes","ValidationTest","F","tryComputePass","success","descriptor","encoder","device","createCommandEncoder","computePass","beginComputePass","end","expectValidationError","finish","g","test","desc","params","u","combine","beforeAllSubcases","t","selectDeviceOrSkipTestCase","fn","locationA","locationB","querySet","createQuerySet","type","count","timestampWriteA","queryIndex","location","timestampWriteB","isValid","timestampWrites","selectDeviceForQueryTypeOrSkipTestCase","queryTypeA","queryTypeB","querySetCount","timestampWrite","selectMismatchedDeviceOrSkipTestCase","mismatched","mismatchedDevice","timestampQuerySet"],"mappings":"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","sourcesContent":["export const description = `\nTests for validation in beginComputePass and GPUComputePassDescriptor as its optional descriptor.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { kQueryTypes } from '../../../capability_info.js';\nimport { ValidationTest } from '../validation_test.js';\n\nclass F extends ValidationTest {\n  tryComputePass(success: boolean, descriptor: GPUComputePassDescriptor): void {\n    const encoder = this.device.createCommandEncoder();\n    const computePass = encoder.beginComputePass(descriptor);\n    computePass.end();\n\n    this.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('timestampWrites,same_location')\n  .desc(\n    `\n  Test that entries in timestampWrites do not have the same location in GPUComputePassDescriptor.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('locationA', ['beginning', 'end'] as const)\n      .combine('locationB', ['beginning', 'end'] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase(['timestamp-query']);\n  })\n  .fn(async t => {\n    const { locationA, locationB } = t.params;\n\n    const querySet = t.device.createQuerySet({\n      type: 'timestamp',\n      count: 2,\n    });\n\n    const timestampWriteA = {\n      querySet,\n      queryIndex: 0,\n      location: locationA,\n    };\n\n    const timestampWriteB = {\n      querySet,\n      queryIndex: 1,\n      location: locationB,\n    };\n\n    const isValid = locationA !== locationB;\n\n    const descriptor = {\n      timestampWrites: [timestampWriteA, timestampWriteB],\n    };\n\n    t.tryComputePass(isValid, descriptor);\n  });\n\ng.test('timestampWrites,query_set_type')\n  .desc(\n    `\n  Test that all entries of the timestampWrites must have type 'timestamp'. If all query types are\n  not 'timestamp' in GPUComputePassDescriptor, a validation error should be generated.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('queryTypeA', kQueryTypes)\n      .combine('queryTypeB', kQueryTypes)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceForQueryTypeOrSkipTestCase([\n      'timestamp',\n      t.params.queryTypeA,\n      t.params.queryTypeB,\n    ]);\n  })\n  .fn(async t => {\n    const { queryTypeA, queryTypeB } = t.params;\n\n    const timestampWriteA = {\n      querySet: t.device.createQuerySet({ type: queryTypeA, count: 1 }),\n      queryIndex: 0,\n      location: 'beginning' as const,\n    };\n\n    const timestampWriteB = {\n      querySet: t.device.createQuerySet({ type: queryTypeB, count: 1 }),\n      queryIndex: 0,\n      location: 'end' as const,\n    };\n\n    const isValid = queryTypeA === 'timestamp' && queryTypeB === 'timestamp';\n\n    const descriptor = {\n      timestampWrites: [timestampWriteA, timestampWriteB],\n    };\n\n    t.tryComputePass(isValid, descriptor);\n  });\n\ng.test('timestampWrites,query_index_count')\n  .desc(`Test that querySet.count should be greater than timestampWrite.queryIndex.`)\n  .params(u => u.combine('queryIndex', [0, 1, 2, 3]))\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase(['timestamp-query']);\n  })\n  .fn(async t => {\n    const { queryIndex } = t.params;\n\n    const querySetCount = 2;\n\n    const timestampWrite = {\n      querySet: t.device.createQuerySet({ type: 'timestamp', count: querySetCount }),\n      queryIndex,\n      location: 'beginning' as const,\n    };\n\n    const isValid = queryIndex < querySetCount;\n\n    const descriptor = {\n      timestampWrites: [timestampWrite],\n    };\n\n    t.tryComputePass(isValid, descriptor);\n  });\n\ng.test('timestamp_query_set,device_mismatch')\n  .desc(\n    `\n  Tests beginComputePass cannot be called with a timestamp query set created from another device.\n  `\n  )\n  .params(u => u.combine('mismatched', [true, false]))\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase(['timestamp-query']);\n    t.selectMismatchedDeviceOrSkipTestCase('timestamp-query');\n  })\n  .fn(async t => {\n    const { mismatched } = t.params;\n    const device = mismatched ? t.mismatchedDevice : t.device;\n\n    const timestampQuerySet = device.createQuerySet({\n      type: 'timestamp',\n      count: 1,\n    });\n\n    const timestampWrite = {\n      querySet: timestampQuerySet,\n      queryIndex: 0,\n      location: 'beginning' as const,\n    };\n\n    const descriptor = {\n      timestampWrites: [timestampWrite],\n    };\n\n    t.tryComputePass(!mismatched, descriptor);\n  });\n"],"file":"beginComputePass.spec.js"}