{"version":3,"sources":["../../../../../src/webgpu/api/validation/encoding/beginRenderPass.spec.ts"],"names":["description","makeTestGroup","ValidationTest","g","test","desc","paramsSubcasesOnly","view0Mismatched","target0Mismatched","view1Mismatched","target1Mismatched","beforeAllSubcases","t","selectMismatchedDeviceOrSkipTestCase","undefined","fn","params","mismatched","view0Texture","getDeviceMismatchedRenderTexture","getRenderTexture","target0Texture","view1Texture","target1Texture","encoder","createEncoder","pass","beginRenderPass","colorAttachments","view","createView","clearValue","r","b","a","loadOp","storeOp","resolveTarget","end","validateFinish","u","combine","descriptor","size","width","height","depthOrArrayLayers","format","usage","GPUTextureUsage","RENDER_ATTACHMENT","depthStencilTexture","getDeviceMismatchedTexture","device","createTexture","depthStencilAttachment","depthClearValue","depthLoadOp","depthStoreOp","stencilClearValue","stencilLoadOp","stencilStoreOp","mismatchedDevice","occlusionQuerySet","createQuerySet","type","count","trackForCleanup"],"mappings":"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","sourcesContent":["export const description = `\nNote: render pass 'occlusionQuerySet' validation is tested in queries/general.spec.ts\n\nTODO: Check that depth-stencil attachment views must encompass all aspects.\n\nTODO: check for duplication (render_pass/, etc.), plan, and implement.\nNote possibly a lot of this should be operation tests instead.\nNotes:\n> - color attachments {zero, one, multiple}\n>     - many different formats (some are non-renderable)\n>     - is a view on a texture with multiple mip levels or array layers\n>     - two attachments use the same view, or views of {intersecting, disjoint} ranges\n>     - {without, with} resolve target\n>         - resolve format compatibility with multisampled format\n>     - {all possible load ops, load color {in range, negative, too large}}\n>     - all possible store ops\n> - depth/stencil attachment\n>     - {unset, all possible formats}\n>     - {all possible {depth, stencil} load ops, load values {in range, negative, too large}}\n>     - all possible {depth, stencil} store ops\n>     - depthReadOnly {t,f}, stencilReadOnly {t,f}\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { ValidationTest } from '../validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('color_attachments,device_mismatch')\n  .desc(\n    `\n    Tests beginRenderPass cannot be called with color attachments whose texture view or resolve target is created from another device\n    The 'view' and 'resolveTarget' are:\n    - created from same device in ColorAttachment0 and ColorAttachment1\n    - created from different device in ColorAttachment0 and ColorAttachment1\n    - created from same device in ColorAttachment0, but from different device in ColorAttachment1\n    `\n  )\n  .paramsSubcasesOnly([\n    {\n      view0Mismatched: false,\n      target0Mismatched: false,\n      view1Mismatched: false,\n      target1Mismatched: false,\n    }, // control case\n    {\n      view0Mismatched: false,\n      target0Mismatched: true,\n      view1Mismatched: false,\n      target1Mismatched: true,\n    },\n    {\n      view0Mismatched: true,\n      target0Mismatched: false,\n      view1Mismatched: true,\n      target1Mismatched: false,\n    },\n    {\n      view0Mismatched: false,\n      target0Mismatched: false,\n      view1Mismatched: false,\n      target1Mismatched: true,\n    },\n  ])\n  .beforeAllSubcases(t => {\n    t.selectMismatchedDeviceOrSkipTestCase(undefined);\n  })\n  .fn(async t => {\n    const { view0Mismatched, target0Mismatched, view1Mismatched, target1Mismatched } = t.params;\n    const mismatched = view0Mismatched || target0Mismatched || view1Mismatched || target1Mismatched;\n\n    const view0Texture = view0Mismatched\n      ? t.getDeviceMismatchedRenderTexture(4)\n      : t.getRenderTexture(4);\n    const target0Texture = target0Mismatched\n      ? t.getDeviceMismatchedRenderTexture()\n      : t.getRenderTexture();\n    const view1Texture = view1Mismatched\n      ? t.getDeviceMismatchedRenderTexture(4)\n      : t.getRenderTexture(4);\n    const target1Texture = target1Mismatched\n      ? t.getDeviceMismatchedRenderTexture()\n      : t.getRenderTexture();\n\n    const encoder = t.createEncoder('non-pass');\n    const pass = encoder.encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: view0Texture.createView(),\n          clearValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n          loadOp: 'clear',\n          storeOp: 'store',\n          resolveTarget: target0Texture.createView(),\n        },\n        {\n          view: view1Texture.createView(),\n          clearValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n          loadOp: 'clear',\n          storeOp: 'store',\n          resolveTarget: target1Texture.createView(),\n        },\n      ],\n    });\n    pass.end();\n\n    encoder.validateFinish(!mismatched);\n  });\n\ng.test('depth_stencil_attachment,device_mismatch')\n  .desc(\n    'Tests beginRenderPass cannot be called with a depth stencil attachment whose texture view is created from another device'\n  )\n  .paramsSubcasesOnly(u => u.combine('mismatched', [true, false]))\n  .beforeAllSubcases(t => {\n    t.selectMismatchedDeviceOrSkipTestCase(undefined);\n  })\n  .fn(async t => {\n    const { mismatched } = t.params;\n\n    const descriptor: GPUTextureDescriptor = {\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      format: 'depth24plus-stencil8',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\n    };\n\n    const depthStencilTexture = mismatched\n      ? t.getDeviceMismatchedTexture(descriptor)\n      : t.device.createTexture(descriptor);\n\n    const encoder = t.createEncoder('non-pass');\n    const pass = encoder.encoder.beginRenderPass({\n      colorAttachments: [],\n      depthStencilAttachment: {\n        view: depthStencilTexture.createView(),\n        depthClearValue: 0,\n        depthLoadOp: 'clear',\n        depthStoreOp: 'store',\n        stencilClearValue: 0,\n        stencilLoadOp: 'clear',\n        stencilStoreOp: 'store',\n      },\n    });\n    pass.end();\n\n    encoder.validateFinish(!mismatched);\n  });\n\ng.test('occlusion_query_set,device_mismatch')\n  .desc(\n    'Tests beginRenderPass cannot be called with an occlusion query set created from another device'\n  )\n  .paramsSubcasesOnly(u => u.combine('mismatched', [true, false]))\n  .beforeAllSubcases(t => {\n    t.selectMismatchedDeviceOrSkipTestCase(undefined);\n  })\n  .fn(async t => {\n    const { mismatched } = t.params;\n    const device = mismatched ? t.mismatchedDevice : t.device;\n\n    const occlusionQuerySet = device.createQuerySet({\n      type: 'occlusion',\n      count: 1,\n    });\n    t.trackForCleanup(occlusionQuerySet);\n\n    const encoder = t.createEncoder('render pass', { occlusionQuerySet });\n    encoder.validateFinish(!mismatched);\n  });\n"],"file":"beginRenderPass.spec.js"}