{"version":3,"sources":["../../../../../../src/webgpu/api/validation/encoding/queries/general.spec.ts"],"names":["description","makeTestGroup","kQueryTypes","ValidationTest","createQuerySetWithType","createRenderEncoderWithQuerySet","g","test","desc","paramsSubcasesOnly","u","combine","undefined","fn","t","type","params","selectDeviceForQueryTypeOrSkipTestCase","querySet","encoder","beginOcclusionQuery","endOcclusionQuery","expectValidationError","finish","createQuerySetWithState","querySetState","queryIndex","beginSubcases","expand","p","encoderType","count","createEncoder","writeTimestamp"],"mappings":"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","sourcesContent":["export const description = `\nTODO:\n\n- Start a pipeline statistics query in all possible encoders:\n    - queryIndex {in, out of} range for GPUQuerySet\n    - GPUQuerySet {valid, invalid}\n    - x ={render pass, compute pass} encoder\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { kQueryTypes } from '../../../../capability_info.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nimport { createQuerySetWithType, createRenderEncoderWithQuerySet } from './common.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('occlusion_query,query_type')\n  .desc(\n    `\nTests that set occlusion query set with all types in render pass descriptor:\n- type {occlusion (control case), pipeline statistics, timestamp}\n- {undefined} for occlusion query set in render pass descriptor\n  `\n  )\n  .paramsSubcasesOnly(u => u.combine('type', [undefined, ...kQueryTypes]))\n  .fn(async t => {\n    const type = t.params.type;\n\n    if (type) {\n      await t.selectDeviceForQueryTypeOrSkipTestCase(type);\n    }\n\n    const querySet = type === undefined ? undefined : createQuerySetWithType(t, type, 1);\n\n    const encoder = createRenderEncoderWithQuerySet(t, querySet);\n    encoder.encoder.beginOcclusionQuery(0);\n    encoder.encoder.endOcclusionQuery();\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, type !== 'occlusion');\n  });\n\ng.test('occlusion_query,invalid_query_set')\n  .desc(\n    `\nTests that begin occlusion query with a invalid query set that failed during creation.\n  `\n  )\n  .paramsSubcasesOnly(u => u.combine('querySetState', ['valid', 'invalid'] as const))\n  .fn(t => {\n    const querySet = t.createQuerySetWithState(t.params.querySetState);\n\n    const encoder = createRenderEncoderWithQuerySet(t, querySet);\n    encoder.encoder.beginOcclusionQuery(0);\n    encoder.encoder.endOcclusionQuery();\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, t.params.querySetState === 'invalid');\n  });\n\ng.test('occlusion_query,query_index')\n  .desc(\n    `\nTests that begin occlusion query with query index:\n- queryIndex {in, out of} range for GPUQuerySet\n  `\n  )\n  .paramsSubcasesOnly(u => u.combine('queryIndex', [0, 2]))\n  .fn(t => {\n    const querySet = createQuerySetWithType(t, 'occlusion', 2);\n\n    const encoder = createRenderEncoderWithQuerySet(t, querySet);\n    encoder.encoder.beginOcclusionQuery(t.params.queryIndex);\n    encoder.encoder.endOcclusionQuery();\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, t.params.queryIndex > 0);\n  });\n\ng.test('timestamp_query,query_type_and_index')\n  .desc(\n    `\nTests that write timestamp to all types of query set on all possible encoders:\n- type {occlusion, pipeline statistics, timestamp}\n- queryIndex {in, out of} range for GPUQuerySet\n- x= {non-pass, compute, render} encoder\n  `\n  )\n  .params(u =>\n    u\n      .combine('encoderType', ['non-pass', 'compute pass', 'render pass'] as const)\n      .combine('type', kQueryTypes)\n      .beginSubcases()\n      .expand('queryIndex', p => (p.type === 'timestamp' ? [0, 2] : [0]))\n  )\n  .fn(async t => {\n    const { encoderType, type, queryIndex } = t.params;\n\n    await t.selectDeviceForQueryTypeOrSkipTestCase(type);\n\n    const count = 2;\n    const querySet = createQuerySetWithType(t, type, count);\n\n    const encoder = t.createEncoder(encoderType);\n    encoder.encoder.writeTimestamp(querySet, queryIndex);\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, type !== 'timestamp' || queryIndex >= count);\n  });\n\ng.test('timestamp_query,invalid_query_set')\n  .desc(\n    `\nTests that write timestamp to a invalid query set that failed during creation:\n- x= {non-pass, compute, render} enconder\n  `\n  )\n  .paramsSubcasesOnly(u =>\n    u.combine('encoderType', ['non-pass', 'compute pass', 'render pass'] as const)\n  )\n  .fn(async t => {\n    const querySet = t.createQuerySetWithState('invalid');\n\n    const encoder = t.createEncoder(t.params.encoderType);\n    encoder.encoder.writeTimestamp(querySet, 0);\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    });\n  });\n"],"file":"general.spec.js"}