{"version":3,"sources":["../../../../../../src/webgpu/api/validation/encoding/queries/general.spec.ts"],"names":["description","makeTestGroup","kQueryTypes","ValidationTest","createQuerySetWithType","g","test","desc","paramsSubcasesOnly","u","combine","undefined","fn","t","type","params","selectDeviceForQueryTypeOrSkipTestCase","querySet","encoder","createEncoder","occlusionQuerySet","beginOcclusionQuery","endOcclusionQuery","validateFinish","createQuerySetWithState","querySetState","validateFinishAndSubmitGivenState","queryIndex","beginSubcases","expand","p","count","writeTimestamp","mismatched","selectMismatchedDeviceOrSkipTestCase","device","mismatchedDevice","createQuerySet","trackForCleanup"],"mappings":"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","sourcesContent":["export const description = `\nTODO: pipeline statistics queries are removed from core; consider moving tests to another suite.\nTODO:\n- Start a pipeline statistics query in all possible encoders:\n    - queryIndex {in, out of} range for GPUQuerySet\n    - GPUQuerySet {valid, invalid, device mismatched}\n    - x ={render pass, compute pass} encoder\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { kQueryTypes } from '../../../../capability_info.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nimport { createQuerySetWithType } from './common.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('occlusion_query,query_type')\n  .desc(\n    `\nTests that set occlusion query set with all types in render pass descriptor:\n- type {occlusion (control case), pipeline statistics, timestamp}\n- {undefined} for occlusion query set in render pass descriptor\n  `\n  )\n  .paramsSubcasesOnly(u => u.combine('type', [undefined, ...kQueryTypes]))\n  .fn(async t => {\n    const type = t.params.type;\n\n    if (type) {\n      await t.selectDeviceForQueryTypeOrSkipTestCase(type);\n    }\n\n    const querySet = type === undefined ? undefined : createQuerySetWithType(t, type, 1);\n\n    const encoder = t.createEncoder('render pass', { occlusionQuerySet: querySet });\n    encoder.encoder.beginOcclusionQuery(0);\n    encoder.encoder.endOcclusionQuery();\n    encoder.validateFinish(type === 'occlusion');\n  });\n\ng.test('occlusion_query,invalid_query_set')\n  .desc(\n    `\nTests that begin occlusion query with a invalid query set that failed during creation.\n  `\n  )\n  .paramsSubcasesOnly(u => u.combine('querySetState', ['valid', 'invalid'] as const))\n  .fn(t => {\n    const occlusionQuerySet = t.createQuerySetWithState(t.params.querySetState);\n\n    const encoder = t.createEncoder('render pass', { occlusionQuerySet });\n    encoder.encoder.beginOcclusionQuery(0);\n    encoder.encoder.endOcclusionQuery();\n    encoder.validateFinishAndSubmitGivenState(t.params.querySetState);\n  });\n\ng.test('occlusion_query,query_index')\n  .desc(\n    `\nTests that begin occlusion query with query index:\n- queryIndex {in, out of} range for GPUQuerySet\n  `\n  )\n  .paramsSubcasesOnly(u => u.combine('queryIndex', [0, 2]))\n  .fn(t => {\n    const occlusionQuerySet = createQuerySetWithType(t, 'occlusion', 2);\n\n    const encoder = t.createEncoder('render pass', { occlusionQuerySet });\n    encoder.encoder.beginOcclusionQuery(t.params.queryIndex);\n    encoder.encoder.endOcclusionQuery();\n    encoder.validateFinish(t.params.queryIndex < 2);\n  });\n\ng.test('timestamp_query,query_type_and_index')\n  .desc(\n    `\nTests that write timestamp to all types of query set on all possible encoders:\n- type {occlusion, pipeline statistics, timestamp}\n- queryIndex {in, out of} range for GPUQuerySet\n- x= {non-pass} encoder\n  `\n  )\n  .params(u =>\n    u\n      .combine('type', kQueryTypes)\n      .beginSubcases()\n      .expand('queryIndex', p => (p.type === 'timestamp' ? [0, 2] : [0]))\n  )\n  .fn(async t => {\n    const { type, queryIndex } = t.params;\n\n    await t.selectDeviceForQueryTypeOrSkipTestCase(type);\n\n    const count = 2;\n    const querySet = createQuerySetWithType(t, type, count);\n\n    const encoder = t.createEncoder('non-pass');\n    encoder.encoder.writeTimestamp(querySet, queryIndex);\n    encoder.validateFinish(type === 'timestamp' && queryIndex < count);\n  });\n\ng.test('timestamp_query,invalid_query_set')\n  .desc(\n    `\nTests that write timestamp to a invalid query set that failed during creation:\n- x= {non-pass} encoder\n  `\n  )\n  .paramsSubcasesOnly(u => u.combine('querySetState', ['valid', 'invalid'] as const))\n  .fn(async t => {\n    const { querySetState } = t.params;\n    await t.selectDeviceForQueryTypeOrSkipTestCase('timestamp');\n\n    const querySet = t.createQuerySetWithState(querySetState, {\n      type: 'timestamp',\n      count: 2,\n    });\n\n    const encoder = t.createEncoder('non-pass');\n    encoder.encoder.writeTimestamp(querySet, 0);\n    encoder.validateFinish(querySetState !== 'invalid');\n  });\n\ng.test('timestamp_query,device_mismatch')\n  .desc('Tests writeTimestamp cannot be called with a query set created from another device')\n  .paramsSubcasesOnly(u => u.combine('mismatched', [true, false]))\n  .fn(async t => {\n    const { mismatched } = t.params;\n\n    await t.selectDeviceForQueryTypeOrSkipTestCase('timestamp');\n\n    if (mismatched) {\n      await t.selectMismatchedDeviceOrSkipTestCase('timestamp-query');\n    }\n\n    const device = mismatched ? t.mismatchedDevice : t.device;\n\n    const querySet = device.createQuerySet({\n      type: 'timestamp',\n      count: 2,\n    });\n    t.trackForCleanup(querySet);\n\n    const encoder = t.createEncoder('non-pass');\n    encoder.encoder.writeTimestamp(querySet, 0);\n    encoder.validateFinish(!mismatched);\n  });\n"],"file":"general.spec.js"}