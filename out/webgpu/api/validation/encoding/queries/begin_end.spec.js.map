{"version":3,"sources":["../../../../../../src/webgpu/api/validation/encoding/queries/begin_end.spec.ts"],"names":["description","makeTestGroup","ValidationTest","beginRenderPassWithQuerySet","createQuerySetWithType","g","test","desc","paramsSubcasesOnly","begin","end","fn","t","params","occlusionQuerySet","encoder","createEncoder","i","beginOcclusionQuery","j","endOcclusionQuery","validateFinishAndSubmit","calls","_valid","u","combine","querySet","device","createCommandEncoder","pass","isOnSameRenderPass","otherPass","expectValidationError","finish","nest","unimplemented"],"mappings":"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","sourcesContent":["export const description = `\nValidation for encoding begin/endable queries.\n\nTODO: pipeline statistics queries are removed from core; consider moving tests to another suite.\nTODO: tests for pipeline statistics queries:\n- balance: {\n    - begin 0, end 1\n    - begin 1, end 0\n    - begin 1, end 1\n    - begin 2, end 2\n    - }\n    - x= {\n        - render pass + pipeline statistics\n        - compute pass + pipeline statistics\n        - }\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nimport { beginRenderPassWithQuerySet, createQuerySetWithType } from './common.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('occlusion_query,begin_end_balance')\n  .desc(\n    `\nTests that begin/end occlusion queries mismatch on render pass:\n- begin n queries, then end m queries, for various n and m.\n  `\n  )\n  .paramsSubcasesOnly([\n    { begin: 0, end: 1 },\n    { begin: 1, end: 0 },\n    { begin: 1, end: 1 }, // control case\n    { begin: 1, end: 2 },\n    { begin: 2, end: 1 },\n  ] as const)\n  .fn(async t => {\n    const { begin, end } = t.params;\n\n    const occlusionQuerySet = createQuerySetWithType(t, 'occlusion', 2);\n\n    const encoder = t.createEncoder('render pass', { occlusionQuerySet });\n    for (let i = 0; i < begin; i++) {\n      encoder.encoder.beginOcclusionQuery(i);\n    }\n    for (let j = 0; j < end; j++) {\n      encoder.encoder.endOcclusionQuery();\n    }\n    encoder.validateFinishAndSubmit(begin === end, true);\n  });\n\ng.test('occlusion_query,begin_end_invalid_nesting')\n  .desc(\n    `\nTests the invalid nesting of begin/end occlusion queries:\n- begin index 0, end, begin index 0, end (control case)\n- begin index 0, begin index 0, end, end\n- begin index 0, begin index 1, end, end\n  `\n  )\n  .paramsSubcasesOnly([\n    { calls: [0, 'end', 1, 'end'], _valid: true }, // control case\n    { calls: [0, 0, 'end', 'end'], _valid: false },\n    { calls: [0, 1, 'end', 'end'], _valid: false },\n  ] as const)\n  .fn(async t => {\n    const { calls, _valid } = t.params;\n\n    const occlusionQuerySet = createQuerySetWithType(t, 'occlusion', 2);\n\n    const encoder = t.createEncoder('render pass', { occlusionQuerySet });\n    for (const i of calls) {\n      if (i !== 'end') {\n        encoder.encoder.beginOcclusionQuery(i);\n      } else {\n        encoder.encoder.endOcclusionQuery();\n      }\n    }\n    encoder.validateFinishAndSubmit(_valid, true);\n  });\n\ng.test('occlusion_query,disjoint_queries_with_same_query_index')\n  .desc(\n    `\nTests that two disjoint occlusion queries cannot be begun with same query index on same render pass:\n- begin index 0, end, begin index 0, end\n- call on {same (invalid), different (control case)} render pass\n  `\n  )\n  .paramsSubcasesOnly(u => u.combine('isOnSameRenderPass', [false, true]))\n  .fn(async t => {\n    const querySet = createQuerySetWithType(t, 'occlusion', 1);\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = beginRenderPassWithQuerySet(t, encoder, querySet);\n    pass.beginOcclusionQuery(0);\n    pass.endOcclusionQuery();\n\n    if (t.params.isOnSameRenderPass) {\n      pass.beginOcclusionQuery(0);\n      pass.endOcclusionQuery();\n      pass.end();\n    } else {\n      pass.end();\n      const otherPass = beginRenderPassWithQuerySet(t, encoder, querySet);\n      otherPass.beginOcclusionQuery(0);\n      otherPass.endOcclusionQuery();\n      otherPass.end();\n    }\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, t.params.isOnSameRenderPass);\n  });\n\ng.test('nesting')\n  .desc(\n    `\nTests that whether it's allowed to nest various types of queries:\n- call {occlusion, pipeline-statistics, timestamp} query in same type or other type.\n  `\n  )\n  .paramsSubcasesOnly([\n    { begin: 'occlusion', nest: 'timestamp', end: 'occlusion', _valid: true },\n    { begin: 'occlusion', nest: 'occlusion', end: 'occlusion', _valid: false },\n    { begin: 'occlusion', nest: 'pipeline-statistics', end: 'occlusion', _valid: true },\n    {\n      begin: 'occlusion',\n      nest: 'pipeline-statistics',\n      end: 'pipeline-statistics',\n      _valid: true,\n    },\n    {\n      begin: 'pipeline-statistics',\n      nest: 'timestamp',\n      end: 'pipeline-statistics',\n      _valid: true,\n    },\n    {\n      begin: 'pipeline-statistics',\n      nest: 'pipeline-statistics',\n      end: 'pipeline-statistics',\n      _valid: false,\n    },\n    {\n      begin: 'pipeline-statistics',\n      nest: 'occlusion',\n      end: 'pipeline-statistics',\n      _valid: true,\n    },\n    { begin: 'pipeline-statistics', nest: 'occlusion', end: 'occlusion', _valid: true },\n    { begin: 'timestamp', nest: 'occlusion', end: 'occlusion', _valid: true },\n    {\n      begin: 'timestamp',\n      nest: 'pipeline-statistics',\n      end: 'pipeline-statistics',\n      _valid: true,\n    },\n  ] as const)\n  .unimplemented();\n"],"file":"begin_end.spec.js"}