{"version":3,"sources":["../../../../../../src/webgpu/api/validation/encoding/queries/resolveQuerySet.spec.ts"],"names":["description","makeTestGroup","GPUConst","ValidationTest","g","kQueryCount","test","desc","paramsSubcasesOnly","querySetState","destinationState","fn","t","params","querySet","createQuerySetWithState","destination","createBufferWithState","size","usage","GPUBufferUsage","QUERY_RESOLVE","encoder","createEncoder","resolveQuerySet","validateFinish","firstQuery","queryCount","device","createQuerySet","type","count","createBuffer","u","combine","BufferUsage","STORAGE","bufferUsage","destinationOffset","combineWithParams","bufferSize","_success","querySetMismatched","bufferMismatched","unimplemented"],"mappings":"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","sourcesContent":["export const description = `\nValidation tests for resolveQuerySet.\n`;\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { GPUConst } from '../../../../constants.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\nexport const kQueryCount = 2;\n\ng.test('invalid_queryset_and_destination_buffer')\n  .desc(\n    `\nTests that resolve query set with invalid object.\n- invalid GPUQuerySet that failed during creation.\n- invalid destination buffer that failed during creation.\n  `\n  )\n  .paramsSubcasesOnly([\n    { querySetState: 'valid', destinationState: 'valid' }, // control case\n    { querySetState: 'invalid', destinationState: 'valid' },\n    { querySetState: 'valid', destinationState: 'invalid' },\n  ] as const)\n  .fn(async t => {\n    const { querySetState, destinationState } = t.params;\n\n    const querySet = t.createQuerySetWithState(querySetState);\n\n    const destination = t.createBufferWithState(destinationState, {\n      size: kQueryCount * 8,\n      usage: GPUBufferUsage.QUERY_RESOLVE,\n    });\n\n    const encoder = t.createEncoder('non-pass');\n    encoder.encoder.resolveQuerySet(querySet, 0, 1, destination, 0);\n    encoder.validateFinish(querySetState === 'valid' && destinationState === 'valid');\n  });\n\ng.test('first_query_and_query_count')\n  .desc(\n    `\nTests that resolve query set with invalid firstQuery and queryCount:\n- firstQuery and/or queryCount out of range\n  `\n  )\n  .paramsSubcasesOnly([\n    { firstQuery: 0, queryCount: kQueryCount }, // control case\n    { firstQuery: 0, queryCount: kQueryCount + 1 },\n    { firstQuery: 1, queryCount: kQueryCount },\n    { firstQuery: kQueryCount, queryCount: 1 },\n  ])\n  .fn(async t => {\n    const { firstQuery, queryCount } = t.params;\n\n    const querySet = t.device.createQuerySet({ type: 'occlusion', count: kQueryCount });\n    const destination = t.device.createBuffer({\n      size: kQueryCount * 8,\n      usage: GPUBufferUsage.QUERY_RESOLVE,\n    });\n\n    const encoder = t.createEncoder('non-pass');\n    encoder.encoder.resolveQuerySet(querySet, firstQuery, queryCount, destination, 0);\n    encoder.validateFinish(firstQuery + queryCount <= kQueryCount);\n  });\n\ng.test('destination_buffer_usage')\n  .desc(\n    `\nTests that resolve query set with invalid destinationBuffer:\n- Buffer usage {with, without} QUERY_RESOLVE\n  `\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('bufferUsage', [\n        GPUConst.BufferUsage.STORAGE,\n        GPUConst.BufferUsage.QUERY_RESOLVE, // control case\n      ] as const)\n  )\n  .fn(async t => {\n    const querySet = t.device.createQuerySet({ type: 'occlusion', count: kQueryCount });\n    const destination = t.device.createBuffer({\n      size: kQueryCount * 8,\n      usage: t.params.bufferUsage,\n    });\n\n    const encoder = t.createEncoder('non-pass');\n    encoder.encoder.resolveQuerySet(querySet, 0, kQueryCount, destination, 0);\n    encoder.validateFinish(t.params.bufferUsage === GPUConst.BufferUsage.QUERY_RESOLVE);\n  });\n\ng.test('destination_offset_alignment')\n  .desc(\n    `\nTests that resolve query set with invalid destinationOffset:\n- destinationOffset is not a multiple of 256\n  `\n  )\n  .paramsSubcasesOnly(u => u.combine('destinationOffset', [0, 128, 256, 384]))\n  .fn(async t => {\n    const { destinationOffset } = t.params;\n    const querySet = t.device.createQuerySet({ type: 'occlusion', count: kQueryCount });\n    const destination = t.device.createBuffer({\n      size: 512,\n      usage: GPUBufferUsage.QUERY_RESOLVE,\n    });\n\n    const encoder = t.createEncoder('non-pass');\n    encoder.encoder.resolveQuerySet(querySet, 0, kQueryCount, destination, destinationOffset);\n    encoder.validateFinish(destinationOffset % 256 === 0);\n  });\n\ng.test('resolve_buffer_oob')\n  .desc(\n    `\nTests that resolve query set with the size oob:\n- The size of destinationBuffer - destinationOffset < queryCount * 8\n  `\n  )\n  .paramsSubcasesOnly(u =>\n    u.combineWithParams([\n      { queryCount: 2, bufferSize: 16, destinationOffset: 0, _success: true },\n      { queryCount: 3, bufferSize: 16, destinationOffset: 0, _success: false },\n      { queryCount: 2, bufferSize: 16, destinationOffset: 256, _success: false },\n      { queryCount: 2, bufferSize: 272, destinationOffset: 256, _success: true },\n      { queryCount: 2, bufferSize: 264, destinationOffset: 256, _success: false },\n    ])\n  )\n  .fn(async t => {\n    const { queryCount, bufferSize, destinationOffset, _success } = t.params;\n    const querySet = t.device.createQuerySet({ type: 'occlusion', count: queryCount });\n    const destination = t.device.createBuffer({\n      size: bufferSize,\n      usage: GPUBufferUsage.QUERY_RESOLVE,\n    });\n\n    const encoder = t.createEncoder('non-pass');\n    encoder.encoder.resolveQuerySet(querySet, 0, queryCount, destination, destinationOffset);\n    encoder.validateFinish(_success);\n  });\n\ng.test('query_set_buffer,device_mismatch')\n  .desc(\n    'Tests resolveQuerySet cannot be called with a query set or destination buffer created from another device'\n  )\n  .paramsSubcasesOnly([\n    { querySetMismatched: false, bufferMismatched: false }, // control case\n    { querySetMismatched: true, bufferMismatched: false },\n    { querySetMismatched: false, bufferMismatched: true },\n  ] as const)\n  .unimplemented();\n"],"file":"resolveQuerySet.spec.js"}