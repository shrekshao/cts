{"version":3,"sources":["../../../../../../src/webgpu/api/validation/encoding/queries/resolveQuerySet.spec.ts"],"names":["description","makeTestGroup","GPUConst","kResourceStates","ValidationTest","g","kQueryCount","test","desc","params","u","combine","fn","t","querySetState","destinationState","shouldBeValid","shouldSubmitSuccess","querySet","createQuerySetWithState","destination","createBufferWithState","size","usage","GPUBufferUsage","QUERY_RESOLVE","encoder","createEncoder","resolveQuerySet","validateFinishAndSubmit","paramsSubcasesOnly","firstQuery","queryCount","device","createQuerySet","type","count","createBuffer","validateFinish","BufferUsage","STORAGE","bufferUsage","destinationOffset","combineWithParams","bufferSize","_success","querySetMismatched","bufferMismatched","beforeAllSubcases","selectMismatchedDeviceOrSkipTestCase","undefined","mismatched","mismatchedDevice","queryCout","trackForCleanup","buffer"],"mappings":"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","sourcesContent":["export const description = `\nValidation tests for resolveQuerySet.\n`;\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { GPUConst } from '../../../../constants.js';\nimport { kResourceStates } from '../../../../gpu_test.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\nexport const kQueryCount = 2;\n\ng.test('queryset_and_destination_buffer_state')\n  .desc(\n    `\nTests that resolve query set must be with valid query set and destination buffer.\n- {invalid, destroyed} GPUQuerySet results in validation error.\n- {invalid, destroyed} destination buffer results in validation error.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('querySetState', kResourceStates)\n      .combine('destinationState', kResourceStates)\n  )\n  .fn(async t => {\n    const { querySetState, destinationState } = t.params;\n\n    const shouldBeValid = querySetState !== 'invalid' && destinationState !== 'invalid';\n    const shouldSubmitSuccess = querySetState === 'valid' && destinationState === 'valid';\n\n    const querySet = t.createQuerySetWithState(querySetState);\n\n    const destination = t.createBufferWithState(destinationState, {\n      size: kQueryCount * 8,\n      usage: GPUBufferUsage.QUERY_RESOLVE,\n    });\n\n    const encoder = t.createEncoder('non-pass');\n    encoder.encoder.resolveQuerySet(querySet, 0, 1, destination, 0);\n    encoder.validateFinishAndSubmit(shouldBeValid, shouldSubmitSuccess);\n  });\n\ng.test('first_query_and_query_count')\n  .desc(\n    `\nTests that resolve query set with invalid firstQuery and queryCount:\n- firstQuery and/or queryCount out of range\n  `\n  )\n  .paramsSubcasesOnly([\n    { firstQuery: 0, queryCount: kQueryCount }, // control case\n    { firstQuery: 0, queryCount: kQueryCount + 1 },\n    { firstQuery: 1, queryCount: kQueryCount },\n    { firstQuery: kQueryCount, queryCount: 1 },\n  ])\n  .fn(async t => {\n    const { firstQuery, queryCount } = t.params;\n\n    const querySet = t.device.createQuerySet({ type: 'occlusion', count: kQueryCount });\n    const destination = t.device.createBuffer({\n      size: kQueryCount * 8,\n      usage: GPUBufferUsage.QUERY_RESOLVE,\n    });\n\n    const encoder = t.createEncoder('non-pass');\n    encoder.encoder.resolveQuerySet(querySet, firstQuery, queryCount, destination, 0);\n    encoder.validateFinish(firstQuery + queryCount <= kQueryCount);\n  });\n\ng.test('destination_buffer_usage')\n  .desc(\n    `\nTests that resolve query set with invalid destinationBuffer:\n- Buffer usage {with, without} QUERY_RESOLVE\n  `\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('bufferUsage', [\n        GPUConst.BufferUsage.STORAGE,\n        GPUConst.BufferUsage.QUERY_RESOLVE, // control case\n      ] as const)\n  )\n  .fn(async t => {\n    const querySet = t.device.createQuerySet({ type: 'occlusion', count: kQueryCount });\n    const destination = t.device.createBuffer({\n      size: kQueryCount * 8,\n      usage: t.params.bufferUsage,\n    });\n\n    const encoder = t.createEncoder('non-pass');\n    encoder.encoder.resolveQuerySet(querySet, 0, kQueryCount, destination, 0);\n    encoder.validateFinish(t.params.bufferUsage === GPUConst.BufferUsage.QUERY_RESOLVE);\n  });\n\ng.test('destination_offset_alignment')\n  .desc(\n    `\nTests that resolve query set with invalid destinationOffset:\n- destinationOffset is not a multiple of 256\n  `\n  )\n  .paramsSubcasesOnly(u => u.combine('destinationOffset', [0, 128, 256, 384]))\n  .fn(async t => {\n    const { destinationOffset } = t.params;\n    const querySet = t.device.createQuerySet({ type: 'occlusion', count: kQueryCount });\n    const destination = t.device.createBuffer({\n      size: 512,\n      usage: GPUBufferUsage.QUERY_RESOLVE,\n    });\n\n    const encoder = t.createEncoder('non-pass');\n    encoder.encoder.resolveQuerySet(querySet, 0, kQueryCount, destination, destinationOffset);\n    encoder.validateFinish(destinationOffset % 256 === 0);\n  });\n\ng.test('resolve_buffer_oob')\n  .desc(\n    `\nTests that resolve query set with the size oob:\n- The size of destinationBuffer - destinationOffset < queryCount * 8\n  `\n  )\n  .paramsSubcasesOnly(u =>\n    u.combineWithParams([\n      { queryCount: 2, bufferSize: 16, destinationOffset: 0, _success: true },\n      { queryCount: 3, bufferSize: 16, destinationOffset: 0, _success: false },\n      { queryCount: 2, bufferSize: 16, destinationOffset: 256, _success: false },\n      { queryCount: 2, bufferSize: 272, destinationOffset: 256, _success: true },\n      { queryCount: 2, bufferSize: 264, destinationOffset: 256, _success: false },\n    ])\n  )\n  .fn(async t => {\n    const { queryCount, bufferSize, destinationOffset, _success } = t.params;\n    const querySet = t.device.createQuerySet({ type: 'occlusion', count: queryCount });\n    const destination = t.device.createBuffer({\n      size: bufferSize,\n      usage: GPUBufferUsage.QUERY_RESOLVE,\n    });\n\n    const encoder = t.createEncoder('non-pass');\n    encoder.encoder.resolveQuerySet(querySet, 0, queryCount, destination, destinationOffset);\n    encoder.validateFinish(_success);\n  });\n\ng.test('query_set_buffer,device_mismatch')\n  .desc(\n    'Tests resolveQuerySet cannot be called with a query set or destination buffer created from another device'\n  )\n  .paramsSubcasesOnly([\n    { querySetMismatched: false, bufferMismatched: false }, // control case\n    { querySetMismatched: true, bufferMismatched: false },\n    { querySetMismatched: false, bufferMismatched: true },\n  ] as const)\n  .beforeAllSubcases(t => {\n    t.selectMismatchedDeviceOrSkipTestCase(undefined);\n  })\n  .fn(async t => {\n    const { querySetMismatched, bufferMismatched } = t.params;\n    const mismatched = querySetMismatched || bufferMismatched;\n\n    const device = mismatched ? t.mismatchedDevice : t.device;\n    const queryCout = 1;\n\n    const querySet = device.createQuerySet({\n      type: 'occlusion',\n      count: queryCout,\n    });\n    t.trackForCleanup(querySet);\n\n    const buffer = device.createBuffer({\n      size: queryCout * 8,\n      usage: GPUBufferUsage.QUERY_RESOLVE,\n    });\n    t.trackForCleanup(buffer);\n\n    const encoder = t.createEncoder('non-pass');\n    encoder.encoder.resolveQuerySet(querySet, 0, queryCout, buffer, 0);\n    encoder.validateFinish(!mismatched);\n  });\n"],"file":"resolveQuerySet.spec.js"}