{"version":3,"sources":["../../../../../../src/webgpu/api/validation/encoding/queries/resolveQuerySet.spec.ts"],"names":["description","makeTestGroup","GPUConst","ValidationTest","g","kQueryCount","test","desc","paramsSubcasesOnly","querySetState","destinationState","fn","t","params","querySet","createQuerySetWithState","destination","createBufferWithState","size","usage","GPUBufferUsage","QUERY_RESOLVE","encoder","device","createCommandEncoder","resolveQuerySet","expectValidationError","finish","firstQuery","queryCount","createQuerySet","type","count","createBuffer","u","combine","BufferUsage","STORAGE","bufferUsage","destinationOffset"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAFO,CAGP,SAASC,aAAT,QAA8B,+CAA9B,CACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,cAAT,QAA+B,0BAA/B;;AAEA,OAAO,MAAMC,CAAC,GAAGH,aAAa,CAACE,cAAD,CAAvB;;AAEP,OAAO,MAAME,WAAW,GAAG,CAApB;;AAEPD,CAAC,CAACE,IAAF,CAAO,yDAAP;AACGC,IADH;AAEK;AACL;AACA;AACA;AACA,GANA;;AAQGC,kBARH,CAQsB;AAClB,EAAEC,aAAa,EAAE,OAAjB,EAA0BC,gBAAgB,EAAE,OAA5C,EADkB,EACqC;AACvD,EAAED,aAAa,EAAE,SAAjB,EAA4BC,gBAAgB,EAAE,OAA9C,EAFkB;AAGlB,EAAED,aAAa,EAAE,OAAjB,EAA0BC,gBAAgB,EAAE,SAA5C,EAHkB,CARtB;;AAaGC,EAbH,CAaM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEH,aAAF,EAAiBC,gBAAjB,KAAsCE,CAAC,CAACC,MAA9C;;AAEA,QAAMC,QAAQ,GAAGF,CAAC,CAACG,uBAAF,CAA0BN,aAA1B,CAAjB;;AAEA,QAAMO,WAAW,GAAGJ,CAAC,CAACK,qBAAF,CAAwBP,gBAAxB,EAA0C;AAC5DQ,IAAAA,IAAI,EAAEb,WAAW,GAAG,CADwC;AAE5Dc,IAAAA,KAAK,EAAEC,cAAc,CAACC,aAFsC,EAA1C,CAApB;;;AAKA,QAAMC,OAAO,GAAGV,CAAC,CAACW,MAAF,CAASC,oBAAT,EAAhB;AACAF,EAAAA,OAAO,CAACG,eAAR,CAAwBX,QAAxB,EAAkC,CAAlC,EAAqC,CAArC,EAAwCE,WAAxC,EAAqD,CAArD;;AAEAJ,EAAAA,CAAC,CAACc,qBAAF,CAAwB,MAAM;AAC5BJ,IAAAA,OAAO,CAACK,MAAR;AACD,GAFD,EAEGlB,aAAa,KAAK,SAAlB,IAA+BC,gBAAgB,KAAK,SAFvD;AAGD,CA7BH;;AA+BAN,CAAC,CAACE,IAAF,CAAO,6CAAP;AACGC,IADH;AAEK;AACL;AACA;AACA,GALA;;AAOGC,kBAPH,CAOsB;AAClB,EAAEoB,UAAU,EAAE,CAAd,EAAiBC,UAAU,EAAExB,WAA7B,EADkB,EAC0B;AAC5C,EAAEuB,UAAU,EAAE,CAAd,EAAiBC,UAAU,EAAExB,WAAW,GAAG,CAA3C,EAFkB;AAGlB,EAAEuB,UAAU,EAAE,CAAd,EAAiBC,UAAU,EAAExB,WAA7B,EAHkB;AAIlB,EAAEuB,UAAU,EAAEvB,WAAd,EAA2BwB,UAAU,EAAE,CAAvC,EAJkB,CAPtB;;AAaGlB,EAbH,CAaM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEgB,UAAF,EAAcC,UAAd,KAA6BjB,CAAC,CAACC,MAArC;;AAEA,QAAMC,QAAQ,GAAGF,CAAC,CAACW,MAAF,CAASO,cAAT,CAAwB,EAAEC,IAAI,EAAE,WAAR,EAAqBC,KAAK,EAAE3B,WAA5B,EAAxB,CAAjB;AACA,QAAMW,WAAW,GAAGJ,CAAC,CAACW,MAAF,CAASU,YAAT,CAAsB;AACxCf,IAAAA,IAAI,EAAEb,WAAW,GAAG,CADoB;AAExCc,IAAAA,KAAK,EAAEC,cAAc,CAACC,aAFkB,EAAtB,CAApB;;;AAKA,QAAMC,OAAO,GAAGV,CAAC,CAACW,MAAF,CAASC,oBAAT,EAAhB;AACAF,EAAAA,OAAO,CAACG,eAAR,CAAwBX,QAAxB,EAAkCc,UAAlC,EAA8CC,UAA9C,EAA0Db,WAA1D,EAAuE,CAAvE;;AAEAJ,EAAAA,CAAC,CAACc,qBAAF,CAAwB,MAAM;AAC5BJ,IAAAA,OAAO,CAACK,MAAR;AACD,GAFD,EAEGC,UAAU,GAAGC,UAAb,GAA0BxB,WAF7B;AAGD,CA5BH;;AA8BAD,CAAC,CAACE,IAAF,CAAO,0CAAP;AACGC,IADH;AAEK;AACL;AACA;AACA,GALA;;AAOGC,kBAPH,CAOsB,CAAA0B,CAAC;AACnBA,CAAC,CAAC;AAAD,CACEC,OADH,CACW,aADX,EAC0B;AACtBjC,QAAQ,CAACkC,WAAT,CAAqBC,OADC;AAEtBnC,QAAQ,CAACkC,WAAT,CAAqBf,aAFC,CAEc;AAFd,CAD1B,CARJ;;AAcGV,EAdH,CAcM,MAAMC,CAAN,IAAW;AACb,QAAME,QAAQ,GAAGF,CAAC,CAACW,MAAF,CAASO,cAAT,CAAwB,EAAEC,IAAI,EAAE,WAAR,EAAqBC,KAAK,EAAE3B,WAA5B,EAAxB,CAAjB;AACA,QAAMW,WAAW,GAAGJ,CAAC,CAACW,MAAF,CAASU,YAAT,CAAsB;AACxCf,IAAAA,IAAI,EAAEb,WAAW,GAAG,CADoB;AAExCc,IAAAA,KAAK,EAAEP,CAAC,CAACC,MAAF,CAASyB,WAFwB,EAAtB,CAApB;;;AAKA,QAAMhB,OAAO,GAAGV,CAAC,CAACW,MAAF,CAASC,oBAAT,EAAhB;AACAF,EAAAA,OAAO,CAACG,eAAR,CAAwBX,QAAxB,EAAkC,CAAlC,EAAqCT,WAArC,EAAkDW,WAAlD,EAA+D,CAA/D;;AAEAJ,EAAAA,CAAC,CAACc,qBAAF,CAAwB,MAAM;AAC5BJ,IAAAA,OAAO,CAACK,MAAR;AACD,GAFD,EAEGf,CAAC,CAACC,MAAF,CAASyB,WAAT,KAAyBpC,QAAQ,CAACkC,WAAT,CAAqBf,aAFjD;AAGD,CA3BH;;AA6BAjB,CAAC,CAACE,IAAF,CAAO,oCAAP;AACGC,IADH;AAEK;AACL;AACA;AACA;AACA;AACA,GAPA;;AASGC,kBATH,CASsB0B,CAAC,IAAIA,CAAC,CAACC,OAAF,CAAU,mBAAV,EAA+B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,EAAV,CAA/B,CAT3B;AAUGxB,EAVH,CAUM,MAAMC,CAAN,IAAW;AACb,QAAME,QAAQ,GAAGF,CAAC,CAACW,MAAF,CAASO,cAAT,CAAwB,EAAEC,IAAI,EAAE,WAAR,EAAqBC,KAAK,EAAE3B,WAA5B,EAAxB,CAAjB;AACA,QAAMW,WAAW,GAAGJ,CAAC,CAACW,MAAF,CAASU,YAAT,CAAsB;AACxCf,IAAAA,IAAI,EAAEb,WAAW,GAAG,CADoB;AAExCc,IAAAA,KAAK,EAAEC,cAAc,CAACC,aAFkB,EAAtB,CAApB;;;AAKA,QAAMC,OAAO,GAAGV,CAAC,CAACW,MAAF,CAASC,oBAAT,EAAhB;AACAF,EAAAA,OAAO,CAACG,eAAR,CAAwBX,QAAxB,EAAkC,CAAlC,EAAqCT,WAArC,EAAkDW,WAAlD,EAA+DJ,CAAC,CAACC,MAAF,CAAS0B,iBAAxE;;AAEA3B,EAAAA,CAAC,CAACc,qBAAF,CAAwB,MAAM;AAC5BJ,IAAAA,OAAO,CAACK,MAAR;AACD,GAFD,EAEGf,CAAC,CAACC,MAAF,CAAS0B,iBAAT,GAA6B,CAFhC;AAGD,CAvBH","sourcesContent":["export const description = `\nValidation tests for resolveQuerySet.\n`;\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { GPUConst } from '../../../../constants.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\nexport const kQueryCount = 2;\n\ng.test('resolveQuerySet,invalid_queryset_and_destination_buffer')\n  .desc(\n    `\nTests that resolve query set with invalid object.\n- invalid GPUQuerySet that failed during creation.\n- invalid destination buffer that failed during creation.\n  `\n  )\n  .paramsSubcasesOnly([\n    { querySetState: 'valid', destinationState: 'valid' }, // control case\n    { querySetState: 'invalid', destinationState: 'valid' },\n    { querySetState: 'valid', destinationState: 'invalid' },\n  ] as const)\n  .fn(async t => {\n    const { querySetState, destinationState } = t.params;\n\n    const querySet = t.createQuerySetWithState(querySetState);\n\n    const destination = t.createBufferWithState(destinationState, {\n      size: kQueryCount * 8,\n      usage: GPUBufferUsage.QUERY_RESOLVE,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    encoder.resolveQuerySet(querySet, 0, 1, destination, 0);\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, querySetState === 'invalid' || destinationState === 'invalid');\n  });\n\ng.test('resolveQuerySet,first_query_and_query_count')\n  .desc(\n    `\nTests that resolve query set with invalid firstQuery and queryCount:\n- firstQuery and/or queryCount out of range\n  `\n  )\n  .paramsSubcasesOnly([\n    { firstQuery: 0, queryCount: kQueryCount }, // control case\n    { firstQuery: 0, queryCount: kQueryCount + 1 },\n    { firstQuery: 1, queryCount: kQueryCount },\n    { firstQuery: kQueryCount, queryCount: 1 },\n  ])\n  .fn(async t => {\n    const { firstQuery, queryCount } = t.params;\n\n    const querySet = t.device.createQuerySet({ type: 'occlusion', count: kQueryCount });\n    const destination = t.device.createBuffer({\n      size: kQueryCount * 8,\n      usage: GPUBufferUsage.QUERY_RESOLVE,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    encoder.resolveQuerySet(querySet, firstQuery, queryCount, destination, 0);\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, firstQuery + queryCount > kQueryCount);\n  });\n\ng.test('resolveQuerySet,destination_buffer_usage')\n  .desc(\n    `\nTests that resolve query set with invalid destinationBuffer:\n- Buffer usage {with, without} QUERY_RESOLVE\n  `\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('bufferUsage', [\n        GPUConst.BufferUsage.STORAGE,\n        GPUConst.BufferUsage.QUERY_RESOLVE, // control case\n      ] as const)\n  )\n  .fn(async t => {\n    const querySet = t.device.createQuerySet({ type: 'occlusion', count: kQueryCount });\n    const destination = t.device.createBuffer({\n      size: kQueryCount * 8,\n      usage: t.params.bufferUsage,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    encoder.resolveQuerySet(querySet, 0, kQueryCount, destination, 0);\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, t.params.bufferUsage !== GPUConst.BufferUsage.QUERY_RESOLVE);\n  });\n\ng.test('resolveQuerySet,destination_offset')\n  .desc(\n    `\nTests that resolve query set with invalid destinationOffset:\n- destinationOffset is not a multiple of 8\n- The size of destinationBuffer - destinationOffset < queryCount * 8\n- destinationOffset out of range\n  `\n  )\n  .paramsSubcasesOnly(u => u.combine('destinationOffset', [0, 6, 8, 16]))\n  .fn(async t => {\n    const querySet = t.device.createQuerySet({ type: 'occlusion', count: kQueryCount });\n    const destination = t.device.createBuffer({\n      size: kQueryCount * 8,\n      usage: GPUBufferUsage.QUERY_RESOLVE,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    encoder.resolveQuerySet(querySet, 0, kQueryCount, destination, t.params.destinationOffset);\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, t.params.destinationOffset > 0);\n  });\n"],"file":"resolveQuerySet.spec.js"}