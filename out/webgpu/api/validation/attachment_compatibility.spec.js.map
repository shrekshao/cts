{"version":3,"sources":["../../../../src/webgpu/api/validation/attachment_compatibility.spec.ts"],"names":["description","makeTestGroup","range","kRegularTextureFormats","kSizedDepthStencilFormats","kUnsizedDepthStencilFormats","kTextureSampleCounts","kMaxColorAttachments","kTextureFormatInfo","getFeaturesForFormats","filterFormatsByFeature","ValidationTest","kColorAttachmentCounts","i","kColorAttachments","map","count","result","Array","fill","concat","r","cases","j","push","flat","kDepthStencilAttachmentFormats","undefined","kFeaturesForDepthStencilAttachmentFormats","F","createAttachmentTextureView","format","sampleCount","device","createTexture","size","usage","GPUTextureUsage","RENDER_ATTACHMENT","createView","createColorAttachment","view","clearValue","loadOp","storeOp","createDepthAttachment","attachment","depth","depthClearValue","depthLoadOp","depthStoreOp","stencil","stencilClearValue","stencilLoadOp","stencilStoreOp","createRenderPipeline","targets","depthStencil","cullMode","vertex","module","createShaderModule","code","entryPoint","fragment","primitive","topology","multisample","g","kColorAttachmentFormats","filter","info","color","renderable","test","desc","paramsSubcasesOnly","u","combine","fn","t","passFormat","bundleFormat","params","bundleEncoder","createRenderBundleEncoder","colorFormats","bundle","finish","encoder","validateFinishAndSubmit","createEncoder","pass","beginRenderPass","colorAttachments","executeBundles","end","passCount","bundleCount","beginSubcases","p","attachmentCount","passAttachments","length","bundleAttachments","every","v","expand","passFeature","bundleFeature","beforeAllSubcases","selectDeviceOrSkipTestCase","depthStencilFormat","depthStencilAttachment","renderSampleCount","bundleSampleCount","encoderType","encoderFormat","pipelineFormat","pipeline","writeMask","attachmentInfo","setPipeline","encoderCount","pipelineCount","encoderAttachments","pipelineAttachments","colorTargets","encoderFormatFeature","pipelineFormatFeature","kStencilFaceStates","failOp","depthFailOp","passOp","depthStencilInfo","depthReadOnly","stencilReadOnly","depthWriteEnabled","stencilFront","stencilBack","selectDeviceForTextureFormatOrSkipTestCase","stencilWriteMask","writesDepth","writesStencil","isValid","attachmentType","encoderSampleCount","pipelineSampleCount"],"mappings":"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","sourcesContent":["export const description = `\nValidation for attachment compatibility between render passes, bundles, and pipelines\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { range } from '../../../common/util/util.js';\nimport {\n  kRegularTextureFormats,\n  kSizedDepthStencilFormats,\n  kUnsizedDepthStencilFormats,\n  kTextureSampleCounts,\n  kMaxColorAttachments,\n  kTextureFormatInfo,\n  getFeaturesForFormats,\n  filterFormatsByFeature,\n} from '../../capability_info.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nconst kColorAttachmentCounts = range(kMaxColorAttachments, i => i + 1);\nconst kColorAttachments = kColorAttachmentCounts\n  .map(count => {\n    // generate cases with 0..1 null attachments at different location\n    // e.g. count == 2\n    // [\n    //    [1, 1],\n    //    [0, 1],\n    //    [1, 0],\n    // ]\n    // 0 (false) means null attachment, 1 (true) means non-null attachment, at the slot\n\n    // Special cases: we need at least a color attachment, when we don't have depth stencil attachment\n    if (count === 1) {\n      return [[1]];\n    }\n    if (count === 2) {\n      return [\n        [1, 1],\n        [0, 1],\n        [1, 0],\n      ];\n    }\n\n    // [1, 1, ..., 1]: all color attachment are used\n    let result = [new Array<boolean>(count).fill(true)];\n\n    // [1, 0, 1, ..., 1]: generate cases with one null attachment at different locations\n    result = result.concat(\n      range(count, i => {\n        const r = new Array<boolean>(count).fill(true);\n        r[i] = false;\n        return r;\n      })\n    );\n\n    // [1, 0, 1, ..., 0, 1]: generate cases with two null attachments at different locations\n    // To reduce test run time, limit the attachment count to <= 4\n    if (count <= 4) {\n      result = result.concat(\n        range(count - 1, i => {\n          const cases = [] as boolean[][];\n          for (let j = i + 1; j < count; j++) {\n            const r = new Array<boolean>(count).fill(true);\n            r[i] = false;\n            r[j] = false;\n            cases.push(r);\n          }\n          return cases;\n        }).flat()\n      );\n    }\n\n    return result;\n  })\n  .flat() as boolean[][];\n\nconst kDepthStencilAttachmentFormats = [\n  undefined,\n  ...kSizedDepthStencilFormats,\n  ...kUnsizedDepthStencilFormats,\n] as const;\n\nconst kFeaturesForDepthStencilAttachmentFormats = getFeaturesForFormats([\n  ...kSizedDepthStencilFormats,\n  ...kUnsizedDepthStencilFormats,\n]);\n\nclass F extends ValidationTest {\n  createAttachmentTextureView(format: GPUTextureFormat, sampleCount?: number) {\n    return this.device\n      .createTexture({\n        // Size matching the \"arbitrary\" size used by ValidationTest helpers.\n        size: [16, 16, 1],\n        format,\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n        sampleCount,\n      })\n      .createView();\n  }\n\n  createColorAttachment(\n    format: GPUTextureFormat | null,\n    sampleCount?: number\n  ): GPURenderPassColorAttachment | null {\n    return format === null\n      ? null\n      : {\n          view: this.createAttachmentTextureView(format, sampleCount),\n          clearValue: [0, 0, 0, 0],\n          loadOp: 'clear',\n          storeOp: 'store',\n        };\n  }\n\n  createDepthAttachment(\n    format: GPUTextureFormat,\n    sampleCount?: number\n  ): GPURenderPassDepthStencilAttachment {\n    const attachment: GPURenderPassDepthStencilAttachment = {\n      view: this.createAttachmentTextureView(format, sampleCount),\n    };\n    if (kTextureFormatInfo[format].depth) {\n      attachment.depthClearValue = 0;\n      attachment.depthLoadOp = 'clear';\n      attachment.depthStoreOp = 'discard';\n    }\n    if (kTextureFormatInfo[format].stencil) {\n      attachment.stencilClearValue = 1;\n      attachment.stencilLoadOp = 'clear';\n      attachment.stencilStoreOp = 'discard';\n    }\n    return attachment;\n  }\n\n  createRenderPipeline(\n    targets: Iterable<GPUColorTargetState | null>,\n    depthStencil?: GPUDepthStencilState,\n    sampleCount?: number,\n    cullMode?: GPUCullMode\n  ) {\n    return this.device.createRenderPipeline({\n      vertex: {\n        module: this.device.createShaderModule({\n          code: `\n            @stage(vertex) fn main() -> @builtin(position) vec4<f32> {\n              return vec4<f32>(0.0, 0.0, 0.0, 0.0);\n            }`,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: this.device.createShaderModule({\n          code: '@stage(fragment) fn main() {}',\n        }),\n        entryPoint: 'main',\n        targets,\n      },\n      primitive: { topology: 'triangle-list', cullMode },\n      depthStencil,\n      multisample: { count: sampleCount },\n    });\n  }\n}\n\nexport const g = makeTestGroup(F);\n\nconst kColorAttachmentFormats = kRegularTextureFormats.filter(format => {\n  const info = kTextureFormatInfo[format];\n  return info.color && info.renderable;\n});\n\ng.test('render_pass_and_bundle,color_format')\n  .desc('Test that color attachment formats in render passes and bundles must match.')\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('passFormat', kColorAttachmentFormats)\n      .combine('bundleFormat', kColorAttachmentFormats)\n  )\n  .fn(t => {\n    const { passFormat, bundleFormat } = t.params;\n    const bundleEncoder = t.device.createRenderBundleEncoder({\n      colorFormats: [bundleFormat],\n    });\n    const bundle = bundleEncoder.finish();\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder('non-pass');\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [t.createColorAttachment(passFormat)],\n    });\n    pass.executeBundles([bundle]);\n    pass.end();\n    validateFinishAndSubmit(passFormat === bundleFormat, true);\n  });\n\ng.test('render_pass_and_bundle,color_count')\n  .desc(\n    `\n  Test that the number of color attachments in render passes and bundles must match.\n  `\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('passCount', kColorAttachmentCounts)\n      .combine('bundleCount', kColorAttachmentCounts)\n  )\n  .fn(t => {\n    const { passCount, bundleCount } = t.params;\n    const bundleEncoder = t.device.createRenderBundleEncoder({\n      colorFormats: range(bundleCount, () => 'rgba8unorm'),\n    });\n    const bundle = bundleEncoder.finish();\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder('non-pass');\n    const pass = encoder.beginRenderPass({\n      colorAttachments: range(passCount, () => t.createColorAttachment('rgba8unorm')),\n    });\n    pass.executeBundles([bundle]);\n    pass.end();\n    validateFinishAndSubmit(passCount === bundleCount, true);\n  });\n\ng.test('render_pass_and_bundle,color_sparse')\n  .desc(\n    `\n  Test that each of color attachments in render passes and bundles must match.\n  `\n  )\n  .params(u =>\n    u //\n      // introduce attachmentCount to make it easier to split the test\n      .combine('attachmentCount', kColorAttachmentCounts)\n      .beginSubcases()\n      .combine('passAttachments', kColorAttachments)\n      .combine('bundleAttachments', kColorAttachments)\n      .filter(\n        p =>\n          p.attachmentCount === p.passAttachments.length &&\n          p.attachmentCount === p.bundleAttachments.length\n      )\n  )\n  .fn(t => {\n    const { passAttachments, bundleAttachments } = t.params;\n    const colorFormats = bundleAttachments.map(i => (i ? 'rgba8unorm' : null));\n    const bundleEncoder = t.device.createRenderBundleEncoder({\n      colorFormats,\n    });\n    const bundle = bundleEncoder.finish();\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder('non-pass');\n    const colorAttachments = passAttachments.map(i =>\n      t.createColorAttachment(i ? 'rgba8unorm' : null)\n    );\n    const pass = encoder.beginRenderPass({\n      colorAttachments,\n    });\n    pass.executeBundles([bundle]);\n    pass.end();\n    validateFinishAndSubmit(\n      passAttachments.every((v, i) => v === bundleAttachments[i]),\n      true\n    );\n  });\n\ng.test('render_pass_and_bundle,depth_format')\n  .desc('Test that the depth attachment format in render passes and bundles must match.')\n  .params(u =>\n    u //\n      .combine('passFeature', kFeaturesForDepthStencilAttachmentFormats)\n      .combine('bundleFeature', kFeaturesForDepthStencilAttachmentFormats)\n      .beginSubcases()\n      .expand('passFormat', ({ passFeature }) =>\n        filterFormatsByFeature(passFeature, kDepthStencilAttachmentFormats)\n      )\n      .expand('bundleFormat', ({ bundleFeature }) =>\n        filterFormatsByFeature(bundleFeature, kDepthStencilAttachmentFormats)\n      )\n  )\n  .beforeAllSubcases(async t => {\n    const { passFeature, bundleFeature } = t.params;\n    await t.selectDeviceOrSkipTestCase([passFeature, bundleFeature]);\n  })\n  .fn(async t => {\n    const { passFormat, bundleFormat } = t.params;\n\n    const bundleEncoder = t.device.createRenderBundleEncoder({\n      colorFormats: ['rgba8unorm'],\n      depthStencilFormat: bundleFormat,\n    });\n    const bundle = bundleEncoder.finish();\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder('non-pass');\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [t.createColorAttachment('rgba8unorm')],\n      depthStencilAttachment:\n        passFormat !== undefined ? t.createDepthAttachment(passFormat) : undefined,\n    });\n    pass.executeBundles([bundle]);\n    pass.end();\n    validateFinishAndSubmit(passFormat === bundleFormat, true);\n  });\n\ng.test('render_pass_and_bundle,sample_count')\n  .desc('Test that the sample count in render passes and bundles must match.')\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('renderSampleCount', kTextureSampleCounts)\n      .combine('bundleSampleCount', kTextureSampleCounts)\n  )\n  .fn(t => {\n    const { renderSampleCount, bundleSampleCount } = t.params;\n    const bundleEncoder = t.device.createRenderBundleEncoder({\n      colorFormats: ['rgba8unorm'],\n      sampleCount: bundleSampleCount,\n    });\n    const bundle = bundleEncoder.finish();\n    const { encoder, validateFinishAndSubmit } = t.createEncoder('non-pass');\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [t.createColorAttachment('rgba8unorm', renderSampleCount)],\n    });\n    pass.executeBundles([bundle]);\n    pass.end();\n    validateFinishAndSubmit(renderSampleCount === bundleSampleCount, true);\n  });\n\ng.test('render_pass_or_bundle_and_pipeline,color_format')\n  .desc(\n    `\nTest that color attachment formats in render passes or bundles match the pipeline color format.\n`\n  )\n  .params(u =>\n    u\n      .combine('encoderType', ['render pass', 'render bundle'] as const)\n      .beginSubcases()\n      .combine('encoderFormat', kColorAttachmentFormats)\n      .combine('pipelineFormat', kColorAttachmentFormats)\n  )\n  .fn(t => {\n    const { encoderType, encoderFormat, pipelineFormat } = t.params;\n    const pipeline = t.createRenderPipeline([{ format: pipelineFormat, writeMask: 0 }]);\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder(encoderType, {\n      attachmentInfo: { colorFormats: [encoderFormat] },\n    });\n    encoder.setPipeline(pipeline);\n    validateFinishAndSubmit(encoderFormat === pipelineFormat, true);\n  });\n\ng.test('render_pass_or_bundle_and_pipeline,color_count')\n  .desc(\n    `\nTest that the number of color attachments in render passes or bundles match the pipeline color\ncount.\n`\n  )\n  .params(u =>\n    u\n      .combine('encoderType', ['render pass', 'render bundle'] as const)\n      .beginSubcases()\n      .combine('encoderCount', kColorAttachmentCounts)\n      .combine('pipelineCount', kColorAttachmentCounts)\n  )\n  .fn(t => {\n    const { encoderType, encoderCount, pipelineCount } = t.params;\n    const pipeline = t.createRenderPipeline(\n      range(pipelineCount, () => ({ format: 'rgba8unorm', writeMask: 0 }))\n    );\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder(encoderType, {\n      attachmentInfo: { colorFormats: range(encoderCount, () => 'rgba8unorm') },\n    });\n    encoder.setPipeline(pipeline);\n    validateFinishAndSubmit(encoderCount === pipelineCount, true);\n  });\n\ng.test('render_pass_or_bundle_and_pipeline,color_sparse')\n  .desc(\n    `\nTest that each of color attachments in render passes or bundles match that of the pipeline.\n`\n  )\n  .params(u =>\n    u\n      .combine('encoderType', ['render pass', 'render bundle'] as const)\n      // introduce attachmentCount to make it easier to split the test\n      .combine('attachmentCount', kColorAttachmentCounts)\n      .beginSubcases()\n      .combine('encoderAttachments', kColorAttachments)\n      .combine('pipelineAttachments', kColorAttachments)\n      .filter(\n        p =>\n          p.attachmentCount === p.encoderAttachments.length &&\n          p.attachmentCount === p.pipelineAttachments.length\n      )\n  )\n  .fn(t => {\n    const { encoderType, encoderAttachments, pipelineAttachments } = t.params;\n\n    const colorTargets = pipelineAttachments.map(i =>\n      i ? ({ format: 'rgba8unorm', writeMask: 0 } as GPUColorTargetState) : null\n    );\n    const pipeline = t.createRenderPipeline(colorTargets);\n\n    const colorFormats = encoderAttachments.map(i => (i ? 'rgba8unorm' : null));\n    const { encoder, validateFinishAndSubmit } = t.createEncoder(encoderType, {\n      attachmentInfo: { colorFormats },\n    });\n    encoder.setPipeline(pipeline);\n    validateFinishAndSubmit(\n      encoderAttachments.every((v, i) => v === pipelineAttachments[i]),\n      true\n    );\n  });\n\ng.test('render_pass_or_bundle_and_pipeline,depth_format')\n  .desc(\n    `\nTest that the depth attachment format in render passes or bundles match the pipeline depth format.\n`\n  )\n  .params(u =>\n    u\n      .combine('encoderType', ['render pass', 'render bundle'] as const)\n      .combine('encoderFormatFeature', kFeaturesForDepthStencilAttachmentFormats)\n      .combine('pipelineFormatFeature', kFeaturesForDepthStencilAttachmentFormats)\n      .beginSubcases()\n      .expand('encoderFormat', ({ encoderFormatFeature }) =>\n        filterFormatsByFeature(encoderFormatFeature, kDepthStencilAttachmentFormats)\n      )\n      .expand('pipelineFormat', ({ pipelineFormatFeature }) =>\n        filterFormatsByFeature(pipelineFormatFeature, kDepthStencilAttachmentFormats)\n      )\n  )\n  .beforeAllSubcases(async t => {\n    const { encoderFormatFeature, pipelineFormatFeature } = t.params;\n    await t.selectDeviceOrSkipTestCase([encoderFormatFeature, pipelineFormatFeature]);\n  })\n  .fn(async t => {\n    const { encoderType, encoderFormat, pipelineFormat } = t.params;\n\n    const pipeline = t.createRenderPipeline(\n      [{ format: 'rgba8unorm', writeMask: 0 }],\n      pipelineFormat !== undefined ? { format: pipelineFormat } : undefined\n    );\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder(encoderType, {\n      attachmentInfo: { colorFormats: ['rgba8unorm'], depthStencilFormat: encoderFormat },\n    });\n    encoder.setPipeline(pipeline);\n    validateFinishAndSubmit(encoderFormat === pipelineFormat, true);\n  });\n\nconst kStencilFaceStates = [\n  { failOp: 'keep', depthFailOp: 'keep', passOp: 'keep' },\n  { failOp: 'zero', depthFailOp: 'zero', passOp: 'zero' },\n] as GPUStencilFaceState[];\n\ng.test('render_pass_or_bundle_and_pipeline,depth_stencil_read_only_write_state')\n  .desc(\n    `\nTest that the depth stencil read only state in render passes or bundles is compatible with the depth stencil write state of the pipeline.\n`\n  )\n  .params(u =>\n    u\n      .combine('encoderType', ['render pass', 'render bundle'] as const)\n      .combine('format', kDepthStencilAttachmentFormats)\n      .beginSubcases()\n      // pass/bundle state\n      .combine('depthReadOnly', [false, true])\n      .combine('stencilReadOnly', [false, true])\n      .combine('stencilFront', kStencilFaceStates)\n      .combine('stencilBack', kStencilFaceStates)\n      // pipeline state\n      .combine('depthWriteEnabled', [false, true])\n      .combine('stencilWriteMask', [0, 0xffffffff])\n      .combine('cullMode', ['none', 'front', 'back'] as const)\n      .filter(p => {\n        if (p.format) {\n          const depthStencilInfo = kTextureFormatInfo[p.format];\n          // For combined depth/stencil formats the depth and stencil read only state must match\n          // in order to create a valid render bundle or render pass.\n          if (depthStencilInfo.depth && depthStencilInfo.stencil) {\n            if (p.depthReadOnly !== p.stencilReadOnly) {\n              return false;\n            }\n          }\n          // If the format has no depth aspect, the depthReadOnly, depthWriteEnabled of the pipeline must not be true\n          // in order to create a valid render pipeline.\n          if (!depthStencilInfo.depth && p.depthWriteEnabled) {\n            return false;\n          }\n          // If the format has no stencil aspect, the stencil state operation must be 'keep'\n          // in order to create a valid render pipeline.\n          if (\n            !depthStencilInfo.stencil &&\n            (p.stencilFront.failOp !== 'keep' || p.stencilBack.failOp !== 'keep')\n          ) {\n            return false;\n          }\n        }\n        // No depthStencil attachment\n        return true;\n      })\n  )\n  .beforeAllSubcases(async t => {\n    await t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n  })\n  .fn(async t => {\n    const {\n      encoderType,\n      format,\n      depthReadOnly,\n      stencilReadOnly,\n      depthWriteEnabled,\n      stencilWriteMask,\n      cullMode,\n      stencilFront,\n      stencilBack,\n    } = t.params;\n\n    const pipeline = t.createRenderPipeline(\n      [{ format: 'rgba8unorm', writeMask: 0 }],\n      format === undefined\n        ? undefined\n        : {\n            format,\n            depthWriteEnabled,\n            stencilWriteMask,\n            stencilFront,\n            stencilBack,\n          },\n      1,\n      cullMode\n    );\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder(encoderType, {\n      attachmentInfo: { colorFormats: ['rgba8unorm'], depthStencilFormat: format },\n    });\n    encoder.setPipeline(pipeline);\n\n    let writesDepth = false;\n    let writesStencil = false;\n    if (format) {\n      writesDepth = depthWriteEnabled;\n      if (stencilWriteMask !== 0) {\n        if (\n          cullMode !== 'front' &&\n          (stencilFront.passOp !== 'keep' ||\n            stencilFront.depthFailOp !== 'keep' ||\n            stencilFront.failOp !== 'keep')\n        ) {\n          writesStencil = true;\n        }\n        if (\n          cullMode !== 'back' &&\n          (stencilBack.passOp !== 'keep' ||\n            stencilBack.depthFailOp !== 'keep' ||\n            stencilBack.failOp !== 'keep')\n        ) {\n          writesStencil = true;\n        }\n      }\n    }\n\n    let isValid = true;\n    if (writesDepth) {\n      isValid &&= !depthReadOnly;\n    }\n    if (writesStencil) {\n      isValid &&= !stencilReadOnly;\n    }\n\n    validateFinishAndSubmit(isValid, true);\n  });\n\ng.test('render_pass_or_bundle_and_pipeline,sample_count')\n  .desc(\n    `\nTest that the sample count in render passes or bundles match the pipeline sample count for both color texture and depthstencil texture.\n`\n  )\n  .params(u =>\n    u\n      .combine('encoderType', ['render pass', 'render bundle'] as const)\n      .combine('attachmentType', ['color', 'depthstencil'] as const)\n      .beginSubcases()\n      .combine('encoderSampleCount', kTextureSampleCounts)\n      .combine('pipelineSampleCount', kTextureSampleCounts)\n  )\n  .fn(t => {\n    const { encoderType, attachmentType, encoderSampleCount, pipelineSampleCount } = t.params;\n\n    const colorFormats = attachmentType === 'color' ? ['rgba8unorm' as const] : [];\n    const depthStencilFormat =\n      attachmentType === 'depthstencil' ? ('depth24plus-stencil8' as const) : undefined;\n\n    const pipeline = t.createRenderPipeline(\n      colorFormats.map(format => ({ format, writeMask: 0 })),\n      depthStencilFormat ? { format: depthStencilFormat } : undefined,\n      pipelineSampleCount\n    );\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder(encoderType, {\n      attachmentInfo: { colorFormats, depthStencilFormat, sampleCount: encoderSampleCount },\n    });\n    encoder.setPipeline(pipeline);\n    validateFinishAndSubmit(encoderSampleCount === pipelineSampleCount, true);\n  });\n"],"file":"attachment_compatibility.spec.js"}