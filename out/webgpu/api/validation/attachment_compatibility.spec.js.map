{"version":3,"sources":["../../../../src/webgpu/api/validation/attachment_compatibility.spec.ts"],"names":["description","makeTestGroup","range","kRegularTextureFormats","kSizedDepthStencilFormats","kUnsizedDepthStencilFormats","kTextureSampleCounts","kMaxColorAttachments","kTextureFormatInfo","ValidationTest","kColorAttachmentCounts","i","kDepthStencilAttachmentFormats","undefined","F","createAttachmentTextureView","format","sampleCount","device","createTexture","size","usage","GPUTextureUsage","RENDER_ATTACHMENT","createView","createColorAttachment","view","loadValue","storeOp","createDepthAttachment","depthLoadValue","depthStoreOp","stencilLoadValue","stencilStoreOp","createPassOrBundleEncoder","encoderType","colorFormats","depthStencilFormat","encoder","createCommandEncoder","passDesc","colorAttachments","Array","from","desc","depthStencilAttachment","pass","beginRenderPass","bundleEncoder","createRenderBundleEncoder","finish","bundle","executeBundles","endPass","createRenderPipeline","targets","depthStencil","vertex","module","createShaderModule","code","entryPoint","fragment","primitive","topology","multisample","count","g","kColorAttachmentFormats","filter","info","color","renderable","test","paramsSubcasesOnly","u","combine","fn","t","passFormat","bundleFormat","params","expectValidationError","queue","submit","passCount","bundleCount","selectDeviceForTextureFormatOrSkipTestCase","renderSampleCount","bundleSampleCount","beginSubcases","encoderFormat","pipelineFormat","pipeline","setPipeline","encoderCount","pipelineCount","encoderSampleCount","pipelineSampleCount","pipelineWithoutDepthStencil","encoderWithoutDepthStencil","finishWithoutDepthStencil","pipelineWithDepthStencilOnly","encoderWithDepthStencilOnly","finishWithDepthStencilOnly"],"mappings":"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","sourcesContent":["export const description = `\nValidation for attachment compatibility between render passes, bundles, and pipelines\n\nTODO: Add sparse color attachment compatibility test when defined by specification\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { range } from '../../../common/util/util.js';\nimport {\n  kRegularTextureFormats,\n  kSizedDepthStencilFormats,\n  kUnsizedDepthStencilFormats,\n  kTextureSampleCounts,\n  kMaxColorAttachments,\n  kTextureFormatInfo,\n} from '../../capability_info.js';\n\nimport { ValidationTest, CommandBufferMaker } from './validation_test.js';\n\nconst kColorAttachmentCounts = range(kMaxColorAttachments, i => i + 1);\nconst kDepthStencilAttachmentFormats = [\n  undefined,\n  ...kSizedDepthStencilFormats,\n  ...kUnsizedDepthStencilFormats,\n] as const;\n\nclass F extends ValidationTest {\n  createAttachmentTextureView(format: GPUTextureFormat, sampleCount?: number) {\n    return this.device\n      .createTexture({\n        size: [1, 1, 1],\n        format,\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n        sampleCount,\n      })\n      .createView();\n  }\n\n  createColorAttachment(\n    format: GPUTextureFormat,\n    sampleCount?: number\n  ): GPURenderPassColorAttachment {\n    return {\n      view: this.createAttachmentTextureView(format, sampleCount),\n      loadValue: [0, 0, 0, 0],\n      storeOp: 'store',\n    };\n  }\n\n  createDepthAttachment(\n    format: GPUTextureFormat,\n    sampleCount?: number\n  ): GPURenderPassDepthStencilAttachment {\n    return {\n      view: this.createAttachmentTextureView(format, sampleCount),\n      depthLoadValue: 0,\n      depthStoreOp: 'clear',\n      stencilLoadValue: 1,\n      stencilStoreOp: 'clear',\n    };\n  }\n\n  createPassOrBundleEncoder(\n    encoderType: 'render pass' | 'render bundle',\n    colorFormats: Iterable<GPUTextureFormat>,\n    depthStencilFormat?: GPUTextureFormat,\n    sampleCount?: number\n  ): CommandBufferMaker<'render pass' | 'render bundle'> {\n    const encoder = this.device.createCommandEncoder();\n    const passDesc: GPURenderPassDescriptor = {\n      colorAttachments: Array.from(colorFormats, desc =>\n        this.createColorAttachment(desc, sampleCount)\n      ),\n      depthStencilAttachment:\n        depthStencilFormat !== undefined\n          ? this.createDepthAttachment(depthStencilFormat, sampleCount)\n          : undefined,\n    };\n    const pass = encoder.beginRenderPass(passDesc);\n    switch (encoderType) {\n      case 'render bundle': {\n        const bundleEncoder = this.device.createRenderBundleEncoder({\n          colorFormats,\n          depthStencilFormat,\n          sampleCount,\n        });\n\n        return {\n          encoder: bundleEncoder,\n          finish() {\n            const bundle = bundleEncoder.finish();\n            pass.executeBundles([bundle]);\n            pass.endPass();\n            return encoder.finish();\n          },\n        };\n      }\n      case 'render pass':\n        return {\n          encoder: pass,\n          finish() {\n            pass.endPass();\n            return encoder.finish();\n          },\n        };\n    }\n  }\n\n  createRenderPipeline(\n    targets: Iterable<GPUColorTargetState>,\n    depthStencil?: GPUDepthStencilState,\n    sampleCount?: number\n  ) {\n    return this.device.createRenderPipeline({\n      vertex: {\n        module: this.device.createShaderModule({\n          code: `\n            [[stage(vertex)]] fn main() -> [[builtin(position)]] vec4<f32> {\n              return vec4<f32>(0.0, 0.0, 0.0, 0.0);\n            }`,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: this.device.createShaderModule({\n          code: '[[stage(fragment)]] fn main() {}',\n        }),\n        entryPoint: 'main',\n        targets,\n      },\n      primitive: { topology: 'triangle-list' },\n      depthStencil,\n      multisample: { count: sampleCount },\n    });\n  }\n}\n\nexport const g = makeTestGroup(F);\n\nconst kColorAttachmentFormats = kRegularTextureFormats.filter(format => {\n  const info = kTextureFormatInfo[format];\n  return info.color && info.renderable;\n});\n\ng.test('render_pass_and_bundle,color_format')\n  .desc('Test that color attachment formats in render passes and bundles must match.')\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('passFormat', kColorAttachmentFormats)\n      .combine('bundleFormat', kColorAttachmentFormats)\n  )\n  .fn(t => {\n    const { passFormat, bundleFormat } = t.params;\n    const bundleEncoder = t.device.createRenderBundleEncoder({\n      colorFormats: [bundleFormat],\n    });\n    const bundle = bundleEncoder.finish();\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [t.createColorAttachment(passFormat)],\n    });\n    pass.executeBundles([bundle]);\n    pass.endPass();\n    t.expectValidationError(() => {\n      t.queue.submit([encoder.finish()]);\n    }, passFormat !== bundleFormat);\n  });\n\ng.test('render_pass_and_bundle,color_count')\n  .desc(\n    `\n  Test that the number of color attachments in render passes and bundles must match.\n\n  TODO: Add sparse color attachment compatibility test when defined by specification\n  `\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('passCount', kColorAttachmentCounts)\n      .combine('bundleCount', kColorAttachmentCounts)\n  )\n  .fn(t => {\n    const { passCount, bundleCount } = t.params;\n    const bundleEncoder = t.device.createRenderBundleEncoder({\n      colorFormats: range(bundleCount, () => 'rgba8unorm'),\n    });\n    const bundle = bundleEncoder.finish();\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: range(passCount, () => t.createColorAttachment('rgba8unorm')),\n    });\n    pass.executeBundles([bundle]);\n    pass.endPass();\n    t.expectValidationError(() => {\n      t.queue.submit([encoder.finish()]);\n    }, passCount !== bundleCount);\n  });\n\ng.test('render_pass_and_bundle,depth_format')\n  .desc('Test that the depth attachment format in render passes and bundles must match.')\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('passFormat', kDepthStencilAttachmentFormats)\n      .combine('bundleFormat', kDepthStencilAttachmentFormats)\n  )\n  .fn(async t => {\n    const { passFormat, bundleFormat } = t.params;\n    await t.selectDeviceForTextureFormatOrSkipTestCase([passFormat, bundleFormat]);\n\n    const bundleEncoder = t.device.createRenderBundleEncoder({\n      colorFormats: ['rgba8unorm'],\n      depthStencilFormat: bundleFormat,\n    });\n    const bundle = bundleEncoder.finish();\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [t.createColorAttachment('rgba8unorm')],\n      depthStencilAttachment:\n        passFormat !== undefined ? t.createDepthAttachment(passFormat) : undefined,\n    });\n    pass.executeBundles([bundle]);\n    pass.endPass();\n    t.expectValidationError(() => {\n      t.queue.submit([encoder.finish()]);\n    }, passFormat !== bundleFormat);\n  });\n\ng.test('render_pass_and_bundle,sample_count')\n  .desc('Test that the sample count in render passes and bundles must match.')\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('renderSampleCount', kTextureSampleCounts)\n      .combine('bundleSampleCount', kTextureSampleCounts)\n  )\n  .fn(t => {\n    const { renderSampleCount, bundleSampleCount } = t.params;\n    const bundleEncoder = t.device.createRenderBundleEncoder({\n      colorFormats: ['rgba8unorm'],\n      sampleCount: bundleSampleCount,\n    });\n    const bundle = bundleEncoder.finish();\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [t.createColorAttachment('rgba8unorm', renderSampleCount)],\n    });\n    pass.executeBundles([bundle]);\n    pass.endPass();\n    t.expectValidationError(() => {\n      t.queue.submit([encoder.finish()]);\n    }, renderSampleCount !== bundleSampleCount);\n  });\n\ng.test('render_pass_or_bundle_and_pipeline,color_format')\n  .desc(\n    `\nTest that color attachment formats in render passes or bundles match the pipeline color format.\n`\n  )\n  .params(u =>\n    u\n      .combine('encoderType', ['render pass', 'render bundle'] as const)\n      .beginSubcases()\n      .combine('encoderFormat', kColorAttachmentFormats)\n      .combine('pipelineFormat', kColorAttachmentFormats)\n  )\n  .fn(t => {\n    const { encoderType, encoderFormat, pipelineFormat } = t.params;\n    const pipeline = t.createRenderPipeline([{ format: pipelineFormat }]);\n\n    const { encoder, finish } = t.createPassOrBundleEncoder(encoderType, [encoderFormat]);\n    encoder.setPipeline(pipeline);\n\n    t.expectValidationError(() => {\n      t.queue.submit([finish()]);\n    }, encoderFormat !== pipelineFormat);\n  });\n\ng.test('render_pass_or_bundle_and_pipeline,color_count')\n  .desc(\n    `\nTest that the number of color attachments in render passes or bundles match the pipeline color\ncount.\n\nTODO: Add sparse color attachment compatibility test when defined by specification\n`\n  )\n  .params(u =>\n    u\n      .combine('encoderType', ['render pass', 'render bundle'] as const)\n      .beginSubcases()\n      .combine('encoderCount', kColorAttachmentCounts)\n      .combine('pipelineCount', kColorAttachmentCounts)\n  )\n  .fn(t => {\n    const { encoderType, encoderCount, pipelineCount } = t.params;\n    const pipeline = t.createRenderPipeline(range(pipelineCount, () => ({ format: 'rgba8unorm' })));\n\n    const { encoder, finish } = t.createPassOrBundleEncoder(\n      encoderType,\n      range(encoderCount, () => 'rgba8unorm')\n    );\n    encoder.setPipeline(pipeline);\n\n    t.expectValidationError(() => {\n      t.queue.submit([finish()]);\n    }, encoderCount !== pipelineCount);\n  });\n\ng.test('render_pass_or_bundle_and_pipeline,depth_format')\n  .desc(\n    `\nTest that the depth attachment format in render passes or bundles match the pipeline depth format.\n`\n  )\n  .params(u =>\n    u\n      .combine('encoderType', ['render pass', 'render bundle'] as const)\n      .beginSubcases()\n      .combine('encoderFormat', kDepthStencilAttachmentFormats)\n      .combine('pipelineFormat', kDepthStencilAttachmentFormats)\n  )\n  .fn(async t => {\n    const { encoderType, encoderFormat, pipelineFormat } = t.params;\n    await t.selectDeviceForTextureFormatOrSkipTestCase([encoderFormat, pipelineFormat]);\n\n    const pipeline = t.createRenderPipeline(\n      [{ format: 'rgba8unorm' }],\n      pipelineFormat !== undefined ? { format: pipelineFormat } : undefined\n    );\n\n    const { encoder, finish } = t.createPassOrBundleEncoder(\n      encoderType,\n      ['rgba8unorm'],\n      encoderFormat\n    );\n    encoder.setPipeline(pipeline);\n\n    t.expectValidationError(() => {\n      t.queue.submit([finish()]);\n    }, encoderFormat !== pipelineFormat);\n  });\n\ng.test('render_pass_or_bundle_and_pipeline,sample_count')\n  .desc(\n    `\nTest that the sample count in render passes or bundles match the pipeline sample count for both color texture and depthstencil texture.\n`\n  )\n  .params(u =>\n    u\n      .combine('encoderType', ['render pass', 'render bundle'] as const)\n      .beginSubcases()\n      .combine('encoderSampleCount', kTextureSampleCounts)\n      .combine('pipelineSampleCount', kTextureSampleCounts)\n  )\n  .fn(t => {\n    const { encoderType, encoderSampleCount, pipelineSampleCount } = t.params;\n\n    // For color texture\n    const pipelineWithoutDepthStencil = t.createRenderPipeline(\n      [{ format: 'rgba8unorm' }],\n      undefined,\n      pipelineSampleCount\n    );\n\n    const {\n      encoder: encoderWithoutDepthStencil,\n      finish: finishWithoutDepthStencil,\n    } = t.createPassOrBundleEncoder(encoderType, ['rgba8unorm'], undefined, encoderSampleCount);\n    encoderWithoutDepthStencil.setPipeline(pipelineWithoutDepthStencil);\n\n    t.expectValidationError(() => {\n      t.queue.submit([finishWithoutDepthStencil()]);\n    }, encoderSampleCount !== pipelineSampleCount);\n\n    // For DepthStencil texture\n    const pipelineWithDepthStencilOnly = t.createRenderPipeline(\n      [],\n      { format: 'depth24plus-stencil8' },\n      pipelineSampleCount\n    );\n\n    const {\n      encoder: encoderWithDepthStencilOnly,\n      finish: finishWithDepthStencilOnly,\n    } = t.createPassOrBundleEncoder(encoderType, [], 'depth24plus-stencil8', encoderSampleCount);\n    encoderWithDepthStencilOnly.setPipeline(pipelineWithDepthStencilOnly);\n\n    t.expectValidationError(() => {\n      t.queue.submit([finishWithDepthStencilOnly()]);\n    }, encoderSampleCount !== pipelineSampleCount);\n  });\n"],"file":"attachment_compatibility.spec.js"}