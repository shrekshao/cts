{"version":3,"sources":["../../../../src/webgpu/api/validation/attachment_compatibility.spec.ts"],"names":["description","makeTestGroup","range","kRegularTextureFormats","kSizedDepthStencilFormats","kUnsizedDepthStencilFormats","kTextureSampleCounts","kMaxColorAttachments","kTextureFormatInfo","ValidationTest","kColorAttachmentCounts","i","kDepthStencilAttachmentFormats","undefined","F","createAttachmentTextureView","format","sampleCount","device","createTexture","size","usage","GPUTextureUsage","RENDER_ATTACHMENT","createView","createColorAttachment","view","loadValue","storeOp","createDepthAttachment","depthLoadValue","depthStoreOp","stencilLoadValue","stencilStoreOp","createRenderPipeline","targets","depthStencil","vertex","module","createShaderModule","code","entryPoint","fragment","primitive","topology","multisample","count","g","kColorAttachmentFormats","filter","info","color","renderable","test","desc","paramsSubcasesOnly","u","combine","fn","t","passFormat","bundleFormat","params","bundleEncoder","createRenderBundleEncoder","colorFormats","bundle","finish","encoder","validateFinishAndSubmit","createEncoder","pass","beginRenderPass","colorAttachments","executeBundles","endPass","passCount","bundleCount","selectDeviceForTextureFormatOrSkipTestCase","depthStencilFormat","depthStencilAttachment","renderSampleCount","bundleSampleCount","beginSubcases","encoderType","encoderFormat","pipelineFormat","pipeline","writeMask","attachmentInfo","setPipeline","encoderCount","pipelineCount","attachmentType","encoderSampleCount","pipelineSampleCount","map"],"mappings":"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","sourcesContent":["export const description = `\nValidation for attachment compatibility between render passes, bundles, and pipelines\n\nTODO: Add sparse color attachment compatibility test when defined by specification\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { range } from '../../../common/util/util.js';\nimport {\n  kRegularTextureFormats,\n  kSizedDepthStencilFormats,\n  kUnsizedDepthStencilFormats,\n  kTextureSampleCounts,\n  kMaxColorAttachments,\n  kTextureFormatInfo,\n} from '../../capability_info.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nconst kColorAttachmentCounts = range(kMaxColorAttachments, i => i + 1);\nconst kDepthStencilAttachmentFormats = [\n  undefined,\n  ...kSizedDepthStencilFormats,\n  ...kUnsizedDepthStencilFormats,\n] as const;\n\nclass F extends ValidationTest {\n  createAttachmentTextureView(format: GPUTextureFormat, sampleCount?: number) {\n    return this.device\n      .createTexture({\n        // Size matching the \"arbitrary\" size used by ValidationTest helpers.\n        size: [16, 16, 1],\n        format,\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n        sampleCount,\n      })\n      .createView();\n  }\n\n  createColorAttachment(\n    format: GPUTextureFormat,\n    sampleCount?: number\n  ): GPURenderPassColorAttachment {\n    return {\n      view: this.createAttachmentTextureView(format, sampleCount),\n      loadValue: [0, 0, 0, 0],\n      storeOp: 'store',\n    };\n  }\n\n  createDepthAttachment(\n    format: GPUTextureFormat,\n    sampleCount?: number\n  ): GPURenderPassDepthStencilAttachment {\n    return {\n      view: this.createAttachmentTextureView(format, sampleCount),\n      depthLoadValue: 0,\n      depthStoreOp: 'discard',\n      stencilLoadValue: 1,\n      stencilStoreOp: 'discard',\n    };\n  }\n\n  createRenderPipeline(\n    targets: Iterable<GPUColorTargetState>,\n    depthStencil?: GPUDepthStencilState,\n    sampleCount?: number\n  ) {\n    return this.device.createRenderPipeline({\n      vertex: {\n        module: this.device.createShaderModule({\n          code: `\n            @stage(vertex) fn main() -> @builtin(position) vec4<f32> {\n              return vec4<f32>(0.0, 0.0, 0.0, 0.0);\n            }`,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: this.device.createShaderModule({\n          code: '@stage(fragment) fn main() {}',\n        }),\n        entryPoint: 'main',\n        targets,\n      },\n      primitive: { topology: 'triangle-list' },\n      depthStencil,\n      multisample: { count: sampleCount },\n    });\n  }\n}\n\nexport const g = makeTestGroup(F);\n\nconst kColorAttachmentFormats = kRegularTextureFormats.filter(format => {\n  const info = kTextureFormatInfo[format];\n  return info.color && info.renderable;\n});\n\ng.test('render_pass_and_bundle,color_format')\n  .desc('Test that color attachment formats in render passes and bundles must match.')\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('passFormat', kColorAttachmentFormats)\n      .combine('bundleFormat', kColorAttachmentFormats)\n  )\n  .fn(t => {\n    const { passFormat, bundleFormat } = t.params;\n    const bundleEncoder = t.device.createRenderBundleEncoder({\n      colorFormats: [bundleFormat],\n    });\n    const bundle = bundleEncoder.finish();\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder('non-pass');\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [t.createColorAttachment(passFormat)],\n    });\n    pass.executeBundles([bundle]);\n    pass.endPass();\n    validateFinishAndSubmit(passFormat === bundleFormat, true);\n  });\n\ng.test('render_pass_and_bundle,color_count')\n  .desc(\n    `\n  Test that the number of color attachments in render passes and bundles must match.\n\n  TODO: Add sparse color attachment compatibility test when defined by specification\n  `\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('passCount', kColorAttachmentCounts)\n      .combine('bundleCount', kColorAttachmentCounts)\n  )\n  .fn(t => {\n    const { passCount, bundleCount } = t.params;\n    const bundleEncoder = t.device.createRenderBundleEncoder({\n      colorFormats: range(bundleCount, () => 'rgba8unorm'),\n    });\n    const bundle = bundleEncoder.finish();\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder('non-pass');\n    const pass = encoder.beginRenderPass({\n      colorAttachments: range(passCount, () => t.createColorAttachment('rgba8unorm')),\n    });\n    pass.executeBundles([bundle]);\n    pass.endPass();\n    validateFinishAndSubmit(passCount === bundleCount, true);\n  });\n\ng.test('render_pass_and_bundle,depth_format')\n  .desc('Test that the depth attachment format in render passes and bundles must match.')\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('passFormat', kDepthStencilAttachmentFormats)\n      .combine('bundleFormat', kDepthStencilAttachmentFormats)\n  )\n  .fn(async t => {\n    const { passFormat, bundleFormat } = t.params;\n    await t.selectDeviceForTextureFormatOrSkipTestCase([passFormat, bundleFormat]);\n\n    const bundleEncoder = t.device.createRenderBundleEncoder({\n      colorFormats: ['rgba8unorm'],\n      depthStencilFormat: bundleFormat,\n    });\n    const bundle = bundleEncoder.finish();\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder('non-pass');\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [t.createColorAttachment('rgba8unorm')],\n      depthStencilAttachment:\n        passFormat !== undefined ? t.createDepthAttachment(passFormat) : undefined,\n    });\n    pass.executeBundles([bundle]);\n    pass.endPass();\n    validateFinishAndSubmit(passFormat === bundleFormat, true);\n  });\n\ng.test('render_pass_and_bundle,sample_count')\n  .desc('Test that the sample count in render passes and bundles must match.')\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('renderSampleCount', kTextureSampleCounts)\n      .combine('bundleSampleCount', kTextureSampleCounts)\n  )\n  .fn(t => {\n    const { renderSampleCount, bundleSampleCount } = t.params;\n    const bundleEncoder = t.device.createRenderBundleEncoder({\n      colorFormats: ['rgba8unorm'],\n      sampleCount: bundleSampleCount,\n    });\n    const bundle = bundleEncoder.finish();\n    const { encoder, validateFinishAndSubmit } = t.createEncoder('non-pass');\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [t.createColorAttachment('rgba8unorm', renderSampleCount)],\n    });\n    pass.executeBundles([bundle]);\n    pass.endPass();\n    validateFinishAndSubmit(renderSampleCount === bundleSampleCount, true);\n  });\n\ng.test('render_pass_or_bundle_and_pipeline,color_format')\n  .desc(\n    `\nTest that color attachment formats in render passes or bundles match the pipeline color format.\n`\n  )\n  .params(u =>\n    u\n      .combine('encoderType', ['render pass', 'render bundle'] as const)\n      .beginSubcases()\n      .combine('encoderFormat', kColorAttachmentFormats)\n      .combine('pipelineFormat', kColorAttachmentFormats)\n  )\n  .fn(t => {\n    const { encoderType, encoderFormat, pipelineFormat } = t.params;\n    const pipeline = t.createRenderPipeline([{ format: pipelineFormat, writeMask: 0 }]);\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder(encoderType, {\n      attachmentInfo: { colorFormats: [encoderFormat] },\n    });\n    encoder.setPipeline(pipeline);\n    validateFinishAndSubmit(encoderFormat === pipelineFormat, true);\n  });\n\ng.test('render_pass_or_bundle_and_pipeline,color_count')\n  .desc(\n    `\nTest that the number of color attachments in render passes or bundles match the pipeline color\ncount.\n\nTODO: Add sparse color attachment compatibility test when defined by specification\n`\n  )\n  .params(u =>\n    u\n      .combine('encoderType', ['render pass', 'render bundle'] as const)\n      .beginSubcases()\n      .combine('encoderCount', kColorAttachmentCounts)\n      .combine('pipelineCount', kColorAttachmentCounts)\n  )\n  .fn(t => {\n    const { encoderType, encoderCount, pipelineCount } = t.params;\n    const pipeline = t.createRenderPipeline(\n      range(pipelineCount, () => ({ format: 'rgba8unorm', writeMask: 0 }))\n    );\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder(encoderType, {\n      attachmentInfo: { colorFormats: range(encoderCount, () => 'rgba8unorm') },\n    });\n    encoder.setPipeline(pipeline);\n    validateFinishAndSubmit(encoderCount === pipelineCount, true);\n  });\n\ng.test('render_pass_or_bundle_and_pipeline,depth_format')\n  .desc(\n    `\nTest that the depth attachment format in render passes or bundles match the pipeline depth format.\n`\n  )\n  .params(u =>\n    u\n      .combine('encoderType', ['render pass', 'render bundle'] as const)\n      .beginSubcases()\n      .combine('encoderFormat', kDepthStencilAttachmentFormats)\n      .combine('pipelineFormat', kDepthStencilAttachmentFormats)\n  )\n  .fn(async t => {\n    const { encoderType, encoderFormat, pipelineFormat } = t.params;\n    await t.selectDeviceForTextureFormatOrSkipTestCase([encoderFormat, pipelineFormat]);\n\n    const pipeline = t.createRenderPipeline(\n      [{ format: 'rgba8unorm', writeMask: 0 }],\n      pipelineFormat !== undefined ? { format: pipelineFormat } : undefined\n    );\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder(encoderType, {\n      attachmentInfo: { colorFormats: ['rgba8unorm'], depthStencilFormat: encoderFormat },\n    });\n    encoder.setPipeline(pipeline);\n    validateFinishAndSubmit(encoderFormat === pipelineFormat, true);\n  });\n\ng.test('render_pass_or_bundle_and_pipeline,sample_count')\n  .desc(\n    `\nTest that the sample count in render passes or bundles match the pipeline sample count for both color texture and depthstencil texture.\n`\n  )\n  .params(u =>\n    u\n      .combine('encoderType', ['render pass', 'render bundle'] as const)\n      .combine('attachmentType', ['color', 'depthstencil'] as const)\n      .beginSubcases()\n      .combine('encoderSampleCount', kTextureSampleCounts)\n      .combine('pipelineSampleCount', kTextureSampleCounts)\n  )\n  .fn(t => {\n    const { encoderType, attachmentType, encoderSampleCount, pipelineSampleCount } = t.params;\n\n    const colorFormats = attachmentType === 'color' ? ['rgba8unorm' as const] : [];\n    const depthStencilFormat =\n      attachmentType === 'depthstencil' ? ('depth24plus-stencil8' as const) : undefined;\n\n    const pipeline = t.createRenderPipeline(\n      colorFormats.map(format => ({ format, writeMask: 0 })),\n      depthStencilFormat ? { format: depthStencilFormat } : undefined,\n      pipelineSampleCount\n    );\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder(encoderType, {\n      attachmentInfo: { colorFormats, depthStencilFormat, sampleCount: encoderSampleCount },\n    });\n    encoder.setPipeline(pipeline);\n    validateFinishAndSubmit(encoderSampleCount === pipelineSampleCount, true);\n  });\n"],"file":"attachment_compatibility.spec.js"}