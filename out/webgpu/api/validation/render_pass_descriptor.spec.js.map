{"version":3,"sources":["../../../../src/webgpu/api/validation/render_pass_descriptor.spec.ts"],"names":["description","makeTestGroup","ValidationTest","F","createTexture","options","format","width","height","arrayLayerCount","mipLevelCount","sampleCount","usage","GPUTextureUsage","RENDER_ATTACHMENT","device","size","depthOrArrayLayers","getColorAttachment","texture","textureViewDescriptor","view","createView","loadValue","r","g","b","a","storeOp","getDepthStencilAttachment","depthLoadValue","depthStoreOp","stencilLoadValue","stencilStoreOp","tryRenderPass","success","descriptor","commandEncoder","createCommandEncoder","renderPass","beginRenderPass","endPass","expectValidationError","finish","test","fn","t","colorTexture","colorAttachments","depthStencilTexture","depthStencilAttachment","paramsSimple","colorAttachmentsCount","_success","params","i","push","colorTexture1x1A","colorTexture1x1B","colorTexture2x2","depthStencilTexture1x1","depthStencilTexture2x2","baseArrayLayer","ARRAY_LAYER_COUNT","MIP_LEVEL_COUNT","COLOR_FORMAT","DEPTH_STENCIL_FORMAT","baseTextureViewDescriptor","dimension","baseMipLevel","resolveTargetTexture","resolveTarget","multisampledColorTexture","multisampledResolveTargetTexture","colorAttachment","COPY_SRC","COPY_DST","resolveTargetTextureView","multisampledDepthStencilTexture"],"mappings":"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","sourcesContent":["export const description = `\nrender pass descriptor validation tests.\n\nTODO: per-test descriptions, make test names more succinct\nTODO: review for completeness\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nclass F extends ValidationTest {\n  createTexture(\n    options: {\n      format?: GPUTextureFormat;\n      width?: number;\n      height?: number;\n      arrayLayerCount?: number;\n      mipLevelCount?: number;\n      sampleCount?: number;\n      usage?: GPUTextureUsageFlags;\n    } = {}\n  ): GPUTexture {\n    const {\n      format = 'rgba8unorm',\n      width = 16,\n      height = 16,\n      arrayLayerCount = 1,\n      mipLevelCount = 1,\n      sampleCount = 1,\n      usage = GPUTextureUsage.RENDER_ATTACHMENT,\n    } = options;\n\n    return this.device.createTexture({\n      size: { width, height, depthOrArrayLayers: arrayLayerCount },\n      format,\n      mipLevelCount,\n      sampleCount,\n      usage,\n    });\n  }\n\n  getColorAttachment(\n    texture: GPUTexture,\n    textureViewDescriptor?: GPUTextureViewDescriptor\n  ): GPURenderPassColorAttachment {\n    const view = texture.createView(textureViewDescriptor);\n\n    return {\n      view,\n      loadValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n      storeOp: 'store',\n    };\n  }\n\n  getDepthStencilAttachment(\n    texture: GPUTexture,\n    textureViewDescriptor?: GPUTextureViewDescriptor\n  ): GPURenderPassDepthStencilAttachment {\n    const view = texture.createView(textureViewDescriptor);\n\n    return {\n      view,\n      depthLoadValue: 1.0,\n      depthStoreOp: 'store',\n      stencilLoadValue: 0,\n      stencilStoreOp: 'store',\n    };\n  }\n\n  async tryRenderPass(success: boolean, descriptor: GPURenderPassDescriptor): Promise<void> {\n    const commandEncoder = this.device.createCommandEncoder();\n    const renderPass = commandEncoder.beginRenderPass(descriptor);\n    renderPass.endPass();\n\n    this.expectValidationError(() => {\n      commandEncoder.finish();\n    }, !success);\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('a_render_pass_with_only_one_color_is_ok').fn(t => {\n  const colorTexture = t.createTexture({ format: 'rgba8unorm' });\n  const descriptor = {\n    colorAttachments: [t.getColorAttachment(colorTexture)],\n  };\n\n  t.tryRenderPass(true, descriptor);\n});\n\ng.test('a_render_pass_with_only_one_depth_attachment_is_ok').fn(t => {\n  const depthStencilTexture = t.createTexture({ format: 'depth24plus-stencil8' });\n  const descriptor = {\n    colorAttachments: [],\n    depthStencilAttachment: t.getDepthStencilAttachment(depthStencilTexture),\n  };\n\n  t.tryRenderPass(true, descriptor);\n});\n\ng.test('OOB_color_attachment_indices_are_handled')\n  .paramsSimple([\n    { colorAttachmentsCount: 8, _success: true }, // Control case\n    { colorAttachmentsCount: 9, _success: false }, // Out of bounds\n  ])\n  .fn(async t => {\n    const { colorAttachmentsCount, _success } = t.params;\n\n    const colorAttachments = [];\n    for (let i = 0; i < colorAttachmentsCount; i++) {\n      const colorTexture = t.createTexture();\n      colorAttachments.push(t.getColorAttachment(colorTexture));\n    }\n\n    await t.tryRenderPass(_success, { colorAttachments });\n  });\n\ng.test('attachments_must_have_the_same_size').fn(async t => {\n  const colorTexture1x1A = t.createTexture({ width: 1, height: 1, format: 'rgba8unorm' });\n  const colorTexture1x1B = t.createTexture({ width: 1, height: 1, format: 'rgba8unorm' });\n  const colorTexture2x2 = t.createTexture({ width: 2, height: 2, format: 'rgba8unorm' });\n  const depthStencilTexture1x1 = t.createTexture({\n    width: 1,\n    height: 1,\n    format: 'depth24plus-stencil8',\n  });\n  const depthStencilTexture2x2 = t.createTexture({\n    width: 2,\n    height: 2,\n    format: 'depth24plus-stencil8',\n  });\n\n  {\n    // Control case: all the same size (1x1)\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [\n        t.getColorAttachment(colorTexture1x1A),\n        t.getColorAttachment(colorTexture1x1B),\n      ],\n      depthStencilAttachment: t.getDepthStencilAttachment(depthStencilTexture1x1),\n    };\n\n    t.tryRenderPass(true, descriptor);\n  }\n  {\n    // One of the color attachments has a different size\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [\n        t.getColorAttachment(colorTexture1x1A),\n        t.getColorAttachment(colorTexture2x2),\n      ],\n    };\n\n    await t.tryRenderPass(false, descriptor);\n  }\n  {\n    // The depth stencil attachment has a different size\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [\n        t.getColorAttachment(colorTexture1x1A),\n        t.getColorAttachment(colorTexture1x1B),\n      ],\n      depthStencilAttachment: t.getDepthStencilAttachment(depthStencilTexture2x2),\n    };\n\n    await t.tryRenderPass(false, descriptor);\n  }\n});\n\ng.test('attachments_must_match_whether_they_are_used_for_color_or_depth_stencil').fn(async t => {\n  const colorTexture = t.createTexture({ format: 'rgba8unorm' });\n  const depthStencilTexture = t.createTexture({ format: 'depth24plus-stencil8' });\n\n  {\n    // Using depth-stencil for color\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [t.getColorAttachment(depthStencilTexture)],\n    };\n\n    await t.tryRenderPass(false, descriptor);\n  }\n  {\n    // Using color for depth-stencil\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [],\n      depthStencilAttachment: t.getDepthStencilAttachment(colorTexture),\n    };\n\n    await t.tryRenderPass(false, descriptor);\n  }\n});\n\ng.test('check_layer_count_for_color_or_depth_stencil')\n  .paramsSimple([\n    { arrayLayerCount: 5, baseArrayLayer: 0, _success: false }, // using 2D array texture view with arrayLayerCount > 1 is not allowed\n    { arrayLayerCount: 1, baseArrayLayer: 0, _success: true }, // using 2D array texture view that covers the first layer of the texture is OK\n    { arrayLayerCount: 1, baseArrayLayer: 9, _success: true }, // using 2D array texture view that covers the last layer is OK for depth stencil\n  ])\n  .fn(async t => {\n    const { arrayLayerCount, baseArrayLayer, _success } = t.params;\n\n    const ARRAY_LAYER_COUNT = 10;\n    const MIP_LEVEL_COUNT = 1;\n    const COLOR_FORMAT = 'rgba8unorm';\n    const DEPTH_STENCIL_FORMAT = 'depth24plus-stencil8';\n\n    const colorTexture = t.createTexture({\n      format: COLOR_FORMAT,\n      width: 32,\n      height: 32,\n      mipLevelCount: MIP_LEVEL_COUNT,\n      arrayLayerCount: ARRAY_LAYER_COUNT,\n    });\n    const depthStencilTexture = t.createTexture({\n      format: DEPTH_STENCIL_FORMAT,\n      width: 32,\n      height: 32,\n      mipLevelCount: MIP_LEVEL_COUNT,\n      arrayLayerCount: ARRAY_LAYER_COUNT,\n    });\n\n    const baseTextureViewDescriptor: GPUTextureViewDescriptor = {\n      dimension: '2d-array',\n      baseArrayLayer,\n      arrayLayerCount,\n      baseMipLevel: 0,\n      mipLevelCount: MIP_LEVEL_COUNT,\n    };\n\n    {\n      // Check 2D array texture view for color\n      const textureViewDescriptor: GPUTextureViewDescriptor = {\n        ...baseTextureViewDescriptor,\n        format: COLOR_FORMAT,\n      };\n\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [t.getColorAttachment(colorTexture, textureViewDescriptor)],\n      };\n\n      await t.tryRenderPass(_success, descriptor);\n    }\n    {\n      // Check 2D array texture view for depth stencil\n      const textureViewDescriptor: GPUTextureViewDescriptor = {\n        ...baseTextureViewDescriptor,\n        format: DEPTH_STENCIL_FORMAT,\n      };\n\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [],\n        depthStencilAttachment: t.getDepthStencilAttachment(\n          depthStencilTexture,\n          textureViewDescriptor\n        ),\n      };\n\n      await t.tryRenderPass(_success, descriptor);\n    }\n  });\n\ng.test('check_mip_level_count_for_color_or_depth_stencil')\n  .paramsSimple([\n    { mipLevelCount: 2, baseMipLevel: 0, _success: false }, // using 2D texture view with mipLevelCount > 1 is not allowed\n    { mipLevelCount: 1, baseMipLevel: 0, _success: true }, // using 2D texture view that covers the first level of the texture is OK\n    { mipLevelCount: 1, baseMipLevel: 3, _success: true }, // using 2D texture view that covers the last level of the texture is OK\n  ])\n  .fn(async t => {\n    const { mipLevelCount, baseMipLevel, _success } = t.params;\n\n    const ARRAY_LAYER_COUNT = 1;\n    const MIP_LEVEL_COUNT = 4;\n    const COLOR_FORMAT = 'rgba8unorm';\n    const DEPTH_STENCIL_FORMAT = 'depth24plus-stencil8';\n\n    const colorTexture = t.createTexture({\n      format: COLOR_FORMAT,\n      width: 32,\n      height: 32,\n      mipLevelCount: MIP_LEVEL_COUNT,\n      arrayLayerCount: ARRAY_LAYER_COUNT,\n    });\n    const depthStencilTexture = t.createTexture({\n      format: DEPTH_STENCIL_FORMAT,\n      width: 32,\n      height: 32,\n      mipLevelCount: MIP_LEVEL_COUNT,\n      arrayLayerCount: ARRAY_LAYER_COUNT,\n    });\n\n    const baseTextureViewDescriptor: GPUTextureViewDescriptor = {\n      dimension: '2d',\n      baseArrayLayer: 0,\n      arrayLayerCount: ARRAY_LAYER_COUNT,\n      baseMipLevel,\n      mipLevelCount,\n    };\n\n    {\n      // Check 2D texture view for color\n      const textureViewDescriptor: GPUTextureViewDescriptor = {\n        ...baseTextureViewDescriptor,\n        format: COLOR_FORMAT,\n      };\n\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [t.getColorAttachment(colorTexture, textureViewDescriptor)],\n      };\n\n      await t.tryRenderPass(_success, descriptor);\n    }\n    {\n      // Check 2D texture view for depth stencil\n      const textureViewDescriptor: GPUTextureViewDescriptor = {\n        ...baseTextureViewDescriptor,\n        format: DEPTH_STENCIL_FORMAT,\n      };\n\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [],\n        depthStencilAttachment: t.getDepthStencilAttachment(\n          depthStencilTexture,\n          textureViewDescriptor\n        ),\n      };\n\n      await t.tryRenderPass(_success, descriptor);\n    }\n  });\n\ng.test('it_is_invalid_to_set_resolve_target_if_color_attachment_is_non_multisampled').fn(\n  async t => {\n    const colorTexture = t.createTexture({ sampleCount: 1 });\n    const resolveTargetTexture = t.createTexture({ sampleCount: 1 });\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [\n        {\n          view: colorTexture.createView(),\n          resolveTarget: resolveTargetTexture.createView(),\n          loadValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n          storeOp: 'store',\n        },\n      ],\n    };\n\n    await t.tryRenderPass(false, descriptor);\n  }\n);\n\ng.test('check_the_use_of_multisampled_textures_as_color_attachments').fn(async t => {\n  const colorTexture = t.createTexture({ sampleCount: 1 });\n  const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n\n  {\n    // It is allowed to use a multisampled color attachment without setting resolve target\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [t.getColorAttachment(multisampledColorTexture)],\n    };\n    t.tryRenderPass(true, descriptor);\n  }\n  {\n    // It is not allowed to use multiple color attachments with different sample counts\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [\n        t.getColorAttachment(colorTexture),\n        t.getColorAttachment(multisampledColorTexture),\n      ],\n    };\n\n    await t.tryRenderPass(false, descriptor);\n  }\n});\n\ng.test('it_is_invalid_to_use_a_multisampled_resolve_target').fn(async t => {\n  const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n  const multisampledResolveTargetTexture = t.createTexture({ sampleCount: 4 });\n\n  const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n  colorAttachment.resolveTarget = multisampledResolveTargetTexture.createView();\n\n  const descriptor: GPURenderPassDescriptor = {\n    colorAttachments: [colorAttachment],\n  };\n\n  await t.tryRenderPass(false, descriptor);\n});\n\ng.test('it_is_invalid_to_use_a_resolve_target_with_array_layer_count_greater_than_1').fn(\n  async t => {\n    const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n    const resolveTargetTexture = t.createTexture({ arrayLayerCount: 2 });\n\n    const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n    colorAttachment.resolveTarget = resolveTargetTexture.createView({ dimension: '2d-array' });\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [colorAttachment],\n    };\n\n    await t.tryRenderPass(false, descriptor);\n  }\n);\n\ng.test('it_is_invalid_to_use_a_resolve_target_with_mipmap_level_count_greater_than_1').fn(\n  async t => {\n    const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n    const resolveTargetTexture = t.createTexture({ mipLevelCount: 2 });\n\n    const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n    colorAttachment.resolveTarget = resolveTargetTexture.createView();\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [colorAttachment],\n    };\n\n    await t.tryRenderPass(false, descriptor);\n  }\n);\n\ng.test('it_is_invalid_to_use_a_resolve_target_whose_usage_is_not_RENDER_ATTACHMENT').fn(async t => {\n  const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n  const resolveTargetTexture = t.createTexture({\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n  });\n\n  const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n  colorAttachment.resolveTarget = resolveTargetTexture.createView();\n\n  const descriptor: GPURenderPassDescriptor = {\n    colorAttachments: [colorAttachment],\n  };\n\n  await t.tryRenderPass(false, descriptor);\n});\n\ng.test('it_is_invalid_to_use_a_resolve_target_in_error_state').fn(async t => {\n  const ARRAY_LAYER_COUNT = 1;\n\n  const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n  const resolveTargetTexture = t.createTexture({ arrayLayerCount: ARRAY_LAYER_COUNT });\n\n  const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n  t.expectValidationError(() => {\n    colorAttachment.resolveTarget = resolveTargetTexture.createView({\n      dimension: '2d',\n      format: 'rgba8unorm',\n      baseArrayLayer: ARRAY_LAYER_COUNT + 1,\n    });\n  });\n\n  const descriptor: GPURenderPassDescriptor = {\n    colorAttachments: [colorAttachment],\n  };\n\n  await t.tryRenderPass(false, descriptor);\n});\n\ng.test('use_of_multisampled_attachment_and_non_multisampled_resolve_target_is_allowed').fn(\n  async t => {\n    const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n    const resolveTargetTexture = t.createTexture({ sampleCount: 1 });\n\n    const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n    colorAttachment.resolveTarget = resolveTargetTexture.createView();\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [colorAttachment],\n    };\n\n    t.tryRenderPass(true, descriptor);\n  }\n);\n\ng.test('use_a_resolve_target_in_a_format_different_than_the_attachment_is_not_allowed').fn(\n  async t => {\n    const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n    const resolveTargetTexture = t.createTexture({ format: 'bgra8unorm' });\n\n    const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n    colorAttachment.resolveTarget = resolveTargetTexture.createView();\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [colorAttachment],\n    };\n\n    await t.tryRenderPass(false, descriptor);\n  }\n);\n\ng.test('size_of_the_resolve_target_must_be_the_same_as_the_color_attachment').fn(async t => {\n  const size = 16;\n  const multisampledColorTexture = t.createTexture({ width: size, height: size, sampleCount: 4 });\n  const resolveTargetTexture = t.createTexture({\n    width: size * 2,\n    height: size * 2,\n    mipLevelCount: 2,\n  });\n\n  {\n    const resolveTargetTextureView = resolveTargetTexture.createView({\n      baseMipLevel: 0,\n      mipLevelCount: 1,\n    });\n\n    const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n    colorAttachment.resolveTarget = resolveTargetTextureView;\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [colorAttachment],\n    };\n\n    await t.tryRenderPass(false, descriptor);\n  }\n  {\n    const resolveTargetTextureView = resolveTargetTexture.createView({ baseMipLevel: 1 });\n\n    const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n    colorAttachment.resolveTarget = resolveTargetTextureView;\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [colorAttachment],\n    };\n\n    t.tryRenderPass(true, descriptor);\n  }\n});\n\ng.test('check_depth_stencil_attachment_sample_counts_mismatch').fn(async t => {\n  const multisampledDepthStencilTexture = t.createTexture({\n    sampleCount: 4,\n    format: 'depth24plus-stencil8',\n  });\n\n  {\n    // It is not allowed to use a depth stencil attachment whose sample count is different from the\n    // one of the color attachment\n    const depthStencilTexture = t.createTexture({\n      sampleCount: 1,\n      format: 'depth24plus-stencil8',\n    });\n    const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [t.getColorAttachment(multisampledColorTexture)],\n      depthStencilAttachment: t.getDepthStencilAttachment(depthStencilTexture),\n    };\n\n    await t.tryRenderPass(false, descriptor);\n  }\n  {\n    const colorTexture = t.createTexture({ sampleCount: 1 });\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [t.getColorAttachment(colorTexture)],\n      depthStencilAttachment: t.getDepthStencilAttachment(multisampledDepthStencilTexture),\n    };\n\n    await t.tryRenderPass(false, descriptor);\n  }\n  {\n    // It is allowed to use a multisampled depth stencil attachment whose sample count is equal to\n    // the one of the color attachment.\n    const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [t.getColorAttachment(multisampledColorTexture)],\n      depthStencilAttachment: t.getDepthStencilAttachment(multisampledDepthStencilTexture),\n    };\n\n    t.tryRenderPass(true, descriptor);\n  }\n  {\n    // It is allowed to use a multisampled depth stencil attachment with no color attachment\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [],\n      depthStencilAttachment: t.getDepthStencilAttachment(multisampledDepthStencilTexture),\n    };\n\n    t.tryRenderPass(true, descriptor);\n  }\n});\n"],"file":"render_pass_descriptor.spec.js"}