{"version":3,"sources":["../../../../src/webgpu/api/validation/compute_pipeline.spec.ts"],"names":["description","makeTestGroup","getShaderWithEntryPoint","ValidationTest","F","getShaderModule","shaderStage","entryPoint","device","createShaderModule","code","g","test","desc","params","u","combine","fn","t","isAsync","doCreateComputePipelineTest","layout","compute","module","createInvalidShaderModule","shaderModuleStage","descriptor","paramsSubcasesOnly","beforeAllSubcases","selectMismatchedDeviceOrSkipTestCase","undefined","mismatched","mismatchedDevice","createPipelineLayout","bindGroupLayouts","combineWithParams","type","_typeSize","beginSubcases","countDeltaFromLimit","countAtLimit","Math","floor","limits","maxComputeWorkgroupStorageSize","count","size","join","maxComputeInvocationsPerWorkgroup","_success","maxComputeWorkgroupSizeX","maxComputeWorkgroupSizeY","maxComputeWorkgroupSizeZ"],"mappings":"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","sourcesContent":["export const description = `\ncreateComputePipeline and createComputePipelineAsync validation tests.\n\nNote: entry point matching tests are in shader_module/entry_point.spec.ts\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { TShaderStage, getShaderWithEntryPoint } from '../../util/shader.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nclass F extends ValidationTest {\n  getShaderModule(\n    shaderStage: TShaderStage = 'compute',\n    entryPoint: string = 'main'\n  ): GPUShaderModule {\n    return this.device.createShaderModule({\n      code: getShaderWithEntryPoint(shaderStage, entryPoint),\n    });\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('basic')\n  .desc(\n    `\nControl case for createComputePipeline and createComputePipelineAsync.\nCall the API with valid compute shader and matching valid entryPoint, making sure that the test function working well.\n`\n  )\n  .params(u => u.combine('isAsync', [true, false]))\n  .fn(async t => {\n    const { isAsync } = t.params;\n    t.doCreateComputePipelineTest(isAsync, true, {\n      layout: 'auto',\n      compute: { module: t.getShaderModule('compute', 'main'), entryPoint: 'main' },\n    });\n  });\n\ng.test('shader_module,invalid')\n  .desc(\n    `\nTests calling createComputePipeline(Async) with a invalid compute shader, and check that the APIs catch this error.\n`\n  )\n  .params(u => u.combine('isAsync', [true, false]))\n  .fn(async t => {\n    const { isAsync } = t.params;\n    t.doCreateComputePipelineTest(isAsync, false, {\n      layout: 'auto',\n      compute: {\n        module: t.createInvalidShaderModule(),\n        entryPoint: 'main',\n      },\n    });\n  });\n\ng.test('shader_module,compute')\n  .desc(\n    `\nTests calling createComputePipeline(Async) with valid but different stage shader and matching entryPoint,\nand check that the APIs only accept compute shader.\n`\n  )\n  .params(u =>\n    u //\n      .combine('isAsync', [true, false])\n      .combine('shaderModuleStage', ['compute', 'vertex', 'fragment'] as TShaderStage[])\n  )\n  .fn(async t => {\n    const { isAsync, shaderModuleStage } = t.params;\n    const descriptor = {\n      layout: 'auto' as const,\n      compute: {\n        module: t.getShaderModule(shaderModuleStage, 'main'),\n        entryPoint: 'main',\n      },\n    };\n    t.doCreateComputePipelineTest(isAsync, shaderModuleStage === 'compute', descriptor);\n  });\n\ng.test('shader_module,device_mismatch')\n  .desc(\n    'Tests createComputePipeline(Async) cannot be called with a shader module created from another device'\n  )\n  .paramsSubcasesOnly(u => u.combine('isAsync', [true, false]).combine('mismatched', [true, false]))\n  .beforeAllSubcases(t => {\n    t.selectMismatchedDeviceOrSkipTestCase(undefined);\n  })\n  .fn(async t => {\n    const { isAsync, mismatched } = t.params;\n\n    const device = mismatched ? t.mismatchedDevice : t.device;\n\n    const module = device.createShaderModule({\n      code: '@compute @workgroup_size(1) fn main() {}',\n    });\n\n    const descriptor = {\n      layout: 'auto' as const,\n      compute: {\n        module,\n        entryPoint: 'main',\n      },\n    };\n\n    t.doCreateComputePipelineTest(isAsync, !mismatched, descriptor);\n  });\n\ng.test('pipeline_layout,device_mismatch')\n  .desc(\n    'Tests createComputePipeline(Async) cannot be called with a pipeline layout created from another device'\n  )\n  .paramsSubcasesOnly(u => u.combine('isAsync', [true, false]).combine('mismatched', [true, false]))\n  .beforeAllSubcases(t => {\n    t.selectMismatchedDeviceOrSkipTestCase(undefined);\n  })\n  .fn(async t => {\n    const { isAsync, mismatched } = t.params;\n    const device = mismatched ? t.mismatchedDevice : t.device;\n\n    const layout = device.createPipelineLayout({ bindGroupLayouts: [] });\n\n    const descriptor = {\n      layout,\n      compute: {\n        module: t.getShaderModule('compute', 'main'),\n        entryPoint: 'main',\n      },\n    };\n\n    t.doCreateComputePipelineTest(isAsync, !mismatched, descriptor);\n  });\n\ng.test('limits,workgroup_storage_size')\n  .desc(\n    `\nTests calling createComputePipeline(Async) validation for compute using <= device.limits.maxComputeWorkgroupStorageSize bytes of workgroup storage.\n`\n  )\n  .params(u =>\n    u //\n      .combine('isAsync', [true, false])\n      .combineWithParams([\n        { type: 'vec4<f32>', _typeSize: 16 },\n        { type: 'mat4x4<f32>', _typeSize: 64 },\n      ])\n      .beginSubcases()\n      .combine('countDeltaFromLimit', [0, 1])\n  )\n  .fn(async t => {\n    const { isAsync, type, _typeSize, countDeltaFromLimit } = t.params;\n    const countAtLimit = Math.floor(t.device.limits.maxComputeWorkgroupStorageSize / _typeSize);\n    const count = countAtLimit + countDeltaFromLimit;\n\n    const descriptor = {\n      layout: 'auto' as const,\n      compute: {\n        module: t.device.createShaderModule({\n          code: `\n          var<workgroup> data: array<${type}, ${count}>;\n          @compute @workgroup_size(64) fn main () {\n            _ = data;\n          }\n          `,\n        }),\n        entryPoint: 'main',\n      },\n    };\n    t.doCreateComputePipelineTest(isAsync, count <= countAtLimit, descriptor);\n  });\n\ng.test('limits,invocations_per_workgroup')\n  .desc(\n    `\nTests calling createComputePipeline(Async) validation for compute using <= device.limits.maxComputeInvocationsPerWorkgroup per workgroup.\n`\n  )\n  .params(u =>\n    u //\n      .combine('isAsync', [true, false])\n      .combine('size', [\n        // Assume maxComputeWorkgroupSizeX/Y >= 129, maxComputeWorkgroupSizeZ >= 33\n        [128, 1, 2],\n        [129, 1, 2],\n        [2, 128, 1],\n        [2, 129, 1],\n        [1, 8, 32],\n        [1, 8, 33],\n      ])\n  )\n  .fn(async t => {\n    const { isAsync, size } = t.params;\n\n    const descriptor = {\n      layout: 'auto' as const,\n      compute: {\n        module: t.device.createShaderModule({\n          code: `\n          @compute @workgroup_size(${size.join(',')}) fn main () {\n          }\n          `,\n        }),\n        entryPoint: 'main',\n      },\n    };\n\n    t.doCreateComputePipelineTest(\n      isAsync,\n      size[0] * size[1] * size[2] <= t.device.limits.maxComputeInvocationsPerWorkgroup,\n      descriptor\n    );\n  });\n\ng.test('limits,invocations_per_workgroup,each_component')\n  .desc(\n    `\nTests calling createComputePipeline(Async) validation for compute workgroup_size attribute has each component no more than their limits.\n`\n  )\n  .params(u =>\n    u //\n      .combine('isAsync', [true, false])\n      .combine('size', [\n        // Assume maxComputeInvocationsPerWorkgroup >= 256\n        [64],\n        [256, 1, 1],\n        [257, 1, 1],\n        [1, 256, 1],\n        [1, 257, 1],\n        [1, 1, 63],\n        [1, 1, 64],\n        [1, 1, 65],\n      ])\n  )\n  .fn(async t => {\n    const { isAsync, size } = t.params;\n\n    const descriptor = {\n      layout: 'auto' as const,\n      compute: {\n        module: t.device.createShaderModule({\n          code: `\n          @compute @workgroup_size(${size.join(',')}) fn main () {\n          }\n          `,\n        }),\n        entryPoint: 'main',\n      },\n    };\n\n    size[1] = size[1] ?? 1;\n    size[2] = size[2] ?? 1;\n\n    const _success =\n      size[0] <= t.device.limits.maxComputeWorkgroupSizeX &&\n      size[1] <= t.device.limits.maxComputeWorkgroupSizeY &&\n      size[2] <= t.device.limits.maxComputeWorkgroupSizeZ;\n    t.doCreateComputePipelineTest(isAsync, _success, descriptor);\n  });\n"],"file":"compute_pipeline.spec.js"}