{"version":3,"sources":["../../../../src/webgpu/api/validation/createRenderPipeline.spec.ts"],"names":["description","makeTestGroup","assert","unreachable","kTextureFormats","kRenderableColorTextureFormats","kTextureFormatInfo","kDepthStencilFormats","kCompareFunctions","kStencilOperations","kBlendFactors","kBlendOperations","getFragmentShaderCodeWithOutput","getPlainTypeInfo","kTexelRepresentationInfo","ValidationTest","values","F","getDescriptor","options","defaultTargets","format","topology","targets","sampleCount","depthStencil","fragmentShaderCode","plainType","sampleType","componentCount","noFragment","vertex","module","device","createShaderModule","code","entryPoint","fragment","undefined","layout","getPipelineLayout","primitive","multisample","count","createPipelineLayout","bindGroupLayouts","createTexture","params","size","width","height","depthOrArrayLayers","usage","GPUTextureUsage","RENDER_ATTACHMENT","doCreateRenderPipelineTest","isAsync","_success","descriptor","shouldResolve","createRenderPipelineAsync","shouldReject","expectValidationError","createRenderPipeline","g","test","desc","u","combine","fn","t","beginSubcases","depthStencilFormat","haveColor","depthStencilState","goodDescriptor","badDescriptor","beforeAllSubcases","info","selectDeviceOrSkipTestCase","feature","renderable","color","depth","stencil","depthCompare","depthTestEnabled","depthWriteEnabled","face","compare","stencilFront","stencilBack","stencilTestEnabled","faceAndOpType","op","failOp","depthFailOp","passOp","stencilWriteEnabled","combineWithParams","filter","p","hasShaderOutput","writeMask","sampleTypeSuccess","componentOrder","length","colorSrcFactor","colorDstFactor","alphaSrcFactor","alphaDstFactor","blend","srcFactor","dstFactor","operation","alpha","colorBlendReadsSrcAlpha","includes","meetsExtraBlendingRequirement","blendComponent","component","defaultBlendComponent","blendComponentToTest","paramsSubcasesOnly","selectMismatchedDeviceOrSkipTestCase","mismatched","mismatchedDevice","vertex_mismatched","fragment_mismatched","unimplemented"],"mappings":"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","sourcesContent":["export const description = `\ncreateRenderPipeline and createRenderPipelineAsync validation tests.\n\nTODO: review existing tests, write descriptions, and make sure tests are complete.\n      Make sure the following is covered. Consider splitting the file if too large/disjointed.\n> - various attachment problems\n>\n> - interface matching between vertex and fragment shader\n>     - superset, subset, etc.\n>\n> - vertex stage {valid, invalid}\n> - fragment stage {valid, invalid}\n> - primitive topology all possible values\n> - rasterizationState various values\n> - multisample count {0, 1, 3, 4, 8, 16, 1024}\n> - multisample mask {0, 0xFFFFFFFF}\n> - alphaToCoverage:\n>     - alphaToCoverageEnabled is { true, false } and sampleCount { = 1, = 4 }.\n>       The only failing case is (true, 1).\n>     - output SV_Coverage semantics is statically used by fragmentStage and\n>       alphaToCoverageEnabled is { true (fails), false (passes) }.\n>     - sampleMask is being used and alphaToCoverageEnabled is { true (fails), false (passes) }.\n\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { assert, unreachable } from '../../../common/util/util.js';\nimport {\n  kTextureFormats,\n  kRenderableColorTextureFormats,\n  kTextureFormatInfo,\n  kDepthStencilFormats,\n  kCompareFunctions,\n  kStencilOperations,\n  kBlendFactors,\n  kBlendOperations,\n} from '../../capability_info.js';\nimport { getFragmentShaderCodeWithOutput, getPlainTypeInfo } from '../../util/shader.js';\nimport { kTexelRepresentationInfo } from '../../util/texture/texel_data.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nconst values = [0, 1, 0, 1];\nclass F extends ValidationTest {\n  getDescriptor(\n    options: {\n      topology?: GPUPrimitiveTopology;\n      targets?: GPUColorTargetState[];\n      sampleCount?: number;\n      depthStencil?: GPUDepthStencilState;\n      fragmentShaderCode?: string;\n      noFragment?: boolean;\n    } = {}\n  ): GPURenderPipelineDescriptor {\n    const defaultTargets: GPUColorTargetState[] = [{ format: 'rgba8unorm' }];\n    const {\n      topology = 'triangle-list',\n      targets = defaultTargets,\n      sampleCount = 1,\n      depthStencil,\n      fragmentShaderCode = getFragmentShaderCodeWithOutput([\n        {\n          values,\n          plainType: getPlainTypeInfo(\n            kTextureFormatInfo[targets[0] ? targets[0].format : 'rgba8unorm'].sampleType\n          ),\n          componentCount: 4,\n        },\n      ]),\n      noFragment = false,\n    } = options;\n\n    return {\n      vertex: {\n        module: this.device.createShaderModule({\n          code: `\n            @stage(vertex) fn main() -> @builtin(position) vec4<f32> {\n              return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: noFragment\n        ? undefined\n        : {\n            module: this.device.createShaderModule({\n              code: fragmentShaderCode,\n            }),\n            entryPoint: 'main',\n            targets,\n          },\n      layout: this.getPipelineLayout(),\n      primitive: { topology },\n      multisample: { count: sampleCount },\n      depthStencil,\n    };\n  }\n\n  getPipelineLayout(): GPUPipelineLayout {\n    return this.device.createPipelineLayout({ bindGroupLayouts: [] });\n  }\n\n  createTexture(params: { format: GPUTextureFormat; sampleCount: number }): GPUTexture {\n    const { format, sampleCount } = params;\n\n    return this.device.createTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      format,\n      sampleCount,\n    });\n  }\n\n  doCreateRenderPipelineTest(\n    isAsync: boolean,\n    _success: boolean,\n    descriptor: GPURenderPipelineDescriptor\n  ) {\n    if (isAsync) {\n      if (_success) {\n        this.shouldResolve(this.device.createRenderPipelineAsync(descriptor));\n      } else {\n        this.shouldReject('OperationError', this.device.createRenderPipelineAsync(descriptor));\n      }\n    } else {\n      this.expectValidationError(() => {\n        this.device.createRenderPipeline(descriptor);\n      }, !_success);\n    }\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('basic_use_of_createRenderPipeline')\n  .desc(`TODO: review and add description; shorten name`)\n  .params(u => u.combine('isAsync', [false, true]))\n  .fn(async t => {\n    const { isAsync } = t.params;\n    const descriptor = t.getDescriptor();\n\n    t.doCreateRenderPipelineTest(isAsync, true, descriptor);\n  });\n\ng.test('create_vertex_only_pipeline_with_without_depth_stencil_state')\n  .desc(\n    `Test creating vertex-only render pipeline. A vertex-only render pipeline have no fragment\nstate (and thus have no color state), and can be create with or without depth stencil state.\n\nTODO: review and shorten name`\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .beginSubcases()\n      .combine('depthStencilFormat', [\n        'depth24plus',\n        'depth24plus-stencil8',\n        'depth32float',\n        '',\n      ] as const)\n      .combine('haveColor', [false, true])\n  )\n  .fn(async t => {\n    const { isAsync, depthStencilFormat, haveColor } = t.params;\n\n    let depthStencilState: GPUDepthStencilState | undefined;\n    if (depthStencilFormat === '') {\n      depthStencilState = undefined;\n    } else {\n      depthStencilState = { format: depthStencilFormat };\n    }\n\n    // Having targets or not should have no effect in result, since it will not appear in the\n    // descriptor in vertex-only render pipeline\n    const descriptor = t.getDescriptor({\n      noFragment: true,\n      depthStencil: depthStencilState,\n      targets: haveColor ? [{ format: 'rgba8unorm' }] : [],\n    });\n\n    t.doCreateRenderPipelineTest(isAsync, true, descriptor);\n  });\n\ng.test('at_least_one_color_state_is_required_for_complete_pipeline')\n  .desc(`TODO: review and add description; shorten name`)\n  .params(u => u.combine('isAsync', [false, true]))\n  .fn(async t => {\n    const { isAsync } = t.params;\n\n    const goodDescriptor = t.getDescriptor({\n      targets: [{ format: 'rgba8unorm' }],\n    });\n\n    // Control case\n    t.doCreateRenderPipelineTest(isAsync, true, goodDescriptor);\n\n    // Fail because lack of color states\n    const badDescriptor = t.getDescriptor({\n      targets: [],\n    });\n\n    t.doCreateRenderPipelineTest(isAsync, false, badDescriptor);\n  });\n\ng.test('color_formats_must_be_renderable')\n  .desc(`TODO: review and add description; shorten name`)\n  .params(u => u.combine('isAsync', [false, true]).combine('format', kTextureFormats))\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(async t => {\n    const { isAsync, format } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    const descriptor = t.getDescriptor({ targets: [{ format }] });\n\n    t.doCreateRenderPipelineTest(isAsync, info.renderable && info.color, descriptor);\n  });\n\ng.test('depth_stencil_state,format')\n  .desc(`The texture format in depthStencilState must be a depth/stencil format`)\n  .params(u => u.combine('isAsync', [false, true]).combine('format', kTextureFormats))\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(async t => {\n    const { isAsync, format } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    const descriptor = t.getDescriptor({ depthStencil: { format } });\n\n    t.doCreateRenderPipelineTest(isAsync, info.depth || info.stencil, descriptor);\n  });\n\ng.test('depth_stencil_state,depth_aspect,depth_test')\n  .desc(\n    `Depth aspect must be contained in the format if depth test is enabled in depthStencilState.`\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('format', kDepthStencilFormats)\n      .combine('depthCompare', [undefined, ...kCompareFunctions])\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(async t => {\n    const { isAsync, format, depthCompare } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    const descriptor = t.getDescriptor({\n      depthStencil: { format, depthCompare },\n    });\n\n    const depthTestEnabled = depthCompare !== undefined && depthCompare !== 'always';\n    t.doCreateRenderPipelineTest(isAsync, !depthTestEnabled || info.depth, descriptor);\n  });\n\ng.test('depth_stencil_state,depth_aspect,depth_write')\n  .desc(\n    `Depth aspect must be contained in the format if depth write is enabled in depthStencilState.`\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('format', kDepthStencilFormats)\n      .combine('depthWriteEnabled', [false, true])\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(async t => {\n    const { isAsync, format, depthWriteEnabled } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    const descriptor = t.getDescriptor({\n      depthStencil: { format, depthWriteEnabled },\n    });\n    t.doCreateRenderPipelineTest(isAsync, !depthWriteEnabled || info.depth, descriptor);\n  });\n\ng.test('depth_stencil_state,stencil_aspect,stencil_test')\n  .desc(\n    `Stencil aspect must be contained in the format if stencil test is enabled in depthStencilState.`\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('format', kDepthStencilFormats)\n      .combine('face', ['front', 'back'] as const)\n      .combine('compare', [undefined, ...kCompareFunctions])\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(async t => {\n    const { isAsync, format, face, compare } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    let descriptor: GPURenderPipelineDescriptor;\n    if (face === 'front') {\n      descriptor = t.getDescriptor({ depthStencil: { format, stencilFront: { compare } } });\n    } else {\n      descriptor = t.getDescriptor({ depthStencil: { format, stencilBack: { compare } } });\n    }\n\n    const stencilTestEnabled = compare !== undefined && compare !== 'always';\n    t.doCreateRenderPipelineTest(isAsync, !stencilTestEnabled || info.stencil, descriptor);\n  });\n\ng.test('depth_stencil_state,stencil_aspect,stencil_write')\n  .desc(\n    `Stencil aspect must be contained in the format if stencil write is enabled in depthStencilState.`\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('format', kDepthStencilFormats)\n      .combine('faceAndOpType', [\n        'frontFailOp',\n        'frontDepthFailOp',\n        'frontPassOp',\n        'backFailOp',\n        'backDepthFailOp',\n        'backPassOp',\n      ] as const)\n      .combine('op', [undefined, ...kStencilOperations])\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(async t => {\n    const { isAsync, format, faceAndOpType, op } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    let depthStencil: GPUDepthStencilState;\n    switch (faceAndOpType) {\n      case 'frontFailOp':\n        depthStencil = { format, stencilFront: { failOp: op } };\n        break;\n      case 'frontDepthFailOp':\n        depthStencil = { format, stencilFront: { depthFailOp: op } };\n        break;\n      case 'frontPassOp':\n        depthStencil = { format, stencilFront: { passOp: op } };\n        break;\n      case 'backFailOp':\n        depthStencil = { format, stencilBack: { failOp: op } };\n        break;\n      case 'backDepthFailOp':\n        depthStencil = { format, stencilBack: { depthFailOp: op } };\n        break;\n      case 'backPassOp':\n        depthStencil = { format, stencilBack: { passOp: op } };\n        break;\n      default:\n        unreachable();\n    }\n    const descriptor = t.getDescriptor({ depthStencil });\n\n    const stencilWriteEnabled = op !== undefined && op !== 'keep';\n    t.doCreateRenderPipelineTest(isAsync, !stencilWriteEnabled || info.stencil, descriptor);\n  });\n\ng.test('sample_count_must_be_valid')\n  .desc(`TODO: review and add description; shorten name`)\n  .params(u =>\n    u.combine('isAsync', [false, true]).combineWithParams([\n      { sampleCount: 0, _success: false },\n      { sampleCount: 1, _success: true },\n      { sampleCount: 2, _success: false },\n      { sampleCount: 3, _success: false },\n      { sampleCount: 4, _success: true },\n      { sampleCount: 8, _success: false },\n      { sampleCount: 16, _success: false },\n    ])\n  )\n  .fn(async t => {\n    const { isAsync, sampleCount, _success } = t.params;\n\n    const descriptor = t.getDescriptor({ sampleCount });\n\n    t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n  });\n\ng.test('pipeline_output_targets')\n  .desc(\n    `Pipeline fragment output types must be compatible with target color state format\n  - The scalar type (f32, i32, or u32) must match the sample type of the format.\n  - The componentCount of the fragment output (e.g. f32, vec2, vec3, vec4) must not have fewer\n    channels than that of the color attachment texture formats. Extra components are allowed and are discarded.\n\n  Otherwise, color state write mask must be 0.\n\n  MAINTENANCE_TODO: update this test after the WebGPU SPEC ISSUE 50 \"define what 'compatible' means\n  for render target formats\" is resolved.`\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('writeMask', [0, 0x1, 0x2, 0x4, 0x8, 0xf])\n      .combine('format', [undefined, ...kRenderableColorTextureFormats] as const)\n      .beginSubcases()\n      .combine('hasShaderOutput', [false, true])\n      .filter(p => p.format === undefined || p.hasShaderOutput === true)\n      .combine('sampleType', ['float', 'uint', 'sint'] as const)\n      .combine('componentCount', [1, 2, 3, 4])\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    if (format) {\n      const info = kTextureFormatInfo[format];\n      t.selectDeviceOrSkipTestCase(info.feature);\n    }\n  })\n  .fn(async t => {\n    const { isAsync, writeMask, format, hasShaderOutput, sampleType, componentCount } = t.params;\n    const info = format ? kTextureFormatInfo[format] : null;\n\n    const descriptor = t.getDescriptor({\n      targets: format ? [{ format, writeMask }] : [],\n      // To have a dummy depthStencil attachment to avoid having no attachment at all which is invalid\n      depthStencil: { format: 'depth24plus' },\n      fragmentShaderCode: getFragmentShaderCodeWithOutput(\n        hasShaderOutput ? [{ values, plainType: getPlainTypeInfo(sampleType), componentCount }] : []\n      ),\n    });\n\n    let _success = true;\n    if (hasShaderOutput && info) {\n      // there is a target correspond to the pipeline output\n      assert(format !== undefined);\n      const sampleTypeSuccess =\n        info.sampleType === 'float' || info.sampleType === 'unfilterable-float'\n          ? sampleType === 'float'\n          : info.sampleType === sampleType;\n      _success =\n        sampleTypeSuccess &&\n        componentCount >= kTexelRepresentationInfo[format].componentOrder.length;\n    }\n\n    t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n  });\n\ng.test('pipeline_output_targets,blend')\n  .desc(\n    `On top of requirements from pipeline_output_targets, when blending is enabled and alpha channel is read indicated by any blend factor, an extra requirement is added:\n  - fragment output must be vec4.\n  `\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('format', ['r8unorm', 'rg8unorm', 'rgba8unorm', 'bgra8unorm'] as const)\n      .beginSubcases()\n      .combine('componentCount', [1, 2, 3, 4])\n      .combineWithParams([\n        // extra requirement does not apply\n        {\n          colorSrcFactor: 'one',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'zero',\n        },\n        {\n          colorSrcFactor: 'dst-alpha',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'zero',\n        },\n        // extra requirement applies, fragment output must be vec4 (contain alpha channel)\n        {\n          colorSrcFactor: 'src-alpha',\n          colorDstFactor: 'one',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'zero',\n        },\n        {\n          colorSrcFactor: 'one',\n          colorDstFactor: 'one-minus-src-alpha',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'zero',\n        },\n        {\n          colorSrcFactor: 'src-alpha-saturated',\n          colorDstFactor: 'one',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'zero',\n        },\n        {\n          colorSrcFactor: 'one',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'one',\n          alphaDstFactor: 'zero',\n        },\n        {\n          colorSrcFactor: 'one',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'src',\n        },\n        {\n          colorSrcFactor: 'one',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'src-alpha',\n        },\n      ] as const)\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(async t => {\n    const sampleType = 'float';\n    const {\n      isAsync,\n      format,\n      componentCount,\n      colorSrcFactor,\n      colorDstFactor,\n      alphaSrcFactor,\n      alphaDstFactor,\n    } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    const descriptor = t.getDescriptor({\n      targets: [\n        {\n          format,\n          blend: {\n            color: {\n              srcFactor: colorSrcFactor,\n              dstFactor: colorDstFactor,\n              operation: 'add',\n            },\n            alpha: {\n              srcFactor: alphaSrcFactor,\n              dstFactor: alphaDstFactor,\n              operation: 'add',\n            },\n          },\n        },\n      ],\n      fragmentShaderCode: getFragmentShaderCodeWithOutput([\n        { values, plainType: getPlainTypeInfo(sampleType), componentCount },\n      ]),\n    });\n\n    const colorBlendReadsSrcAlpha =\n      colorSrcFactor.includes('src-alpha') || colorDstFactor.includes('src-alpha');\n    const meetsExtraBlendingRequirement = !colorBlendReadsSrcAlpha || componentCount === 4;\n    const _success =\n      info.sampleType === sampleType &&\n      componentCount >= kTexelRepresentationInfo[format].componentOrder.length &&\n      meetsExtraBlendingRequirement;\n    t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n  });\n\ng.test('pipeline_output_targets,format_blendable')\n  .desc(\n    `\nTests if blending is used, the target's format must be blendable (support \"float\" sample type).\n- For all the formats, test that blending can be enabled if and only if the format is blendable.`\n  )\n  .params(u =>\n    u.combine('isAsync', [false, true]).combine('format', kRenderableColorTextureFormats)\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(async t => {\n    const { isAsync, format } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    const _success = info.sampleType === 'float';\n\n    const blendComponent: GPUBlendComponent = {\n      srcFactor: 'src-alpha',\n      dstFactor: 'dst-alpha',\n      operation: 'add',\n    };\n    t.doCreateRenderPipelineTest(\n      isAsync,\n      _success,\n      t.getDescriptor({\n        targets: [\n          {\n            format,\n            blend: {\n              color: blendComponent,\n              alpha: blendComponent,\n            },\n          },\n        ],\n        fragmentShaderCode: getFragmentShaderCodeWithOutput([\n          { values, plainType: getPlainTypeInfo(info.sampleType), componentCount: 4 },\n        ]),\n      })\n    );\n  });\n\ng.test('pipeline_output_targets,blend_min_max')\n  .desc(\n    `\n  For the blend components on either GPUBlendState.color or GPUBlendState.alpha:\n  - Tests if the combination of 'srcFactor', 'dstFactor' and 'operation' is valid (if the blend\n    operation is \"min\" or \"max\", srcFactor and dstFactor must be \"one\").\n  `\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('component', ['color', 'alpha'] as const)\n      .beginSubcases()\n      .combine('srcFactor', kBlendFactors)\n      .combine('dstFactor', kBlendFactors)\n      .combine('operation', kBlendOperations)\n  )\n  .fn(async t => {\n    const { isAsync, component, srcFactor, dstFactor, operation } = t.params;\n\n    const defaultBlendComponent: GPUBlendComponent = {\n      srcFactor: 'src-alpha',\n      dstFactor: 'dst-alpha',\n      operation: 'add',\n    };\n    const blendComponentToTest = {\n      srcFactor,\n      dstFactor,\n      operation,\n    };\n    const format = 'rgba8unorm';\n    const fragmentShaderCode = getFragmentShaderCodeWithOutput([\n      { values, plainType: 'f32', componentCount: 4 },\n    ]);\n\n    const descriptor = t.getDescriptor({\n      targets: [\n        {\n          format,\n          blend: {\n            color: component === 'color' ? blendComponentToTest : defaultBlendComponent,\n            alpha: component === 'alpha' ? blendComponentToTest : defaultBlendComponent,\n          },\n        },\n      ],\n      fragmentShaderCode,\n    });\n\n    if (operation === 'min' || operation === 'max') {\n      const _success = srcFactor === 'one' && dstFactor === 'one';\n      t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n    } else {\n      t.doCreateRenderPipelineTest(isAsync, true, descriptor);\n    }\n  });\n\ng.test('pipeline_layout,device_mismatch')\n  .desc(\n    'Tests createRenderPipeline(Async) cannot be called with a pipeline layout created from another device'\n  )\n  .paramsSubcasesOnly(u => u.combine('isAsync', [true, false]).combine('mismatched', [true, false]))\n  .beforeAllSubcases(t => {\n    t.selectMismatchedDeviceOrSkipTestCase(undefined);\n  })\n  .fn(async t => {\n    const { isAsync, mismatched } = t.params;\n\n    const device = mismatched ? t.mismatchedDevice : t.device;\n\n    const layout = device.createPipelineLayout({ bindGroupLayouts: [] });\n\n    const format = 'rgba8unorm';\n    const descriptor = {\n      layout,\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n        @stage(vertex) fn main() -> @builtin(position) vec4<f32> {\n          return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n        }\n      `,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: getFragmentShaderCodeWithOutput([{ values, plainType: 'f32', componentCount: 4 }]),\n        }),\n        entryPoint: 'main',\n        targets: [{ format }] as const,\n      },\n    };\n\n    t.doCreateRenderPipelineTest(isAsync, !mismatched, descriptor);\n  });\n\ng.test('shader_module,device_mismatch')\n  .desc(\n    'Tests createRenderPipeline(Async) cannot be called with a shader module created from another device'\n  )\n  .paramsSubcasesOnly(u =>\n    u.combine('isAsync', [true, false]).combineWithParams([\n      { vertex_mismatched: false, fragment_mismatched: false, _success: true },\n      { vertex_mismatched: true, fragment_mismatched: false, _success: false },\n      { vertex_mismatched: false, fragment_mismatched: true, _success: false },\n    ])\n  )\n  .beforeAllSubcases(t => {\n    t.selectMismatchedDeviceOrSkipTestCase(undefined);\n  })\n  .fn(async t => {\n    const { isAsync, vertex_mismatched, fragment_mismatched, _success } = t.params;\n\n    const code = `\n      @stage(vertex) fn main() -> @builtin(position) vec4<f32> {\n        return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n      }\n    `;\n\n    const descriptor = {\n      vertex: {\n        module: vertex_mismatched\n          ? t.mismatchedDevice.createShaderModule({ code })\n          : t.device.createShaderModule({ code }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: fragment_mismatched\n          ? t.mismatchedDevice.createShaderModule({\n              code: getFragmentShaderCodeWithOutput([\n                { values, plainType: 'f32', componentCount: 4 },\n              ]),\n            })\n          : t.device.createShaderModule({\n              code: getFragmentShaderCodeWithOutput([\n                { values, plainType: 'f32', componentCount: 4 },\n              ]),\n            }),\n        entryPoint: 'main',\n        targets: [{ format: 'rgba8unorm' }] as const,\n      },\n      layout: t.getPipelineLayout(),\n    };\n\n    t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n  });\n\ng.test('entry_point_name_must_match')\n  .desc(\n    'TODO: Test the matching of entrypoint names for vertex and fragment (see the equivalent test for createComputePipeline).'\n  )\n  .unimplemented();\n"],"file":"createRenderPipeline.spec.js"}