{"version":3,"sources":["../../../../src/webgpu/api/validation/createRenderPipeline.spec.ts"],"names":["description","makeTestGroup","unreachable","kTextureFormats","kRenderableColorTextureFormats","kTextureFormatInfo","kDepthStencilFormats","kCompareFunctions","kStencilOperations","kTexelRepresentationInfo","ValidationTest","F","getFragmentShaderCode","sampleType","componentCount","v","fragColorType","suffix","outputType","result","getDescriptor","options","defaultTargets","format","topology","targets","sampleCount","depthStencil","fragmentShaderCode","noFragment","vertex","module","device","createShaderModule","code","entryPoint","fragment","undefined","layout","getPipelineLayout","primitive","multisample","count","createPipelineLayout","bindGroupLayouts","createTexture","params","size","width","height","depthOrArrayLayers","usage","GPUTextureUsage","RENDER_ATTACHMENT","doCreateRenderPipelineTest","isAsync","_success","descriptor","shouldResolve","createRenderPipelineAsync","shouldReject","expectValidationError","createRenderPipeline","g","test","desc","u","combine","fn","t","beginSubcases","depthStencilFormat","haveColor","depthStencilState","goodDescriptor","badDescriptor","info","selectDeviceOrSkipTestCase","feature","renderable","color","depth","stencil","depthCompare","depthTestEnabled","depthWriteEnabled","face","compare","stencilFront","stencilBack","stencilTestEnabled","faceAndOpType","op","failOp","depthFailOp","passOp","stencilWriteEnabled","combineWithParams","componentOrder","length","colorSrcFactor","colorDstFactor","alphaSrcFactor","alphaDstFactor","blend","srcFactor","dstFactor","operation","alpha","colorBlendReadsSrcAlpha","includes","meetsExtraBlendingRequirement","unimplemented","paramsSubcasesOnly","mismatched","selectMismatchedDeviceOrSkipTestCase","layoutDescriptor","mismatchedDevice","vertex_mismatched","fragment_mismatched"],"mappings":"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","sourcesContent":["export const description = `\ncreateRenderPipeline and createRenderPipelineAsync validation tests.\n\nTODO: review existing tests, write descriptions, and make sure tests are complete.\n      Make sure the following is covered. Consider splitting the file if too large/disjointed.\n> - various attachment problems\n>\n> - interface matching between vertex and fragment shader\n>     - superset, subset, etc.\n>\n> - vertex stage {valid, invalid}\n> - fragment stage {valid, invalid}\n> - primitive topology all possible values\n> - rasterizationState various values\n> - multisample count {0, 1, 3, 4, 8, 16, 1024}\n> - multisample mask {0, 0xFFFFFFFF}\n> - alphaToCoverage:\n>     - alphaToCoverageEnabled is { true, false } and sampleCount { = 1, = 4 }.\n>       The only failing case is (true, 1).\n>     - output SV_Coverage semantics is statically used by fragmentStage and\n>       alphaToCoverageEnabled is { true (fails), false (passes) }.\n>     - sampleMask is being used and alphaToCoverageEnabled is { true (fails), false (passes) }.\n\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { unreachable } from '../../../common/util/util.js';\nimport {\n  kTextureFormats,\n  kRenderableColorTextureFormats,\n  kTextureFormatInfo,\n  kDepthStencilFormats,\n  kCompareFunctions,\n  kStencilOperations,\n} from '../../capability_info.js';\nimport { kTexelRepresentationInfo } from '../../util/texture/texel_data.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nclass F extends ValidationTest {\n  getFragmentShaderCode(sampleType: GPUTextureSampleType, componentCount: number): string {\n    const v = ['0', '1', '0', '1'];\n\n    let fragColorType;\n    let suffix;\n    switch (sampleType) {\n      case 'sint':\n        fragColorType = 'i32';\n        suffix = '';\n        break;\n      case 'uint':\n        fragColorType = 'u32';\n        suffix = 'u';\n        break;\n      default:\n        fragColorType = 'f32';\n        suffix = '.0';\n        break;\n    }\n\n    let outputType;\n    let result;\n    switch (componentCount) {\n      case 1:\n        outputType = fragColorType;\n        result = `${v[0]}${suffix}`;\n        break;\n      case 2:\n        outputType = `vec2<${fragColorType}>`;\n        result = `${outputType}(${v[0]}${suffix}, ${v[1]}${suffix})`;\n        break;\n      case 3:\n        outputType = `vec3<${fragColorType}>`;\n        result = `${outputType}(${v[0]}${suffix}, ${v[1]}${suffix}, ${v[2]}${suffix})`;\n        break;\n      case 4:\n        outputType = `vec4<${fragColorType}>`;\n        result = `${outputType}(${v[0]}${suffix}, ${v[1]}${suffix}, ${v[2]}${suffix}, ${v[3]}${suffix})`;\n        break;\n      default:\n        unreachable();\n    }\n\n    return `\n    [[stage(fragment)]] fn main() -> [[location(0)]] ${outputType} {\n      return ${result};\n    }`;\n  }\n\n  getDescriptor(\n    options: {\n      topology?: GPUPrimitiveTopology;\n      targets?: GPUColorTargetState[];\n      sampleCount?: number;\n      depthStencil?: GPUDepthStencilState;\n      fragmentShaderCode?: string;\n      noFragment?: boolean;\n    } = {}\n  ): GPURenderPipelineDescriptor {\n    const defaultTargets: GPUColorTargetState[] = [{ format: 'rgba8unorm' }];\n    const {\n      topology = 'triangle-list',\n      targets = defaultTargets,\n      sampleCount = 1,\n      depthStencil,\n      fragmentShaderCode = this.getFragmentShaderCode(\n        kTextureFormatInfo[targets[0] ? targets[0].format : 'rgba8unorm'].sampleType,\n        4\n      ),\n      noFragment = false,\n    } = options;\n\n    return {\n      vertex: {\n        module: this.device.createShaderModule({\n          code: `\n            [[stage(vertex)]] fn main() -> [[builtin(position)]] vec4<f32> {\n              return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: noFragment\n        ? undefined\n        : {\n            module: this.device.createShaderModule({\n              code: fragmentShaderCode,\n            }),\n            entryPoint: 'main',\n            targets,\n          },\n      layout: this.getPipelineLayout(),\n      primitive: { topology },\n      multisample: { count: sampleCount },\n      depthStencil,\n    };\n  }\n\n  getPipelineLayout(): GPUPipelineLayout {\n    return this.device.createPipelineLayout({ bindGroupLayouts: [] });\n  }\n\n  createTexture(params: { format: GPUTextureFormat; sampleCount: number }): GPUTexture {\n    const { format, sampleCount } = params;\n\n    return this.device.createTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      format,\n      sampleCount,\n    });\n  }\n\n  doCreateRenderPipelineTest(\n    isAsync: boolean,\n    _success: boolean,\n    descriptor: GPURenderPipelineDescriptor\n  ) {\n    if (isAsync) {\n      if (_success) {\n        this.shouldResolve(this.device.createRenderPipelineAsync(descriptor));\n      } else {\n        this.shouldReject('OperationError', this.device.createRenderPipelineAsync(descriptor));\n      }\n    } else {\n      this.expectValidationError(() => {\n        this.device.createRenderPipeline(descriptor);\n      }, !_success);\n    }\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('basic_use_of_createRenderPipeline')\n  .desc(`TODO: review and add description; shorten name`)\n  .params(u => u.combine('isAsync', [false, true]))\n  .fn(async t => {\n    const { isAsync } = t.params;\n    const descriptor = t.getDescriptor();\n\n    t.doCreateRenderPipelineTest(isAsync, true, descriptor);\n  });\n\ng.test('create_vertex_only_pipeline_with_without_depth_stencil_state')\n  .desc(\n    `Test creating vertex-only render pipeline. A vertex-only render pipeline have no fragment\nstate (and thus have no color state), and can be create with or without depth stencil state.\n\nTODO: review and shorten name`\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .beginSubcases()\n      .combine('depthStencilFormat', [\n        'depth24plus',\n        'depth24plus-stencil8',\n        'depth32float',\n        '',\n      ] as const)\n      .combine('haveColor', [false, true])\n  )\n  .fn(async t => {\n    const { isAsync, depthStencilFormat, haveColor } = t.params;\n\n    let depthStencilState: GPUDepthStencilState | undefined;\n    if (depthStencilFormat === '') {\n      depthStencilState = undefined;\n    } else {\n      depthStencilState = { format: depthStencilFormat };\n    }\n\n    // Having targets or not should have no effect in result, since it will not appear in the\n    // descriptor in vertex-only render pipeline\n    const descriptor = t.getDescriptor({\n      noFragment: true,\n      depthStencil: depthStencilState,\n      targets: haveColor ? [{ format: 'rgba8unorm' }] : [],\n    });\n\n    t.doCreateRenderPipelineTest(isAsync, true, descriptor);\n  });\n\ng.test('at_least_one_color_state_is_required_for_complete_pipeline')\n  .desc(`TODO: review and add description; shorten name`)\n  .params(u => u.combine('isAsync', [false, true]))\n  .fn(async t => {\n    const { isAsync } = t.params;\n\n    const goodDescriptor = t.getDescriptor({\n      targets: [{ format: 'rgba8unorm' }],\n    });\n\n    // Control case\n    t.doCreateRenderPipelineTest(isAsync, true, goodDescriptor);\n\n    // Fail because lack of color states\n    const badDescriptor = t.getDescriptor({\n      targets: [],\n    });\n\n    t.doCreateRenderPipelineTest(isAsync, false, badDescriptor);\n  });\n\ng.test('color_formats_must_be_renderable')\n  .desc(`TODO: review and add description; shorten name`)\n  .params(u => u.combine('isAsync', [false, true]).combine('format', kTextureFormats))\n  .fn(async t => {\n    const { isAsync, format } = t.params;\n    const info = kTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    const descriptor = t.getDescriptor({ targets: [{ format }] });\n\n    t.doCreateRenderPipelineTest(isAsync, info.renderable && info.color, descriptor);\n  });\n\ng.test('depth_stencil_state,format')\n  .desc(`The texture format in depthStencilState must be a depth/stencil format`)\n  .params(u => u.combine('isAsync', [false, true]).combine('format', kTextureFormats))\n  .fn(async t => {\n    const { isAsync, format } = t.params;\n    const info = kTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    const descriptor = t.getDescriptor({ depthStencil: { format } });\n\n    t.doCreateRenderPipelineTest(isAsync, info.depth || info.stencil, descriptor);\n  });\n\ng.test('depth_stencil_state,depth_aspect,depth_test')\n  .desc(\n    `Depth aspect must be contained in the format if depth test is enabled in depthStencilState.`\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('format', kDepthStencilFormats)\n      .combine('depthCompare', [undefined, ...kCompareFunctions])\n  )\n  .fn(async t => {\n    const { isAsync, format, depthCompare } = t.params;\n    const info = kTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    const descriptor = t.getDescriptor({\n      depthStencil: { format, depthCompare },\n    });\n\n    const depthTestEnabled = depthCompare !== undefined && depthCompare !== 'always';\n    t.doCreateRenderPipelineTest(isAsync, !depthTestEnabled || info.depth, descriptor);\n  });\n\ng.test('depth_stencil_state,depth_aspect,depth_write')\n  .desc(\n    `Depth aspect must be contained in the format if depth write is enabled in depthStencilState.`\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('format', kDepthStencilFormats)\n      .combine('depthWriteEnabled', [false, true])\n  )\n  .fn(async t => {\n    const { isAsync, format, depthWriteEnabled } = t.params;\n    const info = kTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    const descriptor = t.getDescriptor({\n      depthStencil: { format, depthWriteEnabled },\n    });\n    t.doCreateRenderPipelineTest(isAsync, !depthWriteEnabled || info.depth, descriptor);\n  });\n\ng.test('depth_stencil_state,stencil_aspect,stencil_test')\n  .desc(\n    `Stencil aspect must be contained in the format if stencil test is enabled in depthStencilState.`\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('format', kDepthStencilFormats)\n      .combine('face', ['front', 'back'] as const)\n      .combine('compare', [undefined, ...kCompareFunctions])\n  )\n  .fn(async t => {\n    const { isAsync, format, face, compare } = t.params;\n    const info = kTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    let descriptor: GPURenderPipelineDescriptor;\n    if (face === 'front') {\n      descriptor = t.getDescriptor({ depthStencil: { format, stencilFront: { compare } } });\n    } else {\n      descriptor = t.getDescriptor({ depthStencil: { format, stencilBack: { compare } } });\n    }\n\n    const stencilTestEnabled = compare !== undefined && compare !== 'always';\n    t.doCreateRenderPipelineTest(isAsync, !stencilTestEnabled || info.stencil, descriptor);\n  });\n\ng.test('depth_stencil_state,stencil_aspect,stencil_write')\n  .desc(\n    `Stencil aspect must be contained in the format if stencil write is enabled in depthStencilState.`\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('format', kDepthStencilFormats)\n      .combine('faceAndOpType', [\n        'frontFailOp',\n        'frontDepthFailOp',\n        'frontPassOp',\n        'backFailOp',\n        'backDepthFailOp',\n        'backPassOp',\n      ] as const)\n      .combine('op', [undefined, ...kStencilOperations])\n  )\n  .fn(async t => {\n    const { isAsync, format, faceAndOpType, op } = t.params;\n    const info = kTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    let depthStencil: GPUDepthStencilState;\n    switch (faceAndOpType) {\n      case 'frontFailOp':\n        depthStencil = { format, stencilFront: { failOp: op } };\n        break;\n      case 'frontDepthFailOp':\n        depthStencil = { format, stencilFront: { depthFailOp: op } };\n        break;\n      case 'frontPassOp':\n        depthStencil = { format, stencilFront: { passOp: op } };\n        break;\n      case 'backFailOp':\n        depthStencil = { format, stencilBack: { failOp: op } };\n        break;\n      case 'backDepthFailOp':\n        depthStencil = { format, stencilBack: { depthFailOp: op } };\n        break;\n      case 'backPassOp':\n        depthStencil = { format, stencilBack: { passOp: op } };\n        break;\n      default:\n        unreachable();\n    }\n    const descriptor = t.getDescriptor({ depthStencil });\n\n    const stencilWriteEnabled = op !== undefined && op !== 'keep';\n    t.doCreateRenderPipelineTest(isAsync, !stencilWriteEnabled || info.stencil, descriptor);\n  });\n\ng.test('sample_count_must_be_valid')\n  .desc(`TODO: review and add description; shorten name`)\n  .params(u =>\n    u.combine('isAsync', [false, true]).combineWithParams([\n      { sampleCount: 0, _success: false },\n      { sampleCount: 1, _success: true },\n      { sampleCount: 2, _success: false },\n      { sampleCount: 3, _success: false },\n      { sampleCount: 4, _success: true },\n      { sampleCount: 8, _success: false },\n      { sampleCount: 16, _success: false },\n    ])\n  )\n  .fn(async t => {\n    const { isAsync, sampleCount, _success } = t.params;\n\n    const descriptor = t.getDescriptor({ sampleCount });\n\n    t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n  });\n\ng.test('pipeline_output_targets')\n  .desc(\n    `Pipeline fragment output types must be compatible with target color state format\n  - The scalar type (f32, i32, or u32) must match the sample type of the format.\n  - The componentCount of the fragment output (e.g. f32, vec2, vec3, vec4) must not have fewer\n    channels than that of the color attachment texture formats. Extra components are allowed and are discarded.\n\nTODO: review`\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('format', kRenderableColorTextureFormats)\n      .beginSubcases()\n      .combine('sampleType', ['float', 'uint', 'sint'] as const)\n      .combine('componentCount', [1, 2, 3, 4])\n  )\n  .fn(async t => {\n    const { isAsync, format, sampleType, componentCount } = t.params;\n    const info = kTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    const descriptor = t.getDescriptor({\n      targets: [{ format }],\n      fragmentShaderCode: t.getFragmentShaderCode(sampleType, componentCount),\n    });\n\n    const _success =\n      info.sampleType === sampleType &&\n      componentCount >= kTexelRepresentationInfo[format].componentOrder.length;\n    t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n  });\n\ng.test('pipeline_output_targets,blend')\n  .desc(\n    `On top of requirements from pipeline_output_targets, when blending is enabled and alpha channel is read indicated by any blend factor, an extra requirement is added:\n  - fragment output must be vec4.\n  `\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('format', ['r8unorm', 'rg8unorm', 'rgba8unorm', 'bgra8unorm'] as const)\n      .beginSubcases()\n      .combine('componentCount', [1, 2, 3, 4])\n      .combineWithParams([\n        // extra requirement does not apply\n        {\n          colorSrcFactor: 'one',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'zero',\n        },\n        {\n          colorSrcFactor: 'dst-alpha',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'zero',\n        },\n        // extra requirement applies, fragment output must be vec4 (contain alpha channel)\n        {\n          colorSrcFactor: 'src-alpha',\n          colorDstFactor: 'one',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'zero',\n        },\n        {\n          colorSrcFactor: 'one',\n          colorDstFactor: 'one-minus-src-alpha',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'zero',\n        },\n        {\n          colorSrcFactor: 'src-alpha-saturated',\n          colorDstFactor: 'one',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'zero',\n        },\n        {\n          colorSrcFactor: 'one',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'one',\n          alphaDstFactor: 'zero',\n        },\n        {\n          colorSrcFactor: 'one',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'src',\n        },\n        {\n          colorSrcFactor: 'one',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'src-alpha',\n        },\n      ] as const)\n  )\n  .fn(async t => {\n    const sampleType = 'float';\n    const {\n      isAsync,\n      format,\n      componentCount,\n      colorSrcFactor,\n      colorDstFactor,\n      alphaSrcFactor,\n      alphaDstFactor,\n    } = t.params;\n    const info = kTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    const descriptor = t.getDescriptor({\n      targets: [\n        {\n          format,\n          blend: {\n            color: {\n              srcFactor: colorSrcFactor,\n              dstFactor: colorDstFactor,\n              operation: 'add',\n            },\n            alpha: {\n              srcFactor: alphaSrcFactor,\n              dstFactor: alphaDstFactor,\n              operation: 'add',\n            },\n          },\n        },\n      ],\n      fragmentShaderCode: t.getFragmentShaderCode(sampleType, componentCount),\n    });\n\n    const colorBlendReadsSrcAlpha =\n      colorSrcFactor.includes('src-alpha') || colorDstFactor.includes('src-alpha');\n    const meetsExtraBlendingRequirement = !colorBlendReadsSrcAlpha || componentCount === 4;\n    const _success =\n      info.sampleType === sampleType &&\n      componentCount >= kTexelRepresentationInfo[format].componentOrder.length &&\n      meetsExtraBlendingRequirement;\n    t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n  });\n\ng.test('pipeline_output_targets,format_blendable')\n  .desc(`If blending is used, the target's format must be blendable (support \"float\" sample type).`)\n  .unimplemented();\n\ng.test('pipeline_output_targets,blend_min_max')\n  .desc(`If the blend operation is \"min\" or \"max\", srcFactor and dstFactor must be \"one\".`)\n  .unimplemented();\n\ng.test('pipeline_layout,device_mismatch')\n  .desc(\n    'Tests createRenderPipeline(Async) cannot be called with a pipeline layout created from another device'\n  )\n  .paramsSubcasesOnly(u => u.combine('isAsync', [true, false]).combine('mismatched', [true, false]))\n  .fn(async t => {\n    const { isAsync, mismatched } = t.params;\n\n    if (mismatched) {\n      await t.selectMismatchedDeviceOrSkipTestCase(undefined);\n    }\n\n    const layoutDescriptor = { bindGroupLayouts: [] };\n    const layout = mismatched\n      ? t.mismatchedDevice.createPipelineLayout(layoutDescriptor)\n      : t.device.createPipelineLayout(layoutDescriptor);\n\n    const descriptor = {\n      layout,\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n        [[stage(vertex)]] fn main() -> [[builtin(position)]] vec4<f32> {\n          return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n        }\n      `,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({ code: t.getFragmentShaderCode('float', 4) }),\n        entryPoint: 'main',\n        targets: [{ format: 'rgba8unorm' }] as const,\n      },\n    };\n\n    t.doCreateRenderPipelineTest(isAsync, !mismatched, descriptor);\n  });\n\ng.test('shader_module,device_mismatch')\n  .desc(\n    'Tests createRenderPipeline(Async) cannot be called with a shader module created from another device'\n  )\n  .paramsSubcasesOnly(u =>\n    u.combine('isAsync', [true, false]).combineWithParams([\n      { vertex_mismatched: false, fragment_mismatched: false, _success: true },\n      { vertex_mismatched: true, fragment_mismatched: false, _success: false },\n      { vertex_mismatched: false, fragment_mismatched: true, _success: false },\n    ])\n  )\n  .fn(async t => {\n    const { isAsync, vertex_mismatched, fragment_mismatched, _success } = t.params;\n\n    if (vertex_mismatched || fragment_mismatched) {\n      await t.selectMismatchedDeviceOrSkipTestCase(undefined);\n    }\n\n    const code = `\n      [[stage(vertex)]] fn main() -> [[builtin(position)]] vec4<f32> {\n        return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n      }\n    `;\n\n    const descriptor = {\n      vertex: {\n        module: vertex_mismatched\n          ? t.mismatchedDevice.createShaderModule({ code })\n          : t.device.createShaderModule({ code }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: fragment_mismatched\n          ? t.mismatchedDevice.createShaderModule({ code: t.getFragmentShaderCode('float', 4) })\n          : t.device.createShaderModule({ code: t.getFragmentShaderCode('float', 4) }),\n        entryPoint: 'main',\n        targets: [{ format: 'rgba8unorm' }] as const,\n      },\n      layout: t.getPipelineLayout(),\n    };\n\n    t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n  });\n"],"file":"createRenderPipeline.spec.js"}