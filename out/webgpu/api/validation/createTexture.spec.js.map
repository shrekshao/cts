{"version":3,"sources":["../../../../src/webgpu/api/validation/createTexture.spec.ts"],"names":["description","SkipTestCase","makeTestGroup","assert","kTextureFormats","kTextureFormatInfo","kCompressedTextureFormats","kTextureDimensions","kTextureUsages","kUncompressedTextureFormats","kRegularTextureFormats","kFeaturesForFormats","textureDimensionAndFormatCompatible","kLimitInfo","viewCompatible","filterFormatsByFeature","GPUConst","maxMipLevelCount","ValidationTest","g","test","desc","params","u","combine","undefined","beginSubcases","filter","dimension","format","beforeAllSubcases","t","info","selectDeviceOrSkipTestCase","feature","fn","zeroArgument","size","blockWidth","blockHeight","mipLevelCount","descriptor","usage","GPUTextureUsage","TEXTURE_BINDING","success","expectValidationError","device","createTexture","unless","largestDimension","kTargetMipLevelCount","kTargetLargeSize","largeSize","Math","floor","combineWithParams","sampleCount","multisample","arrayLayerCount","TextureUsage","RENDER_ATTACHMENT","renderable","STORAGE_BINDING","storage","expandWithParams","p","_success","maxTextureDimension1D","default","width","height","depthOrArrayLayers","maxTextureDimension2D","maxTextureArrayLayers","expand","maxTextureDimension3D","usage0","usage1","appliedDimension","formatFeature","viewFormatFeature","viewFormat","compatible","viewFormats"],"mappings":"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","sourcesContent":["export const description = `createTexture validation tests.`;\n\nimport { SkipTestCase } from '../../../common/framework/fixture.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { assert } from '../../../common/util/util.js';\nimport {\n  kTextureFormats,\n  kTextureFormatInfo,\n  kCompressedTextureFormats,\n  kTextureDimensions,\n  kTextureUsages,\n  kUncompressedTextureFormats,\n  kRegularTextureFormats,\n  kFeaturesForFormats,\n  textureDimensionAndFormatCompatible,\n  kLimitInfo,\n  viewCompatible,\n  filterFormatsByFeature,\n} from '../../capability_info.js';\nimport { GPUConst } from '../../constants.js';\nimport { maxMipLevelCount } from '../../util/texture/base.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('zero_size')\n  .desc(\n    `Test texture creation with zero or nonzero size of\n    width, height, depthOrArrayLayers and mipLevelCount for every dimension, and representative formats.`\n  )\n  .params(u =>\n    u\n      .combine('dimension', [undefined, ...kTextureDimensions])\n      .combine('format', [\n        'rgba8unorm',\n        'rgb10a2unorm',\n        'bc1-rgba-unorm',\n        'depth24plus-stencil8',\n      ] as const)\n      .beginSubcases()\n      .combine('zeroArgument', [\n        'none',\n        'width',\n        'height',\n        'depthOrArrayLayers',\n        'mipLevelCount',\n      ] as const)\n      // Filter out incompatible dimension type and format combinations.\n      .filter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format))\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(async t => {\n    const { dimension, zeroArgument, format } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    const size = [info.blockWidth, info.blockHeight, 1];\n    let mipLevelCount = 1;\n\n    switch (zeroArgument) {\n      case 'width':\n        size[0] = 0;\n        break;\n      case 'height':\n        size[1] = 0;\n        break;\n      case 'depthOrArrayLayers':\n        size[2] = 0;\n        break;\n      case 'mipLevelCount':\n        mipLevelCount = 0;\n        break;\n      default:\n        break;\n    }\n\n    const descriptor = {\n      size,\n      mipLevelCount,\n      dimension,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const success = zeroArgument === 'none';\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('dimension_type_and_format_compatibility')\n  .desc(\n    `Test every dimension type on every format. Note that compressed formats and depth/stencil formats are not valid for 1D/3D dimension types.`\n  )\n  .params(u =>\n    u.combine('dimension', [undefined, ...kTextureDimensions]).combine('format', kTextureFormats)\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(async t => {\n    const { dimension, format } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    const descriptor: GPUTextureDescriptor = {\n      size: [info.blockWidth, info.blockHeight, 1],\n      dimension,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !textureDimensionAndFormatCompatible(dimension, format));\n  });\n\ng.test('mipLevelCount,format')\n  .desc(\n    `Test texture creation with no mipmap chain, partial mipmap chain, full mipmap chain, out-of-bounds mipmap chain\n    for every format with different texture dimension types.`\n  )\n  .params(u =>\n    u\n      .combine('dimension', [undefined, ...kTextureDimensions])\n      .combine('format', kTextureFormats)\n      .beginSubcases()\n      .combine('mipLevelCount', [1, 2, 3, 6, 7])\n      // Filter out incompatible dimension type and format combinations.\n      .filter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format))\n      .combine('largestDimension', [0, 1, 2])\n      .unless(({ dimension, largestDimension }) => dimension === '1d' && largestDimension > 0)\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(async t => {\n    const { dimension, format, mipLevelCount, largestDimension } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    // Compute dimensions such that the dimensions are in range [17, 32] and aligned with the\n    // format block size so that there will be exactly 6 mip levels.\n    const kTargetMipLevelCount = 5;\n    const kTargetLargeSize = (1 << kTargetMipLevelCount) - 1;\n    const largeSize = [\n      Math.floor(kTargetLargeSize / info.blockWidth) * info.blockWidth,\n      Math.floor(kTargetLargeSize / info.blockHeight) * info.blockHeight,\n      kTargetLargeSize,\n    ];\n    assert(17 <= largeSize[0] && largeSize[0] <= 32);\n    assert(17 <= largeSize[1] && largeSize[1] <= 32);\n\n    // Note that compressed formats are not valid for 1D. They have already been filtered out for 1D\n    // in this test. So there is no dilemma about size.width equals 1 vs\n    // size.width % info.blockHeight equals 0 for 1D compressed formats.\n    const size = [info.blockWidth, info.blockHeight, 1];\n    size[largestDimension] = largeSize[largestDimension];\n\n    const descriptor = {\n      size,\n      mipLevelCount,\n      dimension,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const success = mipLevelCount <= maxMipLevelCount(descriptor);\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('mipLevelCount,bound_check')\n  .desc(\n    `Test mip level count bound check upon different texture size and different texture dimension types.\n    The cases below test: 1) there must be no mip levels after a 1 level (1D texture), or 1x1 level (2D texture), or 1x1x1 level (3D texture), 2) array layers are not mip-mapped, 3) power-of-two, non-power-of-two, and non-square sizes.`\n  )\n  .params(u =>\n    u //\n      .combine('format', ['rgba8unorm', 'bc1-rgba-unorm'] as const)\n      .beginSubcases()\n      .combineWithParams([\n        { size: [32, 32] }, // Mip level sizes: 32x32, 16x16, 8x8, 4x4, 2x2, 1x1\n        { size: [31, 32] }, // Mip level sizes: 31x32, 15x16, 7x8, 3x4, 1x2, 1x1\n        { size: [28, 32] }, // Mip level sizes: 28x32, 14x16, 7x8, 3x4, 1x2, 1x1\n        { size: [32, 31] }, // Mip level sizes: 32x31, 16x15, 8x7, 4x3, 2x1, 1x1\n        { size: [32, 28] }, // Mip level sizes: 32x28, 16x14, 8x7, 4x3, 2x1, 1x1\n        { size: [31, 31] }, // Mip level sizes: 31x31, 15x15, 7x7, 3x3, 1x1\n        { size: [32], dimension: '1d' as const }, // Mip level sizes: 32, 16, 8, 4, 2, 1\n        { size: [31], dimension: '1d' as const }, // Mip level sizes: 31, 15, 7, 3, 1\n        { size: [32, 32, 32], dimension: '3d' as const }, // Mip level sizes: 32x32x32, 16x16x16, 8x8x8, 4x4x4, 2x2x2, 1x1x1\n        { size: [32, 31, 31], dimension: '3d' as const }, // Mip level sizes: 32x31x31, 16x15x15, 8x7x7, 4x3x3, 2x1x1, 1x1x1\n        { size: [31, 32, 31], dimension: '3d' as const }, // Mip level sizes: 31x32x31, 15x16x15, 7x8x7, 3x4x3, 1x2x1, 1x1x1\n        { size: [31, 31, 32], dimension: '3d' as const }, // Mip level sizes: 31x31x32, 15x15x16, 7x7x8, 3x3x4, 1x1x2, 1x1x1\n        { size: [31, 31, 31], dimension: '3d' as const }, // Mip level sizes: 31x31x31, 15x15x15, 7x7x7, 3x3x3, 1x1x1\n        { size: [32, 8] }, // Mip levels: 32x8, 16x4, 8x2, 4x1, 2x1, 1x1\n        { size: [32, 32, 64] }, // Mip levels: 32x32x64, 16x16x64, 8x8x64, 4x4x64, 2x2x64, 1x1x64\n        { size: [32, 32, 64], dimension: '3d' as const }, // Mip levels: 32x32x64, 16x16x32, 8x8x16, 4x4x8, 2x2x4, 1x1x2, 1x1x1\n      ])\n      .unless(\n        ({ format, size, dimension }) =>\n          format === 'bc1-rgba-unorm' &&\n          (dimension === '1d' ||\n            dimension === '3d' ||\n            size[0] % kTextureFormatInfo[format].blockWidth !== 0 ||\n            size[1] % kTextureFormatInfo[format].blockHeight !== 0)\n      )\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(async t => {\n    const { format, size, dimension } = t.params;\n\n    const descriptor = {\n      size,\n      mipLevelCount: 0,\n      dimension,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const mipLevelCount = maxMipLevelCount(descriptor);\n    descriptor.mipLevelCount = mipLevelCount;\n    t.device.createTexture(descriptor);\n\n    descriptor.mipLevelCount = mipLevelCount + 1;\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    });\n  });\n\ng.test('mipLevelCount,bound_check,bigger_than_integer_bit_width')\n  .desc(`Test mip level count bound check when mipLevelCount is bigger than integer bit width`)\n  .fn(async t => {\n    const descriptor = {\n      size: [32, 32],\n      mipLevelCount: 100,\n      format: 'rgba8unorm' as const,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    });\n  });\n\ng.test('sampleCount,various_sampleCount_with_all_formats')\n  .desc(\n    `Test texture creation with various (valid or invalid) sample count and all formats. Note that 1D and 3D textures can't support multisample.`\n  )\n  .params(u =>\n    u\n      .combine('dimension', [undefined, '2d'] as const)\n      .combine('format', kTextureFormats)\n      .beginSubcases()\n      .combine('sampleCount', [0, 1, 2, 4, 8, 16, 32, 256])\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(async t => {\n    const { dimension, sampleCount, format } = t.params;\n    const { blockWidth, blockHeight } = kTextureFormatInfo[format];\n\n    const descriptor = {\n      size: [32 * blockWidth, 32 * blockHeight, 1],\n      sampleCount,\n      dimension,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const success =\n      sampleCount === 1 || (sampleCount === 4 && kTextureFormatInfo[format].multisample);\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('sampleCount,valid_sampleCount_with_other_parameter_varies')\n  .desc(\n    `Test texture creation with valid sample count when dimensions, arrayLayerCount, mipLevelCount, format, and usage varies.\n     Texture can be single sample (sampleCount is 1) or multi-sample (sampleCount is 4).\n     Multisample texture requires that 1) its dimension is 2d or undefined, 2) its format supports multisample, 3) its mipLevelCount and arrayLayerCount are 1, 4) its usage doesn't include STORAGE_BINDING.`\n  )\n  .params(u =>\n    u\n      .combine('dimension', [undefined, ...kTextureDimensions])\n      .combine('format', kTextureFormats)\n      .beginSubcases()\n      .combine('sampleCount', [1, 4])\n      .combine('arrayLayerCount', [1, 2])\n      .unless(\n        ({ dimension, arrayLayerCount }) =>\n          arrayLayerCount === 2 && dimension !== '2d' && dimension !== undefined\n      )\n      .combine('mipLevelCount', [1, 2])\n      .combine('usage', kTextureUsages)\n      // Filter out incompatible dimension type and format combinations.\n      .filter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format))\n      .unless(({ sampleCount, usage, format, mipLevelCount, dimension }) => {\n        const info = kTextureFormatInfo[format];\n        return (\n          ((usage & GPUConst.TextureUsage.RENDER_ATTACHMENT) !== 0 &&\n            (!info.renderable || dimension !== '2d')) ||\n          ((usage & GPUConst.TextureUsage.STORAGE_BINDING) !== 0 && !info.storage) ||\n          (mipLevelCount !== 1 && dimension === '1d') ||\n          (sampleCount > 1 && !info.multisample)\n        );\n      })\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(async t => {\n    const { dimension, sampleCount, format, mipLevelCount, arrayLayerCount, usage } = t.params;\n    const { blockWidth, blockHeight } = kTextureFormatInfo[format];\n\n    const size =\n      dimension === '1d'\n        ? [32 * blockWidth, 1 * blockHeight, 1]\n        : dimension === '2d' || dimension === undefined\n        ? [32 * blockWidth, 32 * blockHeight, arrayLayerCount]\n        : [32 * blockWidth, 32 * blockHeight, 32];\n    const descriptor = {\n      size,\n      mipLevelCount,\n      sampleCount,\n      dimension,\n      format,\n      usage,\n    };\n\n    const success =\n      sampleCount === 1 ||\n      (sampleCount === 4 &&\n        (dimension === '2d' || dimension === undefined) &&\n        kTextureFormatInfo[format].multisample &&\n        mipLevelCount === 1 &&\n        arrayLayerCount === 1 &&\n        (usage & GPUConst.TextureUsage.STORAGE_BINDING) === 0);\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('texture_size,default_value_and_smallest_size,uncompressed_format')\n  .desc(\n    `Test default values for height and depthOrArrayLayers for every dimension type and every uncompressed format.\n\t  It also tests smallest size (lower bound) for every dimension type and every uncompressed format, while other texture_size tests are testing the upper bound.`\n  )\n  .params(u =>\n    u\n      .combine('dimension', [undefined, ...kTextureDimensions])\n      .combine('format', kUncompressedTextureFormats)\n      .beginSubcases()\n      .combine('size', [[1], [1, 1], [1, 1, 1]])\n      // Filter out incompatible dimension type and format combinations.\n      .filter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format))\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(async t => {\n    const { dimension, format, size } = t.params;\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    t.device.createTexture(descriptor);\n  });\n\ng.test('texture_size,default_value_and_smallest_size,compressed_format')\n  .desc(\n    `Test default values for height and depthOrArrayLayers for every dimension type and every compressed format.\n\t  It also tests smallest size (lower bound) for every dimension type and every compressed format, while other texture_size tests are testing the upper bound.`\n  )\n  .params(u =>\n    u\n      // Compressed formats are invalid for 1D and 3D.\n      .combine('dimension', [undefined, '2d'] as const)\n      .combine('format', kCompressedTextureFormats)\n      .beginSubcases()\n      .expandWithParams(p => {\n        const { blockWidth, blockHeight } = kTextureFormatInfo[p.format];\n        return [\n          { size: [1], _success: false },\n          { size: [blockWidth], _success: false },\n          { size: [1, 1], _success: false },\n          { size: [blockWidth, blockHeight], _success: true },\n          { size: [1, 1, 1], _success: false },\n          { size: [blockWidth, blockHeight, 1], _success: true },\n        ];\n      })\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(async t => {\n    const { dimension, format, size, _success } = t.params;\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !_success);\n  });\n\ng.test('texture_size,1d_texture')\n  .desc(`Test texture size requirement for 1D texture`)\n  .params(u =>\n    u //\n      // Compressed and depth-stencil textures are invalid for 1D.\n      .combine('format', kRegularTextureFormats)\n      .beginSubcases()\n      .combine('width', [\n        kLimitInfo.maxTextureDimension1D.default - 1,\n        kLimitInfo.maxTextureDimension1D.default,\n        kLimitInfo.maxTextureDimension1D.default + 1,\n      ])\n      .combine('height', [1, 2])\n      .combine('depthOrArrayLayers', [1, 2])\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(async t => {\n    const { format, width, height, depthOrArrayLayers } = t.params;\n\n    const descriptor: GPUTextureDescriptor = {\n      size: [width, height, depthOrArrayLayers],\n      dimension: '1d' as const,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const success =\n      width <= kLimitInfo.maxTextureDimension1D.default && height === 1 && depthOrArrayLayers === 1;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('texture_size,2d_texture,uncompressed_format')\n  .desc(`Test texture size requirement for 2D texture with uncompressed format.`)\n  .params(u =>\n    u\n      .combine('dimension', [undefined, '2d'] as const)\n      .combine('format', kUncompressedTextureFormats)\n      .combine('size', [\n        // Test the bound of width\n        [kLimitInfo.maxTextureDimension2D.default - 1, 1, 1],\n        [kLimitInfo.maxTextureDimension2D.default, 1, 1],\n        [kLimitInfo.maxTextureDimension2D.default + 1, 1, 1],\n        // Test the bound of height\n        [1, kLimitInfo.maxTextureDimension2D.default - 1, 1],\n        [1, kLimitInfo.maxTextureDimension2D.default, 1],\n        [1, kLimitInfo.maxTextureDimension2D.default + 1, 1],\n        // Test the bound of array layers\n        [1, 1, kLimitInfo.maxTextureArrayLayers.default - 1],\n        [1, 1, kLimitInfo.maxTextureArrayLayers.default],\n        [1, 1, kLimitInfo.maxTextureArrayLayers.default + 1],\n      ])\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(async t => {\n    const { dimension, format, size } = t.params;\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const success =\n      size[0] <= kLimitInfo.maxTextureDimension2D.default &&\n      size[1] <= kLimitInfo.maxTextureDimension2D.default &&\n      size[2] <= kLimitInfo.maxTextureArrayLayers.default;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('texture_size,2d_texture,compressed_format')\n  .desc(`Test texture size requirement for 2D texture with compressed format.`)\n  .params(u =>\n    u\n      .combine('dimension', [undefined, '2d'] as const)\n      .combine('format', kCompressedTextureFormats)\n      .expand('size', p => {\n        const { blockWidth, blockHeight } = kTextureFormatInfo[p.format];\n        return [\n          // Test the bound of width\n          [kLimitInfo.maxTextureDimension2D.default - 1, 1, 1],\n          [kLimitInfo.maxTextureDimension2D.default - blockWidth, 1, 1],\n          [kLimitInfo.maxTextureDimension2D.default - blockWidth, blockHeight, 1],\n          [kLimitInfo.maxTextureDimension2D.default, 1, 1],\n          [kLimitInfo.maxTextureDimension2D.default, blockHeight, 1],\n          [kLimitInfo.maxTextureDimension2D.default + 1, 1, 1],\n          [kLimitInfo.maxTextureDimension2D.default + blockWidth, 1, 1],\n          [kLimitInfo.maxTextureDimension2D.default + blockWidth, blockHeight, 1],\n          // Test the bound of height\n          [1, kLimitInfo.maxTextureDimension2D.default - 1, 1],\n          [1, kLimitInfo.maxTextureDimension2D.default - blockHeight, 1],\n          [blockWidth, kLimitInfo.maxTextureDimension2D.default - blockHeight, 1],\n          [1, kLimitInfo.maxTextureDimension2D.default, 1],\n          [blockWidth, kLimitInfo.maxTextureDimension2D.default, 1],\n          [1, kLimitInfo.maxTextureDimension2D.default + 1, 1],\n          [1, kLimitInfo.maxTextureDimension2D.default + blockWidth, 1],\n          [blockWidth, kLimitInfo.maxTextureDimension2D.default + blockHeight, 1],\n          // Test the bound of array layers\n          [1, 1, kLimitInfo.maxTextureArrayLayers.default - 1],\n          [blockWidth, 1, kLimitInfo.maxTextureArrayLayers.default - 1],\n          [1, blockHeight, kLimitInfo.maxTextureArrayLayers.default - 1],\n          [blockWidth, blockHeight, kLimitInfo.maxTextureArrayLayers.default - 1],\n          [1, 1, kLimitInfo.maxTextureArrayLayers.default],\n          [blockWidth, 1, kLimitInfo.maxTextureArrayLayers.default],\n          [1, blockHeight, kLimitInfo.maxTextureArrayLayers.default],\n          [blockWidth, blockHeight, kLimitInfo.maxTextureArrayLayers.default],\n          [1, 1, kLimitInfo.maxTextureArrayLayers.default + 1],\n          [blockWidth, 1, kLimitInfo.maxTextureArrayLayers.default + 1],\n          [1, blockHeight, kLimitInfo.maxTextureArrayLayers.default + 1],\n          [blockWidth, blockHeight, kLimitInfo.maxTextureArrayLayers.default + 1],\n        ];\n      })\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(async t => {\n    const { dimension, format, size } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const success =\n      size[0] % info.blockWidth === 0 &&\n      size[1] % info.blockHeight === 0 &&\n      size[0] <= kLimitInfo.maxTextureDimension2D.default &&\n      size[1] <= kLimitInfo.maxTextureDimension2D.default &&\n      size[2] <= kLimitInfo.maxTextureArrayLayers.default;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('texture_size,3d_texture,uncompressed_format')\n  .desc(\n    `Test texture size requirement for 3D texture with uncompressed format. Note that depth/stencil formats are invalid for 3D textures, so we only test regular formats.`\n  )\n  .params(u =>\n    u //\n      .combine('format', kRegularTextureFormats)\n      .beginSubcases()\n      .combine('size', [\n        // Test the bound of width\n        [kLimitInfo.maxTextureDimension3D.default - 1, 1, 1],\n        [kLimitInfo.maxTextureDimension3D.default, 1, 1],\n        [kLimitInfo.maxTextureDimension3D.default + 1, 1, 1],\n        // Test the bound of height\n        [1, kLimitInfo.maxTextureDimension3D.default - 1, 1],\n        [1, kLimitInfo.maxTextureDimension3D.default, 1],\n        [1, kLimitInfo.maxTextureDimension3D.default + 1, 1],\n        // Test the bound of depth\n        [1, 1, kLimitInfo.maxTextureDimension3D.default - 1],\n        [1, 1, kLimitInfo.maxTextureDimension3D.default],\n        [1, 1, kLimitInfo.maxTextureDimension3D.default + 1],\n      ])\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(async t => {\n    const { format, size } = t.params;\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension: '3d' as const,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const success =\n      size[0] <= kLimitInfo.maxTextureDimension3D.default &&\n      size[1] <= kLimitInfo.maxTextureDimension3D.default &&\n      size[2] <= kLimitInfo.maxTextureDimension3D.default;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('texture_size,3d_texture,compressed_format')\n  .desc(`Test texture size requirement for 3D texture with compressed format.`)\n  .params(u =>\n    u //\n      .combine('format', kCompressedTextureFormats)\n      .beginSubcases()\n      .expand('size', p => {\n        const { blockWidth, blockHeight } = kTextureFormatInfo[p.format];\n        return [\n          // Test the bound of width\n          [kLimitInfo.maxTextureDimension3D.default - 1, 1, 1],\n          [kLimitInfo.maxTextureDimension3D.default - blockWidth, 1, 1],\n          [kLimitInfo.maxTextureDimension3D.default - blockWidth, blockHeight, 1],\n          [kLimitInfo.maxTextureDimension3D.default, 1, 1],\n          [kLimitInfo.maxTextureDimension3D.default, blockHeight, 1],\n          [kLimitInfo.maxTextureDimension3D.default + 1, 1, 1],\n          [kLimitInfo.maxTextureDimension3D.default + blockWidth, 1, 1],\n          [kLimitInfo.maxTextureDimension3D.default + blockWidth, blockHeight, 1],\n          // Test the bound of height\n          [1, kLimitInfo.maxTextureDimension3D.default - 1, 1],\n          [1, kLimitInfo.maxTextureDimension3D.default - blockHeight, 1],\n          [blockWidth, kLimitInfo.maxTextureDimension3D.default - blockHeight, 1],\n          [1, kLimitInfo.maxTextureDimension3D.default, 1],\n          [blockWidth, kLimitInfo.maxTextureDimension3D.default, 1],\n          [1, kLimitInfo.maxTextureDimension3D.default + 1, 1],\n          [1, kLimitInfo.maxTextureDimension3D.default + blockWidth, 1],\n          [blockWidth, kLimitInfo.maxTextureDimension3D.default + blockHeight, 1],\n          // Test the bound of depth\n          [1, 1, kLimitInfo.maxTextureDimension3D.default - 1],\n          [blockWidth, 1, kLimitInfo.maxTextureDimension3D.default - 1],\n          [1, blockHeight, kLimitInfo.maxTextureDimension3D.default - 1],\n          [blockWidth, blockHeight, kLimitInfo.maxTextureDimension3D.default - 1],\n          [1, 1, kLimitInfo.maxTextureDimension3D.default],\n          [blockWidth, 1, kLimitInfo.maxTextureDimension3D.default],\n          [1, blockHeight, kLimitInfo.maxTextureDimension3D.default],\n          [blockWidth, blockHeight, kLimitInfo.maxTextureDimension3D.default],\n          [1, 1, kLimitInfo.maxTextureDimension3D.default + 1],\n          [blockWidth, 1, kLimitInfo.maxTextureDimension3D.default + 1],\n          [1, blockHeight, kLimitInfo.maxTextureDimension3D.default + 1],\n          [blockWidth, blockHeight, kLimitInfo.maxTextureDimension3D.default + 1],\n        ];\n      })\n  )\n  .beforeAllSubcases(t => {\n    // Compressed formats are not supported in 3D in WebGPU v1 because they are complicated but not very useful for now.\n    throw new SkipTestCase('Compressed 3D texture is not supported');\n\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(async t => {\n    const { format, size } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    assert(\n      kLimitInfo.maxTextureDimension3D.default % info.blockWidth === 0 &&\n        kLimitInfo.maxTextureDimension3D.default % info.blockHeight === 0\n    );\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension: '3d' as const,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const success =\n      size[0] % info.blockWidth === 0 &&\n      size[1] % info.blockHeight === 0 &&\n      size[0] <= kLimitInfo.maxTextureDimension3D.default &&\n      size[1] <= kLimitInfo.maxTextureDimension3D.default &&\n      size[2] <= kLimitInfo.maxTextureDimension3D.default;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('texture_usage')\n  .desc(\n    `Test texture usage (single usage or combined usages) for every texture format and every dimension type`\n  )\n  .params(u =>\n    u\n      .combine('dimension', [undefined, ...kTextureDimensions])\n      .combine('format', kTextureFormats)\n      .beginSubcases()\n      // If usage0 and usage1 are the same, then the usage being test is a single usage. Otherwise, it is a combined usage.\n      .combine('usage0', kTextureUsages)\n      .combine('usage1', kTextureUsages)\n      // Filter out incompatible dimension type and format combinations.\n      .filter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format))\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(async t => {\n    const { dimension, format, usage0, usage1 } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    const size = [info.blockWidth, info.blockHeight, 1];\n    const usage = usage0 | usage1;\n    const descriptor = {\n      size,\n      dimension,\n      format,\n      usage,\n    };\n\n    let success = true;\n    const appliedDimension = dimension ?? '2d';\n    // Note that we unconditionally test copy usages for all formats. We don't check copySrc/copyDst in kTextureFormatInfo in capability_info.js\n    // if (!info.copySrc && (usage & GPUTextureUsage.COPY_SRC) !== 0) success = false;\n    // if (!info.copyDst && (usage & GPUTextureUsage.COPY_DST) !== 0) success = false;\n    if (!info.storage && (usage & GPUTextureUsage.STORAGE_BINDING) !== 0) success = false;\n    if (\n      (!info.renderable || appliedDimension !== '2d') &&\n      (usage & GPUTextureUsage.RENDER_ATTACHMENT) !== 0\n    )\n      success = false;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('viewFormats')\n  .desc(\n    `Test creating a texture with viewFormats list for all {texture format}x{view format}. Only compatible view formats should be valid.`\n  )\n  .params(u =>\n    u\n      .combine('formatFeature', kFeaturesForFormats)\n      .combine('viewFormatFeature', kFeaturesForFormats)\n      .beginSubcases()\n      .expand('format', ({ formatFeature }) =>\n        filterFormatsByFeature(formatFeature, kTextureFormats)\n      )\n      .expand('viewFormat', ({ viewFormatFeature }) =>\n        filterFormatsByFeature(viewFormatFeature, kTextureFormats)\n      )\n  )\n  .beforeAllSubcases(t => {\n    const { formatFeature, viewFormatFeature } = t.params;\n    t.selectDeviceOrSkipTestCase([formatFeature, viewFormatFeature]);\n  })\n  .fn(async t => {\n    const { format, viewFormat } = t.params;\n    const { blockWidth, blockHeight } = kTextureFormatInfo[format];\n\n    const compatible = viewCompatible(format, viewFormat);\n\n    // Test the viewFormat in the list.\n    t.expectValidationError(() => {\n      t.device.createTexture({\n        format,\n        size: [blockWidth, blockHeight],\n        usage: GPUTextureUsage.TEXTURE_BINDING,\n        viewFormats: [viewFormat],\n      });\n    }, !compatible);\n\n    // Test the viewFormat and the texture format in the list.\n    t.expectValidationError(() => {\n      t.device.createTexture({\n        format,\n        size: [blockWidth, blockHeight],\n        usage: GPUTextureUsage.TEXTURE_BINDING,\n        viewFormats: [viewFormat, format],\n      });\n    }, !compatible);\n\n    // Test the viewFormat multiple times in the list.\n    t.expectValidationError(() => {\n      t.device.createTexture({\n        format,\n        size: [blockWidth, blockHeight],\n        usage: GPUTextureUsage.TEXTURE_BINDING,\n        viewFormats: [viewFormat, viewFormat],\n      });\n    }, !compatible);\n  });\n"],"file":"createTexture.spec.js"}