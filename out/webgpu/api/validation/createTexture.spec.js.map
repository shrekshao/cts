{"version":3,"sources":["../../../../src/webgpu/api/validation/createTexture.spec.ts"],"names":["description","makeTestGroup","assert","kTextureFormats","kTextureFormatInfo","kCompressedTextureFormats","kTextureDimensions","kTextureUsages","kUncompressedTextureFormats","kRegularTextureFormats","textureDimensionAndFormatCompatible","kLimitInfo","viewCompatible","GPUConst","maxMipLevelCount","ValidationTest","g","test","desc","params","u","combine","undefined","beginSubcases","filter","dimension","format","fn","t","zeroArgument","info","selectDeviceOrSkipTestCase","feature","size","blockWidth","blockHeight","mipLevelCount","descriptor","usage","GPUTextureUsage","TEXTURE_BINDING","success","expectValidationError","device","createTexture","unless","largestDimension","kTargetMipLevelCount","kTargetLargeSize","largeSize","Math","floor","paramsSubcasesOnly","combineWithParams","sampleCount","multisample","arrayLayerCount","TextureUsage","RENDER_ATTACHMENT","renderable","STORAGE_BINDING","storage","expandWithParams","p","_success","maxTextureDimension1D","default","width","height","depthOrArrayLayers","maxTextureDimension2D","maxTextureArrayLayers","expand","maxTextureDimension3D","skip","usage0","usage1","appliedDimension","viewFormat","selectDeviceForTextureFormatOrSkipTestCase","compatible","viewFormats"],"mappings":"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","sourcesContent":["export const description = `createTexture validation tests.`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { assert } from '../../../common/util/util.js';\nimport {\n  kTextureFormats,\n  kTextureFormatInfo,\n  kCompressedTextureFormats,\n  kTextureDimensions,\n  kTextureUsages,\n  kUncompressedTextureFormats,\n  kRegularTextureFormats,\n  textureDimensionAndFormatCompatible,\n  kLimitInfo,\n  viewCompatible,\n} from '../../capability_info.js';\nimport { GPUConst } from '../../constants.js';\nimport { maxMipLevelCount } from '../../util/texture/base.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('zero_size')\n  .desc(\n    `Test texture creation with zero or nonzero size of\n    width, height, depthOrArrayLayers and mipLevelCount for every dimension, and representative formats.`\n  )\n  .params(u =>\n    u\n      .combine('dimension', [undefined, ...kTextureDimensions])\n      .beginSubcases()\n      .combine('zeroArgument', [\n        'none',\n        'width',\n        'height',\n        'depthOrArrayLayers',\n        'mipLevelCount',\n      ] as const)\n      .combine('format', [\n        'rgba8unorm',\n        'rgb10a2unorm',\n        'bc1-rgba-unorm',\n        'depth24plus-stencil8',\n      ] as const)\n      // Filter out incompatible dimension type and format combinations.\n      .filter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format))\n  )\n  .fn(async t => {\n    const { dimension, zeroArgument, format } = t.params;\n    const info = kTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    const size = [info.blockWidth, info.blockHeight, 1];\n    let mipLevelCount = 1;\n\n    switch (zeroArgument) {\n      case 'width':\n        size[0] = 0;\n        break;\n      case 'height':\n        size[1] = 0;\n        break;\n      case 'depthOrArrayLayers':\n        size[2] = 0;\n        break;\n      case 'mipLevelCount':\n        mipLevelCount = 0;\n        break;\n      default:\n        break;\n    }\n\n    const descriptor = {\n      size,\n      mipLevelCount,\n      dimension,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const success = zeroArgument === 'none';\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('dimension_type_and_format_compatibility')\n  .desc(\n    `Test every dimension type on every format. Note that compressed formats and depth/stencil formats are not valid for 1D/3D dimension types.`\n  )\n  .params(u =>\n    u\n      .combine('dimension', [undefined, ...kTextureDimensions])\n      .beginSubcases()\n      .combine('format', kTextureFormats)\n  )\n  .fn(async t => {\n    const { dimension, format } = t.params;\n    const info = kTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    const descriptor: GPUTextureDescriptor = {\n      size: [info.blockWidth, info.blockHeight, 1],\n      dimension,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !textureDimensionAndFormatCompatible(dimension, format));\n  });\n\ng.test('mipLevelCount,format')\n  .desc(\n    `Test texture creation with no mipmap chain, partial mipmap chain, full mipmap chain, out-of-bounds mipmap chain\n    for every format with different texture dimension types.`\n  )\n  .params(u =>\n    u\n      .combine('dimension', [undefined, ...kTextureDimensions])\n      .beginSubcases()\n      .combine('format', kTextureFormats)\n      .combine('mipLevelCount', [1, 2, 3, 6, 7])\n      // Filter out incompatible dimension type and format combinations.\n      .filter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format))\n      .combine('largestDimension', [0, 1, 2])\n      .unless(({ dimension, largestDimension }) => dimension === '1d' && largestDimension > 0)\n  )\n  .fn(async t => {\n    const { dimension, format, mipLevelCount, largestDimension } = t.params;\n    const info = kTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    // Compute dimensions such that the dimensions are in range [17, 32] and aligned with the\n    // format block size so that there will be exactly 6 mip levels.\n    const kTargetMipLevelCount = 5;\n    const kTargetLargeSize = (1 << kTargetMipLevelCount) - 1;\n    const largeSize = [\n      Math.floor(kTargetLargeSize / info.blockWidth) * info.blockWidth,\n      Math.floor(kTargetLargeSize / info.blockHeight) * info.blockHeight,\n      kTargetLargeSize,\n    ];\n    assert(17 <= largeSize[0] && largeSize[0] <= 32);\n    assert(17 <= largeSize[1] && largeSize[1] <= 32);\n\n    // Note that compressed formats are not valid for 1D. They have already been filtered out for 1D\n    // in this test. So there is no dilemma about size.width equals 1 vs\n    // size.width % info.blockHeight equals 0 for 1D compressed formats.\n    const size = [info.blockWidth, info.blockHeight, 1];\n    size[largestDimension] = largeSize[largestDimension];\n\n    const descriptor = {\n      size,\n      mipLevelCount,\n      dimension,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const success = mipLevelCount <= maxMipLevelCount(descriptor);\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('mipLevelCount,bound_check')\n  .desc(\n    `Test mip level count bound check upon different texture size and different texture dimension types.\n    The cases below test: 1) there must be no mip levels after a 1 level (1D texture), or 1x1 level (2D texture), or 1x1x1 level (3D texture), 2) array layers are not mip-mapped, 3) power-of-two, non-power-of-two, and non-square sizes.`\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('format', ['rgba8unorm', 'bc1-rgba-unorm'] as const)\n      .combineWithParams([\n        { size: [32, 32] }, // Mip level sizes: 32x32, 16x16, 8x8, 4x4, 2x2, 1x1\n        { size: [31, 32] }, // Mip level sizes: 31x32, 15x16, 7x8, 3x4, 1x2, 1x1\n        { size: [28, 32] }, // Mip level sizes: 28x32, 14x16, 7x8, 3x4, 1x2, 1x1\n        { size: [32, 31] }, // Mip level sizes: 32x31, 16x15, 8x7, 4x3, 2x1, 1x1\n        { size: [32, 28] }, // Mip level sizes: 32x28, 16x14, 8x7, 4x3, 2x1, 1x1\n        { size: [31, 31] }, // Mip level sizes: 31x31, 15x15, 7x7, 3x3, 1x1\n        { size: [32], dimension: '1d' as const }, // Mip level sizes: 32, 16, 8, 4, 2, 1\n        { size: [31], dimension: '1d' as const }, // Mip level sizes: 31, 15, 7, 3, 1\n        { size: [32, 32, 32], dimension: '3d' as const }, // Mip level sizes: 32x32x32, 16x16x16, 8x8x8, 4x4x4, 2x2x2, 1x1x1\n        { size: [32, 31, 31], dimension: '3d' as const }, // Mip level sizes: 32x31x31, 16x15x15, 8x7x7, 4x3x3, 2x1x1, 1x1x1\n        { size: [31, 32, 31], dimension: '3d' as const }, // Mip level sizes: 31x32x31, 15x16x15, 7x8x7, 3x4x3, 1x2x1, 1x1x1\n        { size: [31, 31, 32], dimension: '3d' as const }, // Mip level sizes: 31x31x32, 15x15x16, 7x7x8, 3x3x4, 1x1x2, 1x1x1\n        { size: [31, 31, 31], dimension: '3d' as const }, // Mip level sizes: 31x31x31, 15x15x15, 7x7x7, 3x3x3, 1x1x1\n        { size: [32, 8] }, // Mip levels: 32x8, 16x4, 8x2, 4x1, 2x1, 1x1\n        { size: [32, 32, 64] }, // Mip levels: 32x32x64, 16x16x64, 8x8x64, 4x4x64, 2x2x64, 1x1x64\n        { size: [32, 32, 64], dimension: '3d' as const }, // Mip levels: 32x32x64, 16x16x32, 8x8x16, 4x4x8, 2x2x4, 1x1x2, 1x1x1\n      ])\n      .unless(\n        ({ format, size, dimension }) =>\n          format === 'bc1-rgba-unorm' &&\n          (dimension === '1d' ||\n            dimension === '3d' ||\n            size[0] % kTextureFormatInfo[format].blockWidth !== 0 ||\n            size[1] % kTextureFormatInfo[format].blockHeight !== 0)\n      )\n  )\n  .fn(async t => {\n    const { format, size, dimension } = t.params;\n    await t.selectDeviceOrSkipTestCase(kTextureFormatInfo[format].feature);\n\n    const descriptor = {\n      size,\n      mipLevelCount: 0,\n      dimension,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const mipLevelCount = maxMipLevelCount(descriptor);\n    descriptor.mipLevelCount = mipLevelCount;\n    t.device.createTexture(descriptor);\n\n    descriptor.mipLevelCount = mipLevelCount + 1;\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    });\n  });\n\ng.test('mipLevelCount,bound_check,bigger_than_integer_bit_width')\n  .desc(`Test mip level count bound check when mipLevelCount is bigger than integer bit width`)\n  .fn(async t => {\n    const descriptor = {\n      size: [32, 32],\n      mipLevelCount: 100,\n      format: 'rgba8unorm' as const,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    });\n  });\n\ng.test('sampleCount,various_sampleCount_with_all_formats')\n  .desc(\n    `Test texture creation with various (valid or invalid) sample count and all formats. Note that 1D and 3D textures can't support multisample.`\n  )\n  .params(u =>\n    u\n      .combine('dimension', [undefined, '2d'] as const)\n      .beginSubcases()\n      .combine('sampleCount', [0, 1, 2, 4, 8, 16, 32, 256])\n      .combine('format', kTextureFormats)\n  )\n  .fn(async t => {\n    const { dimension, sampleCount, format } = t.params;\n    await t.selectDeviceOrSkipTestCase(kTextureFormatInfo[format].feature);\n    const { blockWidth, blockHeight } = kTextureFormatInfo[format];\n\n    const descriptor = {\n      size: [32 * blockWidth, 32 * blockHeight, 1],\n      sampleCount,\n      dimension,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const success =\n      sampleCount === 1 || (sampleCount === 4 && kTextureFormatInfo[format].multisample);\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('sampleCount,valid_sampleCount_with_other_parameter_varies')\n  .desc(\n    `Test texture creation with valid sample count when dimensions, arrayLayerCount, mipLevelCount, format, and usage varies.\n     Texture can be single sample (sampleCount is 1) or multi-sample (sampleCount is 4).\n     Multisample texture requires that 1) its dimension is 2d or undefined, 2) its format supports multisample, 3) its mipLevelCount and arrayLayerCount are 1, 4) its usage doesn't include STORAGE_BINDING.`\n  )\n  .params(u =>\n    u\n      .combine('dimension', [undefined, ...kTextureDimensions])\n      .beginSubcases()\n      .combine('sampleCount', [1, 4])\n      .combine('arrayLayerCount', [1, 2])\n      .unless(\n        ({ dimension, arrayLayerCount }) =>\n          arrayLayerCount === 2 && dimension !== '2d' && dimension !== undefined\n      )\n      .combine('mipLevelCount', [1, 2])\n      .combine('format', kTextureFormats)\n      .combine('usage', kTextureUsages)\n      // Filter out incompatible dimension type and format combinations.\n      .filter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format))\n      .unless(({ sampleCount, usage, format, mipLevelCount, dimension }) => {\n        const info = kTextureFormatInfo[format];\n        return (\n          ((usage & GPUConst.TextureUsage.RENDER_ATTACHMENT) !== 0 &&\n            (!info.renderable || dimension !== '2d')) ||\n          ((usage & GPUConst.TextureUsage.STORAGE_BINDING) !== 0 && !info.storage) ||\n          (mipLevelCount !== 1 && dimension === '1d') ||\n          (sampleCount > 1 && !info.multisample)\n        );\n      })\n  )\n  .fn(async t => {\n    const { dimension, sampleCount, format, mipLevelCount, arrayLayerCount, usage } = t.params;\n    await t.selectDeviceOrSkipTestCase(kTextureFormatInfo[format].feature);\n    const { blockWidth, blockHeight } = kTextureFormatInfo[format];\n\n    const size =\n      dimension === '1d'\n        ? [32 * blockWidth, 1 * blockHeight, 1]\n        : dimension === '2d' || dimension === undefined\n        ? [32 * blockWidth, 32 * blockHeight, arrayLayerCount]\n        : [32 * blockWidth, 32 * blockHeight, 32];\n    const descriptor = {\n      size,\n      mipLevelCount,\n      sampleCount,\n      dimension,\n      format,\n      usage,\n    };\n\n    const success =\n      sampleCount === 1 ||\n      (sampleCount === 4 &&\n        (dimension === '2d' || dimension === undefined) &&\n        kTextureFormatInfo[format].multisample &&\n        mipLevelCount === 1 &&\n        arrayLayerCount === 1 &&\n        (usage & GPUConst.TextureUsage.STORAGE_BINDING) === 0);\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('texture_size,default_value_and_smallest_size,uncompressed_format')\n  .desc(\n    `Test default values for height and depthOrArrayLayers for every dimension type and every uncompressed format.\n\t  It also tests smallest size (lower bound) for every dimension type and every uncompressed format, while other texture_size tests are testing the upper bound.`\n  )\n  .params(u =>\n    u\n      .combine('dimension', [undefined, ...kTextureDimensions])\n      .beginSubcases()\n      .combine('format', kUncompressedTextureFormats)\n      .combine('size', [[1], [1, 1], [1, 1, 1]])\n      // Filter out incompatible dimension type and format combinations.\n      .filter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format))\n  )\n  .fn(async t => {\n    const { dimension, format, size } = t.params;\n    await t.selectDeviceOrSkipTestCase(kTextureFormatInfo[format].feature);\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    t.device.createTexture(descriptor);\n  });\n\ng.test('texture_size,default_value_and_smallest_size,compressed_format')\n  .desc(\n    `Test default values for height and depthOrArrayLayers for every dimension type and every compressed format.\n\t  It also tests smallest size (lower bound) for every dimension type and every compressed format, while other texture_size tests are testing the upper bound.`\n  )\n  .params(u =>\n    u\n      // Compressed formats are invalid for 1D and 3D.\n      .combine('dimension', [undefined, '2d'] as const)\n      .beginSubcases()\n      .combine('format', kCompressedTextureFormats)\n      .expandWithParams(p => {\n        const { blockWidth, blockHeight } = kTextureFormatInfo[p.format];\n        return [\n          { size: [1], _success: false },\n          { size: [blockWidth], _success: false },\n          { size: [1, 1], _success: false },\n          { size: [blockWidth, blockHeight], _success: true },\n          { size: [1, 1, 1], _success: false },\n          { size: [blockWidth, blockHeight, 1], _success: true },\n        ];\n      })\n  )\n  .fn(async t => {\n    const { dimension, format, size, _success } = t.params;\n    const info = kTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !_success);\n  });\n\ng.test('texture_size,1d_texture')\n  .desc(`Test texture size requirement for 1D texture`)\n  .paramsSubcasesOnly(u =>\n    u //\n      // Compressed and depth-stencil textures are invalid for 1D.\n      .combine('format', kRegularTextureFormats)\n      .combine('width', [\n        kLimitInfo.maxTextureDimension1D.default - 1,\n        kLimitInfo.maxTextureDimension1D.default,\n        kLimitInfo.maxTextureDimension1D.default + 1,\n      ])\n      .combine('height', [1, 2])\n      .combine('depthOrArrayLayers', [1, 2])\n  )\n  .fn(async t => {\n    const { format, width, height, depthOrArrayLayers } = t.params;\n    await t.selectDeviceOrSkipTestCase(kTextureFormatInfo[format].feature);\n\n    const descriptor: GPUTextureDescriptor = {\n      size: [width, height, depthOrArrayLayers],\n      dimension: '1d' as const,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const success =\n      width <= kLimitInfo.maxTextureDimension1D.default && height === 1 && depthOrArrayLayers === 1;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('texture_size,2d_texture,uncompressed_format')\n  .desc(`Test texture size requirement for 2D texture with uncompressed format.`)\n  .params(u =>\n    u\n      .combine('dimension', [undefined, '2d'] as const)\n      .combine('format', kUncompressedTextureFormats)\n      .combine('size', [\n        // Test the bound of width\n        [kLimitInfo.maxTextureDimension2D.default - 1, 1, 1],\n        [kLimitInfo.maxTextureDimension2D.default, 1, 1],\n        [kLimitInfo.maxTextureDimension2D.default + 1, 1, 1],\n        // Test the bound of height\n        [1, kLimitInfo.maxTextureDimension2D.default - 1, 1],\n        [1, kLimitInfo.maxTextureDimension2D.default, 1],\n        [1, kLimitInfo.maxTextureDimension2D.default + 1, 1],\n        // Test the bound of array layers\n        [1, 1, kLimitInfo.maxTextureArrayLayers.default - 1],\n        [1, 1, kLimitInfo.maxTextureArrayLayers.default],\n        [1, 1, kLimitInfo.maxTextureArrayLayers.default + 1],\n      ])\n  )\n  .fn(async t => {\n    const { dimension, format, size } = t.params;\n    await t.selectDeviceOrSkipTestCase(kTextureFormatInfo[format].feature);\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const success =\n      size[0] <= kLimitInfo.maxTextureDimension2D.default &&\n      size[1] <= kLimitInfo.maxTextureDimension2D.default &&\n      size[2] <= kLimitInfo.maxTextureArrayLayers.default;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('texture_size,2d_texture,compressed_format')\n  .desc(`Test texture size requirement for 2D texture with compressed format.`)\n  .params(u =>\n    u\n      .combine('dimension', [undefined, '2d'] as const)\n      .combine('format', kCompressedTextureFormats)\n      .expand('size', p => {\n        const { blockWidth, blockHeight } = kTextureFormatInfo[p.format];\n        return [\n          // Test the bound of width\n          [kLimitInfo.maxTextureDimension2D.default - 1, 1, 1],\n          [kLimitInfo.maxTextureDimension2D.default - blockWidth, 1, 1],\n          [kLimitInfo.maxTextureDimension2D.default - blockWidth, blockHeight, 1],\n          [kLimitInfo.maxTextureDimension2D.default, 1, 1],\n          [kLimitInfo.maxTextureDimension2D.default, blockHeight, 1],\n          [kLimitInfo.maxTextureDimension2D.default + 1, 1, 1],\n          [kLimitInfo.maxTextureDimension2D.default + blockWidth, 1, 1],\n          [kLimitInfo.maxTextureDimension2D.default + blockWidth, blockHeight, 1],\n          // Test the bound of height\n          [1, kLimitInfo.maxTextureDimension2D.default - 1, 1],\n          [1, kLimitInfo.maxTextureDimension2D.default - blockHeight, 1],\n          [blockWidth, kLimitInfo.maxTextureDimension2D.default - blockHeight, 1],\n          [1, kLimitInfo.maxTextureDimension2D.default, 1],\n          [blockWidth, kLimitInfo.maxTextureDimension2D.default, 1],\n          [1, kLimitInfo.maxTextureDimension2D.default + 1, 1],\n          [1, kLimitInfo.maxTextureDimension2D.default + blockWidth, 1],\n          [blockWidth, kLimitInfo.maxTextureDimension2D.default + blockHeight, 1],\n          // Test the bound of array layers\n          [1, 1, kLimitInfo.maxTextureArrayLayers.default - 1],\n          [blockWidth, 1, kLimitInfo.maxTextureArrayLayers.default - 1],\n          [1, blockHeight, kLimitInfo.maxTextureArrayLayers.default - 1],\n          [blockWidth, blockHeight, kLimitInfo.maxTextureArrayLayers.default - 1],\n          [1, 1, kLimitInfo.maxTextureArrayLayers.default],\n          [blockWidth, 1, kLimitInfo.maxTextureArrayLayers.default],\n          [1, blockHeight, kLimitInfo.maxTextureArrayLayers.default],\n          [blockWidth, blockHeight, kLimitInfo.maxTextureArrayLayers.default],\n          [1, 1, kLimitInfo.maxTextureArrayLayers.default + 1],\n          [blockWidth, 1, kLimitInfo.maxTextureArrayLayers.default + 1],\n          [1, blockHeight, kLimitInfo.maxTextureArrayLayers.default + 1],\n          [blockWidth, blockHeight, kLimitInfo.maxTextureArrayLayers.default + 1],\n        ];\n      })\n  )\n  .fn(async t => {\n    const { dimension, format, size } = t.params;\n    const info = kTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const success =\n      size[0] % info.blockWidth === 0 &&\n      size[1] % info.blockHeight === 0 &&\n      size[0] <= kLimitInfo.maxTextureDimension2D.default &&\n      size[1] <= kLimitInfo.maxTextureDimension2D.default &&\n      size[2] <= kLimitInfo.maxTextureArrayLayers.default;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('texture_size,3d_texture,uncompressed_format')\n  .desc(\n    `Test texture size requirement for 3D texture with uncompressed format. Note that depth/stencil formats are invalid for 3D textures, so we only test regular formats.`\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('format', kRegularTextureFormats)\n      .combine('size', [\n        // Test the bound of width\n        [kLimitInfo.maxTextureDimension3D.default - 1, 1, 1],\n        [kLimitInfo.maxTextureDimension3D.default, 1, 1],\n        [kLimitInfo.maxTextureDimension3D.default + 1, 1, 1],\n        // Test the bound of height\n        [1, kLimitInfo.maxTextureDimension3D.default - 1, 1],\n        [1, kLimitInfo.maxTextureDimension3D.default, 1],\n        [1, kLimitInfo.maxTextureDimension3D.default + 1, 1],\n        // Test the bound of depth\n        [1, 1, kLimitInfo.maxTextureDimension3D.default - 1],\n        [1, 1, kLimitInfo.maxTextureDimension3D.default],\n        [1, 1, kLimitInfo.maxTextureDimension3D.default + 1],\n      ])\n  )\n  .fn(async t => {\n    const { format, size } = t.params;\n    await t.selectDeviceOrSkipTestCase(kTextureFormatInfo[format].feature);\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension: '3d' as const,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const success =\n      size[0] <= kLimitInfo.maxTextureDimension3D.default &&\n      size[1] <= kLimitInfo.maxTextureDimension3D.default &&\n      size[2] <= kLimitInfo.maxTextureDimension3D.default;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('texture_size,3d_texture,compressed_format')\n  .desc(`Test texture size requirement for 3D texture with compressed format.`)\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('format', kCompressedTextureFormats)\n      .expand('size', p => {\n        const { blockWidth, blockHeight } = kTextureFormatInfo[p.format];\n        return [\n          // Test the bound of width\n          [kLimitInfo.maxTextureDimension3D.default - 1, 1, 1],\n          [kLimitInfo.maxTextureDimension3D.default - blockWidth, 1, 1],\n          [kLimitInfo.maxTextureDimension3D.default - blockWidth, blockHeight, 1],\n          [kLimitInfo.maxTextureDimension3D.default, 1, 1],\n          [kLimitInfo.maxTextureDimension3D.default, blockHeight, 1],\n          [kLimitInfo.maxTextureDimension3D.default + 1, 1, 1],\n          [kLimitInfo.maxTextureDimension3D.default + blockWidth, 1, 1],\n          [kLimitInfo.maxTextureDimension3D.default + blockWidth, blockHeight, 1],\n          // Test the bound of height\n          [1, kLimitInfo.maxTextureDimension3D.default - 1, 1],\n          [1, kLimitInfo.maxTextureDimension3D.default - blockHeight, 1],\n          [blockWidth, kLimitInfo.maxTextureDimension3D.default - blockHeight, 1],\n          [1, kLimitInfo.maxTextureDimension3D.default, 1],\n          [blockWidth, kLimitInfo.maxTextureDimension3D.default, 1],\n          [1, kLimitInfo.maxTextureDimension3D.default + 1, 1],\n          [1, kLimitInfo.maxTextureDimension3D.default + blockWidth, 1],\n          [blockWidth, kLimitInfo.maxTextureDimension3D.default + blockHeight, 1],\n          // Test the bound of depth\n          [1, 1, kLimitInfo.maxTextureDimension3D.default - 1],\n          [blockWidth, 1, kLimitInfo.maxTextureDimension3D.default - 1],\n          [1, blockHeight, kLimitInfo.maxTextureDimension3D.default - 1],\n          [blockWidth, blockHeight, kLimitInfo.maxTextureDimension3D.default - 1],\n          [1, 1, kLimitInfo.maxTextureDimension3D.default],\n          [blockWidth, 1, kLimitInfo.maxTextureDimension3D.default],\n          [1, blockHeight, kLimitInfo.maxTextureDimension3D.default],\n          [blockWidth, blockHeight, kLimitInfo.maxTextureDimension3D.default],\n          [1, 1, kLimitInfo.maxTextureDimension3D.default + 1],\n          [blockWidth, 1, kLimitInfo.maxTextureDimension3D.default + 1],\n          [1, blockHeight, kLimitInfo.maxTextureDimension3D.default + 1],\n          [blockWidth, blockHeight, kLimitInfo.maxTextureDimension3D.default + 1],\n        ];\n      })\n  )\n  .fn(async t => {\n    const { format, size } = t.params;\n\n    // Compressed formats are not supported in 3D in WebGPU v1 because they are complicated but not very useful for now.\n    t.skip('Compressed 3D texture is not supported');\n\n    const info = kTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    assert(\n      kLimitInfo.maxTextureDimension3D.default % info.blockWidth === 0 &&\n        kLimitInfo.maxTextureDimension3D.default % info.blockHeight === 0\n    );\n\n    const descriptor: GPUTextureDescriptor = {\n      size,\n      dimension: '3d' as const,\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const success =\n      size[0] % info.blockWidth === 0 &&\n      size[1] % info.blockHeight === 0 &&\n      size[0] <= kLimitInfo.maxTextureDimension3D.default &&\n      size[1] <= kLimitInfo.maxTextureDimension3D.default &&\n      size[2] <= kLimitInfo.maxTextureDimension3D.default;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('texture_usage')\n  .desc(\n    `Test texture usage (single usage or combined usages) for every texture format and every dimension type`\n  )\n  .params(u =>\n    u\n      .combine('dimension', [undefined, ...kTextureDimensions])\n      .beginSubcases()\n      .combine('format', kTextureFormats)\n      // If usage0 and usage1 are the same, then the usage being test is a single usage. Otherwise, it is a combined usage.\n      .combine('usage0', kTextureUsages)\n      .combine('usage1', kTextureUsages)\n      // Filter out incompatible dimension type and format combinations.\n      .filter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format))\n  )\n  .fn(async t => {\n    const { dimension, format, usage0, usage1 } = t.params;\n    const info = kTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    const size = [info.blockWidth, info.blockHeight, 1];\n    const usage = usage0 | usage1;\n    const descriptor = {\n      size,\n      dimension,\n      format,\n      usage,\n    };\n\n    let success = true;\n    const appliedDimension = dimension ?? '2d';\n    // Note that we unconditionally test copy usages for all formats. We don't check copySrc/copyDst in kTextureFormatInfo in capability_info.js\n    // if (!info.copySrc && (usage & GPUTextureUsage.COPY_SRC) !== 0) success = false;\n    // if (!info.copyDst && (usage & GPUTextureUsage.COPY_DST) !== 0) success = false;\n    if (!info.storage && (usage & GPUTextureUsage.STORAGE_BINDING) !== 0) success = false;\n    if (\n      (!info.renderable || appliedDimension !== '2d') &&\n      (usage & GPUTextureUsage.RENDER_ATTACHMENT) !== 0\n    )\n      success = false;\n\n    t.expectValidationError(() => {\n      t.device.createTexture(descriptor);\n    }, !success);\n  });\n\ng.test('viewFormats')\n  .desc(\n    `Test creating a texture with viewFormats list for all {texture format}x{view format}. Only compatible view formats should be valid.`\n  )\n  .params(u =>\n    u.combine('format', kTextureFormats).beginSubcases().combine('viewFormat', kTextureFormats)\n  )\n  .fn(async t => {\n    const { format, viewFormat } = t.params;\n    await t.selectDeviceForTextureFormatOrSkipTestCase([format, viewFormat]);\n    const { blockWidth, blockHeight } = kTextureFormatInfo[format];\n\n    const compatible = viewCompatible(format, viewFormat);\n\n    // Test the viewFormat in the list.\n    t.expectValidationError(() => {\n      t.device.createTexture({\n        format,\n        size: [blockWidth, blockHeight],\n        usage: GPUTextureUsage.TEXTURE_BINDING,\n        viewFormats: [viewFormat],\n      });\n    }, !compatible);\n\n    // Test the viewFormat and the texture format in the list.\n    t.expectValidationError(() => {\n      t.device.createTexture({\n        format,\n        size: [blockWidth, blockHeight],\n        usage: GPUTextureUsage.TEXTURE_BINDING,\n        viewFormats: [viewFormat, format],\n      });\n    }, !compatible);\n\n    // Test the viewFormat multiple times in the list.\n    t.expectValidationError(() => {\n      t.device.createTexture({\n        format,\n        size: [blockWidth, blockHeight],\n        usage: GPUTextureUsage.TEXTURE_BINDING,\n        viewFormats: [viewFormat, viewFormat],\n      });\n    }, !compatible);\n  });\n"],"file":"createTexture.spec.js"}