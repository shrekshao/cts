{"version":3,"sources":["../../../../src/webgpu/api/validation/validation_test.ts"],"names":["attemptGarbageCollection","assert","kMaxQueryCount","GPUTest","initUncanonicalizedDeviceDescriptor","DevicePool","TestOOMedShouldAttemptGC","mismatchedDevicePool","ValidationTest","mismatchedDevice","mismatchedProvider","undefined","mismatchedAcquiredDevice","acquire","selectMismatchedDeviceOrSkipTestCase","descriptor","reserve","finalize","threw","provider","release","ex","createTextureWithState","state","size","width","height","depthOrArrayLayers","format","usage","GPUTextureUsage","COPY_SRC","COPY_DST","TEXTURE_BINDING","STORAGE_BINDING","RENDER_ATTACHMENT","trackForCleanup","device","createTexture","getErrorTexture","texture","destroy","createBufferWithState","GPUBufferUsage","VERTEX","createBuffer","pushErrorScope","buffer","MAP_READ","popErrorScope","createQuerySetWithState","desc","type","count","createQuerySet","expectGPUError","queryset","getStorageBuffer","STORAGE","getUniformBuffer","UNIFORM","getErrorBuffer","getErrorSampler","sampler","createSampler","lodMinClamp","getSampledTexture","sampleCount","getStorageTexture","getRenderTexture","getErrorTextureView","view","createView","getBindingResource","bindingType","minFilter","compare","getDeviceMismatchedStorageBuffer","getDeviceMismatchedUniformBuffer","getDeviceMismatchedTexture","getDeviceMismatchedSampledTexture","getDeviceMismatchedStorageTexture","getDeviceMismatchedRenderTexture","getDeviceMismatchedBindingResource","createRenderPipelineWithState","createNoOpRenderPipeline","createErrorRenderPipeline","createRenderPipeline","vertex","module","createShaderModule","code","entryPoint","fragment","targets","writeMask","primitive","topology","pipeline","createNoOpComputePipeline","layout","createComputePipeline","compute","createErrorComputePipeline"],"mappings":"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","sourcesContent":["import { attemptGarbageCollection } from '../../../common/util/collect_garbage.js';\nimport { assert } from '../../../common/util/util.js';\nimport { ValidBindableResource, BindableResource, kMaxQueryCount } from '../../capability_info.js';\nimport { GPUTest, ResourceState, initUncanonicalizedDeviceDescriptor } from '../../gpu_test.js';\nimport {\n  DevicePool,\n  DeviceProvider,\n  TestOOMedShouldAttemptGC,\n  UncanonicalizedDeviceDescriptor,\n} from '../../util/device_pool.js';\n\n// TODO: When DevicePool becomes able to provide multiple devices at once, use the usual one instead of a new one.\nconst mismatchedDevicePool = new DevicePool();\n\n/**\n * Base fixture for WebGPU validation tests.\n */\nexport class ValidationTest extends GPUTest {\n  // Device mismatched validation tests require another GPUDevice different from the default\n  // GPUDevice of GPUTest. It is only used to create device mismatched objects.\n  private mismatchedProvider: DeviceProvider | undefined;\n  private mismatchedAcquiredDevice: GPUDevice | undefined;\n\n  /** GPUDevice for creating mismatched objects required by device mismatched validation tests. */\n  get mismatchedDevice(): GPUDevice {\n    assert(\n      this.mismatchedProvider !== undefined,\n      'No provider available right now; did you \"await\" selectMismatchedDeviceOrSkipTestCase?'\n    );\n    if (!this.mismatchedAcquiredDevice) {\n      this.mismatchedAcquiredDevice = this.mismatchedProvider.acquire();\n    }\n    return this.mismatchedAcquiredDevice;\n  }\n\n  /**\n   * Create other device different with current test device, which could be got by `.mismatchedDevice`.\n   * A `descriptor` may be undefined, which returns a `default` mismatched device.\n   * If the request descriptor or feature name can't be supported, throws an exception to skip the entire test case.\n   */\n  async selectMismatchedDeviceOrSkipTestCase(\n    descriptor:\n      | UncanonicalizedDeviceDescriptor\n      | GPUFeatureName\n      | undefined\n      | Array<GPUFeatureName | undefined>\n  ): Promise<void> {\n    assert(\n      this.mismatchedProvider === undefined,\n      \"Can't selectMismatchedDeviceOrSkipTestCase() multiple times\"\n    );\n\n    this.mismatchedProvider =\n      descriptor === undefined\n        ? await mismatchedDevicePool.reserve()\n        : await mismatchedDevicePool.reserve(initUncanonicalizedDeviceDescriptor(descriptor));\n\n    this.mismatchedAcquiredDevice = this.mismatchedProvider.acquire();\n  }\n\n  protected async finalize(): Promise<void> {\n    await super.finalize();\n\n    if (this.mismatchedProvider) {\n      // TODO(kainino0x): Deduplicate this with code in GPUTest.finalize\n      let threw: undefined | Error;\n      {\n        const provider = this.mismatchedProvider;\n        this.mismatchedProvider = undefined;\n        try {\n          await mismatchedDevicePool.release(provider);\n        } catch (ex) {\n          threw = ex;\n        }\n      }\n\n      if (threw) {\n        if (threw instanceof TestOOMedShouldAttemptGC) {\n          // Try to clean up, in case there are stray GPU resources in need of collection.\n          await attemptGarbageCollection();\n        }\n        throw threw;\n      }\n    }\n  }\n\n  /**\n   * Create a GPUTexture in the specified state.\n   * A `descriptor` may optionally be passed, which is used when `state` is not `'invalid'`.\n   */\n  createTextureWithState(\n    state: ResourceState,\n    descriptor?: Readonly<GPUTextureDescriptor>\n  ): GPUTexture {\n    descriptor = descriptor ?? {\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage:\n        GPUTextureUsage.COPY_SRC |\n        GPUTextureUsage.COPY_DST |\n        GPUTextureUsage.TEXTURE_BINDING |\n        GPUTextureUsage.STORAGE_BINDING |\n        GPUTextureUsage.RENDER_ATTACHMENT,\n    };\n\n    switch (state) {\n      case 'valid':\n        return this.trackForCleanup(this.device.createTexture(descriptor));\n      case 'invalid':\n        return this.getErrorTexture();\n      case 'destroyed': {\n        const texture = this.device.createTexture(descriptor);\n        texture.destroy();\n        return texture;\n      }\n    }\n  }\n\n  /**\n   * Create a GPUTexture in the specified state. A `descriptor` may optionally be passed;\n   * if `state` is `'invalid'`, it will be modified to add an invalid combination of usages.\n   */\n  createBufferWithState(\n    state: ResourceState,\n    descriptor?: Readonly<GPUBufferDescriptor>\n  ): GPUBuffer {\n    descriptor = descriptor ?? {\n      size: 4,\n      usage: GPUBufferUsage.VERTEX,\n    };\n\n    switch (state) {\n      case 'valid':\n        return this.trackForCleanup(this.device.createBuffer(descriptor));\n\n      case 'invalid': {\n        // Make the buffer invalid because of an invalid combination of usages but keep the\n        // descriptor passed as much as possible (for mappedAtCreation and friends).\n        this.device.pushErrorScope('validation');\n        const buffer = this.device.createBuffer({\n          ...descriptor,\n          usage: descriptor.usage | GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_SRC,\n        });\n        this.device.popErrorScope();\n        return buffer;\n      }\n      case 'destroyed': {\n        const buffer = this.device.createBuffer(descriptor);\n        buffer.destroy();\n        return buffer;\n      }\n    }\n  }\n\n  /**\n   * Create a GPUQuerySet in the specified state.\n   * A `descriptor` may optionally be passed, which is used when `state` is not `'invalid'`.\n   */\n  createQuerySetWithState(\n    state: ResourceState,\n    desc?: Readonly<GPUQuerySetDescriptor>\n  ): GPUQuerySet {\n    const descriptor = { type: 'occlusion' as const, count: 2, ...desc };\n\n    switch (state) {\n      case 'valid':\n        return this.trackForCleanup(this.device.createQuerySet(descriptor));\n      case 'invalid': {\n        // Make the queryset invalid because of the count out of bounds.\n        descriptor.count = kMaxQueryCount + 1;\n        return this.expectGPUError('validation', () => this.device.createQuerySet(descriptor));\n      }\n      case 'destroyed': {\n        const queryset = this.device.createQuerySet(descriptor);\n        queryset.destroy();\n        return queryset;\n      }\n    }\n  }\n\n  /** Create an arbitrarily-sized GPUBuffer with the STORAGE usage. */\n  getStorageBuffer(): GPUBuffer {\n    return this.trackForCleanup(\n      this.device.createBuffer({ size: 1024, usage: GPUBufferUsage.STORAGE })\n    );\n  }\n\n  /** Create an arbitrarily-sized GPUBuffer with the UNIFORM usage. */\n  getUniformBuffer(): GPUBuffer {\n    return this.trackForCleanup(\n      this.device.createBuffer({ size: 1024, usage: GPUBufferUsage.UNIFORM })\n    );\n  }\n\n  /** Return an invalid GPUBuffer. */\n  getErrorBuffer(): GPUBuffer {\n    return this.createBufferWithState('invalid');\n  }\n\n  /** Return an invalid GPUSampler. */\n  getErrorSampler(): GPUSampler {\n    this.device.pushErrorScope('validation');\n    const sampler = this.device.createSampler({ lodMinClamp: -1 });\n    this.device.popErrorScope();\n    return sampler;\n  }\n\n  /**\n   * Return an arbitrarily-configured GPUTexture with the `TEXTURE_BINDING` usage and specified sampleCount.\n   */\n  getSampledTexture(sampleCount: number = 1): GPUTexture {\n    return this.trackForCleanup(\n      this.device.createTexture({\n        size: { width: 16, height: 16, depthOrArrayLayers: 1 },\n        format: 'rgba8unorm',\n        usage: GPUTextureUsage.TEXTURE_BINDING,\n        sampleCount,\n      })\n    );\n  }\n\n  /** Return an arbitrarily-configured GPUTexture with the `STORAGE_BINDING` usage. */\n  getStorageTexture(): GPUTexture {\n    return this.trackForCleanup(\n      this.device.createTexture({\n        size: { width: 16, height: 16, depthOrArrayLayers: 1 },\n        format: 'rgba8unorm',\n        usage: GPUTextureUsage.STORAGE_BINDING,\n      })\n    );\n  }\n\n  /** Return an arbitrarily-configured GPUTexture with the `RENDER_ATTACHMENT` usage. */\n  getRenderTexture(sampleCount: number = 1): GPUTexture {\n    return this.trackForCleanup(\n      this.device.createTexture({\n        size: { width: 16, height: 16, depthOrArrayLayers: 1 },\n        format: 'rgba8unorm',\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n        sampleCount,\n      })\n    );\n  }\n\n  /** Return an invalid GPUTexture. */\n  getErrorTexture(): GPUTexture {\n    this.device.pushErrorScope('validation');\n    const texture = this.device.createTexture({\n      size: { width: 0, height: 0, depthOrArrayLayers: 0 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    });\n    this.device.popErrorScope();\n    return texture;\n  }\n\n  /** Return an invalid GPUTextureView (created from an invalid GPUTexture). */\n  getErrorTextureView(): GPUTextureView {\n    this.device.pushErrorScope('validation');\n    const view = this.getErrorTexture().createView();\n    this.device.popErrorScope();\n    return view;\n  }\n\n  /**\n   * Return an arbitrary object of the specified {@link BindableResource} type\n   * (e.g. `'errorBuf'`, `'nonFiltSamp'`, `sampledTexMS`, etc.)\n   */\n  getBindingResource(bindingType: BindableResource): GPUBindingResource {\n    switch (bindingType) {\n      case 'errorBuf':\n        return { buffer: this.getErrorBuffer() };\n      case 'errorSamp':\n        return this.getErrorSampler();\n      case 'errorTex':\n        return this.getErrorTextureView();\n      case 'uniformBuf':\n        return { buffer: this.getUniformBuffer() };\n      case 'storageBuf':\n        return { buffer: this.getStorageBuffer() };\n      case 'filtSamp':\n        return this.device.createSampler({ minFilter: 'linear' });\n      case 'nonFiltSamp':\n        return this.device.createSampler();\n      case 'compareSamp':\n        return this.device.createSampler({ compare: 'never' });\n      case 'sampledTex':\n        return this.getSampledTexture(1).createView();\n      case 'sampledTexMS':\n        return this.getSampledTexture(4).createView();\n      case 'storageTex':\n        return this.getStorageTexture().createView();\n    }\n  }\n\n  /** Create an arbitrarily-sized GPUBuffer with the STORAGE usage from mismatched device. */\n  getDeviceMismatchedStorageBuffer(): GPUBuffer {\n    return this.trackForCleanup(\n      this.mismatchedDevice.createBuffer({ size: 4, usage: GPUBufferUsage.STORAGE })\n    );\n  }\n\n  /** Create an arbitrarily-sized GPUBuffer with the UNIFORM usage from mismatched device. */\n  getDeviceMismatchedUniformBuffer(): GPUBuffer {\n    return this.trackForCleanup(\n      this.mismatchedDevice.createBuffer({ size: 4, usage: GPUBufferUsage.UNIFORM })\n    );\n  }\n\n  /** Return a GPUTexture with descriptor from mismatched device. */\n  getDeviceMismatchedTexture(descriptor: GPUTextureDescriptor): GPUTexture {\n    return this.trackForCleanup(this.mismatchedDevice.createTexture(descriptor));\n  }\n\n  /** Return an arbitrarily-configured GPUTexture with the `SAMPLED` usage from mismatched device. */\n  getDeviceMismatchedSampledTexture(sampleCount: number = 1): GPUTexture {\n    return this.getDeviceMismatchedTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n      sampleCount,\n    });\n  }\n\n  /** Return an arbitrarily-configured GPUTexture with the `STORAGE` usage from mismatched device. */\n  getDeviceMismatchedStorageTexture(): GPUTexture {\n    return this.getDeviceMismatchedTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.STORAGE_BINDING,\n    });\n  }\n\n  /** Return an arbitrarily-configured GPUTexture with the `RENDER_ATTACHMENT` usage from mismatched device. */\n  getDeviceMismatchedRenderTexture(sampleCount: number = 1): GPUTexture {\n    return this.getDeviceMismatchedTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      sampleCount,\n    });\n  }\n\n  getDeviceMismatchedBindingResource(bindingType: ValidBindableResource): GPUBindingResource {\n    switch (bindingType) {\n      case 'uniformBuf':\n        return { buffer: this.getDeviceMismatchedStorageBuffer() };\n      case 'storageBuf':\n        return { buffer: this.getDeviceMismatchedUniformBuffer() };\n      case 'filtSamp':\n        return this.mismatchedDevice.createSampler({ minFilter: 'linear' });\n      case 'nonFiltSamp':\n        return this.mismatchedDevice.createSampler();\n      case 'compareSamp':\n        return this.mismatchedDevice.createSampler({ compare: 'never' });\n      case 'sampledTex':\n        return this.getDeviceMismatchedSampledTexture(1).createView();\n      case 'sampledTexMS':\n        return this.getDeviceMismatchedSampledTexture(4).createView();\n      case 'storageTex':\n        return this.getDeviceMismatchedStorageTexture().createView();\n    }\n  }\n\n  /** Create a GPURenderPipeline in the specified state. */\n  createRenderPipelineWithState(state: 'valid' | 'invalid'): GPURenderPipeline {\n    return state === 'valid' ? this.createNoOpRenderPipeline() : this.createErrorRenderPipeline();\n  }\n\n  /** Return a GPURenderPipeline with default options and no-op vertex and fragment shaders. */\n  createNoOpRenderPipeline(): GPURenderPipeline {\n    return this.device.createRenderPipeline({\n      vertex: {\n        module: this.device.createShaderModule({\n          code: `[[stage(vertex)]] fn main() -> [[builtin(position)]] vec4<f32> {\n  return vec4<f32>();\n}`,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: this.device.createShaderModule({\n          code: '[[stage(fragment)]] fn main() {}',\n        }),\n        entryPoint: 'main',\n        targets: [{ format: 'rgba8unorm', writeMask: 0 }],\n      },\n      primitive: { topology: 'triangle-list' },\n    });\n  }\n\n  /** Return an invalid GPURenderPipeline. */\n  createErrorRenderPipeline(): GPURenderPipeline {\n    this.device.pushErrorScope('validation');\n    const pipeline = this.device.createRenderPipeline({\n      vertex: {\n        module: this.device.createShaderModule({\n          code: '',\n        }),\n        entryPoint: '',\n      },\n    });\n    this.device.popErrorScope();\n    return pipeline;\n  }\n\n  /** Return a GPUComputePipeline with a no-op shader. */\n  createNoOpComputePipeline(layout?: GPUPipelineLayout): GPUComputePipeline {\n    return this.device.createComputePipeline({\n      layout,\n      compute: {\n        module: this.device.createShaderModule({\n          code: '[[stage(compute), workgroup_size(1)]] fn main() {}',\n        }),\n        entryPoint: 'main',\n      },\n    });\n  }\n\n  /** Return an invalid GPUComputePipeline. */\n  createErrorComputePipeline(): GPUComputePipeline {\n    this.device.pushErrorScope('validation');\n    const pipeline = this.device.createComputePipeline({\n      compute: {\n        module: this.device.createShaderModule({\n          code: '',\n        }),\n        entryPoint: '',\n      },\n    });\n    this.device.popErrorScope();\n    return pipeline;\n  }\n}\n"],"file":"validation_test.js"}