{"version":3,"sources":["../../../../src/webgpu/api/validation/validation_test.ts"],"names":["kMaxQueryCount","GPUTest","ValidationTest","createTextureWithState","state","descriptor","size","width","height","depthOrArrayLayers","format","usage","GPUTextureUsage","COPY_SRC","COPY_DST","TEXTURE_BINDING","STORAGE_BINDING","RENDER_ATTACHMENT","trackForCleanup","device","createTexture","getErrorTexture","texture","destroy","createBufferWithState","GPUBufferUsage","VERTEX","createBuffer","pushErrorScope","buffer","MAP_READ","popErrorScope","createQuerySetWithState","desc","type","count","createQuerySet","expectGPUError","queryset","getStorageBuffer","STORAGE","getUniformBuffer","UNIFORM","getErrorBuffer","getErrorSampler","sampler","createSampler","lodMinClamp","getSampledTexture","sampleCount","getStorageTexture","getRenderTexture","getErrorTextureView","view","createView","getBindingResource","bindingType","minFilter","compare","getDeviceMismatchedStorageBuffer","mismatchedDevice","getDeviceMismatchedUniformBuffer","getDeviceMismatchedTexture","getDeviceMismatchedSampledTexture","getDeviceMismatchedStorageTexture","getDeviceMismatchedRenderTexture","getDeviceMismatchedBindingResource","createRenderPipelineWithState","createNoOpRenderPipeline","createErrorRenderPipeline","createRenderPipeline","vertex","module","createShaderModule","code","entryPoint","fragment","targets","writeMask","primitive","topology","pipeline","createNoOpComputePipeline","layout","createComputePipeline","compute","createErrorComputePipeline"],"mappings":"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","sourcesContent":["import { ValidBindableResource, BindableResource, kMaxQueryCount } from '../../capability_info.js';\nimport { GPUTest, ResourceState } from '../../gpu_test.js';\n\n/**\n * Base fixture for WebGPU validation tests.\n */\nexport class ValidationTest extends GPUTest {\n  /**\n   * Create a GPUTexture in the specified state.\n   * A `descriptor` may optionally be passed, which is used when `state` is not `'invalid'`.\n   */\n  createTextureWithState(\n    state: ResourceState,\n    descriptor?: Readonly<GPUTextureDescriptor>\n  ): GPUTexture {\n    descriptor = descriptor ?? {\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage:\n        GPUTextureUsage.COPY_SRC |\n        GPUTextureUsage.COPY_DST |\n        GPUTextureUsage.TEXTURE_BINDING |\n        GPUTextureUsage.STORAGE_BINDING |\n        GPUTextureUsage.RENDER_ATTACHMENT,\n    };\n\n    switch (state) {\n      case 'valid':\n        return this.trackForCleanup(this.device.createTexture(descriptor));\n      case 'invalid':\n        return this.getErrorTexture();\n      case 'destroyed': {\n        const texture = this.device.createTexture(descriptor);\n        texture.destroy();\n        return texture;\n      }\n    }\n  }\n\n  /**\n   * Create a GPUTexture in the specified state. A `descriptor` may optionally be passed;\n   * if `state` is `'invalid'`, it will be modified to add an invalid combination of usages.\n   */\n  createBufferWithState(\n    state: ResourceState,\n    descriptor?: Readonly<GPUBufferDescriptor>\n  ): GPUBuffer {\n    descriptor = descriptor ?? {\n      size: 4,\n      usage: GPUBufferUsage.VERTEX,\n    };\n\n    switch (state) {\n      case 'valid':\n        return this.trackForCleanup(this.device.createBuffer(descriptor));\n\n      case 'invalid': {\n        // Make the buffer invalid because of an invalid combination of usages but keep the\n        // descriptor passed as much as possible (for mappedAtCreation and friends).\n        this.device.pushErrorScope('validation');\n        const buffer = this.device.createBuffer({\n          ...descriptor,\n          usage: descriptor.usage | GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_SRC,\n        });\n        this.device.popErrorScope();\n        return buffer;\n      }\n      case 'destroyed': {\n        const buffer = this.device.createBuffer(descriptor);\n        buffer.destroy();\n        return buffer;\n      }\n    }\n  }\n\n  /**\n   * Create a GPUQuerySet in the specified state.\n   * A `descriptor` may optionally be passed, which is used when `state` is not `'invalid'`.\n   */\n  createQuerySetWithState(\n    state: ResourceState,\n    desc?: Readonly<GPUQuerySetDescriptor>\n  ): GPUQuerySet {\n    const descriptor = { type: 'occlusion' as const, count: 2, ...desc };\n\n    switch (state) {\n      case 'valid':\n        return this.trackForCleanup(this.device.createQuerySet(descriptor));\n      case 'invalid': {\n        // Make the queryset invalid because of the count out of bounds.\n        descriptor.count = kMaxQueryCount + 1;\n        return this.expectGPUError('validation', () => this.device.createQuerySet(descriptor));\n      }\n      case 'destroyed': {\n        const queryset = this.device.createQuerySet(descriptor);\n        queryset.destroy();\n        return queryset;\n      }\n    }\n  }\n\n  /** Create an arbitrarily-sized GPUBuffer with the STORAGE usage. */\n  getStorageBuffer(): GPUBuffer {\n    return this.trackForCleanup(\n      this.device.createBuffer({ size: 1024, usage: GPUBufferUsage.STORAGE })\n    );\n  }\n\n  /** Create an arbitrarily-sized GPUBuffer with the UNIFORM usage. */\n  getUniformBuffer(): GPUBuffer {\n    return this.trackForCleanup(\n      this.device.createBuffer({ size: 1024, usage: GPUBufferUsage.UNIFORM })\n    );\n  }\n\n  /** Return an invalid GPUBuffer. */\n  getErrorBuffer(): GPUBuffer {\n    return this.createBufferWithState('invalid');\n  }\n\n  /** Return an invalid GPUSampler. */\n  getErrorSampler(): GPUSampler {\n    this.device.pushErrorScope('validation');\n    const sampler = this.device.createSampler({ lodMinClamp: -1 });\n    this.device.popErrorScope();\n    return sampler;\n  }\n\n  /**\n   * Return an arbitrarily-configured GPUTexture with the `TEXTURE_BINDING` usage and specified sampleCount.\n   */\n  getSampledTexture(sampleCount: number = 1): GPUTexture {\n    return this.trackForCleanup(\n      this.device.createTexture({\n        size: { width: 16, height: 16, depthOrArrayLayers: 1 },\n        format: 'rgba8unorm',\n        usage: GPUTextureUsage.TEXTURE_BINDING,\n        sampleCount,\n      })\n    );\n  }\n\n  /** Return an arbitrarily-configured GPUTexture with the `STORAGE_BINDING` usage. */\n  getStorageTexture(): GPUTexture {\n    return this.trackForCleanup(\n      this.device.createTexture({\n        size: { width: 16, height: 16, depthOrArrayLayers: 1 },\n        format: 'rgba8unorm',\n        usage: GPUTextureUsage.STORAGE_BINDING,\n      })\n    );\n  }\n\n  /** Return an arbitrarily-configured GPUTexture with the `RENDER_ATTACHMENT` usage. */\n  getRenderTexture(sampleCount: number = 1): GPUTexture {\n    return this.trackForCleanup(\n      this.device.createTexture({\n        size: { width: 16, height: 16, depthOrArrayLayers: 1 },\n        format: 'rgba8unorm',\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n        sampleCount,\n      })\n    );\n  }\n\n  /** Return an invalid GPUTexture. */\n  getErrorTexture(): GPUTexture {\n    this.device.pushErrorScope('validation');\n    const texture = this.device.createTexture({\n      size: { width: 0, height: 0, depthOrArrayLayers: 0 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    });\n    this.device.popErrorScope();\n    return texture;\n  }\n\n  /** Return an invalid GPUTextureView (created from an invalid GPUTexture). */\n  getErrorTextureView(): GPUTextureView {\n    this.device.pushErrorScope('validation');\n    const view = this.getErrorTexture().createView();\n    this.device.popErrorScope();\n    return view;\n  }\n\n  /**\n   * Return an arbitrary object of the specified {@link BindableResource} type\n   * (e.g. `'errorBuf'`, `'nonFiltSamp'`, `sampledTexMS`, etc.)\n   */\n  getBindingResource(bindingType: BindableResource): GPUBindingResource {\n    switch (bindingType) {\n      case 'errorBuf':\n        return { buffer: this.getErrorBuffer() };\n      case 'errorSamp':\n        return this.getErrorSampler();\n      case 'errorTex':\n        return this.getErrorTextureView();\n      case 'uniformBuf':\n        return { buffer: this.getUniformBuffer() };\n      case 'storageBuf':\n        return { buffer: this.getStorageBuffer() };\n      case 'filtSamp':\n        return this.device.createSampler({ minFilter: 'linear' });\n      case 'nonFiltSamp':\n        return this.device.createSampler();\n      case 'compareSamp':\n        return this.device.createSampler({ compare: 'never' });\n      case 'sampledTex':\n        return this.getSampledTexture(1).createView();\n      case 'sampledTexMS':\n        return this.getSampledTexture(4).createView();\n      case 'storageTex':\n        return this.getStorageTexture().createView();\n    }\n  }\n\n  /** Create an arbitrarily-sized GPUBuffer with the STORAGE usage from mismatched device. */\n  getDeviceMismatchedStorageBuffer(): GPUBuffer {\n    return this.trackForCleanup(\n      this.mismatchedDevice.createBuffer({ size: 4, usage: GPUBufferUsage.STORAGE })\n    );\n  }\n\n  /** Create an arbitrarily-sized GPUBuffer with the UNIFORM usage from mismatched device. */\n  getDeviceMismatchedUniformBuffer(): GPUBuffer {\n    return this.trackForCleanup(\n      this.mismatchedDevice.createBuffer({ size: 4, usage: GPUBufferUsage.UNIFORM })\n    );\n  }\n\n  /** Return a GPUTexture with descriptor from mismatched device. */\n  getDeviceMismatchedTexture(descriptor: GPUTextureDescriptor): GPUTexture {\n    return this.trackForCleanup(this.mismatchedDevice.createTexture(descriptor));\n  }\n\n  /** Return an arbitrarily-configured GPUTexture with the `SAMPLED` usage from mismatched device. */\n  getDeviceMismatchedSampledTexture(sampleCount: number = 1): GPUTexture {\n    return this.getDeviceMismatchedTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n      sampleCount,\n    });\n  }\n\n  /** Return an arbitrarily-configured GPUTexture with the `STORAGE` usage from mismatched device. */\n  getDeviceMismatchedStorageTexture(): GPUTexture {\n    return this.getDeviceMismatchedTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.STORAGE_BINDING,\n    });\n  }\n\n  /** Return an arbitrarily-configured GPUTexture with the `RENDER_ATTACHMENT` usage from mismatched device. */\n  getDeviceMismatchedRenderTexture(sampleCount: number = 1): GPUTexture {\n    return this.getDeviceMismatchedTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      sampleCount,\n    });\n  }\n\n  getDeviceMismatchedBindingResource(bindingType: ValidBindableResource): GPUBindingResource {\n    switch (bindingType) {\n      case 'uniformBuf':\n        return { buffer: this.getDeviceMismatchedStorageBuffer() };\n      case 'storageBuf':\n        return { buffer: this.getDeviceMismatchedUniformBuffer() };\n      case 'filtSamp':\n        return this.mismatchedDevice.createSampler({ minFilter: 'linear' });\n      case 'nonFiltSamp':\n        return this.mismatchedDevice.createSampler();\n      case 'compareSamp':\n        return this.mismatchedDevice.createSampler({ compare: 'never' });\n      case 'sampledTex':\n        return this.getDeviceMismatchedSampledTexture(1).createView();\n      case 'sampledTexMS':\n        return this.getDeviceMismatchedSampledTexture(4).createView();\n      case 'storageTex':\n        return this.getDeviceMismatchedStorageTexture().createView();\n    }\n  }\n\n  /** Create a GPURenderPipeline in the specified state. */\n  createRenderPipelineWithState(state: 'valid' | 'invalid'): GPURenderPipeline {\n    return state === 'valid' ? this.createNoOpRenderPipeline() : this.createErrorRenderPipeline();\n  }\n\n  /** Return a GPURenderPipeline with default options and no-op vertex and fragment shaders. */\n  createNoOpRenderPipeline(): GPURenderPipeline {\n    return this.device.createRenderPipeline({\n      vertex: {\n        module: this.device.createShaderModule({\n          code: `@stage(vertex) fn main() -> @builtin(position) vec4<f32> {\n  return vec4<f32>();\n}`,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: this.device.createShaderModule({\n          code: '@stage(fragment) fn main() {}',\n        }),\n        entryPoint: 'main',\n        targets: [{ format: 'rgba8unorm', writeMask: 0 }],\n      },\n      primitive: { topology: 'triangle-list' },\n    });\n  }\n\n  /** Return an invalid GPURenderPipeline. */\n  createErrorRenderPipeline(): GPURenderPipeline {\n    this.device.pushErrorScope('validation');\n    const pipeline = this.device.createRenderPipeline({\n      vertex: {\n        module: this.device.createShaderModule({\n          code: '',\n        }),\n        entryPoint: '',\n      },\n    });\n    this.device.popErrorScope();\n    return pipeline;\n  }\n\n  /** Return a GPUComputePipeline with a no-op shader. */\n  createNoOpComputePipeline(layout?: GPUPipelineLayout): GPUComputePipeline {\n    return this.device.createComputePipeline({\n      layout,\n      compute: {\n        module: this.device.createShaderModule({\n          code: '@stage(compute) @workgroup_size(1) fn main() {}',\n        }),\n        entryPoint: 'main',\n      },\n    });\n  }\n\n  /** Return an invalid GPUComputePipeline. */\n  createErrorComputePipeline(): GPUComputePipeline {\n    this.device.pushErrorScope('validation');\n    const pipeline = this.device.createComputePipeline({\n      compute: {\n        module: this.device.createShaderModule({\n          code: '',\n        }),\n        entryPoint: '',\n      },\n    });\n    this.device.popErrorScope();\n    return pipeline;\n  }\n}\n"],"file":"validation_test.js"}