{"version":3,"sources":["../../../../src/webgpu/api/validation/validation_test.ts"],"names":["assert","unreachable","kMaxQueryCount","GPUTest","kRenderEncodeTypes","kProgrammableEncoderTypes","kEncoderTypes","ValidationTest","createTextureWithState","state","descriptor","size","width","height","depthOrArrayLayers","format","usage","GPUTextureUsage","COPY_SRC","COPY_DST","SAMPLED","STORAGE","RENDER_ATTACHMENT","device","createTexture","getErrorTexture","texture","destroy","createBufferWithState","GPUBufferUsage","VERTEX","createBuffer","pushErrorScope","buffer","MAP_READ","popErrorScope","createQuerySetWithState","type","count","createQuerySet","queryset","getStorageBuffer","getUniformBuffer","UNIFORM","getErrorBuffer","getErrorSampler","sampler","createSampler","lodMinClamp","getSampledTexture","sampleCount","getStorageTexture","getRenderTexture","getErrorTextureView","view","createView","getBindingResource","bindingType","minFilter","compare","createNoOpRenderPipeline","createRenderPipeline","vertex","module","createShaderModule","code","entryPoint","fragment","targets","primitive","topology","createNoOpComputePipeline","createComputePipeline","compute","createErrorComputePipeline","pipeline","createEncoder","encoderType","colorFormat","encoder","createCommandEncoder","finish","createRenderBundleEncoder","colorFormats","pass","bundle","executeBundles","commandEncoder","beginComputePass","endPass","beginRenderPass","colorAttachments","loadValue","r","g","b","a","storeOp","expectValidationError","fn","shouldError","returnValue","undefined","promise","eventualAsyncExpectation","niceStack","gpuValidationError","message","rec","validationFailed","GPUValidationError","debug"],"mappings":"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","sourcesContent":["import { assert, unreachable } from '../../../common/util/util.js';\nimport { BindableResource, kMaxQueryCount } from '../../capability_info.js';\nimport { GPUTest } from '../../gpu_test.js';\n\nexport const kRenderEncodeTypes = ['render pass', 'render bundle'] as const;\nexport type RenderEncodeType = typeof kRenderEncodeTypes[number];\nexport const kProgrammableEncoderTypes = ['compute pass', ...kRenderEncodeTypes] as const;\nexport type ProgrammableEncoderType = typeof kProgrammableEncoderTypes[number];\nexport const kEncoderTypes = ['non-pass', ...kProgrammableEncoderTypes] as const;\nexport type EncoderType = typeof kEncoderTypes[number];\n\nexport interface CommandBufferMaker<T extends EncoderType> {\n  // Look up the type of the encoder based on `T`. If `T` is a union, this will be too!\n  readonly encoder: {\n    'non-pass': GPUCommandEncoder;\n    'compute pass': GPUComputePassEncoder;\n    'render pass': GPURenderPassEncoder;\n    'render bundle': GPURenderBundleEncoder;\n  }[T];\n  finish(): GPUCommandBuffer;\n}\n\n/**\n * Base fixture for WebGPU validation tests.\n */\nexport class ValidationTest extends GPUTest {\n  /**\n   * Create a GPUTexture in the specified state.\n   * A `descriptor` may optionally be passed, which is used when `state` is not `'invalid'`.\n   */\n  createTextureWithState(\n    state: 'valid' | 'invalid' | 'destroyed',\n    descriptor?: Readonly<GPUTextureDescriptor>\n  ): GPUTexture {\n    descriptor = descriptor ?? {\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage:\n        GPUTextureUsage.COPY_SRC |\n        GPUTextureUsage.COPY_DST |\n        GPUTextureUsage.SAMPLED |\n        GPUTextureUsage.STORAGE |\n        GPUTextureUsage.RENDER_ATTACHMENT,\n    };\n\n    switch (state) {\n      case 'valid':\n        return this.device.createTexture(descriptor);\n      case 'invalid':\n        return this.getErrorTexture();\n      case 'destroyed': {\n        const texture = this.device.createTexture(descriptor);\n        texture.destroy();\n        return texture;\n      }\n    }\n  }\n\n  /**\n   * Create a GPUTexture in the specified state. A `descriptor` may optionally be passed;\n   * if `state` is `'invalid'`, it will be modified to add an invalid combination of usages.\n   */\n  createBufferWithState(\n    state: 'valid' | 'invalid' | 'destroyed',\n    descriptor?: Readonly<GPUBufferDescriptor>\n  ): GPUBuffer {\n    descriptor = descriptor ?? {\n      size: 4,\n      usage: GPUBufferUsage.VERTEX,\n    };\n\n    switch (state) {\n      case 'valid':\n        return this.device.createBuffer(descriptor);\n\n      case 'invalid': {\n        // Make the buffer invalid because of an invalid combination of usages but keep the\n        // descriptor passed as much as possible (for mappedAtCreation and friends).\n        this.device.pushErrorScope('validation');\n        const buffer = this.device.createBuffer({\n          ...descriptor,\n          usage: descriptor.usage | GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_SRC,\n        });\n        this.device.popErrorScope();\n        return buffer;\n      }\n      case 'destroyed': {\n        const buffer = this.device.createBuffer(descriptor);\n        buffer.destroy();\n        return buffer;\n      }\n    }\n  }\n\n  /**\n   * Create a GPUQuerySet in the specified state.\n   * A `descriptor` may optionally be passed, which is used when `state` is not `'invalid'`.\n   */\n  createQuerySetWithState(\n    state: 'valid' | 'invalid' | 'destroyed',\n    descriptor?: Readonly<GPUQuerySetDescriptor>\n  ): GPUQuerySet {\n    descriptor = descriptor ?? {\n      type: 'occlusion',\n      count: 2,\n    };\n\n    switch (state) {\n      case 'valid':\n        return this.device.createQuerySet(descriptor);\n      case 'invalid': {\n        // Make the queryset invalid because of the count out of bounds.\n        this.device.pushErrorScope('validation');\n        const queryset = this.device.createQuerySet({\n          type: 'occlusion',\n          count: kMaxQueryCount + 1,\n        });\n        this.device.popErrorScope();\n        return queryset;\n      }\n      case 'destroyed': {\n        const queryset = this.device.createQuerySet(descriptor);\n        queryset.destroy();\n        return queryset;\n      }\n    }\n  }\n\n  /** Create an arbitrarily-sized GPUBuffer with the STORAGE usage. */\n  getStorageBuffer(): GPUBuffer {\n    return this.device.createBuffer({ size: 1024, usage: GPUBufferUsage.STORAGE });\n  }\n\n  /** Create an arbitrarily-sized GPUBuffer with the UNIFORM usage. */\n  getUniformBuffer(): GPUBuffer {\n    return this.device.createBuffer({ size: 1024, usage: GPUBufferUsage.UNIFORM });\n  }\n\n  /** Return an invalid GPUBuffer. */\n  getErrorBuffer(): GPUBuffer {\n    return this.createBufferWithState('invalid');\n  }\n\n  /** Return an invalid GPUSampler. */\n  getErrorSampler(): GPUSampler {\n    this.device.pushErrorScope('validation');\n    const sampler = this.device.createSampler({ lodMinClamp: -1 });\n    this.device.popErrorScope();\n    return sampler;\n  }\n\n  /**\n   * Return an arbitrarily-configured GPUTexture with the `SAMPLED` usage and specified sampleCount.\n   */\n  getSampledTexture(sampleCount: number = 1): GPUTexture {\n    return this.device.createTexture({\n      size: { width: 16, height: 16, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.SAMPLED,\n      sampleCount,\n    });\n  }\n\n  /** Return an arbitrarily-configured GPUTexture with the `STORAGE` usage. */\n  getStorageTexture(): GPUTexture {\n    return this.device.createTexture({\n      size: { width: 16, height: 16, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.STORAGE,\n    });\n  }\n\n  /** Return an arbitrarily-configured GPUTexture with the `RENDER_ATTACHMENT` usage. */\n  getRenderTexture(): GPUTexture {\n    return this.device.createTexture({\n      size: { width: 16, height: 16, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n  }\n\n  /** Return an invalid GPUTexture. */\n  getErrorTexture(): GPUTexture {\n    this.device.pushErrorScope('validation');\n    const texture = this.device.createTexture({\n      size: { width: 0, height: 0, depthOrArrayLayers: 0 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.SAMPLED,\n    });\n    this.device.popErrorScope();\n    return texture;\n  }\n\n  /** Return an invalid GPUTextureView (created from an invalid GPUTexture). */\n  getErrorTextureView(): GPUTextureView {\n    this.device.pushErrorScope('validation');\n    const view = this.getErrorTexture().createView();\n    this.device.popErrorScope();\n    return view;\n  }\n\n  /**\n   * Return an arbitrary object of the specified {@link BindableResource} type\n   * (e.g. `'errorBuf'`, `'nonFiltSamp'`, `sampledTexMS`, etc.)\n   */\n  getBindingResource(bindingType: BindableResource): GPUBindingResource {\n    switch (bindingType) {\n      case 'errorBuf':\n        return { buffer: this.getErrorBuffer() };\n      case 'errorSamp':\n        return this.getErrorSampler();\n      case 'errorTex':\n        return this.getErrorTextureView();\n      case 'uniformBuf':\n        return { buffer: this.getUniformBuffer() };\n      case 'storageBuf':\n        return { buffer: this.getStorageBuffer() };\n      case 'filtSamp':\n        return this.device.createSampler({ minFilter: 'linear' });\n      case 'nonFiltSamp':\n        return this.device.createSampler();\n      case 'compareSamp':\n        return this.device.createSampler({ compare: 'never' });\n      case 'sampledTex':\n        return this.getSampledTexture(1).createView();\n      case 'sampledTexMS':\n        return this.getSampledTexture(4).createView();\n      case 'storageTex':\n        return this.getStorageTexture().createView();\n    }\n  }\n\n  /** Return a GPURenderPipeline with default options and no-op vertex and fragment shaders. */\n  createNoOpRenderPipeline(): GPURenderPipeline {\n    return this.device.createRenderPipeline({\n      vertex: {\n        module: this.device.createShaderModule({\n          code: `[[stage(vertex)]] fn main() -> [[builtin(position)]] vec4<f32> {\n  return vec4<f32>();\n}`,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: this.device.createShaderModule({\n          code: '[[stage(fragment)]] fn main() {}',\n        }),\n        entryPoint: 'main',\n        targets: [{ format: 'rgba8unorm' }],\n      },\n      primitive: { topology: 'triangle-list' },\n    });\n  }\n\n  /** Return a GPUComputePipeline with a no-op shader. */\n  createNoOpComputePipeline(): GPUComputePipeline {\n    return this.device.createComputePipeline({\n      compute: {\n        module: this.device.createShaderModule({\n          code: '[[stage(compute), workgroup_size(1)]] fn main() {}',\n        }),\n        entryPoint: 'main',\n      },\n    });\n  }\n\n  /** Return an invalid GPUComputePipeline. */\n  createErrorComputePipeline(): GPUComputePipeline {\n    this.device.pushErrorScope('validation');\n    const pipeline = this.device.createComputePipeline({\n      compute: {\n        module: this.device.createShaderModule({\n          code: '',\n        }),\n        entryPoint: '',\n      },\n    });\n    this.device.popErrorScope();\n    return pipeline;\n  }\n\n  /**\n   * Returns a GPUCommandEncoder, GPUComputePassEncoder, GPURenderPassEncoder, or\n   * GPURenderBundleEncoder, and a `finish` method returning a GPUCommandBuffer.\n   * Allows testing methods which have the same signature across multiple encoder interfaces.\n   *\n   * TODO(https://github.com/gpuweb/cts/pull/489#issuecomment-812283347):\n   * Make this have stricter validation to ensure errors are generated in the right API call.\n   *\n   * @example\n   * ```\n   * g.test('popDebugGroup')\n   *   .params(u => u.combine('encoderType', kEncoderTypes))\n   *   .fn(t => {\n   *     const { encoder, finish } = t.createEncoder(t.params.encoderType);\n   *     encoder.popDebugGroup();\n   *   });\n   *\n   * g.test('writeTimestamp')\n   *   .params(u => u.combine('encoderType', ['non-pass', 'compute pass', 'render pass'] as const)\n   *   .fn(t => {\n   *     const { encoder, finish } = t.createEncoder(t.params.encoderType);\n   *     // Encoder type is inferred, so `writeTimestamp` can be used even though it doesn't exist\n   *     // on GPURenderBundleEncoder.\n   *     encoder.writeTimestamp(args);\n   *   });\n   * ```\n   */\n  createEncoder<T extends EncoderType>(encoderType: T): CommandBufferMaker<T> {\n    const colorFormat = 'rgba8unorm';\n    switch (encoderType) {\n      case 'non-pass': {\n        const encoder = this.device.createCommandEncoder();\n        // TypeScript introduces an intersection type here where it seems like there shouldn't be\n        // one. Maybe there is a soundness issue here, but I don't think there is one in practice.\n        return {\n          encoder,\n          finish: () => {\n            return encoder.finish();\n          },\n        } as CommandBufferMaker<T>;\n      }\n      case 'render bundle': {\n        const device = this.device;\n        const encoder = device.createRenderBundleEncoder({\n          colorFormats: [colorFormat],\n        });\n        const pass = this.createEncoder('render pass');\n        return {\n          encoder,\n          finish: () => {\n            const bundle = encoder.finish();\n            pass.encoder.executeBundles([bundle]);\n            return pass.finish();\n          },\n        } as CommandBufferMaker<T>;\n      }\n      case 'compute pass': {\n        const commandEncoder = this.device.createCommandEncoder();\n        const encoder = commandEncoder.beginComputePass();\n        return {\n          encoder,\n          finish: () => {\n            encoder.endPass();\n            return commandEncoder.finish();\n          },\n        } as CommandBufferMaker<T>;\n      }\n      case 'render pass': {\n        const commandEncoder = this.device.createCommandEncoder();\n        const view = this.device\n          .createTexture({\n            format: colorFormat,\n            size: { width: 16, height: 16, depthOrArrayLayers: 1 },\n            usage: GPUTextureUsage.RENDER_ATTACHMENT,\n          })\n          .createView();\n        const encoder = commandEncoder.beginRenderPass({\n          colorAttachments: [\n            {\n              view,\n              loadValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n              storeOp: 'store',\n            },\n          ],\n        });\n        return {\n          encoder,\n          finish: () => {\n            encoder.endPass();\n            return commandEncoder.finish();\n          },\n        } as CommandBufferMaker<T>;\n      }\n    }\n    unreachable();\n  }\n\n  /**\n   * Expect a validation error inside the callback.\n   *\n   * Tests should always do just one WebGPU call in the callback, to make sure that's what's tested.\n   */\n  expectValidationError(fn: () => void, shouldError: boolean = true): void {\n    // If no error is expected, we let the scope surrounding the test catch it.\n    if (shouldError) {\n      this.device.pushErrorScope('validation');\n    }\n\n    // Note: A return value is not allowed for the callback function. This is to avoid confusion\n    // about what the actual behavior would be; either of the following could be reasonable:\n    //   - Make expectValidationError async, and have it await on fn(). This causes an async split\n    //     between pushErrorScope and popErrorScope, so if the caller doesn't `await` on\n    //     expectValidationError (either accidentally or because it doesn't care to do so), then\n    //     other test code will be (nondeterministically) caught by the error scope.\n    //   - Make expectValidationError NOT await fn(), but just execute its first block (until the\n    //     first await) and return the return value (a Promise). This would be confusing because it\n    //     would look like the error scope includes the whole async function, but doesn't.\n    // If we do decide we need to return a value, we should use the latter semantic.\n    const returnValue = fn() as unknown;\n    assert(\n      returnValue === undefined,\n      'expectValidationError callback should not return a value (or be async)'\n    );\n\n    if (shouldError) {\n      const promise = this.device.popErrorScope();\n\n      this.eventualAsyncExpectation(async niceStack => {\n        const gpuValidationError = await promise;\n        if (!gpuValidationError) {\n          niceStack.message = 'Validation succeeded unexpectedly.';\n          this.rec.validationFailed(niceStack);\n        } else if (gpuValidationError instanceof GPUValidationError) {\n          niceStack.message = `Validation failed, as expected - ${gpuValidationError.message}`;\n          this.rec.debug(niceStack);\n        }\n      });\n    }\n  }\n}\n"],"file":"validation_test.js"}