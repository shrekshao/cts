{"version":3,"sources":["../../../../../../src/webgpu/api/validation/queue/destroyed/query_set.spec.ts"],"names":["description","makeTestGroup","createRenderEncoderWithQuerySet","ValidationTest","g","test","desc","paramsSubcasesOnly","u","combine","fn","t","querySet","createQuerySetWithState","params","querySetState","encoder","beginOcclusionQuery","endOcclusionQuery","expectValidationError","queue","submit","finish","beginSubcases","selectDeviceOrSkipTestCase","type","count","createEncoder","encoderType","writeTimestamp","buffer","device","createBuffer","size","usage","GPUBufferUsage","QUERY_RESOLVE","createCommandEncoder","resolveQuerySet"],"mappings":"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","sourcesContent":["export const description = `\nTests using a destroyed query set on a queue.\n\nTODO: Test with pipeline statistics queries on {compute, render} as well.\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { createRenderEncoderWithQuerySet } from '../../encoding/queries/common.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('beginOcclusionQuery')\n  .desc(\n    `\nTests that use a destroyed query set in occlusion query on render pass encoder.\n- x= {destroyed, not destroyed (control case)}\n  `\n  )\n  .paramsSubcasesOnly(u => u.combine('querySetState', ['valid', 'destroyed'] as const))\n  .fn(t => {\n    const querySet = t.createQuerySetWithState(t.params.querySetState);\n\n    const encoder = createRenderEncoderWithQuerySet(t, querySet);\n    encoder.encoder.beginOcclusionQuery(0);\n    encoder.encoder.endOcclusionQuery();\n\n    t.expectValidationError(() => {\n      t.queue.submit([encoder.finish()]);\n    }, t.params.querySetState === 'destroyed');\n  });\n\ng.test('writeTimestamp')\n  .desc(\n    `\nTests that use a destroyed query set in writeTimestamp on {non-pass, compute, render} encoder.\n- x= {destroyed, not destroyed (control case)}\n  `\n  )\n  .params(u =>\n    u\n      .combine('encoderType', ['non-pass', 'compute pass', 'render pass'] as const)\n      .beginSubcases()\n      .combine('querySetState', ['valid', 'destroyed'] as const)\n  )\n  .fn(async t => {\n    await t.selectDeviceOrSkipTestCase('timestamp-query');\n\n    const querySet = t.createQuerySetWithState(t.params.querySetState, {\n      type: 'timestamp',\n      count: 2,\n    });\n\n    const encoder = t.createEncoder(t.params.encoderType);\n    encoder.encoder.writeTimestamp(querySet, 0);\n\n    t.expectValidationError(() => {\n      t.queue.submit([encoder.finish()]);\n    }, t.params.querySetState === 'destroyed');\n  });\n\ng.test('resolveQuerySet')\n  .desc(\n    `\nTests that use a destroyed query set in resolveQuerySet.\n- x= {destroyed, not destroyed (control case)}\n  `\n  )\n  .paramsSubcasesOnly(u => u.combine('querySetState', ['valid', 'destroyed'] as const))\n  .fn(async t => {\n    const querySet = t.createQuerySetWithState(t.params.querySetState);\n\n    const buffer = t.device.createBuffer({ size: 8, usage: GPUBufferUsage.QUERY_RESOLVE });\n\n    const encoder = t.device.createCommandEncoder();\n    encoder.resolveQuerySet(querySet, 0, 1, buffer, 0);\n\n    t.expectValidationError(() => {\n      t.queue.submit([encoder.finish()]);\n    }, t.params.querySetState === 'destroyed');\n  });\n"],"file":"query_set.spec.js"}