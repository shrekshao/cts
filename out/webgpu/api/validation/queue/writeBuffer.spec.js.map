{"version":3,"sources":["../../../../../src/webgpu/api/validation/queue/writeBuffer.spec.ts"],"names":["description","makeTestGroup","GPUConst","ValidationTest","g","test","desc","fn","t","queue","device","runTest","arrayType","testBuffer","elementSize","BYTES_PER_ELEMENT","bufferSize","buffer","createBuffer","size","usage","GPUBufferUsage","COPY_DST","arraySm","arrayMd","arrayLg","array15","shouldThrow","writeBuffer","expectValidationError","undefined","arrayTypes","Uint8Array","Uint8ClampedArray","Int8Array","Uint16Array","Int16Array","Uint32Array","Int32Array","Float32Array","Float64Array","paramsSubcasesOnly","BufferUsage","_valid","STORAGE","COPY_SRC","params","data","length","u","combine","unimplemented"],"mappings":"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","sourcesContent":["export const description = `\nTests writeBuffer validation.\n\nNote: destroyed buffer is tested in destroyed/.\nNote: buffer map state is tested in ./buffer_mapped.spec.ts.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport {\n  TypedArrayBufferView,\n  TypedArrayBufferViewConstructor,\n} from '../../../../common/util/util.js';\nimport { GPUConst } from '../../../constants.js';\nimport { ValidationTest } from '../validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('ranges')\n  .desc(\n    `\nTests that the data ranges given to GPUQueue.writeBuffer() are properly validated. Tests calling\nwriteBuffer with both TypedArrays and ArrayBuffers and checks that the data offset and size is\ninterpreted correctly for both.\n\n  - When passing a TypedArray the data offset and size is given in elements.\n  - When passing an ArrayBuffer the data offset and size is given in bytes.\n\nAlso verifies that the specified data range:\n\n  - Describes a valid range of the destination buffer and source buffer.\n  - Fits fully within the destination buffer.\n  - Has a byte size which is a multiple of 4.\n`\n  )\n  .fn(async t => {\n    const queue = t.device.queue;\n\n    function runTest(arrayType: TypedArrayBufferViewConstructor, testBuffer: boolean) {\n      const elementSize = arrayType.BYTES_PER_ELEMENT;\n      const bufferSize = 16 * elementSize;\n      const buffer = t.device.createBuffer({\n        size: bufferSize,\n        usage: GPUBufferUsage.COPY_DST,\n      });\n      const arraySm: TypedArrayBufferView | ArrayBuffer = testBuffer\n        ? new arrayType(8).buffer\n        : new arrayType(8);\n      const arrayMd: TypedArrayBufferView | ArrayBuffer = testBuffer\n        ? new arrayType(16).buffer\n        : new arrayType(16);\n      const arrayLg: TypedArrayBufferView | ArrayBuffer = testBuffer\n        ? new arrayType(32).buffer\n        : new arrayType(32);\n\n      if (elementSize < 4) {\n        const array15: TypedArrayBufferView | ArrayBuffer = testBuffer\n          ? new arrayType(15).buffer\n          : new arrayType(15);\n\n        // Writing the full buffer that isn't 4-byte aligned.\n        t.shouldThrow('OperationError', () => queue.writeBuffer(buffer, 0, array15));\n\n        // Writing from an offset that causes source to be 4-byte aligned.\n        queue.writeBuffer(buffer, 0, array15, 3);\n\n        // Writing from an offset that causes the source to not be 4-byte aligned.\n        t.shouldThrow('OperationError', () => queue.writeBuffer(buffer, 0, arrayMd, 3));\n\n        // Writing with a size that is not 4-byte aligned.\n        t.shouldThrow('OperationError', () => queue.writeBuffer(buffer, 0, arraySm, 0, 7));\n      }\n\n      // Writing the full buffer without offsets.\n      queue.writeBuffer(buffer, 0, arraySm);\n      queue.writeBuffer(buffer, 0, arrayMd);\n      t.expectValidationError(() => queue.writeBuffer(buffer, 0, arrayLg));\n\n      // Writing the full buffer with a 4-byte aligned offset.\n      queue.writeBuffer(buffer, 8, arraySm);\n      t.expectValidationError(() => queue.writeBuffer(buffer, 8, arrayMd));\n\n      // Writing the full buffer with a unaligned offset.\n      t.shouldThrow('OperationError', () => queue.writeBuffer(buffer, 3, arraySm));\n\n      // Writing remainder of buffer from offset.\n      queue.writeBuffer(buffer, 0, arraySm, 4);\n      queue.writeBuffer(buffer, 0, arrayMd, 4);\n      t.expectValidationError(() => queue.writeBuffer(buffer, 0, arrayLg, 4));\n\n      // Writing a larger buffer from an offset that allows it to fit in the destination.\n      queue.writeBuffer(buffer, 0, arrayLg, 16);\n\n      // Writing with both an offset and size.\n      queue.writeBuffer(buffer, 0, arraySm, 4, 4);\n\n      // Writing with a size that extends past the source buffer length.\n      t.shouldThrow('OperationError', () => queue.writeBuffer(buffer, 0, arraySm, 0, 16));\n      t.shouldThrow('OperationError', () => queue.writeBuffer(buffer, 0, arraySm, 4, 8));\n\n      // Writing with a size that is 4-byte aligned but an offset that is not.\n      queue.writeBuffer(buffer, 0, arraySm, 3, 4);\n\n      // Writing zero bytes at the end of the buffer\n      queue.writeBuffer(buffer, bufferSize, arraySm, 0, 0);\n\n      // Writing with a buffer offset that is out of range of buffer size\n      t.expectValidationError(() => queue.writeBuffer(buffer, bufferSize + 4, arraySm, 0, 0));\n\n      // Writing zero bytes from the end of the data\n      queue.writeBuffer(buffer, 0, arraySm, 8, 0);\n\n      // Writing with a data offset that is out of range of data size\n      t.shouldThrow('OperationError', () => queue.writeBuffer(buffer, 0, arraySm, 9, 0));\n\n      // A data offset of undefined should be treated as 0\n      queue.writeBuffer(buffer, 0, arraySm, undefined, 8);\n      t.shouldThrow('OperationError', () => queue.writeBuffer(buffer, 0, arraySm, undefined, 12));\n    }\n\n    const arrayTypes = [\n      Uint8Array,\n      Uint8ClampedArray,\n      Int8Array,\n      Uint16Array,\n      Int16Array,\n      Uint32Array,\n      Int32Array,\n      Float32Array,\n      Float64Array,\n    ];\n\n    runTest(Uint8Array, true);\n\n    for (const arrayType of arrayTypes) {\n      runTest(arrayType, false);\n    }\n  });\n\ng.test('usages')\n  .desc(\n    `\nTests calling writeBuffer with the buffer missed COPY_DST usage.\n- buffer {with, without} COPY DST usage\n`\n  )\n  .paramsSubcasesOnly([\n    { usage: GPUConst.BufferUsage.COPY_DST, _valid: true }, // control case\n    { usage: GPUConst.BufferUsage.STORAGE, _valid: false }, // without COPY_DST usage\n    { usage: GPUConst.BufferUsage.STORAGE | GPUConst.BufferUsage.COPY_SRC, _valid: false }, // with other usage\n    { usage: GPUConst.BufferUsage.STORAGE | GPUConst.BufferUsage.COPY_DST, _valid: true }, // with COPY_DST usage\n  ])\n  .fn(async t => {\n    const { usage, _valid } = t.params;\n    const buffer = t.device.createBuffer({ size: 16, usage });\n    const data = new Uint8Array(16);\n\n    t.expectValidationError(() => {\n      t.device.queue.writeBuffer(buffer, 0, data, 0, data.length);\n    }, !_valid);\n  });\n\ng.test('buffer,device_mismatch')\n  .desc('Tests writeBuffer cannot be called with a buffer created from another device')\n  .paramsSubcasesOnly(u => u.combine('mismatched', [true, false]))\n  .unimplemented();\n"],"file":"writeBuffer.spec.js"}