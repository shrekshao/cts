{"version":3,"sources":["../../../../../src/webgpu/api/validation/queue/writeBuffer.spec.ts"],"names":["description","makeTestGroup","kTypedArrayBufferViewConstructors","GPUConst","kResourceStates","ValidationTest","g","test","desc","params","u","combine","fn","t","bufferState","buffer","createBufferWithState","size","usage","GPUBufferUsage","COPY_DST","data","Uint8Array","_valid","expectValidationError","device","queue","writeBuffer","length","runTest","arrayType","testBuffer","elementSize","BYTES_PER_ELEMENT","bufferSize","createBuffer","arraySm","arrayMd","arrayLg","array15","shouldThrow","undefined","paramsSubcasesOnly","BufferUsage","STORAGE","COPY_SRC","beforeAllSubcases","selectMismatchedDeviceOrSkipTestCase","mismatched","mismatchedDevice","trackForCleanup"],"mappings":"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","sourcesContent":["export const description = `\nTests writeBuffer validation.\n\nNote: buffer map state is tested in ./buffer_mapped.spec.ts.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport {\n  kTypedArrayBufferViewConstructors,\n  TypedArrayBufferView,\n  TypedArrayBufferViewConstructor,\n} from '../../../../common/util/util.js';\nimport { GPUConst } from '../../../constants.js';\nimport { kResourceStates } from '../../../gpu_test.js';\nimport { ValidationTest } from '../validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('buffer_state')\n  .desc(\n    `\nTest that the buffer used for GPUQueue.writeBuffer() must be valid. Tests calling writeBuffer\nwith {valid, invalid, destroyed} buffer.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('bufferState', kResourceStates)\n  )\n  .fn(async t => {\n    const { bufferState } = t.params;\n    const buffer = t.createBufferWithState(bufferState, {\n      size: 16,\n      usage: GPUBufferUsage.COPY_DST,\n    });\n    const data = new Uint8Array(16);\n    const _valid = bufferState === 'valid';\n\n    t.expectValidationError(() => {\n      t.device.queue.writeBuffer(buffer, 0, data, 0, data.length);\n    }, !_valid);\n  });\n\ng.test('ranges')\n  .desc(\n    `\nTests that the data ranges given to GPUQueue.writeBuffer() are properly validated. Tests calling\nwriteBuffer with both TypedArrays and ArrayBuffers and checks that the data offset and size is\ninterpreted correctly for both.\n\n  - When passing a TypedArray the data offset and size is given in elements.\n  - When passing an ArrayBuffer the data offset and size is given in bytes.\n\nAlso verifies that the specified data range:\n\n  - Describes a valid range of the destination buffer and source buffer.\n  - Fits fully within the destination buffer.\n  - Has a byte size which is a multiple of 4.\n`\n  )\n  .fn(async t => {\n    const queue = t.device.queue;\n\n    function runTest(arrayType: TypedArrayBufferViewConstructor, testBuffer: boolean) {\n      const elementSize = arrayType.BYTES_PER_ELEMENT;\n      const bufferSize = 16 * elementSize;\n      const buffer = t.device.createBuffer({\n        size: bufferSize,\n        usage: GPUBufferUsage.COPY_DST,\n      });\n      const arraySm: TypedArrayBufferView | ArrayBuffer = testBuffer\n        ? new arrayType(8).buffer\n        : new arrayType(8);\n      const arrayMd: TypedArrayBufferView | ArrayBuffer = testBuffer\n        ? new arrayType(16).buffer\n        : new arrayType(16);\n      const arrayLg: TypedArrayBufferView | ArrayBuffer = testBuffer\n        ? new arrayType(32).buffer\n        : new arrayType(32);\n\n      if (elementSize < 4) {\n        const array15: TypedArrayBufferView | ArrayBuffer = testBuffer\n          ? new arrayType(15).buffer\n          : new arrayType(15);\n\n        // Writing the full buffer that isn't 4-byte aligned.\n        t.shouldThrow('OperationError', () => queue.writeBuffer(buffer, 0, array15));\n\n        // Writing from an offset that causes source to be 4-byte aligned.\n        queue.writeBuffer(buffer, 0, array15, 3);\n\n        // Writing from an offset that causes the source to not be 4-byte aligned.\n        t.shouldThrow('OperationError', () => queue.writeBuffer(buffer, 0, arrayMd, 3));\n\n        // Writing with a size that is not 4-byte aligned.\n        t.shouldThrow('OperationError', () => queue.writeBuffer(buffer, 0, arraySm, 0, 7));\n      }\n\n      // Writing the full buffer without offsets.\n      queue.writeBuffer(buffer, 0, arraySm);\n      queue.writeBuffer(buffer, 0, arrayMd);\n      t.expectValidationError(() => queue.writeBuffer(buffer, 0, arrayLg));\n\n      // Writing the full buffer with a 4-byte aligned offset.\n      queue.writeBuffer(buffer, 8, arraySm);\n      t.expectValidationError(() => queue.writeBuffer(buffer, 8, arrayMd));\n\n      // Writing the full buffer with a unaligned offset.\n      t.expectValidationError(() => queue.writeBuffer(buffer, 3, arraySm));\n\n      // Writing remainder of buffer from offset.\n      queue.writeBuffer(buffer, 0, arraySm, 4);\n      queue.writeBuffer(buffer, 0, arrayMd, 4);\n      t.expectValidationError(() => queue.writeBuffer(buffer, 0, arrayLg, 4));\n\n      // Writing a larger buffer from an offset that allows it to fit in the destination.\n      queue.writeBuffer(buffer, 0, arrayLg, 16);\n\n      // Writing with both an offset and size.\n      queue.writeBuffer(buffer, 0, arraySm, 4, 4);\n\n      // Writing with a size that extends past the source buffer length.\n      t.shouldThrow('OperationError', () => queue.writeBuffer(buffer, 0, arraySm, 0, 16));\n      t.shouldThrow('OperationError', () => queue.writeBuffer(buffer, 0, arraySm, 4, 8));\n\n      // Writing with a size that is 4-byte aligned but an offset that is not.\n      queue.writeBuffer(buffer, 0, arraySm, 3, 4);\n\n      // Writing zero bytes at the end of the buffer\n      queue.writeBuffer(buffer, bufferSize, arraySm, 0, 0);\n\n      // Writing with a buffer offset that is out of range of buffer size\n      t.expectValidationError(() => queue.writeBuffer(buffer, bufferSize + 4, arraySm, 0, 0));\n\n      // Writing zero bytes from the end of the data\n      queue.writeBuffer(buffer, 0, arraySm, 8, 0);\n\n      // Writing with a data offset that is out of range of data size\n      t.shouldThrow('OperationError', () => queue.writeBuffer(buffer, 0, arraySm, 9, 0));\n\n      // A data offset of undefined should be treated as 0\n      queue.writeBuffer(buffer, 0, arraySm, undefined, 8);\n      t.shouldThrow('OperationError', () => queue.writeBuffer(buffer, 0, arraySm, undefined, 12));\n    }\n\n    runTest(Uint8Array, true);\n\n    for (const arrayType of kTypedArrayBufferViewConstructors) {\n      runTest(arrayType, false);\n    }\n  });\n\ng.test('usages')\n  .desc(\n    `\nTests calling writeBuffer with the buffer missed COPY_DST usage.\n- buffer {with, without} COPY DST usage\n`\n  )\n  .paramsSubcasesOnly([\n    { usage: GPUConst.BufferUsage.COPY_DST, _valid: true }, // control case\n    { usage: GPUConst.BufferUsage.STORAGE, _valid: false }, // without COPY_DST usage\n    { usage: GPUConst.BufferUsage.STORAGE | GPUConst.BufferUsage.COPY_SRC, _valid: false }, // with other usage\n    { usage: GPUConst.BufferUsage.STORAGE | GPUConst.BufferUsage.COPY_DST, _valid: true }, // with COPY_DST usage\n  ])\n  .fn(async t => {\n    const { usage, _valid } = t.params;\n    const buffer = t.device.createBuffer({ size: 16, usage });\n    const data = new Uint8Array(16);\n\n    t.expectValidationError(() => {\n      t.device.queue.writeBuffer(buffer, 0, data, 0, data.length);\n    }, !_valid);\n  });\n\ng.test('buffer,device_mismatch')\n  .desc('Tests writeBuffer cannot be called with a buffer created from another device')\n  .paramsSubcasesOnly(u => u.combine('mismatched', [true, false]))\n  .beforeAllSubcases(t => {\n    t.selectMismatchedDeviceOrSkipTestCase(undefined);\n  })\n  .fn(async t => {\n    const { mismatched } = t.params;\n    const device = mismatched ? t.mismatchedDevice : t.device;\n\n    const buffer = device.createBuffer({\n      size: 16,\n      usage: GPUBufferUsage.COPY_DST,\n    });\n    t.trackForCleanup(buffer);\n\n    const data = new Uint8Array(16);\n\n    t.expectValidationError(() => {\n      t.device.queue.writeBuffer(buffer, 0, data, 0, data.length);\n    }, mismatched);\n  });\n"],"file":"writeBuffer.spec.js"}