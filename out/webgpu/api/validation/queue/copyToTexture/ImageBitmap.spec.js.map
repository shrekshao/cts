{"version":3,"sources":["../../../../../../src/webgpu/api/validation/queue/copyToTexture/ImageBitmap.spec.ts"],"names":["description","makeTestGroup","kTextureFormatInfo","kTextureFormats","kTextureUsages","kValidTextureFormatsForCopyIB2T","ValidationTest","kDefaultBytesPerPixel","kDefaultWidth","kDefaultHeight","kDefaultDepth","kDefaultMipLevelCount","computeMipMapSize","width","height","mipLevel","mipWidth","Math","max","mipHeight","generateCopySizeForSrcOOB","srcOrigin","x","y","depthOrArrayLayers","justFitCopySize","generateDstOriginValue","origin","z","generateCopySizeForDstOOB","dstOrigin","dstMipMapSize","CopyImageBitmapToTextureTest","getImageData","pixelSize","imagePixels","Uint8ClampedArray","ImageData","runTest","imageBitmapCopyView","textureCopyView","copySize","validationScopeSuccess","exceptionName","shouldThrow","device","queue","copyImageBitmapToTexture","expectValidationError","g","test","params","u","combine","beginSubcases","fn","t","closed","imageBitmap","createImageBitmap","dstTexture","createTexture","size","format","usage","GPUTextureUsage","COPY_DST","RENDER_ATTACHMENT","close","texture","state","createTextureWithState","sampleCount","mipLevelCount","selectDeviceOrSkipTestCase","feature","pushErrorScope","popErrorScope","success","includes","paramsSubcasesOnly","expand","hasOperationError"],"mappings":"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","sourcesContent":["export const description = `\ncopyImageBitmapToTexture Validation Tests in Queue.\nTODO: Should this be the same file as, or next to, web_platform/copyImageBitmapToTexture.spec.ts?\n\nTODO: Split this test plan per-test.\n\nTest Plan:\n- For source.imageBitmap:\n  - imageBitmap generated from ImageData:\n    - Check that an error is generated when imageBitmap is closed.\n\n- For destination.texture:\n  - For 2d destination textures:\n    - Check that an error is generated when texture is in destroyed state.\n    - Check that an error is generated when texture is an error texture.\n    - Check that an error is generated when texture is created without usage COPY_DST.\n    - Check that an error is generated when sample count is not 1.\n    - Check that an error is generated when mipLevel is too large.\n    - Check that an error is generated when texture format is not valid.\n\n- For copySize:\n  - No-op copy shouldn't throw any exception or return any validation error.\n  - Check that an error is generated when destination.texture.origin + copySize is too large.\n\nTODO: copying into slices of 2d array textures. 1d and 3d as well if they're not invalid.\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport {\n  kTextureFormatInfo,\n  kTextureFormats,\n  kTextureUsages,\n  kValidTextureFormatsForCopyIB2T,\n} from '../../../../capability_info.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nconst kDefaultBytesPerPixel = 4; // using 'bgra8unorm' or 'rgba8unorm'\nconst kDefaultWidth = 32;\nconst kDefaultHeight = 32;\nconst kDefaultDepth = 1;\nconst kDefaultMipLevelCount = 6;\n\nfunction computeMipMapSize(width: number, height: number, mipLevel: number) {\n  return {\n    mipWidth: Math.max(width >> mipLevel, 1),\n    mipHeight: Math.max(height >> mipLevel, 1),\n  };\n}\n\ninterface WithMipLevel {\n  mipLevel: number;\n}\n\ninterface WithDstOriginMipLevel extends WithMipLevel {\n  dstOrigin: Required<GPUOrigin3DDict>;\n}\n\n// Helper function to generate copySize for src OOB test\nfunction generateCopySizeForSrcOOB({ srcOrigin }: { srcOrigin: Required<GPUOrigin2DDict> }) {\n  // OOB origin fails even with no-op copy.\n  if (srcOrigin.x > kDefaultWidth || srcOrigin.y > kDefaultHeight) {\n    return [{ width: 0, height: 0, depthOrArrayLayers: 0 }];\n  }\n\n  const justFitCopySize = {\n    width: kDefaultWidth - srcOrigin.x,\n    height: kDefaultHeight - srcOrigin.y,\n    depthOrArrayLayers: 1,\n  };\n\n  return [\n    justFitCopySize, // correct size, maybe no-op copy.\n    { width: justFitCopySize.width + 1, height: justFitCopySize.height, depthOrArrayLayers: 1 }, // OOB in width\n    { width: justFitCopySize.width, height: justFitCopySize.height + 1, depthOrArrayLayers: 1 }, // OOB in height\n    { width: justFitCopySize.width, height: justFitCopySize.height, depthOrArrayLayers: 2 }, // OOB in depthOrArrayLayers\n  ];\n}\n\n// Helper function to generate dst origin value based on mipLevel.\nfunction generateDstOriginValue({ mipLevel }: WithMipLevel) {\n  const origin = computeMipMapSize(kDefaultWidth, kDefaultHeight, mipLevel);\n\n  return [\n    { x: 0, y: 0, z: 0 },\n    { x: origin.mipWidth - 1, y: 0, z: 0 },\n    { x: 0, y: origin.mipHeight - 1, z: 0 },\n    { x: origin.mipWidth, y: 0, z: 0 },\n    { x: 0, y: origin.mipHeight, z: 0 },\n    { x: 0, y: 0, z: kDefaultDepth },\n    { x: origin.mipWidth + 1, y: 0, z: 0 },\n    { x: 0, y: origin.mipHeight + 1, z: 0 },\n    { x: 0, y: 0, z: kDefaultDepth + 1 },\n  ];\n}\n\n// Helper function to generate copySize for dst OOB test\nfunction generateCopySizeForDstOOB({ mipLevel, dstOrigin }: WithDstOriginMipLevel) {\n  const dstMipMapSize = computeMipMapSize(kDefaultWidth, kDefaultHeight, mipLevel);\n\n  // OOB origin fails even with no-op copy.\n  if (\n    dstOrigin.x > dstMipMapSize.mipWidth ||\n    dstOrigin.y > dstMipMapSize.mipHeight ||\n    dstOrigin.z > kDefaultDepth\n  ) {\n    return [{ width: 0, height: 0, depthOrArrayLayers: 0 }];\n  }\n\n  const justFitCopySize = {\n    width: dstMipMapSize.mipWidth - dstOrigin.x,\n    height: dstMipMapSize.mipHeight - dstOrigin.y,\n    depthOrArrayLayers: kDefaultDepth - dstOrigin.z,\n  };\n\n  return [\n    justFitCopySize,\n    {\n      width: justFitCopySize.width + 1,\n      height: justFitCopySize.height,\n      depthOrArrayLayers: justFitCopySize.depthOrArrayLayers,\n    }, // OOB in width\n    {\n      width: justFitCopySize.width,\n      height: justFitCopySize.height + 1,\n      depthOrArrayLayers: justFitCopySize.depthOrArrayLayers,\n    }, // OOB in height\n    {\n      width: justFitCopySize.width,\n      height: justFitCopySize.height,\n      depthOrArrayLayers: justFitCopySize.depthOrArrayLayers + 1,\n    }, // OOB in depthOrArrayLayers\n  ];\n}\n\nclass CopyImageBitmapToTextureTest extends ValidationTest {\n  getImageData(width: number, height: number): ImageData {\n    const pixelSize = kDefaultBytesPerPixel * width * height;\n    const imagePixels = new Uint8ClampedArray(pixelSize);\n    return new ImageData(imagePixels, width, height);\n  }\n\n  runTest(\n    imageBitmapCopyView: GPUImageCopyImageBitmap,\n    textureCopyView: GPUImageCopyTexture,\n    copySize: GPUExtent3D,\n    validationScopeSuccess: boolean,\n    exceptionName?: string\n  ): void {\n    // CopyImageBitmapToTexture will generate two types of errors. One is synchronous exceptions;\n    // the other is asynchronous validation error scope errors.\n    if (exceptionName) {\n      this.shouldThrow(exceptionName, () => {\n        this.device.queue.copyImageBitmapToTexture(imageBitmapCopyView, textureCopyView, copySize);\n      });\n    } else {\n      this.expectValidationError(() => {\n        this.device.queue.copyImageBitmapToTexture(imageBitmapCopyView, textureCopyView, copySize);\n      }, !validationScopeSuccess);\n    }\n  }\n}\n\nexport const g = makeTestGroup(CopyImageBitmapToTextureTest);\n\ng.test('source_imageBitmap,state')\n  .params(u =>\n    u //\n      .combine('closed', [false, true])\n      .beginSubcases()\n      .combine('copySize', [\n        { width: 0, height: 0, depthOrArrayLayers: 0 },\n        { width: 1, height: 1, depthOrArrayLayers: 1 },\n      ])\n  )\n  .fn(async t => {\n    const { closed, copySize } = t.params;\n    const imageBitmap = await createImageBitmap(t.getImageData(1, 1));\n    const dstTexture = t.device.createTexture({\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      format: 'bgra8unorm',\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    if (closed) imageBitmap.close();\n\n    t.runTest(\n      { imageBitmap },\n      { texture: dstTexture },\n      copySize,\n      true, // No validation errors.\n      closed ? 'InvalidStateError' : ''\n    );\n  });\n\ng.test('destination_texture,state')\n  .params(u =>\n    u //\n      .combine('state', ['valid', 'invalid', 'destroyed'] as const)\n      .beginSubcases()\n      .combine('copySize', [\n        { width: 0, height: 0, depthOrArrayLayers: 0 },\n        { width: 1, height: 1, depthOrArrayLayers: 1 },\n      ])\n  )\n  .fn(async t => {\n    const { state, copySize } = t.params;\n    const imageBitmap = await createImageBitmap(t.getImageData(1, 1));\n    const dstTexture = t.createTextureWithState(state);\n\n    t.runTest({ imageBitmap }, { texture: dstTexture }, copySize, state === 'valid');\n  });\n\ng.test('destination_texture,usage')\n  .params(u =>\n    u //\n      .combine('usage', kTextureUsages)\n      .beginSubcases()\n      .combine('copySize', [\n        { width: 0, height: 0, depthOrArrayLayers: 0 },\n        { width: 1, height: 1, depthOrArrayLayers: 1 },\n      ])\n  )\n  .fn(async t => {\n    const { usage, copySize } = t.params;\n    const imageBitmap = await createImageBitmap(t.getImageData(1, 1));\n    const dstTexture = t.device.createTexture({\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage,\n    });\n\n    t.runTest(\n      { imageBitmap },\n      { texture: dstTexture },\n      copySize,\n      !!(usage & GPUTextureUsage.COPY_DST && usage & GPUTextureUsage.RENDER_ATTACHMENT)\n    );\n  });\n\ng.test('destination_texture,sample_count')\n  .params(u =>\n    u //\n      .combine('sampleCount', [1, 4])\n      .beginSubcases()\n      .combine('copySize', [\n        { width: 0, height: 0, depthOrArrayLayers: 0 },\n        { width: 1, height: 1, depthOrArrayLayers: 1 },\n      ])\n  )\n  .fn(async t => {\n    const { sampleCount, copySize } = t.params;\n    const imageBitmap = await createImageBitmap(t.getImageData(1, 1));\n    const dstTexture = t.device.createTexture({\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      sampleCount,\n      format: 'bgra8unorm',\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    t.runTest({ imageBitmap }, { texture: dstTexture }, copySize, sampleCount === 1);\n  });\n\ng.test('destination_texture,mipLevel')\n  .params(u =>\n    u //\n      .combine('mipLevel', [0, kDefaultMipLevelCount - 1, kDefaultMipLevelCount])\n      .beginSubcases()\n      .combine('copySize', [\n        { width: 0, height: 0, depthOrArrayLayers: 0 },\n        { width: 1, height: 1, depthOrArrayLayers: 1 },\n      ])\n  )\n  .fn(async t => {\n    const { mipLevel, copySize } = t.params;\n    const imageBitmap = await createImageBitmap(t.getImageData(1, 1));\n    const dstTexture = t.device.createTexture({\n      size: { width: kDefaultWidth, height: kDefaultHeight, depthOrArrayLayers: kDefaultDepth },\n      mipLevelCount: kDefaultMipLevelCount,\n      format: 'bgra8unorm',\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    t.runTest(\n      { imageBitmap },\n      { texture: dstTexture, mipLevel },\n      copySize,\n      mipLevel < kDefaultMipLevelCount\n    );\n  });\n\ng.test('destination_texture,format')\n  .params(u =>\n    u\n      .combine('format', kTextureFormats)\n      .beginSubcases()\n      .combine('copySize', [\n        { width: 0, height: 0, depthOrArrayLayers: 0 },\n        { width: 1, height: 1, depthOrArrayLayers: 1 },\n      ])\n  )\n  .fn(async t => {\n    const { format, copySize } = t.params;\n    await t.selectDeviceOrSkipTestCase(kTextureFormatInfo[format].feature);\n\n    const imageBitmap = await createImageBitmap(t.getImageData(1, 1));\n\n    // createTexture with all possible texture format may have validation error when using\n    // compressed texture format.\n    t.device.pushErrorScope('validation');\n    const dstTexture = t.device.createTexture({\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      format,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n    t.device.popErrorScope();\n\n    const success = (kValidTextureFormatsForCopyIB2T as readonly string[]).includes(format);\n\n    t.runTest({ imageBitmap }, { texture: dstTexture }, copySize, success);\n  });\n\ng.test('OOB,source')\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('srcOrigin', [\n        { x: 0, y: 0 }, // origin is on top-left\n        { x: kDefaultWidth - 1, y: 0 }, // x near the border\n        { x: 0, y: kDefaultHeight - 1 }, // y is near the border\n        { x: kDefaultWidth, y: kDefaultHeight }, // origin is on bottom-right\n        { x: kDefaultWidth + 1, y: 0 }, // x is too large\n        { x: 0, y: kDefaultHeight + 1 }, // y is too large\n      ])\n      .expand('copySize', generateCopySizeForSrcOOB)\n  )\n  .fn(async t => {\n    const { srcOrigin, copySize } = t.params;\n    const imageBitmap = await createImageBitmap(t.getImageData(kDefaultWidth, kDefaultHeight));\n    const dstTexture = t.device.createTexture({\n      size: {\n        width: kDefaultWidth + 1,\n        height: kDefaultHeight + 1,\n        depthOrArrayLayers: kDefaultDepth,\n      },\n      mipLevelCount: kDefaultMipLevelCount,\n      format: 'bgra8unorm',\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    let success = true;\n\n    if (\n      srcOrigin.x + copySize.width > kDefaultWidth ||\n      srcOrigin.y + copySize.height > kDefaultHeight ||\n      copySize.depthOrArrayLayers > 1\n    ) {\n      success = false;\n    }\n\n    t.runTest(\n      { imageBitmap, origin: srcOrigin },\n      { texture: dstTexture },\n      copySize,\n      success,\n      success ? '' : 'OperationError'\n    );\n  });\n\ng.test('OOB,destination')\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('mipLevel', [0, 1, kDefaultMipLevelCount - 2])\n      .expand('dstOrigin', generateDstOriginValue)\n      .expand('copySize', generateCopySizeForDstOOB)\n  )\n  .fn(async t => {\n    const { mipLevel, dstOrigin, copySize } = t.params;\n\n    const imageBitmap = await createImageBitmap(\n      t.getImageData(kDefaultWidth + 1, kDefaultHeight + 1)\n    );\n    const dstTexture = t.device.createTexture({\n      size: {\n        width: kDefaultWidth,\n        height: kDefaultHeight,\n        depthOrArrayLayers: kDefaultDepth,\n      },\n      format: 'bgra8unorm',\n      mipLevelCount: kDefaultMipLevelCount,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    let success = true;\n    let hasOperationError = false;\n    const dstMipMapSize = computeMipMapSize(kDefaultWidth, kDefaultHeight, mipLevel);\n\n    if (\n      copySize.depthOrArrayLayers > 1 ||\n      dstOrigin.x + copySize.width > dstMipMapSize.mipWidth ||\n      dstOrigin.y + copySize.height > dstMipMapSize.mipHeight ||\n      dstOrigin.z + copySize.depthOrArrayLayers > kDefaultDepth\n    ) {\n      success = false;\n    }\n    if (copySize.depthOrArrayLayers > 1) {\n      hasOperationError = true;\n    }\n\n    t.runTest(\n      { imageBitmap },\n      {\n        texture: dstTexture,\n        mipLevel,\n        origin: dstOrigin,\n      },\n      copySize,\n      success,\n      hasOperationError ? 'OperationError' : ''\n    );\n  });\n"],"file":"ImageBitmap.spec.js"}