{"version":3,"sources":["../../../../../src/webgpu/api/validation/queue/buffer_mapped.spec.ts"],"names":["description","makeTestGroup","ValidationTest","F","runBufferDependencyTest","usage","callback","bufferDesc","size","mappedAtCreation","mapMode","GPUBufferUsage","MAP_READ","GPUMapMode","READ","WRITE","mappableBuffer","device","createBuffer","unmappedBuffer","mapPromise","mapAsync","expectValidationError","getMappedRange","unmap","mappedBuffer","g","test","desc","fn","t","data","Uint32Array","COPY_DST","buffer","queue","writeBuffer","sourceBuffer","COPY_SRC","destBuffer","MAP_WRITE","commandEncoder","createCommandEncoder","copyBufferToBuffer","submit","finish","width","height","texture","createTexture","format","GPUTextureUsage","copyBufferToTexture","copyTextureToBuffer","paramsSubcasesOnly","order","_shouldError","shouldError","params","targetBuffer","commandBuffer","steps","record","map","op"],"mappings":"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","sourcesContent":["export const description = `\nValidation tests for the map-state of mappable buffers used in submitted command buffers.\n\nTests every operation that has a dependency on a buffer\n  - writeBuffer\n  - copyB2B {src,dst}\n  - copyB2T\n  - copyT2B\n\nTest those operations against buffers in the following states:\n  - Unmapped\n  - In the process of mapping\n  - mapped\n  - mapped with a mapped range queried\n  - unmapped after mapping\n  - mapped at creation\n\nAlso tests every order of operations combination of mapping operations and command recording\noperations to ensure the mapping state is only considered when a command buffer is submitted.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { ValidationTest } from '../validation_test.js';\n\nclass F extends ValidationTest {\n  async runBufferDependencyTest(usage: number, callback: Function): Promise<void> {\n    const bufferDesc = {\n      size: 8,\n      usage,\n      mappedAtCreation: false,\n    };\n\n    const mapMode = usage & GPUBufferUsage.MAP_READ ? GPUMapMode.READ : GPUMapMode.WRITE;\n\n    // Create a mappable buffer, and one that will remain unmapped for comparison.\n    const mappableBuffer = this.device.createBuffer(bufferDesc);\n    const unmappedBuffer = this.device.createBuffer(bufferDesc);\n\n    // Run the given operation before the buffer is mapped. Should succeed.\n    callback(mappableBuffer);\n\n    // Map the buffer\n    const mapPromise = mappableBuffer.mapAsync(mapMode);\n\n    // Run the given operation while the buffer is in the process of mapping. Should fail.\n    this.expectValidationError(() => {\n      callback(mappableBuffer);\n    });\n\n    // Run on a different, unmapped buffer. Should succeed.\n    callback(unmappedBuffer);\n\n    await mapPromise;\n\n    // Run the given operation when the buffer is finished mapping with no getMappedRange. Should fail.\n    this.expectValidationError(() => {\n      callback(mappableBuffer);\n    });\n\n    // Run on a different, unmapped buffer. Should succeed.\n    callback(unmappedBuffer);\n\n    // Run the given operation when the buffer is mapped with getMappedRange. Should fail.\n    mappableBuffer.getMappedRange();\n    this.expectValidationError(() => {\n      callback(mappableBuffer);\n    });\n\n    // Unmap the buffer and run the operation. Should succeed.\n    mappableBuffer.unmap();\n    callback(mappableBuffer);\n\n    // Create a buffer that's mappedAtCreation.\n    bufferDesc.mappedAtCreation = true;\n    const mappedBuffer = this.device.createBuffer(bufferDesc);\n\n    // Run the operation with the mappedAtCreation buffer. Should fail.\n    this.expectValidationError(() => {\n      callback(mappedBuffer);\n    });\n\n    // Run on a different, unmapped buffer. Should succeed.\n    callback(unmappedBuffer);\n\n    // Unmap the mappedAtCreation buffer and run the operation. Should succeed.\n    mappedBuffer.unmap();\n    callback(mappedBuffer);\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('writeBuffer')\n  .desc(`Test that an outstanding mapping will prevent writeBuffer calls.`)\n  .fn(async t => {\n    const data = new Uint32Array([42]);\n\n    await t.runBufferDependencyTest(\n      GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n      (buffer: GPUBuffer) => {\n        t.queue.writeBuffer(buffer, 0, data);\n      }\n    );\n  });\n\ng.test('copyBufferToBuffer')\n  .desc(\n    `\n  Test that an outstanding mapping will prevent copyBufferToTexture commands from submitting,\n  both when used as the source and destination.`\n  )\n  .fn(async t => {\n    const sourceBuffer = t.device.createBuffer({\n      size: 8,\n      usage: GPUBufferUsage.COPY_SRC,\n    });\n\n    const destBuffer = t.device.createBuffer({\n      size: 8,\n      usage: GPUBufferUsage.COPY_DST,\n    });\n\n    await t.runBufferDependencyTest(\n      GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC,\n      (buffer: GPUBuffer) => {\n        const commandEncoder = t.device.createCommandEncoder();\n        commandEncoder.copyBufferToBuffer(buffer, 0, destBuffer, 0, 4);\n        t.queue.submit([commandEncoder.finish()]);\n      }\n    );\n\n    await t.runBufferDependencyTest(\n      GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n      (buffer: GPUBuffer) => {\n        const commandEncoder = t.device.createCommandEncoder();\n        commandEncoder.copyBufferToBuffer(sourceBuffer, 0, buffer, 0, 4);\n        t.queue.submit([commandEncoder.finish()]);\n      }\n    );\n  });\n\ng.test('copyBufferToTexture')\n  .desc(\n    `Test that an outstanding mapping will prevent copyBufferToTexture commands from submitting.`\n  )\n  .fn(async t => {\n    const size = { width: 1, height: 1 };\n\n    const texture = t.device.createTexture({\n      size,\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_DST,\n    });\n\n    await t.runBufferDependencyTest(\n      GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC,\n      (buffer: GPUBuffer) => {\n        const commandEncoder = t.device.createCommandEncoder();\n        commandEncoder.copyBufferToTexture({ buffer }, { texture }, size);\n        t.queue.submit([commandEncoder.finish()]);\n      }\n    );\n  });\n\ng.test('copyTextureToBuffer')\n  .desc(\n    `Test that an outstanding mapping will prevent copyTextureToBuffer commands from submitting.`\n  )\n  .fn(async t => {\n    const size = { width: 1, height: 1 };\n\n    const texture = t.device.createTexture({\n      size,\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC,\n    });\n\n    await t.runBufferDependencyTest(\n      GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n      (buffer: GPUBuffer) => {\n        const commandEncoder = t.device.createCommandEncoder();\n        commandEncoder.copyTextureToBuffer({ texture }, { buffer }, size);\n        t.queue.submit([commandEncoder.finish()]);\n      }\n    );\n  });\n\ng.test('map_command_recording_order')\n  .desc(\n    `\nTest that the order of mapping a buffer relative to when commands are recorded that use it\n  does not matter, as long as the buffer is unmapped when the commands are submitted.\n  `\n  )\n  .paramsSubcasesOnly([\n    {\n      order: ['record', 'map', 'unmap', 'finish', 'submit'],\n      mappedAtCreation: false,\n      _shouldError: false,\n    },\n    {\n      order: ['record', 'map', 'finish', 'unmap', 'submit'],\n      mappedAtCreation: false,\n      _shouldError: false,\n    },\n    {\n      order: ['record', 'finish', 'map', 'unmap', 'submit'],\n      mappedAtCreation: false,\n      _shouldError: false,\n    },\n    {\n      order: ['map', 'record', 'unmap', 'finish', 'submit'],\n      mappedAtCreation: false,\n      _shouldError: false,\n    },\n    {\n      order: ['map', 'record', 'finish', 'unmap', 'submit'],\n      mappedAtCreation: false,\n      _shouldError: false,\n    },\n    {\n      order: ['map', 'record', 'finish', 'submit', 'unmap'],\n      mappedAtCreation: false,\n      _shouldError: true,\n    },\n    {\n      order: ['record', 'map', 'finish', 'submit', 'unmap'],\n      mappedAtCreation: false,\n      _shouldError: true,\n    },\n    {\n      order: ['record', 'finish', 'map', 'submit', 'unmap'],\n      mappedAtCreation: false,\n      _shouldError: true,\n    },\n    { order: ['record', 'unmap', 'finish', 'submit'], mappedAtCreation: true, _shouldError: false },\n    { order: ['record', 'finish', 'unmap', 'submit'], mappedAtCreation: true, _shouldError: false },\n    { order: ['record', 'finish', 'submit', 'unmap'], mappedAtCreation: true, _shouldError: true },\n  ] as const)\n  .fn(async t => {\n    const { order, mappedAtCreation, _shouldError: shouldError } = t.params;\n\n    const buffer = t.device.createBuffer({\n      size: 4,\n      usage: GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC,\n      mappedAtCreation,\n    });\n\n    const targetBuffer = t.device.createBuffer({\n      size: 4,\n      usage: GPUBufferUsage.COPY_DST,\n    });\n\n    const commandEncoder = t.device.createCommandEncoder();\n    let commandBuffer: GPUCommandBuffer;\n\n    const steps = {\n      record: async () => {\n        commandEncoder.copyBufferToBuffer(buffer, 0, targetBuffer, 0, 4);\n      },\n      map: async () => {\n        await buffer.mapAsync(GPUMapMode.WRITE);\n      },\n      unmap: async () => {\n        buffer.unmap();\n      },\n      finish: async () => {\n        commandBuffer = commandEncoder.finish();\n      },\n      submit: async () => {\n        t.expectValidationError(() => {\n          t.queue.submit([commandBuffer]);\n        }, shouldError);\n      },\n    };\n\n    for (const op of order) {\n      await steps[op]();\n    }\n  });\n"],"file":"buffer_mapped.spec.js"}