{"version":3,"sources":["../../../../../src/webgpu/api/validation/render_pipeline/misc.spec.ts"],"names":["description","makeTestGroup","kDefaultVertexShaderCode","kDefaultFragmentShaderCode","CreateRenderPipelineValidationTest","g","test","desc","params","u","combine","fn","t","isAsync","descriptor","getDescriptor","doCreateRenderPipelineTest","beginSubcases","depthStencilFormat","hasColor","depthStencilState","undefined","format","noFragment","depthStencil","targets","paramsSubcasesOnly","beforeAllSubcases","selectMismatchedDeviceOrSkipTestCase","mismatched","device","mismatchedDevice","layout","createPipelineLayout","bindGroupLayouts","vertex","module","createShaderModule","code","entryPoint","fragment"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAFO,CAIP,SAASC,aAAT,QAA8B,4CAA9B;AACA,SAASC,wBAAT,EAAmCC,0BAAnC,QAAqE,yBAArE;;AAEA,SAASC,kCAAT,QAAmD,aAAnD;;AAEA,OAAO,MAAMC,CAAC,GAAGJ,aAAa,CAACG,kCAAD,CAAvB;;AAEPC,CAAC,CAACC,IAAF,CAAO,OAAP;AACGC,IADH,CACS,2CADT;AAEGC,MAFH,CAEU,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAF,CAAU,SAAV,EAAqB,CAAC,KAAD,EAAQ,IAAR,CAArB,CAFf;AAGGC,EAHH,CAGM,OAAMC,CAAN,KAAW;AACb,QAAM,EAAEC,OAAF,KAAcD,CAAC,CAACJ,MAAtB;AACA,QAAMM,UAAU,GAAGF,CAAC,CAACG,aAAF,EAAnB;;AAEAH,EAAAA,CAAC,CAACI,0BAAF,CAA6BH,OAA7B,EAAsC,IAAtC,EAA4CC,UAA5C;AACD,CARH;;AAUAT,CAAC,CAACC,IAAF,CAAO,mBAAP;AACGC,IADH;AAEK;AACL,6FAHA;;AAKGC,MALH,CAKU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,SADX,EACsB,CAAC,KAAD,EAAQ,IAAR,CADtB;AAEGO,aAFH;AAGGP,OAHH,CAGW,oBAHX,EAGiC;AAC7B,aAD6B;AAE7B,sBAF6B;AAG7B,cAH6B;AAI7B,EAJ6B,CAHjC;;AASGA,OATH,CASW,UATX,EASuB,CAAC,KAAD,EAAQ,IAAR,CATvB,CANJ;;AAiBGC,EAjBH,CAiBM,OAAMC,CAAN,KAAW;AACb,QAAM,EAAEC,OAAF,EAAWK,kBAAX,EAA+BC,QAA/B,KAA4CP,CAAC,CAACJ,MAApD;;AAEA,MAAIY,iBAAJ;AACA,MAAIF,kBAAkB,KAAK,EAA3B,EAA+B;AAC7BE,IAAAA,iBAAiB,GAAGC,SAApB;AACD,GAFD,MAEO;AACLD,IAAAA,iBAAiB,GAAG,EAAEE,MAAM,EAAEJ,kBAAV,EAApB;AACD;;AAED;AACA;AACA,QAAMJ,UAAU,GAAGF,CAAC,CAACG,aAAF,CAAgB;AACjCQ,IAAAA,UAAU,EAAE,IADqB;AAEjCC,IAAAA,YAAY,EAAEJ,iBAFmB;AAGjCK,IAAAA,OAAO,EAAEN,QAAQ,GAAG,CAAC,EAAEG,MAAM,EAAE,YAAV,EAAD,CAAH,GAAgC,EAHhB,EAAhB,CAAnB;;;AAMAV,EAAAA,CAAC,CAACI,0BAAF,CAA6BH,OAA7B,EAAsC,IAAtC,EAA4CC,UAA5C;AACD,CApCH;;AAsCAT,CAAC,CAACC,IAAF,CAAO,iCAAP;AACGC,IADH;AAEI,uGAFJ;;AAIGmB,kBAJH,CAIsB,CAAAjB,CAAC,KAAIA,CAAC,CAACC,OAAF,CAAU,SAAV,EAAqB,CAAC,IAAD,EAAO,KAAP,CAArB,EAAoCA,OAApC,CAA4C,YAA5C,EAA0D,CAAC,IAAD,EAAO,KAAP,CAA1D,CAJ3B;AAKGiB,iBALH,CAKqB,CAAAf,CAAC,KAAI;AACtBA,EAAAA,CAAC,CAACgB,oCAAF,CAAuCP,SAAvC;AACD,CAPH;AAQGV,EARH,CAQM,OAAMC,CAAN,KAAW;AACb,QAAM,EAAEC,OAAF,EAAWgB,UAAX,KAA0BjB,CAAC,CAACJ,MAAlC;;AAEA,QAAMsB,MAAM,GAAGD,UAAU,GAAGjB,CAAC,CAACmB,gBAAL,GAAwBnB,CAAC,CAACkB,MAAnD;;AAEA,QAAME,MAAM,GAAGF,MAAM,CAACG,oBAAP,CAA4B,EAAEC,gBAAgB,EAAE,EAApB,EAA5B,CAAf;;AAEA,QAAMZ,MAAM,GAAG,YAAf;AACA,QAAMR,UAAU,GAAG;AACjBkB,IAAAA,MADiB;AAEjBG,IAAAA,MAAM,EAAE;AACNC,MAAAA,MAAM,EAAExB,CAAC,CAACkB,MAAF,CAASO,kBAAT,CAA4B;AAClCC,QAAAA,IAAI,EAAEpC,wBAD4B,EAA5B,CADF;;AAINqC,MAAAA,UAAU,EAAE,MAJN,EAFS;;AAQjBC,IAAAA,QAAQ,EAAE;AACRJ,MAAAA,MAAM,EAAExB,CAAC,CAACkB,MAAF,CAASO,kBAAT,CAA4B;AAClCC,QAAAA,IAAI,EAAEnC,0BAD4B,EAA5B,CADA;;AAIRoC,MAAAA,UAAU,EAAE,MAJJ;AAKRd,MAAAA,OAAO,EAAE,CAAC,EAAEH,MAAF,EAAD,CALD,EARO,EAAnB;;;;AAiBAV,EAAAA,CAAC,CAACI,0BAAF,CAA6BH,OAA7B,EAAsC,CAACgB,UAAvC,EAAmDf,UAAnD;AACD,CAlCH","sourcesContent":["export const description = `\nmisc createRenderPipeline and createRenderPipelineAsync validation tests.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { kDefaultVertexShaderCode, kDefaultFragmentShaderCode } from '../../../util/shader.js';\n\nimport { CreateRenderPipelineValidationTest } from './common.js';\n\nexport const g = makeTestGroup(CreateRenderPipelineValidationTest);\n\ng.test('basic')\n  .desc(`Test basic usage of createRenderPipeline.`)\n  .params(u => u.combine('isAsync', [false, true]))\n  .fn(async t => {\n    const { isAsync } = t.params;\n    const descriptor = t.getDescriptor();\n\n    t.doCreateRenderPipelineTest(isAsync, true, descriptor);\n  });\n\ng.test('vertex_state_only')\n  .desc(\n    `Tests creating vertex-state-only render pipeline. A vertex-only render pipeline has no fragment\nstate (and thus has no color state), and can be created with or without depth stencil state.`\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .beginSubcases()\n      .combine('depthStencilFormat', [\n        'depth24plus',\n        'depth24plus-stencil8',\n        'depth32float',\n        '',\n      ] as const)\n      .combine('hasColor', [false, true])\n  )\n  .fn(async t => {\n    const { isAsync, depthStencilFormat, hasColor } = t.params;\n\n    let depthStencilState: GPUDepthStencilState | undefined;\n    if (depthStencilFormat === '') {\n      depthStencilState = undefined;\n    } else {\n      depthStencilState = { format: depthStencilFormat };\n    }\n\n    // Having targets or not should have no effect in result, since it will not appear in the\n    // descriptor in vertex-only render pipeline\n    const descriptor = t.getDescriptor({\n      noFragment: true,\n      depthStencil: depthStencilState,\n      targets: hasColor ? [{ format: 'rgba8unorm' }] : [],\n    });\n\n    t.doCreateRenderPipelineTest(isAsync, true, descriptor);\n  });\n\ng.test('pipeline_layout,device_mismatch')\n  .desc(\n    'Tests createRenderPipeline(Async) cannot be called with a pipeline layout created from another device'\n  )\n  .paramsSubcasesOnly(u => u.combine('isAsync', [true, false]).combine('mismatched', [true, false]))\n  .beforeAllSubcases(t => {\n    t.selectMismatchedDeviceOrSkipTestCase(undefined);\n  })\n  .fn(async t => {\n    const { isAsync, mismatched } = t.params;\n\n    const device = mismatched ? t.mismatchedDevice : t.device;\n\n    const layout = device.createPipelineLayout({ bindGroupLayouts: [] });\n\n    const format = 'rgba8unorm';\n    const descriptor = {\n      layout,\n      vertex: {\n        module: t.device.createShaderModule({\n          code: kDefaultVertexShaderCode,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: kDefaultFragmentShaderCode,\n        }),\n        entryPoint: 'main',\n        targets: [{ format }] as const,\n      },\n    };\n\n    t.doCreateRenderPipelineTest(isAsync, !mismatched, descriptor);\n  });\n"],"file":"misc.spec.js"}