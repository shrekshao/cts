{"version":3,"sources":["../../../../../src/webgpu/api/validation/render_pipeline/overrides.spec.ts"],"names":["description","makeTestGroup","CreateRenderPipelineValidationTest","g","test","desc","params","u","combine","combineWithParams","vertexConstants","_success","x","y","xxx","z","w","fn","t","isAsync","doCreateRenderPipelineTest","layout","vertex","module","device","createShaderModule","code","entryPoint","constants","fragment","targets","format","fragmentConstants","r","b","a","descriptor","getDescriptor","fragmentShaderCode"],"mappings":"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","sourcesContent":["export const description = `\nThis test dedicatedly tests validation of pipeline overridable constants of createRenderPipeline.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\n\nimport { CreateRenderPipelineValidationTest } from './common.js';\n\nexport const g = makeTestGroup(CreateRenderPipelineValidationTest);\n\ng.test('identifier,vertex')\n  .desc(\n    `\nTests calling createComputePipeline(Async) validation for overridable constants identifiers in vertex state.\n`\n  )\n  .params(u =>\n    u //\n      .combine('isAsync', [true, false])\n      .combineWithParams([\n        { vertexConstants: {}, _success: true },\n        { vertexConstants: { x: 1, y: 1 }, _success: true },\n        { vertexConstants: { x: 1, y: 1, 1: 1, 1000: 1 }, _success: true },\n        { vertexConstants: { xxx: 1 }, _success: false },\n        { vertexConstants: { 1: 1 }, _success: true },\n        { vertexConstants: { 2: 1 }, _success: false },\n        { vertexConstants: { z: 1 }, _success: false }, // pipeline constant id is specified for z\n        { vertexConstants: { w: 1 }, _success: false }, // pipeline constant id is specified for w\n        { vertexConstants: { 1: 1, z: 1 }, _success: false }, // pipeline constant id is specified for z\n      ] as { vertexConstants: Record<string, GPUPipelineConstantValue>; _success: boolean }[])\n  )\n  .fn(async t => {\n    const { isAsync, vertexConstants, _success } = t.params;\n\n    t.doCreateRenderPipelineTest(isAsync, _success, {\n      layout: 'auto',\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n            override x: f32 = 0.0;\n            override y: f32 = 0.0;\n            @id(1) override z: f32 = 0.0;\n            @id(1000) override w: f32 = 1.0;\n            @vertex fn main() -> @builtin(position) vec4<f32> {\n              return vec4<f32>(x, y, z, w);\n            }`,\n        }),\n        entryPoint: 'main',\n        constants: vertexConstants,\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `@fragment fn main() -> @location(0) vec4<f32> {\n              return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: 'rgba8unorm' }],\n      },\n    });\n  });\n\ng.test('identifier,fragment')\n  .desc(\n    `\nTests calling createComputePipeline(Async) validation for overridable constants identifiers in fragment state.\n`\n  )\n  .params(u =>\n    u //\n      .combine('isAsync', [true, false])\n      .combineWithParams([\n        { fragmentConstants: {}, _success: true },\n        { fragmentConstants: { r: 1, g: 1 }, _success: true },\n        { fragmentConstants: { r: 1, g: 1, 1: 1, 1000: 1 }, _success: true },\n        { fragmentConstants: { xxx: 1 }, _success: false },\n        { fragmentConstants: { 1: 1 }, _success: true },\n        { fragmentConstants: { 2: 1 }, _success: false },\n        { fragmentConstants: { b: 1 }, _success: false }, // pipeline constant id is specified for b\n        { fragmentConstants: { a: 1 }, _success: false }, // pipeline constant id is specified for a\n        { fragmentConstants: { 1: 1, b: 1 }, _success: false }, // pipeline constant id is specified for b\n      ] as { fragmentConstants: Record<string, GPUPipelineConstantValue>; _success: boolean }[])\n  )\n  .fn(async t => {\n    const { isAsync, fragmentConstants, _success } = t.params;\n\n    const descriptor = t.getDescriptor({\n      fragmentShaderCode: `\n        override r: f32 = 0.0;\n        override g: f32 = 0.0;\n        @id(1) override b: f32 = 0.0;\n        @id(1000) override a: f32 = 0.0;\n        @fragment fn main()\n            -> @location(0) vec4<f32> {\n            return vec4<f32>(r, g, b, a);\n        }`,\n      fragmentConstants,\n    });\n\n    t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n  });\n\ng.test('uninitialized,vertex')\n  .desc(\n    `\nTests calling createComputePipeline(Async) validation for uninitialized overridable constants in vertex state.\n`\n  )\n  .params(u =>\n    u //\n      .combine('isAsync', [true, false])\n      .combineWithParams([\n        { vertexConstants: {}, _success: false },\n        { vertexConstants: { x: 1, y: 1 }, _success: false }, // z is missing\n        { vertexConstants: { x: 1, z: 1 }, _success: true },\n        { vertexConstants: { x: 1, y: 1, z: 1, w: 1 }, _success: true },\n      ] as { vertexConstants: Record<string, GPUPipelineConstantValue>; _success: boolean }[])\n  )\n  .fn(async t => {\n    const { isAsync, vertexConstants, _success } = t.params;\n\n    t.doCreateRenderPipelineTest(isAsync, _success, {\n      layout: 'auto',\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n            override x: f32;\n            override y: f32 = 0.0;\n            override z: f32;\n            override w: f32 = 1.0;\n            @vertex fn main() -> @builtin(position) vec4<f32> {\n              return vec4<f32>(x, y, z, w);\n            }`,\n        }),\n        entryPoint: 'main',\n        constants: vertexConstants,\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `@fragment fn main() -> @location(0) vec4<f32> {\n              return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: 'rgba8unorm' }],\n      },\n    });\n  });\n\ng.test('uninitialized,fragment')\n  .desc(\n    `\nTests calling createComputePipeline(Async) validation for uninitialized overridable constants in fragment state.\n`\n  )\n  .params(u =>\n    u //\n      .combine('isAsync', [true, false])\n      .combineWithParams([\n        { fragmentConstants: {}, _success: false },\n        { fragmentConstants: { r: 1, g: 1 }, _success: false }, // b is missing\n        { fragmentConstants: { r: 1, b: 1 }, _success: true },\n        { fragmentConstants: { r: 1, g: 1, b: 1, a: 1 }, _success: true },\n      ] as { fragmentConstants: Record<string, GPUPipelineConstantValue>; _success: boolean }[])\n  )\n  .fn(async t => {\n    const { isAsync, fragmentConstants, _success } = t.params;\n\n    const descriptor = t.getDescriptor({\n      fragmentShaderCode: `\n        override r: f32;\n        override g: f32 = 0.0;\n        override b: f32;\n        override a: f32 = 0.0;\n        @fragment fn main()\n            -> @location(0) vec4<f32> {\n            return vec4<f32>(r, g, b, a);\n        }\n          `,\n      fragmentConstants,\n    });\n\n    t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n  });\n"],"file":"overrides.spec.js"}