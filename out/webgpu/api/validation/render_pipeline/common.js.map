{"version":3,"sources":["../../../../../src/webgpu/api/validation/render_pipeline/common.ts"],"names":["kTextureFormatInfo","getFragmentShaderCodeWithOutput","getPlainTypeInfo","kDefaultVertexShaderCode","ValidationTest","values","CreateRenderPipelineValidationTest","getDescriptor","options","defaultTargets","format","primitive","targets","multisample","depthStencil","fragmentShaderCode","plainType","sampleType","componentCount","noFragment","fragmentConstants","vertex","module","device","createShaderModule","code","entryPoint","fragment","undefined","constants","layout","getPipelineLayout","createPipelineLayout","bindGroupLayouts"],"mappings":";AAAA;AACA,GADA,SAASA,kBAAT,QAAmC,6BAAnC,CACA,SACEC,+BADF;AAEEC,gBAFF;AAGEC,wBAHF;AAIO,yBAJP;AAKA,SAASC,cAAT,QAA+B,uBAA/B;;AAEA,MAAMC,MAAM,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAf;AACA,OAAO,MAAMC,kCAAN,SAAiDF,cAAjD,CAAgE;AACrEG,EAAAA,aAAa;AACXC,EAAAA,OAQC;;;;;;;;AAAG,IATO;AAUkB;AAC7B,UAAMC,cAAqC,GAAG,CAAC,EAAEC,MAAM,EAAE,YAAV,EAAD,CAA9C;AACA,UAAM;AACJC,MAAAA,SAAS,GAAG,EADR;AAEJC,MAAAA,OAAO,GAAGH,cAFN;AAGJI,MAAAA,WAAW,GAAG,EAHV;AAIJC,MAAAA,YAJI;AAKJC,MAAAA,kBAAkB,GAAGd,+BAA+B,CAAC;AACnD;AACEI,QAAAA,MADF;AAEEW,QAAAA,SAAS,EAAEd,gBAAgB;AACzBF,QAAAA,kBAAkB,CAACY,OAAO,CAAC,CAAD,CAAP,GAAaA,OAAO,CAAC,CAAD,CAAP,CAAWF,MAAxB,GAAiC,YAAlC,CAAlB,CAAkEO,UADzC,CAF7B;;AAKEC,QAAAA,cAAc,EAAE,CALlB,EADmD,CAAD,CALhD;;;AAcJC,MAAAA,UAAU,GAAG,KAdT;AAeJC,MAAAA,iBAAiB,GAAG,EAfhB;AAgBFZ,IAAAA,OAhBJ;;AAkBA,WAAO;AACLa,MAAAA,MAAM,EAAE;AACNC,QAAAA,MAAM,EAAE,KAAKC,MAAL,CAAYC,kBAAZ,CAA+B;AACrCC,UAAAA,IAAI,EAAEtB,wBAD+B,EAA/B,CADF;;AAINuB,QAAAA,UAAU,EAAE,MAJN,EADH;;AAOLC,MAAAA,QAAQ,EAAER,UAAU;AAChBS,MAAAA,SADgB;AAEhB;AACEN,QAAAA,MAAM,EAAE,KAAKC,MAAL,CAAYC,kBAAZ,CAA+B;AACrCC,UAAAA,IAAI,EAAEV,kBAD+B,EAA/B,CADV;;AAIEW,QAAAA,UAAU,EAAE,MAJd;AAKEd,QAAAA,OALF;AAMEiB,QAAAA,SAAS,EAAET,iBANb,EATC;;AAiBLU,MAAAA,MAAM,EAAE,KAAKC,iBAAL,EAjBH;AAkBLpB,MAAAA,SAlBK;AAmBLE,MAAAA,WAnBK;AAoBLC,MAAAA,YApBK,EAAP;;AAsBD;;AAEDiB,EAAAA,iBAAiB,GAAsB;AACrC,WAAO,KAAKR,MAAL,CAAYS,oBAAZ,CAAiC,EAAEC,gBAAgB,EAAE,EAApB,EAAjC,CAAP;AACD,GAzDoE","sourcesContent":["import { kTextureFormatInfo } from '../../../capability_info.js';\nimport {\n  getFragmentShaderCodeWithOutput,\n  getPlainTypeInfo,\n  kDefaultVertexShaderCode,\n} from '../../../util/shader.js';\nimport { ValidationTest } from '../validation_test.js';\n\nconst values = [0, 1, 0, 1];\nexport class CreateRenderPipelineValidationTest extends ValidationTest {\n  getDescriptor(\n    options: {\n      primitive?: GPUPrimitiveState;\n      targets?: GPUColorTargetState[];\n      multisample?: GPUMultisampleState;\n      depthStencil?: GPUDepthStencilState;\n      fragmentShaderCode?: string;\n      noFragment?: boolean;\n      fragmentConstants?: Record<string, GPUPipelineConstantValue>;\n    } = {}\n  ): GPURenderPipelineDescriptor {\n    const defaultTargets: GPUColorTargetState[] = [{ format: 'rgba8unorm' }];\n    const {\n      primitive = {},\n      targets = defaultTargets,\n      multisample = {},\n      depthStencil,\n      fragmentShaderCode = getFragmentShaderCodeWithOutput([\n        {\n          values,\n          plainType: getPlainTypeInfo(\n            kTextureFormatInfo[targets[0] ? targets[0].format : 'rgba8unorm'].sampleType\n          ),\n          componentCount: 4,\n        },\n      ]),\n      noFragment = false,\n      fragmentConstants = {},\n    } = options;\n\n    return {\n      vertex: {\n        module: this.device.createShaderModule({\n          code: kDefaultVertexShaderCode,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: noFragment\n        ? undefined\n        : {\n            module: this.device.createShaderModule({\n              code: fragmentShaderCode,\n            }),\n            entryPoint: 'main',\n            targets,\n            constants: fragmentConstants,\n          },\n      layout: this.getPipelineLayout(),\n      primitive,\n      multisample,\n      depthStencil,\n    };\n  }\n\n  getPipelineLayout(): GPUPipelineLayout {\n    return this.device.createPipelineLayout({ bindGroupLayouts: [] });\n  }\n}\n"],"file":"common.js"}