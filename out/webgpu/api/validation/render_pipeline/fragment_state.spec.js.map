{"version":3,"sources":["../../../../../src/webgpu/api/validation/render_pipeline/fragment_state.spec.ts"],"names":["description","makeTestGroup","range","kTextureFormats","kRenderableColorTextureFormats","kTextureFormatInfo","kBlendFactors","kBlendOperations","getFragmentShaderCodeWithOutput","getPlainTypeInfo","kDefaultFragmentShaderCode","kTexelRepresentationInfo","CreateRenderPipelineValidationTest","g","values","test","desc","params","u","combine","fn","t","isAsync","goodDescriptor","getDescriptor","targets","format","doCreateRenderPipelineTest","badDescriptor","targetsLength","descriptor","i","writeMask","fragmentShaderCode","device","limits","maxColorAttachments","beforeAllSubcases","info","selectDeviceOrSkipTestCase","feature","renderable","color","beginSubcases","hasBlend","blend","alpha","undefined","sampleType","component","srcFactor","dstFactor","operation","defaultBlendComponent","blendComponentToTest","_success","expand","p","shaderOutput","selectDeviceForTextureFormatOrSkipTestCase","depthStencil","plainType","scalar","componentCount","count","success","componentOrder","length","combineWithParams","colorSrcFactor","colorDstFactor","alphaSrcFactor","alphaDstFactor","colorBlendReadsSrcAlpha","includes","meetsExtraBlendingRequirement"],"mappings":"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","sourcesContent":["export const description = `\nThis test dedicatedly tests validation of GPUFragmentState of createRenderPipeline.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { range } from '../../../../common/util/util.js';\nimport {\n  kTextureFormats,\n  kRenderableColorTextureFormats,\n  kTextureFormatInfo,\n  kBlendFactors,\n  kBlendOperations,\n} from '../../../capability_info.js';\nimport {\n  getFragmentShaderCodeWithOutput,\n  getPlainTypeInfo,\n  kDefaultFragmentShaderCode,\n} from '../../../util/shader.js';\nimport { kTexelRepresentationInfo } from '../../../util/texture/texel_data.js';\n\nimport { CreateRenderPipelineValidationTest } from './common.js';\n\nexport const g = makeTestGroup(CreateRenderPipelineValidationTest);\n\nconst values = [0, 1, 0, 1];\n\ng.test('color_target_exists')\n  .desc(`Tests creating a complete render pipeline requires at least one color target state.`)\n  .params(u => u.combine('isAsync', [false, true]))\n  .fn(async t => {\n    const { isAsync } = t.params;\n\n    const goodDescriptor = t.getDescriptor({\n      targets: [{ format: 'rgba8unorm' }],\n    });\n\n    // Control case\n    t.doCreateRenderPipelineTest(isAsync, true, goodDescriptor);\n\n    // Fail because lack of color states\n    const badDescriptor = t.getDescriptor({\n      targets: [],\n    });\n\n    t.doCreateRenderPipelineTest(isAsync, false, badDescriptor);\n  });\n\ng.test('max_color_attachments_limit')\n  .desc(\n    `Tests that color state targets length must not be larger than device.limits.maxColorAttachments.`\n  )\n  .params(u => u.combine('isAsync', [false, true]).combine('targetsLength', [8, 9]))\n  .fn(async t => {\n    const { isAsync, targetsLength } = t.params;\n\n    const descriptor = t.getDescriptor({\n      targets: range(targetsLength, i => {\n        // Set writeMask to 0 for attachments without fragment output\n        return { format: 'rgba8unorm', writeMask: i === 0 ? 0xf : 0 };\n      }),\n      fragmentShaderCode: kDefaultFragmentShaderCode,\n    });\n\n    t.doCreateRenderPipelineTest(\n      isAsync,\n      targetsLength <= t.device.limits.maxColorAttachments,\n      descriptor\n    );\n  });\n\ng.test('targets_format_renderable')\n  .desc(`Tests that color target state format must have RENDER_ATTACHMENT capability.`)\n  .params(u => u.combine('isAsync', [false, true]).combine('format', kTextureFormats))\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(async t => {\n    const { isAsync, format } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    const descriptor = t.getDescriptor({ targets: [{ format }] });\n\n    t.doCreateRenderPipelineTest(isAsync, info.renderable && info.color, descriptor);\n  });\n\ng.test('targets_format_filterable')\n  .desc(`Tests that color target state format must be filterable if blend is not undefined.`)\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('format', kRenderableColorTextureFormats)\n      .beginSubcases()\n      .combine('hasBlend', [false, true])\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(async t => {\n    const { isAsync, format, hasBlend } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    const descriptor = t.getDescriptor({\n      targets: [\n        {\n          format,\n          blend: hasBlend ? { color: {}, alpha: {} } : undefined,\n        },\n      ],\n    });\n\n    t.doCreateRenderPipelineTest(isAsync, !hasBlend || info.sampleType === 'float', descriptor);\n  });\n\ng.test('targets_blend')\n  .desc(\n    `\n  For the blend components on either GPUBlendState.color or GPUBlendState.alpha:\n  - Tests if the combination of 'srcFactor', 'dstFactor' and 'operation' is valid (if the blend\n    operation is \"min\" or \"max\", srcFactor and dstFactor must be \"one\").\n  `\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('component', ['color', 'alpha'] as const)\n      .beginSubcases()\n      .combine('srcFactor', kBlendFactors)\n      .combine('dstFactor', kBlendFactors)\n      .combine('operation', kBlendOperations)\n  )\n  .fn(async t => {\n    const { isAsync, component, srcFactor, dstFactor, operation } = t.params;\n\n    const defaultBlendComponent: GPUBlendComponent = {\n      srcFactor: 'src-alpha',\n      dstFactor: 'dst-alpha',\n      operation: 'add',\n    };\n    const blendComponentToTest: GPUBlendComponent = {\n      srcFactor,\n      dstFactor,\n      operation,\n    };\n    const format = 'rgba8unorm';\n\n    const descriptor = t.getDescriptor({\n      targets: [\n        {\n          format,\n          blend: {\n            color: component === 'color' ? blendComponentToTest : defaultBlendComponent,\n            alpha: component === 'alpha' ? blendComponentToTest : defaultBlendComponent,\n          },\n        },\n      ],\n    });\n\n    if (operation === 'min' || operation === 'max') {\n      const _success = srcFactor === 'one' && dstFactor === 'one';\n      t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n    } else {\n      t.doCreateRenderPipelineTest(isAsync, true, descriptor);\n    }\n  });\n\ng.test('targets_write_mask')\n  .desc(`Tests that color target state write mask must be < 16.`)\n  .params(u => u.combine('isAsync', [false, true]).combine('writeMask', [0, 0xf, 0x10, 0x80000001]))\n  .fn(async t => {\n    const { isAsync, writeMask } = t.params;\n\n    const descriptor = t.getDescriptor({\n      targets: [\n        {\n          format: 'rgba8unorm',\n          writeMask,\n        },\n      ],\n    });\n\n    t.doCreateRenderPipelineTest(isAsync, writeMask < 16, descriptor);\n  });\n\ng.test('pipeline_output_targets')\n  .desc(\n    `Pipeline fragment output types must be compatible with target color state format\n  - The scalar type (f32, i32, or u32) must match the sample type of the format.\n  - The componentCount of the fragment output (e.g. f32, vec2, vec3, vec4) must not have fewer\n    channels than that of the color attachment texture formats. Extra components are allowed and are discarded.\n\n  Otherwise, color state write mask must be 0.`\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('format', [undefined, ...kRenderableColorTextureFormats] as const)\n      .beginSubcases()\n      .combine('shaderOutput', [\n        undefined,\n        ...u.combine('scalar', ['f32', 'u32', 'i32'] as const).combine('count', [1, 2, 3, 4]),\n      ])\n      // We only care about testing writeMask if there is an attachment but no shader output.\n      .expand('writeMask', p =>\n        p.format !== undefined && p.shaderOutput !== undefined ? [0, 0x1, 0x2, 0x4, 0x8] : [0xf]\n      )\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n  })\n  .fn(async t => {\n    const { isAsync, format, writeMask, shaderOutput } = t.params;\n\n    const descriptor = t.getDescriptor({\n      targets: format ? [{ format, writeMask }] : [],\n      // To have a dummy depthStencil attachment to avoid having no attachment at all which is invalid\n      depthStencil: { format: 'depth24plus' },\n      fragmentShaderCode: getFragmentShaderCodeWithOutput(\n        shaderOutput\n          ? [{ values, plainType: shaderOutput.scalar, componentCount: shaderOutput.count }]\n          : []\n      ),\n    });\n\n    let success = true;\n    if (format) {\n      // There is a color target\n      if (shaderOutput) {\n        // The shader outputs to the color target\n        const info = kTextureFormatInfo[format];\n        success =\n          shaderOutput.scalar === getPlainTypeInfo(info.sampleType) &&\n          shaderOutput.count >= kTexelRepresentationInfo[format].componentOrder.length;\n      } else {\n        // The shader does not output to the color target\n        success = writeMask === 0;\n      }\n    }\n\n    t.doCreateRenderPipelineTest(isAsync, success, descriptor);\n  });\n\ng.test('pipeline_output_targets,blend')\n  .desc(\n    `On top of requirements from pipeline_output_targets, when blending is enabled and alpha channel is read indicated by any blend factor, an extra requirement is added:\n  - fragment output must be vec4.\n  `\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('format', ['r8unorm', 'rg8unorm', 'rgba8unorm', 'bgra8unorm'] as const)\n      .combine('componentCount', [1, 2, 3, 4])\n      .beginSubcases()\n      // The default srcFactor and dstFactor are 'one' and 'zero'. Override just one at a time.\n      .combineWithParams([\n        ...u.combine('colorSrcFactor', kBlendFactors),\n        ...u.combine('colorDstFactor', kBlendFactors),\n        ...u.combine('alphaSrcFactor', kBlendFactors),\n        ...u.combine('alphaDstFactor', kBlendFactors),\n      ] as const)\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(async t => {\n    const sampleType = 'float';\n    const {\n      isAsync,\n      format,\n      componentCount,\n      colorSrcFactor,\n      colorDstFactor,\n      alphaSrcFactor,\n      alphaDstFactor,\n    } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    const descriptor = t.getDescriptor({\n      targets: [\n        {\n          format,\n          blend: {\n            color: { srcFactor: colorSrcFactor, dstFactor: colorDstFactor },\n            alpha: { srcFactor: alphaSrcFactor, dstFactor: alphaDstFactor },\n          },\n        },\n      ],\n      fragmentShaderCode: getFragmentShaderCodeWithOutput([\n        { values, plainType: getPlainTypeInfo(sampleType), componentCount },\n      ]),\n    });\n\n    const colorBlendReadsSrcAlpha =\n      colorSrcFactor?.includes('src-alpha') || colorDstFactor?.includes('src-alpha');\n    const meetsExtraBlendingRequirement = !colorBlendReadsSrcAlpha || componentCount === 4;\n    const _success =\n      info.sampleType === sampleType &&\n      componentCount >= kTexelRepresentationInfo[format].componentOrder.length &&\n      meetsExtraBlendingRequirement;\n    t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n  });\n"],"file":"fragment_state.spec.js"}