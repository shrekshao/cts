{"version":3,"file":"fragment_state.spec.js","names":["description","makeTestGroup","range","kTextureFormats","kRenderableColorTextureFormats","kTextureFormatInfo","kBlendFactors","kBlendOperations","getFragmentShaderCodeWithOutput","getPlainTypeInfo","kDefaultFragmentShaderCode","kTexelRepresentationInfo","CreateRenderPipelineValidationTest","g","values","test","desc","params","u","combine","fn","t","isAsync","goodDescriptor","getDescriptor","targets","format","doCreateRenderPipelineTest","badDescriptor","targetsLength","descriptor","i","writeMask","fragmentShaderCode","device","limits","maxColorAttachments","beforeAllSubcases","info","selectDeviceOrSkipTestCase","feature","renderable","color","beginSubcases","hasBlend","blend","alpha","undefined","sampleType","component","srcFactor","dstFactor","operation","defaultBlendComponent","blendComponentToTest","_success","expand","p","shaderOutput","selectDeviceForTextureFormatOrSkipTestCase","depthStencil","plainType","scalar","componentCount","count","success","componentOrder","length","combineWithParams","colorSrcFactor","colorDstFactor","alphaSrcFactor","alphaDstFactor","colorBlendReadsSrcAlpha","includes","meetsExtraBlendingRequirement"],"sources":["../../../../../src/webgpu/api/validation/render_pipeline/fragment_state.spec.ts"],"sourcesContent":["export const description = `\nThis test dedicatedly tests validation of GPUFragmentState of createRenderPipeline.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { range } from '../../../../common/util/util.js';\nimport {\n  kTextureFormats,\n  kRenderableColorTextureFormats,\n  kTextureFormatInfo,\n  kBlendFactors,\n  kBlendOperations,\n} from '../../../capability_info.js';\nimport {\n  getFragmentShaderCodeWithOutput,\n  getPlainTypeInfo,\n  kDefaultFragmentShaderCode,\n} from '../../../util/shader.js';\nimport { kTexelRepresentationInfo } from '../../../util/texture/texel_data.js';\n\nimport { CreateRenderPipelineValidationTest } from './common.js';\n\nexport const g = makeTestGroup(CreateRenderPipelineValidationTest);\n\nconst values = [0, 1, 0, 1];\n\ng.test('color_target_exists')\n  .desc(`Tests creating a complete render pipeline requires at least one color target state.`)\n  .params(u => u.combine('isAsync', [false, true]))\n  .fn(async t => {\n    const { isAsync } = t.params;\n\n    const goodDescriptor = t.getDescriptor({\n      targets: [{ format: 'rgba8unorm' }],\n    });\n\n    // Control case\n    t.doCreateRenderPipelineTest(isAsync, true, goodDescriptor);\n\n    // Fail because lack of color states\n    const badDescriptor = t.getDescriptor({\n      targets: [],\n    });\n\n    t.doCreateRenderPipelineTest(isAsync, false, badDescriptor);\n  });\n\ng.test('max_color_attachments_limit')\n  .desc(\n    `Tests that color state targets length must not be larger than device.limits.maxColorAttachments.`\n  )\n  .params(u => u.combine('isAsync', [false, true]).combine('targetsLength', [8, 9]))\n  .fn(async t => {\n    const { isAsync, targetsLength } = t.params;\n\n    const descriptor = t.getDescriptor({\n      targets: range(targetsLength, i => {\n        // Set writeMask to 0 for attachments without fragment output\n        return { format: 'rgba8unorm', writeMask: i === 0 ? 0xf : 0 };\n      }),\n      fragmentShaderCode: kDefaultFragmentShaderCode,\n    });\n\n    t.doCreateRenderPipelineTest(\n      isAsync,\n      targetsLength <= t.device.limits.maxColorAttachments,\n      descriptor\n    );\n  });\n\ng.test('targets_format_renderable')\n  .desc(`Tests that color target state format must have RENDER_ATTACHMENT capability.`)\n  .params(u => u.combine('isAsync', [false, true]).combine('format', kTextureFormats))\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(async t => {\n    const { isAsync, format } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    const descriptor = t.getDescriptor({ targets: [{ format }] });\n\n    t.doCreateRenderPipelineTest(isAsync, info.renderable && info.color, descriptor);\n  });\n\ng.test('targets_format_filterable')\n  .desc(`Tests that color target state format must be filterable if blend is not undefined.`)\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('format', kRenderableColorTextureFormats)\n      .beginSubcases()\n      .combine('hasBlend', [false, true])\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(async t => {\n    const { isAsync, format, hasBlend } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    const descriptor = t.getDescriptor({\n      targets: [\n        {\n          format,\n          blend: hasBlend ? { color: {}, alpha: {} } : undefined,\n        },\n      ],\n    });\n\n    t.doCreateRenderPipelineTest(isAsync, !hasBlend || info.sampleType === 'float', descriptor);\n  });\n\ng.test('targets_blend')\n  .desc(\n    `\n  For the blend components on either GPUBlendState.color or GPUBlendState.alpha:\n  - Tests if the combination of 'srcFactor', 'dstFactor' and 'operation' is valid (if the blend\n    operation is \"min\" or \"max\", srcFactor and dstFactor must be \"one\").\n  `\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('component', ['color', 'alpha'] as const)\n      .beginSubcases()\n      .combine('srcFactor', kBlendFactors)\n      .combine('dstFactor', kBlendFactors)\n      .combine('operation', kBlendOperations)\n  )\n  .fn(async t => {\n    const { isAsync, component, srcFactor, dstFactor, operation } = t.params;\n\n    const defaultBlendComponent: GPUBlendComponent = {\n      srcFactor: 'src-alpha',\n      dstFactor: 'dst-alpha',\n      operation: 'add',\n    };\n    const blendComponentToTest: GPUBlendComponent = {\n      srcFactor,\n      dstFactor,\n      operation,\n    };\n    const format = 'rgba8unorm';\n\n    const descriptor = t.getDescriptor({\n      targets: [\n        {\n          format,\n          blend: {\n            color: component === 'color' ? blendComponentToTest : defaultBlendComponent,\n            alpha: component === 'alpha' ? blendComponentToTest : defaultBlendComponent,\n          },\n        },\n      ],\n    });\n\n    if (operation === 'min' || operation === 'max') {\n      const _success = srcFactor === 'one' && dstFactor === 'one';\n      t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n    } else {\n      t.doCreateRenderPipelineTest(isAsync, true, descriptor);\n    }\n  });\n\ng.test('targets_write_mask')\n  .desc(`Tests that color target state write mask must be < 16.`)\n  .params(u => u.combine('isAsync', [false, true]).combine('writeMask', [0, 0xf, 0x10, 0x80000001]))\n  .fn(async t => {\n    const { isAsync, writeMask } = t.params;\n\n    const descriptor = t.getDescriptor({\n      targets: [\n        {\n          format: 'rgba8unorm',\n          writeMask,\n        },\n      ],\n    });\n\n    t.doCreateRenderPipelineTest(isAsync, writeMask < 16, descriptor);\n  });\n\ng.test('pipeline_output_targets')\n  .desc(\n    `Pipeline fragment output types must be compatible with target color state format\n  - The scalar type (f32, i32, or u32) must match the sample type of the format.\n  - The componentCount of the fragment output (e.g. f32, vec2, vec3, vec4) must not have fewer\n    channels than that of the color attachment texture formats. Extra components are allowed and are discarded.\n\n  Otherwise, color state write mask must be 0.`\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('format', [undefined, ...kRenderableColorTextureFormats] as const)\n      .beginSubcases()\n      .combine('shaderOutput', [\n        undefined,\n        ...u.combine('scalar', ['f32', 'u32', 'i32'] as const).combine('count', [1, 2, 3, 4]),\n      ])\n      // We only care about testing writeMask if there is an attachment but no shader output.\n      .expand('writeMask', p =>\n        p.format !== undefined && p.shaderOutput !== undefined ? [0, 0x1, 0x2, 0x4, 0x8] : [0xf]\n      )\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n  })\n  .fn(async t => {\n    const { isAsync, format, writeMask, shaderOutput } = t.params;\n\n    const descriptor = t.getDescriptor({\n      targets: format ? [{ format, writeMask }] : [],\n      // To have a dummy depthStencil attachment to avoid having no attachment at all which is invalid\n      depthStencil: { format: 'depth24plus' },\n      fragmentShaderCode: getFragmentShaderCodeWithOutput(\n        shaderOutput\n          ? [{ values, plainType: shaderOutput.scalar, componentCount: shaderOutput.count }]\n          : []\n      ),\n    });\n\n    let success = true;\n    if (format) {\n      // There is a color target\n      if (shaderOutput) {\n        // The shader outputs to the color target\n        const info = kTextureFormatInfo[format];\n        success =\n          shaderOutput.scalar === getPlainTypeInfo(info.sampleType) &&\n          shaderOutput.count >= kTexelRepresentationInfo[format].componentOrder.length;\n      } else {\n        // The shader does not output to the color target\n        success = writeMask === 0;\n      }\n    }\n\n    t.doCreateRenderPipelineTest(isAsync, success, descriptor);\n  });\n\ng.test('pipeline_output_targets,blend')\n  .desc(\n    `On top of requirements from pipeline_output_targets, when blending is enabled and alpha channel is read indicated by any blend factor, an extra requirement is added:\n  - fragment output must be vec4.\n  `\n  )\n  .params(u =>\n    u\n      .combine('isAsync', [false, true])\n      .combine('format', ['r8unorm', 'rg8unorm', 'rgba8unorm', 'bgra8unorm'] as const)\n      .combine('componentCount', [1, 2, 3, 4])\n      .beginSubcases()\n      // The default srcFactor and dstFactor are 'one' and 'zero'. Override just one at a time.\n      .combineWithParams([\n        ...u.combine('colorSrcFactor', kBlendFactors),\n        ...u.combine('colorDstFactor', kBlendFactors),\n        ...u.combine('alphaSrcFactor', kBlendFactors),\n        ...u.combine('alphaDstFactor', kBlendFactors),\n      ] as const)\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(async t => {\n    const sampleType = 'float';\n    const {\n      isAsync,\n      format,\n      componentCount,\n      colorSrcFactor,\n      colorDstFactor,\n      alphaSrcFactor,\n      alphaDstFactor,\n    } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    const descriptor = t.getDescriptor({\n      targets: [\n        {\n          format,\n          blend: {\n            color: { srcFactor: colorSrcFactor, dstFactor: colorDstFactor },\n            alpha: { srcFactor: alphaSrcFactor, dstFactor: alphaDstFactor },\n          },\n        },\n      ],\n      fragmentShaderCode: getFragmentShaderCodeWithOutput([\n        { values, plainType: getPlainTypeInfo(sampleType), componentCount },\n      ]),\n    });\n\n    const colorBlendReadsSrcAlpha =\n      colorSrcFactor?.includes('src-alpha') || colorDstFactor?.includes('src-alpha');\n    const meetsExtraBlendingRequirement = !colorBlendReadsSrcAlpha || componentCount === 4;\n    const _success =\n      info.sampleType === sampleType &&\n      componentCount >= kTexelRepresentationInfo[format].componentOrder.length &&\n      meetsExtraBlendingRequirement;\n    t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n  });\n"],"mappings":"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"}