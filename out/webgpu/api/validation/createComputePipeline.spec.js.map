{"version":3,"sources":["../../../../src/webgpu/api/validation/createComputePipeline.spec.ts"],"names":["description","makeTestGroup","ValidationTest","F","getShaderModule","shaderStage","entryPoint","code","device","createShaderModule","getInvalidShaderModule","pushErrorScope","shaderModule","popErrorScope","doCreateComputePipelineTest","isAsync","_success","descriptor","shouldResolve","createComputePipelineAsync","shouldReject","expectValidationError","createComputePipeline","g","test","desc","params","u","combine","fn","t","layout","compute","module","shaderModuleStage","combineWithParams","shaderModuleEntryPoint","stageEntryPoint","paramsSubcasesOnly","beforeAllSubcases","selectMismatchedDeviceOrSkipTestCase","undefined","mismatched","mismatchedDevice","createPipelineLayout","bindGroupLayouts"],"mappings":"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","sourcesContent":["export const description = `\ncreateComputePipeline and createComputePipelineAsync validation tests.\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\n\nimport { ValidationTest } from './validation_test.js';\n\ntype TShaderStage = 'compute' | 'vertex' | 'fragment' | 'empty';\n\nclass F extends ValidationTest {\n  getShaderModule(\n    shaderStage: TShaderStage = 'compute',\n    entryPoint: string = 'main'\n  ): GPUShaderModule {\n    let code;\n    switch (shaderStage) {\n      case 'compute': {\n        code = `@stage(compute) @workgroup_size(1) fn ${entryPoint}() {}`;\n        break;\n      }\n      case 'vertex': {\n        code = `\n        @stage(vertex) fn ${entryPoint}() -> @builtin(position) vec4<f32> {\n          return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n        }`;\n        break;\n      }\n      case 'fragment': {\n        code = `\n        @stage(fragment) fn ${entryPoint}() -> @location(0) vec4<i32> {\n          return vec4<i32>(0, 1, 0, 1);\n        }`;\n        break;\n      }\n      case 'empty':\n      default: {\n        code = '';\n        break;\n      }\n    }\n    return this.device.createShaderModule({ code });\n  }\n\n  getInvalidShaderModule(): GPUShaderModule {\n    this.device.pushErrorScope('validation');\n    const code = 'deadbeaf'; // Something make nonsense\n    const shaderModule = this.device.createShaderModule({ code });\n    void this.device.popErrorScope();\n    return shaderModule;\n  }\n\n  doCreateComputePipelineTest(\n    isAsync: boolean,\n    _success: boolean,\n    descriptor: GPUComputePipelineDescriptor\n  ) {\n    if (isAsync) {\n      if (_success) {\n        this.shouldResolve(this.device.createComputePipelineAsync(descriptor));\n      } else {\n        this.shouldReject('OperationError', this.device.createComputePipelineAsync(descriptor));\n      }\n    } else {\n      this.expectValidationError(() => {\n        this.device.createComputePipeline(descriptor);\n      }, !_success);\n    }\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('basic_use_of_createComputePipeline')\n  .desc(\n    `\nControl case for createComputePipeline and createComputePipelineAsync.\nCall the API with valid compute shader and matching valid entryPoint, making sure that the test function working well.\n`\n  )\n  .params(u => u.combine('isAsync', [true, false]))\n  .fn(async t => {\n    const { isAsync } = t.params;\n    t.doCreateComputePipelineTest(isAsync, true, {\n      layout: 'auto',\n      compute: { module: t.getShaderModule('compute', 'main'), entryPoint: 'main' },\n    });\n  });\n\ng.test('shader_module_must_be_valid')\n  .desc(\n    `\nTests calling createComputePipeline(Async) with a invalid compute shader, and check that the APIs catch this error.\n`\n  )\n  .params(u => u.combine('isAsync', [true, false]))\n  .fn(async t => {\n    const { isAsync } = t.params;\n    t.doCreateComputePipelineTest(isAsync, false, {\n      layout: 'auto',\n      compute: {\n        module: t.getInvalidShaderModule(),\n        entryPoint: 'main',\n      },\n    });\n  });\n\ng.test('shader_module_stage_must_be_compute')\n  .desc(\n    `\nTests calling createComputePipeline(Async) with valid but different stage shader and matching entryPoint,\nand check that the APIs only accept compute shader.\n`\n  )\n  .params(u =>\n    u //\n      .combine('isAsync', [true, false])\n      .combine('shaderModuleStage', ['compute', 'vertex', 'fragment'] as TShaderStage[])\n  )\n  .fn(async t => {\n    const { isAsync, shaderModuleStage } = t.params;\n    const descriptor = {\n      layout: 'auto' as const,\n      compute: {\n        module: t.getShaderModule(shaderModuleStage, 'main'),\n        entryPoint: 'main',\n      },\n    };\n    t.doCreateComputePipelineTest(isAsync, shaderModuleStage === 'compute', descriptor);\n  });\n\ng.test('entry_point_name_must_match')\n  .desc(\n    `\nTests calling createComputePipeline(Async) with valid compute stage shader and different entryPoint,\nand check that the APIs only accept matching entryPoint.\n\nThe entryPoint in shader module include standard \"main\" and others.\nThe entryPoint assigned in descriptor include:\n- Matching case (control case)\n- Empty string\n- Mistyping\n- Containing invalid char, including space and control codes (Null character)\n- Unicode entrypoints and their ASCIIfied version\n`\n  )\n  .params(u =>\n    u.combine('isAsync', [true, false]).combineWithParams([\n      { shaderModuleEntryPoint: 'main', stageEntryPoint: 'main' },\n      { shaderModuleEntryPoint: 'main', stageEntryPoint: '' },\n      { shaderModuleEntryPoint: 'main', stageEntryPoint: 'main\\0' },\n      { shaderModuleEntryPoint: 'main', stageEntryPoint: 'main\\0a' },\n      { shaderModuleEntryPoint: 'main', stageEntryPoint: 'mian' },\n      { shaderModuleEntryPoint: 'main', stageEntryPoint: 'main ' },\n      { shaderModuleEntryPoint: 'main', stageEntryPoint: 'ma in' },\n      { shaderModuleEntryPoint: 'main', stageEntryPoint: 'main\\n' },\n      { shaderModuleEntryPoint: 'mian', stageEntryPoint: 'mian' },\n      { shaderModuleEntryPoint: 'mian', stageEntryPoint: 'main' },\n      { shaderModuleEntryPoint: 'mainmain', stageEntryPoint: 'mainmain' },\n      { shaderModuleEntryPoint: 'mainmain', stageEntryPoint: 'foo' },\n      { shaderModuleEntryPoint: 'main_t12V3', stageEntryPoint: 'main_t12V3' },\n      { shaderModuleEntryPoint: 'main_t12V3', stageEntryPoint: 'main_t12V5' },\n      { shaderModuleEntryPoint: 'main_t12V3', stageEntryPoint: '_main_t12V3' },\n      { shaderModuleEntryPoint: 'séquençage', stageEntryPoint: 'séquençage' },\n      { shaderModuleEntryPoint: 'séquençage', stageEntryPoint: 'sequencage' },\n    ])\n  )\n  .fn(async t => {\n    const { isAsync, shaderModuleEntryPoint, stageEntryPoint } = t.params;\n    const descriptor = {\n      layout: 'auto' as const,\n      compute: {\n        module: t.getShaderModule('compute', shaderModuleEntryPoint),\n        entryPoint: stageEntryPoint,\n      },\n    };\n    const _success = shaderModuleEntryPoint === stageEntryPoint;\n    t.doCreateComputePipelineTest(isAsync, _success, descriptor);\n  });\n\ng.test('pipeline_layout,device_mismatch')\n  .desc(\n    'Tests createComputePipeline(Async) cannot be called with a pipeline layout created from another device'\n  )\n  .paramsSubcasesOnly(u => u.combine('isAsync', [true, false]).combine('mismatched', [true, false]))\n  .beforeAllSubcases(t => {\n    t.selectMismatchedDeviceOrSkipTestCase(undefined);\n  })\n  .fn(async t => {\n    const { isAsync, mismatched } = t.params;\n    const device = mismatched ? t.mismatchedDevice : t.device;\n\n    const layout = device.createPipelineLayout({ bindGroupLayouts: [] });\n\n    const descriptor = {\n      layout,\n      compute: {\n        module: t.getShaderModule('compute', 'main'),\n        entryPoint: 'main',\n      },\n    };\n\n    t.doCreateComputePipelineTest(isAsync, !mismatched, descriptor);\n  });\n\ng.test('shader_module,device_mismatch')\n  .desc(\n    'Tests createComputePipeline(Async) cannot be called with a shader module created from another device'\n  )\n  .paramsSubcasesOnly(u => u.combine('isAsync', [true, false]).combine('mismatched', [true, false]))\n  .beforeAllSubcases(t => {\n    t.selectMismatchedDeviceOrSkipTestCase(undefined);\n  })\n  .fn(async t => {\n    const { isAsync, mismatched } = t.params;\n\n    const device = mismatched ? t.mismatchedDevice : t.device;\n\n    const module = device.createShaderModule({\n      code: '@stage(compute) @workgroup_size(1) fn main() {}',\n    });\n\n    const descriptor = {\n      layout: 'auto' as const,\n      compute: {\n        module,\n        entryPoint: 'main',\n      },\n    };\n\n    t.doCreateComputePipelineTest(isAsync, !mismatched, descriptor);\n  });\n"],"file":"createComputePipeline.spec.js"}