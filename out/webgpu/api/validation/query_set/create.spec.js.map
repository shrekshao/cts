{"version":3,"sources":["../../../../../src/webgpu/api/validation/query_set/create.spec.ts"],"names":["description","makeTestGroup","kQueryTypes","kMaxQueryCount","ValidationTest","g","test","desc","params","u","combine","beginSubcases","fn","t","type","count","selectDeviceForQueryTypeOrSkipTestCase","pipelineStatistics","expectValidationError","device","createQuerySet","undefined","shouldError","length","paramsSubcasesOnly","Array","from","Set"],"mappings":"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","sourcesContent":["export const description = `\nTests for validation in createQuerySet.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { kQueryTypes, kMaxQueryCount } from '../../../capability_info.js';\nimport { ValidationTest } from '../validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('count')\n  .desc(\n    `\nTests that create query set with the count for all query types:\n- count {<, =, >} kMaxQueryCount\n- x= {occlusion, pipeline-statistics, timestamp} query\n  `\n  )\n  .params(u =>\n    u\n      .combine('type', kQueryTypes)\n      .beginSubcases()\n      .combine('count', [0, kMaxQueryCount, kMaxQueryCount + 1])\n  )\n  .fn(async t => {\n    const { type, count } = t.params;\n\n    await t.selectDeviceForQueryTypeOrSkipTestCase(type);\n\n    const pipelineStatistics =\n      type === 'pipeline-statistics' ? (['clipper-invocations'] as const) : ([] as const);\n\n    t.expectValidationError(() => {\n      t.device.createQuerySet({ type, count, pipelineStatistics });\n    }, count > kMaxQueryCount);\n  });\n\ng.test('pipelineStatistics,all_types')\n  .desc(\n    `\nTests that create query set with the GPUPipelineStatisticName for all query types:\n- pipelineStatistics is undefined or empty\n- pipelineStatistics is a sequence of valid values\n- x= {occlusion, pipeline-statistics, timestamp} query\n  `\n  )\n  .params(u =>\n    u\n      .combine('type', kQueryTypes)\n      .beginSubcases()\n      .combine('pipelineStatistics', [undefined, [] as const, ['clipper-invocations'] as const])\n  )\n  .fn(async t => {\n    const { type, pipelineStatistics } = t.params;\n\n    await t.selectDeviceForQueryTypeOrSkipTestCase(type);\n\n    const count = 1;\n    const shouldError =\n      (type !== 'pipeline-statistics' &&\n        pipelineStatistics !== undefined &&\n        pipelineStatistics.length > 0) ||\n      (type === 'pipeline-statistics' &&\n        (pipelineStatistics === undefined || pipelineStatistics.length === 0));\n\n    t.expectValidationError(() => {\n      t.device.createQuerySet({ type, count, pipelineStatistics });\n    }, shouldError);\n  });\n\ng.test('pipelineStatistics,duplicates_and_all')\n  .desc(\n    `\nTests that create query set with the duplicate values and all values of GPUPipelineStatisticName for pipeline-statistics query.\n  `\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('pipelineStatistics', [\n        ['clipper-invocations', 'clipper-invocations'] as const,\n        [\n          'clipper-invocations',\n          'clipper-primitives-out',\n          'compute-shader-invocations',\n          'fragment-shader-invocations',\n          'vertex-shader-invocations',\n        ] as const,\n      ])\n  )\n  .fn(async t => {\n    const type = 'pipeline-statistics';\n\n    await t.selectDeviceForQueryTypeOrSkipTestCase(type);\n\n    const count = 1;\n    const pipelineStatistics = t.params.pipelineStatistics;\n\n    t.expectValidationError(() => {\n      t.device.createQuerySet({ type, count, pipelineStatistics });\n    }, pipelineStatistics.length !== Array.from(new Set(pipelineStatistics)).length);\n  });\n"],"file":"create.spec.js"}