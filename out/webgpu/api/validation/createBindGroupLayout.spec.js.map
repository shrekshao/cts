{"version":3,"sources":["../../../../src/webgpu/api/validation/createBindGroupLayout.spec.ts"],"names":["description","kUnitCaseParamsBuilder","makeTestGroup","kShaderStages","kShaderStageCombinations","kTextureViewDimensions","allBindingEntries","bindingTypeInfo","bufferBindingTypeInfo","kBufferBindingTypes","ValidationTest","clone","descriptor","JSON","parse","stringify","g","test","desc","paramsSubcasesOnly","bindings","_valid","fn","t","params","entries","binding","push","visibility","GPUShaderStage","COMPUTE","buffer","type","expectValidationError","device","createBindGroupLayout","u","combine","beginSubcases","entry","info","success","validStages","undefined","viewDimension","texture","multisampled","extraDynamicBuffers","staticBuffers","dynamicBufferCount","perPipelineLimitClass","maxDynamic","i","hasDynamicOffset","pickExtraBindingTypesForPerStage","extraTypeSame","extra","extraInfo","perStageLimitClass","class","sampler","kMaxResourcesCases","filter","p","maxedEntry","maxedVisibility","expand","extraEntry","extraVisibility","maxedTypeInfo","maxedCount","max","extraTypeInfo","maxResourceBindings","goodDescriptor","newDescriptor","newBindingCountsTowardSamePerStageLimit","goodLayout","createPipelineLayout","bindGroupLayouts","extraLayout"],"mappings":"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","sourcesContent":["export const description = `\ncreateBindGroupLayout validation tests.\n\nTODO: make sure tests are complete.\n`;\n\nimport { kUnitCaseParamsBuilder } from '../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport {\n  kShaderStages,\n  kShaderStageCombinations,\n  kTextureViewDimensions,\n  allBindingEntries,\n  bindingTypeInfo,\n  bufferBindingTypeInfo,\n  kBufferBindingTypes,\n  BGLEntry,\n} from '../../capability_info.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nfunction clone<T extends GPUBindGroupLayoutDescriptor>(descriptor: T): T {\n  return JSON.parse(JSON.stringify(descriptor));\n}\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('duplicate_bindings')\n  .desc('Test that uniqueness of binding numbers across entries is enforced.')\n  .paramsSubcasesOnly([\n    { bindings: [0, 1], _valid: true },\n    { bindings: [0, 0], _valid: false },\n  ])\n  .fn(async t => {\n    const { bindings, _valid } = t.params;\n    const entries: Array<GPUBindGroupLayoutEntry> = [];\n\n    for (const binding of bindings) {\n      entries.push({\n        binding,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: { type: 'storage' as const },\n      });\n    }\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout({\n        entries,\n      });\n    }, !_valid);\n  });\n\ng.test('visibility')\n  .desc(\n    `\n    Test that only the appropriate combinations of visibilities are allowed for each resource type.\n    - Test each possible combination of shader stage visibilities.\n    - Test each type of bind group resource.`\n  )\n  .params(u =>\n    u\n      .combine('visibility', kShaderStageCombinations)\n      .beginSubcases()\n      .combine('entry', allBindingEntries(false))\n  )\n  .fn(async t => {\n    const { visibility, entry } = t.params;\n    const info = bindingTypeInfo(entry);\n\n    const success = (visibility & ~info.validStages) === 0;\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout({\n        entries: [{ binding: 0, visibility, ...entry }],\n      });\n    }, !success);\n  });\n\ng.test('multisampled_validation')\n  .desc('Test that multisampling is only allowed with \"2d\" view dimensions.')\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('viewDimension', [undefined, ...kTextureViewDimensions])\n  )\n  .fn(async t => {\n    const { viewDimension } = t.params;\n\n    const success = viewDimension === '2d' || viewDimension === undefined;\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: GPUShaderStage.COMPUTE,\n            texture: { multisampled: true, viewDimension },\n          },\n        ],\n      });\n    }, !success);\n  });\n\ng.test('max_dynamic_buffers')\n  .desc(\n    `\n    Test that limits on the maximum number of dynamic buffers are enforced.\n    - Test creation of a bind group layout using the maximum number of dynamic buffers works.\n    - Test creation of a bind group layout using the maximum number of dynamic buffers + 1 fails.\n    - TODO(#230): Update to enforce per-stage and per-pipeline-layout limits on BGLs as well.`\n  )\n  .params(u =>\n    u\n      .combine('type', kBufferBindingTypes)\n      .beginSubcases()\n      .combine('extraDynamicBuffers', [0, 1])\n      .combine('staticBuffers', [0, 1])\n  )\n  .fn(async t => {\n    const { type, extraDynamicBuffers, staticBuffers } = t.params;\n    const info = bufferBindingTypeInfo({ type });\n\n    const dynamicBufferCount = info.perPipelineLimitClass.maxDynamic + extraDynamicBuffers;\n\n    const entries = [];\n    for (let i = 0; i < dynamicBufferCount; i++) {\n      entries.push({\n        binding: i,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: { type, hasDynamicOffset: true },\n      });\n    }\n\n    for (let i = dynamicBufferCount; i < dynamicBufferCount + staticBuffers; i++) {\n      entries.push({\n        binding: i,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: { type, hasDynamicOffset: false },\n      });\n    }\n\n    const descriptor = {\n      entries,\n    };\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout(descriptor);\n    }, extraDynamicBuffers > 0);\n  });\n\n/**\n * One bind group layout will be filled with kPerStageBindingLimit[...] of the type |type|.\n * For each item in the array returned here, a case will be generated which tests a pipeline\n * layout with one extra bind group layout with one extra binding. That extra binding will have:\n *\n *   - If extraTypeSame, any of the binding types which counts toward the same limit as |type|.\n *     (i.e. 'storage-buffer' <-> 'readonly-storage-buffer').\n *   - Otherwise, an arbitrary other type.\n */\nfunction* pickExtraBindingTypesForPerStage(entry: BGLEntry, extraTypeSame: boolean) {\n  if (extraTypeSame) {\n    const info = bindingTypeInfo(entry);\n    for (const extra of allBindingEntries(false)) {\n      const extraInfo = bindingTypeInfo(extra);\n      if (info.perStageLimitClass.class === extraInfo.perStageLimitClass.class) {\n        yield extra;\n      }\n    }\n  } else {\n    yield entry.sampler ? { texture: {} } : { sampler: {} };\n  }\n}\n\nconst kMaxResourcesCases = kUnitCaseParamsBuilder\n  .combine('maxedEntry', allBindingEntries(false))\n  .beginSubcases()\n  .combine('maxedVisibility', kShaderStages)\n  .filter(p => (bindingTypeInfo(p.maxedEntry).validStages & p.maxedVisibility) !== 0)\n  .expand('extraEntry', p => [\n    ...pickExtraBindingTypesForPerStage(p.maxedEntry, true),\n    ...pickExtraBindingTypesForPerStage(p.maxedEntry, false),\n  ])\n  .combine('extraVisibility', kShaderStages)\n  .filter(p => (bindingTypeInfo(p.extraEntry).validStages & p.extraVisibility) !== 0);\n\n// Should never fail unless kMaxBindingsPerBindGroup is exceeded, because the validation for\n// resources-of-type-per-stage is in pipeline layout creation.\ng.test('max_resources_per_stage,in_bind_group_layout')\n  .desc(\n    `\n    Test that the maximum number of bindings of a given type per-stage cannot be exceeded in a\n    single bind group layout.\n    - Test each binding type.\n    - Test that creation of a bind group layout using the maximum number of bindings works.\n    - Test that creation of a bind group layout using the maximum number of bindings + 1 fails.\n    - TODO(#230): Update to enforce per-stage and per-pipeline-layout limits on BGLs as well.`\n  )\n  .params(kMaxResourcesCases)\n  .fn(async t => {\n    const { maxedEntry, extraEntry, maxedVisibility, extraVisibility } = t.params;\n    const maxedTypeInfo = bindingTypeInfo(maxedEntry);\n    const maxedCount = maxedTypeInfo.perStageLimitClass.max;\n    const extraTypeInfo = bindingTypeInfo(extraEntry);\n\n    const maxResourceBindings: GPUBindGroupLayoutEntry[] = [];\n    for (let i = 0; i < maxedCount; i++) {\n      maxResourceBindings.push({\n        binding: i,\n        visibility: maxedVisibility,\n        ...maxedEntry,\n      });\n    }\n\n    const goodDescriptor = { entries: maxResourceBindings };\n\n    // Control\n    t.device.createBindGroupLayout(goodDescriptor);\n\n    // Add an entry counting towards the same limit. It should produce a validation error.\n    const newDescriptor = clone(goodDescriptor);\n    newDescriptor.entries.push({\n      binding: maxedCount,\n      visibility: extraVisibility,\n      ...extraEntry,\n    });\n\n    const newBindingCountsTowardSamePerStageLimit =\n      (maxedVisibility & extraVisibility) !== 0 &&\n      maxedTypeInfo.perStageLimitClass.class === extraTypeInfo.perStageLimitClass.class;\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout(newDescriptor);\n    }, newBindingCountsTowardSamePerStageLimit);\n  });\n\n// One pipeline layout can have a maximum number of each type of binding *per stage* (which is\n// different for each type). Test that the max works, then add one more binding of same-or-different\n// type and same-or-different visibility.\ng.test('max_resources_per_stage,in_pipeline_layout')\n  .desc(\n    `\n    Test that the maximum number of bindings of a given type per-stage cannot be exceeded across\n    multiple bind group layouts when creating a pipeline layout.\n    - Test each binding type.\n    - Test that creation of a pipeline using the maximum number of bindings works.\n    - Test that creation of a pipeline using the maximum number of bindings + 1 fails.\n  `\n  )\n  .params(kMaxResourcesCases)\n  .fn(async t => {\n    const { maxedEntry, extraEntry, maxedVisibility, extraVisibility } = t.params;\n    const maxedTypeInfo = bindingTypeInfo(maxedEntry);\n    const maxedCount = maxedTypeInfo.perStageLimitClass.max;\n    const extraTypeInfo = bindingTypeInfo(extraEntry);\n\n    const maxResourceBindings: GPUBindGroupLayoutEntry[] = [];\n    for (let i = 0; i < maxedCount; i++) {\n      maxResourceBindings.push({\n        binding: i,\n        visibility: maxedVisibility,\n        ...maxedEntry,\n      });\n    }\n\n    const goodLayout = t.device.createBindGroupLayout({ entries: maxResourceBindings });\n\n    // Control\n    t.device.createPipelineLayout({ bindGroupLayouts: [goodLayout] });\n\n    const extraLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: extraVisibility,\n          ...extraEntry,\n        },\n      ],\n    });\n\n    // Some binding types use the same limit, e.g. 'storage-buffer' and 'readonly-storage-buffer'.\n    const newBindingCountsTowardSamePerStageLimit =\n      (maxedVisibility & extraVisibility) !== 0 &&\n      maxedTypeInfo.perStageLimitClass.class === extraTypeInfo.perStageLimitClass.class;\n\n    t.expectValidationError(() => {\n      t.device.createPipelineLayout({ bindGroupLayouts: [goodLayout, extraLayout] });\n    }, newBindingCountsTowardSamePerStageLimit);\n  });\n"],"file":"createBindGroupLayout.spec.js"}