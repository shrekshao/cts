{"version":3,"file":"createBindGroupLayout.spec.js","names":["description","kUnitCaseParamsBuilder","makeTestGroup","kAllTextureFormats","kShaderStages","kShaderStageCombinations","kStorageTextureAccessValues","kTextureFormatInfo","kTextureSampleTypes","kTextureViewDimensions","allBindingEntries","bindingTypeInfo","bufferBindingTypeInfo","kBufferBindingTypes","ValidationTest","clone","descriptor","JSON","parse","stringify","g","test","desc","paramsSubcasesOnly","bindings","_valid","fn","t","params","entries","binding","push","visibility","GPUShaderStage","COMPUTE","buffer","type","expectValidationError","device","createBindGroupLayout","kMaxBindingsPerBindGroup","u","combine","success","beginSubcases","entry","info","validStages","shaderStage","VERTEX","undefined","access","storageTexture","format","viewDimension","sampleType","texture","multisampled","extraDynamicBuffers","staticBuffers","dynamicBufferCount","perPipelineLimitClass","maxDynamic","i","hasDynamicOffset","pickExtraBindingTypesForPerStage","extraTypeSame","extra","extraInfo","perStageLimitClass","class","sampler","kMaxResourcesCases","filter","p","maxedEntry","maxedVisibility","expand","extraEntry","extraVisibility","maxedTypeInfo","maxedCount","max","extraTypeInfo","maxResourceBindings","goodDescriptor","newDescriptor","newBindingCountsTowardSamePerStageLimit","goodLayout","createPipelineLayout","bindGroupLayouts","extraLayout","beforeAllSubcases","selectDeviceForTextureFormatOrSkipTestCase","storage"],"sources":["../../../../src/webgpu/api/validation/createBindGroupLayout.spec.ts"],"sourcesContent":["export const description = `\ncreateBindGroupLayout validation tests.\n\nTODO: make sure tests are complete.\n`;\n\nimport { kUnitCaseParamsBuilder } from '../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport {\n  kAllTextureFormats,\n  kShaderStages,\n  kShaderStageCombinations,\n  kStorageTextureAccessValues,\n  kTextureFormatInfo,\n  kTextureSampleTypes,\n  kTextureViewDimensions,\n  allBindingEntries,\n  bindingTypeInfo,\n  bufferBindingTypeInfo,\n  kBufferBindingTypes,\n  BGLEntry,\n} from '../../capability_info.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nfunction clone<T extends GPUBindGroupLayoutDescriptor>(descriptor: T): T {\n  return JSON.parse(JSON.stringify(descriptor));\n}\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('duplicate_bindings')\n  .desc('Test that uniqueness of binding numbers across entries is enforced.')\n  .paramsSubcasesOnly([\n    { bindings: [0, 1], _valid: true },\n    { bindings: [0, 0], _valid: false },\n  ])\n  .fn(t => {\n    const { bindings, _valid } = t.params;\n    const entries: Array<GPUBindGroupLayoutEntry> = [];\n\n    for (const binding of bindings) {\n      entries.push({\n        binding,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: { type: 'storage' as const },\n      });\n    }\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout({\n        entries,\n      });\n    }, !_valid);\n  });\n\n// MAINTENANCE_TODO: Move this into kLimits with the proper name after the spec PR lands.\n// https://github.com/gpuweb/gpuweb/pull/3318\nconst kMaxBindingsPerBindGroup = 640;\n\ng.test('maximum_binding_limit')\n  .desc(\n    `\n  Test that a validation error is generated if the binding number exceeds the maximum binding limit.\n\n  TODO: Need to also test with higher limits enabled on the device, once we have a way to do that.\n  `\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('binding', [1, 4, 8, 256, kMaxBindingsPerBindGroup - 1, kMaxBindingsPerBindGroup])\n  )\n  .fn(t => {\n    const { binding } = t.params;\n    const entries: Array<GPUBindGroupLayoutEntry> = [];\n\n    entries.push({\n      binding,\n      visibility: GPUShaderStage.COMPUTE,\n      buffer: { type: 'storage' as const },\n    });\n\n    const success = binding < kMaxBindingsPerBindGroup;\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout({\n        entries,\n      });\n    }, !success);\n  });\n\ng.test('visibility')\n  .desc(\n    `\n    Test that only the appropriate combinations of visibilities are allowed for each resource type.\n    - Test each possible combination of shader stage visibilities.\n    - Test each type of bind group resource.`\n  )\n  .params(u =>\n    u\n      .combine('visibility', kShaderStageCombinations)\n      .beginSubcases()\n      .combine('entry', allBindingEntries(false))\n  )\n  .fn(t => {\n    const { visibility, entry } = t.params;\n    const info = bindingTypeInfo(entry);\n\n    const success = (visibility & ~info.validStages) === 0;\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout({\n        entries: [{ binding: 0, visibility, ...entry }],\n      });\n    }, !success);\n  });\n\ng.test('visibility,VERTEX_shader_stage_buffer_type')\n  .desc(\n    `\n  Test that a validation error is generated if the buffer type is 'storage' when the\n  visibility of the entry includes VERTEX.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('shaderStage', kShaderStageCombinations)\n      .beginSubcases()\n      .combine('type', kBufferBindingTypes)\n  )\n  .fn(t => {\n    const { shaderStage, type } = t.params;\n\n    const success = !(type === 'storage' && shaderStage & GPUShaderStage.VERTEX);\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: shaderStage,\n            buffer: { type },\n          },\n        ],\n      });\n    }, !success);\n  });\n\ng.test('visibility,VERTEX_shader_stage_storage_texture_access')\n  .desc(\n    `\n  Test that a validation error is generated if the access value is 'write-only' when the\n  visibility of the entry includes VERTEX.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('shaderStage', kShaderStageCombinations)\n      .beginSubcases()\n      .combine('access', [undefined, ...kStorageTextureAccessValues])\n  )\n  .fn(t => {\n    const { shaderStage, access } = t.params;\n\n    const success = !(\n      (access ?? 'write-only') === 'write-only' && shaderStage & GPUShaderStage.VERTEX\n    );\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: shaderStage,\n            storageTexture: { access, format: 'rgba8unorm' },\n          },\n        ],\n      });\n    }, !success);\n  });\n\ng.test('multisampled_validation')\n  .desc(\n    `\n  Test that multisampling is only allowed if view dimensions is \"2d\" and the sampleType is not\n  \"float\".\n  `\n  )\n  .params(u =>\n    u //\n      .combine('viewDimension', [undefined, ...kTextureViewDimensions])\n      .beginSubcases()\n      .combine('sampleType', [undefined, ...kTextureSampleTypes])\n  )\n  .fn(t => {\n    const { viewDimension, sampleType } = t.params;\n\n    const success =\n      (viewDimension === '2d' || viewDimension === undefined) &&\n      (sampleType ?? 'float') !== 'float';\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: GPUShaderStage.COMPUTE,\n            texture: { multisampled: true, viewDimension, sampleType },\n          },\n        ],\n      });\n    }, !success);\n  });\n\ng.test('max_dynamic_buffers')\n  .desc(\n    `\n    Test that limits on the maximum number of dynamic buffers are enforced.\n    - Test creation of a bind group layout using the maximum number of dynamic buffers works.\n    - Test creation of a bind group layout using the maximum number of dynamic buffers + 1 fails.\n    - TODO(#230): Update to enforce per-stage and per-pipeline-layout limits on BGLs as well.`\n  )\n  .params(u =>\n    u\n      .combine('type', kBufferBindingTypes)\n      .beginSubcases()\n      .combine('extraDynamicBuffers', [0, 1])\n      .combine('staticBuffers', [0, 1])\n  )\n  .fn(t => {\n    const { type, extraDynamicBuffers, staticBuffers } = t.params;\n    const info = bufferBindingTypeInfo({ type });\n\n    const dynamicBufferCount = info.perPipelineLimitClass.maxDynamic + extraDynamicBuffers;\n\n    const entries = [];\n    for (let i = 0; i < dynamicBufferCount; i++) {\n      entries.push({\n        binding: i,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: { type, hasDynamicOffset: true },\n      });\n    }\n\n    for (let i = dynamicBufferCount; i < dynamicBufferCount + staticBuffers; i++) {\n      entries.push({\n        binding: i,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: { type, hasDynamicOffset: false },\n      });\n    }\n\n    const descriptor = {\n      entries,\n    };\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout(descriptor);\n    }, extraDynamicBuffers > 0);\n  });\n\n/**\n * One bind group layout will be filled with kPerStageBindingLimit[...] of the type |type|.\n * For each item in the array returned here, a case will be generated which tests a pipeline\n * layout with one extra bind group layout with one extra binding. That extra binding will have:\n *\n *   - If extraTypeSame, any of the binding types which counts toward the same limit as |type|.\n *     (i.e. 'storage-buffer' <-> 'readonly-storage-buffer').\n *   - Otherwise, an arbitrary other type.\n */\nfunction* pickExtraBindingTypesForPerStage(entry: BGLEntry, extraTypeSame: boolean) {\n  if (extraTypeSame) {\n    const info = bindingTypeInfo(entry);\n    for (const extra of allBindingEntries(false)) {\n      const extraInfo = bindingTypeInfo(extra);\n      if (info.perStageLimitClass.class === extraInfo.perStageLimitClass.class) {\n        yield extra;\n      }\n    }\n  } else {\n    yield entry.sampler ? { texture: {} } : { sampler: {} };\n  }\n}\n\nconst kMaxResourcesCases = kUnitCaseParamsBuilder\n  .combine('maxedEntry', allBindingEntries(false))\n  .beginSubcases()\n  .combine('maxedVisibility', kShaderStages)\n  .filter(p => (bindingTypeInfo(p.maxedEntry).validStages & p.maxedVisibility) !== 0)\n  .expand('extraEntry', p => [\n    ...pickExtraBindingTypesForPerStage(p.maxedEntry, true),\n    ...pickExtraBindingTypesForPerStage(p.maxedEntry, false),\n  ])\n  .combine('extraVisibility', kShaderStages)\n  .filter(p => (bindingTypeInfo(p.extraEntry).validStages & p.extraVisibility) !== 0);\n\n// Should never fail unless kMaxBindingsPerBindGroup is exceeded, because the validation for\n// resources-of-type-per-stage is in pipeline layout creation.\ng.test('max_resources_per_stage,in_bind_group_layout')\n  .desc(\n    `\n    Test that the maximum number of bindings of a given type per-stage cannot be exceeded in a\n    single bind group layout.\n    - Test each binding type.\n    - Test that creation of a bind group layout using the maximum number of bindings works.\n    - Test that creation of a bind group layout using the maximum number of bindings + 1 fails.\n    - TODO(#230): Update to enforce per-stage and per-pipeline-layout limits on BGLs as well.`\n  )\n  .params(kMaxResourcesCases)\n  .fn(t => {\n    const { maxedEntry, extraEntry, maxedVisibility, extraVisibility } = t.params;\n    const maxedTypeInfo = bindingTypeInfo(maxedEntry);\n    const maxedCount = maxedTypeInfo.perStageLimitClass.max;\n    const extraTypeInfo = bindingTypeInfo(extraEntry);\n\n    const maxResourceBindings: GPUBindGroupLayoutEntry[] = [];\n    for (let i = 0; i < maxedCount; i++) {\n      maxResourceBindings.push({\n        binding: i,\n        visibility: maxedVisibility,\n        ...maxedEntry,\n      });\n    }\n\n    const goodDescriptor = { entries: maxResourceBindings };\n\n    // Control\n    t.device.createBindGroupLayout(goodDescriptor);\n\n    // Add an entry counting towards the same limit. It should produce a validation error.\n    const newDescriptor = clone(goodDescriptor);\n    newDescriptor.entries.push({\n      binding: maxedCount,\n      visibility: extraVisibility,\n      ...extraEntry,\n    });\n\n    const newBindingCountsTowardSamePerStageLimit =\n      (maxedVisibility & extraVisibility) !== 0 &&\n      maxedTypeInfo.perStageLimitClass.class === extraTypeInfo.perStageLimitClass.class;\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout(newDescriptor);\n    }, newBindingCountsTowardSamePerStageLimit);\n  });\n\n// One pipeline layout can have a maximum number of each type of binding *per stage* (which is\n// different for each type). Test that the max works, then add one more binding of same-or-different\n// type and same-or-different visibility.\ng.test('max_resources_per_stage,in_pipeline_layout')\n  .desc(\n    `\n    Test that the maximum number of bindings of a given type per-stage cannot be exceeded across\n    multiple bind group layouts when creating a pipeline layout.\n    - Test each binding type.\n    - Test that creation of a pipeline using the maximum number of bindings works.\n    - Test that creation of a pipeline using the maximum number of bindings + 1 fails.\n  `\n  )\n  .params(kMaxResourcesCases)\n  .fn(t => {\n    const { maxedEntry, extraEntry, maxedVisibility, extraVisibility } = t.params;\n    const maxedTypeInfo = bindingTypeInfo(maxedEntry);\n    const maxedCount = maxedTypeInfo.perStageLimitClass.max;\n    const extraTypeInfo = bindingTypeInfo(extraEntry);\n\n    const maxResourceBindings: GPUBindGroupLayoutEntry[] = [];\n    for (let i = 0; i < maxedCount; i++) {\n      maxResourceBindings.push({\n        binding: i,\n        visibility: maxedVisibility,\n        ...maxedEntry,\n      });\n    }\n\n    const goodLayout = t.device.createBindGroupLayout({ entries: maxResourceBindings });\n\n    // Control\n    t.device.createPipelineLayout({ bindGroupLayouts: [goodLayout] });\n\n    const extraLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: extraVisibility,\n          ...extraEntry,\n        },\n      ],\n    });\n\n    // Some binding types use the same limit, e.g. 'storage-buffer' and 'readonly-storage-buffer'.\n    const newBindingCountsTowardSamePerStageLimit =\n      (maxedVisibility & extraVisibility) !== 0 &&\n      maxedTypeInfo.perStageLimitClass.class === extraTypeInfo.perStageLimitClass.class;\n\n    t.expectValidationError(() => {\n      t.device.createPipelineLayout({ bindGroupLayouts: [goodLayout, extraLayout] });\n    }, newBindingCountsTowardSamePerStageLimit);\n  });\n\ng.test('storage_texture,layout_dimension')\n  .desc(\n    `\n  Test that viewDimension is not cube or cube-array if storageTextureLayout is not undefined.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('viewDimension', [undefined, ...kTextureViewDimensions])\n  )\n  .fn(t => {\n    const { viewDimension } = t.params;\n\n    const success = viewDimension !== 'cube' && viewDimension !== `cube-array`;\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: GPUShaderStage.COMPUTE,\n            storageTexture: { format: 'rgba8unorm', viewDimension },\n          },\n        ],\n      });\n    }, !success);\n  });\n\ng.test('storage_texture,formats')\n  .desc(\n    `\n  Test that a validation error is generated if the format doesn't support the storage usage.\n  `\n  )\n  .params(u => u.combine('format', kAllTextureFormats))\n  .beforeAllSubcases(t => {\n    t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n  })\n  .fn(t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: GPUShaderStage.COMPUTE,\n            storageTexture: { format },\n          },\n        ],\n      });\n    }, !info.storage);\n  });\n"],"mappings":"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"}