{"version":3,"sources":["../../../../src/webgpu/api/validation/createBindGroupLayout.spec.ts"],"names":["description","kUnitCaseParamsBuilder","makeTestGroup","kAllTextureFormats","kShaderStages","kShaderStageCombinations","kStorageTextureAccessValues","kTextureFormatInfo","kTextureSampleTypes","kTextureViewDimensions","allBindingEntries","bindingTypeInfo","bufferBindingTypeInfo","kBufferBindingTypes","ValidationTest","clone","descriptor","JSON","parse","stringify","g","test","desc","paramsSubcasesOnly","bindings","_valid","fn","t","params","entries","binding","push","visibility","GPUShaderStage","COMPUTE","buffer","type","expectValidationError","device","createBindGroupLayout","kMaxBindingsPerBindGroup","u","combine","success","beginSubcases","entry","info","validStages","shaderStage","VERTEX","undefined","access","storageTexture","format","viewDimension","sampleType","texture","multisampled","extraDynamicBuffers","staticBuffers","dynamicBufferCount","perPipelineLimitClass","maxDynamic","i","hasDynamicOffset","pickExtraBindingTypesForPerStage","extraTypeSame","extra","extraInfo","perStageLimitClass","class","sampler","kMaxResourcesCases","filter","p","maxedEntry","maxedVisibility","expand","extraEntry","extraVisibility","maxedTypeInfo","maxedCount","max","extraTypeInfo","maxResourceBindings","goodDescriptor","newDescriptor","newBindingCountsTowardSamePerStageLimit","goodLayout","createPipelineLayout","bindGroupLayouts","extraLayout","beforeAllSubcases","selectDeviceForTextureFormatOrSkipTestCase","storage"],"mappings":"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","sourcesContent":["export const description = `\ncreateBindGroupLayout validation tests.\n\nTODO: make sure tests are complete.\n`;\n\nimport { kUnitCaseParamsBuilder } from '../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport {\n  kAllTextureFormats,\n  kShaderStages,\n  kShaderStageCombinations,\n  kStorageTextureAccessValues,\n  kTextureFormatInfo,\n  kTextureSampleTypes,\n  kTextureViewDimensions,\n  allBindingEntries,\n  bindingTypeInfo,\n  bufferBindingTypeInfo,\n  kBufferBindingTypes,\n  BGLEntry,\n} from '../../capability_info.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nfunction clone<T extends GPUBindGroupLayoutDescriptor>(descriptor: T): T {\n  return JSON.parse(JSON.stringify(descriptor));\n}\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('duplicate_bindings')\n  .desc('Test that uniqueness of binding numbers across entries is enforced.')\n  .paramsSubcasesOnly([\n    { bindings: [0, 1], _valid: true },\n    { bindings: [0, 0], _valid: false },\n  ])\n  .fn(async t => {\n    const { bindings, _valid } = t.params;\n    const entries: Array<GPUBindGroupLayoutEntry> = [];\n\n    for (const binding of bindings) {\n      entries.push({\n        binding,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: { type: 'storage' as const },\n      });\n    }\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout({\n        entries,\n      });\n    }, !_valid);\n  });\n\n// MAINTENANCE_TODO: Move this into kLimits with the proper name after the spec PR lands.\n// https://github.com/gpuweb/gpuweb/pull/3318\nconst kMaxBindingsPerBindGroup = 640;\n\ng.test('maximum_binding_limit')\n  .desc(\n    `\n  Test that a validation error is generated if the binding number exceeds the maximum binding limit.\n\n  TODO: Need to also test with higher limits enabled on the device, once we have a way to do that.\n  `\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('binding', [1, 4, 8, 256, kMaxBindingsPerBindGroup - 1, kMaxBindingsPerBindGroup])\n  )\n  .fn(async t => {\n    const { binding } = t.params;\n    const entries: Array<GPUBindGroupLayoutEntry> = [];\n\n    entries.push({\n      binding,\n      visibility: GPUShaderStage.COMPUTE,\n      buffer: { type: 'storage' as const },\n    });\n\n    const success = binding < kMaxBindingsPerBindGroup;\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout({\n        entries,\n      });\n    }, !success);\n  });\n\ng.test('visibility')\n  .desc(\n    `\n    Test that only the appropriate combinations of visibilities are allowed for each resource type.\n    - Test each possible combination of shader stage visibilities.\n    - Test each type of bind group resource.`\n  )\n  .params(u =>\n    u\n      .combine('visibility', kShaderStageCombinations)\n      .beginSubcases()\n      .combine('entry', allBindingEntries(false))\n  )\n  .fn(async t => {\n    const { visibility, entry } = t.params;\n    const info = bindingTypeInfo(entry);\n\n    const success = (visibility & ~info.validStages) === 0;\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout({\n        entries: [{ binding: 0, visibility, ...entry }],\n      });\n    }, !success);\n  });\n\ng.test('visibility,VERTEX_shader_stage_buffer_type')\n  .desc(\n    `\n  Test that a validation error is generated if the buffer type is 'storage' when the\n  visibility of the entry includes VERTEX.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('shaderStage', kShaderStageCombinations)\n      .beginSubcases()\n      .combine('type', kBufferBindingTypes)\n  )\n  .fn(async t => {\n    const { shaderStage, type } = t.params;\n\n    const success = !(type === 'storage' && shaderStage & GPUShaderStage.VERTEX);\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: shaderStage,\n            buffer: { type },\n          },\n        ],\n      });\n    }, !success);\n  });\n\ng.test('visibility,VERTEX_shader_stage_storage_texture_access')\n  .desc(\n    `\n  Test that a validation error is generated if the access value is 'write-only' when the\n  visibility of the entry includes VERTEX.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('shaderStage', kShaderStageCombinations)\n      .beginSubcases()\n      .combine('access', [undefined, ...kStorageTextureAccessValues])\n  )\n  .fn(async t => {\n    const { shaderStage, access } = t.params;\n\n    const success = !(\n      (access ?? 'write-only') === 'write-only' && shaderStage & GPUShaderStage.VERTEX\n    );\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: shaderStage,\n            storageTexture: { access, format: 'rgba8unorm' },\n          },\n        ],\n      });\n    }, !success);\n  });\n\ng.test('multisampled_validation')\n  .desc(\n    `\n  Test that multisampling is only allowed if view dimensions is \"2d\" and the sampleType is not\n  \"float\".\n  `\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('viewDimension', [undefined, ...kTextureViewDimensions])\n      .combine('sampleType', kTextureSampleTypes)\n  )\n  .fn(async t => {\n    const { viewDimension, sampleType } = t.params;\n\n    const success =\n      (viewDimension === '2d' || viewDimension === undefined) && sampleType !== 'float';\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: GPUShaderStage.COMPUTE,\n            texture: { multisampled: true, viewDimension, sampleType },\n          },\n        ],\n      });\n    }, !success);\n  });\n\ng.test('max_dynamic_buffers')\n  .desc(\n    `\n    Test that limits on the maximum number of dynamic buffers are enforced.\n    - Test creation of a bind group layout using the maximum number of dynamic buffers works.\n    - Test creation of a bind group layout using the maximum number of dynamic buffers + 1 fails.\n    - TODO(#230): Update to enforce per-stage and per-pipeline-layout limits on BGLs as well.`\n  )\n  .params(u =>\n    u\n      .combine('type', kBufferBindingTypes)\n      .beginSubcases()\n      .combine('extraDynamicBuffers', [0, 1])\n      .combine('staticBuffers', [0, 1])\n  )\n  .fn(async t => {\n    const { type, extraDynamicBuffers, staticBuffers } = t.params;\n    const info = bufferBindingTypeInfo({ type });\n\n    const dynamicBufferCount = info.perPipelineLimitClass.maxDynamic + extraDynamicBuffers;\n\n    const entries = [];\n    for (let i = 0; i < dynamicBufferCount; i++) {\n      entries.push({\n        binding: i,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: { type, hasDynamicOffset: true },\n      });\n    }\n\n    for (let i = dynamicBufferCount; i < dynamicBufferCount + staticBuffers; i++) {\n      entries.push({\n        binding: i,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: { type, hasDynamicOffset: false },\n      });\n    }\n\n    const descriptor = {\n      entries,\n    };\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout(descriptor);\n    }, extraDynamicBuffers > 0);\n  });\n\n/**\n * One bind group layout will be filled with kPerStageBindingLimit[...] of the type |type|.\n * For each item in the array returned here, a case will be generated which tests a pipeline\n * layout with one extra bind group layout with one extra binding. That extra binding will have:\n *\n *   - If extraTypeSame, any of the binding types which counts toward the same limit as |type|.\n *     (i.e. 'storage-buffer' <-> 'readonly-storage-buffer').\n *   - Otherwise, an arbitrary other type.\n */\nfunction* pickExtraBindingTypesForPerStage(entry: BGLEntry, extraTypeSame: boolean) {\n  if (extraTypeSame) {\n    const info = bindingTypeInfo(entry);\n    for (const extra of allBindingEntries(false)) {\n      const extraInfo = bindingTypeInfo(extra);\n      if (info.perStageLimitClass.class === extraInfo.perStageLimitClass.class) {\n        yield extra;\n      }\n    }\n  } else {\n    yield entry.sampler ? { texture: {} } : { sampler: {} };\n  }\n}\n\nconst kMaxResourcesCases = kUnitCaseParamsBuilder\n  .combine('maxedEntry', allBindingEntries(false))\n  .beginSubcases()\n  .combine('maxedVisibility', kShaderStages)\n  .filter(p => (bindingTypeInfo(p.maxedEntry).validStages & p.maxedVisibility) !== 0)\n  .expand('extraEntry', p => [\n    ...pickExtraBindingTypesForPerStage(p.maxedEntry, true),\n    ...pickExtraBindingTypesForPerStage(p.maxedEntry, false),\n  ])\n  .combine('extraVisibility', kShaderStages)\n  .filter(p => (bindingTypeInfo(p.extraEntry).validStages & p.extraVisibility) !== 0);\n\n// Should never fail unless kMaxBindingsPerBindGroup is exceeded, because the validation for\n// resources-of-type-per-stage is in pipeline layout creation.\ng.test('max_resources_per_stage,in_bind_group_layout')\n  .desc(\n    `\n    Test that the maximum number of bindings of a given type per-stage cannot be exceeded in a\n    single bind group layout.\n    - Test each binding type.\n    - Test that creation of a bind group layout using the maximum number of bindings works.\n    - Test that creation of a bind group layout using the maximum number of bindings + 1 fails.\n    - TODO(#230): Update to enforce per-stage and per-pipeline-layout limits on BGLs as well.`\n  )\n  .params(kMaxResourcesCases)\n  .fn(async t => {\n    const { maxedEntry, extraEntry, maxedVisibility, extraVisibility } = t.params;\n    const maxedTypeInfo = bindingTypeInfo(maxedEntry);\n    const maxedCount = maxedTypeInfo.perStageLimitClass.max;\n    const extraTypeInfo = bindingTypeInfo(extraEntry);\n\n    const maxResourceBindings: GPUBindGroupLayoutEntry[] = [];\n    for (let i = 0; i < maxedCount; i++) {\n      maxResourceBindings.push({\n        binding: i,\n        visibility: maxedVisibility,\n        ...maxedEntry,\n      });\n    }\n\n    const goodDescriptor = { entries: maxResourceBindings };\n\n    // Control\n    t.device.createBindGroupLayout(goodDescriptor);\n\n    // Add an entry counting towards the same limit. It should produce a validation error.\n    const newDescriptor = clone(goodDescriptor);\n    newDescriptor.entries.push({\n      binding: maxedCount,\n      visibility: extraVisibility,\n      ...extraEntry,\n    });\n\n    const newBindingCountsTowardSamePerStageLimit =\n      (maxedVisibility & extraVisibility) !== 0 &&\n      maxedTypeInfo.perStageLimitClass.class === extraTypeInfo.perStageLimitClass.class;\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout(newDescriptor);\n    }, newBindingCountsTowardSamePerStageLimit);\n  });\n\n// One pipeline layout can have a maximum number of each type of binding *per stage* (which is\n// different for each type). Test that the max works, then add one more binding of same-or-different\n// type and same-or-different visibility.\ng.test('max_resources_per_stage,in_pipeline_layout')\n  .desc(\n    `\n    Test that the maximum number of bindings of a given type per-stage cannot be exceeded across\n    multiple bind group layouts when creating a pipeline layout.\n    - Test each binding type.\n    - Test that creation of a pipeline using the maximum number of bindings works.\n    - Test that creation of a pipeline using the maximum number of bindings + 1 fails.\n  `\n  )\n  .params(kMaxResourcesCases)\n  .fn(async t => {\n    const { maxedEntry, extraEntry, maxedVisibility, extraVisibility } = t.params;\n    const maxedTypeInfo = bindingTypeInfo(maxedEntry);\n    const maxedCount = maxedTypeInfo.perStageLimitClass.max;\n    const extraTypeInfo = bindingTypeInfo(extraEntry);\n\n    const maxResourceBindings: GPUBindGroupLayoutEntry[] = [];\n    for (let i = 0; i < maxedCount; i++) {\n      maxResourceBindings.push({\n        binding: i,\n        visibility: maxedVisibility,\n        ...maxedEntry,\n      });\n    }\n\n    const goodLayout = t.device.createBindGroupLayout({ entries: maxResourceBindings });\n\n    // Control\n    t.device.createPipelineLayout({ bindGroupLayouts: [goodLayout] });\n\n    const extraLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: extraVisibility,\n          ...extraEntry,\n        },\n      ],\n    });\n\n    // Some binding types use the same limit, e.g. 'storage-buffer' and 'readonly-storage-buffer'.\n    const newBindingCountsTowardSamePerStageLimit =\n      (maxedVisibility & extraVisibility) !== 0 &&\n      maxedTypeInfo.perStageLimitClass.class === extraTypeInfo.perStageLimitClass.class;\n\n    t.expectValidationError(() => {\n      t.device.createPipelineLayout({ bindGroupLayouts: [goodLayout, extraLayout] });\n    }, newBindingCountsTowardSamePerStageLimit);\n  });\n\ng.test('storage_texture,layout_dimension')\n  .desc(\n    `\n  Test that viewDimension is not cube or cube-array if storageTextureLayout is not undefined.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('viewDimension', [undefined, ...kTextureViewDimensions])\n  )\n  .fn(async t => {\n    const { viewDimension } = t.params;\n\n    const success = viewDimension !== 'cube' && viewDimension !== `cube-array`;\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: GPUShaderStage.COMPUTE,\n            storageTexture: { format: 'rgba8unorm', viewDimension },\n          },\n        ],\n      });\n    }, !success);\n  });\n\ng.test('storage_texture,formats')\n  .desc(\n    `\n  Test that a validation error is generated if the format doesn't support the storage usage.\n\n  TODO: Test \"bgra8unorm\" with the \"bgra8unorm-storage\" feature.\n  `\n  )\n  .params(u => u.combine('format', kAllTextureFormats))\n  .beforeAllSubcases(t => {\n    t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n  })\n  .fn(async t => {\n    const { format } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    t.expectValidationError(() => {\n      t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: GPUShaderStage.COMPUTE,\n            storageTexture: { format },\n          },\n        ],\n      });\n    }, !info.storage);\n  });\n"],"file":"createBindGroupLayout.spec.js"}