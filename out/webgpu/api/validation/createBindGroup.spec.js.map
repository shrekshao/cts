{"version":3,"sources":["../../../../src/webgpu/api/validation/createBindGroup.spec.ts"],"names":["description","makeTestGroup","assert","unreachable","allBindingEntries","bindingTypeInfo","bufferBindingEntries","bufferBindingTypeInfo","kAllTextureFormats","kBindableResources","kBufferBindingTypes","kBufferUsages","kLimitInfo","kTextureFormatInfo","kTextureUsages","kTextureViewDimensions","sampledAndStorageBindingEntries","texBindingTypeInfo","GPUConst","kResourceStates","getTextureDimensionFromView","ValidationTest","clone","descriptor","JSON","parse","stringify","g","kStorageTextureFormats","filter","f","storage","test","desc","paramsSubcasesOnly","u","combine","fn","t","layoutEntryCount","bindGroupEntryCount","params","layoutEntries","i","push","binding","visibility","GPUShaderStage","COMPUTE","buffer","type","bindGroupLayout","device","createBindGroupLayout","entries","resource","getStorageBuffer","shouldError","expectValidationError","createBindGroup","layout","layoutBinding","resourceType","entry","info","getBindingResource","resourceBindingIsCompatible","unless","usage","TextureUsage","STORAGE_BINDING","FRAGMENT","appliedUsage","RENDER_ATTACHMENT","size","width","height","depthOrArrayLayers","format","sampleCount","createTexture","createView","sampleType","texture","goodDescriptor","GPUTextureUsage","TEXTURE_BINDING","mismatchedTextureFormats","mismatchedTextureFormat","badDescriptor","beginSubcases","viewDimension","dimension","textureView","multisampled","isValid","offset","_success","undefined","createBuffer","GPUBufferUsage","STORAGE","expand","minBindingSize","storageBuffer","state","bgl","validStages","createBufferWithState","createTextureWithState","beforeAllSubcases","selectMismatchedDeviceOrSkipTestCase","mismatched","mismatchedDevice","ShaderStage","VERTEX","getUniformBuffer","sampler","storageTexture","access","combineWithParams","resource0Mismatched","resource1Mismatched","resource0","getDeviceMismatchedBindingResource","resource1","usage0","usage1","baseMipLevel","mipLevelCount","MIP_LEVEL_COUNT","storageTextureFormat","resourceFormat","BufferUsage","MAP_READ","MAP_WRITE","UNIFORM","minUniformBufferOffsetAlignment","default","minStorageBufferOffsetAlignment","maxUniformBufferBindingSize","maxStorageBufferBindingSize","bindingSize"],"mappings":"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","sourcesContent":["export const description = `\n  createBindGroup validation tests.\n\n  TODO: Ensure sure tests cover all createBindGroup validation rules.\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { assert, unreachable } from '../../../common/util/util.js';\nimport {\n  allBindingEntries,\n  bindingTypeInfo,\n  bufferBindingEntries,\n  bufferBindingTypeInfo,\n  kAllTextureFormats,\n  kBindableResources,\n  kBufferBindingTypes,\n  kBufferUsages,\n  kLimitInfo,\n  kTextureFormatInfo,\n  kTextureUsages,\n  kTextureViewDimensions,\n  sampledAndStorageBindingEntries,\n  texBindingTypeInfo,\n} from '../../capability_info.js';\nimport { GPUConst } from '../../constants.js';\nimport { kResourceStates } from '../../gpu_test.js';\nimport { getTextureDimensionFromView } from '../../util/texture/base.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nfunction clone<T extends GPUTextureDescriptor>(descriptor: T): T {\n  return JSON.parse(JSON.stringify(descriptor));\n}\n\nexport const g = makeTestGroup(ValidationTest);\n\nconst kStorageTextureFormats = kAllTextureFormats.filter(f => kTextureFormatInfo[f].storage);\n\ng.test('binding_count_mismatch')\n  .desc('Test that the number of entries must match the number of entries in the BindGroupLayout.')\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('layoutEntryCount', [1, 2, 3])\n      .combine('bindGroupEntryCount', [1, 2, 3])\n  )\n  .fn(async t => {\n    const { layoutEntryCount, bindGroupEntryCount } = t.params;\n\n    const layoutEntries: Array<GPUBindGroupLayoutEntry> = [];\n    for (let i = 0; i < layoutEntryCount; ++i) {\n      layoutEntries.push({\n        binding: i,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: { type: 'storage' },\n      });\n    }\n    const bindGroupLayout = t.device.createBindGroupLayout({ entries: layoutEntries });\n\n    const entries: Array<GPUBindGroupEntry> = [];\n    for (let i = 0; i < bindGroupEntryCount; ++i) {\n      entries.push({\n        binding: i,\n        resource: { buffer: t.getStorageBuffer() },\n      });\n    }\n\n    const shouldError = layoutEntryCount !== bindGroupEntryCount;\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        entries,\n        layout: bindGroupLayout,\n      });\n    }, shouldError);\n  });\n\ng.test('binding_must_be_present_in_layout')\n  .desc(\n    'Test that the binding slot for each entry matches a binding slot defined in the BindGroupLayout.'\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('layoutBinding', [0, 1, 2])\n      .combine('binding', [0, 1, 2])\n  )\n  .fn(async t => {\n    const { layoutBinding, binding } = t.params;\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [\n        { binding: layoutBinding, visibility: GPUShaderStage.COMPUTE, buffer: { type: 'storage' } },\n      ],\n    });\n\n    const descriptor = {\n      entries: [{ binding, resource: { buffer: t.getStorageBuffer() } }],\n      layout: bindGroupLayout,\n    };\n\n    const shouldError = layoutBinding !== binding;\n    t.expectValidationError(() => {\n      t.device.createBindGroup(descriptor);\n    }, shouldError);\n  });\n\ng.test('binding_must_contain_resource_defined_in_layout')\n  .desc(\n    'Test that only compatible resource types specified in the BindGroupLayout are allowed for each entry.'\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('resourceType', kBindableResources)\n      .combine('entry', allBindingEntries(false))\n  )\n  .fn(t => {\n    const { resourceType, entry } = t.params;\n    const info = bindingTypeInfo(entry);\n\n    const layout = t.device.createBindGroupLayout({\n      entries: [{ binding: 0, visibility: GPUShaderStage.COMPUTE, ...entry }],\n    });\n\n    const resource = t.getBindingResource(resourceType);\n\n    let resourceBindingIsCompatible;\n    switch (info.resource) {\n      // Either type of sampler may be bound to a filtering sampler binding.\n      case 'filtSamp':\n        resourceBindingIsCompatible = resourceType === 'filtSamp' || resourceType === 'nonFiltSamp';\n        break;\n      // But only non-filtering samplers can be used with non-filtering sampler bindings.\n      case 'nonFiltSamp':\n        resourceBindingIsCompatible = resourceType === 'nonFiltSamp';\n        break;\n      default:\n        resourceBindingIsCompatible = info.resource === resourceType;\n        break;\n    }\n    t.expectValidationError(() => {\n      t.device.createBindGroup({ layout, entries: [{ binding: 0, resource }] });\n    }, !resourceBindingIsCompatible);\n  });\n\ng.test('texture_binding_must_have_correct_usage')\n  .desc('Tests that texture bindings must have the correct usage.')\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('entry', sampledAndStorageBindingEntries(false))\n      .combine('usage', kTextureUsages)\n      .unless(({ entry, usage }) => {\n        const info = texBindingTypeInfo(entry);\n        // Can't create the texture for this (usage=STORAGE_BINDING and sampleCount=4), so skip.\n        return usage === GPUConst.TextureUsage.STORAGE_BINDING && info.resource === 'sampledTexMS';\n      })\n  )\n  .fn(async t => {\n    const { entry, usage } = t.params;\n    const info = texBindingTypeInfo(entry);\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [{ binding: 0, visibility: GPUShaderStage.FRAGMENT, ...entry }],\n    });\n\n    // The `RENDER_ATTACHMENT` usage must be specified if sampleCount > 1 according to WebGPU SPEC.\n    const appliedUsage =\n      info.resource === 'sampledTexMS' ? usage | GPUConst.TextureUsage.RENDER_ATTACHMENT : usage;\n\n    const descriptor = {\n      size: { width: 16, height: 16, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm' as const,\n      usage: appliedUsage,\n      sampleCount: info.resource === 'sampledTexMS' ? 4 : 1,\n    };\n    const resource = t.device.createTexture(descriptor).createView();\n\n    const shouldError = (usage & info.usage) === 0;\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        entries: [{ binding: 0, resource }],\n        layout: bindGroupLayout,\n      });\n    }, shouldError);\n  });\n\ng.test('texture_must_have_correct_component_type')\n  .desc(\n    `\n    Tests that texture bindings must have a format that matches the sample type specified in the BindGroupLayout.\n    - Tests a compatible format for every sample type\n    - Tests an incompatible format for every sample type`\n  )\n  .params(u => u.combine('sampleType', ['float', 'sint', 'uint'] as const))\n  .fn(async t => {\n    const { sampleType } = t.params;\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.FRAGMENT,\n          texture: { sampleType },\n        },\n      ],\n    });\n\n    let format: GPUTextureFormat;\n    if (sampleType === 'float') {\n      format = 'r8unorm';\n    } else if (sampleType === 'sint') {\n      format = 'r8sint';\n    } else if (sampleType === 'uint') {\n      format = 'r8uint';\n    } else {\n      unreachable('Unexpected texture component type');\n    }\n\n    const goodDescriptor = {\n      size: { width: 16, height: 16, depthOrArrayLayers: 1 },\n      format,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    // Control case\n    t.device.createBindGroup({\n      entries: [\n        {\n          binding: 0,\n          resource: t.device.createTexture(goodDescriptor).createView(),\n        },\n      ],\n      layout: bindGroupLayout,\n    });\n\n    function* mismatchedTextureFormats(): Iterable<GPUTextureFormat> {\n      if (sampleType !== 'float') {\n        yield 'r8unorm';\n      }\n      if (sampleType !== 'sint') {\n        yield 'r8sint';\n      }\n      if (sampleType !== 'uint') {\n        yield 'r8uint';\n      }\n    }\n\n    // Mismatched texture binding formats are not valid.\n    for (const mismatchedTextureFormat of mismatchedTextureFormats()) {\n      const badDescriptor: GPUTextureDescriptor = clone(goodDescriptor);\n      badDescriptor.format = mismatchedTextureFormat;\n\n      t.expectValidationError(() => {\n        t.device.createBindGroup({\n          entries: [{ binding: 0, resource: t.device.createTexture(badDescriptor).createView() }],\n          layout: bindGroupLayout,\n        });\n      });\n    }\n  });\n\ng.test('texture_must_have_correct_dimension')\n  .desc(\n    `\n    Test that bound texture views match the dimensions supplied in the BindGroupLayout\n    - Test for every GPUTextureViewDimension`\n  )\n  .params(u =>\n    u\n      .combine('viewDimension', kTextureViewDimensions)\n      .beginSubcases()\n      .combine('dimension', kTextureViewDimensions)\n  )\n  .fn(async t => {\n    const { viewDimension, dimension } = t.params;\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.FRAGMENT,\n          texture: { viewDimension },\n        },\n      ],\n    });\n\n    let height = 16;\n    let depthOrArrayLayers = 6;\n    if (dimension === '1d') {\n      height = 1;\n      depthOrArrayLayers = 1;\n    }\n\n    const texture = t.device.createTexture({\n      size: { width: 16, height, depthOrArrayLayers },\n      format: 'rgba8unorm' as const,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n      dimension: getTextureDimensionFromView(dimension),\n    });\n\n    const shouldError = viewDimension !== dimension;\n    const textureView = texture.createView({ dimension });\n\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        entries: [{ binding: 0, resource: textureView }],\n        layout: bindGroupLayout,\n      });\n    }, shouldError);\n  });\n\ng.test('multisampled_validation')\n  .desc(\n    `\n    Test that the sample count of the texture is greater than 1 if the BindGroup entry's\n    multisampled is true. Otherwise, the texture's sampleCount should be 1.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('multisampled', [true, false])\n      .beginSubcases()\n      .combine('sampleCount', [1, 4])\n  )\n  .fn(async t => {\n    const { multisampled, sampleCount } = t.params;\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.FRAGMENT,\n          texture: { multisampled },\n        },\n      ],\n    });\n\n    const texture = t.device.createTexture({\n      size: { width: 16, height: 16, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm' as const,\n      usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.RENDER_ATTACHMENT,\n      sampleCount,\n    });\n\n    const isValid = (!multisampled && sampleCount === 1) || (multisampled && sampleCount > 1);\n\n    const textureView = texture.createView();\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        entries: [{ binding: 0, resource: textureView }],\n        layout: bindGroupLayout,\n      });\n    }, !isValid);\n  });\n\ng.test('buffer_offset_and_size_for_bind_groups_match')\n  .desc(\n    `\n    Test that a buffer binding's [offset, offset + size) must be contained in the BindGroup entry's buffer.\n    - Test for various offsets and sizes`\n  )\n  .paramsSubcasesOnly([\n    { offset: 0, size: 512, _success: true }, // offset 0 is valid\n    { offset: 256, size: 256, _success: true }, // offset 256 (aligned) is valid\n\n    // Touching the end of the buffer\n    { offset: 0, size: 1024, _success: true },\n    { offset: 0, size: undefined, _success: true },\n    { offset: 256 * 3, size: 256, _success: true },\n    { offset: 256 * 3, size: undefined, _success: true },\n\n    // Zero-sized bindings\n    { offset: 0, size: 0, _success: false },\n    { offset: 256, size: 0, _success: false },\n    { offset: 1024, size: 0, _success: false },\n    { offset: 1024, size: undefined, _success: false },\n\n    // Unaligned buffer offset is invalid\n    { offset: 1, size: 256, _success: false },\n    { offset: 1, size: undefined, _success: false },\n    { offset: 128, size: 256, _success: false },\n    { offset: 255, size: 256, _success: false },\n\n    // Out-of-bounds\n    { offset: 256 * 5, size: 0, _success: false }, // offset is OOB\n    { offset: 0, size: 256 * 5, _success: false }, // size is OOB\n    { offset: 1024, size: 1, _success: false }, // offset+size is OOB\n  ])\n  .fn(async t => {\n    const { offset, size, _success } = t.params;\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [{ binding: 0, visibility: GPUShaderStage.COMPUTE, buffer: { type: 'storage' } }],\n    });\n\n    const buffer = t.device.createBuffer({\n      size: 1024,\n      usage: GPUBufferUsage.STORAGE,\n    });\n\n    const descriptor = {\n      entries: [\n        {\n          binding: 0,\n          resource: { buffer, offset, size },\n        },\n      ],\n      layout: bindGroupLayout,\n    };\n\n    if (_success) {\n      // Control case\n      t.device.createBindGroup(descriptor);\n    } else {\n      // Buffer offset and/or size don't match in bind groups.\n      t.expectValidationError(() => {\n        t.device.createBindGroup(descriptor);\n      });\n    }\n  });\n\ng.test('minBindingSize')\n  .desc('Tests that minBindingSize is correctly enforced.')\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('minBindingSize', [undefined, 4, 256])\n      .expand('size', ({ minBindingSize }) =>\n        minBindingSize !== undefined\n          ? [minBindingSize - 1, minBindingSize, minBindingSize + 1]\n          : [4, 256]\n      )\n  )\n  .fn(t => {\n    const { size, minBindingSize } = t.params;\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.FRAGMENT,\n          buffer: {\n            type: 'storage',\n            minBindingSize,\n          },\n        },\n      ],\n    });\n\n    const storageBuffer = t.device.createBuffer({\n      size,\n      usage: GPUBufferUsage.STORAGE,\n    });\n\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        layout: bindGroupLayout,\n        entries: [\n          {\n            binding: 0,\n            resource: {\n              buffer: storageBuffer,\n            },\n          },\n        ],\n      });\n    }, minBindingSize !== undefined && size < minBindingSize);\n  });\n\ng.test('buffer,resource_state')\n  .desc('Test bind group creation with various buffer resource states')\n  .paramsSubcasesOnly(u =>\n    u.combine('state', kResourceStates).combine('entry', bufferBindingEntries(true))\n  )\n  .fn(t => {\n    const { state, entry } = t.params;\n\n    assert(entry.buffer !== undefined);\n    const info = bufferBindingTypeInfo(entry.buffer);\n\n    const bgl = t.device.createBindGroupLayout({\n      entries: [\n        {\n          ...entry,\n          binding: 0,\n          visibility: info.validStages,\n        },\n      ],\n    });\n\n    const buffer = t.createBufferWithState(state, {\n      usage: info.usage,\n      size: 4,\n    });\n\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        layout: bgl,\n        entries: [\n          {\n            binding: 0,\n            resource: {\n              buffer,\n            },\n          },\n        ],\n      });\n    }, state === 'invalid');\n  });\n\ng.test('texture,resource_state')\n  .desc('Test bind group creation with various texture resource states')\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('state', kResourceStates)\n      .combine('entry', sampledAndStorageBindingEntries(true, 'rgba8unorm'))\n  )\n  .fn(t => {\n    const { state, entry } = t.params;\n    const info = texBindingTypeInfo(entry);\n\n    const bgl = t.device.createBindGroupLayout({\n      entries: [\n        {\n          ...entry,\n          binding: 0,\n          visibility: info.validStages,\n        },\n      ],\n    });\n\n    // The `RENDER_ATTACHMENT` usage must be specified if sampleCount > 1 according to WebGPU SPEC.\n    const usage = entry.texture?.multisampled\n      ? info.usage | GPUConst.TextureUsage.RENDER_ATTACHMENT\n      : info.usage;\n    const texture = t.createTextureWithState(state, {\n      usage,\n      size: [1, 1],\n      format: 'rgba8unorm',\n      sampleCount: entry.texture?.multisampled ? 4 : 1,\n    });\n\n    let textureView: GPUTextureView;\n    t.expectValidationError(() => {\n      textureView = texture.createView();\n    }, state === 'invalid');\n\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        layout: bgl,\n        entries: [\n          {\n            binding: 0,\n            resource: textureView,\n          },\n        ],\n      });\n    }, state === 'invalid');\n  });\n\ng.test('bind_group_layout,device_mismatch')\n  .desc(\n    'Tests createBindGroup cannot be called with a bind group layout created from another device'\n  )\n  .paramsSubcasesOnly(u => u.combine('mismatched', [true, false]))\n  .beforeAllSubcases(t => {\n    t.selectMismatchedDeviceOrSkipTestCase(undefined);\n  })\n  .fn(async t => {\n    const mismatched = t.params.mismatched;\n\n    const device = mismatched ? t.mismatchedDevice : t.device;\n\n    const bgl = device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUConst.ShaderStage.VERTEX,\n          buffer: {},\n        },\n      ],\n    });\n\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        layout: bgl,\n        entries: [\n          {\n            binding: 0,\n            resource: { buffer: t.getUniformBuffer() },\n          },\n        ],\n      });\n    }, mismatched);\n  });\n\ng.test('binding_resources,device_mismatch')\n  .desc(\n    `\n    Tests createBindGroup cannot be called with various resources created from another device\n    Test with two resources to make sure all resources can be validated:\n    - resource0 and resource1 from same device\n    - resource0 and resource1 from different device\n\n    TODO: test GPUExternalTexture as a resource\n    `\n  )\n  .params(u =>\n    u\n      .combine('entry', [\n        { buffer: { type: 'storage' } },\n        { sampler: { type: 'filtering' } },\n        { texture: { multisampled: false } },\n        { storageTexture: { access: 'write-only', format: 'rgba8unorm' } },\n      ] as const)\n      .beginSubcases()\n      .combineWithParams([\n        { resource0Mismatched: false, resource1Mismatched: false }, //control case\n        { resource0Mismatched: true, resource1Mismatched: false },\n        { resource0Mismatched: false, resource1Mismatched: true },\n      ])\n  )\n  .beforeAllSubcases(t => {\n    t.selectMismatchedDeviceOrSkipTestCase(undefined);\n  })\n  .fn(async t => {\n    const { entry, resource0Mismatched, resource1Mismatched } = t.params;\n\n    const info = bindingTypeInfo(entry);\n\n    const resource0 = resource0Mismatched\n      ? t.getDeviceMismatchedBindingResource(info.resource)\n      : t.getBindingResource(info.resource);\n    const resource1 = resource1Mismatched\n      ? t.getDeviceMismatchedBindingResource(info.resource)\n      : t.getBindingResource(info.resource);\n\n    const bgl = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: info.validStages,\n          ...entry,\n        },\n        {\n          binding: 1,\n          visibility: info.validStages,\n          ...entry,\n        },\n      ],\n    });\n\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        layout: bgl,\n        entries: [\n          {\n            binding: 0,\n            resource: resource0,\n          },\n          {\n            binding: 1,\n            resource: resource1,\n          },\n        ],\n      });\n    }, resource0Mismatched || resource1Mismatched);\n  });\n\ng.test('storage_texture,usage')\n  .desc(\n    `\n    Test that the texture usage contains STORAGE_BINDING if the BindGroup entry defines\n    storageTexture.\n  `\n  )\n  .params(u =>\n    u //\n      // If usage0 and usage1 are the same, the usage being test is a single usage. Otherwise, it's\n      // a combined usage.\n      .combine('usage0', kTextureUsages)\n      .combine('usage1', kTextureUsages)\n  )\n  .fn(async t => {\n    const { usage0, usage1 } = t.params;\n\n    const usage = usage0 | usage1;\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.FRAGMENT,\n          storageTexture: { access: 'write-only', format: 'rgba8unorm' },\n        },\n      ],\n    });\n\n    const texture = t.device.createTexture({\n      size: { width: 16, height: 16, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm' as const,\n      usage,\n    });\n\n    const isValid = GPUTextureUsage.STORAGE_BINDING & usage;\n\n    const textureView = texture.createView();\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        entries: [{ binding: 0, resource: textureView }],\n        layout: bindGroupLayout,\n      });\n    }, !isValid);\n  });\n\ng.test('storage_texture,mip_level_count')\n  .desc(\n    `\n    Test that the mip level count of the resource of the BindGroup entry as a descriptor is 1 if the\n    BindGroup entry defines storageTexture. If the mip level count is not 1, a validation error\n    should be generated.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('baseMipLevel', [1, 2])\n      .combine('mipLevelCount', [1, 2])\n  )\n  .fn(async t => {\n    const { baseMipLevel, mipLevelCount } = t.params;\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.FRAGMENT,\n          storageTexture: { access: 'write-only', format: 'rgba8unorm' },\n        },\n      ],\n    });\n\n    const MIP_LEVEL_COUNT = 4;\n    const texture = t.device.createTexture({\n      size: { width: 16, height: 16, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm' as const,\n      usage: GPUTextureUsage.STORAGE_BINDING,\n      mipLevelCount: MIP_LEVEL_COUNT,\n    });\n\n    const textureView = texture.createView({ baseMipLevel, mipLevelCount });\n\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        entries: [{ binding: 0, resource: textureView }],\n        layout: bindGroupLayout,\n      });\n    }, mipLevelCount !== 1);\n  });\n\ng.test('storage_texture,format')\n  .desc(\n    `\n    Test that the format of the storage texture is equal to resource's descriptor format if the\n    BindGroup entry defines storageTexture.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('storageTextureFormat', kStorageTextureFormats)\n      .combine('resourceFormat', kStorageTextureFormats)\n  )\n  .fn(async t => {\n    const { storageTextureFormat, resourceFormat } = t.params;\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.FRAGMENT,\n          storageTexture: { access: 'write-only', format: storageTextureFormat },\n        },\n      ],\n    });\n\n    const texture = t.device.createTexture({\n      size: { width: 16, height: 16, depthOrArrayLayers: 1 },\n      format: resourceFormat,\n      usage: GPUTextureUsage.STORAGE_BINDING,\n    });\n\n    const isValid = storageTextureFormat === resourceFormat;\n    const textureView = texture.createView({ format: resourceFormat });\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        entries: [{ binding: 0, resource: textureView }],\n        layout: bindGroupLayout,\n      });\n    }, !isValid);\n  });\n\ng.test('buffer,usage')\n  .desc(\n    `\n    Test that the buffer usage contains 'UNIFORM' if the BindGroup entry defines buffer and it's\n    type is 'uniform', and the buffer usage contains 'STORAGE' if the BindGroup entry's buffer type\n    is 'storage'|read-only-storage'.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('type', kBufferBindingTypes)\n      // If usage0 and usage1 are the same, the usage being test is a single usage. Otherwise, it's\n      // a combined usage.\n      .beginSubcases()\n      .combine('usage0', kBufferUsages)\n      .combine('usage1', kBufferUsages)\n      .unless(\n        ({ usage0, usage1 }) =>\n          ((usage0 | usage1) & (GPUConst.BufferUsage.MAP_READ | GPUConst.BufferUsage.MAP_WRITE)) !==\n          0\n      )\n  )\n  .fn(async t => {\n    const { type, usage0, usage1 } = t.params;\n\n    const usage = usage0 | usage1;\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.COMPUTE,\n          buffer: { type },\n        },\n      ],\n    });\n\n    const buffer = t.device.createBuffer({\n      size: 4,\n      usage,\n    });\n\n    let isValid = false;\n    if (type === 'uniform') {\n      isValid = GPUBufferUsage.UNIFORM & usage ? true : false;\n    } else if (type === 'storage' || type === 'read-only-storage') {\n      isValid = GPUBufferUsage.STORAGE & usage ? true : false;\n    }\n\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        entries: [{ binding: 0, resource: { buffer } }],\n        layout: bindGroupLayout,\n      });\n    }, !isValid);\n  });\n\ng.test('buffer,resource_offset')\n  .desc(\n    `\n    Test that the resource.offset of the BindGroup entry is a multiple of limits.\n    'minUniformBufferOffsetAlignment|minStorageBufferOffsetAlignment' if the BindGroup entry defines\n    buffer and the buffer type is 'uniform|storage|read-only-storage'.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('type', kBufferBindingTypes)\n      .beginSubcases()\n      .expand('offset', ({ type }) =>\n        type === 'uniform'\n          ? [\n              kLimitInfo.minUniformBufferOffsetAlignment.default,\n              kLimitInfo.minUniformBufferOffsetAlignment.default * 0.5,\n              kLimitInfo.minUniformBufferOffsetAlignment.default * 1.5,\n              kLimitInfo.minUniformBufferOffsetAlignment.default + 2,\n            ]\n          : [\n              kLimitInfo.minStorageBufferOffsetAlignment.default,\n              kLimitInfo.minStorageBufferOffsetAlignment.default * 0.5,\n              kLimitInfo.minStorageBufferOffsetAlignment.default * 1.5,\n              kLimitInfo.minStorageBufferOffsetAlignment.default + 2,\n            ]\n      )\n  )\n  .fn(async t => {\n    const { type, offset } = t.params;\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.COMPUTE,\n          buffer: { type },\n        },\n      ],\n    });\n\n    let usage, isValid;\n    if (type === 'uniform') {\n      usage = GPUBufferUsage.UNIFORM;\n      isValid = offset % kLimitInfo.minUniformBufferOffsetAlignment.default === 0;\n    } else {\n      usage = GPUBufferUsage.STORAGE;\n      isValid = offset % kLimitInfo.minStorageBufferOffsetAlignment.default === 0;\n    }\n\n    const buffer = t.device.createBuffer({\n      size: 1024,\n      usage,\n    });\n\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        entries: [{ binding: 0, resource: { buffer, offset } }],\n        layout: bindGroupLayout,\n      });\n    }, !isValid);\n  });\n\ng.test('buffer,resource_binding_size')\n  .desc(\n    `\n    Test that the buffer binding size of the BindGroup entry is equal to or less than limits.\n    'maxUniformBufferBindingSize|maxStorageBufferBindingSize' if the BindGroup entry defines\n    buffer and the buffer type is 'uniform|storage|read-only-storage'.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('type', kBufferBindingTypes)\n      .beginSubcases()\n      // Test a size of 1 to ensure there's no alignment requirement,\n      // then values just within and just above the limit.\n      .expand('bindingSize', ({ type }) =>\n        type === 'uniform'\n          ? [\n              1,\n              kLimitInfo.maxUniformBufferBindingSize.default,\n              kLimitInfo.maxUniformBufferBindingSize.default + 1,\n            ]\n          : [\n              1,\n              kLimitInfo.maxStorageBufferBindingSize.default,\n              kLimitInfo.maxStorageBufferBindingSize.default + 1,\n            ]\n      )\n  )\n  .fn(async t => {\n    const { type, bindingSize } = t.params;\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.COMPUTE,\n          buffer: { type },\n        },\n      ],\n    });\n\n    let usage, isValid;\n    if (type === 'uniform') {\n      usage = GPUBufferUsage.UNIFORM;\n      isValid = bindingSize <= kLimitInfo.maxUniformBufferBindingSize.default;\n    } else {\n      usage = GPUBufferUsage.STORAGE;\n      isValid = bindingSize <= kLimitInfo.maxStorageBufferBindingSize.default;\n    }\n\n    const buffer = t.device.createBuffer({\n      size: kLimitInfo.maxStorageBufferBindingSize.default,\n      usage,\n    });\n\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        entries: [{ binding: 0, resource: { buffer, size: bindingSize } }],\n        layout: bindGroupLayout,\n      });\n    }, !isValid);\n  });\n"],"file":"createBindGroup.spec.js"}