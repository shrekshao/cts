{"version":3,"sources":["../../../../src/webgpu/api/validation/createBindGroup.spec.ts"],"names":["description","makeTestGroup","unreachable","allBindingEntries","bindingTypeInfo","kBindableResources","kTextureUsages","kTextureViewDimensions","sampledAndStorageBindingEntries","texBindingTypeInfo","GPUConst","ValidationTest","clone","descriptor","JSON","parse","stringify","g","test","desc","paramsSubcasesOnly","u","combine","fn","t","layoutEntryCount","bindGroupEntryCount","params","layoutEntries","i","push","binding","visibility","GPUShaderStage","COMPUTE","buffer","type","bindGroupLayout","device","createBindGroupLayout","entries","resource","getStorageBuffer","shouldError","expectValidationError","createBindGroup","layout","layoutBinding","resourceType","entry","info","getBindingResource","resourceBindingIsCompatible","unless","usage","TextureUsage","STORAGE","FRAGMENT","size","width","height","depthOrArrayLayers","format","sampleCount","createTexture","createView","sampleType","texture","goodDescriptor","GPUTextureUsage","SAMPLED","mismatchedTextureFormats","mismatchedTextureFormat","badDescriptor","beginSubcases","viewDimension","dimension","arrayLayerCount","undefined","textureView","offset","_success","createBuffer","GPUBufferUsage","expand","minBindingSize","storageBuffer"],"mappings":"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","sourcesContent":["export const description = `\n  createBindGroup validation tests.\n\n  TODO: Ensure sure tests cover all createBindGroup validation rules.\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { unreachable } from '../../../common/util/util.js';\nimport {\n  allBindingEntries,\n  bindingTypeInfo,\n  kBindableResources,\n  kTextureUsages,\n  kTextureViewDimensions,\n  sampledAndStorageBindingEntries,\n  texBindingTypeInfo,\n} from '../../capability_info.js';\nimport { GPUConst } from '../../constants.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nfunction clone<T extends GPUTextureDescriptor>(descriptor: T): T {\n  return JSON.parse(JSON.stringify(descriptor));\n}\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('binding_count_mismatch')\n  .desc('Test that the number of entries must match the number of entries in the BindGroupLayout.')\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('layoutEntryCount', [1, 2, 3])\n      .combine('bindGroupEntryCount', [1, 2, 3])\n  )\n  .fn(async t => {\n    const { layoutEntryCount, bindGroupEntryCount } = t.params;\n\n    const layoutEntries: Array<GPUBindGroupLayoutEntry> = [];\n    for (let i = 0; i < layoutEntryCount; ++i) {\n      layoutEntries.push({\n        binding: i,\n        visibility: GPUShaderStage.COMPUTE,\n        buffer: { type: 'storage' },\n      });\n    }\n    const bindGroupLayout = t.device.createBindGroupLayout({ entries: layoutEntries });\n\n    const entries: Array<GPUBindGroupEntry> = [];\n    for (let i = 0; i < bindGroupEntryCount; ++i) {\n      entries.push({\n        binding: i,\n        resource: { buffer: t.getStorageBuffer() },\n      });\n    }\n\n    const shouldError = layoutEntryCount !== bindGroupEntryCount;\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        entries,\n        layout: bindGroupLayout,\n      });\n    }, shouldError);\n  });\n\ng.test('binding_must_be_present_in_layout')\n  .desc(\n    'Test that the binding slot for each entry matches a binding slot defined in the BindGroupLayout.'\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('layoutBinding', [0, 1, 2])\n      .combine('binding', [0, 1, 2])\n  )\n  .fn(async t => {\n    const { layoutBinding, binding } = t.params;\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [\n        { binding: layoutBinding, visibility: GPUShaderStage.COMPUTE, buffer: { type: 'storage' } },\n      ],\n    });\n\n    const descriptor = {\n      entries: [{ binding, resource: { buffer: t.getStorageBuffer() } }],\n      layout: bindGroupLayout,\n    };\n\n    const shouldError = layoutBinding !== binding;\n    t.expectValidationError(() => {\n      t.device.createBindGroup(descriptor);\n    }, shouldError);\n  });\n\ng.test('binding_must_contain_resource_defined_in_layout')\n  .desc(\n    'Test that only compatible resource types specified in the BindGroupLayout are allowed for each entry.'\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('resourceType', kBindableResources)\n      .combine('entry', allBindingEntries(false))\n  )\n  .fn(t => {\n    const { resourceType, entry } = t.params;\n    const info = bindingTypeInfo(entry);\n\n    const layout = t.device.createBindGroupLayout({\n      entries: [{ binding: 0, visibility: GPUShaderStage.COMPUTE, ...entry }],\n    });\n\n    const resource = t.getBindingResource(resourceType);\n\n    let resourceBindingIsCompatible;\n    switch (resourceType) {\n      // Either type of sampler may be bound to a filtering sampler binding.\n      case 'filtSamp':\n        resourceBindingIsCompatible =\n          info.resource === 'filtSamp' || info.resource === 'nonFiltSamp';\n        break;\n      // But only non-filtering samplers can be used with non-filtering sampler bindings.\n      case 'nonFiltSamp':\n        resourceBindingIsCompatible = info.resource === 'nonFiltSamp';\n        break;\n      default:\n        resourceBindingIsCompatible = info.resource === resourceType;\n        break;\n    }\n    t.expectValidationError(() => {\n      t.device.createBindGroup({ layout, entries: [{ binding: 0, resource }] });\n    }, !resourceBindingIsCompatible);\n  });\n\ng.test('texture_binding_must_have_correct_usage')\n  .desc('Tests that texture bindings must have the correct usage.')\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('entry', sampledAndStorageBindingEntries(false))\n      .combine('usage', kTextureUsages)\n      .unless(({ entry, usage }) => {\n        const info = texBindingTypeInfo(entry);\n        // Can't create the texture for this (usage=STORAGE and sampleCount=4), so skip.\n        return usage === GPUConst.TextureUsage.STORAGE && info.resource === 'sampledTexMS';\n      })\n  )\n  .fn(async t => {\n    const { entry, usage } = t.params;\n    const info = texBindingTypeInfo(entry);\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [{ binding: 0, visibility: GPUShaderStage.FRAGMENT, ...entry }],\n    });\n\n    const descriptor = {\n      size: { width: 16, height: 16, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm' as const,\n      usage,\n      sampleCount: info.resource === 'sampledTexMS' ? 4 : 1,\n    };\n    const resource = t.device.createTexture(descriptor).createView();\n\n    const shouldError = usage !== info.usage;\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        entries: [{ binding: 0, resource }],\n        layout: bindGroupLayout,\n      });\n    }, shouldError);\n  });\n\ng.test('texture_must_have_correct_component_type')\n  .desc(\n    `\n    Tests that texture bindings must have a format that matches the sample type specified in the BindGroupLayout.\n    - Tests a compatible format for every sample type\n    - Tests an incompatible format for every sample type`\n  )\n  .params(u => u.combine('sampleType', ['float', 'sint', 'uint'] as const))\n  .fn(async t => {\n    const { sampleType } = t.params;\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.FRAGMENT,\n          texture: { sampleType },\n        },\n      ],\n    });\n\n    let format: GPUTextureFormat;\n    if (sampleType === 'float') {\n      format = 'r8unorm';\n    } else if (sampleType === 'sint') {\n      format = 'r8sint';\n    } else if (sampleType === 'uint') {\n      format = 'r8uint';\n    } else {\n      unreachable('Unexpected texture component type');\n    }\n\n    const goodDescriptor = {\n      size: { width: 16, height: 16, depthOrArrayLayers: 1 },\n      format,\n      usage: GPUTextureUsage.SAMPLED,\n    };\n\n    // Control case\n    t.device.createBindGroup({\n      entries: [\n        {\n          binding: 0,\n          resource: t.device.createTexture(goodDescriptor).createView(),\n        },\n      ],\n      layout: bindGroupLayout,\n    });\n\n    function* mismatchedTextureFormats(): Iterable<GPUTextureFormat> {\n      if (sampleType !== 'float') {\n        yield 'r8unorm';\n      }\n      if (sampleType !== 'sint') {\n        yield 'r8sint';\n      }\n      if (sampleType !== 'uint') {\n        yield 'r8uint';\n      }\n    }\n\n    // Mismatched texture binding formats are not valid.\n    for (const mismatchedTextureFormat of mismatchedTextureFormats()) {\n      const badDescriptor: GPUTextureDescriptor = clone(goodDescriptor);\n      badDescriptor.format = mismatchedTextureFormat;\n\n      t.expectValidationError(() => {\n        t.device.createBindGroup({\n          entries: [{ binding: 0, resource: t.device.createTexture(badDescriptor).createView() }],\n          layout: bindGroupLayout,\n        });\n      });\n    }\n  });\n\ng.test('texture_must_have_correct_dimension')\n  .desc(\n    `\n    Test that bound texture views match the dimensions supplied in the BindGroupLayout\n    - Test for every GPUTextureViewDimension`\n  )\n  .params(u =>\n    u\n      .combine('viewDimension', kTextureViewDimensions)\n      .beginSubcases()\n      .combine('dimension', kTextureViewDimensions)\n  )\n  .fn(async t => {\n    const { viewDimension, dimension } = t.params;\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.FRAGMENT,\n          texture: { viewDimension },\n        },\n      ],\n    });\n\n    const texture = t.device.createTexture({\n      size: { width: 16, height: 16, depthOrArrayLayers: 6 },\n      format: 'rgba8unorm' as const,\n      usage: GPUTextureUsage.SAMPLED,\n    });\n\n    const shouldError = viewDimension !== dimension;\n    const arrayLayerCount = dimension === '2d' ? 1 : undefined;\n    const textureView = texture.createView({ dimension, arrayLayerCount });\n\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        entries: [{ binding: 0, resource: textureView }],\n        layout: bindGroupLayout,\n      });\n    }, shouldError);\n  });\n\ng.test('buffer_offset_and_size_for_bind_groups_match')\n  .desc(\n    `\n    Test that a buffer binding's [offset, offset + size) must be contained in the BindGroup entry's buffer.\n    - Test for various offsets and sizes\n    - TODO(#234): disallow zero-sized bindings`\n  )\n  .paramsSubcasesOnly([\n    { offset: 0, size: 512, _success: true }, // offset 0 is valid\n    { offset: 256, size: 256, _success: true }, // offset 256 (aligned) is valid\n\n    // Touching the end of the buffer\n    { offset: 0, size: 1024, _success: true },\n    { offset: 0, size: undefined, _success: true },\n    { offset: 256 * 3, size: 256, _success: true },\n    { offset: 256 * 3, size: undefined, _success: true },\n\n    // Zero-sized bindings\n    { offset: 0, size: 0, _success: true },\n    { offset: 256, size: 0, _success: true },\n    { offset: 1024, size: 0, _success: true },\n    { offset: 1024, size: undefined, _success: true },\n\n    // Unaligned buffer offset is invalid\n    { offset: 1, size: 256, _success: false },\n    { offset: 1, size: undefined, _success: false },\n    { offset: 128, size: 256, _success: false },\n    { offset: 255, size: 256, _success: false },\n\n    // Out-of-bounds\n    { offset: 256 * 5, size: 0, _success: false }, // offset is OOB\n    { offset: 0, size: 256 * 5, _success: false }, // size is OOB\n    { offset: 1024, size: 1, _success: false }, // offset+size is OOB\n  ])\n  .fn(async t => {\n    const { offset, size, _success } = t.params;\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [{ binding: 0, visibility: GPUShaderStage.COMPUTE, buffer: { type: 'storage' } }],\n    });\n\n    const buffer = t.device.createBuffer({\n      size: 1024,\n      usage: GPUBufferUsage.STORAGE,\n    });\n\n    const descriptor = {\n      entries: [\n        {\n          binding: 0,\n          resource: { buffer, offset, size },\n        },\n      ],\n      layout: bindGroupLayout,\n    };\n\n    if (_success) {\n      // Control case\n      t.device.createBindGroup(descriptor);\n    } else {\n      // Buffer offset and/or size don't match in bind groups.\n      t.expectValidationError(() => {\n        t.device.createBindGroup(descriptor);\n      });\n    }\n  });\n\ng.test('minBindingSize')\n  .desc('Tests that minBindingSize is correctly enforced.')\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('minBindingSize', [undefined, 4, 256])\n      .expand('size', ({ minBindingSize }) =>\n        minBindingSize !== undefined\n          ? [minBindingSize - 1, minBindingSize, minBindingSize + 1]\n          : [4, 256]\n      )\n  )\n  .fn(t => {\n    const { size, minBindingSize } = t.params;\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.FRAGMENT,\n          buffer: {\n            type: 'storage',\n            minBindingSize,\n          },\n        },\n      ],\n    });\n\n    const storageBuffer = t.device.createBuffer({\n      size,\n      usage: GPUBufferUsage.STORAGE,\n    });\n\n    t.expectValidationError(() => {\n      t.device.createBindGroup({\n        layout: bindGroupLayout,\n        entries: [\n          {\n            binding: 0,\n            resource: {\n              buffer: storageBuffer,\n            },\n          },\n        ],\n      });\n    }, minBindingSize !== undefined && size < minBindingSize);\n  });\n"],"file":"createBindGroup.spec.js"}