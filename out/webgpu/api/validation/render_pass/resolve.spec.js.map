{"version":3,"sources":["../../../../../src/webgpu/api/validation/render_pass/resolve.spec.ts"],"names":["description","makeTestGroup","GPUConst","ValidationTest","kNumColorAttachments","g","test","desc","paramsSimple","_valid","colorAttachmentSamples","resolveTargetSamples","resolveTargetUsage","TextureUsage","COPY_SRC","resolveTargetViewBaseMipLevel","resolveTargetHeight","resolveTargetWidth","resolveTargetViewMipCount","resolveTargetViewBaseArrayLayer","resolveTargetViewArrayLayerCount","otherAttachmentFormat","colorAttachmentFormat","resolveTargetFormat","colorAttachmentHeight","colorAttachmentWidth","fn","t","GPUTextureUsage","RENDER_ATTACHMENT","params","resolveSlot","renderPassColorAttachmentDescriptors","colorAttachmentSlot","resolveSourceColorAttachment","device","createTexture","format","size","width","height","depthOrArrayLayers","sampleCount","usage","resolveTarget","mipLevelCount","push","view","createView","loadOp","storeOp","dimension","arrayLayerCount","baseMipLevel","baseArrayLayer","colorAttachment","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","end","expectValidationError","finish"],"mappings":"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","sourcesContent":["export const description = `\nValidation tests for render pass resolve.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUConst } from '../../../constants.js';\nimport { ValidationTest } from '../validation_test.js';\n\nconst kNumColorAttachments = 4;\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('resolve_attachment')\n  .desc(\n    `\nTest various validation behaviors when a resolveTarget is provided.\n\n- base case (valid).\n- resolve source is not multisampled.\n- resolve target is not single sampled.\n- resolve target missing RENDER_ATTACHMENT usage.\n- resolve target must have exactly one subresource:\n    - base mip level {0, >0}, mip level count {1, >1}.\n    - base array layer {0, >0}, array layer count {1, >1}.\n    - TODO: test zero subresources\n- resolve source and target have different formats.\n    - rgba8unorm -> {bgra8unorm, rgba8unorm-srgb}\n    - {bgra8unorm, rgba8unorm-srgb} -> rgba8unorm\n    - test with other color attachments having a different format\n- resolve source and target have different sizes.\n`\n  )\n  .paramsSimple([\n    // control case should be valid\n    { _valid: true },\n    // a single sampled resolve source should cause a validation error.\n    { colorAttachmentSamples: 1, _valid: false },\n    // a multisampled resolve target should cause a validation error.\n    { resolveTargetSamples: 4, _valid: false },\n    // resolveTargetUsage without RENDER_ATTACHMENT usage should cause a validation error.\n    { resolveTargetUsage: GPUConst.TextureUsage.COPY_SRC, _valid: false },\n    // non-zero resolve target base mip level should be valid.\n    {\n      resolveTargetViewBaseMipLevel: 1,\n      resolveTargetHeight: 4,\n      resolveTargetWidth: 4,\n      _valid: true,\n    },\n    // a validation error should be created when mip count > 1\n    { resolveTargetViewMipCount: 2, _valid: false },\n    {\n      resolveTargetViewBaseMipLevel: 1,\n      resolveTargetViewMipCount: 2,\n      resolveTargetHeight: 4,\n      resolveTargetWidth: 4,\n      _valid: false,\n    },\n    // non-zero resolve target base array layer should be valid.\n    { resolveTargetViewBaseArrayLayer: 1, _valid: true },\n    // a validation error should be created when array layer count > 1\n    { resolveTargetViewArrayLayerCount: 2, _valid: false },\n    { resolveTargetViewBaseArrayLayer: 1, resolveTargetViewArrayLayerCount: 2, _valid: false },\n    // other color attachments resolving with a different format should be valid.\n    { otherAttachmentFormat: 'bgra8unorm', _valid: true },\n    // mismatched colorAttachment and resolveTarget formats should cause a validation error.\n    { colorAttachmentFormat: 'bgra8unorm', _valid: false },\n    { colorAttachmentFormat: 'rgba8unorm-srgb', _valid: false },\n    { resolveTargetFormat: 'bgra8unorm', _valid: false },\n    { resolveTargetFormat: 'rgba8unorm-srgb', _valid: false },\n    // mismatched colorAttachment and resolveTarget sizes should cause a validation error.\n    { colorAttachmentHeight: 4, _valid: false },\n    { colorAttachmentWidth: 4, _valid: false },\n    { resolveTargetHeight: 4, _valid: false },\n    { resolveTargetWidth: 4, _valid: false },\n  ] as const)\n  .fn(async t => {\n    const {\n      colorAttachmentFormat = 'rgba8unorm',\n      resolveTargetFormat = 'rgba8unorm',\n      otherAttachmentFormat = 'rgba8unorm',\n      colorAttachmentSamples = 4,\n      resolveTargetSamples = 1,\n      resolveTargetUsage = GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n      resolveTargetViewMipCount = 1,\n      resolveTargetViewBaseMipLevel = 0,\n      resolveTargetViewArrayLayerCount = 1,\n      resolveTargetViewBaseArrayLayer = 0,\n      colorAttachmentHeight = 2,\n      colorAttachmentWidth = 2,\n      resolveTargetHeight = 2,\n      resolveTargetWidth = 2,\n      _valid,\n    } = t.params;\n\n    // Run the test in a nested loop such that the configured color attachment with resolve target\n    // is tested while occupying each individual colorAttachment slot.\n    for (let resolveSlot = 0; resolveSlot < kNumColorAttachments; resolveSlot++) {\n      const renderPassColorAttachmentDescriptors: GPURenderPassColorAttachment[] = [];\n      for (\n        let colorAttachmentSlot = 0;\n        colorAttachmentSlot < kNumColorAttachments;\n        colorAttachmentSlot++\n      ) {\n        // resolveSlot === colorAttachmentSlot denotes the color attachment slot that contains the color attachment with resolve\n        // target.\n        if (resolveSlot === colorAttachmentSlot) {\n          // Create the color attachment with resolve target with the configurable parameters.\n          const resolveSourceColorAttachment = t.device.createTexture({\n            format: colorAttachmentFormat,\n            size: {\n              width: colorAttachmentWidth,\n              height: colorAttachmentHeight,\n              depthOrArrayLayers: 1,\n            },\n            sampleCount: colorAttachmentSamples,\n            usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n          });\n\n          const resolveTarget = t.device.createTexture({\n            format: resolveTargetFormat,\n            size: {\n              width: resolveTargetWidth,\n              height: resolveTargetHeight,\n              depthOrArrayLayers:\n                resolveTargetViewBaseArrayLayer + resolveTargetViewArrayLayerCount,\n            },\n            sampleCount: resolveTargetSamples,\n            mipLevelCount: resolveTargetViewBaseMipLevel + resolveTargetViewMipCount,\n            usage: resolveTargetUsage,\n          });\n\n          renderPassColorAttachmentDescriptors.push({\n            view: resolveSourceColorAttachment.createView(),\n            loadOp: 'load',\n            storeOp: 'discard',\n            resolveTarget: resolveTarget.createView({\n              dimension: resolveTargetViewArrayLayerCount === 1 ? '2d' : '2d-array',\n              mipLevelCount: resolveTargetViewMipCount,\n              arrayLayerCount: resolveTargetViewArrayLayerCount,\n              baseMipLevel: resolveTargetViewBaseMipLevel,\n              baseArrayLayer: resolveTargetViewBaseArrayLayer,\n            }),\n          });\n        } else {\n          // Create a basic texture to fill other color attachment slots. This texture's dimensions\n          // and sample count must match the resolve source color attachment to be valid.\n          const colorAttachment = t.device.createTexture({\n            format: otherAttachmentFormat,\n            size: {\n              width: colorAttachmentWidth,\n              height: colorAttachmentHeight,\n              depthOrArrayLayers: 1,\n            },\n            sampleCount: colorAttachmentSamples,\n            usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n          });\n\n          const resolveTarget = t.device.createTexture({\n            format: otherAttachmentFormat,\n            size: {\n              width: colorAttachmentWidth,\n              height: colorAttachmentHeight,\n              depthOrArrayLayers: 1,\n            },\n            sampleCount: 1,\n            usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n          });\n\n          renderPassColorAttachmentDescriptors.push({\n            view: colorAttachment.createView(),\n            loadOp: 'load',\n            storeOp: 'discard',\n            resolveTarget: resolveTarget.createView(),\n          });\n        }\n      }\n      const encoder = t.device.createCommandEncoder();\n      const pass = encoder.beginRenderPass({\n        colorAttachments: renderPassColorAttachmentDescriptors,\n      });\n      pass.end();\n\n      t.expectValidationError(() => {\n        encoder.finish();\n      }, !_valid);\n    }\n  });\n"],"file":"resolve.spec.js"}