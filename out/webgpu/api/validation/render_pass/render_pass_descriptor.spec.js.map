{"version":3,"sources":["../../../../../src/webgpu/api/validation/render_pass/render_pass_descriptor.spec.ts"],"names":["description","makeTestGroup","kDepthStencilFormats","kQueryTypes","kRenderableColorTextureFormats","kTextureFormatInfo","GPUConst","ValidationTest","F","createTexture","options","format","width","height","arrayLayerCount","mipLevelCount","sampleCount","usage","GPUTextureUsage","RENDER_ATTACHMENT","device","size","depthOrArrayLayers","getColorAttachment","texture","textureViewDescriptor","view","createView","clearValue","r","g","b","a","loadOp","storeOp","getDepthStencilAttachment","depthClearValue","depthLoadOp","depthStoreOp","stencilClearValue","stencilLoadOp","stencilStoreOp","tryRenderPass","success","descriptor","commandEncoder","createCommandEncoder","renderPass","beginRenderPass","end","expectValidationError","finish","test","desc","fn","t","colorTexture","colorAttachments","depthStencilTexture","depthStencilAttachment","paramsSubcasesOnly","u","combine","undefined","Array","fill","hasDepthStencilAttachment","params","isEmptyColorTargets","i","length","_success","paramsSimple","colorAttachmentsCount","push","colorTexture1x1A","colorTexture1x1B","colorTexture2x2","depthStencilTexture1x1","depthStencilTexture2x2","baseArrayLayer","ARRAY_LAYER_COUNT","MIP_LEVEL_COUNT","COLOR_FORMAT","DEPTH_STENCIL_FORMAT","baseTextureViewDescriptor","dimension","baseMipLevel","resolveTargetTexture","resolveTarget","multisampledColorTexture","multisampledResolveTargetTexture","colorAttachment","TextureUsage","COPY_SRC","COPY_DST","STORAGE_BINDING","TEXTURE_BINDING","STORAGE","isValid","resolveTargetTextureView","multisampledDepthStencilTexture","beginSubcases","beforeAllSubcases","selectDeviceForTextureFormatOrSkipTestCase","depthReadOnly","stencilReadOnly","setDepthLoadStoreOp","setStencilLoadStoreOp","info","depth","stencil","combineWithParams","filter","multisample","resolve","selectDeviceOrSkipTestCase","queryTypeA","queryTypeB","timestampWriteA","querySet","createQuerySet","type","count","queryIndex","location","timestampWriteB","timestampWrites","locationA","locationB","querySetCount","timestampWrite","queryIndexA","queryIndexB","queryType","occlusionQuerySet"],"mappings":"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","sourcesContent":["export const description = `\nrender pass descriptor validation tests.\n\nTODO: review for completeness\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport {\n  kDepthStencilFormats,\n  kQueryTypes,\n  kRenderableColorTextureFormats,\n  kTextureFormatInfo,\n} from '../../../capability_info.js';\nimport { GPUConst } from '../../../constants.js';\nimport { ValidationTest } from '../validation_test.js';\n\nclass F extends ValidationTest {\n  createTexture(\n    options: {\n      format?: GPUTextureFormat;\n      width?: number;\n      height?: number;\n      arrayLayerCount?: number;\n      mipLevelCount?: number;\n      sampleCount?: number;\n      usage?: GPUTextureUsageFlags;\n    } = {}\n  ): GPUTexture {\n    const {\n      format = 'rgba8unorm',\n      width = 16,\n      height = 16,\n      arrayLayerCount = 1,\n      mipLevelCount = 1,\n      sampleCount = 1,\n      usage = GPUTextureUsage.RENDER_ATTACHMENT,\n    } = options;\n\n    return this.device.createTexture({\n      size: { width, height, depthOrArrayLayers: arrayLayerCount },\n      format,\n      mipLevelCount,\n      sampleCount,\n      usage,\n    });\n  }\n\n  getColorAttachment(\n    texture: GPUTexture,\n    textureViewDescriptor?: GPUTextureViewDescriptor\n  ): GPURenderPassColorAttachment {\n    const view = texture.createView(textureViewDescriptor);\n\n    return {\n      view,\n      clearValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n      loadOp: 'clear',\n      storeOp: 'store',\n    };\n  }\n\n  getDepthStencilAttachment(\n    texture: GPUTexture,\n    textureViewDescriptor?: GPUTextureViewDescriptor\n  ): GPURenderPassDepthStencilAttachment {\n    const view = texture.createView(textureViewDescriptor);\n\n    return {\n      view,\n      depthClearValue: 1.0,\n      depthLoadOp: 'clear',\n      depthStoreOp: 'store',\n      stencilClearValue: 0,\n      stencilLoadOp: 'clear',\n      stencilStoreOp: 'store',\n    };\n  }\n\n  tryRenderPass(success: boolean, descriptor: GPURenderPassDescriptor): void {\n    const commandEncoder = this.device.createCommandEncoder();\n    const renderPass = commandEncoder.beginRenderPass(descriptor);\n    renderPass.end();\n\n    this.expectValidationError(() => {\n      commandEncoder.finish();\n    }, !success);\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('attachments,one_color_attachment')\n  .desc(`Test that a render pass works with only one color attachment.`)\n  .fn(t => {\n    const colorTexture = t.createTexture({ format: 'rgba8unorm' });\n    const descriptor = {\n      colorAttachments: [t.getColorAttachment(colorTexture)],\n    };\n\n    t.tryRenderPass(true, descriptor);\n  });\n\ng.test('attachments,one_depth_stencil_attachment')\n  .desc(`Test that a render pass works with only one depthStencil attachment.`)\n  .fn(t => {\n    const depthStencilTexture = t.createTexture({ format: 'depth24plus-stencil8' });\n    const descriptor = {\n      colorAttachments: [],\n      depthStencilAttachment: t.getDepthStencilAttachment(depthStencilTexture),\n    };\n\n    t.tryRenderPass(true, descriptor);\n  });\n\ng.test('color_attachments,empty')\n  .desc(\n    `\n  Test that when colorAttachments has all values be 'undefined' or the sequence is empty, the\n  depthStencilAttachment must not be 'undefined'.\n  `\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('colorAttachments', [\n        [],\n        [undefined],\n        [undefined, undefined],\n        new Array(8).fill(undefined),\n        [{ format: 'rgba8unorm' }],\n      ])\n      .combine('hasDepthStencilAttachment', [false, true])\n  )\n  .fn(async t => {\n    const { colorAttachments, hasDepthStencilAttachment } = t.params;\n\n    let isEmptyColorTargets = true;\n    for (let i = 0; i < colorAttachments.length; i++) {\n      if (colorAttachments[i] !== undefined) {\n        isEmptyColorTargets = false;\n        const colorTexture = t.createTexture();\n        colorAttachments[i] = t.getColorAttachment(colorTexture);\n      }\n    }\n\n    const _success = !isEmptyColorTargets || hasDepthStencilAttachment;\n    t.tryRenderPass(_success, {\n      colorAttachments,\n      depthStencilAttachment: hasDepthStencilAttachment\n        ? t.getDepthStencilAttachment(t.createTexture({ format: 'depth24plus-stencil8' }))\n        : undefined,\n    });\n  });\n\ng.test('color_attachments,out_of_bounds')\n  .desc(\n    `\n  Test that the out of bound of color attachment indexes are handled.\n    - a validation error is generated when color attachments exceed the maximum limit(8).\n  `\n  )\n  .paramsSimple([\n    { colorAttachmentsCount: 8, _success: true }, // Control case\n    { colorAttachmentsCount: 9, _success: false }, // Out of bounds\n  ])\n  .fn(async t => {\n    const { colorAttachmentsCount, _success } = t.params;\n\n    const colorAttachments = [];\n    for (let i = 0; i < colorAttachmentsCount; i++) {\n      const colorTexture = t.createTexture();\n      colorAttachments.push(t.getColorAttachment(colorTexture));\n    }\n\n    t.tryRenderPass(_success, { colorAttachments });\n  });\n\ng.test('attachments,same_size')\n  .desc(\n    `\n  Test that attachments have the same size. Otherwise, a validation error should be generated.\n    - Succeed if all attachments have the same size.\n    - Fail if one of the color attachments has a different size.\n    - Fail if the depth stencil attachment has a different size.\n  `\n  )\n  .fn(async t => {\n    const colorTexture1x1A = t.createTexture({ width: 1, height: 1, format: 'rgba8unorm' });\n    const colorTexture1x1B = t.createTexture({ width: 1, height: 1, format: 'rgba8unorm' });\n    const colorTexture2x2 = t.createTexture({ width: 2, height: 2, format: 'rgba8unorm' });\n    const depthStencilTexture1x1 = t.createTexture({\n      width: 1,\n      height: 1,\n      format: 'depth24plus-stencil8',\n    });\n    const depthStencilTexture2x2 = t.createTexture({\n      width: 2,\n      height: 2,\n      format: 'depth24plus-stencil8',\n    });\n\n    {\n      // Control case: all the same size (1x1)\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [\n          t.getColorAttachment(colorTexture1x1A),\n          t.getColorAttachment(colorTexture1x1B),\n        ],\n        depthStencilAttachment: t.getDepthStencilAttachment(depthStencilTexture1x1),\n      };\n\n      t.tryRenderPass(true, descriptor);\n    }\n    {\n      // One of the color attachments has a different size\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [\n          t.getColorAttachment(colorTexture1x1A),\n          t.getColorAttachment(colorTexture2x2),\n        ],\n      };\n\n      t.tryRenderPass(false, descriptor);\n    }\n    {\n      // The depth stencil attachment has a different size\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [\n          t.getColorAttachment(colorTexture1x1A),\n          t.getColorAttachment(colorTexture1x1B),\n        ],\n        depthStencilAttachment: t.getDepthStencilAttachment(depthStencilTexture2x2),\n      };\n\n      t.tryRenderPass(false, descriptor);\n    }\n  });\n\ng.test('attachments,color_depth_mismatch')\n  .desc(`Test that attachments match whether they are used for color or depth stencil.`)\n  .fn(async t => {\n    const colorTexture = t.createTexture({ format: 'rgba8unorm' });\n    const depthStencilTexture = t.createTexture({ format: 'depth24plus-stencil8' });\n\n    {\n      // Using depth-stencil for color\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [t.getColorAttachment(depthStencilTexture)],\n      };\n\n      t.tryRenderPass(false, descriptor);\n    }\n    {\n      // Using color for depth-stencil\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [],\n        depthStencilAttachment: t.getDepthStencilAttachment(colorTexture),\n      };\n\n      t.tryRenderPass(false, descriptor);\n    }\n  });\n\ng.test('attachments,layer_count')\n  .desc(\n    `\n  Test the layer counts for color or depth stencil.\n    - Fail if using 2D array texture view with arrayLayerCount > 1.\n    - Succeed if using 2D array texture view that covers the first layer of the texture.\n    - Succeed if using 2D array texture view that covers the last layer for depth stencil.\n  `\n  )\n  .paramsSimple([\n    { arrayLayerCount: 5, baseArrayLayer: 0, _success: false },\n    { arrayLayerCount: 1, baseArrayLayer: 0, _success: true },\n    { arrayLayerCount: 1, baseArrayLayer: 9, _success: true },\n  ])\n  .fn(async t => {\n    const { arrayLayerCount, baseArrayLayer, _success } = t.params;\n\n    const ARRAY_LAYER_COUNT = 10;\n    const MIP_LEVEL_COUNT = 1;\n    const COLOR_FORMAT = 'rgba8unorm';\n    const DEPTH_STENCIL_FORMAT = 'depth24plus-stencil8';\n\n    const colorTexture = t.createTexture({\n      format: COLOR_FORMAT,\n      width: 32,\n      height: 32,\n      mipLevelCount: MIP_LEVEL_COUNT,\n      arrayLayerCount: ARRAY_LAYER_COUNT,\n    });\n    const depthStencilTexture = t.createTexture({\n      format: DEPTH_STENCIL_FORMAT,\n      width: 32,\n      height: 32,\n      mipLevelCount: MIP_LEVEL_COUNT,\n      arrayLayerCount: ARRAY_LAYER_COUNT,\n    });\n\n    const baseTextureViewDescriptor: GPUTextureViewDescriptor = {\n      dimension: '2d-array',\n      baseArrayLayer,\n      arrayLayerCount,\n      baseMipLevel: 0,\n      mipLevelCount: MIP_LEVEL_COUNT,\n    };\n\n    {\n      // Check 2D array texture view for color\n      const textureViewDescriptor: GPUTextureViewDescriptor = {\n        ...baseTextureViewDescriptor,\n        format: COLOR_FORMAT,\n      };\n\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [t.getColorAttachment(colorTexture, textureViewDescriptor)],\n      };\n\n      t.tryRenderPass(_success, descriptor);\n    }\n    {\n      // Check 2D array texture view for depth stencil\n      const textureViewDescriptor: GPUTextureViewDescriptor = {\n        ...baseTextureViewDescriptor,\n        format: DEPTH_STENCIL_FORMAT,\n      };\n\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [],\n        depthStencilAttachment: t.getDepthStencilAttachment(\n          depthStencilTexture,\n          textureViewDescriptor\n        ),\n      };\n\n      t.tryRenderPass(_success, descriptor);\n    }\n  });\n\ng.test('attachments,mip_level_count')\n  .desc(\n    `\n  Test the mip level count for color or depth stencil.\n    - Fail if using 2D texture view with mipLevelCount > 1.\n    - Succeed if using 2D texture view that covers the first level of the texture.\n    - Succeed if using 2D texture view that covers the last level of the texture.\n  `\n  )\n  .paramsSimple([\n    { mipLevelCount: 2, baseMipLevel: 0, _success: false },\n    { mipLevelCount: 1, baseMipLevel: 0, _success: true },\n    { mipLevelCount: 1, baseMipLevel: 3, _success: true },\n  ])\n  .fn(async t => {\n    const { mipLevelCount, baseMipLevel, _success } = t.params;\n\n    const ARRAY_LAYER_COUNT = 1;\n    const MIP_LEVEL_COUNT = 4;\n    const COLOR_FORMAT = 'rgba8unorm';\n    const DEPTH_STENCIL_FORMAT = 'depth24plus-stencil8';\n\n    const colorTexture = t.createTexture({\n      format: COLOR_FORMAT,\n      width: 32,\n      height: 32,\n      mipLevelCount: MIP_LEVEL_COUNT,\n      arrayLayerCount: ARRAY_LAYER_COUNT,\n    });\n    const depthStencilTexture = t.createTexture({\n      format: DEPTH_STENCIL_FORMAT,\n      width: 32,\n      height: 32,\n      mipLevelCount: MIP_LEVEL_COUNT,\n      arrayLayerCount: ARRAY_LAYER_COUNT,\n    });\n\n    const baseTextureViewDescriptor: GPUTextureViewDescriptor = {\n      dimension: '2d',\n      baseArrayLayer: 0,\n      arrayLayerCount: ARRAY_LAYER_COUNT,\n      baseMipLevel,\n      mipLevelCount,\n    };\n\n    {\n      // Check 2D texture view for color\n      const textureViewDescriptor: GPUTextureViewDescriptor = {\n        ...baseTextureViewDescriptor,\n        format: COLOR_FORMAT,\n      };\n\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [t.getColorAttachment(colorTexture, textureViewDescriptor)],\n      };\n\n      t.tryRenderPass(_success, descriptor);\n    }\n    {\n      // Check 2D texture view for depth stencil\n      const textureViewDescriptor: GPUTextureViewDescriptor = {\n        ...baseTextureViewDescriptor,\n        format: DEPTH_STENCIL_FORMAT,\n      };\n\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [],\n        depthStencilAttachment: t.getDepthStencilAttachment(\n          depthStencilTexture,\n          textureViewDescriptor\n        ),\n      };\n\n      t.tryRenderPass(_success, descriptor);\n    }\n  });\n\ng.test('color_attachments,non_multisampled')\n  .desc(\n    `\n  Test that setting a resolve target is invalid if the color attachments is non multisampled.\n  `\n  )\n  .fn(async t => {\n    const colorTexture = t.createTexture({ sampleCount: 1 });\n    const resolveTargetTexture = t.createTexture({ sampleCount: 1 });\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [\n        {\n          view: colorTexture.createView(),\n          resolveTarget: resolveTargetTexture.createView(),\n          clearValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    };\n\n    t.tryRenderPass(false, descriptor);\n  });\n\ng.test('color_attachments,sample_count')\n  .desc(\n    `\n  Test the usages of multisampled textures for color attachments.\n    - Succeed if using a multisampled color attachment without setting a resolve target.\n    - Fail if using multiple color attachments with different sample counts.\n  `\n  )\n  .fn(async t => {\n    const colorTexture = t.createTexture({ sampleCount: 1 });\n    const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n\n    {\n      // It is allowed to use a multisampled color attachment without setting resolve target\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [t.getColorAttachment(multisampledColorTexture)],\n      };\n      t.tryRenderPass(true, descriptor);\n    }\n    {\n      // It is not allowed to use multiple color attachments with different sample counts\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [\n          t.getColorAttachment(colorTexture),\n          t.getColorAttachment(multisampledColorTexture),\n        ],\n      };\n\n      t.tryRenderPass(false, descriptor);\n    }\n  });\n\ng.test('resolveTarget,sample_count')\n  .desc(\n    `\n  Test that using multisampled resolve target is invalid for color attachments.\n  `\n  )\n  .fn(async t => {\n    const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n    const multisampledResolveTargetTexture = t.createTexture({ sampleCount: 4 });\n\n    const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n    colorAttachment.resolveTarget = multisampledResolveTargetTexture.createView();\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [colorAttachment],\n    };\n\n    t.tryRenderPass(false, descriptor);\n  });\n\ng.test('resolveTarget,array_layer_count')\n  .desc(\n    `\n  Test that using a resolve target with array layer count is greater than 1 is invalid for color\n  attachments.\n  `\n  )\n  .fn(async t => {\n    const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n    const resolveTargetTexture = t.createTexture({ arrayLayerCount: 2 });\n\n    const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n    colorAttachment.resolveTarget = resolveTargetTexture.createView({ dimension: '2d-array' });\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [colorAttachment],\n    };\n\n    t.tryRenderPass(false, descriptor);\n  });\n\ng.test('resolveTarget,mipmap_level_count')\n  .desc(\n    `\n  Test that using a resolve target with that mipmap level count is greater than 1 is invalid for\n  color attachments.\n  `\n  )\n  .fn(async t => {\n    const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n    const resolveTargetTexture = t.createTexture({ mipLevelCount: 2 });\n\n    const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n    colorAttachment.resolveTarget = resolveTargetTexture.createView();\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [colorAttachment],\n    };\n\n    t.tryRenderPass(false, descriptor);\n  });\n\ng.test('resolveTarget,usage')\n  .desc(\n    `\n  Test that using a resolve target whose usage is not RENDER_ATTACHMENT is invalid for color\n  attachments.\n  `\n  )\n  .paramsSimple([\n    { usage: GPUConst.TextureUsage.COPY_SRC | GPUConst.TextureUsage.COPY_DST },\n    { usage: GPUConst.TextureUsage.STORAGE_BINDING | GPUConst.TextureUsage.TEXTURE_BINDING },\n    { usage: GPUConst.TextureUsage.STORAGE_BINDING | GPUConst.TextureUsage.STORAGE },\n    { usage: GPUConst.TextureUsage.RENDER_ATTACHMENT | GPUConst.TextureUsage.TEXTURE_BINDING },\n  ])\n  .fn(async t => {\n    const { usage } = t.params;\n\n    const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n    const resolveTargetTexture = t.createTexture({ usage });\n\n    const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n    colorAttachment.resolveTarget = resolveTargetTexture.createView();\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [colorAttachment],\n    };\n\n    const isValid = usage & GPUConst.TextureUsage.RENDER_ATTACHMENT ? true : false;\n    t.tryRenderPass(isValid, descriptor);\n  });\n\ng.test('resolveTarget,error_state')\n  .desc(`Test that a resolve target that has a error is invalid for color attachments.`)\n  .fn(async t => {\n    const ARRAY_LAYER_COUNT = 1;\n\n    const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n    const resolveTargetTexture = t.createTexture({ arrayLayerCount: ARRAY_LAYER_COUNT });\n\n    const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n    t.expectValidationError(() => {\n      colorAttachment.resolveTarget = resolveTargetTexture.createView({\n        dimension: '2d',\n        format: 'rgba8unorm',\n        baseArrayLayer: ARRAY_LAYER_COUNT + 1,\n      });\n    });\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [colorAttachment],\n    };\n\n    t.tryRenderPass(false, descriptor);\n  });\n\ng.test('resolveTarget,single_sample_count')\n  .desc(\n    `\n  Test that a resolve target that has multi sample color attachment and a single resolve target is\n  valid.\n  `\n  )\n  .fn(async t => {\n    const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n    const resolveTargetTexture = t.createTexture({ sampleCount: 1 });\n\n    const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n    colorAttachment.resolveTarget = resolveTargetTexture.createView();\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [colorAttachment],\n    };\n\n    t.tryRenderPass(true, descriptor);\n  });\n\ng.test('resolveTarget,different_format')\n  .desc(`Test that a resolve target that has a different format is invalid.`)\n  .fn(async t => {\n    const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n    const resolveTargetTexture = t.createTexture({ format: 'bgra8unorm' });\n\n    const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n    colorAttachment.resolveTarget = resolveTargetTexture.createView();\n\n    const descriptor: GPURenderPassDescriptor = {\n      colorAttachments: [colorAttachment],\n    };\n\n    t.tryRenderPass(false, descriptor);\n  });\n\ng.test('resolveTarget,different_size')\n  .desc(\n    `\n  Test that a resolve target that has a different size with the color attachment is invalid.\n  `\n  )\n  .fn(async t => {\n    const size = 16;\n    const multisampledColorTexture = t.createTexture({ width: size, height: size, sampleCount: 4 });\n    const resolveTargetTexture = t.createTexture({\n      width: size * 2,\n      height: size * 2,\n      mipLevelCount: 2,\n    });\n\n    {\n      const resolveTargetTextureView = resolveTargetTexture.createView({\n        baseMipLevel: 0,\n        mipLevelCount: 1,\n      });\n\n      const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n      colorAttachment.resolveTarget = resolveTargetTextureView;\n\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [colorAttachment],\n      };\n\n      t.tryRenderPass(false, descriptor);\n    }\n    {\n      const resolveTargetTextureView = resolveTargetTexture.createView({ baseMipLevel: 1 });\n\n      const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n      colorAttachment.resolveTarget = resolveTargetTextureView;\n\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [colorAttachment],\n      };\n\n      t.tryRenderPass(true, descriptor);\n    }\n  });\n\ng.test('depth_stencil_attachment,sample_counts_mismatch')\n  .desc(\n    `\n  Test that the depth stencil attachment that has different number of samples with the color\n  attachment is invalid.\n  `\n  )\n  .fn(async t => {\n    const multisampledDepthStencilTexture = t.createTexture({\n      sampleCount: 4,\n      format: 'depth24plus-stencil8',\n    });\n\n    {\n      // It is not allowed to use a depth stencil attachment whose sample count is different from\n      // the one of the color attachment.\n      const depthStencilTexture = t.createTexture({\n        sampleCount: 1,\n        format: 'depth24plus-stencil8',\n      });\n      const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [t.getColorAttachment(multisampledColorTexture)],\n        depthStencilAttachment: t.getDepthStencilAttachment(depthStencilTexture),\n      };\n\n      t.tryRenderPass(false, descriptor);\n    }\n    {\n      const colorTexture = t.createTexture({ sampleCount: 1 });\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [t.getColorAttachment(colorTexture)],\n        depthStencilAttachment: t.getDepthStencilAttachment(multisampledDepthStencilTexture),\n      };\n\n      t.tryRenderPass(false, descriptor);\n    }\n    {\n      // It is allowed to use a multisampled depth stencil attachment whose sample count is equal to\n      // the one of the color attachment.\n      const multisampledColorTexture = t.createTexture({ sampleCount: 4 });\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [t.getColorAttachment(multisampledColorTexture)],\n        depthStencilAttachment: t.getDepthStencilAttachment(multisampledDepthStencilTexture),\n      };\n\n      t.tryRenderPass(true, descriptor);\n    }\n    {\n      // It is allowed to use a multisampled depth stencil attachment with no color attachment.\n      const descriptor: GPURenderPassDescriptor = {\n        colorAttachments: [],\n        depthStencilAttachment: t.getDepthStencilAttachment(multisampledDepthStencilTexture),\n      };\n\n      t.tryRenderPass(true, descriptor);\n    }\n  });\n\ng.test('depth_stencil_attachment')\n  .desc(\n    `\n  Test GPURenderPassDepthStencilAttachment Usage:\n    - depthReadOnly and stencilReadOnly must match if the format is a combined depth-stencil format.\n    - depthLoadOp and depthStoreOp must be provided iff the format has a depth aspect and\n      depthReadOnly is not true.\n    - stencilLoadOp and stencilStoreOp must be provided iff the format has a stencil aspect and\n      stencilReadOnly is not true.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('format', kDepthStencilFormats)\n      .beginSubcases()\n      .combine('depthReadOnly', [false, true])\n      .combine('stencilReadOnly', [false, true])\n      .combine('setDepthLoadStoreOp', [false, true])\n      .combine('setStencilLoadStoreOp', [false, true])\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n  })\n  .fn(async t => {\n    const {\n      format,\n      depthReadOnly,\n      stencilReadOnly,\n      setDepthLoadStoreOp,\n      setStencilLoadStoreOp,\n    } = t.params;\n\n    let isValid = true;\n    const info = kTextureFormatInfo[format];\n    if (info.depth && info.stencil) {\n      isValid &&= depthReadOnly === stencilReadOnly;\n    }\n\n    if (info.depth && !depthReadOnly) {\n      isValid &&= setDepthLoadStoreOp;\n    } else {\n      isValid &&= !setDepthLoadStoreOp;\n    }\n\n    if (info.stencil && !stencilReadOnly) {\n      isValid &&= setStencilLoadStoreOp;\n    } else {\n      isValid &&= !setStencilLoadStoreOp;\n    }\n\n    const depthStencilAttachment: GPURenderPassDepthStencilAttachment = {\n      view: t.createTexture({ format }).createView(),\n      depthReadOnly,\n      stencilReadOnly,\n    };\n\n    if (setDepthLoadStoreOp) {\n      depthStencilAttachment.depthLoadOp = 'clear';\n      depthStencilAttachment.depthStoreOp = 'store';\n    }\n    if (setStencilLoadStoreOp) {\n      depthStencilAttachment.stencilLoadOp = 'clear';\n      depthStencilAttachment.stencilStoreOp = 'store';\n    }\n\n    const descriptor = {\n      colorAttachments: [t.getColorAttachment(t.createTexture())],\n      depthStencilAttachment,\n    };\n\n    t.tryRenderPass(isValid, descriptor);\n  });\n\ng.test('depth_stencil_attachment,depth_clear_value')\n  .desc(\n    `\n  Test that depthClearValue is invalid if the value is out of the range(0.0 and 1.0) only when\n  depthLoadOp is 'clear'.\n  `\n  )\n  .params(u =>\n    u\n      .combine('depthLoadOp', ['load', 'clear', undefined] as const)\n      .combineWithParams([\n        { depthClearValue: -1.0 },\n        { depthClearValue: 0.0 },\n        { depthClearValue: 0.5 },\n        { depthClearValue: 1.0 },\n        { depthClearValue: 1.5 },\n      ])\n  )\n  .fn(t => {\n    const { depthLoadOp, depthClearValue } = t.params;\n\n    const depthStencilTexture = t.createTexture({\n      format: depthLoadOp === undefined ? 'stencil8' : 'depth24plus-stencil8',\n    });\n    const depthStencilAttachment = t.getDepthStencilAttachment(depthStencilTexture);\n    depthStencilAttachment.depthClearValue = depthClearValue;\n    depthStencilAttachment.depthLoadOp = depthLoadOp;\n    if (depthLoadOp === undefined) {\n      depthStencilAttachment.depthStoreOp = undefined;\n    }\n\n    const descriptor = {\n      colorAttachments: [t.getColorAttachment(t.createTexture())],\n      depthStencilAttachment,\n    };\n\n    const isValid = !(depthLoadOp === 'clear' && (depthClearValue < 0.0 || depthClearValue > 1.0));\n\n    t.tryRenderPass(isValid, descriptor);\n  });\n\ng.test('resolveTarget,format_supports_resolve')\n  .desc(\n    `\n  For all formats that support 'multisample', test that they can be used as a resolveTarget\n  if and only if they support 'resolve'.\n  `\n  )\n  .params(u =>\n    u\n      .combine('format', kRenderableColorTextureFormats)\n      .filter(t => kTextureFormatInfo[t.format].multisample)\n  )\n  .fn(async t => {\n    const { format } = t.params;\n    const multisampledColorTexture = t.createTexture({ format, sampleCount: 4 });\n    const resolveTarget = t.createTexture({ format });\n\n    const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n    colorAttachment.resolveTarget = resolveTarget.createView();\n\n    t.tryRenderPass(kTextureFormatInfo[format].resolve, {\n      colorAttachments: [colorAttachment],\n    });\n  });\n\ng.test('timestampWrites,query_set_type')\n  .desc(\n    `\n  Test that all entries of the timestampWrites must have type 'timestamp'. If all query types are\n  not 'timestamp', a validation error should be generated.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('queryTypeA', kQueryTypes)\n      .combine('queryTypeB', kQueryTypes)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase(['timestamp-query']);\n  })\n  .fn(async t => {\n    const { queryTypeA, queryTypeB } = t.params;\n\n    const timestampWriteA = {\n      querySet: t.device.createQuerySet({ type: queryTypeA, count: 1 }),\n      queryIndex: 0,\n      location: 'beginning' as const,\n    };\n\n    const timestampWriteB = {\n      querySet: t.device.createQuerySet({ type: queryTypeB, count: 1 }),\n      queryIndex: 0,\n      location: 'end' as const,\n    };\n\n    const isValid = queryTypeA === 'timestamp' && queryTypeB === 'timestamp';\n\n    const colorTexture = t.createTexture();\n    const descriptor = {\n      colorAttachments: [t.getColorAttachment(colorTexture)],\n      timestampWrites: [timestampWriteA, timestampWriteB],\n    };\n\n    t.tryRenderPass(isValid, descriptor);\n  });\n\ng.test('timestamp_writes_location')\n  .desc('Test that entries in timestampWrites do not have the same location.')\n  .params(u =>\n    u //\n      .combine('locationA', ['beginning', 'end'] as const)\n      .combine('locationB', ['beginning', 'end'] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase(['timestamp-query']);\n  })\n  .fn(async t => {\n    const { locationA, locationB } = t.params;\n\n    const querySet = t.device.createQuerySet({\n      type: 'timestamp',\n      count: 2,\n    });\n\n    const timestampWriteA = {\n      querySet,\n      queryIndex: 0,\n      location: locationA,\n    };\n\n    const timestampWriteB = {\n      querySet,\n      queryIndex: 1,\n      location: locationB,\n    };\n\n    const isValid = locationA !== locationB;\n\n    const colorTexture = t.createTexture({ format: 'rgba8unorm' });\n    const descriptor = {\n      colorAttachments: [t.getColorAttachment(colorTexture)],\n      timestampWrites: [timestampWriteA, timestampWriteB],\n    };\n\n    t.tryRenderPass(isValid, descriptor);\n  });\n\ng.test('timestampWrite,query_index')\n  .desc(`Test that querySet.count should be greater than timestampWrite.queryIndex.`)\n  .params(u => u.combine('queryIndex', [0, 1, 2, 3]))\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase(['timestamp-query']);\n  })\n  .fn(async t => {\n    const { queryIndex } = t.params;\n\n    const querySetCount = 2;\n\n    const timestampWrite = {\n      querySet: t.device.createQuerySet({ type: 'timestamp', count: querySetCount }),\n      queryIndex,\n      location: 'beginning' as const,\n    };\n\n    const isValid = queryIndex < querySetCount;\n\n    const colorTexture = t.createTexture();\n    const descriptor = {\n      colorAttachments: [t.getColorAttachment(colorTexture)],\n      timestampWrites: [timestampWrite],\n    };\n\n    t.tryRenderPass(isValid, descriptor);\n  });\n\ng.test('timestampWrite,same_query_index')\n  .desc(\n    `\n  Test that timestampWrites is invalid if each entry has the same queryIndex in the same querySet.\n  `\n  )\n  .params(u =>\n    u //\n      .combine('queryIndexA', [0, 1])\n      .combine('queryIndexB', [0, 1])\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase(['timestamp-query']);\n  })\n  .fn(async t => {\n    const { queryIndexA, queryIndexB } = t.params;\n\n    const querySet = t.device.createQuerySet({\n      type: 'timestamp',\n      count: 2,\n    });\n\n    const timestampWriteA = {\n      querySet,\n      queryIndex: queryIndexA,\n      location: 'beginning' as const,\n    };\n\n    const timestampWriteB = {\n      querySet,\n      queryIndex: queryIndexB,\n      location: 'end' as const,\n    };\n\n    const isValid = queryIndexA !== queryIndexB;\n\n    const colorTexture = t.createTexture();\n    const descriptor = {\n      colorAttachments: [t.getColorAttachment(colorTexture)],\n      timestampWrites: [timestampWriteA, timestampWriteB],\n    };\n\n    t.tryRenderPass(isValid, descriptor);\n  });\n\ng.test('occlusionQuerySet,query_set_type')\n  .desc(`Test that occlusionQuerySet must have type 'occlusion'.`)\n  .params(u => u.combine('queryType', kQueryTypes))\n  .beforeAllSubcases(t => {\n    if (t.params.queryType === 'timestamp') {\n      t.selectDeviceOrSkipTestCase(['timestamp-query']);\n    }\n  })\n  .fn(async t => {\n    const { queryType } = t.params;\n\n    const querySet = t.device.createQuerySet({\n      type: queryType,\n      count: 1,\n    });\n\n    const colorTexture = t.createTexture();\n    const descriptor = {\n      colorAttachments: [t.getColorAttachment(colorTexture)],\n      occlusionQuerySet: querySet,\n    };\n\n    const isValid = queryType === 'occlusion';\n    t.tryRenderPass(isValid, descriptor);\n  });\n"],"file":"render_pass_descriptor.spec.js"}