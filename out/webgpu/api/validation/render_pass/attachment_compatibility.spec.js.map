{"version":3,"file":"attachment_compatibility.spec.js","names":["description","makeTestGroup","range","kRegularTextureFormats","kSizedDepthStencilFormats","kUnsizedDepthStencilFormats","kTextureSampleCounts","kMaxColorAttachments","kTextureFormatInfo","getFeaturesForFormats","filterFormatsByFeature","ValidationTest","kColorAttachmentCounts","i","kColorAttachments","map","count","result","Array","fill","concat","r","cases","j","push","flat","kDepthStencilAttachmentFormats","undefined","kFeaturesForDepthStencilAttachmentFormats","F","createAttachmentTextureView","format","sampleCount","device","createTexture","size","usage","GPUTextureUsage","RENDER_ATTACHMENT","createView","createColorAttachment","view","clearValue","loadOp","storeOp","createDepthAttachment","attachment","depth","depthClearValue","depthLoadOp","depthStoreOp","stencil","stencilClearValue","stencilLoadOp","stencilStoreOp","createRenderPipeline","targets","depthStencil","cullMode","layout","vertex","module","createShaderModule","code","entryPoint","fragment","primitive","topology","multisample","g","kColorAttachmentFormats","filter","info","color","renderable","test","desc","paramsSubcasesOnly","u","combine","fn","t","passFormat","bundleFormat","params","bundleEncoder","createRenderBundleEncoder","colorFormats","bundle","finish","encoder","validateFinishAndSubmit","createEncoder","pass","beginRenderPass","colorAttachments","executeBundles","end","passCount","bundleCount","beginSubcases","p","attachmentCount","passAttachments","length","bundleAttachments","every","v","expand","passFeature","bundleFeature","beforeAllSubcases","selectDeviceOrSkipTestCase","depthStencilFormat","depthStencilAttachment","renderSampleCount","bundleSampleCount","selectMismatchedDeviceOrSkipTestCase","mismatched","sourceDevice","mismatchedDevice","encoderType","encoderFormat","pipelineFormat","pipeline","writeMask","attachmentInfo","setPipeline","encoderCount","pipelineCount","encoderAttachments","pipelineAttachments","colorTargets","encoderFormatFeature","pipelineFormatFeature","depthCompare","depthWriteEnabled","kStencilFaceStates","failOp","depthFailOp","passOp","depthStencilInfo","depthReadOnly","stencilReadOnly","stencilFront","stencilBack","selectDeviceForTextureFormatOrSkipTestCase","stencilWriteMask","writesDepth","writesStencil","isValid","attachmentType","encoderSampleCount","pipelineSampleCount"],"sources":["../../../../../src/webgpu/api/validation/render_pass/attachment_compatibility.spec.ts"],"sourcesContent":["export const description = `\nValidation for attachment compatibility between render passes, bundles, and pipelines\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { range } from '../../../../common/util/util.js';\nimport {\n  kRegularTextureFormats,\n  kSizedDepthStencilFormats,\n  kUnsizedDepthStencilFormats,\n  kTextureSampleCounts,\n  kMaxColorAttachments,\n  kTextureFormatInfo,\n  getFeaturesForFormats,\n  filterFormatsByFeature,\n} from '../../../capability_info.js';\nimport { ValidationTest } from '../validation_test.js';\n\nconst kColorAttachmentCounts = range(kMaxColorAttachments, i => i + 1);\nconst kColorAttachments = kColorAttachmentCounts\n  .map(count => {\n    // generate cases with 0..1 null attachments at different location\n    // e.g. count == 2\n    // [\n    //    [1, 1],\n    //    [0, 1],\n    //    [1, 0],\n    // ]\n    // 0 (false) means null attachment, 1 (true) means non-null attachment, at the slot\n\n    // Special cases: we need at least a color attachment, when we don't have depth stencil attachment\n    if (count === 1) {\n      return [[1]];\n    }\n    if (count === 2) {\n      return [\n        [1, 1],\n        [0, 1],\n        [1, 0],\n      ];\n    }\n\n    // [1, 1, ..., 1]: all color attachment are used\n    let result = [new Array<boolean>(count).fill(true)];\n\n    // [1, 0, 1, ..., 1]: generate cases with one null attachment at different locations\n    result = result.concat(\n      range(count, i => {\n        const r = new Array<boolean>(count).fill(true);\n        r[i] = false;\n        return r;\n      })\n    );\n\n    // [1, 0, 1, ..., 0, 1]: generate cases with two null attachments at different locations\n    // To reduce test run time, limit the attachment count to <= 4\n    if (count <= 4) {\n      result = result.concat(\n        range(count - 1, i => {\n          const cases = [] as boolean[][];\n          for (let j = i + 1; j < count; j++) {\n            const r = new Array<boolean>(count).fill(true);\n            r[i] = false;\n            r[j] = false;\n            cases.push(r);\n          }\n          return cases;\n        }).flat()\n      );\n    }\n\n    return result;\n  })\n  .flat() as boolean[][];\n\nconst kDepthStencilAttachmentFormats = [\n  undefined,\n  ...kSizedDepthStencilFormats,\n  ...kUnsizedDepthStencilFormats,\n] as const;\n\nconst kFeaturesForDepthStencilAttachmentFormats = getFeaturesForFormats([\n  ...kSizedDepthStencilFormats,\n  ...kUnsizedDepthStencilFormats,\n]);\n\nclass F extends ValidationTest {\n  createAttachmentTextureView(format: GPUTextureFormat, sampleCount?: number) {\n    return this.device\n      .createTexture({\n        // Size matching the \"arbitrary\" size used by ValidationTest helpers.\n        size: [16, 16, 1],\n        format,\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n        sampleCount,\n      })\n      .createView();\n  }\n\n  createColorAttachment(\n    format: GPUTextureFormat | null,\n    sampleCount?: number\n  ): GPURenderPassColorAttachment | null {\n    return format === null\n      ? null\n      : {\n          view: this.createAttachmentTextureView(format, sampleCount),\n          clearValue: [0, 0, 0, 0],\n          loadOp: 'clear',\n          storeOp: 'store',\n        };\n  }\n\n  createDepthAttachment(\n    format: GPUTextureFormat,\n    sampleCount?: number\n  ): GPURenderPassDepthStencilAttachment {\n    const attachment: GPURenderPassDepthStencilAttachment = {\n      view: this.createAttachmentTextureView(format, sampleCount),\n    };\n    if (kTextureFormatInfo[format].depth) {\n      attachment.depthClearValue = 0;\n      attachment.depthLoadOp = 'clear';\n      attachment.depthStoreOp = 'discard';\n    }\n    if (kTextureFormatInfo[format].stencil) {\n      attachment.stencilClearValue = 1;\n      attachment.stencilLoadOp = 'clear';\n      attachment.stencilStoreOp = 'discard';\n    }\n    return attachment;\n  }\n\n  createRenderPipeline(\n    targets: Iterable<GPUColorTargetState | null>,\n    depthStencil?: GPUDepthStencilState,\n    sampleCount?: number,\n    cullMode?: GPUCullMode\n  ) {\n    return this.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module: this.device.createShaderModule({\n          code: `\n            @vertex fn main() -> @builtin(position) vec4<f32> {\n              return vec4<f32>(0.0, 0.0, 0.0, 0.0);\n            }`,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: this.device.createShaderModule({\n          code: '@fragment fn main() {}',\n        }),\n        entryPoint: 'main',\n        targets,\n      },\n      primitive: { topology: 'triangle-list', cullMode },\n      depthStencil,\n      multisample: { count: sampleCount },\n    });\n  }\n}\n\nexport const g = makeTestGroup(F);\n\nconst kColorAttachmentFormats = kRegularTextureFormats.filter(format => {\n  const info = kTextureFormatInfo[format];\n  return info.color && info.renderable;\n});\n\ng.test('render_pass_and_bundle,color_format')\n  .desc('Test that color attachment formats in render passes and bundles must match.')\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('passFormat', kColorAttachmentFormats)\n      .combine('bundleFormat', kColorAttachmentFormats)\n  )\n  .fn(t => {\n    const { passFormat, bundleFormat } = t.params;\n    const bundleEncoder = t.device.createRenderBundleEncoder({\n      colorFormats: [bundleFormat],\n    });\n    const bundle = bundleEncoder.finish();\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder('non-pass');\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [t.createColorAttachment(passFormat)],\n    });\n    pass.executeBundles([bundle]);\n    pass.end();\n    validateFinishAndSubmit(passFormat === bundleFormat, true);\n  });\n\ng.test('render_pass_and_bundle,color_count')\n  .desc(\n    `\n  Test that the number of color attachments in render passes and bundles must match.\n  `\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('passCount', kColorAttachmentCounts)\n      .combine('bundleCount', kColorAttachmentCounts)\n  )\n  .fn(t => {\n    const { passCount, bundleCount } = t.params;\n    const bundleEncoder = t.device.createRenderBundleEncoder({\n      colorFormats: range(bundleCount, () => 'rgba8uint'),\n    });\n    const bundle = bundleEncoder.finish();\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder('non-pass');\n    const pass = encoder.beginRenderPass({\n      colorAttachments: range(passCount, () => t.createColorAttachment('rgba8uint')),\n    });\n    pass.executeBundles([bundle]);\n    pass.end();\n    validateFinishAndSubmit(passCount === bundleCount, true);\n  });\n\ng.test('render_pass_and_bundle,color_sparse')\n  .desc(\n    `\n  Test that each of color attachments in render passes and bundles must match.\n  `\n  )\n  .params(u =>\n    u //\n      // introduce attachmentCount to make it easier to split the test\n      .combine('attachmentCount', kColorAttachmentCounts)\n      .beginSubcases()\n      .combine('passAttachments', kColorAttachments)\n      .combine('bundleAttachments', kColorAttachments)\n      .filter(\n        p =>\n          p.attachmentCount === p.passAttachments.length &&\n          p.attachmentCount === p.bundleAttachments.length\n      )\n  )\n  .fn(t => {\n    const { passAttachments, bundleAttachments } = t.params;\n    const colorFormats = bundleAttachments.map(i => (i ? 'rgba8uint' : null));\n    const bundleEncoder = t.device.createRenderBundleEncoder({\n      colorFormats,\n    });\n    const bundle = bundleEncoder.finish();\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder('non-pass');\n    const colorAttachments = passAttachments.map(i =>\n      t.createColorAttachment(i ? 'rgba8uint' : null)\n    );\n    const pass = encoder.beginRenderPass({\n      colorAttachments,\n    });\n    pass.executeBundles([bundle]);\n    pass.end();\n    validateFinishAndSubmit(\n      passAttachments.every((v, i) => v === bundleAttachments[i]),\n      true\n    );\n  });\n\ng.test('render_pass_and_bundle,depth_format')\n  .desc('Test that the depth attachment format in render passes and bundles must match.')\n  .params(u =>\n    u //\n      .combine('passFeature', kFeaturesForDepthStencilAttachmentFormats)\n      .combine('bundleFeature', kFeaturesForDepthStencilAttachmentFormats)\n      .beginSubcases()\n      .expand('passFormat', ({ passFeature }) =>\n        filterFormatsByFeature(passFeature, kDepthStencilAttachmentFormats)\n      )\n      .expand('bundleFormat', ({ bundleFeature }) =>\n        filterFormatsByFeature(bundleFeature, kDepthStencilAttachmentFormats)\n      )\n  )\n  .beforeAllSubcases(t => {\n    const { passFeature, bundleFeature } = t.params;\n    t.selectDeviceOrSkipTestCase([passFeature, bundleFeature]);\n  })\n  .fn(t => {\n    const { passFormat, bundleFormat } = t.params;\n\n    const bundleEncoder = t.device.createRenderBundleEncoder({\n      colorFormats: ['rgba8unorm'],\n      depthStencilFormat: bundleFormat,\n    });\n    const bundle = bundleEncoder.finish();\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder('non-pass');\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [t.createColorAttachment('rgba8unorm')],\n      depthStencilAttachment:\n        passFormat !== undefined ? t.createDepthAttachment(passFormat) : undefined,\n    });\n    pass.executeBundles([bundle]);\n    pass.end();\n    validateFinishAndSubmit(passFormat === bundleFormat, true);\n  });\n\ng.test('render_pass_and_bundle,sample_count')\n  .desc('Test that the sample count in render passes and bundles must match.')\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('renderSampleCount', kTextureSampleCounts)\n      .combine('bundleSampleCount', kTextureSampleCounts)\n  )\n  .fn(t => {\n    const { renderSampleCount, bundleSampleCount } = t.params;\n    const bundleEncoder = t.device.createRenderBundleEncoder({\n      colorFormats: ['rgba8unorm'],\n      sampleCount: bundleSampleCount,\n    });\n    const bundle = bundleEncoder.finish();\n    const { encoder, validateFinishAndSubmit } = t.createEncoder('non-pass');\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [t.createColorAttachment('rgba8unorm', renderSampleCount)],\n    });\n    pass.executeBundles([bundle]);\n    pass.end();\n    validateFinishAndSubmit(renderSampleCount === bundleSampleCount, true);\n  });\n\ng.test('render_pass_and_bundle,device_mismatch')\n  .desc('Test that render passes cannot be called with bundles created from another device.')\n  .paramsSubcasesOnly(u => u.combine('mismatched', [true, false]))\n  .beforeAllSubcases(t => {\n    t.selectMismatchedDeviceOrSkipTestCase(undefined);\n  })\n  .fn(t => {\n    const { mismatched } = t.params;\n    const sourceDevice = mismatched ? t.mismatchedDevice : t.device;\n\n    const format = 'r16float';\n    const bundleEncoder = sourceDevice.createRenderBundleEncoder({\n      colorFormats: [format],\n    });\n    const bundle = bundleEncoder.finish();\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder('non-pass');\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [t.createColorAttachment(format)],\n    });\n    pass.executeBundles([bundle]);\n    pass.end();\n    validateFinishAndSubmit(!mismatched, true);\n  });\n\ng.test('render_pass_or_bundle_and_pipeline,color_format')\n  .desc(\n    `\nTest that color attachment formats in render passes or bundles match the pipeline color format.\n`\n  )\n  .params(u =>\n    u\n      .combine('encoderType', ['render pass', 'render bundle'] as const)\n      .beginSubcases()\n      .combine('encoderFormat', kColorAttachmentFormats)\n      .combine('pipelineFormat', kColorAttachmentFormats)\n  )\n  .fn(t => {\n    const { encoderType, encoderFormat, pipelineFormat } = t.params;\n    const pipeline = t.createRenderPipeline([{ format: pipelineFormat, writeMask: 0 }]);\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder(encoderType, {\n      attachmentInfo: { colorFormats: [encoderFormat] },\n    });\n    encoder.setPipeline(pipeline);\n    validateFinishAndSubmit(encoderFormat === pipelineFormat, true);\n  });\n\ng.test('render_pass_or_bundle_and_pipeline,color_count')\n  .desc(\n    `\nTest that the number of color attachments in render passes or bundles match the pipeline color\ncount.\n`\n  )\n  .params(u =>\n    u\n      .combine('encoderType', ['render pass', 'render bundle'] as const)\n      .beginSubcases()\n      .combine('encoderCount', kColorAttachmentCounts)\n      .combine('pipelineCount', kColorAttachmentCounts)\n  )\n  .fn(t => {\n    const { encoderType, encoderCount, pipelineCount } = t.params;\n    const pipeline = t.createRenderPipeline(\n      range(pipelineCount, () => ({ format: 'rgba8uint', writeMask: 0 }))\n    );\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder(encoderType, {\n      attachmentInfo: { colorFormats: range(encoderCount, () => 'rgba8uint') },\n    });\n    encoder.setPipeline(pipeline);\n    validateFinishAndSubmit(encoderCount === pipelineCount, true);\n  });\n\ng.test('render_pass_or_bundle_and_pipeline,color_sparse')\n  .desc(\n    `\nTest that each of color attachments in render passes or bundles match that of the pipeline.\n`\n  )\n  .params(u =>\n    u\n      .combine('encoderType', ['render pass', 'render bundle'] as const)\n      // introduce attachmentCount to make it easier to split the test\n      .combine('attachmentCount', kColorAttachmentCounts)\n      .beginSubcases()\n      .combine('encoderAttachments', kColorAttachments)\n      .combine('pipelineAttachments', kColorAttachments)\n      .filter(\n        p =>\n          p.attachmentCount === p.encoderAttachments.length &&\n          p.attachmentCount === p.pipelineAttachments.length\n      )\n  )\n  .fn(t => {\n    const { encoderType, encoderAttachments, pipelineAttachments } = t.params;\n\n    const colorTargets = pipelineAttachments.map(i =>\n      i ? ({ format: 'rgba8uint', writeMask: 0 } as GPUColorTargetState) : null\n    );\n    const pipeline = t.createRenderPipeline(colorTargets);\n\n    const colorFormats = encoderAttachments.map(i => (i ? 'rgba8uint' : null));\n    const { encoder, validateFinishAndSubmit } = t.createEncoder(encoderType, {\n      attachmentInfo: { colorFormats },\n    });\n    encoder.setPipeline(pipeline);\n    validateFinishAndSubmit(\n      encoderAttachments.every((v, i) => v === pipelineAttachments[i]),\n      true\n    );\n  });\n\ng.test('render_pass_or_bundle_and_pipeline,depth_format')\n  .desc(\n    `\nTest that the depth attachment format in render passes or bundles match the pipeline depth format.\n`\n  )\n  .params(u =>\n    u\n      .combine('encoderType', ['render pass', 'render bundle'] as const)\n      .combine('encoderFormatFeature', kFeaturesForDepthStencilAttachmentFormats)\n      .combine('pipelineFormatFeature', kFeaturesForDepthStencilAttachmentFormats)\n      .beginSubcases()\n      .expand('encoderFormat', ({ encoderFormatFeature }) =>\n        filterFormatsByFeature(encoderFormatFeature, kDepthStencilAttachmentFormats)\n      )\n      .expand('pipelineFormat', ({ pipelineFormatFeature }) =>\n        filterFormatsByFeature(pipelineFormatFeature, kDepthStencilAttachmentFormats)\n      )\n  )\n  .beforeAllSubcases(t => {\n    const { encoderFormatFeature, pipelineFormatFeature } = t.params;\n    t.selectDeviceOrSkipTestCase([encoderFormatFeature, pipelineFormatFeature]);\n  })\n  .fn(t => {\n    const { encoderType, encoderFormat, pipelineFormat } = t.params;\n\n    const pipeline = t.createRenderPipeline(\n      [{ format: 'rgba8unorm', writeMask: 0 }],\n      pipelineFormat !== undefined\n        ? { format: pipelineFormat, depthCompare: 'always', depthWriteEnabled: false }\n        : undefined\n    );\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder(encoderType, {\n      attachmentInfo: { colorFormats: ['rgba8unorm'], depthStencilFormat: encoderFormat },\n    });\n    encoder.setPipeline(pipeline);\n    validateFinishAndSubmit(encoderFormat === pipelineFormat, true);\n  });\n\nconst kStencilFaceStates = [\n  { failOp: 'keep', depthFailOp: 'keep', passOp: 'keep' },\n  { failOp: 'zero', depthFailOp: 'zero', passOp: 'zero' },\n] as GPUStencilFaceState[];\n\ng.test('render_pass_or_bundle_and_pipeline,depth_stencil_read_only_write_state')\n  .desc(\n    `\nTest that the depth stencil read only state in render passes or bundles is compatible with the depth stencil write state of the pipeline.\n`\n  )\n  .params(u =>\n    u\n      .combine('encoderType', ['render pass', 'render bundle'] as const)\n      .combine('format', kDepthStencilAttachmentFormats)\n      .beginSubcases()\n      // pass/bundle state\n      .combine('depthReadOnly', [false, true])\n      .combine('stencilReadOnly', [false, true])\n      .combine('stencilFront', kStencilFaceStates)\n      .combine('stencilBack', kStencilFaceStates)\n      // pipeline state\n      .combine('depthWriteEnabled', [false, true])\n      .combine('stencilWriteMask', [0, 0xffffffff])\n      .combine('cullMode', ['none', 'front', 'back'] as const)\n      .filter(p => {\n        if (p.format) {\n          const depthStencilInfo = kTextureFormatInfo[p.format];\n          // For combined depth/stencil formats the depth and stencil read only state must match\n          // in order to create a valid render bundle or render pass.\n          if (depthStencilInfo.depth && depthStencilInfo.stencil) {\n            if (p.depthReadOnly !== p.stencilReadOnly) {\n              return false;\n            }\n          }\n          // If the format has no depth aspect, the depthReadOnly, depthWriteEnabled of the pipeline must not be true\n          // in order to create a valid render pipeline.\n          if (!depthStencilInfo.depth && p.depthWriteEnabled) {\n            return false;\n          }\n          // If the format has no stencil aspect, the stencil state operation must be 'keep'\n          // in order to create a valid render pipeline.\n          if (\n            !depthStencilInfo.stencil &&\n            (p.stencilFront.failOp !== 'keep' || p.stencilBack.failOp !== 'keep')\n          ) {\n            return false;\n          }\n        }\n        // No depthStencil attachment\n        return true;\n      })\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n  })\n  .fn(t => {\n    const {\n      encoderType,\n      format,\n      depthReadOnly,\n      stencilReadOnly,\n      depthWriteEnabled,\n      stencilWriteMask,\n      cullMode,\n      stencilFront,\n      stencilBack,\n    } = t.params;\n\n    const pipeline = t.createRenderPipeline(\n      [{ format: 'rgba8unorm', writeMask: 0 }],\n      format === undefined\n        ? undefined\n        : {\n            format,\n            depthWriteEnabled,\n            depthCompare: 'always',\n            stencilWriteMask,\n            stencilFront,\n            stencilBack,\n          },\n      1,\n      cullMode\n    );\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder(encoderType, {\n      attachmentInfo: {\n        colorFormats: ['rgba8unorm'],\n        depthStencilFormat: format,\n        depthReadOnly,\n        stencilReadOnly,\n      },\n    });\n    encoder.setPipeline(pipeline);\n\n    let writesDepth = false;\n    let writesStencil = false;\n    if (format) {\n      writesDepth = depthWriteEnabled;\n      if (stencilWriteMask !== 0) {\n        if (\n          cullMode !== 'front' &&\n          (stencilFront.passOp !== 'keep' ||\n            stencilFront.depthFailOp !== 'keep' ||\n            stencilFront.failOp !== 'keep')\n        ) {\n          writesStencil = true;\n        }\n        if (\n          cullMode !== 'back' &&\n          (stencilBack.passOp !== 'keep' ||\n            stencilBack.depthFailOp !== 'keep' ||\n            stencilBack.failOp !== 'keep')\n        ) {\n          writesStencil = true;\n        }\n      }\n    }\n\n    let isValid = true;\n    if (writesDepth) {\n      isValid &&= !depthReadOnly;\n    }\n    if (writesStencil) {\n      isValid &&= !stencilReadOnly;\n    }\n\n    validateFinishAndSubmit(isValid, true);\n  });\n\ng.test('render_pass_or_bundle_and_pipeline,sample_count')\n  .desc(\n    `\nTest that the sample count in render passes or bundles match the pipeline sample count for both color texture and depthstencil texture.\n`\n  )\n  .params(u =>\n    u\n      .combine('encoderType', ['render pass', 'render bundle'] as const)\n      .combine('attachmentType', ['color', 'depthstencil'] as const)\n      .beginSubcases()\n      .combine('encoderSampleCount', kTextureSampleCounts)\n      .combine('pipelineSampleCount', kTextureSampleCounts)\n  )\n  .fn(t => {\n    const { encoderType, attachmentType, encoderSampleCount, pipelineSampleCount } = t.params;\n\n    const colorFormats = attachmentType === 'color' ? ['rgba8unorm' as const] : [];\n    const depthStencilFormat =\n      attachmentType === 'depthstencil' ? ('depth24plus-stencil8' as const) : undefined;\n\n    const pipeline = t.createRenderPipeline(\n      colorFormats.map(format => ({ format, writeMask: 0 })),\n      depthStencilFormat\n        ? { format: depthStencilFormat, depthWriteEnabled: false, depthCompare: 'always' }\n        : undefined,\n      pipelineSampleCount\n    );\n\n    const { encoder, validateFinishAndSubmit } = t.createEncoder(encoderType, {\n      attachmentInfo: { colorFormats, depthStencilFormat, sampleCount: encoderSampleCount },\n    });\n    encoder.setPipeline(pipeline);\n    validateFinishAndSubmit(encoderSampleCount === pipelineSampleCount, true);\n  });\n"],"mappings":"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"}