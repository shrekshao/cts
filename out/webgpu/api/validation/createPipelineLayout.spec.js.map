{"version":3,"sources":["../../../../src/webgpu/api/validation/createPipelineLayout.spec.ts"],"names":["description","makeTestGroup","bufferBindingTypeInfo","kBufferBindingTypes","ValidationTest","clone","descriptor","JSON","parse","stringify","g","test","desc","paramsSubcasesOnly","u","combine","fn","t","type","visibility","params","maxDynamic","perPipelineLimitClass","maxDynamicBufferBindings","binding","push","buffer","hasDynamicOffset","maxDynamicBufferBindGroupLayout","device","createBindGroupLayout","entries","goodDescriptor","goodPipelineLayoutDescriptor","bindGroupLayouts","createPipelineLayout","badDescriptor","badPipelineLayoutDescriptor","expectValidationError","bindGroupLayoutDescriptor","maxBindGroupLayouts","map"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA,CAJO,CAMP,SAASC,aAAT,QAA8B,yCAA9B;AACA,SAASC,qBAAT,EAAgCC,mBAAhC,QAA2D,0BAA3D;;AAEA,SAASC,cAAT,QAA+B,sBAA/B;;AAEA,SAASC,KAAT,CAAuDC,UAAvD,EAAyE;AACvE,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeH,UAAf,CAAX,CAAP;AACD;;AAED,OAAO,MAAMI,CAAC,GAAGT,aAAa,CAACG,cAAD,CAAvB;;AAEPM,CAAC,CAACC,IAAF,CAAO,qDAAP;AACGC,IADH;AAEK;AACL;AACA,wFAJA;;AAMGC,kBANH,CAMsB,CAAAC,CAAC;AACnBA,CAAC,CAAC;AAAD,CACEC,OADH,CACW,YADX,EACyB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CADzB;AAEGA,OAFH,CAEW,MAFX,EAEmBZ,mBAFnB,CAPJ;;AAWGa,EAXH,CAWM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEC,IAAF,EAAQC,UAAR,KAAuBF,CAAC,CAACG,MAA/B;AACA,QAAM,EAAEC,UAAF,KAAiBnB,qBAAqB,CAAC,EAAEgB,IAAF,EAAD,CAArB,CAAgCI,qBAAvD;;AAEA,QAAMC,wBAAmD,GAAG,EAA5D;AACA,OAAK,IAAIC,OAAO,GAAG,CAAnB,EAAsBA,OAAO,GAAGH,UAAhC,EAA4CG,OAAO,EAAnD,EAAuD;AACrDD,IAAAA,wBAAwB,CAACE,IAAzB,CAA8B;AAC5BD,MAAAA,OAD4B;AAE5BL,MAAAA,UAF4B;AAG5BO,MAAAA,MAAM,EAAE,EAAER,IAAF,EAAQS,gBAAgB,EAAE,IAA1B,EAHoB,EAA9B;;AAKD;;AAED,QAAMC,+BAA+B,GAAGX,CAAC,CAACY,MAAF,CAASC,qBAAT,CAA+B;AACrEC,IAAAA,OAAO,EAAER,wBAD4D,EAA/B,CAAxC;;;AAIA,QAAMS,cAAc,GAAG;AACrBD,IAAAA,OAAO,EAAE,CAAC,EAAEP,OAAO,EAAE,CAAX,EAAcL,UAAd,EAA0BO,MAAM,EAAE,EAAER,IAAF,EAAQS,gBAAgB,EAAE,KAA1B,EAAlC,EAAD,CADY,EAAvB;;;AAIA,QAAMM,4BAA4B,GAAG;AACnCC,IAAAA,gBAAgB,EAAE;AAChBN,IAAAA,+BADgB;AAEhBX,IAAAA,CAAC,CAACY,MAAF,CAASC,qBAAT,CAA+BE,cAA/B,CAFgB,CADiB,EAArC;;;;AAOA;AACAf,EAAAA,CAAC,CAACY,MAAF,CAASM,oBAAT,CAA8BF,4BAA9B;;AAEA;AACA,QAAMG,aAAa,GAAG/B,KAAK,CAAC2B,cAAD,CAA3B;AACAI,EAAAA,aAAa,CAACL,OAAd,CAAsB,CAAtB,EAAyBL,MAAzB,CAAgCC,gBAAhC,GAAmD,IAAnD;;AAEA,QAAMU,2BAA2B,GAAG;AAClCH,IAAAA,gBAAgB,EAAE;AAChBN,IAAAA,+BADgB;AAEhBX,IAAAA,CAAC,CAACY,MAAF,CAASC,qBAAT,CAA+BM,aAA/B,CAFgB,CADgB,EAApC;;;;AAOAnB,EAAAA,CAAC,CAACqB,qBAAF,CAAwB,MAAM;AAC5BrB,IAAAA,CAAC,CAACY,MAAF,CAASM,oBAAT,CAA8BE,2BAA9B;AACD,GAFD;AAGD,CAxDH;;AA0DA3B,CAAC,CAACC,IAAF,CAAO,wDAAP,EAAiEK,EAAjE,CAAoE,MAAMC,CAAN,IAAW;AAC7E,QAAMsB,yBAAuD,GAAG;AAC9DR,IAAAA,OAAO,EAAE,EADqD,EAAhE;;;AAIA;AACA,QAAMS,mBAAmB,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAaC,GAAb,CAAiB;AAC3CxB,EAAAA,CAAC,CAACY,MAAF,CAASC,qBAAT,CAA+BS,yBAA/B,CAD0B,CAA5B;;;AAIA,QAAMN,4BAA4B,GAAG;AACnCC,IAAAA,gBAAgB,EAAEM,mBADiB,EAArC;;;AAIA;AACAvB,EAAAA,CAAC,CAACY,MAAF,CAASM,oBAAT,CAA8BF,4BAA9B;;AAEA;AACA,QAAMI,2BAA2B,GAAG;AAClCH,IAAAA,gBAAgB,EAAE;AAChB,OAAGM,mBADa;AAEhBvB,IAAAA,CAAC,CAACY,MAAF,CAASC,qBAAT,CAA+BS,yBAA/B,CAFgB,CADgB,EAApC;;;;AAOAtB,EAAAA,CAAC,CAACqB,qBAAF,CAAwB,MAAM;AAC5BrB,IAAAA,CAAC,CAACY,MAAF,CAASM,oBAAT,CAA8BE,2BAA9B;AACD,GAFD;AAGD,CA5BD","sourcesContent":["export const description = `\ncreatePipelineLayout validation tests.\n\nTODO: review existing tests, write descriptions, and make sure tests are complete.\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { bufferBindingTypeInfo, kBufferBindingTypes } from '../../capability_info.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nfunction clone<T extends GPUBindGroupLayoutDescriptor>(descriptor: T): T {\n  return JSON.parse(JSON.stringify(descriptor));\n}\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('number_of_dynamic_buffers_exceeds_the_maximum_value')\n  .desc(\n    `TODO: describe\n\nTODO(#230): Update to enforce per-stage and per-pipeline-layout limits on BGLs as well.`\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('visibility', [0, 2, 4, 6])\n      .combine('type', kBufferBindingTypes)\n  )\n  .fn(async t => {\n    const { type, visibility } = t.params;\n    const { maxDynamic } = bufferBindingTypeInfo({ type }).perPipelineLimitClass;\n\n    const maxDynamicBufferBindings: GPUBindGroupLayoutEntry[] = [];\n    for (let binding = 0; binding < maxDynamic; binding++) {\n      maxDynamicBufferBindings.push({\n        binding,\n        visibility,\n        buffer: { type, hasDynamicOffset: true },\n      });\n    }\n\n    const maxDynamicBufferBindGroupLayout = t.device.createBindGroupLayout({\n      entries: maxDynamicBufferBindings,\n    });\n\n    const goodDescriptor = {\n      entries: [{ binding: 0, visibility, buffer: { type, hasDynamicOffset: false } }],\n    };\n\n    const goodPipelineLayoutDescriptor = {\n      bindGroupLayouts: [\n        maxDynamicBufferBindGroupLayout,\n        t.device.createBindGroupLayout(goodDescriptor),\n      ],\n    };\n\n    // Control case\n    t.device.createPipelineLayout(goodPipelineLayoutDescriptor);\n\n    // Check dynamic buffers exceed maximum in pipeline layout.\n    const badDescriptor = clone(goodDescriptor);\n    badDescriptor.entries[0].buffer.hasDynamicOffset = true;\n\n    const badPipelineLayoutDescriptor = {\n      bindGroupLayouts: [\n        maxDynamicBufferBindGroupLayout,\n        t.device.createBindGroupLayout(badDescriptor),\n      ],\n    };\n\n    t.expectValidationError(() => {\n      t.device.createPipelineLayout(badPipelineLayoutDescriptor);\n    });\n  });\n\ng.test('number_of_bind_group_layouts_exceeds_the_maximum_value').fn(async t => {\n  const bindGroupLayoutDescriptor: GPUBindGroupLayoutDescriptor = {\n    entries: [],\n  };\n\n  // 4 is the maximum number of bind group layouts.\n  const maxBindGroupLayouts = [1, 2, 3, 4].map(() =>\n    t.device.createBindGroupLayout(bindGroupLayoutDescriptor)\n  );\n\n  const goodPipelineLayoutDescriptor = {\n    bindGroupLayouts: maxBindGroupLayouts,\n  };\n\n  // Control case\n  t.device.createPipelineLayout(goodPipelineLayoutDescriptor);\n\n  // Check bind group layouts exceed maximum in pipeline layout.\n  const badPipelineLayoutDescriptor = {\n    bindGroupLayouts: [\n      ...maxBindGroupLayouts,\n      t.device.createBindGroupLayout(bindGroupLayoutDescriptor),\n    ],\n  };\n\n  t.expectValidationError(() => {\n    t.device.createPipelineLayout(badPipelineLayoutDescriptor);\n  });\n});\n"],"file":"createPipelineLayout.spec.js"}