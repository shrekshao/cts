{"version":3,"sources":["../../../../../src/webgpu/api/validation/buffer/destroy.spec.ts"],"names":["description","makeTestGroup","kBufferUsages","GPUConst","ValidationTest","g","test","desc","paramsSubcasesOnly","u","combine","fn","t","usage","params","buf","device","createBuffer","size","destroy","getErrorBuffer","combineWithParams","BufferUsage","COPY_SRC","MAP_WRITE","COPY_DST","MAP_READ","mapMode","MapMode","WRITE","READ","unless","p","mappedAtCreation","undefined","unmapBeforeDestroy","unmap","mapAsync"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAFO,CAIP,SAASC,aAAT,QAA8B,4CAA9B;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,cAAT,QAA+B,uBAA/B;;AAEA,OAAO,MAAMC,CAAC,GAAGJ,aAAa,CAACG,cAAD,CAAvB;;AAEPC,CAAC,CAACC,IAAF,CAAO,YAAP;AACGC,IADH,CACQ,8CADR;AAEGC,kBAFH,CAEsB,CAAAC,CAAC;AACnBA,CAAC,CAAC;AAAD,CACEC,OADH,CACW,OADX,EACoBR,aADpB,CAHJ;;AAMGS,EANH,CAMM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEC,KAAF,KAAYD,CAAC,CAACE,MAApB;AACA,QAAMC,GAAG,GAAGH,CAAC,CAACI,MAAF,CAASC,YAAT,CAAsB;AAChCC,IAAAA,IAAI,EAAE,CAD0B;AAEhCL,IAAAA,KAFgC,EAAtB,CAAZ;;;AAKAE,EAAAA,GAAG,CAACI,OAAJ;AACD,CAdH;;AAgBAd,CAAC,CAACC,IAAF,CAAO,cAAP;AACGC,IADH,CACQ,gFADR;AAEGI,EAFH,CAEM,MAAMC,CAAN,IAAW;AACb,QAAMG,GAAG,GAAGH,CAAC,CAACQ,cAAF,EAAZ;AACAL,EAAAA,GAAG,CAACI,OAAJ;AACD,CALH;;AAOAd,CAAC,CAACC,IAAF,CAAO,OAAP;AACGC,IADH;AAEK;AACL;AACA,0CAJA;;AAMGC,kBANH,CAMsB,CAAAC,CAAC;AACnBA,CAAC,CAAC;AAAD,CACEC,OADH,CACW,kBADX,EAC+B,CAAC,KAAD,EAAQ,IAAR,CAD/B;AAEGW,iBAFH,CAEqB;AACjB,EAAEH,IAAI,EAAE,CAAR,EAAWL,KAAK,EAAEV,QAAQ,CAACmB,WAAT,CAAqBC,QAAvC,EADiB;AAEjB,EAAEL,IAAI,EAAE,CAAR,EAAWL,KAAK,EAAEV,QAAQ,CAACmB,WAAT,CAAqBE,SAArB,GAAiCrB,QAAQ,CAACmB,WAAT,CAAqBC,QAAxE,EAFiB;AAGjB,EAAEL,IAAI,EAAE,CAAR,EAAWL,KAAK,EAAEV,QAAQ,CAACmB,WAAT,CAAqBG,QAArB,GAAgCtB,QAAQ,CAACmB,WAAT,CAAqBI,QAAvE,EAHiB,CAFrB,CAPJ;;;AAeGf,EAfH,CAeM,MAAMC,CAAN,IAAW;AACb,QAAMG,GAAG,GAAGH,CAAC,CAACI,MAAF,CAASC,YAAT,CAAsBL,CAAC,CAACE,MAAxB,CAAZ;;AAEAC,EAAAA,GAAG,CAACI,OAAJ;AACAJ,EAAAA,GAAG,CAACI,OAAJ;AACD,CApBH;;AAsBAd,CAAC,CAACC,IAAF,CAAO,cAAP;AACGC,IADH;AAEK;AACL;AACA,2DAJA;;AAMGC,kBANH,CAMsB,CAAAC,CAAC;AACnBA,CAAC,CAAC;AAAD,CACEC,OADH,CACW,kBADX,EAC+B,CAAC,KAAD,EAAQ,IAAR,CAD/B;AAEGA,OAFH,CAEW,oBAFX,EAEiC,CAAC,KAAD,EAAQ,IAAR,CAFjC;AAGGW,iBAHH,CAGqB;AACjB,EAAER,KAAK,EAAEV,QAAQ,CAACmB,WAAT,CAAqBC,QAA9B,EADiB;AAEjB,EAAEV,KAAK,EAAEV,QAAQ,CAACmB,WAAT,CAAqBE,SAArB,GAAiCrB,QAAQ,CAACmB,WAAT,CAAqBC,QAA/D,EAFiB;AAGjB,EAAEV,KAAK,EAAEV,QAAQ,CAACmB,WAAT,CAAqBG,QAArB,GAAgCtB,QAAQ,CAACmB,WAAT,CAAqBI,QAA9D,EAHiB;AAIjB;AACEb,EAAAA,KAAK,EAAEV,QAAQ,CAACmB,WAAT,CAAqBE,SAArB,GAAiCrB,QAAQ,CAACmB,WAAT,CAAqBC,QAD/D;AAEEI,EAAAA,OAAO,EAAExB,QAAQ,CAACyB,OAAT,CAAiBC,KAF5B,EAJiB;;AAQjB;AACEhB,EAAAA,KAAK,EAAEV,QAAQ,CAACmB,WAAT,CAAqBG,QAArB,GAAgCtB,QAAQ,CAACmB,WAAT,CAAqBI,QAD9D;AAEEC,EAAAA,OAAO,EAAExB,QAAQ,CAACyB,OAAT,CAAiBE,IAF5B,EARiB,CAHrB;;;AAgBGC,MAhBH,CAgBUC,CAAC,IAAIA,CAAC,CAACC,gBAAF,KAAuB,KAAvB,IAAgCD,CAAC,CAACL,OAAF,KAAcO,SAhB7D,CAPJ;;AAyBGvB,EAzBH,CAyBM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEC,KAAF,EAASc,OAAT,EAAkBM,gBAAlB,EAAoCE,kBAApC,KAA2DvB,CAAC,CAACE,MAAnE;AACA,QAAMC,GAAG,GAAGH,CAAC,CAACI,MAAF,CAASC,YAAT,CAAsB;AAChCC,IAAAA,IAAI,EAAE,CAD0B;AAEhCL,IAAAA,KAFgC;AAGhCoB,IAAAA,gBAHgC,EAAtB,CAAZ;;;AAMA,MAAIN,OAAO,KAAKO,SAAhB,EAA2B;AACzB,QAAID,gBAAJ,EAAsB;AACpBlB,MAAAA,GAAG,CAACqB,KAAJ;AACD;AACD,UAAMrB,GAAG,CAACsB,QAAJ,CAAaV,OAAb,CAAN;AACD;AACD,MAAIQ,kBAAJ,EAAwB;AACtBpB,IAAAA,GAAG,CAACqB,KAAJ;AACD;;AAEDrB,EAAAA,GAAG,CAACI,OAAJ;AACD,CA5CH","sourcesContent":["export const description = `\nValidation tests for GPUBuffer.destroy.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { kBufferUsages } from '../../../capability_info.js';\nimport { GPUConst } from '../../../constants.js';\nimport { ValidationTest } from '../validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('all_usages')\n  .desc('Test destroying buffers of every usage type.')\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('usage', kBufferUsages)\n  )\n  .fn(async t => {\n    const { usage } = t.params;\n    const buf = t.device.createBuffer({\n      size: 4,\n      usage,\n    });\n\n    buf.destroy();\n  });\n\ng.test('error_buffer')\n  .desc('Test that error buffers may be destroyed without generating validation errors.')\n  .fn(async t => {\n    const buf = t.getErrorBuffer();\n    buf.destroy();\n  });\n\ng.test('twice')\n  .desc(\n    `Test that destroying a buffer more than once is allowed.\n      - Tests buffers which are mapped at creation or not\n      - Tests buffers with various usages`\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('mappedAtCreation', [false, true])\n      .combineWithParams([\n        { size: 4, usage: GPUConst.BufferUsage.COPY_SRC },\n        { size: 4, usage: GPUConst.BufferUsage.MAP_WRITE | GPUConst.BufferUsage.COPY_SRC },\n        { size: 4, usage: GPUConst.BufferUsage.COPY_DST | GPUConst.BufferUsage.MAP_READ },\n      ])\n  )\n  .fn(async t => {\n    const buf = t.device.createBuffer(t.params);\n\n    buf.destroy();\n    buf.destroy();\n  });\n\ng.test('while_mapped')\n  .desc(\n    `Test destroying buffers while mapped or after being unmapped.\n      - Tests {mappable, unmappable mapAtCreation, mappable mapAtCreation}\n      - Tests while {mapped, mapped at creation, unmapped}`\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combine('mappedAtCreation', [false, true])\n      .combine('unmapBeforeDestroy', [false, true])\n      .combineWithParams([\n        { usage: GPUConst.BufferUsage.COPY_SRC },\n        { usage: GPUConst.BufferUsage.MAP_WRITE | GPUConst.BufferUsage.COPY_SRC },\n        { usage: GPUConst.BufferUsage.COPY_DST | GPUConst.BufferUsage.MAP_READ },\n        {\n          usage: GPUConst.BufferUsage.MAP_WRITE | GPUConst.BufferUsage.COPY_SRC,\n          mapMode: GPUConst.MapMode.WRITE,\n        },\n        {\n          usage: GPUConst.BufferUsage.COPY_DST | GPUConst.BufferUsage.MAP_READ,\n          mapMode: GPUConst.MapMode.READ,\n        },\n      ])\n      .unless(p => p.mappedAtCreation === false && p.mapMode === undefined)\n  )\n  .fn(async t => {\n    const { usage, mapMode, mappedAtCreation, unmapBeforeDestroy } = t.params;\n    const buf = t.device.createBuffer({\n      size: 4,\n      usage,\n      mappedAtCreation,\n    });\n\n    if (mapMode !== undefined) {\n      if (mappedAtCreation) {\n        buf.unmap();\n      }\n      await buf.mapAsync(mapMode);\n    }\n    if (unmapBeforeDestroy) {\n      buf.unmap();\n    }\n\n    buf.destroy();\n  });\n"],"file":"destroy.spec.js"}