{"version":3,"sources":["../../../../src/webgpu/api/validation/createView.spec.ts"],"names":["description","kUnitCaseParamsBuilder","makeTestGroup","unreachable","kTextureAspects","kTextureDimensions","kTextureFormatInfo","kTextureFormats","kTextureViewDimensions","viewCompatible","kResourceStates","getTextureDimensionFromView","reifyTextureViewDescriptor","viewDimensionsForTextureDimension","reifyExtent3D","ValidationTest","g","kLevels","test","desc","params","u","combine","beginSubcases","undefined","fn","t","textureFormat","viewFormat","useViewFormatList","selectDeviceForTextureFormatOrSkipTestCase","blockWidth","blockHeight","compatible","texture","device","createTexture","format","size","usage","GPUTextureUsage","TEXTURE_BINDING","viewFormats","success","expectValidationError","createView","textureDimension","viewDimension","textureDescriptor","dimension","view","reified","aspect","info","depth","stencil","kTextureAndViewDimensions","expand","p","validateCreateViewLayersLevels","tex","textureLevels","mipLevelCount","textureLayers","depthOrArrayLayers","baseMipLevel","arrayLayerCount","baseArrayLayer","d","unless","l","Set","lastArrayLayer","kWidth","viewDescriptor","lastMipLevel","debug","paramsSubcasesOnly","state","createTextureWithState"],"mappings":"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","sourcesContent":["export const description = `createView validation tests.`;\n\nimport { kUnitCaseParamsBuilder } from '../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { unreachable } from '../../../common/util/util.js';\nimport {\n  kTextureAspects,\n  kTextureDimensions,\n  kTextureFormatInfo,\n  kTextureFormats,\n  kTextureViewDimensions,\n  viewCompatible,\n} from '../../capability_info.js';\nimport { kResourceStates } from '../../gpu_test.js';\nimport {\n  getTextureDimensionFromView,\n  reifyTextureViewDescriptor,\n  viewDimensionsForTextureDimension,\n} from '../../util/texture/base.js';\nimport { reifyExtent3D } from '../../util/unions.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\nconst kLevels = 6;\n\ng.test('format')\n  .desc(\n    `Views must have the view format compatible with the base texture, for all {texture format}x{view format}.`\n  )\n  .params(u =>\n    u\n      .combine('textureFormat', kTextureFormats)\n      .beginSubcases()\n      .combine('viewFormat', [undefined, ...kTextureFormats])\n      .combine('useViewFormatList', [false, true])\n  )\n  .fn(async t => {\n    const { textureFormat, viewFormat, useViewFormatList } = t.params;\n    await t.selectDeviceForTextureFormatOrSkipTestCase([textureFormat, viewFormat]);\n    const { blockWidth, blockHeight } = kTextureFormatInfo[textureFormat];\n\n    const compatible = viewFormat === undefined || viewCompatible(textureFormat, viewFormat);\n\n    const texture = t.device.createTexture({\n      format: textureFormat,\n      size: [blockWidth, blockHeight],\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n\n      // This is a test of createView, not createTexture. Don't pass viewFormats here that\n      // are not compatible, as that is tested in createTexture.spec.ts.\n      viewFormats:\n        useViewFormatList && compatible && viewFormat !== undefined ? [viewFormat] : undefined,\n    });\n\n    // Successful if there is no view format, no reinterpretation was required, or the formats are compatible\n    // and is was specified in the viewFormats list.\n    const success =\n      viewFormat === undefined || viewFormat === textureFormat || (compatible && useViewFormatList);\n    t.expectValidationError(() => {\n      texture.createView({ format: viewFormat });\n    }, !success);\n  });\n\ng.test('dimension')\n  .desc(\n    `For all {texture dimension}, {view dimension}, test that they must be compatible:\n  - 1d -> 1d\n  - 2d -> 2d, 2d-array, cube, or cube-array\n  - 3d -> 3d`\n  )\n  .params(u =>\n    u\n      .combine('textureDimension', kTextureDimensions)\n      .combine('viewDimension', [...kTextureViewDimensions, undefined])\n  )\n  .fn(t => {\n    const { textureDimension, viewDimension } = t.params;\n\n    const size = textureDimension === '1d' ? [4] : [4, 4, 6];\n    const textureDescriptor = {\n      format: 'rgba8unorm' as const,\n      dimension: textureDimension,\n      size,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n    const texture = t.device.createTexture(textureDescriptor);\n\n    const view = { dimension: viewDimension };\n    const reified = reifyTextureViewDescriptor(textureDescriptor, view);\n\n    const success = getTextureDimensionFromView(reified.dimension) === textureDimension;\n    t.expectValidationError(() => {\n      texture.createView(view);\n    }, !success);\n  });\n\ng.test('aspect')\n  .desc(\n    `For every {format}x{aspect}, test that the view aspect must exist in the format:\n  - \"all\" is allowed for any format\n  - \"depth-only\" is allowed only for depth and depth-stencil formats\n  - \"stencil-only\" is allowed only for stencil and depth-stencil formats`\n  )\n  .params(u =>\n    u //\n      .combine('format', kTextureFormats)\n      .combine('aspect', kTextureAspects)\n  )\n  .fn(async t => {\n    const { format, aspect } = t.params;\n    await t.selectDeviceForTextureFormatOrSkipTestCase(format);\n    const info = kTextureFormatInfo[format];\n\n    const texture = t.device.createTexture({\n      format,\n      size: [info.blockWidth, info.blockHeight, 1],\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    });\n\n    const success =\n      aspect === 'all' ||\n      (aspect === 'depth-only' && info.depth) ||\n      (aspect === 'stencil-only' && info.stencil);\n    t.expectValidationError(() => {\n      texture.createView({ aspect });\n    }, !success);\n  });\n\nconst kTextureAndViewDimensions = kUnitCaseParamsBuilder\n  .combine('textureDimension', kTextureDimensions)\n  .expand('viewDimension', p => [\n    undefined,\n    ...viewDimensionsForTextureDimension(p.textureDimension),\n  ]);\n\nfunction validateCreateViewLayersLevels(tex: GPUTextureDescriptor, view: GPUTextureViewDescriptor) {\n  const textureLevels = tex.mipLevelCount ?? 1;\n  const textureLayers = tex.dimension === '2d' ? reifyExtent3D(tex.size).depthOrArrayLayers : 1;\n  const reified = reifyTextureViewDescriptor(tex, view);\n\n  let success =\n    reified.mipLevelCount > 0 &&\n    reified.baseMipLevel < textureLevels &&\n    reified.baseMipLevel + reified.mipLevelCount <= textureLevels &&\n    reified.arrayLayerCount > 0 &&\n    reified.baseArrayLayer < textureLayers &&\n    reified.baseArrayLayer + reified.arrayLayerCount <= textureLayers;\n  if (reified.dimension === '1d' || reified.dimension === '2d' || reified.dimension === '3d') {\n    success &&= reified.arrayLayerCount === 1;\n  } else if (reified.dimension === 'cube') {\n    success &&= reified.arrayLayerCount === 6;\n  } else if (reified.dimension === 'cube-array') {\n    success &&= reified.arrayLayerCount % 6 === 0;\n  }\n  return success;\n}\n\ng.test('array_layers')\n  .desc(\n    `For each texture dimension {1d,2d,3d}, for each possible view dimension for that texture\n    dimension (or undefined, which defaults to the texture dimension), test validation of layer\n    counts:\n  - 1d, 2d, and 3d must have exactly 1 layer\n  - 2d-array must have 1 or more layers\n  - cube must have 6 layers\n  - cube-array must have a positive multiple of 6 layers\n  - Defaulting of baseArrayLayer and arrayLayerCount\n  - baseArrayLayer+arrayLayerCount must be within the texture`\n  )\n  .params(u =>\n    kTextureAndViewDimensions\n      .beginSubcases()\n      .expand('textureLayers', ({ textureDimension: d }) => (d === '2d' ? [1, 6, 18] : [1]))\n      .combine('textureLevels', [1, kLevels])\n      .unless(p => p.textureDimension === '1d' && p.textureLevels !== 1)\n      .expand(\n        'baseArrayLayer',\n        ({ textureLayers: l }) => new Set([undefined, 0, 1, 5, 6, 7, l - 1, l, l + 1])\n      )\n      .expand('arrayLayerCount', function* ({ textureLayers: l, baseArrayLayer = 0 }) {\n        yield undefined;\n        for (const lastArrayLayer of new Set([0, 1, 5, 6, 7, l - 1, l, l + 1])) {\n          if (baseArrayLayer <= lastArrayLayer) yield lastArrayLayer - baseArrayLayer;\n        }\n      })\n  )\n  .fn(t => {\n    const {\n      textureDimension,\n      viewDimension,\n      textureLayers,\n      textureLevels,\n      baseArrayLayer,\n      arrayLayerCount,\n    } = t.params;\n\n    const kWidth = 1 << (kLevels - 1); // 32\n    const textureDescriptor: GPUTextureDescriptor = {\n      format: 'rgba8unorm',\n      dimension: textureDimension,\n      size:\n        textureDimension === '1d'\n          ? [kWidth]\n          : textureDimension === '2d'\n          ? [kWidth, kWidth, textureLayers]\n          : textureDimension === '3d'\n          ? [kWidth, kWidth, kWidth]\n          : unreachable(),\n      mipLevelCount: textureLevels,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const viewDescriptor = { dimension: viewDimension, baseArrayLayer, arrayLayerCount };\n    const success = validateCreateViewLayersLevels(textureDescriptor, viewDescriptor);\n\n    const texture = t.device.createTexture(textureDescriptor);\n    t.expectValidationError(() => {\n      texture.createView(viewDescriptor);\n    }, !success);\n  });\n\ng.test('mip_levels')\n  .desc(\n    `Views must have at least one level, and must be within the level of the base texture.\n\n  - mipLevelCount=0 at various baseMipLevel values\n  - Cases where baseMipLevel+mipLevelCount goes past the end of the texture\n  - Cases with baseMipLevel or mipLevelCount undefined (compares against reference defaulting impl)\n  `\n  )\n  .params(u =>\n    kTextureAndViewDimensions\n      .beginSubcases()\n      .combine('textureLevels', [1, kLevels - 2, kLevels])\n      .unless(p => p.textureDimension === '1d' && p.textureLevels !== 1)\n      .expand(\n        'baseMipLevel',\n        ({ textureLevels: l }) => new Set([undefined, 0, 1, 5, 6, 7, l - 1, l, l + 1])\n      )\n      .expand('mipLevelCount', function* ({ textureLevels: l, baseMipLevel = 0 }) {\n        yield undefined;\n        for (const lastMipLevel of new Set([0, 1, 5, 6, 7, l - 1, l, l + 1])) {\n          if (baseMipLevel <= lastMipLevel) yield lastMipLevel - baseMipLevel;\n        }\n      })\n  )\n  .fn(t => {\n    const {\n      textureDimension,\n      viewDimension,\n      textureLevels,\n      baseMipLevel,\n      mipLevelCount,\n    } = t.params;\n\n    const textureDescriptor: GPUTextureDescriptor = {\n      format: 'rgba8unorm',\n      dimension: textureDimension,\n      size:\n        textureDimension === '1d' ? [32] : textureDimension === '3d' ? [32, 32, 32] : [32, 32, 18],\n      mipLevelCount: textureLevels,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    };\n\n    const viewDescriptor = { dimension: viewDimension, baseMipLevel, mipLevelCount };\n    const success = validateCreateViewLayersLevels(textureDescriptor, viewDescriptor);\n\n    const texture = t.device.createTexture(textureDescriptor);\n    t.debug(mipLevelCount + ' ' + success);\n    t.expectValidationError(() => {\n      texture.createView(viewDescriptor);\n    }, !success);\n  });\n\ng.test('cube_faces_square')\n  .desc(\n    `Test that the X/Y dimensions of cube and cube array textures must be square.\n  - {2d (control case), cube, cube-array}`\n  )\n  .params(u =>\n    u //\n      .combine('dimension', ['2d', 'cube', 'cube-array'] as const)\n      .combine('size', [\n        [4, 4, 6],\n        [5, 5, 6],\n        [4, 5, 6],\n        [4, 8, 6],\n        [8, 4, 6],\n      ])\n  )\n  .fn(async t => {\n    const { dimension, size } = t.params;\n\n    const texture = t.device.createTexture({\n      format: 'rgba8unorm',\n      size,\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n    });\n\n    const success = dimension === '2d' || size[0] === size[1];\n    t.expectValidationError(() => {\n      texture.createView({ dimension });\n    }, !success);\n  });\n\ng.test('texture_state')\n  .desc(`createView should fail if the texture is invalid (but succeed if it is destroyed)`)\n  .paramsSubcasesOnly(u => u.combine('state', kResourceStates))\n  .fn(async t => {\n    const { state } = t.params;\n    const texture = t.createTextureWithState(state);\n\n    t.expectValidationError(() => {\n      texture.createView();\n    }, state === 'invalid');\n  });\n"],"file":"createView.spec.js"}