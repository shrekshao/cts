{"version":3,"sources":["../../../../src/webgpu/api/validation/createView.spec.ts"],"names":["description","makeTestGroup","ValidationTest","ARRAY_LAYER_COUNT_2D","MIP_LEVEL_COUNT","FORMAT","F","createTexture","options","width","height","arrayLayerCount","mipLevelCount","sampleCount","device","size","depthOrArrayLayers","dimension","format","usage","GPUTextureUsage","SAMPLED","getDescriptor","baseMipLevel","baseArrayLayer","g","test","desc","paramsSimple","_success","fn","t","params","texture","descriptor","expectValidationError","createView","nonSquareTexture","commandEncoder","createCommandEncoder","renderPass","beginRenderPass","colorAttachments","view","loadValue","r","b","a","storeOp","endPass","destroy","finish"],"mappings":"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","sourcesContent":["export const description = `\ncreateView validation tests.\n\nTODO: review existing tests and merge with this plan:\n> All x= every texture format for the underlying texture\n>\n> - view format doesn't match/isn't compatible\n>     - with/without flag set <- I don't think this flag exists yet\n>     - x= every possible view format\n> - dimension isn't one of the following compatible options:\n>     - texture 1d -> view 1d\n>     - texture 2d -> view 2d, 2d-array, cube, cube-array\n>     - texture 3d -> view 3d\n> - {cube, cube-array} not enough layers\n> - all aspects\n>     - \"depth-only\" only allowed for D and DS\n>     - \"stencil-only\" only allowed for S and DS\n>     - \"all\" allowed for any format\n> - baseMipLevel+mipLevelCount various values {in, out of} range\n> - baseArrayLayer+arrayLayerCount various values {in, out of} range\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nconst ARRAY_LAYER_COUNT_2D = 6;\nconst MIP_LEVEL_COUNT: number = 6;\nconst FORMAT: GPUTextureFormat = 'rgba8unorm';\n\nclass F extends ValidationTest {\n  createTexture(\n    options: {\n      width?: number;\n      height?: number;\n      arrayLayerCount?: number;\n      mipLevelCount?: number;\n      sampleCount?: number;\n    } = {}\n  ): GPUTexture {\n    const {\n      width = 32,\n      height = 32,\n      arrayLayerCount = 1,\n      mipLevelCount = MIP_LEVEL_COUNT,\n      sampleCount = 1,\n    } = options;\n\n    return this.device.createTexture({\n      size: { width, height, depthOrArrayLayers: arrayLayerCount },\n      mipLevelCount,\n      sampleCount,\n      dimension: '2d',\n      format: FORMAT,\n      usage: GPUTextureUsage.SAMPLED,\n    });\n  }\n\n  getDescriptor(\n    options: {\n      format?: GPUTextureFormat;\n      dimension?: GPUTextureViewDimension;\n      baseMipLevel?: number;\n      mipLevelCount?: number;\n      baseArrayLayer?: number;\n      arrayLayerCount?: number;\n    } = {}\n  ): GPUTextureViewDescriptor {\n    const {\n      format = FORMAT,\n      dimension = '2d',\n      baseMipLevel = 0,\n      mipLevelCount = MIP_LEVEL_COUNT,\n      baseArrayLayer = 0,\n      arrayLayerCount = 1,\n    } = options;\n    return {\n      format,\n      dimension,\n      baseMipLevel,\n      mipLevelCount,\n      baseArrayLayer,\n      arrayLayerCount,\n    };\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('creating_texture_view_on_a_2D_non_array_texture')\n  .desc(\n    `TODO: write description, and shorten name\n\n  TODO: mipLevelCount == 0 should mean 0, not \"auto\". \"undefined\" means \"auto\".`\n  )\n  .paramsSimple([\n    { _success: true }, // default view works\n    { arrayLayerCount: 1, _success: true }, // it is OK to create a 2D texture view on a 2D texture\n    { arrayLayerCount: 2, _success: false }, // it is an error to view a layer past the end of the texture\n    { dimension: '2d-array' as const, arrayLayerCount: 1, _success: true }, // it is OK to create a 1-layer 2D array texture view on a 2D texture\n    // mip level is in range\n    { mipLevelCount: 1, baseMipLevel: MIP_LEVEL_COUNT - 1, _success: true },\n    { mipLevelCount: 2, baseMipLevel: MIP_LEVEL_COUNT - 2, _success: true },\n    // baseMipLevel == k && mipLevelCount == 0 means to use levels k..end\n    { mipLevelCount: 0, baseMipLevel: 0, _success: true },\n    { mipLevelCount: 0, baseMipLevel: 1, _success: true },\n    { mipLevelCount: 0, baseMipLevel: MIP_LEVEL_COUNT - 1, _success: true },\n    { mipLevelCount: 0, baseMipLevel: MIP_LEVEL_COUNT, _success: false },\n    // it is an error to make the mip level out of range\n    { mipLevelCount: MIP_LEVEL_COUNT + 1, baseMipLevel: 0, _success: false },\n    { mipLevelCount: MIP_LEVEL_COUNT, baseMipLevel: 1, _success: false },\n    { mipLevelCount: 2, baseMipLevel: MIP_LEVEL_COUNT - 1, _success: false },\n    { mipLevelCount: 1, baseMipLevel: MIP_LEVEL_COUNT, _success: false },\n  ])\n  .fn(async t => {\n    const { dimension = '2d', arrayLayerCount, mipLevelCount, baseMipLevel, _success } = t.params;\n\n    const texture = t.createTexture({ arrayLayerCount: 1 });\n\n    const descriptor = t.getDescriptor({\n      dimension,\n      arrayLayerCount,\n      mipLevelCount,\n      baseMipLevel,\n    });\n\n    t.expectValidationError(() => {\n      texture.createView(descriptor);\n    }, !_success);\n  });\n\ng.test('creating_texture_view_on_a_2D_array_texture')\n  .desc(\n    `TODO: write description, and shorten name\n\n  TODO: arrayLayerCount == 0 should mean 0, not \"auto\". \"undefined\" means \"auto\".`\n  )\n  .paramsSimple([\n    { _success: true }, // default view works\n    { dimension: '2d' as const, arrayLayerCount: 1, _success: true }, // it is OK to create a 2D texture view on a 2D array texture\n    { arrayLayerCount: ARRAY_LAYER_COUNT_2D, _success: true }, // it is OK to create a 2D array texture view on a 2D array texture\n    // baseArrayLayer == k && arrayLayerCount == 0 means to use layers k..end.\n    { arrayLayerCount: 0, baseArrayLayer: 0, _success: true },\n    { arrayLayerCount: 0, baseArrayLayer: 1, _success: true },\n    { arrayLayerCount: 0, baseArrayLayer: ARRAY_LAYER_COUNT_2D - 1, _success: true },\n    { arrayLayerCount: 0, baseArrayLayer: ARRAY_LAYER_COUNT_2D, _success: false },\n    // It is an error for the array layer range of the view to exceed that of the texture\n    { arrayLayerCount: ARRAY_LAYER_COUNT_2D + 1, baseArrayLayer: 0, _success: false },\n    { arrayLayerCount: ARRAY_LAYER_COUNT_2D, baseArrayLayer: 1, _success: false },\n    { arrayLayerCount: 2, baseArrayLayer: ARRAY_LAYER_COUNT_2D - 1, _success: false },\n    { arrayLayerCount: 1, baseArrayLayer: ARRAY_LAYER_COUNT_2D, _success: false },\n  ])\n  .fn(async t => {\n    const { dimension = '2d-array', arrayLayerCount, baseArrayLayer, _success } = t.params;\n\n    const texture = t.createTexture({ arrayLayerCount: ARRAY_LAYER_COUNT_2D });\n\n    const descriptor = t.getDescriptor({\n      dimension,\n      arrayLayerCount,\n      baseArrayLayer,\n    });\n\n    t.expectValidationError(() => {\n      texture.createView(descriptor);\n    }, !_success);\n  });\n\ng.test('Using_defaults_validates_the_same_as_setting_values_for_more_than_1_array_layer')\n  .paramsSimple([\n    { _success: true },\n    { format: 'rgba8unorm', _success: true },\n    { format: 'r8unorm', _success: false },\n    { dimension: '2d-array', _success: true },\n    { dimension: '2d', _success: false },\n    { arrayLayerCount: ARRAY_LAYER_COUNT_2D, _success: false }, // setting array layers to non-0 means the dimensionality will default to 2D so by itself it causes an error.\n    { arrayLayerCount: ARRAY_LAYER_COUNT_2D, dimension: '2d-array', _success: true },\n    {\n      arrayLayerCount: ARRAY_LAYER_COUNT_2D,\n      dimension: '2d-array',\n      mipLevelCount: MIP_LEVEL_COUNT,\n      _success: true,\n    },\n  ] as const)\n  .fn(async t => {\n    const { format, dimension, arrayLayerCount, mipLevelCount, _success } = t.params;\n\n    const texture = t.createTexture({ arrayLayerCount: ARRAY_LAYER_COUNT_2D });\n\n    const descriptor = { format, dimension, arrayLayerCount, mipLevelCount };\n\n    t.expectValidationError(() => {\n      texture.createView(descriptor);\n    }, !_success);\n  });\n\ng.test('Using_defaults_validates_the_same_as_setting_values_for_only_1_array_layer')\n  .paramsSimple([\n    { _success: true },\n    { format: 'rgba8unorm', _success: true },\n    { format: 'r8unorm', _success: false },\n    { dimension: '2d-array', _success: true },\n    { dimension: '2d', _success: true },\n    { arrayLayerCount: 0, _success: true },\n    { arrayLayerCount: 1, _success: true },\n    { arrayLayerCount: 2, _success: false },\n    { mipLevelCount: MIP_LEVEL_COUNT, _success: true },\n    { mipLevelCount: 1, _success: true },\n  ] as const)\n  .fn(async t => {\n    const { format, dimension, arrayLayerCount, mipLevelCount, _success } = t.params;\n\n    const texture = t.createTexture({ arrayLayerCount: 1 });\n\n    const descriptor = { format, dimension, arrayLayerCount, mipLevelCount };\n\n    t.expectValidationError(() => {\n      texture.createView(descriptor);\n    }, !_success);\n  });\n\ng.test('creating_cube_map_texture_view')\n  .paramsSimple([\n    { dimension: 'cube', arrayLayerCount: 6, _success: true }, // it is OK to create a cube map texture view with arrayLayerCount == 6\n    // it is an error to create a cube map texture view with arrayLayerCount != 6\n    { dimension: 'cube', arrayLayerCount: 3, _success: false },\n    { dimension: 'cube', arrayLayerCount: 7, _success: false },\n    { dimension: 'cube', arrayLayerCount: 12, _success: false },\n    { dimension: 'cube', _success: false },\n    { dimension: 'cube-array', arrayLayerCount: 12, _success: true }, // it is OK to create a cube map array texture view with arrayLayerCount % 6 == 0\n    // it is an error to create a cube map array texture view with arrayLayerCount % 6 != 0\n    { dimension: 'cube-array', arrayLayerCount: 11, _success: false },\n    { dimension: 'cube-array', arrayLayerCount: 13, _success: false },\n  ] as const)\n  .fn(async t => {\n    const { dimension = '2d-array', arrayLayerCount, _success } = t.params;\n\n    const texture = t.createTexture({ arrayLayerCount: 16 });\n\n    const descriptor = t.getDescriptor({\n      dimension,\n      arrayLayerCount,\n    });\n\n    t.expectValidationError(() => {\n      texture.createView(descriptor);\n    }, !_success);\n  });\n\ng.test('creating_cube_map_texture_view_with_a_non_square_texture')\n  .paramsSimple([\n    { dimension: 'cube', arrayLayerCount: 6 }, // it is an error to create a cube map texture view with width != height.\n    { dimension: 'cube-array', arrayLayerCount: 12 }, // it is an error to create a cube map array texture view with width != height.\n  ] as const)\n  .fn(async t => {\n    const { dimension, arrayLayerCount } = t.params;\n\n    const nonSquareTexture = t.createTexture({\n      arrayLayerCount: 18,\n      width: 32,\n      height: 16,\n      mipLevelCount: 5,\n    });\n\n    const descriptor = t.getDescriptor({\n      dimension,\n      arrayLayerCount,\n    });\n\n    t.expectValidationError(() => {\n      nonSquareTexture.createView(descriptor);\n    });\n  });\n\n// TODO: add more tests when rules are fully implemented.\ng.test('test_the_format_compatibility_rules_when_creating_a_texture_view').fn(async t => {\n  const texture = t.createTexture({ arrayLayerCount: 1 });\n\n  const descriptor = t.getDescriptor({\n    format: 'depth24plus-stencil8',\n  });\n\n  // it is invalid to create a view in depth-stencil format on a RGBA texture\n  t.expectValidationError(() => {\n    texture.createView(descriptor);\n  });\n});\n\ng.test('it_is_invalid_to_use_a_texture_view_created_from_a_destroyed_texture').fn(async t => {\n  const texture = t.createTexture({ arrayLayerCount: 1 });\n\n  const commandEncoder = t.device.createCommandEncoder();\n  const renderPass = commandEncoder.beginRenderPass({\n    colorAttachments: [\n      {\n        view: texture.createView(),\n        loadValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n        storeOp: 'store',\n      },\n    ],\n  });\n  renderPass.endPass();\n\n  texture.destroy();\n\n  t.expectValidationError(() => {\n    commandEncoder.finish();\n  });\n});\n\n// TODO: Add tests for TextureAspect\n"],"file":"createView.spec.js"}