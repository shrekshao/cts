{"version":3,"sources":["../../../../../../src/webgpu/api/validation/resource_usages/texture/in_pass_encoder.spec.ts"],"names":["description","makeTestGroup","pp","assert","kDepthStencilFormats","kTextureFormatInfo","kShaderStages","GPUConst","ValidationTest","kTextureBindingTypes","SIZE","TextureUsageTracking","createTexture","options","width","height","arrayLayerCount","mipLevelCount","sampleCount","format","usage","GPUTextureUsage","RENDER_ATTACHMENT","SAMPLED","device","size","depthOrArrayLayers","dimension","createBindGroup","binding","resource","bindingType","viewDimension","entry","texture","multisampled","undefined","storageTexture","access","entries","layout","createBindGroupLayout","visibility","GPUShaderStage","COMPUTE","FRAGMENT","createAndExecuteBundle","bindGroup","pass","bundleEncoder","createRenderBundleEncoder","colorFormats","setBindGroup","bundle","finish","executeBundles","beginSimpleRenderPass","encoder","view","beginRenderPass","colorAttachments","loadValue","r","g","b","a","storeOp","testValidationScope","compute","STORAGE","createView","bindGroup0","bindGroup1","createCommandEncoder","beginComputePass","pipeline","createNoOpComputePipeline","createNoOpRenderPipeline","setPipeline","issueDrawOrDispatch","dispatch","draw","setComputePipelineAndCallDispatch","BASE_LEVEL","TOTAL_LEVELS","BASE_LAYER","TOTAL_LAYERS","SLICE_COUNT","test","params","u","combine","combineWithParams","_usageOK","type0","type1","beginSubcases","unless","p","binding0InBundle","binding1InBundle","levelCount0","layerCount0","baseLevel1","levelCount1","baseLayer1","layerCount1","_resourceSuccess","fn","t","dimension0","view0","baseMipLevel","baseArrayLayer","dimension1","view1","endPass","storageTextureFormat0","GPURenderPassEncoder","storageTextureFormat1","success","expectValidationError","baseLevel","baseLayer","aspect0","stencil","aspect1","depth","_usageSuccess","selectDeviceOrSkipTestCase","feature","aspect","depthStencilAttachment","depthStoreOp","depthLoadValue","stencilStoreOp","stencilLoadValue","disjointAspects","Boolean","writeVisibility","ShaderStage","VERTEX","readVisibility","writeHasVertexStage","texUsage","bglEntries","bgEntries","push","callDrawOrDispatch","sampledView","sampledStorageView","bglEntries0","bgEntries0","bindGroups","binding0TexFormat","binding1TexFormat","bindingsInBundle","i","bundleInPass","useBindGroup0","useBindGroup1","setBindGroupsOrder","wgslVertex","wgslFragment","_if","_endif","wgslCompute","createComputePipeline","module","createShaderModule","code","entryPoint","createRenderPipeline","vertex","fragment","targets","primitive","topology","index0","index1","pass1"],"mappings":"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","sourcesContent":["export const description = `\nTexture Usages Validation Tests in Render Pass and Compute Pass.\n\nTODO: update for new binding structure.\n\nTODO: description per test\n\nTest Coverage:\n  - For each combination of two texture usages:\n    - For various subresource ranges (different mip levels or array layers) that overlap a given\n      subresources or not for color formats:\n      - For various places that resources are used, for example, used in bundle or used in render\n        pass directly.\n        - Check that an error is generated when read-write or write-write usages are binding to the\n          same texture subresource. Otherwise, no error should be generated. One exception is race\n          condition upon two writeonly-storage-texture usages, which is valid.\n\n  - For each combination of two texture usages:\n    - For various aspects (all, depth-only, stencil-only) that overlap a given subresources or not\n      for depth/stencil formats:\n      - Check that an error is generated when read-write or write-write usages are binding to the\n        same aspect. Otherwise, no error should be generated.\n\n  - Test combinations of two shader stages:\n    - Texture usages in bindings with invisible shader stages should be validated. Invisible shader\n      stages include shader stage with visibility none, compute shader stage in render pass, and\n      vertex/fragment shader stage in compute pass.\n\n  - Tests replaced bindings:\n    - Texture usages via bindings replaced by another setBindGroup() upon the same bindGroup index\n      in render pass should be validated. However, replaced bindings should not be validated in\n      compute pass.\n\n  - Test texture usages in bundle:\n    - Texture usages in bundle should be validated if that bundle is executed in the current scope.\n\n  - Test texture usages with unused bindings:\n    - Texture usages should be validated even its bindings is not used in pipeline.\n\n  - Test texture usages validation scope:\n    - Texture usages should be validated per each render pass. And they should be validated per each\n      dispatch call in compute.\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { pp } from '../../../../../common/util/preprocessor.js';\nimport { assert } from '../../../../../common/util/util.js';\nimport {\n  kDepthStencilFormats,\n  kTextureFormatInfo,\n  kShaderStages,\n} from '../../../../capability_info.js';\nimport { GPUConst } from '../../../../constants.js';\nimport { ValidationTest } from '../../validation_test.js';\n\ntype TextureBindingType =\n  | 'sampled-texture'\n  | 'multisampled-texture'\n  | 'readonly-storage-texture'\n  | 'writeonly-storage-texture';\nconst kTextureBindingTypes = [\n  'sampled-texture',\n  'multisampled-texture',\n  'readonly-storage-texture',\n  'writeonly-storage-texture',\n] as const;\n\nconst SIZE = 32;\nclass TextureUsageTracking extends ValidationTest {\n  createTexture(\n    options: {\n      width?: number;\n      height?: number;\n      arrayLayerCount?: number;\n      mipLevelCount?: number;\n      sampleCount?: number;\n      format?: GPUTextureFormat;\n      usage?: GPUTextureUsageFlags;\n    } = {}\n  ): GPUTexture {\n    const {\n      width = SIZE,\n      height = SIZE,\n      arrayLayerCount = 1,\n      mipLevelCount = 1,\n      sampleCount = 1,\n      format = 'rgba8unorm',\n      usage = GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.SAMPLED,\n    } = options;\n\n    return this.device.createTexture({\n      size: { width, height, depthOrArrayLayers: arrayLayerCount },\n      mipLevelCount,\n      sampleCount,\n      dimension: '2d',\n      format,\n      usage,\n    });\n  }\n\n  createBindGroup(\n    binding: number,\n    resource: GPUTextureView,\n    bindingType: TextureBindingType,\n    viewDimension: GPUTextureViewDimension,\n    format: GPUTextureFormat | undefined\n  ): GPUBindGroup {\n    let entry: Omit<GPUBindGroupLayoutEntry, 'binding' | 'visibility'>;\n    switch (bindingType) {\n      case 'sampled-texture':\n        entry = { texture: { viewDimension } };\n        break;\n      case 'multisampled-texture':\n        entry = { texture: { viewDimension, multisampled: true } };\n        break;\n      case 'readonly-storage-texture':\n        assert(format !== undefined);\n        entry = { storageTexture: { access: 'read-only', format, viewDimension } };\n        break;\n      case 'writeonly-storage-texture':\n        assert(format !== undefined);\n        entry = { storageTexture: { access: 'write-only', format, viewDimension } };\n        break;\n    }\n\n    return this.device.createBindGroup({\n      entries: [{ binding, resource }],\n      layout: this.device.createBindGroupLayout({\n        entries: [\n          { binding, visibility: GPUShaderStage.COMPUTE | GPUShaderStage.FRAGMENT, ...entry },\n        ],\n      }),\n    });\n  }\n\n  createAndExecuteBundle(binding: number, bindGroup: GPUBindGroup, pass: GPURenderPassEncoder) {\n    const bundleEncoder = this.device.createRenderBundleEncoder({\n      colorFormats: ['rgba8unorm'],\n    });\n    bundleEncoder.setBindGroup(binding, bindGroup);\n    const bundle = bundleEncoder.finish();\n    pass.executeBundles([bundle]);\n  }\n\n  beginSimpleRenderPass(encoder: GPUCommandEncoder, view: GPUTextureView): GPURenderPassEncoder {\n    return encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view,\n          loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n          storeOp: 'store',\n        },\n      ],\n    });\n  }\n\n  testValidationScope(\n    compute: boolean\n  ): {\n    bindGroup0: GPUBindGroup;\n    bindGroup1: GPUBindGroup;\n    encoder: GPUCommandEncoder;\n    pass: GPURenderPassEncoder | GPUComputePassEncoder;\n    pipeline: GPURenderPipeline | GPUComputePipeline;\n  } {\n    // Create two bind groups. Resource usages conflict between these two bind groups. But resource\n    // usage inside each bind group doesn't conflict.\n    const view = this.createTexture({\n      usage: GPUTextureUsage.STORAGE | GPUTextureUsage.SAMPLED,\n    }).createView();\n    const bindGroup0 = this.createBindGroup(0, view, 'sampled-texture', '2d', undefined);\n    const bindGroup1 = this.createBindGroup(\n      0,\n      view,\n      'writeonly-storage-texture',\n      '2d',\n      'rgba8unorm'\n    );\n\n    const encoder = this.device.createCommandEncoder();\n    const pass = compute\n      ? encoder.beginComputePass()\n      : this.beginSimpleRenderPass(encoder, this.createTexture().createView());\n\n    // Create pipeline. Note that bindings unused in pipeline should be validated too.\n    const pipeline = compute ? this.createNoOpComputePipeline() : this.createNoOpRenderPipeline();\n    return {\n      bindGroup0,\n      bindGroup1,\n      encoder,\n      pass,\n      pipeline,\n    };\n  }\n\n  setPipeline(\n    pass: GPURenderPassEncoder | GPUComputePassEncoder,\n    pipeline: GPURenderPipeline | GPUComputePipeline,\n    compute: boolean\n  ) {\n    if (compute) {\n      (pass as GPUComputePassEncoder).setPipeline(pipeline as GPUComputePipeline);\n    } else {\n      (pass as GPURenderPassEncoder).setPipeline(pipeline as GPURenderPipeline);\n    }\n  }\n\n  issueDrawOrDispatch(pass: GPURenderPassEncoder | GPUComputePassEncoder, compute: boolean) {\n    if (compute) {\n      (pass as GPUComputePassEncoder).dispatch(1);\n    } else {\n      (pass as GPURenderPassEncoder).draw(3, 1, 0, 0);\n    }\n  }\n\n  setComputePipelineAndCallDispatch(pass: GPUComputePassEncoder) {\n    const pipeline = this.createNoOpComputePipeline();\n    pass.setPipeline(pipeline);\n    pass.dispatch(1);\n  }\n}\n\nexport const g = makeTestGroup(TextureUsageTracking);\n\nconst BASE_LEVEL = 1;\nconst TOTAL_LEVELS = 6;\nconst BASE_LAYER = 1;\nconst TOTAL_LAYERS = 6;\nconst SLICE_COUNT = 2;\n\n// For all tests below, we test compute pass if 'compute' is true, and test render pass otherwise.\ng.test('subresources_and_binding_types_combination_for_color')\n  .params(u =>\n    u\n      .combine('compute', [false, true])\n      .combineWithParams([\n        { _usageOK: true, type0: 'sampled-texture', type1: 'sampled-texture' },\n        { _usageOK: true, type0: 'sampled-texture', type1: 'readonly-storage-texture' },\n        { _usageOK: false, type0: 'sampled-texture', type1: 'writeonly-storage-texture' },\n        { _usageOK: false, type0: 'sampled-texture', type1: 'render-target' },\n        { _usageOK: true, type0: 'readonly-storage-texture', type1: 'readonly-storage-texture' },\n        { _usageOK: false, type0: 'readonly-storage-texture', type1: 'writeonly-storage-texture' },\n        { _usageOK: false, type0: 'readonly-storage-texture', type1: 'render-target' },\n        // Race condition upon multiple writable storage texture is valid.\n        { _usageOK: true, type0: 'writeonly-storage-texture', type1: 'writeonly-storage-texture' },\n        { _usageOK: false, type0: 'writeonly-storage-texture', type1: 'render-target' },\n        { _usageOK: false, type0: 'render-target', type1: 'render-target' },\n      ] as const)\n      .beginSubcases()\n      .combine('binding0InBundle', [false, true])\n      .combine('binding1InBundle', [false, true])\n      .unless(\n        p =>\n          // We can't set 'render-target' in bundle, so we need to exclude it from bundle.\n          (p.binding0InBundle && p.type0 === 'render-target') ||\n          (p.binding1InBundle && p.type1 === 'render-target') ||\n          // We can't set 'render-target' or bundle in compute.\n          (p.compute &&\n            (p.binding0InBundle ||\n              p.binding1InBundle ||\n              p.type0 === 'render-target' ||\n              p.type1 === 'render-target'))\n      )\n      .combineWithParams([\n        // Two texture usages are binding to the same texture subresource.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL,\n          levelCount1: 1,\n          baseLayer1: BASE_LAYER,\n          layerCount1: 1,\n          _resourceSuccess: false,\n        },\n\n        // Two texture usages are binding to different mip levels of the same texture.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL + 1,\n          levelCount1: 1,\n          baseLayer1: BASE_LAYER,\n          layerCount1: 1,\n          _resourceSuccess: true,\n        },\n\n        // Two texture usages are binding to different array layers of the same texture.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL,\n          levelCount1: 1,\n          baseLayer1: BASE_LAYER + 1,\n          layerCount1: 1,\n          _resourceSuccess: true,\n        },\n\n        // The second texture usage contains the whole mip chain where the first texture usage is using.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: 0,\n          levelCount1: TOTAL_LEVELS,\n          baseLayer1: BASE_LAYER,\n          layerCount1: 1,\n          _resourceSuccess: false,\n        },\n\n        // The second texture usage contains all layers where the first texture usage is using.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL,\n          levelCount1: 1,\n          baseLayer1: 0,\n          layerCount1: TOTAL_LAYERS,\n          _resourceSuccess: false,\n        },\n\n        // The second texture usage contains all subresources where the first texture usage is using.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: 0,\n          levelCount1: TOTAL_LEVELS,\n          baseLayer1: 0,\n          layerCount1: TOTAL_LAYERS,\n          _resourceSuccess: false,\n        },\n\n        // Both of the two usages access a few mip levels on the same layer but they don't overlap.\n        {\n          levelCount0: SLICE_COUNT,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL + SLICE_COUNT,\n          levelCount1: 3,\n          baseLayer1: BASE_LAYER,\n          layerCount1: 1,\n          _resourceSuccess: true,\n        },\n\n        // Both of the two usages access a few mip levels on the same layer and they overlap.\n        {\n          levelCount0: SLICE_COUNT,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL + SLICE_COUNT - 1,\n          levelCount1: 3,\n          baseLayer1: BASE_LAYER,\n          layerCount1: 1,\n          _resourceSuccess: false,\n        },\n\n        // Both of the two usages access a few array layers on the same level but they don't overlap.\n        {\n          levelCount0: 1,\n          layerCount0: SLICE_COUNT,\n          baseLevel1: BASE_LEVEL,\n          levelCount1: 1,\n          baseLayer1: BASE_LAYER + SLICE_COUNT,\n          layerCount1: 3,\n          _resourceSuccess: true,\n        },\n\n        // Both of the two usages access a few array layers on the same level and they overlap.\n        {\n          levelCount0: 1,\n          layerCount0: SLICE_COUNT,\n          baseLevel1: BASE_LEVEL,\n          levelCount1: 1,\n          baseLayer1: BASE_LAYER + SLICE_COUNT - 1,\n          layerCount1: 3,\n          _resourceSuccess: false,\n        },\n\n        // Both of the two usages access a few array layers and mip levels but they don't overlap.\n        {\n          levelCount0: SLICE_COUNT,\n          layerCount0: SLICE_COUNT,\n          baseLevel1: BASE_LEVEL + SLICE_COUNT,\n          levelCount1: 3,\n          baseLayer1: BASE_LAYER + SLICE_COUNT,\n          layerCount1: 3,\n          _resourceSuccess: true,\n        },\n\n        // Both of the two usages access a few array layers and mip levels and they overlap.\n        {\n          levelCount0: SLICE_COUNT,\n          layerCount0: SLICE_COUNT,\n          baseLevel1: BASE_LEVEL + SLICE_COUNT - 1,\n          levelCount1: 3,\n          baseLayer1: BASE_LAYER + SLICE_COUNT - 1,\n          layerCount1: 3,\n          _resourceSuccess: false,\n        },\n      ])\n      .unless(\n        p =>\n          // Every color attachment can use only one single subresource.\n          (p.type0 === 'render-target' && (p.levelCount0 !== 1 || p.layerCount0 !== 1)) ||\n          (p.type1 === 'render-target' && (p.levelCount1 !== 1 || p.layerCount1 !== 1)) ||\n          // All color attachments' size should be the same.\n          (p.type0 === 'render-target' &&\n            p.type1 === 'render-target' &&\n            p.baseLevel1 !== BASE_LEVEL)\n      )\n  )\n  .fn(async t => {\n    const {\n      compute,\n      binding0InBundle,\n      binding1InBundle,\n      levelCount0,\n      layerCount0,\n      baseLevel1,\n      baseLayer1,\n      levelCount1,\n      layerCount1,\n      type0,\n      type1,\n      _usageOK,\n      _resourceSuccess,\n    } = t.params;\n\n    const texture = t.createTexture({\n      arrayLayerCount: TOTAL_LAYERS,\n      mipLevelCount: TOTAL_LEVELS,\n      usage: GPUTextureUsage.SAMPLED | GPUTextureUsage.STORAGE | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const dimension0 = layerCount0 !== 1 ? '2d-array' : '2d';\n    const view0 = texture.createView({\n      dimension: dimension0,\n      baseMipLevel: BASE_LEVEL,\n      mipLevelCount: levelCount0,\n      baseArrayLayer: BASE_LAYER,\n      arrayLayerCount: layerCount0,\n    });\n\n    const dimension1 = layerCount1 !== 1 ? '2d-array' : '2d';\n    const view1 = texture.createView({\n      dimension: dimension1,\n      baseMipLevel: baseLevel1,\n      mipLevelCount: levelCount1,\n      baseArrayLayer: baseLayer1,\n      arrayLayerCount: layerCount1,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    if (type0 === 'render-target') {\n      // Note that type1 is 'render-target' too. So we don't need to create bindings.\n      assert(type1 === 'render-target');\n      const pass = encoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: view0,\n            loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n            storeOp: 'store',\n          },\n          {\n            view: view1,\n            loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n            storeOp: 'store',\n          },\n        ],\n      });\n      pass.endPass();\n    } else {\n      const pass = compute\n        ? encoder.beginComputePass()\n        : t.beginSimpleRenderPass(\n            encoder,\n            type1 === 'render-target' ? view1 : t.createTexture().createView()\n          );\n\n      // Create bind groups. Set bind groups in pass directly or set bind groups in bundle.\n      const storageTextureFormat0 = type0 === 'sampled-texture' ? undefined : 'rgba8unorm';\n      const bindGroup0 = t.createBindGroup(0, view0, type0, dimension0, storageTextureFormat0);\n      if (binding0InBundle) {\n        assert(pass instanceof GPURenderPassEncoder);\n        t.createAndExecuteBundle(0, bindGroup0, pass);\n      } else {\n        pass.setBindGroup(0, bindGroup0);\n      }\n      if (type1 !== 'render-target') {\n        const storageTextureFormat1 = type1 === 'sampled-texture' ? undefined : 'rgba8unorm';\n        const bindGroup1 = t.createBindGroup(1, view1, type1, dimension1, storageTextureFormat1);\n        if (binding1InBundle) {\n          assert(pass instanceof GPURenderPassEncoder);\n          t.createAndExecuteBundle(1, bindGroup1, pass);\n        } else {\n          pass.setBindGroup(1, bindGroup1);\n        }\n      }\n      if (compute) t.setComputePipelineAndCallDispatch(pass as GPUComputePassEncoder);\n      pass.endPass();\n    }\n\n    const success = _resourceSuccess || _usageOK;\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('subresources_and_binding_types_combination_for_aspect')\n  .params(u =>\n    u\n      .combine('compute', [false, true])\n      .combine('binding0InBundle', [false, true])\n      .combine('binding1InBundle', [false, true])\n      .combine('format', kDepthStencilFormats)\n      .beginSubcases()\n      .combineWithParams([\n        {\n          baseLevel: BASE_LEVEL,\n          baseLayer: BASE_LAYER,\n          _resourceSuccess: false,\n        },\n        {\n          baseLevel: BASE_LEVEL + 1,\n          baseLayer: BASE_LAYER,\n          _resourceSuccess: true,\n        },\n        {\n          baseLevel: BASE_LEVEL,\n          baseLayer: BASE_LAYER + 1,\n          _resourceSuccess: true,\n        },\n      ])\n      .combine('aspect0', ['all', 'depth-only', 'stencil-only'] as const)\n      .combine('aspect1', ['all', 'depth-only', 'stencil-only'] as const)\n      .unless(\n        p =>\n          (p.aspect0 === 'stencil-only' && !kTextureFormatInfo[p.format].stencil) ||\n          (p.aspect1 === 'stencil-only' && !kTextureFormatInfo[p.format].stencil)\n      )\n      .unless(\n        p =>\n          (p.aspect0 === 'depth-only' && !kTextureFormatInfo[p.format].depth) ||\n          (p.aspect1 === 'depth-only' && !kTextureFormatInfo[p.format].depth)\n      )\n      .combineWithParams([\n        {\n          type0: 'sampled-texture',\n          type1: 'sampled-texture',\n          _usageSuccess: true,\n        },\n        {\n          type0: 'sampled-texture',\n          type1: 'render-target',\n          _usageSuccess: false,\n        },\n      ] as const)\n      .unless(\n        p =>\n          // We can't set 'render-target' in bundle, so we need to exclude it from bundle.\n          p.binding1InBundle && p.type1 === 'render-target'\n      )\n      .unless(\n        p =>\n          // We can't set 'render-target' or bundle in compute. Note that type0 is definitely not\n          // 'render-target'\n          p.compute && (p.binding0InBundle || p.binding1InBundle || p.type1 === 'render-target')\n      )\n  )\n  .fn(async t => {\n    const {\n      compute,\n      binding0InBundle,\n      binding1InBundle,\n      format,\n      baseLevel,\n      baseLayer,\n      aspect0,\n      aspect1,\n      type0,\n      type1,\n      _resourceSuccess,\n      _usageSuccess,\n    } = t.params;\n    await t.selectDeviceOrSkipTestCase(kTextureFormatInfo[format].feature);\n\n    const texture = t.createTexture({\n      arrayLayerCount: TOTAL_LAYERS,\n      mipLevelCount: TOTAL_LEVELS,\n      format,\n    });\n\n    const view0 = texture.createView({\n      baseMipLevel: BASE_LEVEL,\n      mipLevelCount: 1,\n      baseArrayLayer: BASE_LAYER,\n      arrayLayerCount: 1,\n      aspect: aspect0,\n    });\n\n    const view1 = texture.createView({\n      baseMipLevel: baseLevel,\n      mipLevelCount: 1,\n      baseArrayLayer: baseLayer,\n      arrayLayerCount: 1,\n      aspect: aspect1,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    // Color attachment's size should match depth/stencil attachment's size. Note that if\n    // type1 !== 'render-target' then there's no depthStencilAttachment to match anyway.\n    const size = SIZE >> baseLevel;\n    const pass = compute\n      ? encoder.beginComputePass()\n      : encoder.beginRenderPass({\n          colorAttachments: [\n            {\n              view: t.createTexture({ width: size, height: size }).createView(),\n              loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n              storeOp: 'store',\n            },\n          ],\n          depthStencilAttachment:\n            type1 !== 'render-target'\n              ? undefined\n              : {\n                  view: view1,\n                  depthStoreOp: 'clear',\n                  depthLoadValue: 'load',\n                  stencilStoreOp: 'clear',\n                  stencilLoadValue: 'load',\n                },\n        });\n\n    // Create bind groups. Set bind groups in pass directly or set bind groups in bundle.\n    const bindGroup0 = t.createBindGroup(0, view0, type0, '2d', undefined);\n    if (binding0InBundle) {\n      assert(pass instanceof GPURenderPassEncoder);\n      t.createAndExecuteBundle(0, bindGroup0, pass as GPURenderPassEncoder);\n    } else {\n      pass.setBindGroup(0, bindGroup0);\n    }\n    if (type1 !== 'render-target') {\n      const bindGroup1 = t.createBindGroup(1, view1, type1, '2d', undefined);\n      if (binding1InBundle) {\n        assert(pass instanceof GPURenderPassEncoder);\n        t.createAndExecuteBundle(1, bindGroup1, pass as GPURenderPassEncoder);\n      } else {\n        pass.setBindGroup(1, bindGroup1);\n      }\n    }\n    if (compute) t.setComputePipelineAndCallDispatch(pass as GPUComputePassEncoder);\n    pass.endPass();\n\n    const disjointAspects =\n      (aspect0 === 'depth-only' && aspect1 === 'stencil-only') ||\n      (aspect0 === 'stencil-only' && aspect1 === 'depth-only');\n\n    // If subresources' mip/array slices has no overlap, or their binding types don't conflict,\n    // it will definitely success no matter what aspects they are binding to.\n    const success = disjointAspects || _resourceSuccess || _usageSuccess;\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('shader_stages_and_visibility')\n  .params(u =>\n    u\n      .combine('compute', [false, true])\n      .combine('readVisibility', [0, ...kShaderStages])\n      .combine('writeVisibility', [0, ...kShaderStages])\n      .unless(\n        p =>\n          // Writeonly-storage-texture binding type is not supported in vertex stage. But it is the\n          // only way to write into texture in compute. So there is no means to successfully create\n          // a binding which attempt to write into stage(s) with vertex stage in compute pass.\n          p.compute && Boolean(p.writeVisibility & GPUConst.ShaderStage.VERTEX)\n      )\n  )\n  .fn(async t => {\n    const { compute, readVisibility, writeVisibility } = t.params;\n\n    // writeonly-storage-texture binding type is not supported in vertex stage. So, this test\n    // uses writeonly-storage-texture binding as writable binding upon the same subresource if\n    // vertex stage is not included. Otherwise, it uses output attachment instead.\n    const writeHasVertexStage = Boolean(writeVisibility & GPUShaderStage.VERTEX);\n    const texUsage = writeHasVertexStage\n      ? GPUTextureUsage.SAMPLED | GPUTextureUsage.RENDER_ATTACHMENT\n      : GPUTextureUsage.SAMPLED | GPUTextureUsage.STORAGE;\n\n    const texture = t.createTexture({ usage: texUsage });\n    const view = texture.createView();\n    const bglEntries: GPUBindGroupLayoutEntry[] = [\n      { binding: 0, visibility: readVisibility, texture: {} },\n    ];\n    const bgEntries: GPUBindGroupEntry[] = [{ binding: 0, resource: view }];\n    if (!writeHasVertexStage) {\n      bglEntries.push({\n        binding: 1,\n        visibility: writeVisibility,\n        storageTexture: { access: 'write-only', format: 'rgba8unorm' },\n      });\n      bgEntries.push({ binding: 1, resource: view });\n    }\n    const bindGroup = t.device.createBindGroup({\n      entries: bgEntries,\n      layout: t.device.createBindGroupLayout({ entries: bglEntries }),\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = compute\n      ? encoder.beginComputePass()\n      : t.beginSimpleRenderPass(\n          encoder,\n          writeHasVertexStage ? view : t.createTexture().createView()\n        );\n    pass.setBindGroup(0, bindGroup);\n    if (compute) t.setComputePipelineAndCallDispatch(pass as GPUComputePassEncoder);\n    pass.endPass();\n\n    // Texture usages in bindings with invisible shader stages should be validated. Invisible shader\n    // stages include shader stage with visibility none, compute shader stage in render pass, and\n    // vertex/fragment shader stage in compute pass.\n    t.expectValidationError(() => {\n      encoder.finish();\n    });\n  });\n\n// We should validate the texture usages in bindings which are replaced by another setBindGroup()\n// call site upon the same index in the same render pass. However, replaced bindings in compute\n// should not be validated.\ng.test('replaced_binding')\n  .params(u =>\n    u\n      .combine('compute', [false, true])\n      .combine('callDrawOrDispatch', [false, true])\n      .combine('entry', [\n        { texture: {} },\n        { texture: { multisampled: true } },\n        { storageTexture: { access: 'read-only', format: 'rgba8unorm' } },\n        { storageTexture: { access: 'write-only', format: 'rgba8unorm' } },\n      ] as const)\n  )\n  .fn(async t => {\n    const { compute, callDrawOrDispatch, entry } = t.params;\n\n    const sampledView = t.createTexture().createView();\n    const sampledStorageView = t\n      .createTexture({ usage: GPUTextureUsage.STORAGE | GPUTextureUsage.SAMPLED })\n      .createView();\n\n    // Create bindGroup0. It has two bindings. These two bindings use different views/subresources.\n    const bglEntries0: GPUBindGroupLayoutEntry[] = [\n      { binding: 0, visibility: GPUShaderStage.FRAGMENT, texture: {} },\n      {\n        binding: 1,\n        visibility: GPUShaderStage.FRAGMENT,\n        ...entry,\n      },\n    ];\n    const bgEntries0: GPUBindGroupEntry[] = [\n      { binding: 0, resource: sampledView },\n      { binding: 1, resource: sampledStorageView },\n    ];\n    const bindGroup0 = t.device.createBindGroup({\n      entries: bgEntries0,\n      layout: t.device.createBindGroupLayout({ entries: bglEntries0 }),\n    });\n\n    // Create bindGroup1. It has one binding, which use the same view/subresoure of a binding in\n    // bindGroup0. So it may or may not conflicts with that binding in bindGroup0.\n    const bindGroup1 = t.createBindGroup(0, sampledStorageView, 'sampled-texture', '2d', undefined);\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = compute\n      ? encoder.beginComputePass()\n      : t.beginSimpleRenderPass(encoder, t.createTexture().createView());\n\n    // Set bindGroup0 and bindGroup1. bindGroup0 is replaced by bindGroup1 in the current pass.\n    // But bindings in bindGroup0 should be validated too.\n    pass.setBindGroup(0, bindGroup0);\n    if (callDrawOrDispatch) {\n      const pipeline = compute ? t.createNoOpComputePipeline() : t.createNoOpRenderPipeline();\n      t.setPipeline(pass, pipeline, compute);\n      t.issueDrawOrDispatch(pass, compute);\n    }\n    pass.setBindGroup(0, bindGroup1);\n    pass.endPass();\n\n    // TODO: If the Compatible Usage List (https://gpuweb.github.io/gpuweb/#compatible-usage-list)\n    // gets programmatically defined in capability_info, use it here, instead of this logic, for clarity.\n    let success = entry.storageTexture?.access !== 'write-only';\n    // Replaced bindings should not be validated in compute pass, because validation only occurs\n    // inside dispatch() which only looks at the current resource usages.\n    success ||= compute;\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('bindings_in_bundle')\n  .params(u =>\n    u\n      .combine('type0', ['render-target', ...kTextureBindingTypes] as const)\n      .combine('type1', ['render-target', ...kTextureBindingTypes] as const)\n      .beginSubcases()\n      .combine('binding0InBundle', [false, true])\n      .combine('binding1InBundle', [false, true])\n      .unless(\n        p =>\n          // We can't set 'render-target' in bundle, so we need to exclude it from bundle.\n          // In addition, if both bindings are non-bundle, there is no need to test it because\n          // we have far more comprehensive test cases for that situation in this file.\n          (p.binding0InBundle && p.type0 === 'render-target') ||\n          (p.binding1InBundle && p.type1 === 'render-target') ||\n          (!p.binding0InBundle && !p.binding1InBundle)\n      )\n  )\n  .fn(async t => {\n    const { binding0InBundle, binding1InBundle, type0, type1 } = t.params;\n\n    // Two bindings are attached to the same texture view.\n    const view = t\n      .createTexture({\n        usage:\n          GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.STORAGE | GPUTextureUsage.SAMPLED,\n      })\n      .createView();\n\n    const bindGroups: GPUBindGroup[] = [];\n    if (type0 !== 'render-target') {\n      const binding0TexFormat = type0 === 'sampled-texture' ? undefined : 'rgba8unorm';\n      bindGroups[0] = t.createBindGroup(0, view, type0, '2d', binding0TexFormat);\n    }\n    if (type1 !== 'render-target') {\n      const binding1TexFormat = type1 === 'sampled-texture' ? undefined : 'rgba8unorm';\n      bindGroups[1] = t.createBindGroup(1, view, type1, '2d', binding1TexFormat);\n    }\n\n    const encoder = t.device.createCommandEncoder();\n    // At least one binding is in bundle, which means that its type is not 'render-target'.\n    // As a result, only one binding's type is 'render-target' at most.\n    const pass = t.beginSimpleRenderPass(\n      encoder,\n      type0 === 'render-target' || type1 === 'render-target' ? view : t.createTexture().createView()\n    );\n\n    const bindingsInBundle: boolean[] = [binding0InBundle, binding1InBundle];\n    for (let i = 0; i < 2; i++) {\n      // Create a bundle for each bind group if its bindings is required to be in bundle on purpose.\n      // Otherwise, call setBindGroup directly in pass if needed (when its binding is not\n      // 'render-target').\n      if (bindingsInBundle[i]) {\n        const bundleEncoder = t.device.createRenderBundleEncoder({\n          colorFormats: ['rgba8unorm'],\n        });\n        bundleEncoder.setBindGroup(i, bindGroups[i]);\n        const bundleInPass = bundleEncoder.finish();\n        pass.executeBundles([bundleInPass]);\n      } else if (bindGroups[i] !== undefined) {\n        pass.setBindGroup(i, bindGroups[i]);\n      }\n    }\n\n    pass.endPass();\n\n    let success = false;\n    if (\n      (type0 === 'sampled-texture' || type0 === 'readonly-storage-texture') &&\n      (type1 === 'sampled-texture' || type1 === 'readonly-storage-texture')\n    ) {\n      success = true;\n    }\n\n    if (type0 === 'writeonly-storage-texture' && type1 === 'writeonly-storage-texture') {\n      success = true;\n    }\n\n    // Resource usages in bundle should be validated.\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('unused_bindings_in_pipeline')\n  .params(u =>\n    u\n      .combine('compute', [false, true])\n      .combine('useBindGroup0', [false, true])\n      .combine('useBindGroup1', [false, true])\n      .combine('setBindGroupsOrder', ['common', 'reversed'] as const)\n      .combine('setPipeline', ['before', 'middle', 'after', 'none'] as const)\n      .combine('callDrawOrDispatch', [false, true])\n  )\n  .fn(async t => {\n    const {\n      compute,\n      useBindGroup0,\n      useBindGroup1,\n      setBindGroupsOrder,\n      setPipeline,\n      callDrawOrDispatch,\n    } = t.params;\n    const view = t.createTexture({ usage: GPUTextureUsage.STORAGE }).createView();\n    const bindGroup0 = t.createBindGroup(0, view, 'readonly-storage-texture', '2d', 'rgba8unorm');\n    const bindGroup1 = t.createBindGroup(0, view, 'writeonly-storage-texture', '2d', 'rgba8unorm');\n\n    const wgslVertex = `[[stage(vertex)]] fn main() -> [[builtin(position)]] vec4<f32> {\n  return vec4<f32>();\n}`;\n    // TODO: revisit the shader code once 'image' can be supported in wgsl.\n    const wgslFragment = pp`\n      ${pp._if(useBindGroup0)}\n      [[group(0), binding(0)]] var<image> image0 : texture_storage_2d<rgba8unorm, read>;\n      ${pp._endif}\n      ${pp._if(useBindGroup1)}\n      [[group(1), binding(0)]] var<image> image1 : texture_storage_2d<rgba8unorm, read>;\n      ${pp._endif}\n      [[stage(fragment)]] fn main() {}\n    `;\n\n    // TODO: revisit the shader code once 'image' can be supported in wgsl.\n    const wgslCompute = pp`\n      ${pp._if(useBindGroup0)}\n      [[group(0), binding(0)]] var<image> image0 : texture_storage_2d<rgba8unorm, read>;\n      ${pp._endif}\n      ${pp._if(useBindGroup1)}\n      [[group(1), binding(0)]] var<image> image1 : texture_storage_2d<rgba8unorm, read>;\n      ${pp._endif}\n      [[stage(compute), workgroup_size(1)]] fn main() {}\n    `;\n\n    const pipeline = compute\n      ? t.device.createComputePipeline({\n          compute: {\n            module: t.device.createShaderModule({\n              code: wgslCompute,\n            }),\n            entryPoint: 'main',\n          },\n        })\n      : t.device.createRenderPipeline({\n          vertex: {\n            module: t.device.createShaderModule({\n              code: wgslVertex,\n            }),\n            entryPoint: 'main',\n          },\n          fragment: {\n            module: t.device.createShaderModule({\n              code: wgslFragment,\n            }),\n            entryPoint: 'main',\n            targets: [{ format: 'rgba8unorm' }],\n          },\n          primitive: { topology: 'triangle-list' },\n        });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = compute\n      ? encoder.beginComputePass()\n      : encoder.beginRenderPass({\n          colorAttachments: [\n            {\n              view: t.createTexture().createView(),\n              loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n              storeOp: 'store',\n            },\n          ],\n        });\n    const index0 = setBindGroupsOrder === 'common' ? 0 : 1;\n    const index1 = setBindGroupsOrder === 'common' ? 1 : 0;\n    if (setPipeline === 'before') t.setPipeline(pass, pipeline, compute);\n    pass.setBindGroup(index0, bindGroup0);\n    if (setPipeline === 'middle') t.setPipeline(pass, pipeline, compute);\n    pass.setBindGroup(index1, bindGroup1);\n    if (setPipeline === 'after') t.setPipeline(pass, pipeline, compute);\n    if (callDrawOrDispatch) t.issueDrawOrDispatch(pass, compute);\n    pass.endPass();\n\n    // Resource usage validation scope is defined by dispatch calls. If dispatch is not called,\n    // we don't need to do resource usage validation and no validation error to be reported.\n    const success = compute && !callDrawOrDispatch;\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('validation_scope,no_draw_or_dispatch')\n  .params(u => u.combine('compute', [false, true]))\n  .fn(async t => {\n    const { compute } = t.params;\n\n    const { bindGroup0, bindGroup1, encoder, pass, pipeline } = t.testValidationScope(compute);\n    t.setPipeline(pass, pipeline, compute);\n    pass.setBindGroup(0, bindGroup0);\n    pass.setBindGroup(1, bindGroup1);\n    pass.endPass();\n\n    // Resource usage validation scope is defined by dispatch calls. If dispatch is not called,\n    // we don't need to do resource usage validation and no validation error to be reported.\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !compute);\n  });\n\ng.test('validation_scope,same_draw_or_dispatch')\n  .params(u => u.combine('compute', [false, true]))\n  .fn(async t => {\n    const { compute } = t.params;\n\n    const { bindGroup0, bindGroup1, encoder, pass, pipeline } = t.testValidationScope(compute);\n    t.setPipeline(pass, pipeline, compute);\n    pass.setBindGroup(0, bindGroup0);\n    pass.setBindGroup(1, bindGroup1);\n    t.issueDrawOrDispatch(pass, compute);\n    pass.endPass();\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    });\n  });\n\ng.test('validation_scope,different_draws_or_dispatches')\n  .params(u => u.combine('compute', [false, true]))\n  .fn(async t => {\n    const { compute } = t.params;\n    const { bindGroup0, bindGroup1, encoder, pass, pipeline } = t.testValidationScope(compute);\n    t.setPipeline(pass, pipeline, compute);\n\n    pass.setBindGroup(0, bindGroup0);\n    t.issueDrawOrDispatch(pass, compute);\n\n    pass.setBindGroup(1, bindGroup1);\n    t.issueDrawOrDispatch(pass, compute);\n\n    pass.endPass();\n\n    // Note that bindGroup0 will be inherited in the second draw/dispatch.\n    t.expectValidationError(() => {\n      encoder.finish();\n    });\n  });\n\ng.test('validation_scope,different_passes')\n  .params(u => u.combine('compute', [false, true]))\n  .fn(async t => {\n    const { compute } = t.params;\n    const { bindGroup0, bindGroup1, encoder, pass, pipeline } = t.testValidationScope(compute);\n    t.setPipeline(pass, pipeline, compute);\n    pass.setBindGroup(0, bindGroup0);\n    if (compute) t.setComputePipelineAndCallDispatch(pass as GPUComputePassEncoder);\n    pass.endPass();\n\n    const pass1 = compute\n      ? encoder.beginComputePass()\n      : t.beginSimpleRenderPass(encoder, t.createTexture().createView());\n    t.setPipeline(pass1, pipeline, compute);\n    pass1.setBindGroup(1, bindGroup1);\n    if (compute) t.setComputePipelineAndCallDispatch(pass as GPUComputePassEncoder);\n    pass1.endPass();\n\n    // No validation error.\n    encoder.finish();\n  });\n"],"file":"in_pass_encoder.spec.js"}