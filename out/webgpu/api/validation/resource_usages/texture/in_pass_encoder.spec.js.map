{"version":3,"sources":["../../../../../../src/webgpu/api/validation/resource_usages/texture/in_pass_encoder.spec.ts"],"names":["description","makeTestGroup","pp","assert","kDepthStencilFormats","kTextureFormatInfo","kShaderStages","GPUConst","ValidationTest","kTextureBindingTypes","SIZE","TextureUsageTracking","createTexture","options","width","height","arrayLayerCount","mipLevelCount","sampleCount","format","usage","GPUTextureUsage","RENDER_ATTACHMENT","TEXTURE_BINDING","device","size","depthOrArrayLayers","dimension","createBindGroupLayout","binding","bindingType","viewDimension","sampleType","entry","texture","multisampled","undefined","storageTexture","access","entries","visibility","GPUShaderStage","COMPUTE","FRAGMENT","createBindGroup","resource","layout","createAndExecuteBundle","bindGroup","pass","depthStencilFormat","bundleEncoder","createRenderBundleEncoder","colorFormats","setBindGroup","bundle","finish","executeBundles","beginSimpleRenderPass","encoder","view","beginRenderPass","colorAttachments","loadValue","r","g","b","a","storeOp","testValidationScope","compute","STORAGE_BINDING","createView","bindGroupLayouts","bindGroup0","bindGroup1","createCommandEncoder","beginComputePass","pipeline","createNoOpComputePipeline","createPipelineLayout","createNoOpRenderPipeline","setPipeline","issueDrawOrDispatch","dispatch","draw","setComputePipelineAndCallDispatch","BASE_LEVEL","TOTAL_LEVELS","BASE_LAYER","TOTAL_LAYERS","SLICE_COUNT","test","params","u","combine","combineWithParams","_usageOK","type0","type1","beginSubcases","unless","p","binding0InBundle","binding1InBundle","levelCount0","layerCount0","baseLevel1","levelCount1","baseLayer1","layerCount1","_resourceSuccess","fn","t","dimension0","view0","baseMipLevel","baseArrayLayer","dimension1","view1","endPass","bgls","storageTextureFormat0","bgl0","push","GPURenderPassEncoder","storageTextureFormat1","bgl1","success","expectValidationError","baseLevel","baseLayer","aspect0","stencil","aspect1","depth","_usageSuccess","selectDeviceOrSkipTestCase","feature","aspect","depthStencilAttachment","depthStoreOp","depthLoadValue","stencilStoreOp","stencilLoadValue","aspectSampleType","disjointAspects","Boolean","writeVisibility","ShaderStage","VERTEX","readVisibility","writeHasVertexStage","texUsage","bglEntries","bgEntries","bgl","callDrawOrDispatch","sampledView","sampledStorageView","bglEntries0","bgEntries0","expandWithParams","usageForType","type","_usage0","_usage1","_sampleCount","bindGroups","binding0TexFormat","binding1TexFormat","bindingsInBundle","i","bundleInPass","isReadOnly","useBindGroup0","useBindGroup1","setBindGroupsOrder","wgslVertex","wgslFragment","_if","_endif","wgslCompute","createComputePipeline","module","createShaderModule","code","entryPoint","createRenderPipeline","vertex","fragment","targets","writeMask","primitive","topology","index0","index1","pass1"],"mappings":"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","sourcesContent":["export const description = `\nTexture Usages Validation Tests in Render Pass and Compute Pass.\n\nTODO: update for new binding structure.\n\nTODO: description per test\n\nTest Coverage:\n  - For each combination of two texture usages:\n    - For various subresource ranges (different mip levels or array layers) that overlap a given\n      subresources or not for color formats:\n      - For various places that resources are used, for example, used in bundle or used in render\n        pass directly.\n        - Check that an error is generated when read-write or write-write usages are binding to the\n          same texture subresource. Otherwise, no error should be generated. One exception is race\n          condition upon two writeonly-storage-texture usages, which is valid.\n\n  - For each combination of two texture usages:\n    - For various aspects (all, depth-only, stencil-only) that overlap a given subresources or not\n      for depth/stencil formats:\n      - Check that an error is generated when read-write or write-write usages are binding to the\n        same aspect. Otherwise, no error should be generated.\n\n  - Test combinations of two shader stages:\n    - Texture usages in bindings with invisible shader stages should be validated. Invisible shader\n      stages include shader stage with visibility none, compute shader stage in render pass, and\n      vertex/fragment shader stage in compute pass.\n\n  - Tests replaced bindings:\n    - Texture usages via bindings replaced by another setBindGroup() upon the same bindGroup index\n      in render pass should be validated. However, replaced bindings should not be validated in\n      compute pass.\n\n  - Test texture usages in bundle:\n    - Texture usages in bundle should be validated if that bundle is executed in the current scope.\n\n  - Test texture usages with unused bindings:\n    - Texture usages should be validated even its bindings is not used in pipeline.\n\n  - Test texture usages validation scope:\n    - Texture usages should be validated per each render pass. And they should be validated per each\n      dispatch call in compute.\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { pp } from '../../../../../common/util/preprocessor.js';\nimport { assert } from '../../../../../common/util/util.js';\nimport {\n  kDepthStencilFormats,\n  kTextureFormatInfo,\n  kShaderStages,\n} from '../../../../capability_info.js';\nimport { GPUConst } from '../../../../constants.js';\nimport { ValidationTest } from '../../validation_test.js';\n\ntype TextureBindingType = 'sampled-texture' | 'multisampled-texture' | 'writeonly-storage-texture';\nconst kTextureBindingTypes = [\n  'sampled-texture',\n  'multisampled-texture',\n  'writeonly-storage-texture',\n] as const;\n\nconst SIZE = 32;\nclass TextureUsageTracking extends ValidationTest {\n  createTexture(\n    options: {\n      width?: number;\n      height?: number;\n      arrayLayerCount?: number;\n      mipLevelCount?: number;\n      sampleCount?: number;\n      format?: GPUTextureFormat;\n      usage?: GPUTextureUsageFlags;\n    } = {}\n  ): GPUTexture {\n    const {\n      width = SIZE,\n      height = SIZE,\n      arrayLayerCount = 1,\n      mipLevelCount = 1,\n      sampleCount = 1,\n      format = 'rgba8unorm',\n      usage = GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING,\n    } = options;\n\n    return this.device.createTexture({\n      size: { width, height, depthOrArrayLayers: arrayLayerCount },\n      mipLevelCount,\n      sampleCount,\n      dimension: '2d',\n      format,\n      usage,\n    });\n  }\n\n  createBindGroupLayout(\n    binding: number,\n    bindingType: TextureBindingType,\n    viewDimension: GPUTextureViewDimension,\n    options: {\n      format?: GPUTextureFormat;\n      sampleType?: GPUTextureSampleType;\n    } = {}\n  ): GPUBindGroupLayout {\n    const { sampleType, format } = options;\n    let entry: Omit<GPUBindGroupLayoutEntry, 'binding' | 'visibility'>;\n    switch (bindingType) {\n      case 'sampled-texture':\n        entry = { texture: { viewDimension, sampleType } };\n        break;\n      case 'multisampled-texture':\n        entry = { texture: { viewDimension, multisampled: true, sampleType } };\n        break;\n      case 'writeonly-storage-texture':\n        assert(format !== undefined);\n        entry = { storageTexture: { access: 'write-only', format, viewDimension } };\n        break;\n    }\n\n    return this.device.createBindGroupLayout({\n      entries: [\n        { binding, visibility: GPUShaderStage.COMPUTE | GPUShaderStage.FRAGMENT, ...entry },\n      ],\n    });\n  }\n\n  createBindGroup(\n    binding: number,\n    resource: GPUTextureView,\n    bindingType: TextureBindingType,\n    viewDimension: GPUTextureViewDimension,\n    options: {\n      format?: GPUTextureFormat;\n      sampleType?: GPUTextureSampleType;\n    } = {}\n  ): GPUBindGroup {\n    return this.device.createBindGroup({\n      entries: [{ binding, resource }],\n      layout: this.createBindGroupLayout(binding, bindingType, viewDimension, options),\n    });\n  }\n\n  createAndExecuteBundle(\n    binding: number,\n    bindGroup: GPUBindGroup,\n    pass: GPURenderPassEncoder,\n    depthStencilFormat?: GPUTextureFormat\n  ) {\n    const bundleEncoder = this.device.createRenderBundleEncoder({\n      colorFormats: ['rgba8unorm'],\n      depthStencilFormat,\n    });\n    bundleEncoder.setBindGroup(binding, bindGroup);\n    const bundle = bundleEncoder.finish();\n    pass.executeBundles([bundle]);\n  }\n\n  beginSimpleRenderPass(encoder: GPUCommandEncoder, view: GPUTextureView): GPURenderPassEncoder {\n    return encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view,\n          loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n          storeOp: 'store',\n        },\n      ],\n    });\n  }\n\n  testValidationScope(\n    compute: boolean\n  ): {\n    bindGroup0: GPUBindGroup;\n    bindGroup1: GPUBindGroup;\n    encoder: GPUCommandEncoder;\n    pass: GPURenderPassEncoder | GPUComputePassEncoder;\n    pipeline: GPURenderPipeline | GPUComputePipeline;\n  } {\n    // Create two bind groups. Resource usages conflict between these two bind groups. But resource\n    // usage inside each bind group doesn't conflict.\n    const view = this.createTexture({\n      usage: GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.TEXTURE_BINDING,\n    }).createView();\n    const bindGroupLayouts = [\n      this.createBindGroupLayout(0, 'sampled-texture', '2d'),\n      this.createBindGroupLayout(0, 'writeonly-storage-texture', '2d', { format: 'rgba8unorm' }),\n    ];\n    const bindGroup0 = this.device.createBindGroup({\n      layout: bindGroupLayouts[0],\n      entries: [{ binding: 0, resource: view }],\n    });\n    const bindGroup1 = this.device.createBindGroup({\n      layout: bindGroupLayouts[1],\n      entries: [{ binding: 0, resource: view }],\n    });\n\n    const encoder = this.device.createCommandEncoder();\n    const pass = compute\n      ? encoder.beginComputePass()\n      : this.beginSimpleRenderPass(encoder, this.createTexture().createView());\n\n    // Create pipeline. Note that bindings unused in pipeline should be validated too.\n    const pipeline = compute\n      ? this.createNoOpComputePipeline(\n          this.device.createPipelineLayout({\n            bindGroupLayouts,\n          })\n        )\n      : this.createNoOpRenderPipeline();\n    return {\n      bindGroup0,\n      bindGroup1,\n      encoder,\n      pass,\n      pipeline,\n    };\n  }\n\n  setPipeline(\n    pass: GPURenderPassEncoder | GPUComputePassEncoder,\n    pipeline: GPURenderPipeline | GPUComputePipeline,\n    compute: boolean\n  ) {\n    if (compute) {\n      (pass as GPUComputePassEncoder).setPipeline(pipeline as GPUComputePipeline);\n    } else {\n      (pass as GPURenderPassEncoder).setPipeline(pipeline as GPURenderPipeline);\n    }\n  }\n\n  issueDrawOrDispatch(pass: GPURenderPassEncoder | GPUComputePassEncoder, compute: boolean) {\n    if (compute) {\n      (pass as GPUComputePassEncoder).dispatch(1);\n    } else {\n      (pass as GPURenderPassEncoder).draw(3, 1, 0, 0);\n    }\n  }\n\n  setComputePipelineAndCallDispatch(pass: GPUComputePassEncoder, layout?: GPUPipelineLayout) {\n    const pipeline = this.createNoOpComputePipeline(layout);\n    pass.setPipeline(pipeline);\n    pass.dispatch(1);\n  }\n}\n\nexport const g = makeTestGroup(TextureUsageTracking);\n\nconst BASE_LEVEL = 1;\nconst TOTAL_LEVELS = 6;\nconst BASE_LAYER = 1;\nconst TOTAL_LAYERS = 6;\nconst SLICE_COUNT = 2;\n\n// For all tests below, we test compute pass if 'compute' is true, and test render pass otherwise.\ng.test('subresources_and_binding_types_combination_for_color')\n  .params(u =>\n    u\n      .combine('compute', [false, true])\n      .combineWithParams([\n        { _usageOK: true, type0: 'sampled-texture', type1: 'sampled-texture' },\n        { _usageOK: false, type0: 'sampled-texture', type1: 'writeonly-storage-texture' },\n        { _usageOK: false, type0: 'sampled-texture', type1: 'render-target' },\n        // Race condition upon multiple writable storage texture is valid.\n        { _usageOK: true, type0: 'writeonly-storage-texture', type1: 'writeonly-storage-texture' },\n        { _usageOK: false, type0: 'writeonly-storage-texture', type1: 'render-target' },\n        { _usageOK: false, type0: 'render-target', type1: 'render-target' },\n      ] as const)\n      .beginSubcases()\n      .combine('binding0InBundle', [false, true])\n      .combine('binding1InBundle', [false, true])\n      .unless(\n        p =>\n          // We can't set 'render-target' in bundle, so we need to exclude it from bundle.\n          (p.binding0InBundle && p.type0 === 'render-target') ||\n          (p.binding1InBundle && p.type1 === 'render-target') ||\n          // We can't set 'render-target' or bundle in compute.\n          (p.compute &&\n            (p.binding0InBundle ||\n              p.binding1InBundle ||\n              p.type0 === 'render-target' ||\n              p.type1 === 'render-target'))\n      )\n      .combineWithParams([\n        // Two texture usages are binding to the same texture subresource.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL,\n          levelCount1: 1,\n          baseLayer1: BASE_LAYER,\n          layerCount1: 1,\n          _resourceSuccess: false,\n        },\n\n        // Two texture usages are binding to different mip levels of the same texture.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL + 1,\n          levelCount1: 1,\n          baseLayer1: BASE_LAYER,\n          layerCount1: 1,\n          _resourceSuccess: true,\n        },\n\n        // Two texture usages are binding to different array layers of the same texture.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL,\n          levelCount1: 1,\n          baseLayer1: BASE_LAYER + 1,\n          layerCount1: 1,\n          _resourceSuccess: true,\n        },\n\n        // The second texture usage contains the whole mip chain where the first texture usage is using.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: 0,\n          levelCount1: TOTAL_LEVELS,\n          baseLayer1: BASE_LAYER,\n          layerCount1: 1,\n          _resourceSuccess: false,\n        },\n\n        // The second texture usage contains all layers where the first texture usage is using.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL,\n          levelCount1: 1,\n          baseLayer1: 0,\n          layerCount1: TOTAL_LAYERS,\n          _resourceSuccess: false,\n        },\n\n        // The second texture usage contains all subresources where the first texture usage is using.\n        {\n          levelCount0: 1,\n          layerCount0: 1,\n          baseLevel1: 0,\n          levelCount1: TOTAL_LEVELS,\n          baseLayer1: 0,\n          layerCount1: TOTAL_LAYERS,\n          _resourceSuccess: false,\n        },\n\n        // Both of the two usages access a few mip levels on the same layer but they don't overlap.\n        {\n          levelCount0: SLICE_COUNT,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL + SLICE_COUNT,\n          levelCount1: 3,\n          baseLayer1: BASE_LAYER,\n          layerCount1: 1,\n          _resourceSuccess: true,\n        },\n\n        // Both of the two usages access a few mip levels on the same layer and they overlap.\n        {\n          levelCount0: SLICE_COUNT,\n          layerCount0: 1,\n          baseLevel1: BASE_LEVEL + SLICE_COUNT - 1,\n          levelCount1: 3,\n          baseLayer1: BASE_LAYER,\n          layerCount1: 1,\n          _resourceSuccess: false,\n        },\n\n        // Both of the two usages access a few array layers on the same level but they don't overlap.\n        {\n          levelCount0: 1,\n          layerCount0: SLICE_COUNT,\n          baseLevel1: BASE_LEVEL,\n          levelCount1: 1,\n          baseLayer1: BASE_LAYER + SLICE_COUNT,\n          layerCount1: 3,\n          _resourceSuccess: true,\n        },\n\n        // Both of the two usages access a few array layers on the same level and they overlap.\n        {\n          levelCount0: 1,\n          layerCount0: SLICE_COUNT,\n          baseLevel1: BASE_LEVEL,\n          levelCount1: 1,\n          baseLayer1: BASE_LAYER + SLICE_COUNT - 1,\n          layerCount1: 3,\n          _resourceSuccess: false,\n        },\n\n        // Both of the two usages access a few array layers and mip levels but they don't overlap.\n        {\n          levelCount0: SLICE_COUNT,\n          layerCount0: SLICE_COUNT,\n          baseLevel1: BASE_LEVEL + SLICE_COUNT,\n          levelCount1: 3,\n          baseLayer1: BASE_LAYER + SLICE_COUNT,\n          layerCount1: 3,\n          _resourceSuccess: true,\n        },\n\n        // Both of the two usages access a few array layers and mip levels and they overlap.\n        {\n          levelCount0: SLICE_COUNT,\n          layerCount0: SLICE_COUNT,\n          baseLevel1: BASE_LEVEL + SLICE_COUNT - 1,\n          levelCount1: 3,\n          baseLayer1: BASE_LAYER + SLICE_COUNT - 1,\n          layerCount1: 3,\n          _resourceSuccess: false,\n        },\n      ])\n      .unless(\n        p =>\n          // Every color attachment or storage texture can use only one single subresource.\n          (p.type0 !== 'sampled-texture' && (p.levelCount0 !== 1 || p.layerCount0 !== 1)) ||\n          (p.type1 !== 'sampled-texture' && (p.levelCount1 !== 1 || p.layerCount1 !== 1)) ||\n          // All color attachments' size should be the same.\n          (p.type0 === 'render-target' &&\n            p.type1 === 'render-target' &&\n            p.baseLevel1 !== BASE_LEVEL)\n      )\n  )\n  .fn(async t => {\n    const {\n      compute,\n      binding0InBundle,\n      binding1InBundle,\n      levelCount0,\n      layerCount0,\n      baseLevel1,\n      baseLayer1,\n      levelCount1,\n      layerCount1,\n      type0,\n      type1,\n      _usageOK,\n      _resourceSuccess,\n    } = t.params;\n\n    const texture = t.createTexture({\n      arrayLayerCount: TOTAL_LAYERS,\n      mipLevelCount: TOTAL_LEVELS,\n      usage:\n        GPUTextureUsage.TEXTURE_BINDING |\n        GPUTextureUsage.STORAGE_BINDING |\n        GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const dimension0 = layerCount0 !== 1 ? '2d-array' : '2d';\n    const view0 = texture.createView({\n      dimension: dimension0,\n      baseMipLevel: BASE_LEVEL,\n      mipLevelCount: levelCount0,\n      baseArrayLayer: BASE_LAYER,\n      arrayLayerCount: layerCount0,\n    });\n\n    const dimension1 = layerCount1 !== 1 ? '2d-array' : '2d';\n    const view1 = texture.createView({\n      dimension: dimension1,\n      baseMipLevel: baseLevel1,\n      mipLevelCount: levelCount1,\n      baseArrayLayer: baseLayer1,\n      arrayLayerCount: layerCount1,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    if (type0 === 'render-target') {\n      // Note that type1 is 'render-target' too. So we don't need to create bindings.\n      assert(type1 === 'render-target');\n      const pass = encoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: view0,\n            loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n            storeOp: 'store',\n          },\n          {\n            view: view1,\n            loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n            storeOp: 'store',\n          },\n        ],\n      });\n      pass.endPass();\n    } else {\n      const pass = compute\n        ? encoder.beginComputePass()\n        : t.beginSimpleRenderPass(\n            encoder,\n            type1 === 'render-target' ? view1 : t.createTexture().createView()\n          );\n\n      const bgls: GPUBindGroupLayout[] = [];\n      // Create bind groups. Set bind groups in pass directly or set bind groups in bundle.\n      const storageTextureFormat0 = type0 === 'sampled-texture' ? undefined : 'rgba8unorm';\n\n      const bgl0 = t.createBindGroupLayout(0, type0, dimension0, { format: storageTextureFormat0 });\n      const bindGroup0 = t.device.createBindGroup({\n        layout: bgl0,\n        entries: [{ binding: 0, resource: view0 }],\n      });\n      bgls.push(bgl0);\n\n      if (binding0InBundle) {\n        assert(pass instanceof GPURenderPassEncoder);\n        t.createAndExecuteBundle(0, bindGroup0, pass);\n      } else {\n        pass.setBindGroup(0, bindGroup0);\n      }\n      if (type1 !== 'render-target') {\n        const storageTextureFormat1 = type1 === 'sampled-texture' ? undefined : 'rgba8unorm';\n\n        const bgl1 = t.createBindGroupLayout(1, type1, dimension1, {\n          format: storageTextureFormat1,\n        });\n        const bindGroup1 = t.device.createBindGroup({\n          layout: bgl1,\n          entries: [{ binding: 1, resource: view1 }],\n        });\n        bgls.push(bgl1);\n\n        if (binding1InBundle) {\n          assert(pass instanceof GPURenderPassEncoder);\n          t.createAndExecuteBundle(1, bindGroup1, pass);\n        } else {\n          pass.setBindGroup(1, bindGroup1);\n        }\n      }\n      if (compute) {\n        t.setComputePipelineAndCallDispatch(\n          pass as GPUComputePassEncoder,\n          t.device.createPipelineLayout({ bindGroupLayouts: bgls })\n        );\n      }\n      pass.endPass();\n    }\n\n    const success = _resourceSuccess || _usageOK;\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('subresources_and_binding_types_combination_for_aspect')\n  .params(u =>\n    u\n      .combine('compute', [false, true])\n      .combine('binding0InBundle', [false, true])\n      .combine('binding1InBundle', [false, true])\n      .combine('format', kDepthStencilFormats)\n      .beginSubcases()\n      .combineWithParams([\n        {\n          baseLevel: BASE_LEVEL,\n          baseLayer: BASE_LAYER,\n          _resourceSuccess: false,\n        },\n        {\n          baseLevel: BASE_LEVEL + 1,\n          baseLayer: BASE_LAYER,\n          _resourceSuccess: true,\n        },\n        {\n          baseLevel: BASE_LEVEL,\n          baseLayer: BASE_LAYER + 1,\n          _resourceSuccess: true,\n        },\n      ])\n      .combine('aspect0', ['all', 'depth-only', 'stencil-only'] as const)\n      .combine('aspect1', ['all', 'depth-only', 'stencil-only'] as const)\n      .unless(\n        p =>\n          (p.aspect0 === 'stencil-only' && !kTextureFormatInfo[p.format].stencil) ||\n          (p.aspect1 === 'stencil-only' && !kTextureFormatInfo[p.format].stencil)\n      )\n      .unless(\n        p =>\n          (p.aspect0 === 'depth-only' && !kTextureFormatInfo[p.format].depth) ||\n          (p.aspect1 === 'depth-only' && !kTextureFormatInfo[p.format].depth)\n      )\n      .combineWithParams([\n        {\n          type0: 'sampled-texture',\n          type1: 'sampled-texture',\n          _usageSuccess: true,\n        },\n        {\n          type0: 'sampled-texture',\n          type1: 'render-target',\n          _usageSuccess: false,\n        },\n      ] as const)\n      .unless(\n        // Can't sample a multiplanar texture without selecting an aspect.\n        p =>\n          kTextureFormatInfo[p.format].depth &&\n          kTextureFormatInfo[p.format].stencil &&\n          ((p.aspect0 === 'all' && p.type0 === 'sampled-texture') ||\n            (p.aspect1 === 'all' && p.type1 === 'sampled-texture'))\n      )\n      .unless(\n        p =>\n          // We can't set 'render-target' in bundle, so we need to exclude it from bundle.\n          p.binding1InBundle && p.type1 === 'render-target'\n      )\n      .unless(\n        p =>\n          // We can't set 'render-target' or bundle in compute. Note that type0 is definitely not\n          // 'render-target'\n          p.compute && (p.binding0InBundle || p.binding1InBundle || p.type1 === 'render-target')\n      )\n  )\n  .fn(async t => {\n    const {\n      compute,\n      binding0InBundle,\n      binding1InBundle,\n      format,\n      baseLevel,\n      baseLayer,\n      aspect0,\n      aspect1,\n      type0,\n      type1,\n      _resourceSuccess,\n      _usageSuccess,\n    } = t.params;\n    await t.selectDeviceOrSkipTestCase(kTextureFormatInfo[format].feature);\n\n    const texture = t.createTexture({\n      arrayLayerCount: TOTAL_LAYERS,\n      mipLevelCount: TOTAL_LEVELS,\n      format,\n    });\n\n    const view0 = texture.createView({\n      baseMipLevel: BASE_LEVEL,\n      mipLevelCount: 1,\n      baseArrayLayer: BASE_LAYER,\n      arrayLayerCount: 1,\n      aspect: aspect0,\n    });\n\n    const view1 = texture.createView({\n      baseMipLevel: baseLevel,\n      mipLevelCount: 1,\n      baseArrayLayer: baseLayer,\n      arrayLayerCount: 1,\n      aspect: aspect1,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    // Color attachment's size should match depth/stencil attachment's size. Note that if\n    // type1 !== 'render-target' then there's no depthStencilAttachment to match anyway.\n    const depthStencilFormat = type1 === 'render-target' ? format : undefined;\n\n    const size = SIZE >> baseLevel;\n    const pass = compute\n      ? encoder.beginComputePass()\n      : encoder.beginRenderPass({\n          colorAttachments: [\n            {\n              view: t.createTexture({ width: size, height: size }).createView(),\n              loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n              storeOp: 'store',\n            },\n          ],\n          depthStencilAttachment: depthStencilFormat\n            ? {\n                view: view1,\n                depthStoreOp: 'discard',\n                depthLoadValue: 'load',\n                stencilStoreOp: 'discard',\n                stencilLoadValue: 'load',\n              }\n            : undefined,\n        });\n\n    const aspectSampleType = (format: GPUTextureFormat, aspect: typeof aspect0) => {\n      switch (aspect) {\n        case 'depth-only':\n          return 'depth';\n        case 'stencil-only':\n          return 'uint';\n        case 'all':\n          assert(kTextureFormatInfo[format].depth !== kTextureFormatInfo[format].stencil);\n          if (kTextureFormatInfo[format].stencil) {\n            return 'uint';\n          }\n          return 'depth';\n      }\n    };\n\n    // Create bind groups. Set bind groups in pass directly or set bind groups in bundle.\n    const bindGroup0 = t.createBindGroup(0, view0, type0, '2d', {\n      sampleType: type0 === 'sampled-texture' ? aspectSampleType(format, aspect0) : undefined,\n    });\n    if (binding0InBundle) {\n      assert(pass instanceof GPURenderPassEncoder);\n      t.createAndExecuteBundle(0, bindGroup0, pass, depthStencilFormat);\n    } else {\n      pass.setBindGroup(0, bindGroup0);\n    }\n    if (type1 !== 'render-target') {\n      const bindGroup1 = t.createBindGroup(1, view1, type1, '2d', {\n        sampleType: type1 === 'sampled-texture' ? aspectSampleType(format, aspect1) : undefined,\n      });\n      if (binding1InBundle) {\n        assert(pass instanceof GPURenderPassEncoder);\n        t.createAndExecuteBundle(1, bindGroup1, pass, depthStencilFormat);\n      } else {\n        pass.setBindGroup(1, bindGroup1);\n      }\n    }\n    if (compute) t.setComputePipelineAndCallDispatch(pass as GPUComputePassEncoder);\n    pass.endPass();\n\n    const disjointAspects =\n      (aspect0 === 'depth-only' && aspect1 === 'stencil-only') ||\n      (aspect0 === 'stencil-only' && aspect1 === 'depth-only');\n\n    // If subresources' mip/array slices has no overlap, or their binding types don't conflict,\n    // it will definitely success no matter what aspects they are binding to.\n    const success = disjointAspects || _resourceSuccess || _usageSuccess;\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('shader_stages_and_visibility')\n  .params(u =>\n    u\n      .combine('compute', [false, true])\n      .combine('readVisibility', [0, ...kShaderStages])\n      .combine('writeVisibility', [0, ...kShaderStages])\n      .unless(\n        p =>\n          // Writeonly-storage-texture binding type is not supported in vertex stage. But it is the\n          // only way to write into texture in compute. So there is no means to successfully create\n          // a binding which attempt to write into stage(s) with vertex stage in compute pass.\n          p.compute && Boolean(p.writeVisibility & GPUConst.ShaderStage.VERTEX)\n      )\n  )\n  .fn(async t => {\n    const { compute, readVisibility, writeVisibility } = t.params;\n\n    // writeonly-storage-texture binding type is not supported in vertex stage. So, this test\n    // uses writeonly-storage-texture binding as writable binding upon the same subresource if\n    // vertex stage is not included. Otherwise, it uses output attachment instead.\n    const writeHasVertexStage = Boolean(writeVisibility & GPUShaderStage.VERTEX);\n    const texUsage = writeHasVertexStage\n      ? GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.RENDER_ATTACHMENT\n      : GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.STORAGE_BINDING;\n\n    const texture = t.createTexture({ usage: texUsage });\n    const view = texture.createView();\n    const bglEntries: GPUBindGroupLayoutEntry[] = [\n      { binding: 0, visibility: readVisibility, texture: {} },\n    ];\n    const bgEntries: GPUBindGroupEntry[] = [{ binding: 0, resource: view }];\n    if (!writeHasVertexStage) {\n      bglEntries.push({\n        binding: 1,\n        visibility: writeVisibility,\n        storageTexture: { access: 'write-only', format: 'rgba8unorm' },\n      });\n      bgEntries.push({ binding: 1, resource: view });\n    }\n    const bgl = t.device.createBindGroupLayout({ entries: bglEntries });\n    const bindGroup = t.device.createBindGroup({\n      entries: bgEntries,\n      layout: bgl,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = compute\n      ? encoder.beginComputePass()\n      : t.beginSimpleRenderPass(\n          encoder,\n          writeHasVertexStage ? view : t.createTexture().createView()\n        );\n    pass.setBindGroup(0, bindGroup);\n    if (compute) {\n      t.setComputePipelineAndCallDispatch(\n        pass as GPUComputePassEncoder,\n        t.device.createPipelineLayout({\n          bindGroupLayouts: [bgl],\n        })\n      );\n    }\n    pass.endPass();\n\n    // Texture usages in bindings with invisible shader stages should be validated. Invisible shader\n    // stages include shader stage with visibility none, compute shader stage in render pass, and\n    // vertex/fragment shader stage in compute pass.\n    t.expectValidationError(() => {\n      encoder.finish();\n    });\n  });\n\n// We should validate the texture usages in bindings which are replaced by another setBindGroup()\n// call site upon the same index in the same render pass. However, replaced bindings in compute\n// should not be validated.\ng.test('replaced_binding')\n  .params(u =>\n    u\n      .combine('compute', [false, true])\n      .combine('callDrawOrDispatch', [false, true])\n      .combine('entry', [\n        { texture: {} },\n        { storageTexture: { access: 'write-only', format: 'rgba8unorm' } },\n      ] as const)\n  )\n  .fn(async t => {\n    const { compute, callDrawOrDispatch, entry } = t.params;\n\n    const sampledView = t.createTexture().createView();\n    const sampledStorageView = t\n      .createTexture({ usage: GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.TEXTURE_BINDING })\n      .createView();\n\n    // Create bindGroup0. It has two bindings. These two bindings use different views/subresources.\n    const bglEntries0: GPUBindGroupLayoutEntry[] = [\n      { binding: 0, visibility: GPUShaderStage.FRAGMENT, texture: {} },\n      {\n        binding: 1,\n        visibility: GPUShaderStage.FRAGMENT,\n        ...entry,\n      },\n    ];\n    const bgEntries0: GPUBindGroupEntry[] = [\n      { binding: 0, resource: sampledView },\n      { binding: 1, resource: sampledStorageView },\n    ];\n    const bindGroup0 = t.device.createBindGroup({\n      entries: bgEntries0,\n      layout: t.device.createBindGroupLayout({ entries: bglEntries0 }),\n    });\n\n    // Create bindGroup1. It has one binding, which use the same view/subresoure of a binding in\n    // bindGroup0. So it may or may not conflicts with that binding in bindGroup0.\n    const bindGroup1 = t.createBindGroup(0, sampledStorageView, 'sampled-texture', '2d', undefined);\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = compute\n      ? encoder.beginComputePass()\n      : t.beginSimpleRenderPass(encoder, t.createTexture().createView());\n\n    // Set bindGroup0 and bindGroup1. bindGroup0 is replaced by bindGroup1 in the current pass.\n    // But bindings in bindGroup0 should be validated too.\n    pass.setBindGroup(0, bindGroup0);\n    if (callDrawOrDispatch) {\n      const pipeline = compute ? t.createNoOpComputePipeline() : t.createNoOpRenderPipeline();\n      t.setPipeline(pass, pipeline, compute);\n      t.issueDrawOrDispatch(pass, compute);\n    }\n    pass.setBindGroup(0, bindGroup1);\n    pass.endPass();\n\n    // MAINTENANCE_TODO: If the Compatible Usage List (https://gpuweb.github.io/gpuweb/#compatible-usage-list)\n    // gets programmatically defined in capability_info, use it here, instead of this logic, for clarity.\n    let success = entry.storageTexture?.access !== 'write-only';\n    // Replaced bindings should not be validated in compute pass, because validation only occurs\n    // inside dispatch() which only looks at the current resource usages.\n    success ||= compute;\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('bindings_in_bundle')\n  .params(u =>\n    u\n      .combine('type0', ['render-target', ...kTextureBindingTypes] as const)\n      .combine('type1', ['render-target', ...kTextureBindingTypes] as const)\n      .beginSubcases()\n      .combine('binding0InBundle', [false, true])\n      .combine('binding1InBundle', [false, true])\n      .expandWithParams(function* ({ type0, type1 }) {\n        const usageForType = (type: typeof type0 | typeof type1) => {\n          switch (type) {\n            case 'multisampled-texture':\n            case 'sampled-texture':\n              return 'TEXTURE_BINDING' as const;\n            case 'writeonly-storage-texture':\n              return 'STORAGE_BINDING' as const;\n            case 'render-target':\n              return 'RENDER_ATTACHMENT' as const;\n          }\n        };\n\n        yield {\n          _usage0: usageForType(type0),\n          _usage1: usageForType(type1),\n          _sampleCount:\n            type0 === 'multisampled-texture' || type1 === 'multisampled-texture'\n              ? (4 as const)\n              : undefined,\n        };\n      })\n      .unless(\n        p =>\n          // We can't set 'render-target' in bundle, so we need to exclude it from bundle.\n          // In addition, if both bindings are non-bundle, there is no need to test it because\n          // we have far more comprehensive test cases for that situation in this file.\n          (p.binding0InBundle && p.type0 === 'render-target') ||\n          (p.binding1InBundle && p.type1 === 'render-target') ||\n          (!p.binding0InBundle && !p.binding1InBundle) ||\n          // Storage textures can't be multisampled.\n          (p._sampleCount !== undefined &&\n            p._sampleCount > 1 &&\n            (p._usage0 === 'STORAGE_BINDING' || p._usage1 === 'STORAGE_BINDING')) ||\n          // If both are sampled, we create two views of the same texture, so both must be multisampled.\n          (p.type0 === 'multisampled-texture' && p.type1 === 'sampled-texture') ||\n          (p.type0 === 'sampled-texture' && p.type1 === 'multisampled-texture')\n      )\n  )\n  .fn(async t => {\n    const {\n      binding0InBundle,\n      binding1InBundle,\n      type0,\n      type1,\n      _usage0,\n      _usage1,\n      _sampleCount,\n    } = t.params;\n\n    // Two bindings are attached to the same texture view.\n    const view = t\n      .createTexture({\n        usage: GPUTextureUsage[_usage0] | GPUTextureUsage[_usage1],\n        sampleCount: _sampleCount,\n      })\n      .createView();\n\n    const bindGroups: GPUBindGroup[] = [];\n    if (type0 !== 'render-target') {\n      const binding0TexFormat = type0 === 'sampled-texture' ? undefined : 'rgba8unorm';\n      bindGroups[0] = t.createBindGroup(0, view, type0, '2d', { format: binding0TexFormat });\n    }\n    if (type1 !== 'render-target') {\n      const binding1TexFormat = type1 === 'sampled-texture' ? undefined : 'rgba8unorm';\n      bindGroups[1] = t.createBindGroup(1, view, type1, '2d', { format: binding1TexFormat });\n    }\n\n    const encoder = t.device.createCommandEncoder();\n    // At least one binding is in bundle, which means that its type is not 'render-target'.\n    // As a result, only one binding's type is 'render-target' at most.\n    const pass = t.beginSimpleRenderPass(\n      encoder,\n      type0 === 'render-target' || type1 === 'render-target' ? view : t.createTexture().createView()\n    );\n\n    const bindingsInBundle: boolean[] = [binding0InBundle, binding1InBundle];\n    for (let i = 0; i < 2; i++) {\n      // Create a bundle for each bind group if its bindings is required to be in bundle on purpose.\n      // Otherwise, call setBindGroup directly in pass if needed (when its binding is not\n      // 'render-target').\n      if (bindingsInBundle[i]) {\n        const bundleEncoder = t.device.createRenderBundleEncoder({\n          colorFormats: ['rgba8unorm'],\n        });\n        bundleEncoder.setBindGroup(i, bindGroups[i]);\n        const bundleInPass = bundleEncoder.finish();\n        pass.executeBundles([bundleInPass]);\n      } else if (bindGroups[i] !== undefined) {\n        pass.setBindGroup(i, bindGroups[i]);\n      }\n    }\n\n    pass.endPass();\n\n    const isReadOnly = (t: typeof type0 | typeof type1) => {\n      switch (t) {\n        case 'sampled-texture':\n        case 'multisampled-texture':\n          return true;\n        default:\n          return false;\n      }\n    };\n\n    let success = false;\n    if (isReadOnly(type0) && isReadOnly(type1)) {\n      success = true;\n    }\n\n    if (type0 === 'writeonly-storage-texture' && type1 === 'writeonly-storage-texture') {\n      success = true;\n    }\n\n    // Resource usages in bundle should be validated.\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('unused_bindings_in_pipeline')\n  .params(u =>\n    u\n      .combine('compute', [false, true])\n      .combine('useBindGroup0', [false, true])\n      .combine('useBindGroup1', [false, true])\n      .combine('setBindGroupsOrder', ['common', 'reversed'] as const)\n      .combine('setPipeline', ['before', 'middle', 'after', 'none'] as const)\n      .combine('callDrawOrDispatch', [false, true])\n  )\n  .fn(async t => {\n    const {\n      compute,\n      useBindGroup0,\n      useBindGroup1,\n      setBindGroupsOrder,\n      setPipeline,\n      callDrawOrDispatch,\n    } = t.params;\n    const view = t\n      .createTexture({ usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.STORAGE_BINDING })\n      .createView();\n    const bindGroup0 = t.createBindGroup(0, view, 'sampled-texture', '2d', {\n      format: 'rgba8unorm',\n    });\n    const bindGroup1 = t.createBindGroup(0, view, 'writeonly-storage-texture', '2d', {\n      format: 'rgba8unorm',\n    });\n\n    const wgslVertex = `@stage(vertex) fn main() -> @builtin(position) vec4<f32> {\n  return vec4<f32>();\n}`;\n    const wgslFragment = pp`\n      ${pp._if(useBindGroup0)}\n      @group(0) @binding(0) var image0 : texture_storage_2d<rgba8unorm, write>;\n      ${pp._endif}\n      ${pp._if(useBindGroup1)}\n      @group(1) @binding(0) var image1 : texture_storage_2d<rgba8unorm, write>;\n      ${pp._endif}\n      @stage(fragment) fn main() {}\n    `;\n\n    const wgslCompute = pp`\n      ${pp._if(useBindGroup0)}\n      @group(0) @binding(0) var image0 : texture_storage_2d<rgba8unorm, write>;\n      ${pp._endif}\n      ${pp._if(useBindGroup1)}\n      @group(1) @binding(0) var image1 : texture_storage_2d<rgba8unorm, write>;\n      ${pp._endif}\n      @stage(compute) @workgroup_size(1) fn main() {}\n    `;\n\n    const pipeline = compute\n      ? t.device.createComputePipeline({\n          compute: {\n            module: t.device.createShaderModule({\n              code: wgslCompute,\n            }),\n            entryPoint: 'main',\n          },\n        })\n      : t.device.createRenderPipeline({\n          vertex: {\n            module: t.device.createShaderModule({\n              code: wgslVertex,\n            }),\n            entryPoint: 'main',\n          },\n          fragment: {\n            module: t.device.createShaderModule({\n              code: wgslFragment,\n            }),\n            entryPoint: 'main',\n            targets: [{ format: 'rgba8unorm', writeMask: 0 }],\n          },\n          primitive: { topology: 'triangle-list' },\n        });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = compute\n      ? encoder.beginComputePass()\n      : encoder.beginRenderPass({\n          colorAttachments: [\n            {\n              view: t.createTexture().createView(),\n              loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n              storeOp: 'store',\n            },\n          ],\n        });\n    const index0 = setBindGroupsOrder === 'common' ? 0 : 1;\n    const index1 = setBindGroupsOrder === 'common' ? 1 : 0;\n    if (setPipeline === 'before') t.setPipeline(pass, pipeline, compute);\n    pass.setBindGroup(index0, bindGroup0);\n    if (setPipeline === 'middle') t.setPipeline(pass, pipeline, compute);\n    pass.setBindGroup(index1, bindGroup1);\n    if (setPipeline === 'after') t.setPipeline(pass, pipeline, compute);\n    if (callDrawOrDispatch) t.issueDrawOrDispatch(pass, compute);\n    pass.endPass();\n\n    // Resource usage validation scope is defined by the whole render pass or by dispatch calls.\n    // Regardless of whether or not dispatch is called, in a compute pass, we always succeed\n    // because in this test, none of the bindings are used by the pipeline.\n    // In a render pass, we always fail because usage is based on any bindings used in the\n    // render pass, regardless of whether the pipeline uses them.\n    let success = compute;\n\n    // Also fails if we try to draw/dispatch without a pipeline.\n    if (callDrawOrDispatch && setPipeline === 'none') {\n      success = false;\n    }\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('validation_scope,no_draw_or_dispatch')\n  .params(u => u.combine('compute', [false, true]))\n  .fn(async t => {\n    const { compute } = t.params;\n\n    const { bindGroup0, bindGroup1, encoder, pass, pipeline } = t.testValidationScope(compute);\n    t.setPipeline(pass, pipeline, compute);\n    pass.setBindGroup(0, bindGroup0);\n    pass.setBindGroup(1, bindGroup1);\n    pass.endPass();\n\n    // Resource usage validation scope is defined by dispatch calls. If dispatch is not called,\n    // we don't need to do resource usage validation and no validation error to be reported.\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !compute);\n  });\n\ng.test('validation_scope,same_draw_or_dispatch')\n  .params(u => u.combine('compute', [false, true]))\n  .fn(async t => {\n    const { compute } = t.params;\n\n    const { bindGroup0, bindGroup1, encoder, pass, pipeline } = t.testValidationScope(compute);\n    t.setPipeline(pass, pipeline, compute);\n    pass.setBindGroup(0, bindGroup0);\n    pass.setBindGroup(1, bindGroup1);\n    t.issueDrawOrDispatch(pass, compute);\n    pass.endPass();\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    });\n  });\n\ng.test('validation_scope,different_draws_or_dispatches')\n  .params(u => u.combine('compute', [false, true]))\n  .fn(async t => {\n    const { compute } = t.params;\n    const { bindGroup0, bindGroup1, encoder, pass, pipeline } = t.testValidationScope(compute);\n    t.setPipeline(pass, pipeline, compute);\n\n    pass.setBindGroup(0, bindGroup0);\n    t.issueDrawOrDispatch(pass, compute);\n\n    pass.setBindGroup(1, bindGroup1);\n    t.issueDrawOrDispatch(pass, compute);\n\n    pass.endPass();\n\n    // Note that bindGroup0 will be inherited in the second draw/dispatch.\n    t.expectValidationError(() => {\n      encoder.finish();\n    });\n  });\n\ng.test('validation_scope,different_passes')\n  .params(u => u.combine('compute', [false, true]))\n  .fn(async t => {\n    const { compute } = t.params;\n    const { bindGroup0, bindGroup1, encoder, pass, pipeline } = t.testValidationScope(compute);\n    t.setPipeline(pass, pipeline, compute);\n    pass.setBindGroup(0, bindGroup0);\n    if (compute) t.setComputePipelineAndCallDispatch(pass as GPUComputePassEncoder);\n    pass.endPass();\n\n    const pass1 = compute\n      ? encoder.beginComputePass()\n      : t.beginSimpleRenderPass(encoder, t.createTexture().createView());\n    t.setPipeline(pass1, pipeline, compute);\n    pass1.setBindGroup(1, bindGroup1);\n    if (compute) t.setComputePipelineAndCallDispatch(pass1 as GPUComputePassEncoder);\n    pass1.endPass();\n\n    // No validation error.\n    encoder.finish();\n  });\n"],"file":"in_pass_encoder.spec.js"}