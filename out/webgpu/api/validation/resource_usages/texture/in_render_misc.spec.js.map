{"version":3,"sources":["../../../../../../src/webgpu/api/validation/resource_usages/texture/in_render_misc.spec.ts"],"names":["description","makeTestGroup","unreachable","ValidationTest","F","createBindGroupLayoutForTest","textureUsage","sampleType","visibility","GPUShaderStage","bindGroupLayoutEntry","binding","texture","viewDimension","storageTexture","access","format","device","createBindGroupLayout","entries","createBindGroupForTest","textureView","createBindGroup","layout","resource","g","kTextureSize","kTextureLayers","test","desc","params","u","combineWithParams","useDifferentTextureAsTexture2","baseLayer2","view2Binding","combine","fn","t","hasConflict","texture0","createTexture","usage","GPUTextureUsage","TEXTURE_BINDING","STORAGE_BINDING","size","textureView0","createView","dimension","baseArrayLayer","arrayLayerCount","bindGroup0","view1Binding","bindGroup1","texture2","textureView2","validBindGroup2","colorTexture","RENDER_ATTACHMENT","encoder","createCommandEncoder","renderPassEncoder","beginRenderPass","colorAttachments","view","loadOp","storeOp","setBindGroup","end","expectValidationError","finish","bindAspect","depthStencilReadOnly","depthStencilTexture","conflictedToNonReadOnlyAttachmentBindGroup","aspect","validBindGroup","depthStencilAttachment","depthReadOnly","stencilReadOnly","inRenderPass","FRAGMENT","COMPUTE","textureUsage0","textureUsage1","pipelineLayout","createPipelineLayout","bindGroupLayouts","renderPipeline","createRenderPipeline","vertex","module","createShaderModule","code","getNoOpShaderCode","entryPoint","fragment","targets","setPipeline","draw","computePipeline","createComputePipeline","compute","computePassEncoder","beginComputePass","dispatchWorkgroups","success","filter","usage0","usage1","COPY_SRC","COPY_DST","UseTextureOnCommandEncoder","buffer","createBufferWithState","GPUBufferUsage","copyTextureToBuffer","copyBufferToTexture","bindGroup"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAFO,CAIP,SAASC,aAAT,QAA8B,+CAA9B;AACA,SAASC,WAAT,QAA4B,oCAA5B;AACA,SAASC,cAAT,QAA+B,0BAA/B;;AAEA,MAAMC,CAAN,SAAgBD,cAAhB,CAA+B;AAC7BE,EAAAA,4BAA4B;AAC1BC,EAAAA,YAD0B;AAE1BC,EAAAA,UAF0B;AAG1BC,EAAAA,UAAkE,GAAGC,cAAc,CAAC,UAAD,CAHzD;AAIN;AACpB,UAAMC,oBAA6C,GAAG;AACpDC,MAAAA,OAAO,EAAE,CAD2C;AAEpDH,MAAAA,UAFoD,EAAtD;;;AAKA,YAAQF,YAAR;AACE,WAAK,SAAL;AACEI,QAAAA,oBAAoB,CAACE,OAArB,GAA+B,EAAEC,aAAa,EAAE,UAAjB,EAA6BN,UAA7B,EAA/B;AACA;AACF,WAAK,SAAL;AACEG,QAAAA,oBAAoB,CAACI,cAArB,GAAsC;AACpCC,UAAAA,MAAM,EAAE,YAD4B;AAEpCC,UAAAA,MAAM,EAAE,YAF4B;AAGpCH,UAAAA,aAAa,EAAE,UAHqB,EAAtC;;AAKA;AACF;AACEX,QAAAA,WAAW;AACX,cAbJ;;AAeA,WAAO,KAAKe,MAAL,CAAYC,qBAAZ,CAAkC;AACvCC,MAAAA,OAAO,EAAE,CAACT,oBAAD,CAD8B,EAAlC,CAAP;;AAGD;;AAEDU,EAAAA,sBAAsB;AACpBC,EAAAA,WADoB;AAEpBf,EAAAA,YAFoB;AAGpBC,EAAAA,UAHoB;AAIpBC,EAAAA,UAAkE,GAAGC,cAAc,CAAC,UAAD,CAJ/D;AAKpB;AACA,WAAO,KAAKQ,MAAL,CAAYK,eAAZ,CAA4B;AACjCC,MAAAA,MAAM,EAAE,KAAKlB,4BAAL,CAAkCC,YAAlC,EAAgDC,UAAhD,EAA4DC,UAA5D,CADyB;AAEjCW,MAAAA,OAAO,EAAE,CAAC,EAAER,OAAO,EAAE,CAAX,EAAca,QAAQ,EAAEH,WAAxB,EAAD,CAFwB,EAA5B,CAAP;;AAID,GAzC4B;;;AA4C/B,OAAO,MAAMI,CAAC,GAAGxB,aAAa,CAACG,CAAD,CAAvB;;AAEP,MAAMsB,YAAY,GAAG,EAArB;AACA,MAAMC,cAAc,GAAG,CAAvB;;AAEAF,CAAC,CAACG,IAAF,CAAO,yDAAP;AACGC,IADH;AAEK;AACL;AACA;AACA,6CALA;;AAOGC,MAPH,CAOU,CAAAC,CAAC;AACPA,CAAC;AACEC,iBADH,CACqB;AACjB,EAAEC,6BAA6B,EAAE,IAAjC,EAAuCC,UAAU,EAAE,CAAnD,EAAsDC,YAAY,EAAE,SAApE,EADiB;AAEjB,EAAEF,6BAA6B,EAAE,KAAjC,EAAwCC,UAAU,EAAE,CAApD,EAAuDC,YAAY,EAAE,SAArE,EAFiB;AAGjB,EAAEF,6BAA6B,EAAE,KAAjC,EAAwCC,UAAU,EAAE,CAApD,EAAuDC,YAAY,EAAE,SAArE,EAHiB;AAIjB,EAAEF,6BAA6B,EAAE,KAAjC,EAAwCC,UAAU,EAAE,CAApD,EAAuDC,YAAY,EAAE,SAArE,EAJiB;AAKjB,EAAEF,6BAA6B,EAAE,KAAjC,EAAwCC,UAAU,EAAE,CAApD,EAAuDC,YAAY,EAAE,SAArE,EALiB,CADrB;;AAQGC,OARH,CAQW,aARX,EAQ0B,CAAC,IAAD,EAAO,KAAP,CAR1B,CARJ;;AAkBGC,EAlBH,CAkBM,OAAMC,CAAN,KAAW;AACb,QAAM,EAAEL,6BAAF,EAAiCC,UAAjC,EAA6CC,YAA7C,EAA2DI,WAA3D,KAA2ED,CAAC,CAACR,MAAnF;;AAEA,QAAMU,QAAQ,GAAGF,CAAC,CAACrB,MAAF,CAASwB,aAAT,CAAuB;AACtCzB,IAAAA,MAAM,EAAE,YAD8B;AAEtC0B,IAAAA,KAAK,EAAEC,eAAe,CAACC,eAAhB,GAAkCD,eAAe,CAACE,eAFnB;AAGtCC,IAAAA,IAAI,EAAE,CAACpB,YAAD,EAAeA,YAAf,EAA6BC,cAA7B,CAHgC,EAAvB,CAAjB;;AAKA;AACA,QAAMoB,YAAY,GAAGP,QAAQ,CAACQ,UAAT,CAAoB;AACvCC,IAAAA,SAAS,EAAE,UAD4B;AAEvCC,IAAAA,cAAc,EAAE,CAFuB;AAGvCC,IAAAA,eAAe,EAAE,CAHsB,EAApB,CAArB;;AAKA,QAAMC,UAAU,GAAGd,CAAC,CAAClB,sBAAF,CAAyB2B,YAAzB,EAAuCZ,YAAvC,EAAqD,OAArD,CAAnB;;AAEA;AACA,QAAMkB,YAAY,GAAGd,WAAW;AAC5BJ,EAAAA,YAAY,KAAK,SAAjB;AACE,WADF;AAEE,WAH0B;AAI5BA,EAAAA,YAJJ;AAKA,QAAMmB,UAAU,GAAGhB,CAAC,CAAClB,sBAAF,CAAyB2B,YAAzB,EAAuCM,YAAvC,EAAqD,OAArD,CAAnB;;AAEA,QAAME,QAAQ,GAAGtB,6BAA6B;AAC1CK,EAAAA,CAAC,CAACrB,MAAF,CAASwB,aAAT,CAAuB;AACrBzB,IAAAA,MAAM,EAAE,YADa;AAErB0B,IAAAA,KAAK,EAAEC,eAAe,CAACC,eAAhB,GAAkCD,eAAe,CAACE,eAFpC;AAGrBC,IAAAA,IAAI,EAAE,CAACpB,YAAD,EAAeA,YAAf,EAA6BC,cAA7B,CAHe,EAAvB,CAD0C;;AAM1Ca,EAAAA,QANJ;AAOA,QAAMgB,YAAY,GAAGD,QAAQ,CAACP,UAAT,CAAoB;AACvCC,IAAAA,SAAS,EAAE,UAD4B;AAEvCC,IAAAA,cAAc,EAAEhB,UAFuB;AAGvCiB,IAAAA,eAAe,EAAExB,cAAc,GAAGO,UAHK,EAApB,CAArB;;AAKA;AACA,QAAMuB,eAAe,GAAGnB,CAAC,CAAClB,sBAAF,CAAyBoC,YAAzB,EAAuCrB,YAAvC,EAAqD,OAArD,CAAxB;;AAEA,QAAMuB,YAAY,GAAGpB,CAAC,CAACrB,MAAF,CAASwB,aAAT,CAAuB;AAC1CzB,IAAAA,MAAM,EAAE,YADkC;AAE1C0B,IAAAA,KAAK,EAAEC,eAAe,CAACgB,iBAFmB;AAG1Cb,IAAAA,IAAI,EAAE,CAACpB,YAAD,EAAeA,YAAf,EAA6B,CAA7B,CAHoC,EAAvB,CAArB;;AAKA,QAAMkC,OAAO,GAAGtB,CAAC,CAACrB,MAAF,CAAS4C,oBAAT,EAAhB;AACA,QAAMC,iBAAiB,GAAGF,OAAO,CAACG,eAAR,CAAwB;AAChDC,IAAAA,gBAAgB,EAAE;AAChB;AACEC,MAAAA,IAAI,EAAEP,YAAY,CAACV,UAAb,EADR;AAEEkB,MAAAA,MAAM,EAAE,MAFV;AAGEC,MAAAA,OAAO,EAAE,OAHX,EADgB,CAD8B,EAAxB,CAA1B;;;;AASAL,EAAAA,iBAAiB,CAACM,YAAlB,CAA+B,CAA/B,EAAkChB,UAAlC;AACAU,EAAAA,iBAAiB,CAACM,YAAlB,CAA+B,CAA/B,EAAkCd,UAAlC;AACAQ,EAAAA,iBAAiB,CAACM,YAAlB,CAA+B,CAA/B,EAAkCX,eAAlC;AACAK,EAAAA,iBAAiB,CAACO,GAAlB;;AAEA/B,EAAAA,CAAC,CAACgC,qBAAF,CAAwB,MAAM;AAC5BV,IAAAA,OAAO,CAACW,MAAR;AACD,GAFD,EAEGhC,WAFH;AAGD,CAhFH;;AAkFAd,CAAC,CAACG,IAAF,CAAO,iEAAP;AACGC,IADH;AAEK;AACL;AACA;AACA,uDALA;;AAOGC,MAPH,CAOU,CAAAC,CAAC;AACPA,CAAC;AACEK,OADH,CACW,YADX,EACyB,CAAC,YAAD,EAAe,cAAf,CADzB;AAEGA,OAFH,CAEW,sBAFX,EAEmC,CAAC,IAAD,EAAO,KAAP,CAFnC,CARJ;;AAYGC,EAZH,CAYM,OAAMC,CAAN,KAAW;AACb,QAAM,EAAEkC,UAAF,EAAcC,oBAAd,KAAuCnC,CAAC,CAACR,MAA/C;AACA,QAAM4C,mBAAmB,GAAGpC,CAAC,CAACrB,MAAF,CAASwB,aAAT,CAAuB;AACjDzB,IAAAA,MAAM,EAAE,sBADyC;AAEjD0B,IAAAA,KAAK,EAAEC,eAAe,CAACC,eAAhB,GAAkCD,eAAe,CAACgB,iBAFR;AAGjDb,IAAAA,IAAI,EAAE,CAACpB,YAAD,EAAeA,YAAf,EAA6B,CAA7B,CAH2C,EAAvB,CAA5B;;;AAMA,QAAMiD,0CAA0C,GAAGrC,CAAC,CAAClB,sBAAF;AACjDsD,EAAAA,mBAAmB,CAAC1B,UAApB,CAA+B;AAC7BC,IAAAA,SAAS,EAAE,UADkB;AAE7B2B,IAAAA,MAAM,EAAEJ,UAFqB,EAA/B,CADiD;;AAKjD,WALiD;AAMjDA,EAAAA,UAAU,KAAK,YAAf,GAA8B,OAA9B,GAAwC,MANS,CAAnD;;;AASA,QAAMd,YAAY,GAAGpB,CAAC,CAACrB,MAAF,CAASwB,aAAT,CAAuB;AAC1CzB,IAAAA,MAAM,EAAE,YADkC;AAE1C0B,IAAAA,KAAK,EAAEC,eAAe,CAACC,eAAhB,GAAkCD,eAAe,CAACE,eAFf;AAG1CC,IAAAA,IAAI,EAAE,CAACpB,YAAD,EAAeA,YAAf,EAA6B,CAA7B,CAHoC,EAAvB,CAArB;;AAKA,QAAMmD,cAAc,GAAGvC,CAAC,CAAClB,sBAAF;AACrBsC,EAAAA,YAAY,CAACV,UAAb,CAAwB;AACtBC,IAAAA,SAAS,EAAE,UADW,EAAxB,CADqB;;AAIrB,WAJqB;AAKrB,SALqB,CAAvB;;;AAQA,QAAMW,OAAO,GAAGtB,CAAC,CAACrB,MAAF,CAAS4C,oBAAT,EAAhB;AACA,QAAMC,iBAAiB,GAAGF,OAAO,CAACG,eAAR,CAAwB;AAChDC,IAAAA,gBAAgB,EAAE,EAD8B;AAEhDc,IAAAA,sBAAsB,EAAE;AACtBb,MAAAA,IAAI,EAAES,mBAAmB,CAAC1B,UAApB,EADgB;AAEtB+B,MAAAA,aAAa,EAAEN,oBAFO;AAGtBO,MAAAA,eAAe,EAAEP,oBAHK,EAFwB,EAAxB,CAA1B;;;AAQAX,EAAAA,iBAAiB,CAACM,YAAlB,CAA+B,CAA/B,EAAkCO,0CAAlC;AACAb,EAAAA,iBAAiB,CAACM,YAAlB,CAA+B,CAA/B,EAAkCS,cAAlC;AACAf,EAAAA,iBAAiB,CAACO,GAAlB;;AAEA/B,EAAAA,CAAC,CAACgC,qBAAF,CAAwB,MAAM;AAC5BV,IAAAA,OAAO,CAACW,MAAR;AACD,GAFD,EAEG,CAACE,oBAFJ;AAGD,CA1DH;;AA4DAhD,CAAC,CAACG,IAAF,CAAO,oCAAP;AACGC,IADH;AAEK;AACL;AACA;AACA,6CALA;;AAOGC,MAPH,CAOU,CAAAC,CAAC,KAAIA,CAAC,CAACK,OAAF,CAAU,cAAV,EAA0B,CAAC,IAAD,EAAO,KAAP,CAA1B,EAAyCA,OAAzC,CAAiD,aAAjD,EAAgE,CAAC,IAAD,EAAO,KAAP,CAAhE,CAPf;AAQGC,EARH,CAQM,OAAMC,CAAN,KAAW;AACb,QAAM,EAAE2C,YAAF,EAAgB1C,WAAhB,KAAgCD,CAAC,CAACR,MAAxC;;AAEA,QAAMU,QAAQ,GAAGF,CAAC,CAACrB,MAAF,CAASwB,aAAT,CAAuB;AACtCzB,IAAAA,MAAM,EAAE,YAD8B;AAEtC0B,IAAAA,KAAK,EAAEC,eAAe,CAACC,eAAhB,GAAkCD,eAAe,CAACE,eAFnB;AAGtCC,IAAAA,IAAI,EAAE,CAACpB,YAAD,EAAeA,YAAf,EAA6BC,cAA7B,CAHgC,EAAvB,CAAjB;;AAKA;AACA,QAAMoB,YAAY,GAAGP,QAAQ,CAACQ,UAAT,CAAoB;AACvCC,IAAAA,SAAS,EAAE,UAD4B;AAEvCC,IAAAA,cAAc,EAAE,CAFuB;AAGvCC,IAAAA,eAAe,EAAE,CAHsB,EAApB,CAArB;;AAKA,QAAM3C,UAAU,GAAGyE,YAAY,GAAGxE,cAAc,CAACyE,QAAlB,GAA6BzE,cAAc,CAAC0E,OAA3E;AACA;AACA,QAAMC,aAAa,GAAGH,YAAY,GAAG,SAAH,GAAe,SAAjD;AACA,QAAMI,aAAa,GAAG9C,WAAW,GAAI0C,YAAY,GAAG,SAAH,GAAe,SAA/B,GAA4CG,aAA7E;AACA,QAAMhC,UAAU,GAAGd,CAAC,CAAClB,sBAAF,CAAyB2B,YAAzB,EAAuCqC,aAAvC,EAAsD,OAAtD,EAA+D5E,UAA/D,CAAnB;AACA,QAAM8C,UAAU,GAAGhB,CAAC,CAAClB,sBAAF,CAAyB2B,YAAzB,EAAuCsC,aAAvC,EAAsD,OAAtD,EAA+D7E,UAA/D,CAAnB;;AAEA,QAAMoD,OAAO,GAAGtB,CAAC,CAACrB,MAAF,CAAS4C,oBAAT,EAAhB;AACA,QAAMH,YAAY,GAAGpB,CAAC,CAACrB,MAAF,CAASwB,aAAT,CAAuB;AAC1CzB,IAAAA,MAAM,EAAE,YADkC;AAE1C0B,IAAAA,KAAK,EAAEC,eAAe,CAACgB,iBAFmB;AAG1Cb,IAAAA,IAAI,EAAE,CAACpB,YAAD,EAAeA,YAAf,EAA6B,CAA7B,CAHoC,EAAvB,CAArB;;AAKA,QAAM4D,cAAc,GAAGhD,CAAC,CAACrB,MAAF,CAASsE,oBAAT,CAA8B;AACnDC,IAAAA,gBAAgB,EAAE,CAAClD,CAAC,CAACjC,4BAAF,CAA+B+E,aAA/B,EAA8C,OAA9C,EAAuD5E,UAAvD,CAAD,CADiC,EAA9B,CAAvB;;AAGA,MAAIyE,YAAJ,EAAkB;AAChB,UAAMQ,cAAc,GAAGnD,CAAC,CAACrB,MAAF,CAASyE,oBAAT,CAA8B;AACnDnE,MAAAA,MAAM,EAAE+D,cAD2C;AAEnDK,MAAAA,MAAM,EAAE;AACNC,QAAAA,MAAM,EAAEtD,CAAC,CAACrB,MAAF,CAAS4E,kBAAT,CAA4B;AAClCC,UAAAA,IAAI,EAAExD,CAAC,CAACyD,iBAAF,CAAoB,QAApB,CAD4B,EAA5B,CADF;;AAINC,QAAAA,UAAU,EAAE,MAJN,EAF2C;;AAQnDC,MAAAA,QAAQ,EAAE;AACRL,QAAAA,MAAM,EAAEtD,CAAC,CAACrB,MAAF,CAAS4E,kBAAT,CAA4B;AAClCC,UAAAA,IAAI,EAAG;AACnB;AACA;AACA;AACA;AACA,gBAN8C,EAA5B,CADA;;AASRE,QAAAA,UAAU,EAAE,MATJ;AAURE,QAAAA,OAAO,EAAE,CAAC,EAAElF,MAAM,EAAE,YAAV,EAAD,CAVD,EARyC,EAA9B,CAAvB;;;;AAsBA,UAAM8C,iBAAiB,GAAGF,OAAO,CAACG,eAAR,CAAwB;AAChDC,MAAAA,gBAAgB,EAAE;AAChB;AACEC,QAAAA,IAAI,EAAEP,YAAY,CAACV,UAAb,EADR;AAEEkB,QAAAA,MAAM,EAAE,MAFV;AAGEC,QAAAA,OAAO,EAAE,OAHX,EADgB,CAD8B,EAAxB,CAA1B;;;;AASAL,IAAAA,iBAAiB,CAACM,YAAlB,CAA+B,CAA/B,EAAkChB,UAAlC;AACAU,IAAAA,iBAAiB,CAACM,YAAlB,CAA+B,CAA/B,EAAkCd,UAAlC;AACAQ,IAAAA,iBAAiB,CAACqC,WAAlB,CAA8BV,cAA9B;AACA3B,IAAAA,iBAAiB,CAACsC,IAAlB,CAAuB,CAAvB;AACAtC,IAAAA,iBAAiB,CAACO,GAAlB;AACD,GArCD,MAqCO;AACL,UAAMgC,eAAe,GAAG/D,CAAC,CAACrB,MAAF,CAASqF,qBAAT,CAA+B;AACrD/E,MAAAA,MAAM,EAAE+D,cAD6C;AAErDiB,MAAAA,OAAO,EAAE;AACPX,QAAAA,MAAM,EAAEtD,CAAC,CAACrB,MAAF,CAAS4E,kBAAT,CAA4B;AAClCC,UAAAA,IAAI,EAAG;AACnB;AACA;AACA;AACA;AACA,cAN8C,EAA5B,CADD;;AASPE,QAAAA,UAAU,EAAE,MATL,EAF4C,EAA/B,CAAxB;;;AAcA,UAAMQ,kBAAkB,GAAG5C,OAAO,CAAC6C,gBAAR,EAA3B;AACAD,IAAAA,kBAAkB,CAACpC,YAAnB,CAAgC,CAAhC,EAAmChB,UAAnC;AACAoD,IAAAA,kBAAkB,CAACpC,YAAnB,CAAgC,CAAhC,EAAmCd,UAAnC;AACAkD,IAAAA,kBAAkB,CAACL,WAAnB,CAA+BE,eAA/B;AACAG,IAAAA,kBAAkB,CAACE,kBAAnB,CAAsC,CAAtC;AACAF,IAAAA,kBAAkB,CAACnC,GAAnB;AACD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAMsC,OAAO,GAAG,CAAC1B,YAAD,IAAiB,CAAC1C,WAAlC;AACAD,EAAAA,CAAC,CAACgC,qBAAF,CAAwB,MAAM;AAC5BV,IAAAA,OAAO,CAACW,MAAR;AACD,GAFD,EAEG,CAACoC,OAFJ;AAGD,CAjHH;;AAmHAlF,CAAC,CAACG,IAAF,CAAO,qDAAP;AACGC,IADH;AAEK;AACL;AACA;AACA,8BALA;;AAOGC,MAPH,CAOU,CAAAC,CAAC;AACPA,CAAC;AACEK,OADH,CACW,QADX,EACqB;AACjB,UADiB;AAEjB,UAFiB;AAGjB,SAHiB;AAIjB,SAJiB;AAKjB,kBALiB,CADrB;;AAQGA,OARH,CAQW,QARX,EAQqB;AACjB,UADiB;AAEjB,UAFiB;AAGjB,SAHiB;AAIjB,SAJiB;AAKjB,kBALiB,CARrB;;AAeGwE,MAfH;AAgBI,CAAC,EAAEC,MAAF,EAAUC,MAAV,EAAD;AACED,MAAM,KAAK,UAAX;AACAA,MAAM,KAAK,UADX;AAEAC,MAAM,KAAK,UAFX;AAGAA,MAAM,KAAK,UApBjB,CARJ;;;AA+BGzE,EA/BH,CA+BM,OAAMC,CAAN,KAAW;AACb,QAAM,EAAEuE,MAAF,EAAUC,MAAV,KAAqBxE,CAAC,CAACR,MAA7B;;AAEA,QAAMlB,OAAO,GAAG0B,CAAC,CAACrB,MAAF,CAASwB,aAAT,CAAuB;AACrCzB,IAAAA,MAAM,EAAE,YAD6B;AAErC0B,IAAAA,KAAK;AACHC,IAAAA,eAAe,CAACoE,QAAhB;AACApE,IAAAA,eAAe,CAACqE,QADhB;AAEArE,IAAAA,eAAe,CAACC,eAFhB;AAGAD,IAAAA,eAAe,CAACE,eAHhB;AAIAF,IAAAA,eAAe,CAACgB,iBAPmB;AAQrCb,IAAAA,IAAI,EAAE,CAACpB,YAAD,EAAeA,YAAf,EAA6B,CAA7B,CAR+B,EAAvB,CAAhB;;;AAWA,QAAMuF,0BAA0B,GAAG;AACjCrG,EAAAA,OADiC;AAEjC8B,EAAAA,KAFiC;AAGjCkB,EAAAA,OAHiC;AAI9B;AACH,YAAQlB,KAAR;AACE,WAAK,UAAL,CAAiB;AACf,gBAAMwE,MAAM,GAAG5E,CAAC,CAAC6E,qBAAF,CAAwB,OAAxB,EAAiC;AAC9CrE,YAAAA,IAAI,EAAE,CADwC;AAE9CJ,YAAAA,KAAK,EAAE0E,cAAc,CAACJ,QAFwB,EAAjC,CAAf;;AAIApD,UAAAA,OAAO,CAACyD,mBAAR,CAA4B,EAAEzG,OAAF,EAA5B,EAAyC,EAAEsG,MAAF,EAAzC,EAAqD,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAArD;AACA;AACD;AACD,WAAK,UAAL,CAAiB;AACf,gBAAMA,MAAM,GAAG5E,CAAC,CAAC6E,qBAAF,CAAwB,OAAxB,EAAiC;AAC9CrE,YAAAA,IAAI,EAAE,CADwC;AAE9CJ,YAAAA,KAAK,EAAE0E,cAAc,CAACL,QAFwB,EAAjC,CAAf;;AAIAnD,UAAAA,OAAO,CAAC0D,mBAAR,CAA4B,EAAEJ,MAAF,EAA5B,EAAwC,EAAEtG,OAAF,EAAxC,EAAqD,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAArD;AACA;AACD;AACD,WAAK,kBAAL,CAAyB;AACvB,gBAAMkD,iBAAiB,GAAGF,OAAO,CAACG,eAAR,CAAwB;AAChDC,YAAAA,gBAAgB,EAAE,CAAC,EAAEC,IAAI,EAAErD,OAAO,CAACoC,UAAR,EAAR,EAA8BkB,MAAM,EAAE,MAAtC,EAA8CC,OAAO,EAAE,OAAvD,EAAD,CAD8B,EAAxB,CAA1B;;AAGAL,UAAAA,iBAAiB,CAACO,GAAlB;AACA;AACD;AACD,WAAK,SAAL;AACA,WAAK,SAAL,CAAgB;AACd,gBAAMX,YAAY,GAAGpB,CAAC,CAACrB,MAAF,CAASwB,aAAT,CAAuB;AAC1CzB,YAAAA,MAAM,EAAE,YADkC;AAE1C0B,YAAAA,KAAK,EAAEC,eAAe,CAACgB,iBAFmB;AAG1Cb,YAAAA,IAAI,EAAE,CAACpB,YAAD,EAAeA,YAAf,EAA6B,CAA7B,CAHoC,EAAvB,CAArB;;AAKA,gBAAMoC,iBAAiB,GAAGF,OAAO,CAACG,eAAR,CAAwB;AAChDC,YAAAA,gBAAgB,EAAE;AAChB,cAAEC,IAAI,EAAEP,YAAY,CAACV,UAAb,EAAR,EAAmCkB,MAAM,EAAE,MAA3C,EAAmDC,OAAO,EAAE,OAA5D,EADgB,CAD8B,EAAxB,CAA1B;;;AAKA,gBAAMoD,SAAS,GAAGjF,CAAC,CAAClB,sBAAF;AAChBR,UAAAA,OAAO,CAACoC,UAAR,CAAmB;AACjBC,YAAAA,SAAS,EAAE,UADM,EAAnB,CADgB;;AAIhBP,UAAAA,KAJgB;AAKhB,iBALgB,CAAlB;;AAOAoB,UAAAA,iBAAiB,CAACM,YAAlB,CAA+B,CAA/B,EAAkCmD,SAAlC;AACAzD,UAAAA,iBAAiB,CAACO,GAAlB;AACA;AACD,SA9CH;;AAgDD,GArDD;AAsDA,QAAMT,OAAO,GAAGtB,CAAC,CAACrB,MAAF,CAAS4C,oBAAT,EAAhB;AACAoD,EAAAA,0BAA0B,CAACrG,OAAD,EAAUiG,MAAV,EAAkBjD,OAAlB,CAA1B;AACAqD,EAAAA,0BAA0B,CAACrG,OAAD,EAAUkG,MAAV,EAAkBlD,OAAlB,CAA1B;AACAtB,EAAAA,CAAC,CAACgC,qBAAF,CAAwB,MAAM;AAC5BV,IAAAA,OAAO,CAACW,MAAR;AACD,GAFD,EAEG,KAFH;AAGD,CAzGH","sourcesContent":["export const description = `\nTexture Usages Validation Tests on All Kinds of WebGPU Subresource Usage Scopes.\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { unreachable } from '../../../../../common/util/util.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nclass F extends ValidationTest {\n  createBindGroupLayoutForTest(\n    textureUsage: 'texture' | 'storage',\n    sampleType: 'float' | 'depth' | 'uint',\n    visibility: GPUShaderStage['FRAGMENT'] | GPUShaderStage['COMPUTE'] = GPUShaderStage['FRAGMENT']\n  ): GPUBindGroupLayout {\n    const bindGroupLayoutEntry: GPUBindGroupLayoutEntry = {\n      binding: 0,\n      visibility,\n    };\n\n    switch (textureUsage) {\n      case 'texture':\n        bindGroupLayoutEntry.texture = { viewDimension: '2d-array', sampleType };\n        break;\n      case 'storage':\n        bindGroupLayoutEntry.storageTexture = {\n          access: 'write-only',\n          format: 'rgba8unorm',\n          viewDimension: '2d-array',\n        };\n        break;\n      default:\n        unreachable();\n        break;\n    }\n    return this.device.createBindGroupLayout({\n      entries: [bindGroupLayoutEntry],\n    });\n  }\n\n  createBindGroupForTest(\n    textureView: GPUTextureView,\n    textureUsage: 'texture' | 'storage',\n    sampleType: 'float' | 'depth' | 'uint',\n    visibility: GPUShaderStage['FRAGMENT'] | GPUShaderStage['COMPUTE'] = GPUShaderStage['FRAGMENT']\n  ) {\n    return this.device.createBindGroup({\n      layout: this.createBindGroupLayoutForTest(textureUsage, sampleType, visibility),\n      entries: [{ binding: 0, resource: textureView }],\n    });\n  }\n}\n\nexport const g = makeTestGroup(F);\n\nconst kTextureSize = 16;\nconst kTextureLayers = 3;\n\ng.test('subresources,set_bind_group_on_same_index_color_texture')\n  .desc(\n    `\n  Test that when one color texture subresource is bound to different bind groups, whether the bind\n  groups are reset by another compatible ones or not, its list of internal usages within one usage\n  scope can only be a compatible usage list.`\n  )\n  .params(u =>\n    u\n      .combineWithParams([\n        { useDifferentTextureAsTexture2: true, baseLayer2: 0, view2Binding: 'texture' },\n        { useDifferentTextureAsTexture2: false, baseLayer2: 0, view2Binding: 'texture' },\n        { useDifferentTextureAsTexture2: false, baseLayer2: 1, view2Binding: 'texture' },\n        { useDifferentTextureAsTexture2: false, baseLayer2: 0, view2Binding: 'storage' },\n        { useDifferentTextureAsTexture2: false, baseLayer2: 1, view2Binding: 'storage' },\n      ] as const)\n      .combine('hasConflict', [true, false])\n  )\n  .fn(async t => {\n    const { useDifferentTextureAsTexture2, baseLayer2, view2Binding, hasConflict } = t.params;\n\n    const texture0 = t.device.createTexture({\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.STORAGE_BINDING,\n      size: [kTextureSize, kTextureSize, kTextureLayers],\n    });\n    // We always bind the first layer of the texture to bindGroup0.\n    const textureView0 = texture0.createView({\n      dimension: '2d-array',\n      baseArrayLayer: 0,\n      arrayLayerCount: 1,\n    });\n    const bindGroup0 = t.createBindGroupForTest(textureView0, view2Binding, 'float');\n\n    // In one renderPassEncoder it is an error to set both bindGroup0 and bindGroup1.\n    const view1Binding = hasConflict\n      ? view2Binding === 'texture'\n        ? 'storage'\n        : 'texture'\n      : view2Binding;\n    const bindGroup1 = t.createBindGroupForTest(textureView0, view1Binding, 'float');\n\n    const texture2 = useDifferentTextureAsTexture2\n      ? t.device.createTexture({\n          format: 'rgba8unorm',\n          usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.STORAGE_BINDING,\n          size: [kTextureSize, kTextureSize, kTextureLayers],\n        })\n      : texture0;\n    const textureView2 = texture2.createView({\n      dimension: '2d-array',\n      baseArrayLayer: baseLayer2,\n      arrayLayerCount: kTextureLayers - baseLayer2,\n    });\n    // There should be no conflict between bindGroup0 and validBindGroup2.\n    const validBindGroup2 = t.createBindGroupForTest(textureView2, view2Binding, 'float');\n\n    const colorTexture = t.device.createTexture({\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      size: [kTextureSize, kTextureSize, 1],\n    });\n    const encoder = t.device.createCommandEncoder();\n    const renderPassEncoder = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: colorTexture.createView(),\n          loadOp: 'load',\n          storeOp: 'store',\n        },\n      ],\n    });\n    renderPassEncoder.setBindGroup(0, bindGroup0);\n    renderPassEncoder.setBindGroup(1, bindGroup1);\n    renderPassEncoder.setBindGroup(1, validBindGroup2);\n    renderPassEncoder.end();\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, hasConflict);\n  });\n\ng.test('subresources,set_bind_group_on_same_index_depth_stencil_texture')\n  .desc(\n    `\n  Test that when one depth stencil texture subresource is bound to different bind groups, whether\n  the bind groups are reset by another compatible ones or not, its list of internal usages within\n  one usage scope can only be a compatible usage list.`\n  )\n  .params(u =>\n    u\n      .combine('bindAspect', ['depth-only', 'stencil-only'] as const)\n      .combine('depthStencilReadOnly', [true, false])\n  )\n  .fn(async t => {\n    const { bindAspect, depthStencilReadOnly } = t.params;\n    const depthStencilTexture = t.device.createTexture({\n      format: 'depth24plus-stencil8',\n      usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.RENDER_ATTACHMENT,\n      size: [kTextureSize, kTextureSize, 1],\n    });\n\n    const conflictedToNonReadOnlyAttachmentBindGroup = t.createBindGroupForTest(\n      depthStencilTexture.createView({\n        dimension: '2d-array',\n        aspect: bindAspect,\n      }),\n      'texture',\n      bindAspect === 'depth-only' ? 'depth' : 'uint'\n    );\n\n    const colorTexture = t.device.createTexture({\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.STORAGE_BINDING,\n      size: [kTextureSize, kTextureSize, 1],\n    });\n    const validBindGroup = t.createBindGroupForTest(\n      colorTexture.createView({\n        dimension: '2d-array',\n      }),\n      'texture',\n      'float'\n    );\n\n    const encoder = t.device.createCommandEncoder();\n    const renderPassEncoder = encoder.beginRenderPass({\n      colorAttachments: [],\n      depthStencilAttachment: {\n        view: depthStencilTexture.createView(),\n        depthReadOnly: depthStencilReadOnly,\n        stencilReadOnly: depthStencilReadOnly,\n      },\n    });\n    renderPassEncoder.setBindGroup(0, conflictedToNonReadOnlyAttachmentBindGroup);\n    renderPassEncoder.setBindGroup(0, validBindGroup);\n    renderPassEncoder.end();\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !depthStencilReadOnly);\n  });\n\ng.test('subresources,set_unused_bind_group')\n  .desc(\n    `\n  Test that when one texture subresource is bound to different bind groups and the bind groups are\n  used in the same render or compute pass encoder, its list of internal usages within one usage\n  scope can only be a compatible usage list.`\n  )\n  .params(u => u.combine('inRenderPass', [true, false]).combine('hasConflict', [true, false]))\n  .fn(async t => {\n    const { inRenderPass, hasConflict } = t.params;\n\n    const texture0 = t.device.createTexture({\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.STORAGE_BINDING,\n      size: [kTextureSize, kTextureSize, kTextureLayers],\n    });\n    // We always bind the first layer of the texture to bindGroup0.\n    const textureView0 = texture0.createView({\n      dimension: '2d-array',\n      baseArrayLayer: 0,\n      arrayLayerCount: 1,\n    });\n    const visibility = inRenderPass ? GPUShaderStage.FRAGMENT : GPUShaderStage.COMPUTE;\n    // bindGroup0 is used by the pipelines, and bindGroup1 is not used by the pipelines.\n    const textureUsage0 = inRenderPass ? 'texture' : 'storage';\n    const textureUsage1 = hasConflict ? (inRenderPass ? 'storage' : 'texture') : textureUsage0;\n    const bindGroup0 = t.createBindGroupForTest(textureView0, textureUsage0, 'float', visibility);\n    const bindGroup1 = t.createBindGroupForTest(textureView0, textureUsage1, 'float', visibility);\n\n    const encoder = t.device.createCommandEncoder();\n    const colorTexture = t.device.createTexture({\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      size: [kTextureSize, kTextureSize, 1],\n    });\n    const pipelineLayout = t.device.createPipelineLayout({\n      bindGroupLayouts: [t.createBindGroupLayoutForTest(textureUsage0, 'float', visibility)],\n    });\n    if (inRenderPass) {\n      const renderPipeline = t.device.createRenderPipeline({\n        layout: pipelineLayout,\n        vertex: {\n          module: t.device.createShaderModule({\n            code: t.getNoOpShaderCode('VERTEX'),\n          }),\n          entryPoint: 'main',\n        },\n        fragment: {\n          module: t.device.createShaderModule({\n            code: `\n              @group(0) @binding(0) var texture0 : texture_2d_array<f32>;\n              @fragment fn main()\n                -> @location(0) vec4<f32> {\n                  return textureLoad(texture0, vec2<i32>(), 0, 0);\n              }`,\n          }),\n          entryPoint: 'main',\n          targets: [{ format: 'rgba8unorm' }],\n        },\n      });\n\n      const renderPassEncoder = encoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: colorTexture.createView(),\n            loadOp: 'load',\n            storeOp: 'store',\n          },\n        ],\n      });\n      renderPassEncoder.setBindGroup(0, bindGroup0);\n      renderPassEncoder.setBindGroup(1, bindGroup1);\n      renderPassEncoder.setPipeline(renderPipeline);\n      renderPassEncoder.draw(1);\n      renderPassEncoder.end();\n    } else {\n      const computePipeline = t.device.createComputePipeline({\n        layout: pipelineLayout,\n        compute: {\n          module: t.device.createShaderModule({\n            code: `\n            @group(0) @binding(0) var texture0 : texture_storage_2d_array<rgba8unorm, write>;\n            @compute @workgroup_size(1)\n            fn main() {\n              textureStore(texture0, vec2<i32>(), 0, vec4<f32>());\n            }`,\n          }),\n          entryPoint: 'main',\n        },\n      });\n      const computePassEncoder = encoder.beginComputePass();\n      computePassEncoder.setBindGroup(0, bindGroup0);\n      computePassEncoder.setBindGroup(1, bindGroup1);\n      computePassEncoder.setPipeline(computePipeline);\n      computePassEncoder.dispatchWorkgroups(1);\n      computePassEncoder.end();\n    }\n\n    // In WebGPU SPEC (Chapter 3.4.5, Synchronization):\n    // This specification defines the following usage scopes:\n    // - In a compute pass, each dispatch command (dispatchWorkgroups() or\n    //   dispatchWorkgroupsIndirect()) is one usage scope. A subresource is \"used\" in the usage\n    //   scope if it is potentially accessible by the command. State-setting compute pass commands,\n    //   like setBindGroup(index, bindGroup, dynamicOffsets), do not contribute directly to a usage\n    //   scope.\n    // - One render pass is one usage scope. A subresource is \"used\" in the usage scope if it’s\n    //   referenced by any (state-setting or non-state-setting) command. For example, in\n    //   setBindGroup(index, bindGroup, dynamicOffsets), every subresource in bindGroup is \"used\" in\n    //   the render pass’s usage scope.\n    const success = !inRenderPass || !hasConflict;\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('subresources,texture_usages_in_copy_and_render_pass')\n  .desc(\n    `\n  Test that using one texture subresource in a render pass encoder and a copy command is always\n  allowed as WebGPU SPEC (chapter 3.4.5) defines that out of any pass encoder, each command always\n  belongs to one usage scope.`\n  )\n  .params(u =>\n    u\n      .combine('usage0', [\n        'copy-src',\n        'copy-dst',\n        'texture',\n        'storage',\n        'color-attachment',\n      ] as const)\n      .combine('usage1', [\n        'copy-src',\n        'copy-dst',\n        'texture',\n        'storage',\n        'color-attachment',\n      ] as const)\n      .filter(\n        ({ usage0, usage1 }) =>\n          usage0 === 'copy-src' ||\n          usage0 === 'copy-dst' ||\n          usage1 === 'copy-src' ||\n          usage1 === 'copy-dst'\n      )\n  )\n  .fn(async t => {\n    const { usage0, usage1 } = t.params;\n\n    const texture = t.device.createTexture({\n      format: 'rgba8unorm',\n      usage:\n        GPUTextureUsage.COPY_SRC |\n        GPUTextureUsage.COPY_DST |\n        GPUTextureUsage.TEXTURE_BINDING |\n        GPUTextureUsage.STORAGE_BINDING |\n        GPUTextureUsage.RENDER_ATTACHMENT,\n      size: [kTextureSize, kTextureSize, 1],\n    });\n\n    const UseTextureOnCommandEncoder = (\n      texture: GPUTexture,\n      usage: 'copy-src' | 'copy-dst' | 'texture' | 'storage' | 'color-attachment',\n      encoder: GPUCommandEncoder\n    ) => {\n      switch (usage) {\n        case 'copy-src': {\n          const buffer = t.createBufferWithState('valid', {\n            size: 4,\n            usage: GPUBufferUsage.COPY_DST,\n          });\n          encoder.copyTextureToBuffer({ texture }, { buffer }, [1, 1, 1]);\n          break;\n        }\n        case 'copy-dst': {\n          const buffer = t.createBufferWithState('valid', {\n            size: 4,\n            usage: GPUBufferUsage.COPY_SRC,\n          });\n          encoder.copyBufferToTexture({ buffer }, { texture }, [1, 1, 1]);\n          break;\n        }\n        case 'color-attachment': {\n          const renderPassEncoder = encoder.beginRenderPass({\n            colorAttachments: [{ view: texture.createView(), loadOp: 'load', storeOp: 'store' }],\n          });\n          renderPassEncoder.end();\n          break;\n        }\n        case 'texture':\n        case 'storage': {\n          const colorTexture = t.device.createTexture({\n            format: 'rgba8unorm',\n            usage: GPUTextureUsage.RENDER_ATTACHMENT,\n            size: [kTextureSize, kTextureSize, 1],\n          });\n          const renderPassEncoder = encoder.beginRenderPass({\n            colorAttachments: [\n              { view: colorTexture.createView(), loadOp: 'load', storeOp: 'store' },\n            ],\n          });\n          const bindGroup = t.createBindGroupForTest(\n            texture.createView({\n              dimension: '2d-array',\n            }),\n            usage,\n            'float'\n          );\n          renderPassEncoder.setBindGroup(0, bindGroup);\n          renderPassEncoder.end();\n          break;\n        }\n      }\n    };\n    const encoder = t.device.createCommandEncoder();\n    UseTextureOnCommandEncoder(texture, usage0, encoder);\n    UseTextureOnCommandEncoder(texture, usage1, encoder);\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, false);\n  });\n"],"file":"in_render_misc.spec.js"}