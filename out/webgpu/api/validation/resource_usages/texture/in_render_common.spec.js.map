{"version":3,"sources":["../../../../../../src/webgpu/api/validation/resource_usages/texture/in_render_common.spec.ts"],"names":["description","makeTestGroup","unreachable","ValidationTest","F","getColorAttachment","texture","textureViewDescriptor","view","createView","clearValue","r","g","b","a","loadOp","storeOp","kTextureSize","kTextureLevels","kTextureLayers","test","desc","params","u","combine","unless","t","inSamePass","baseLevel0","baseLevel1","fn","baseLayer0","baseLayer1","device","createTexture","format","usage","GPUTextureUsage","RENDER_ATTACHMENT","size","mipLevelCount","colorAttachment1","baseArrayLayer","arrayLayerCount","baseMipLevel","colorAttachment2","encoder","createCommandEncoder","renderPass","beginRenderPass","colorAttachments","end","renderPass1","renderPass2","success","expectValidationError","finish","combineWithParams","bindGroupViewBaseLevel","bindGroupViewLevelCount","bindGroupViewBaseLayer","bindGroupViewLayerCount","bindGroupUsage","colorAttachmentLevel","colorAttachmentLayer","bindGroupLayoutEntry","binding","visibility","GPUShaderStage","FRAGMENT","textureUsage","viewDimension","TEXTURE_BINDING","storageTexture","access","STORAGE_BINDING","bindGroupView","dimension","bindGroupLayout","createBindGroupLayout","entries","bindGroup","createBindGroup","layout","resource","colorAttachment","setBindGroup","texture2","isMipLevelOverlapped","isArrayLayerOverlapped","isOverlapped"],"mappings":"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","sourcesContent":["export const description = `\nTODO:\n- 2 views:\n    - x= {upon the same subresource, or different subresources {mip level, array layer, aspect} of\n         the same texture}\n    - x= possible resource usages on each view:\n         - both in bind group {texture_binding, storage_binding}\n    - x= different shader stages: {0, ..., 7}\n        - maybe first view vis = {1, 2, 4}, second view vis = {0, ..., 7}\n    - x= bindings are in {\n        - same draw call\n        - same pass, different draw call\n        - different pass\n        - }\n(It's probably not necessary to test EVERY possible combination of options in this whole\nblock, so we could break it down into a few smaller ones (one for different types of\nsubresources, one for same draw/same pass/different pass, one for visibilities).)\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { unreachable } from '../../../../../common/util/util.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nclass F extends ValidationTest {\n  getColorAttachment(\n    texture: GPUTexture,\n    textureViewDescriptor?: GPUTextureViewDescriptor\n  ): GPURenderPassColorAttachment {\n    const view = texture.createView(textureViewDescriptor);\n\n    return {\n      view,\n      clearValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n      loadOp: 'clear',\n      storeOp: 'store',\n    };\n  }\n}\n\nexport const g = makeTestGroup(F);\n\nconst kTextureSize = 16;\nconst kTextureLevels = 3;\nconst kTextureLayers = 3;\n\ng.test('subresources_from_same_texture_as_color_attachments')\n  .desc(\n    `\n  Test that the different subresource of the same texture are allowed to be used as color\n  attachments in same / different render pass encoder, while the same subresource is only allowed\n  to be used as different color attachments in different render pass encoders.`\n  )\n  .params(u =>\n    u\n      .combine('baseLayer0', [0, 1])\n      .combine('baseLevel0', [0, 1])\n      .combine('baseLayer1', [0, 1])\n      .combine('baseLevel1', [0, 1])\n      .combine('inSamePass', [true, false])\n      .unless(t => t.inSamePass && t.baseLevel0 !== t.baseLevel1)\n  )\n  .fn(async t => {\n    const { baseLayer0, baseLevel0, baseLayer1, baseLevel1, inSamePass } = t.params;\n\n    const texture = t.device.createTexture({\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      size: [kTextureSize, kTextureSize, kTextureLayers],\n      mipLevelCount: kTextureLevels,\n    });\n\n    const colorAttachment1 = t.getColorAttachment(texture, {\n      baseArrayLayer: baseLayer0,\n      arrayLayerCount: 1,\n      baseMipLevel: baseLevel0,\n      mipLevelCount: 1,\n    });\n    const colorAttachment2 = t.getColorAttachment(texture, {\n      baseArrayLayer: baseLayer1,\n      baseMipLevel: baseLevel1,\n      mipLevelCount: 1,\n    });\n    const encoder = t.device.createCommandEncoder();\n    if (inSamePass) {\n      const renderPass = encoder.beginRenderPass({\n        colorAttachments: [colorAttachment1, colorAttachment2],\n      });\n      renderPass.end();\n    } else {\n      const renderPass1 = encoder.beginRenderPass({\n        colorAttachments: [colorAttachment1],\n      });\n      renderPass1.end();\n      const renderPass2 = encoder.beginRenderPass({\n        colorAttachments: [colorAttachment2],\n      });\n      renderPass2.end();\n    }\n\n    const success = inSamePass ? baseLayer0 !== baseLayer1 : true;\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('subresources_from_same_texture_as_color_attachment_and_in_bind_group')\n  .desc(\n    `\n  Test that when one subresource of a texture is used as a color attachment, it cannot be used in a\n  bind group simultaneously in the same render pass encoder. It is allowed when the bind group is\n  used in another render pass encoder instead of the same one.`\n  )\n  .params(u =>\n    u\n      .combine('colorAttachmentLevel', [0, 1])\n      .combine('colorAttachmentLayer', [0, 1])\n      .combineWithParams([\n        { bindGroupViewBaseLevel: 0, bindGroupViewLevelCount: 1 },\n        { bindGroupViewBaseLevel: 1, bindGroupViewLevelCount: 1 },\n        { bindGroupViewBaseLevel: 1, bindGroupViewLevelCount: 2 },\n      ])\n      .combineWithParams([\n        { bindGroupViewBaseLayer: 0, bindGroupViewLayerCount: 1 },\n        { bindGroupViewBaseLayer: 1, bindGroupViewLayerCount: 1 },\n        { bindGroupViewBaseLayer: 1, bindGroupViewLayerCount: 2 },\n      ])\n      .combine('bindGroupUsage', ['texture', 'storage'])\n      .unless(t => t.bindGroupUsage === 'storage' && t.bindGroupViewLevelCount > 0)\n      .combine('inSamePass', [true, false])\n  )\n  .fn(async t => {\n    const {\n      colorAttachmentLevel,\n      colorAttachmentLayer,\n      bindGroupViewBaseLevel,\n      bindGroupViewLevelCount,\n      bindGroupViewBaseLayer,\n      bindGroupViewLayerCount,\n      bindGroupUsage,\n      inSamePass,\n    } = t.params;\n\n    const bindGroupLayoutEntry: GPUBindGroupLayoutEntry = {\n      binding: 0,\n      visibility: GPUShaderStage.FRAGMENT,\n    };\n    let textureUsage = GPUTextureUsage.RENDER_ATTACHMENT;\n    const viewDimension = bindGroupViewLayerCount > 1 ? '2d-array' : '2d';\n    switch (bindGroupUsage) {\n      case 'texture':\n        bindGroupLayoutEntry.texture = { viewDimension };\n        textureUsage |= GPUTextureUsage.TEXTURE_BINDING;\n        break;\n      case 'storage':\n        bindGroupLayoutEntry.storageTexture = {\n          access: 'write-only',\n          format: 'rgba8unorm',\n          viewDimension,\n        };\n        textureUsage |= GPUTextureUsage.STORAGE_BINDING;\n        break;\n      default:\n        unreachable();\n        break;\n    }\n\n    const texture = t.device.createTexture({\n      format: 'rgba8unorm',\n      usage: textureUsage,\n      size: [kTextureSize, kTextureSize, kTextureLayers],\n      mipLevelCount: kTextureLevels,\n    });\n    const bindGroupView = texture.createView({\n      dimension: bindGroupViewLayerCount > 1 ? '2d-array' : '2d',\n      baseArrayLayer: bindGroupViewBaseLayer,\n      arrayLayerCount: bindGroupViewLayerCount,\n      baseMipLevel: bindGroupViewBaseLevel,\n      mipLevelCount: bindGroupViewLevelCount,\n    });\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [bindGroupLayoutEntry],\n    });\n    const bindGroup = t.device.createBindGroup({\n      layout: bindGroupLayout,\n      entries: [{ binding: 0, resource: bindGroupView }],\n    });\n\n    const colorAttachment = t.getColorAttachment(texture, {\n      baseArrayLayer: colorAttachmentLayer,\n      arrayLayerCount: 1,\n      baseMipLevel: colorAttachmentLevel,\n      mipLevelCount: 1,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const renderPass = encoder.beginRenderPass({\n      colorAttachments: [colorAttachment],\n    });\n    if (inSamePass) {\n      renderPass.setBindGroup(0, bindGroup);\n      renderPass.end();\n    } else {\n      renderPass.end();\n\n      const texture2 = t.device.createTexture({\n        format: 'rgba8unorm',\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n        size: [kTextureSize, kTextureSize, 1],\n        mipLevelCount: 1,\n      });\n      const colorAttachment2 = t.getColorAttachment(texture2);\n      const renderPass2 = encoder.beginRenderPass({\n        colorAttachments: [colorAttachment2],\n      });\n      renderPass2.setBindGroup(0, bindGroup);\n      renderPass2.end();\n    }\n\n    const isMipLevelOverlapped =\n      colorAttachmentLevel >= bindGroupViewBaseLevel &&\n      colorAttachmentLevel < bindGroupViewBaseLevel + bindGroupViewLevelCount;\n    const isArrayLayerOverlapped =\n      colorAttachmentLayer >= bindGroupViewBaseLayer &&\n      colorAttachmentLayer < bindGroupViewBaseLayer + bindGroupViewLayerCount;\n    const isOverlapped = isMipLevelOverlapped && isArrayLayerOverlapped;\n\n    const success = inSamePass ? !isOverlapped : true;\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n"],"file":"in_render_common.spec.js"}