{"version":3,"sources":["../../../../../../src/webgpu/api/validation/resource_usages/texture/in_render_common.spec.ts"],"names":["description","makeTestGroup","assert","unreachable","ValidationTest","F","getColorAttachment","texture","textureViewDescriptor","view","createView","clearValue","r","g","b","a","loadOp","storeOp","createBindGroupForTest","textureView","textureUsage","sampleType","bindGroupLayoutEntry","binding","visibility","GPUShaderStage","FRAGMENT","viewDimension","storageTexture","access","format","layout","device","createBindGroupLayout","entries","createBindGroup","resource","isRangeNotOverlapped","start0","end0","start1","end1","kTextureSize","kTextureLevels","kTextureLayers","test","desc","params","u","combine","unless","t","inSamePass","level0","level1","fn","layer0","layer1","createTexture","usage","GPUTextureUsage","RENDER_ATTACHMENT","size","mipLevelCount","colorAttachment1","dimension","baseArrayLayer","arrayLayerCount","baseMipLevel","colorAttachment2","encoder","createCommandEncoder","renderPass","beginRenderPass","colorAttachments","end","renderPass1","renderPass2","success","expectValidationError","finish","combineWithParams","bgLevel","bgLevelCount","bgLayer","bgLayerCount","bgUsage","colorAttachmentLevel","colorAttachmentLayer","TEXTURE_BINDING","STORAGE_BINDING","bindGroupView","bindGroup","colorAttachment","setBindGroup","texture2","isMipLevelNotOverlapped","isArrayLayerNotOverlapped","isNotOverlapped","dsLevel","dsLayer","dsReadOnly","bgAspect","aspect","attachmentView","depthStencilAttachment","depthReadOnly","depthLoadOp","depthStoreOp","stencilReadOnly","stencilLoadOp","stencilStoreOp","base","count","bgUsage0","bg0Levels","bgUsage1","bg1Levels","bg0Layers","bg1Layers","bg0","bg1","bindGroup0","bindGroup1","colorTexture","view0Levels","view0Layers","view1Levels","view1Layers","aspect0","aspect1","bindGroupView0","bindGroupView1","sampleType0","sampleType1"],"mappings":"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","sourcesContent":["export const description = `\nTexture Usages Validation Tests in Same or Different Render Pass Encoders.\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { assert, unreachable } from '../../../../../common/util/util.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nclass F extends ValidationTest {\n  getColorAttachment(\n    texture: GPUTexture,\n    textureViewDescriptor?: GPUTextureViewDescriptor\n  ): GPURenderPassColorAttachment {\n    const view = texture.createView(textureViewDescriptor);\n\n    return {\n      view,\n      clearValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n      loadOp: 'clear',\n      storeOp: 'store',\n    };\n  }\n\n  createBindGroupForTest(\n    textureView: GPUTextureView,\n    textureUsage: 'texture' | 'storage',\n    sampleType: 'float' | 'depth' | 'uint'\n  ) {\n    const bindGroupLayoutEntry: GPUBindGroupLayoutEntry = {\n      binding: 0,\n      visibility: GPUShaderStage.FRAGMENT,\n    };\n    switch (textureUsage) {\n      case 'texture':\n        bindGroupLayoutEntry.texture = { viewDimension: '2d-array', sampleType };\n        break;\n      case 'storage':\n        bindGroupLayoutEntry.storageTexture = {\n          access: 'write-only',\n          format: 'rgba8unorm',\n          viewDimension: '2d-array',\n        };\n        break;\n      default:\n        unreachable();\n        break;\n    }\n    const layout = this.device.createBindGroupLayout({\n      entries: [bindGroupLayoutEntry],\n    });\n    return this.device.createBindGroup({\n      layout,\n      entries: [{ binding: 0, resource: textureView }],\n    });\n  }\n\n  isRangeNotOverlapped(start0: number, end0: number, start1: number, end1: number): boolean {\n    assert(start0 <= end0 && start1 <= end1);\n    // There are only two possibilities for two non-overlapped ranges:\n    // [start0, end0] [start1, end1] or\n    // [start1, end1] [start0, end0]\n    return end0 < start1 || end1 < start0;\n  }\n}\n\nexport const g = makeTestGroup(F);\n\nconst kTextureSize = 16;\nconst kTextureLevels = 3;\nconst kTextureLayers = 3;\n\ng.test('subresources,color_attachments')\n  .desc(\n    `\n  Test that the different subresource of the same texture are allowed to be used as color\n  attachments in same / different render pass encoder, while the same subresource is only allowed\n  to be used as different color attachments in different render pass encoders.`\n  )\n  .params(u =>\n    u\n      .combine('layer0', [0, 1])\n      .combine('level0', [0, 1])\n      .combine('layer1', [0, 1])\n      .combine('level1', [0, 1])\n      .combine('inSamePass', [true, false])\n      .unless(t => t.inSamePass && t.level0 !== t.level1)\n  )\n  .fn(async t => {\n    const { layer0, level0, layer1, level1, inSamePass } = t.params;\n\n    const texture = t.device.createTexture({\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      size: [kTextureSize, kTextureSize, kTextureLayers],\n      mipLevelCount: kTextureLevels,\n    });\n\n    const colorAttachment1 = t.getColorAttachment(texture, {\n      dimension: '2d',\n      baseArrayLayer: layer0,\n      arrayLayerCount: 1,\n      baseMipLevel: level0,\n      mipLevelCount: 1,\n    });\n    const colorAttachment2 = t.getColorAttachment(texture, {\n      dimension: '2d',\n      baseArrayLayer: layer1,\n      baseMipLevel: level1,\n      mipLevelCount: 1,\n    });\n    const encoder = t.device.createCommandEncoder();\n    if (inSamePass) {\n      const renderPass = encoder.beginRenderPass({\n        colorAttachments: [colorAttachment1, colorAttachment2],\n      });\n      renderPass.end();\n    } else {\n      const renderPass1 = encoder.beginRenderPass({\n        colorAttachments: [colorAttachment1],\n      });\n      renderPass1.end();\n      const renderPass2 = encoder.beginRenderPass({\n        colorAttachments: [colorAttachment2],\n      });\n      renderPass2.end();\n    }\n\n    const success = inSamePass ? layer0 !== layer1 : true;\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('subresources,color_attachment_and_bind_group')\n  .desc(\n    `\n  Test that when one subresource of a texture is used as a color attachment, it cannot be used in a\n  bind group simultaneously in the same render pass encoder. It is allowed when the bind group is\n  used in another render pass encoder instead of the same one.`\n  )\n  .params(u =>\n    u\n      .combine('colorAttachmentLevel', [0, 1])\n      .combine('colorAttachmentLayer', [0, 1])\n      .combineWithParams([\n        { bgLevel: 0, bgLevelCount: 1 },\n        { bgLevel: 1, bgLevelCount: 1 },\n        { bgLevel: 1, bgLevelCount: 2 },\n      ])\n      .combineWithParams([\n        { bgLayer: 0, bgLayerCount: 1 },\n        { bgLayer: 1, bgLayerCount: 1 },\n        { bgLayer: 1, bgLayerCount: 2 },\n      ])\n      .combine('bgUsage', ['texture', 'storage'] as const)\n      .unless(t => t.bgUsage === 'storage' && t.bgLevelCount > 1)\n      .combine('inSamePass', [true, false])\n  )\n  .fn(async t => {\n    const {\n      colorAttachmentLevel,\n      colorAttachmentLayer,\n      bgLevel,\n      bgLevelCount,\n      bgLayer,\n      bgLayerCount,\n      bgUsage,\n      inSamePass,\n    } = t.params;\n\n    const texture = t.device.createTexture({\n      format: 'rgba8unorm',\n      usage:\n        GPUTextureUsage.RENDER_ATTACHMENT |\n        GPUTextureUsage.TEXTURE_BINDING |\n        GPUTextureUsage.STORAGE_BINDING,\n      size: [kTextureSize, kTextureSize, kTextureLayers],\n      mipLevelCount: kTextureLevels,\n    });\n    const bindGroupView = texture.createView({\n      dimension: '2d-array',\n      baseArrayLayer: bgLayer,\n      arrayLayerCount: bgLayerCount,\n      baseMipLevel: bgLevel,\n      mipLevelCount: bgLevelCount,\n    });\n    const bindGroup = t.createBindGroupForTest(bindGroupView, bgUsage, 'float');\n\n    const colorAttachment = t.getColorAttachment(texture, {\n      dimension: '2d',\n      baseArrayLayer: colorAttachmentLayer,\n      arrayLayerCount: 1,\n      baseMipLevel: colorAttachmentLevel,\n      mipLevelCount: 1,\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const renderPass = encoder.beginRenderPass({\n      colorAttachments: [colorAttachment],\n    });\n    if (inSamePass) {\n      renderPass.setBindGroup(0, bindGroup);\n      renderPass.end();\n    } else {\n      renderPass.end();\n\n      const texture2 = t.device.createTexture({\n        format: 'rgba8unorm',\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n        size: [kTextureSize, kTextureSize, 1],\n        mipLevelCount: 1,\n      });\n      const colorAttachment2 = t.getColorAttachment(texture2);\n      const renderPass2 = encoder.beginRenderPass({\n        colorAttachments: [colorAttachment2],\n      });\n      renderPass2.setBindGroup(0, bindGroup);\n      renderPass2.end();\n    }\n\n    const isMipLevelNotOverlapped = t.isRangeNotOverlapped(\n      colorAttachmentLevel,\n      colorAttachmentLevel,\n      bgLevel,\n      bgLevel + bgLevelCount - 1\n    );\n    const isArrayLayerNotOverlapped = t.isRangeNotOverlapped(\n      colorAttachmentLayer,\n      colorAttachmentLayer,\n      bgLayer,\n      bgLayer + bgLayerCount - 1\n    );\n    const isNotOverlapped = isMipLevelNotOverlapped || isArrayLayerNotOverlapped;\n\n    const success = inSamePass ? isNotOverlapped : true;\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('subresources,depth_stencil_attachment_and_bind_group')\n  .desc(\n    `\n  Test that when one subresource of a texture is used as a depth stencil attachment, it cannot be\n  used in a bind group simultaneously in the same render pass encoder. It is allowed when the bind\n  group is used in another render pass encoder instead of the same one, or the subresource is used\n  as a read-only depth stencil attachment.`\n  )\n  .params(u =>\n    u\n      .combine('dsLevel', [0, 1])\n      .combine('dsLayer', [0, 1])\n      .combineWithParams([\n        { bgLevel: 0, bgLevelCount: 1 },\n        { bgLevel: 1, bgLevelCount: 1 },\n        { bgLevel: 1, bgLevelCount: 2 },\n      ])\n      .combineWithParams([\n        { bgLayer: 0, bgLayerCount: 1 },\n        { bgLayer: 1, bgLayerCount: 1 },\n        { bgLayer: 1, bgLayerCount: 2 },\n      ])\n      .combine('dsReadOnly', [true, false])\n      .combine('bgAspect', ['depth-only', 'stencil-only'] as const)\n      .combine('inSamePass', [true, false])\n  )\n  .fn(async t => {\n    const {\n      dsLevel,\n      dsLayer,\n      bgLevel,\n      bgLevelCount,\n      bgLayer,\n      bgLayerCount,\n      dsReadOnly,\n      bgAspect,\n      inSamePass,\n    } = t.params;\n\n    const texture = t.device.createTexture({\n      format: 'depth24plus-stencil8',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING,\n      size: [kTextureSize, kTextureSize, kTextureLayers],\n      mipLevelCount: kTextureLevels,\n    });\n    const bindGroupView = texture.createView({\n      dimension: '2d-array',\n      baseArrayLayer: bgLayer,\n      arrayLayerCount: bgLayerCount,\n      baseMipLevel: bgLevel,\n      mipLevelCount: bgLevelCount,\n      aspect: bgAspect,\n    });\n    const sampleType = bgAspect === 'depth-only' ? 'depth' : 'uint';\n    const bindGroup = t.createBindGroupForTest(bindGroupView, 'texture', sampleType);\n\n    const attachmentView = texture.createView({\n      dimension: '2d',\n      baseArrayLayer: dsLayer,\n      arrayLayerCount: 1,\n      baseMipLevel: dsLevel,\n      mipLevelCount: 1,\n    });\n    const depthStencilAttachment: GPURenderPassDepthStencilAttachment = {\n      view: attachmentView,\n      depthReadOnly: dsReadOnly,\n      depthLoadOp: 'load',\n      depthStoreOp: 'store',\n      stencilReadOnly: dsReadOnly,\n      stencilLoadOp: 'load',\n      stencilStoreOp: 'store',\n    };\n\n    const encoder = t.device.createCommandEncoder();\n    const renderPass = encoder.beginRenderPass({\n      colorAttachments: [],\n      depthStencilAttachment,\n    });\n    if (inSamePass) {\n      renderPass.setBindGroup(0, bindGroup);\n      renderPass.end();\n    } else {\n      renderPass.end();\n\n      const texture2 = t.device.createTexture({\n        format: 'rgba8unorm',\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n        size: [kTextureSize, kTextureSize, 1],\n        mipLevelCount: 1,\n      });\n      const colorAttachment2 = t.getColorAttachment(texture2);\n      const renderPass2 = encoder.beginRenderPass({\n        colorAttachments: [colorAttachment2],\n      });\n      renderPass2.setBindGroup(0, bindGroup);\n      renderPass2.end();\n    }\n\n    const isMipLevelNotOverlapped = t.isRangeNotOverlapped(\n      dsLevel,\n      dsLevel,\n      bgLevel,\n      bgLevel + bgLevelCount - 1\n    );\n    const isArrayLayerNotOverlapped = t.isRangeNotOverlapped(\n      dsLayer,\n      dsLayer,\n      bgLayer,\n      bgLayer + bgLayerCount - 1\n    );\n    const isNotOverlapped = isMipLevelNotOverlapped || isArrayLayerNotOverlapped;\n\n    const success = !inSamePass || isNotOverlapped || dsReadOnly;\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('subresources,multiple_bind_groups')\n  .desc(\n    `\n  Test that when one color texture subresource is bound to different bind groups, its list of\n  internal usages within one usage scope can only be a compatible usage list. For texture\n  subresources in bind groups, the compatible usage lists are {TEXTURE_BINDING} and\n  {STORAGE_BINDING}, which means it can only be bound as both TEXTURE_BINDING and STORAGE_BINDING in\n  different render pass encoders, otherwise a validation error will occur.`\n  )\n  .params(u =>\n    u\n      .combine('bg0Levels', [\n        { base: 0, count: 1 },\n        { base: 1, count: 1 },\n        { base: 1, count: 2 },\n      ])\n      .combine('bg0Layers', [\n        { base: 0, count: 1 },\n        { base: 1, count: 1 },\n        { base: 1, count: 2 },\n      ])\n      .combine('bg1Levels', [\n        { base: 0, count: 1 },\n        { base: 1, count: 1 },\n        { base: 1, count: 2 },\n      ])\n      .combine('bg1Layers', [\n        { base: 0, count: 1 },\n        { base: 1, count: 1 },\n        { base: 1, count: 2 },\n      ])\n      .combine('bgUsage0', ['texture', 'storage'] as const)\n      .combine('bgUsage1', ['texture', 'storage'] as const)\n      .unless(\n        t =>\n          (t.bgUsage0 === 'storage' && t.bg0Levels.count > 1) ||\n          (t.bgUsage1 === 'storage' && t.bg1Levels.count > 1)\n      )\n      .combine('inSamePass', [true, false])\n  )\n  .fn(async t => {\n    const { bg0Levels, bg0Layers, bg1Levels, bg1Layers, bgUsage0, bgUsage1, inSamePass } = t.params;\n\n    const texture = t.device.createTexture({\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.TEXTURE_BINDING,\n      size: [kTextureSize, kTextureSize, kTextureLayers],\n      mipLevelCount: kTextureLevels,\n    });\n    const bg0 = texture.createView({\n      dimension: '2d-array',\n      baseArrayLayer: bg0Layers.base,\n      arrayLayerCount: bg0Layers.count,\n      baseMipLevel: bg0Levels.base,\n      mipLevelCount: bg0Levels.count,\n    });\n    const bg1 = texture.createView({\n      dimension: '2d-array',\n      baseArrayLayer: bg1Layers.base,\n      arrayLayerCount: bg1Layers.count,\n      baseMipLevel: bg1Levels.base,\n      mipLevelCount: bg1Levels.count,\n    });\n    const bindGroup0 = t.createBindGroupForTest(bg0, bgUsage0, 'float');\n    const bindGroup1 = t.createBindGroupForTest(bg1, bgUsage1, 'float');\n\n    const colorTexture = t.device.createTexture({\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      size: [kTextureSize, kTextureSize, 1],\n      mipLevelCount: 1,\n    });\n    const colorAttachment = t.getColorAttachment(colorTexture);\n    const encoder = t.device.createCommandEncoder();\n    const renderPass = encoder.beginRenderPass({\n      colorAttachments: [colorAttachment],\n    });\n    if (inSamePass) {\n      renderPass.setBindGroup(0, bindGroup0);\n      renderPass.setBindGroup(1, bindGroup1);\n      renderPass.end();\n    } else {\n      renderPass.setBindGroup(0, bindGroup0);\n      renderPass.end();\n\n      const renderPass2 = encoder.beginRenderPass({\n        colorAttachments: [colorAttachment],\n      });\n      renderPass2.setBindGroup(1, bindGroup1);\n      renderPass2.end();\n    }\n\n    const isMipLevelNotOverlapped = t.isRangeNotOverlapped(\n      bg0Levels.base,\n      bg0Levels.base + bg0Levels.count - 1,\n      bg1Levels.base,\n      bg1Levels.base + bg1Levels.count - 1\n    );\n    const isArrayLayerNotOverlapped = t.isRangeNotOverlapped(\n      bg0Layers.base,\n      bg0Layers.base + bg0Layers.count - 1,\n      bg1Layers.base,\n      bg1Layers.base + bg1Layers.count - 1\n    );\n    const isNotOverlapped = isMipLevelNotOverlapped || isArrayLayerNotOverlapped;\n\n    const success = !inSamePass || isNotOverlapped || bgUsage0 === bgUsage1;\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n\ng.test('subresources,depth_stencil_texture_in_bind_groups')\n  .desc(\n    `\n  Test that when one depth stencil texture subresource is bound to different bind groups, we can\n  always bind these two bind groups in either the same or different render pass encoder as the depth\n  stencil texture can only be bound as TEXTURE_BINDING in the bind group.`\n  )\n  .params(u =>\n    u\n      .combine('view0Levels', [\n        { base: 0, count: 1 },\n        { base: 1, count: 1 },\n        { base: 1, count: 2 },\n      ])\n      .combine('view0Layers', [\n        { base: 0, count: 1 },\n        { base: 1, count: 1 },\n        { base: 1, count: 2 },\n      ])\n      .combine('view1Levels', [\n        { base: 0, count: 1 },\n        { base: 1, count: 1 },\n        { base: 1, count: 2 },\n      ])\n      .combine('view1Layers', [\n        { base: 0, count: 1 },\n        { base: 1, count: 1 },\n        { base: 1, count: 2 },\n      ])\n      .combine('aspect0', ['depth-only', 'stencil-only'] as const)\n      .combine('aspect1', ['depth-only', 'stencil-only'] as const)\n      .combine('inSamePass', [true, false])\n  )\n  .fn(async t => {\n    const {\n      view0Levels,\n      view0Layers,\n      view1Levels,\n      view1Layers,\n      aspect0,\n      aspect1,\n      inSamePass,\n    } = t.params;\n\n    const texture = t.device.createTexture({\n      format: 'depth24plus-stencil8',\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n      size: [kTextureSize, kTextureSize, kTextureLayers],\n      mipLevelCount: kTextureLevels,\n    });\n    const bindGroupView0 = texture.createView({\n      dimension: '2d-array',\n      baseArrayLayer: view0Layers.base,\n      arrayLayerCount: view0Layers.count,\n      baseMipLevel: view0Levels.base,\n      mipLevelCount: view0Levels.count,\n      aspect: aspect0,\n    });\n    const bindGroupView1 = texture.createView({\n      dimension: '2d-array',\n      baseArrayLayer: view1Layers.base,\n      arrayLayerCount: view1Layers.count,\n      baseMipLevel: view1Levels.base,\n      mipLevelCount: view1Levels.count,\n      aspect: aspect1,\n    });\n\n    const sampleType0 = aspect0 === 'depth-only' ? 'depth' : 'uint';\n    const sampleType1 = aspect1 === 'depth-only' ? 'depth' : 'uint';\n    const bindGroup0 = t.createBindGroupForTest(bindGroupView0, 'texture', sampleType0);\n    const bindGroup1 = t.createBindGroupForTest(bindGroupView1, 'texture', sampleType1);\n\n    const colorTexture = t.device.createTexture({\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      size: [kTextureSize, kTextureSize, 1],\n      mipLevelCount: 1,\n    });\n    const colorAttachment = t.getColorAttachment(colorTexture);\n    const encoder = t.device.createCommandEncoder();\n    const renderPass = encoder.beginRenderPass({\n      colorAttachments: [colorAttachment],\n    });\n    if (inSamePass) {\n      renderPass.setBindGroup(0, bindGroup0);\n      renderPass.setBindGroup(1, bindGroup1);\n      renderPass.end();\n    } else {\n      renderPass.setBindGroup(0, bindGroup0);\n      renderPass.end();\n\n      const renderPass2 = encoder.beginRenderPass({\n        colorAttachments: [colorAttachment],\n      });\n      renderPass2.setBindGroup(1, bindGroup1);\n      renderPass2.end();\n    }\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, false);\n  });\n"],"file":"in_render_common.spec.js"}