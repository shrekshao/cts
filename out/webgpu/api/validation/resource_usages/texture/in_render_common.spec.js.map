{"version":3,"sources":["../../../../../../src/webgpu/api/validation/resource_usages/texture/in_render_common.spec.ts"],"names":["description","makeTestGroup","ValidationTest","F","getColorAttachment","texture","textureViewDescriptor","view","createView","clearValue","r","g","b","a","loadOp","storeOp","test","params","u","combine","unless","t","inSamePass","baseLevel0","baseLevel1","fn","baseLayer0","baseLayer1","device","createTexture","format","usage","GPUTextureUsage","RENDER_ATTACHMENT","size","mipLevelCount","colorAttachment1","baseArrayLayer","baseMipLevel","colorAttachment2","encoder","createCommandEncoder","renderPass","beginRenderPass","colorAttachments","endPass","renderPass1","renderPass2","success","expectValidationError","finish"],"mappings":"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","sourcesContent":["export const description = `\nTODO:\n- 2 views:\n    - x= {upon the same subresource, or different subresources {mip level, array layer, aspect} of\n         the same texture}\n    - x= possible resource usages on each view:\n         - both as render attachments\n         - both in bind group {texture_binding, storage_binding}\n         - one in bind group, and another as render attachment\n    - x= different shader stages: {0, ..., 7}\n        - maybe first view vis = {1, 2, 4}, second view vis = {0, ..., 7}\n    - x= bindings are in {\n        - same draw call\n        - same pass, different draw call\n        - different pass\n        - }\n(It's probably not necessary to test EVERY possible combination of options in this whole\nblock, so we could break it down into a few smaller ones (one for different types of\nsubresources, one for same draw/same pass/different pass, one for visibilities).)\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nclass F extends ValidationTest {\n  getColorAttachment(\n    texture: GPUTexture,\n    textureViewDescriptor?: GPUTextureViewDescriptor\n  ): GPURenderPassColorAttachment {\n    const view = texture.createView(textureViewDescriptor);\n\n    return {\n      view,\n      clearValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n      loadOp: 'clear',\n      storeOp: 'store',\n    };\n  }\n}\n\nexport const g = makeTestGroup(F);\n\n// Test that the different subresource of the same texture are allowed to be used as color\n// attachments in same / different render passes, while the same subresource is only allowed to be\n// used as different color attachments in different render passes.\ng.test('subresources_from_same_texture_as_color_attachments')\n  .params(u =>\n    u\n      .combine('baseLayer0', [0, 1])\n      .combine('baseLevel0', [0, 1])\n      .combine('baseLayer1', [0, 1])\n      .combine('baseLevel1', [0, 1])\n      .combine('inSamePass', [true, false])\n      .unless(t => t.inSamePass && t.baseLevel0 !== t.baseLevel1)\n  )\n  .fn(async t => {\n    const { baseLayer0, baseLevel0, baseLayer1, baseLevel1, inSamePass } = t.params;\n\n    const texture = t.device.createTexture({\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      size: [16, 16, 2],\n      mipLevelCount: 2,\n    });\n\n    const colorAttachment1 = t.getColorAttachment(texture, {\n      baseArrayLayer: baseLayer0,\n      baseMipLevel: baseLevel0,\n      mipLevelCount: 1,\n    });\n    const colorAttachment2 = t.getColorAttachment(texture, {\n      baseArrayLayer: baseLayer1,\n      baseMipLevel: baseLevel1,\n      mipLevelCount: 1,\n    });\n    const encoder = t.device.createCommandEncoder();\n    if (inSamePass) {\n      const renderPass = encoder.beginRenderPass({\n        colorAttachments: [colorAttachment1, colorAttachment2],\n      });\n      renderPass.endPass();\n    } else {\n      const renderPass1 = encoder.beginRenderPass({\n        colorAttachments: [colorAttachment1],\n      });\n      renderPass1.endPass();\n      const renderPass2 = encoder.beginRenderPass({\n        colorAttachments: [colorAttachment2],\n      });\n      renderPass2.endPass();\n    }\n\n    const success = inSamePass ? baseLayer0 !== baseLayer1 : true;\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  });\n"],"file":"in_render_common.spec.js"}