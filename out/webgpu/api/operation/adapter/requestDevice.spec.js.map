{"version":3,"sources":["../../../../../src/webgpu/api/operation/adapter/requestDevice.spec.ts"],"names":["description","Fixture","makeTestGroup","getGPU","assert","raceWithRejectOnTimeout","kFeatureNames","kLimitInfo","kLimits","clamp","isPowerOfTwo","g","test","desc","paramsSubcasesOnly","u","combine","undefined","requiredFeatures","requiredLimits","fn","t","args","params","gpu","adapter","requestAdapter","device","requestDevice","expect","features","size","limit","limits","default","destroy","lostInfo","lost","reason","kTimeoutMS","shouldReject","feature","promise","has","unknownLimitName","beginSubcases","limitValue","value","expandWithParams","p","class","mul","add","min","max","maximumValue","success"],"mappings":"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","sourcesContent":["export const description = `\nTest GPUAdapter.requestDevice.\n\nNote tests explicitly destroy created devices so that tests don't have to wait for GC to clean up\npotentially limited native resources.\n`;\n\nimport { Fixture } from '../../../../common/framework/fixture.js';\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { getGPU } from '../../../../common/util/navigator_gpu.js';\nimport { assert, raceWithRejectOnTimeout } from '../../../../common/util/util.js';\nimport { kFeatureNames, kLimitInfo, kLimits } from '../../../capability_info.js';\nimport { clamp, isPowerOfTwo } from '../../../util/math.js';\n\nexport const g = makeTestGroup(Fixture);\n\ng.test('default')\n  .desc(\n    `\n    Test requesting the device with a variation of default paramters.\n    - No features listed in default device\n    - Default limits`\n  )\n  .paramsSubcasesOnly(u =>\n    u.combine('args', [\n      [],\n      [undefined],\n      [{}],\n      [{ requiredFeatures: [], requiredLimits: {} }],\n    ] as const)\n  )\n  .fn(async t => {\n    const { args } = t.params;\n    const gpu = getGPU();\n    const adapter = await gpu.requestAdapter();\n    assert(adapter !== null);\n    const device = await adapter.requestDevice(...args);\n    assert(device !== null);\n\n    // Default device should have no features.\n    t.expect(device.features.size === 0, 'Default device should not have any features');\n    // All limits should be defaults.\n    for (const limit of kLimits) {\n      t.expect(\n        device.limits[limit] === kLimitInfo[limit].default,\n        `Expected ${limit} == default: ${device.limits[limit]} != ${kLimitInfo[limit].default}`\n      );\n    }\n\n    device.destroy();\n  });\n\ng.test('invalid')\n  .desc(\n    `\n    Test that requesting device on an invalid adapter resolves with lost device.\n    - Induce invalid adapter via a device lost from a device.destroy()`\n  )\n  .fn(async t => {\n    const gpu = getGPU();\n    const adapter = await gpu.requestAdapter();\n    assert(adapter !== null);\n\n    {\n      // Request a device and destroy it immediately afterwards.\n      const device = await adapter.requestDevice();\n      assert(device !== null);\n      device.destroy();\n      const lostInfo = await device.lost;\n      t.expect(lostInfo.reason === 'destroyed');\n    }\n\n    // The adapter should now be invalid since a device was lost. Requesting another device should\n    // return an already lost device.\n    const kTimeoutMS = 1000;\n    const device = await adapter.requestDevice();\n    const lost = await raceWithRejectOnTimeout(device.lost, kTimeoutMS, 'device was not lost');\n    t.expect(lost.reason === undefined);\n  });\n\ng.test('features,unknown')\n  .desc(\n    `\n    Test requesting device with an unknown feature.`\n  )\n  .fn(async t => {\n    const gpu = getGPU();\n    const adapter = await gpu.requestAdapter();\n    assert(adapter !== null);\n\n    t.shouldReject(\n      'TypeError',\n      adapter.requestDevice({ requiredFeatures: ['unknown-feature' as GPUFeatureName] })\n    );\n  });\n\ng.test('features,known')\n  .desc(\n    `\n    Test requesting device with all features.\n    - Succeeds with device supporting feature if adapter supports the feature.\n    - Rejects if the adapter does not support the feature.`\n  )\n  .params(u => u.combine('feature', kFeatureNames))\n  .fn(async t => {\n    const { feature } = t.params;\n\n    const gpu = getGPU();\n    const adapter = await gpu.requestAdapter();\n    assert(adapter !== null);\n\n    const promise = adapter.requestDevice({ requiredFeatures: [feature] });\n    if (adapter.features.has(feature)) {\n      const device = await promise;\n      t.expect(device.features.has(feature), 'Device should include the required feature');\n    } else {\n      t.shouldReject('TypeError', promise);\n    }\n  });\n\ng.test('limits,unknown')\n  .desc(\n    `\n    Test that specifying limits that aren't part of the supported limit set causes\n    requestDevice to reject.`\n  )\n  .fn(async t => {\n    const gpu = getGPU();\n    const adapter = await gpu.requestAdapter();\n    assert(adapter !== null);\n\n    const requiredLimits: Record<string, number> = { unknownLimitName: 9000 };\n\n    t.shouldReject('OperationError', adapter.requestDevice({ requiredLimits }));\n  });\n\ng.test('limits,supported')\n  .desc(\n    `\n    Test that each supported limit can be specified with valid values.\n    - Tests each limit with the default values given by the spec\n    - Tests each limit with the supported values given by the adapter`\n  )\n  .params(u =>\n    u.combine('limit', kLimits).beginSubcases().combine('limitValue', ['default', 'adapter'])\n  )\n  .fn(async t => {\n    const { limit, limitValue } = t.params;\n\n    const gpu = getGPU();\n    const adapter = await gpu.requestAdapter();\n    assert(adapter !== null);\n\n    let value: number = -1;\n    switch (limitValue) {\n      case 'default':\n        value = kLimitInfo[limit].default;\n        break;\n      case 'adapter':\n        value = adapter.limits[limit];\n        break;\n    }\n\n    const device = await adapter.requestDevice({ requiredLimits: { [limit]: value } });\n    assert(device !== null);\n    t.expect(\n      device.limits[limit] === value,\n      'Devices reported limit should match the required limit'\n    );\n    device.destroy();\n  });\n\ng.test('limit,better_than_supported')\n  .desc(\n    `\n    Test that specifying a better limit than what the adapter supports causes requestDevice to\n    reject.\n    - Tests each limit\n    - Tests requesting better limits by various amounts`\n  )\n  .params(u =>\n    u\n      .combine('limit', kLimits)\n      .beginSubcases()\n      .expandWithParams(p => {\n        switch (kLimitInfo[p.limit].class) {\n          case 'maximum':\n            return [\n              { mul: 1, add: 1 },\n              { mul: 1, add: 100 },\n            ];\n          case 'alignment':\n            return [\n              { mul: 1, add: -1 },\n              { mul: 1 / 2, add: 0 },\n              { mul: 1 / 1024, add: 0 },\n            ];\n        }\n      })\n  )\n  .fn(async t => {\n    const { limit, mul, add } = t.params;\n\n    const gpu = getGPU();\n    const adapter = await gpu.requestAdapter();\n    assert(adapter !== null);\n\n    const value = adapter.limits[limit] * mul + add;\n    const requiredLimits = {\n      [limit]: clamp(value, { min: 0, max: kLimitInfo[limit].maximumValue }),\n    };\n\n    t.shouldReject('OperationError', adapter.requestDevice({ requiredLimits }));\n  });\n\ng.test('limit,worse_than_default')\n  .desc(\n    `\n    Test that specifying a worse limit than the default values required by the spec cause the value\n    to clamp.\n    - Tests each limit\n    - Tests requesting worse limits by various amounts`\n  )\n  .params(u =>\n    u\n      .combine('limit', kLimits)\n      .beginSubcases()\n      .expandWithParams(p => {\n        switch (kLimitInfo[p.limit].class) {\n          case 'maximum':\n            return [\n              { mul: 1, add: -1 },\n              { mul: 1, add: -100 },\n            ];\n          case 'alignment':\n            return [\n              { mul: 1, add: 1 },\n              { mul: 2, add: 0 },\n              { mul: 1024, add: 0 },\n            ];\n        }\n      })\n  )\n  .fn(async t => {\n    const { limit, mul, add } = t.params;\n\n    const gpu = getGPU();\n    const adapter = await gpu.requestAdapter();\n    assert(adapter !== null);\n\n    const value = kLimitInfo[limit].default * mul + add;\n    const requiredLimits = {\n      [limit]: clamp(value, { min: 0, max: kLimitInfo[limit].maximumValue }),\n    };\n\n    let success;\n    switch (kLimitInfo[limit].class) {\n      case 'alignment':\n        success = isPowerOfTwo(value);\n        break;\n      case 'maximum':\n        success = true;\n        break;\n    }\n\n    if (success) {\n      const device = await adapter.requestDevice({ requiredLimits });\n      assert(device !== null);\n      t.expect(\n        device.limits[limit] === kLimitInfo[limit].default,\n        'Devices reported limit should match the default limit'\n      );\n      device.destroy();\n    } else {\n      t.shouldReject('OperationError', adapter.requestDevice({ requiredLimits }));\n    }\n  });\n"],"file":"requestDevice.spec.js"}