{"version":3,"sources":["../../../../../src/webgpu/api/operation/adapter/requestDevice_limits.spec.ts"],"names":["description","Fixture","makeTestGroup","keysOf","getGPU","assert","DefaultLimits","LimitMaximum","clamp","kLimitTypes","g","test","desc","fn","t","adapter","navigator","gpu","requestAdapter","requiredLimits","unknownLimitName","shouldReject","requestDevice","params","u","combine","unless","p","limit","beginSubcases","limitValue","value","limits","device","expect","over","mult","startsWith","min","max","under"],"mappings":"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","sourcesContent":["export const description = `\nTests passing various requiredLimits to GPUAdapter.requestDevice.\n`;\n\nimport { Fixture } from '../../../../common/framework/fixture.js';\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../common/util/data_tables.js';\nimport { getGPU } from '../../../../common/util/navigator_gpu.js';\nimport { assert } from '../../../../common/util/util.js';\nimport { DefaultLimits, LimitMaximum } from '../../../constants.js';\nimport { clamp } from '../../../util/math.js';\n\nconst kLimitTypes = keysOf(DefaultLimits);\n\nexport const g = makeTestGroup(Fixture);\n\ng.test('unknown_limits')\n  .desc(\n    `\n    Test that specifiying limits that aren't part of the supported limit set causes\n    requestDevice to reject.`\n  )\n  .fn(async t => {\n    const adapter = await navigator.gpu.requestAdapter();\n    assert(adapter !== null);\n\n    const requiredLimits: Record<string, number> = { unknownLimitName: 9000 };\n\n    t.shouldReject('OperationError', adapter.requestDevice({ requiredLimits }));\n  });\n\ng.test('supported_limits')\n  .desc(\n    `\n    Test that each supported limit can be specified with valid values.\n    - Tests each limit with the default values given by the spec\n    - Tests each limit with the supported values given by the adapter`\n  )\n  .params(u =>\n    u\n      .combine('limit', kLimitTypes)\n      .unless(p => typeof DefaultLimits[p.limit] !== 'number')\n      .beginSubcases()\n      .combine('limitValue', ['default', 'adapter'])\n  )\n  .fn(async t => {\n    const { limit, limitValue } = t.params;\n\n    const gpu = getGPU();\n    const adapter = await gpu.requestAdapter();\n    assert(adapter !== null);\n\n    let value: number = -1;\n    switch (limitValue) {\n      case 'default':\n        value = DefaultLimits[limit] as number;\n        break;\n      case 'adapter':\n        value = adapter.limits[limit] as number;\n        break;\n    }\n\n    const device = await adapter.requestDevice({ requiredLimits: { [limit]: value } });\n    assert(device !== null);\n    t.expect(\n      device.limits[limit] === value,\n      'Devices reported limit should match the required limit'\n    );\n  });\n\ng.test('better_than_supported')\n  .desc(\n    `\n    Test that specifying a better limit than what the adapter supports causes requestDevice to\n    reject.\n    - Tests each limit\n    - Tests requesting better limits by various amounts`\n  )\n  .params(u =>\n    u\n      .combine('limit', kLimitTypes)\n      .unless(p => typeof DefaultLimits[p.limit] !== 'number')\n      .beginSubcases()\n      .combine('over', [1, 32, 65535])\n  )\n  .fn(async t => {\n    const { limit, over } = t.params;\n\n    const gpu = getGPU();\n    const adapter = await gpu.requestAdapter();\n    assert(adapter !== null);\n\n    const mult = limit.startsWith('min') ? -1 : 1;\n\n    const requiredLimits = {\n      [limit]: clamp(adapter.limits[limit] + over * mult, {\n        min: 0,\n        max: LimitMaximum[limit],\n      }),\n    };\n\n    t.shouldReject('OperationError', adapter.requestDevice({ requiredLimits }));\n  });\n\ng.test('worse_than_default')\n  .desc(\n    `\n    Test that specifying a worse limit than the default values required by the spec cause the value\n    to clamp.\n    - Tests each limit\n    - Tests requesting worse limits by various amounts`\n  )\n  .params(u =>\n    u\n      .combine('limit', kLimitTypes)\n      .unless(p => typeof DefaultLimits[p.limit] !== 'number')\n      .beginSubcases()\n      .combine('under', [1, 32, 65535])\n  )\n  .fn(async t => {\n    const { limit, under } = t.params;\n\n    const gpu = getGPU();\n    const adapter = await gpu.requestAdapter();\n    assert(adapter !== null);\n\n    const mult = limit.startsWith('min') ? -1 : 1;\n\n    const requiredLimits = {\n      [limit]: clamp(DefaultLimits[limit] - under * mult, {\n        min: 0,\n        max: LimitMaximum[limit],\n      }),\n    };\n\n    const device = await adapter.requestDevice({ requiredLimits });\n    assert(device !== null);\n    t.expect(\n      device.limits[limit] === DefaultLimits[limit],\n      'Devices reported limit should match the default limit'\n    );\n  });\n"],"file":"requestDevice_limits.spec.js"}