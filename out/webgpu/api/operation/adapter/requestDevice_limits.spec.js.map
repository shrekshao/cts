{"version":3,"sources":["../../../../../src/webgpu/api/operation/adapter/requestDevice_limits.spec.ts"],"names":["description","Fixture","makeTestGroup","getGPU","assert","kLimitInfo","kLimits","clamp","isPowerOfTwo","g","test","desc","fn","t","gpu","adapter","requestAdapter","requiredLimits","unknownLimitName","shouldReject","requestDevice","params","u","combine","beginSubcases","limit","limitValue","value","default","limits","device","expect","destroy","expandWithParams","p","class","mul","add","min","max","maximumValue","success"],"mappings":"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","sourcesContent":["export const description = `\nTests passing various requiredLimits to GPUAdapter.requestDevice.\n`;\n\nimport { Fixture } from '../../../../common/framework/fixture.js';\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { getGPU } from '../../../../common/util/navigator_gpu.js';\nimport { assert } from '../../../../common/util/util.js';\nimport { kLimitInfo, kLimits } from '../../../capability_info.js';\nimport { clamp, isPowerOfTwo } from '../../../util/math.js';\n\nexport const g = makeTestGroup(Fixture);\n\ng.test('unknown_limits')\n  .desc(\n    `\n    Test that specifying limits that aren't part of the supported limit set causes\n    requestDevice to reject.`\n  )\n  .fn(async t => {\n    const gpu = getGPU();\n    const adapter = await gpu.requestAdapter();\n    assert(adapter !== null);\n\n    const requiredLimits: Record<string, number> = { unknownLimitName: 9000 };\n\n    t.shouldReject('OperationError', adapter.requestDevice({ requiredLimits }));\n  });\n\ng.test('supported_limits')\n  .desc(\n    `\n    Test that each supported limit can be specified with valid values.\n    - Tests each limit with the default values given by the spec\n    - Tests each limit with the supported values given by the adapter`\n  )\n  .params(u =>\n    u.combine('limit', kLimits).beginSubcases().combine('limitValue', ['default', 'adapter'])\n  )\n  .fn(async t => {\n    const { limit, limitValue } = t.params;\n\n    const gpu = getGPU();\n    const adapter = await gpu.requestAdapter();\n    assert(adapter !== null);\n\n    let value: number = -1;\n    switch (limitValue) {\n      case 'default':\n        value = kLimitInfo[limit].default;\n        break;\n      case 'adapter':\n        value = adapter.limits[limit];\n        break;\n    }\n\n    const device = await adapter.requestDevice({ requiredLimits: { [limit]: value } });\n    assert(device !== null);\n    t.expect(\n      device.limits[limit] === value,\n      'Devices reported limit should match the required limit'\n    );\n    // Explicitly destroy the device so that the tests don't have to wait for garbage collection to\n    // clean it up. Otherwise native resource limits may be hit due to so many devices being created\n    // in a short timeframe.\n    device.destroy();\n  });\n\ng.test('better_than_supported')\n  .desc(\n    `\n    Test that specifying a better limit than what the adapter supports causes requestDevice to\n    reject.\n    - Tests each limit\n    - Tests requesting better limits by various amounts`\n  )\n  .params(u =>\n    u\n      .combine('limit', kLimits)\n      .beginSubcases()\n      .expandWithParams(p => {\n        switch (kLimitInfo[p.limit].class) {\n          case 'maximum':\n            return [\n              { mul: 1, add: 1 },\n              { mul: 1, add: 100 },\n            ];\n          case 'alignment':\n            return [\n              { mul: 1, add: -1 },\n              { mul: 1 / 2, add: 0 },\n              { mul: 1 / 1024, add: 0 },\n            ];\n        }\n      })\n  )\n  .fn(async t => {\n    const { limit, mul, add } = t.params;\n\n    const gpu = getGPU();\n    const adapter = await gpu.requestAdapter();\n    assert(adapter !== null);\n\n    const value = adapter.limits[limit] * mul + add;\n    const requiredLimits = {\n      [limit]: clamp(value, { min: 0, max: kLimitInfo[limit].maximumValue }),\n    };\n\n    t.shouldReject('OperationError', adapter.requestDevice({ requiredLimits }));\n  });\n\ng.test('worse_than_default')\n  .desc(\n    `\n    Test that specifying a worse limit than the default values required by the spec cause the value\n    to clamp.\n    - Tests each limit\n    - Tests requesting worse limits by various amounts`\n  )\n  .params(u =>\n    u\n      .combine('limit', kLimits)\n      .beginSubcases()\n      .expandWithParams(p => {\n        switch (kLimitInfo[p.limit].class) {\n          case 'maximum':\n            return [\n              { mul: 1, add: -1 },\n              { mul: 1, add: -100 },\n            ];\n          case 'alignment':\n            return [\n              { mul: 1, add: 1 },\n              { mul: 2, add: 0 },\n              { mul: 1024, add: 0 },\n            ];\n        }\n      })\n  )\n  .fn(async t => {\n    const { limit, mul, add } = t.params;\n\n    const gpu = getGPU();\n    const adapter = await gpu.requestAdapter();\n    assert(adapter !== null);\n\n    const value = kLimitInfo[limit].default * mul + add;\n    const requiredLimits = {\n      [limit]: clamp(value, { min: 0, max: kLimitInfo[limit].maximumValue }),\n    };\n\n    let success;\n    switch (kLimitInfo[limit].class) {\n      case 'alignment':\n        success = isPowerOfTwo(value);\n        break;\n      case 'maximum':\n        success = true;\n        break;\n    }\n\n    if (success) {\n      const device = await adapter.requestDevice({ requiredLimits });\n      assert(device !== null);\n      t.expect(\n        device.limits[limit] === kLimitInfo[limit].default,\n        'Devices reported limit should match the default limit'\n      );\n      // Explicitly destroy the device so that the tests don't have to wait for garbage collection\n      // to clean it up. Otherwise native resource limits may be hit due to so many devices being\n      // created in a short timeframe.\n      device.destroy();\n    } else {\n      t.shouldReject('OperationError', adapter.requestDevice({ requiredLimits }));\n    }\n  });\n"],"file":"requestDevice_limits.spec.js"}