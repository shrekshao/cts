{"version":3,"sources":["../../../../../src/webgpu/api/operation/memory_sync/operation_context_helper.ts"],"names":["assert","unreachable","kOperationBoundaries","kOperationContexts","combineContexts","as","bs","result","a","b","push","queueContexts","commandBufferContexts","filter","c","kBoundaryInfo","contexts","OperationContextHelper","currentContext","commandBuffers","renderBundles","kTextureSize","kTextureFormat","constructor","t","device","queue","ensureSubmit","ensureContext","flushCommandBuffers","popContext","commandEncoder","undefined","commandBuffer","finish","computePassEncoder","end","renderPassEncoder","renderBundleEncoder","renderBundle","makeDummyAttachment","texture","trackForCleanup","createTexture","format","size","usage","GPUTextureUsage","RENDER_ATTACHMENT","view","createView","loadOp","storeOp","context","ancestorContext","Math","min","indexOf","flushRenderBundles","GPURenderBundle","createCommandEncoder","beginComputePass","beginRenderPass","colorAttachments","createRenderBundleEncoder","colorFormats","length","executeBundles","submit","ensureBoundary","boundary"],"mappings":"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","sourcesContent":["import { assert, unreachable } from '../../../../common/util/util.js';\nimport { EncodableTextureFormat } from '../../../capability_info.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\n/**\n * Boundary between the first operation, and the second operation.\n */\nexport const kOperationBoundaries = [\n  'queue-op', // Operations are performed in different queue operations (submit, writeTexture).\n  'command-buffer', // Operations are in different command buffers.\n  'pass', // Operations are in different passes.\n  'execute-bundles', // Operations are in different executeBundles(...) calls\n  'render-bundle', // Operations are in different render bundles.\n  'dispatch', // Operations are in different dispatches.\n  'draw', // Operations are in different draws.\n] as const;\nexport type OperationBoundary = typeof kOperationBoundaries[number];\n\n/**\n * Context a particular operation is permitted in.\n * These contexts should be sorted such that the first is the most top-level\n * context, and the last is most nested (inside a render bundle, in a render pass, ...).\n */\nexport const kOperationContexts = [\n  'queue', // Operation occurs on the GPUQueue object\n  'command-encoder', // Operation may be encoded in a GPUCommandEncoder.\n  'compute-pass-encoder', // Operation may be encoded in a GPUComputePassEncoder.\n  'render-pass-encoder', // Operation may be encoded in a GPURenderPassEncoder.\n  'render-bundle-encoder', // Operation may be encoded in a GPURenderBundleEncoder.\n] as const;\nexport type OperationContext = typeof kOperationContexts[number];\n\ninterface BoundaryInfo {\n  readonly contexts: [OperationContext, OperationContext][];\n  // Add fields as needed\n}\n\nfunction combineContexts(\n  as: readonly OperationContext[],\n  bs: readonly OperationContext[]\n): [OperationContext, OperationContext][] {\n  const result: [OperationContext, OperationContext][] = [];\n  for (const a of as) {\n    for (const b of bs) {\n      result.push([a, b]);\n    }\n  }\n  return result;\n}\n\nconst queueContexts = combineContexts(kOperationContexts, kOperationContexts);\nconst commandBufferContexts = combineContexts(\n  kOperationContexts.filter(c => c !== 'queue'),\n  kOperationContexts.filter(c => c !== 'queue')\n);\n\n/**\n * Mapping of OperationBoundary => to a set of OperationContext pairs.\n * The boundary is capable of separating operations in those two contexts.\n */\nexport const kBoundaryInfo: {\n  readonly [k in OperationBoundary]: BoundaryInfo;\n} = /* prettier-ignore */ {\n  'queue-op': {\n    contexts: queueContexts,\n  },\n  'command-buffer': {\n    contexts: commandBufferContexts,\n  },\n  'pass': {\n    contexts: [\n      ['compute-pass-encoder', 'compute-pass-encoder'],\n      ['compute-pass-encoder', 'render-pass-encoder'],\n      ['render-pass-encoder', 'compute-pass-encoder'],\n      ['render-pass-encoder', 'render-pass-encoder'],\n      ['render-bundle-encoder', 'render-pass-encoder'],\n      ['render-pass-encoder', 'render-bundle-encoder'],\n      ['render-bundle-encoder', 'render-bundle-encoder'],\n    ],\n  },\n  'execute-bundles': {\n    contexts: [\n      ['render-bundle-encoder', 'render-bundle-encoder'],\n    ]\n  },\n  'render-bundle': {\n    contexts: [\n      ['render-bundle-encoder', 'render-pass-encoder'],\n      ['render-pass-encoder', 'render-bundle-encoder'],\n      ['render-bundle-encoder', 'render-bundle-encoder'],\n    ],\n  },\n  'dispatch': {\n    contexts: [\n      ['compute-pass-encoder', 'compute-pass-encoder'],\n    ],\n  },\n  'draw': {\n    contexts: [\n      ['render-pass-encoder', 'render-pass-encoder'],\n      ['render-bundle-encoder', 'render-pass-encoder'],\n      ['render-pass-encoder', 'render-bundle-encoder'],\n    ],\n  },\n};\n\nexport class OperationContextHelper {\n  // We start at the queue context which is top-level.\n  protected currentContext: OperationContext = 'queue';\n\n  // Set based on the current context.\n  queue: GPUQueue;\n  commandEncoder?: GPUCommandEncoder;\n  computePassEncoder?: GPUComputePassEncoder;\n  renderPassEncoder?: GPURenderPassEncoder;\n  renderBundleEncoder?: GPURenderBundleEncoder;\n\n  protected t: GPUTest;\n  protected device: GPUDevice;\n\n  protected commandBuffers: GPUCommandBuffer[] = [];\n  protected renderBundles: GPURenderBundle[] = [];\n\n  public readonly kTextureSize = [4, 4] as const;\n  public readonly kTextureFormat: EncodableTextureFormat = 'rgba8unorm';\n\n  constructor(t: GPUTest) {\n    this.t = t;\n    this.device = t.device;\n    this.queue = t.device.queue;\n  }\n\n  // Ensure that all encoded commands are finished and submitted.\n  ensureSubmit() {\n    this.ensureContext('queue');\n    this.flushCommandBuffers();\n  }\n\n  private popContext(): GPURenderBundle | GPUCommandBuffer | null {\n    switch (this.currentContext) {\n      case 'queue':\n        unreachable();\n        break;\n      case 'command-encoder': {\n        assert(this.commandEncoder !== undefined);\n        const commandBuffer = this.commandEncoder.finish();\n        this.commandEncoder = undefined;\n        this.currentContext = 'queue';\n        return commandBuffer;\n      }\n      case 'compute-pass-encoder':\n        assert(this.computePassEncoder !== undefined);\n        this.computePassEncoder.end();\n        this.computePassEncoder = undefined;\n        this.currentContext = 'command-encoder';\n        break;\n      case 'render-pass-encoder':\n        assert(this.renderPassEncoder !== undefined);\n        this.renderPassEncoder.end();\n        this.renderPassEncoder = undefined;\n        this.currentContext = 'command-encoder';\n        break;\n      case 'render-bundle-encoder': {\n        assert(this.renderBundleEncoder !== undefined);\n        const renderBundle = this.renderBundleEncoder.finish();\n        this.renderBundleEncoder = undefined;\n        this.currentContext = 'render-pass-encoder';\n        return renderBundle;\n      }\n    }\n    return null;\n  }\n\n  private makeDummyAttachment(): GPURenderPassColorAttachment {\n    const texture = this.t.trackForCleanup(\n      this.device.createTexture({\n        format: this.kTextureFormat,\n        size: this.kTextureSize,\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      })\n    );\n    return {\n      view: texture.createView(),\n      loadOp: 'load',\n      storeOp: 'store',\n    };\n  }\n\n  ensureContext(context: OperationContext) {\n    // Find the common ancestor. So we can transition from currentContext -> context.\n    const ancestorContext =\n      kOperationContexts[\n        Math.min(\n          kOperationContexts.indexOf(context),\n          kOperationContexts.indexOf(this.currentContext)\n        )\n      ];\n\n    // Pop the context until we're at the common ancestor.\n    while (this.currentContext !== ancestorContext) {\n      // About to pop the render pass encoder. Execute any outstanding render bundles.\n      if (this.currentContext === 'render-pass-encoder') {\n        this.flushRenderBundles();\n      }\n\n      const result = this.popContext();\n      if (result) {\n        if (result instanceof GPURenderBundle) {\n          this.renderBundles.push(result);\n        } else {\n          this.commandBuffers.push(result);\n        }\n      }\n    }\n\n    if (this.currentContext === context) {\n      return;\n    }\n\n    switch (context) {\n      case 'queue':\n        unreachable();\n        break;\n      case 'command-encoder':\n        assert(this.currentContext === 'queue');\n        this.commandEncoder = this.device.createCommandEncoder();\n        break;\n      case 'compute-pass-encoder':\n        switch (this.currentContext) {\n          case 'queue':\n            this.commandEncoder = this.device.createCommandEncoder();\n          // fallthrough\n          case 'command-encoder':\n            assert(this.commandEncoder !== undefined);\n            this.computePassEncoder = this.commandEncoder.beginComputePass();\n            break;\n          case 'compute-pass-encoder':\n          case 'render-bundle-encoder':\n          case 'render-pass-encoder':\n            unreachable();\n        }\n        break;\n      case 'render-pass-encoder':\n        switch (this.currentContext) {\n          case 'queue':\n            this.commandEncoder = this.device.createCommandEncoder();\n          // fallthrough\n          case 'command-encoder':\n            assert(this.commandEncoder !== undefined);\n            this.renderPassEncoder = this.commandEncoder.beginRenderPass({\n              colorAttachments: [this.makeDummyAttachment()],\n            });\n            break;\n          case 'render-pass-encoder':\n          case 'render-bundle-encoder':\n          case 'compute-pass-encoder':\n            unreachable();\n        }\n        break;\n      case 'render-bundle-encoder':\n        switch (this.currentContext) {\n          case 'queue':\n            this.commandEncoder = this.device.createCommandEncoder();\n          // fallthrough\n          case 'command-encoder':\n            assert(this.commandEncoder !== undefined);\n            this.renderPassEncoder = this.commandEncoder.beginRenderPass({\n              colorAttachments: [this.makeDummyAttachment()],\n            });\n          // fallthrough\n          case 'render-pass-encoder':\n            this.renderBundleEncoder = this.device.createRenderBundleEncoder({\n              colorFormats: [this.kTextureFormat],\n            });\n            break;\n          case 'render-bundle-encoder':\n          case 'compute-pass-encoder':\n            unreachable();\n        }\n        break;\n    }\n    this.currentContext = context;\n  }\n\n  private flushRenderBundles() {\n    assert(this.renderPassEncoder !== undefined);\n    if (this.renderBundles.length) {\n      this.renderPassEncoder.executeBundles(this.renderBundles);\n      this.renderBundles = [];\n    }\n  }\n\n  private flushCommandBuffers() {\n    if (this.commandBuffers.length) {\n      this.queue.submit(this.commandBuffers);\n      this.commandBuffers = [];\n    }\n  }\n\n  ensureBoundary(boundary: OperationBoundary) {\n    switch (boundary) {\n      case 'command-buffer':\n        this.ensureContext('queue');\n        break;\n      case 'queue-op':\n        this.ensureContext('queue');\n        // Submit any GPUCommandBuffers so the next one is in a separate submit.\n        this.flushCommandBuffers();\n        break;\n      case 'dispatch':\n        // Nothing to do to separate dispatches.\n        assert(this.currentContext === 'compute-pass-encoder');\n        break;\n      case 'draw':\n        // Nothing to do to separate draws.\n        assert(\n          this.currentContext === 'render-pass-encoder' ||\n            this.currentContext === 'render-bundle-encoder'\n        );\n        break;\n      case 'pass':\n        this.ensureContext('command-encoder');\n        break;\n      case 'render-bundle':\n        this.ensureContext('render-pass-encoder');\n        break;\n      case 'execute-bundles':\n        this.ensureContext('render-pass-encoder');\n        // Execute any GPURenderBundles so the next one is in a separate executeBundles.\n        this.flushRenderBundles();\n        break;\n    }\n  }\n}\n"],"file":"operation_context_helper.js"}