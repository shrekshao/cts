{"version":3,"sources":["../../../../../../src/webgpu/api/operation/memory_sync/texture/texture_sync_test.ts"],"names":["GPUConst","kOperationBoundaries","kOperationContexts","combineContexts","as","bs","result","a","b","push","queueContexts","commandBufferContexts","filter","c","kBoundaryInfo","contexts","kAllWriteOps","kAllReadOps","kOpInfo","readUsage","writeUsage","TextureUsage","COPY_DST","COPY_SRC","STORAGE","SAMPLED","RENDER_ATTACHMENT","checkOpsValidForContext","ops","context","valid","includes","checkImpl","op1","op2"],"mappings":"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","sourcesContent":["import { GPUConst } from '../../../../constants.js';\n\n/**\n * Boundary between the first operation, and the second operation.\n */\nexport const kOperationBoundaries = [\n  'queue-op', // Operations are performed in different queue operations (submit, writeTexture).\n  'command-buffer', // Operations are in different command buffers.\n  'pass', // Operations are in different passes.\n  'execute-bundles', // Operations are in different executeBundles(...) calls\n  'render-bundle', // Operations are in different render bundles.\n  'dispatch', // Operations are in different dispatches.\n  'draw', // Operations are in different draws.\n] as const;\nexport type OperationBoundary = typeof kOperationBoundaries[number];\n\n/**\n * Context a particular operation is permitted in.\n * These contexts should be sorted such that the first is the most top-level\n * context, and the last is most nested (inside a render bundle, in a render pass, ...).\n */\nexport const kOperationContexts = [\n  'queue', // Operation occurs on the GPUQueue object\n  'command-encoder', // Operation may be encoded in a GPUCommandEncoder.\n  'compute-pass-encoder', // Operation may be encoded in a GPUComputePassEncoder.\n  'render-pass-encoder', // Operation may be encoded in a GPURenderPassEncoder.\n  'render-bundle-encoder', // Operation may be encoded in a GPURenderBundleEncoder.\n] as const;\nexport type OperationContext = typeof kOperationContexts[number];\n\ninterface BoundaryInfo {\n  readonly contexts: [OperationContext, OperationContext][];\n  // Add fields as needed\n}\n\nfunction combineContexts(\n  as: readonly OperationContext[],\n  bs: readonly OperationContext[]\n): [OperationContext, OperationContext][] {\n  const result: [OperationContext, OperationContext][] = [];\n  for (const a of as) {\n    for (const b of bs) {\n      result.push([a, b]);\n    }\n  }\n  return result;\n}\n\nconst queueContexts = combineContexts(kOperationContexts, kOperationContexts);\nconst commandBufferContexts = combineContexts(\n  kOperationContexts.filter(c => c !== 'queue'),\n  kOperationContexts.filter(c => c !== 'queue')\n);\n\n/**\n * Mapping of OperationBoundary => to a set of OperationContext pairs.\n * The boundary is capable of separating operations in those two contexts.\n */\nexport const kBoundaryInfo: {\n  readonly [k in OperationBoundary]: BoundaryInfo;\n} = /* prettier-ignore */ {\n  'queue-op': {\n    contexts: queueContexts,\n  },\n  'command-buffer': {\n    contexts: commandBufferContexts,\n  },\n  'pass': {\n    contexts: [\n      ['compute-pass-encoder', 'compute-pass-encoder'],\n      ['compute-pass-encoder', 'render-pass-encoder'],\n      ['render-pass-encoder', 'compute-pass-encoder'],\n      ['render-pass-encoder', 'render-pass-encoder'],\n      ['render-bundle-encoder', 'render-pass-encoder'],\n      ['render-pass-encoder', 'render-bundle-encoder'],\n      ['render-bundle-encoder', 'render-bundle-encoder'],\n    ],\n  },\n  'execute-bundles': {\n    contexts: [\n      ['render-bundle-encoder', 'render-bundle-encoder'],\n    ]\n  },\n  'render-bundle': {\n    contexts: [\n      ['render-bundle-encoder', 'render-pass-encoder'],\n      ['render-pass-encoder', 'render-bundle-encoder'],\n      ['render-bundle-encoder', 'render-bundle-encoder'],\n    ],\n  },\n  'dispatch': {\n    contexts: [\n      ['compute-pass-encoder', 'compute-pass-encoder'],\n    ],\n  },\n  'draw': {\n    contexts: [\n      ['render-pass-encoder', 'render-pass-encoder'],\n      ['render-bundle-encoder', 'render-pass-encoder'],\n    ],\n  },\n};\n\nexport const kAllWriteOps = [\n  'write-texture',\n  'b2t-copy',\n  't2t-copy',\n  'storage',\n  'attachment-store',\n  'attachment-resolve',\n] as const;\nexport type WriteOp = typeof kAllWriteOps[number];\n\nexport const kAllReadOps = ['t2b-copy', 't2t-copy', 'sample'] as const;\nexport type ReadOp = typeof kAllReadOps[number];\n\nexport type Op = ReadOp | WriteOp;\n\ninterface OpInfo {\n  readonly contexts: OperationContext[];\n  readonly readUsage: GPUTextureUsageFlags;\n  readonly writeUsage: GPUTextureUsageFlags;\n  // Add fields as needed\n}\n\n/**\n * Mapping of Op to the OperationContext(s) it is valid in\n */\nexport const kOpInfo: {\n  readonly [k in Op]: OpInfo;\n} = /* prettier-ignore */ {\n  'write-texture': {\n    contexts: [ 'queue' ],\n    readUsage: 0,\n    writeUsage: GPUConst.TextureUsage.COPY_DST,\n  },\n  'b2t-copy': {\n    contexts: [ 'command-encoder' ],\n    readUsage: 0,\n    writeUsage: GPUConst.TextureUsage.COPY_DST,\n  },\n  't2t-copy': {\n    contexts: [ 'command-encoder' ],\n    readUsage: GPUConst.TextureUsage.COPY_SRC,\n    writeUsage: GPUConst.TextureUsage.COPY_DST,\n  },\n  't2b-copy': {\n    contexts: [ 'command-encoder' ],\n    readUsage: GPUConst.TextureUsage.COPY_SRC,\n    writeUsage: 0,\n  },\n  'storage': {\n    contexts: [ 'compute-pass-encoder', 'render-pass-encoder', 'render-bundle-encoder' ],\n    readUsage: 0,\n    writeUsage: GPUConst.TextureUsage.STORAGE,\n  },\n  'sample': {\n    contexts: [ 'compute-pass-encoder', 'render-pass-encoder', 'render-bundle-encoder' ],\n    readUsage: GPUConst.TextureUsage.SAMPLED,\n    writeUsage: 0,\n  },\n  'attachment-store': {\n    contexts: [ 'command-encoder' ],\n    readUsage: 0,\n    writeUsage: GPUConst.TextureUsage.RENDER_ATTACHMENT,\n  },\n  'attachment-resolve': {\n    contexts: [ 'command-encoder' ],\n    readUsage: 0,\n    writeUsage: GPUConst.TextureUsage.RENDER_ATTACHMENT,\n  },\n};\n\nexport function checkOpsValidForContext(\n  ops: [Op, Op],\n  context: [OperationContext, OperationContext]\n) {\n  const valid =\n    kOpInfo[ops[0]].contexts.includes(context[0]) && kOpInfo[ops[1]].contexts.includes(context[1]);\n  if (!valid) return false;\n\n  if (\n    context[0] === 'render-bundle-encoder' ||\n    context[0] === 'render-pass-encoder' ||\n    context[1] === 'render-bundle-encoder' ||\n    context[1] === 'render-pass-encoder'\n  ) {\n    // In a render pass, it is invalid to use a resource as both writable and another usage.\n    // Also, for storage+storage usage, the application is opting into racy behavior.\n    // The storage+storage case is also skipped as the results cannot be reliably tested.\n    const checkImpl = (op1: Op, op2: Op) => {\n      switch (op1) {\n        case 'attachment-resolve':\n        case 'attachment-store':\n        case 'storage':\n          switch (op2) {\n            case 'attachment-resolve':\n            case 'attachment-store':\n            case 'storage':\n            case 'sample':\n              // Write+other, or racy.\n              return false;\n            case 'b2t-copy':\n            case 't2b-copy':\n            case 't2t-copy':\n            case 'write-texture':\n              // These don't occur in a render pass.\n              return true;\n          }\n          break;\n        case 'b2t-copy':\n        case 'sample':\n        case 't2b-copy':\n        case 't2t-copy':\n        case 'write-texture':\n          // These are not write usages, or don't occur in a render pass.\n          break;\n      }\n      return true;\n    };\n    return checkImpl(ops[0], ops[1]) && checkImpl(ops[1], ops[0]);\n  }\n  return true;\n}\n"],"file":"texture_sync_test.js"}