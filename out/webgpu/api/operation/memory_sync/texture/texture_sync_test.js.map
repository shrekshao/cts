{"version":3,"sources":["../../../../../../src/webgpu/api/operation/memory_sync/texture/texture_sync_test.ts"],"names":["GPUConst","kAllWriteOps","kAllReadOps","kOpInfo","contexts","readUsage","writeUsage","TextureUsage","COPY_DST","COPY_SRC","STORAGE","SAMPLED","RENDER_ATTACHMENT","checkOpsValidForContext","ops","context","valid","includes","checkImpl","op1","op2"],"mappings":"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","sourcesContent":["import { GPUConst } from '../../../../constants.js';\nimport { OperationContext } from '../operation_context_helper.js';\n\nexport const kAllWriteOps = [\n  'write-texture',\n  'b2t-copy',\n  't2t-copy',\n  'storage',\n  'attachment-store',\n  'attachment-resolve',\n] as const;\nexport type WriteOp = typeof kAllWriteOps[number];\n\nexport const kAllReadOps = ['t2b-copy', 't2t-copy', 'sample'] as const;\nexport type ReadOp = typeof kAllReadOps[number];\n\nexport type Op = ReadOp | WriteOp;\n\ninterface OpInfo {\n  readonly contexts: OperationContext[];\n  readonly readUsage: GPUTextureUsageFlags;\n  readonly writeUsage: GPUTextureUsageFlags;\n  // Add fields as needed\n}\n\n/**\n * Mapping of Op to the OperationContext(s) it is valid in\n */\nexport const kOpInfo: {\n  readonly [k in Op]: OpInfo;\n} = /* prettier-ignore */ {\n  'write-texture': {\n    contexts: [ 'queue' ],\n    readUsage: 0,\n    writeUsage: GPUConst.TextureUsage.COPY_DST,\n  },\n  'b2t-copy': {\n    contexts: [ 'command-encoder' ],\n    readUsage: 0,\n    writeUsage: GPUConst.TextureUsage.COPY_DST,\n  },\n  't2t-copy': {\n    contexts: [ 'command-encoder' ],\n    readUsage: GPUConst.TextureUsage.COPY_SRC,\n    writeUsage: GPUConst.TextureUsage.COPY_DST,\n  },\n  't2b-copy': {\n    contexts: [ 'command-encoder' ],\n    readUsage: GPUConst.TextureUsage.COPY_SRC,\n    writeUsage: 0,\n  },\n  'storage': {\n    contexts: [ 'compute-pass-encoder', 'render-pass-encoder', 'render-bundle-encoder' ],\n    readUsage: 0,\n    writeUsage: GPUConst.TextureUsage.STORAGE,\n  },\n  'sample': {\n    contexts: [ 'compute-pass-encoder', 'render-pass-encoder', 'render-bundle-encoder' ],\n    readUsage: GPUConst.TextureUsage.SAMPLED,\n    writeUsage: 0,\n  },\n  'attachment-store': {\n    contexts: [ 'command-encoder' ],\n    readUsage: 0,\n    writeUsage: GPUConst.TextureUsage.RENDER_ATTACHMENT,\n  },\n  'attachment-resolve': {\n    contexts: [ 'command-encoder' ],\n    readUsage: 0,\n    writeUsage: GPUConst.TextureUsage.RENDER_ATTACHMENT,\n  },\n};\n\nexport function checkOpsValidForContext(\n  ops: [Op, Op],\n  context: [OperationContext, OperationContext]\n) {\n  const valid =\n    kOpInfo[ops[0]].contexts.includes(context[0]) && kOpInfo[ops[1]].contexts.includes(context[1]);\n  if (!valid) return false;\n\n  if (\n    context[0] === 'render-bundle-encoder' ||\n    context[0] === 'render-pass-encoder' ||\n    context[1] === 'render-bundle-encoder' ||\n    context[1] === 'render-pass-encoder'\n  ) {\n    // In a render pass, it is invalid to use a resource as both writable and another usage.\n    // Also, for storage+storage usage, the application is opting into racy behavior.\n    // The storage+storage case is also skipped as the results cannot be reliably tested.\n    const checkImpl = (op1: Op, op2: Op) => {\n      switch (op1) {\n        case 'attachment-resolve':\n        case 'attachment-store':\n        case 'storage':\n          switch (op2) {\n            case 'attachment-resolve':\n            case 'attachment-store':\n            case 'storage':\n            case 'sample':\n              // Write+other, or racy.\n              return false;\n            case 'b2t-copy':\n            case 't2b-copy':\n            case 't2t-copy':\n            case 'write-texture':\n              // These don't occur in a render pass.\n              return true;\n          }\n          break;\n        case 'b2t-copy':\n        case 'sample':\n        case 't2b-copy':\n        case 't2t-copy':\n        case 'write-texture':\n          // These are not write usages, or don't occur in a render pass.\n          break;\n      }\n      return true;\n    };\n    return checkImpl(ops[0], ops[1]) && checkImpl(ops[1], ops[0]);\n  }\n  return true;\n}\n"],"file":"texture_sync_test.js"}