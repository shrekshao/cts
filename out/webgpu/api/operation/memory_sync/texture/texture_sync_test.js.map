{"version":3,"sources":["../../../../../../src/webgpu/api/operation/memory_sync/texture/texture_sync_test.ts"],"names":["kOperationBoundaries","kOperationContexts","combineContexts","as","bs","result","a","b","push","queueContexts","commandBufferContexts","filter","c","kBoundaryInfo","contexts","kAllWriteOps","kAllReadOps","kOpInfo","checkOpsValidForContext","ops","context","indexOf"],"mappings":"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","sourcesContent":["/**\n * Boundary between the first operation, and the second operation.\n */\nexport const kOperationBoundaries = [\n  'queue-op', // Operations are performed in different queue operations (submit, writeTexture).\n  'command-buffer', // Operations are in different command buffers.\n  'pass', // Operations are in different passes.\n  'render-bundle', // Operations are in different render bundles.\n  'dispatch', // Operations are in different dispatches.\n  'draw', // Operations are in different draws.\n] as const;\nexport type OperationBoundary = typeof kOperationBoundaries[number];\n\n/**\n * Context a particular operation is permitted in.\n */\nexport const kOperationContexts = [\n  'queue', // Operation occurs on the GPUQueue object\n  'command-encoder', // Operation may be encoded in a GPUCommandEncoder.\n  'compute-pass-encoder', // Operation may be encoded in a GPUComputePassEncoder.\n  'render-pass-encoder', // Operation may be encoded in a GPURenderPassEncoder.\n  'render-bundle-encoder', // Operation may be encoded in a GPURenderBundleEncoder.\n] as const;\nexport type OperationContext = typeof kOperationContexts[number];\n\ninterface BoundaryInfo {\n  readonly contexts: [OperationContext, OperationContext][];\n  // Add fields as needed\n}\n\nfunction combineContexts(\n  as: readonly OperationContext[],\n  bs: readonly OperationContext[]\n): [OperationContext, OperationContext][] {\n  const result: [OperationContext, OperationContext][] = [];\n  for (const a of as) {\n    for (const b of bs) {\n      result.push([a, b]);\n    }\n  }\n  return result;\n}\n\nconst queueContexts = combineContexts(kOperationContexts, kOperationContexts);\nconst commandBufferContexts = combineContexts(\n  kOperationContexts.filter(c => c !== 'queue'),\n  kOperationContexts.filter(c => c !== 'queue')\n);\n\n/**\n * Mapping of OperationBoundary => to a set of OperationContext pairs.\n * The boundary is capable of separating operations in those two contexts.\n */\nexport const kBoundaryInfo: {\n  readonly [k in OperationBoundary]: BoundaryInfo;\n} = /* prettier-ignore */ {\n  'queue-op': {\n    contexts: queueContexts,\n  },\n  'command-buffer': {\n    contexts: commandBufferContexts,\n  },\n  'pass': {\n    contexts: [\n      ['compute-pass-encoder', 'compute-pass-encoder'],\n      ['compute-pass-encoder', 'render-pass-encoder'],\n      ['render-pass-encoder', 'compute-pass-encoder'],\n      ['render-pass-encoder', 'render-pass-encoder'],\n      ['render-bundle-encoder', 'render-pass-encoder'],\n      ['render-pass-encoder', 'render-bundle-encoder'],\n      ['render-bundle-encoder', 'render-bundle-encoder'],\n    ],\n  },\n  'render-bundle': {\n    contexts: [\n      ['render-bundle-encoder', 'render-pass-encoder'],\n      ['render-pass-encoder', 'render-bundle-encoder'],\n      ['render-bundle-encoder', 'render-bundle-encoder'],\n    ],\n  },\n  'dispatch': {\n    contexts: [\n      ['compute-pass-encoder', 'compute-pass-encoder'],\n    ],\n  },\n  'draw': {\n    contexts: [\n      ['render-pass-encoder', 'render-pass-encoder'],\n      ['render-bundle-encoder', 'render-pass-encoder'],\n    ],\n  },\n};\n\nexport const kAllWriteOps = [\n  'write-texture',\n  'b2t-copy',\n  't2t-copy',\n  'storage',\n  'attachment-store',\n  'attachment-resolve',\n] as const;\nexport type WriteOp = typeof kAllWriteOps[number];\n\nexport const kAllReadOps = [\n  't2b-copy',\n  't2t-copy',\n  'attachment-load',\n  'storage',\n  'sample',\n] as const;\nexport type ReadOp = typeof kAllReadOps[number];\n\nexport type Op = ReadOp | WriteOp;\n\ninterface OpInfo {\n  readonly contexts: OperationContext[];\n  // Add fields as needed\n}\n\n/**\n * Mapping of Op to the OperationContext(s) it is valid in\n */\nconst kOpInfo: {\n  readonly [k in Op]: OpInfo;\n} = /* prettier-ignore */ {\n  'write-texture': { contexts: [ 'queue' ] },\n  'b2t-copy': { contexts: [ 'command-encoder' ] },\n  't2t-copy': { contexts: [ 'command-encoder' ] },\n  't2b-copy': { contexts: [ 'command-encoder' ] },\n  'storage': { contexts: [ 'compute-pass-encoder', 'render-pass-encoder', 'render-bundle-encoder' ] },\n  'sample': { contexts: [ 'compute-pass-encoder', 'render-pass-encoder', 'render-bundle-encoder' ] },\n  'attachment-store': { contexts: [ 'render-pass-encoder' ] },\n  'attachment-resolve': { contexts: [ 'render-pass-encoder' ] },\n  'attachment-load': { contexts: [ 'render-pass-encoder' ] },\n};\n\nexport function checkOpsValidForContext(\n  ops: [Op, Op],\n  context: [OperationContext, OperationContext]\n) {\n  return (\n    kOpInfo[ops[0]].contexts.indexOf(context[0]) !== -1 &&\n    kOpInfo[ops[1]].contexts.indexOf(context[1]) !== -1\n  );\n}\n"],"file":"texture_sync_test.js"}