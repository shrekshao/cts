{"version":3,"sources":["../../../../../../src/webgpu/api/operation/memory_sync/texture/same_subresource.spec.ts"],"names":["description","makeTestGroup","assert","memcpy","unreachable","GPUTest","align","getTextureCopyLayout","kTexelRepresentationInfo","kOperationBoundaries","kBoundaryInfo","kAllReadOps","kAllWriteOps","checkOpsValidForContext","kOpInfo","kOperationContexts","g","fullscreenQuadWGSL","TextureSyncTestHelper","currentContext","commandBuffers","renderBundles","kTextureSize","kTextureFormat","constructor","t","textureCreationParams","device","queue","texture","trackForCleanup","createTexture","size","format","performReadOp","op","in","context","ensureContext","usage","GPUTextureUsage","COPY_SRC","COPY_DST","commandEncoder","undefined","copyTextureToTexture","byteLength","bytesPerRow","buffer","createBuffer","GPUBufferUsage","copyTextureToBuffer","copyBufferToTexture","STORAGE_BINDING","bindGroupLayout","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","FRAGMENT","COMPUTE","sampleType","storageTexture","access","bindGroup","createBindGroup","layout","resource","createView","module","createShaderModule","code","renderPipeline","createRenderPipeline","createPipelineLayout","bindGroupLayouts","vertex","entryPoint","fragment","targets","writeMask","renderBundleEncoder","setPipeline","setBindGroup","draw","renderPassEncoder","computePipeline","createComputePipeline","compute","computePassEncoder","dispatch","Math","ceil","performWriteOp","data","beginRenderPass","colorAttachments","view","clearValue","R","G","B","A","loadOp","storeOp","rep","texelData","pack","encode","numTexels","fullTexelData","ArrayBuffer","i","src","dst","start","writeTexture","j","writeBuffer","renderTarget","RENDER_ATTACHMENT","sampleCount","resolveTarget","storedValue","map","x","toFixed","join","ensureSubmit","flushCommandBuffers","popContext","commandBuffer","finish","end","renderBundle","makeDummyAttachment","ancestorContext","min","indexOf","flushRenderBundles","result","GPURenderBundle","push","createCommandEncoder","beginComputePass","createRenderBundleEncoder","colorFormats","length","executeBundles","submit","ensureBoundary","boundary","test","desc","params","u","combine","expand","p","contexts","expandWithParams","_context","read","write","fn","helper","readUsage","writeUsage","texelValue1","texelValue2","readbackTexture","expectSingleColor","exp","texelValue","first","second","unimplemented"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA,CANO,CAQP,SAASC,aAAT,QAA8B,+CAA9B;AACA,SAASC,MAAT,EAAiBC,MAAjB,EAAyBC,WAAzB,QAA4C,oCAA5C;;AAEA,SAASC,OAAT,QAAwB,yBAAxB;AACA,SAASC,KAAT,QAAsB,0BAAtB;AACA,SAASC,oBAAT,QAAqC,oCAArC;AACA;AACEC,wBADF;;AAGO,wCAHP;;AAKA;AACEC,oBADF;AAEEC,aAFF;AAGEC,WAHF;AAIEC,YAJF;AAKEC,uBALF;;;;AASEC,OATF;AAUEC,kBAVF;AAWO,wBAXP;;AAaA,OAAO,MAAMC,CAAC,GAAGf,aAAa,CAACI,OAAD,CAAvB;;AAEP,MAAMY,kBAAkB,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAlBA;;AAoBA,MAAMC,qBAAN,CAA4B;AAC1B;AACQC,EAAAA,cAAc,GAAqB,OAArB;;AAEtB;;;;;;;;;;;AAWQC,EAAAA,cAAc,GAAuB,EAAvB;AACdC,EAAAA,aAAa,GAAsB,EAAtB;;AAELC,EAAAA,YAAY,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAH;AACZC,EAAAA,cAAc,GAA2B,YAA3B;;AAE9BC,EAAAA,WAAW;AACTC,EAAAA,CADS;AAETC,EAAAA,qBAFS;;;AAKT;AACA,SAAKD,CAAL,GAASA,CAAT;AACA,SAAKE,MAAL,GAAcF,CAAC,CAACE,MAAhB;AACA,SAAKC,KAAL,GAAaH,CAAC,CAACE,MAAF,CAASC,KAAtB;AACA,SAAKC,OAAL,GAAeJ,CAAC,CAACK,eAAF;AACbL,IAAAA,CAAC,CAACE,MAAF,CAASI,aAAT,CAAuB;AACrBC,MAAAA,IAAI,EAAE,KAAKV,YADU;AAErBW,MAAAA,MAAM,EAAE,KAAKV,cAFQ;AAGrB,SAAGG,qBAHkB,EAAvB,CADa,CAAf;;;AAOD;;AAED;AACF;AACA;AACA;AACEQ,EAAAA,aAAa,CAAC,EAAEC,EAAF,EAAMC,EAAE,EAAEC,OAAV,EAAD,EAAoE;AAC/E,SAAKC,aAAL,CAAmBD,OAAnB;AACA,YAAQF,EAAR;AACE,WAAK,UAAL,CAAiB;AACf,gBAAMN,OAAO,GAAG,KAAKJ,CAAL,CAAOK,eAAP;AACd,eAAKH,MAAL,CAAYI,aAAZ,CAA0B;AACxBC,YAAAA,IAAI,EAAE,KAAKV,YADa;AAExBW,YAAAA,MAAM,EAAE,KAAKV,cAFW;AAGxBgB,YAAAA,KAAK,EAAEC,eAAe,CAACC,QAAhB,GAA2BD,eAAe,CAACE,QAH1B,EAA1B,CADc,CAAhB;;;;AAQAxC,UAAAA,MAAM,CAAC,KAAKyC,cAAL,KAAwBC,SAAzB,CAAN;AACA,eAAKD,cAAL,CAAoBE,oBAApB;AACE;AACEhB,YAAAA,OAAO,EAAE,KAAKA,OADhB,EADF;;AAIE,YAAEA,OAAF,EAJF;AAKE,eAAKP,YALP;;AAOA,iBAAOO,OAAP;AACD;AACD,WAAK,UAAL,CAAiB;AACf,gBAAM,EAAEiB,UAAF,EAAcC,WAAd,KAA8BxC,oBAAoB,CAAC,KAAKgB,cAAN,EAAsB,IAAtB,EAA4B;AAClF,aAAG,KAAKD,YAD0E;AAElF,WAFkF,CAA5B,CAAxD;;AAIA,gBAAM0B,MAAM,GAAG,KAAKvB,CAAL,CAAOK,eAAP;AACb,eAAKH,MAAL,CAAYsB,YAAZ,CAAyB;AACvBjB,YAAAA,IAAI,EAAEc,UADiB;AAEvBP,YAAAA,KAAK,EAAEW,cAAc,CAACT,QAAf,GAA0BS,cAAc,CAACR,QAFzB,EAAzB,CADa,CAAf;;;;AAOA,gBAAMb,OAAO,GAAG,KAAKJ,CAAL,CAAOK,eAAP;AACd,eAAKH,MAAL,CAAYI,aAAZ,CAA0B;AACxBC,YAAAA,IAAI,EAAE,KAAKV,YADa;AAExBW,YAAAA,MAAM,EAAE,KAAKV,cAFW;AAGxBgB,YAAAA,KAAK,EAAEC,eAAe,CAACC,QAAhB,GAA2BD,eAAe,CAACE,QAH1B,EAA1B,CADc,CAAhB;;;;AAQAxC,UAAAA,MAAM,CAAC,KAAKyC,cAAL,KAAwBC,SAAzB,CAAN;AACA,eAAKD,cAAL,CAAoBQ,mBAApB;AACE;AACEtB,YAAAA,OAAO,EAAE,KAAKA,OADhB,EADF;;AAIE,YAAEmB,MAAF,EAAUD,WAAV,EAJF;AAKE,eAAKzB,YALP;;AAOA,eAAKqB,cAAL,CAAoBS,mBAApB;AACE,YAAEJ,MAAF,EAAUD,WAAV,EADF;AAEE,YAAElB,OAAF,EAFF;AAGE,eAAKP,YAHP;;AAKA,iBAAOO,OAAP;AACD;AACD,WAAK,QAAL,CAAe;AACb,gBAAMA,OAAO,GAAG,KAAKJ,CAAL,CAAOK,eAAP;AACd,eAAKH,MAAL,CAAYI,aAAZ,CAA0B;AACxBC,YAAAA,IAAI,EAAE,KAAKV,YADa;AAExBW,YAAAA,MAAM,EAAE,KAAKV,cAFW;AAGxBgB,YAAAA,KAAK,EAAEC,eAAe,CAACC,QAAhB,GAA2BD,eAAe,CAACa,eAH1B,EAA1B,CADc,CAAhB;;;;AAQA,gBAAMC,eAAe,GAAG,KAAK3B,MAAL,CAAY4B,qBAAZ,CAAkC;AACxDC,YAAAA,OAAO,EAAE;AACP;AACEC,cAAAA,OAAO,EAAE,CADX;AAEEC,cAAAA,UAAU,EAAEC,cAAc,CAACC,QAAf,GAA0BD,cAAc,CAACE,OAFvD;AAGEhC,cAAAA,OAAO,EAAE;AACPiC,gBAAAA,UAAU,EAAE,oBADL,EAHX,EADO;;;AAQP;AACEL,cAAAA,OAAO,EAAE,CADX;AAEEC,cAAAA,UAAU,EAAEC,cAAc,CAACC,QAAf,GAA0BD,cAAc,CAACE,OAFvD;AAGEE,cAAAA,cAAc,EAAE;AACdC,gBAAAA,MAAM,EAAE,YADM;AAEd/B,gBAAAA,MAAM,EAAE,KAAKV,cAFC,EAHlB,EARO,CAD+C,EAAlC,CAAxB;;;;;;AAoBA,gBAAM0C,SAAS,GAAG,KAAKtC,MAAL,CAAYuC,eAAZ,CAA4B;AAC5CC,YAAAA,MAAM,EAAEb,eADoC;AAE5CE,YAAAA,OAAO,EAAE;AACP;AACEC,cAAAA,OAAO,EAAE,CADX;AAEEW,cAAAA,QAAQ,EAAE,KAAKvC,OAAL,CAAawC,UAAb,EAFZ,EADO;;AAKP;AACEZ,cAAAA,OAAO,EAAE,CADX;AAEEW,cAAAA,QAAQ,EAAEvC,OAAO,CAACwC,UAAR,EAFZ,EALO,CAFmC,EAA5B,CAAlB;;;;;AAcA,kBAAQhC,OAAR;AACE,iBAAK,qBAAL;AACA,iBAAK,uBAAL,CAA8B;AAC5B,sBAAMiC,MAAM,GAAG,KAAK3C,MAAL,CAAY4C,kBAAZ,CAA+B;AAC5CC,kBAAAA,IAAI,EAAG,GAAEvD,kBAAmB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAX0D,EAA/B,CAAf;;AAaA,sBAAMwD,cAAc,GAAG,KAAK9C,MAAL,CAAY+C,oBAAZ,CAAiC;AACtDP,kBAAAA,MAAM,EAAE,KAAKxC,MAAL,CAAYgD,oBAAZ,CAAiC;AACvCC,oBAAAA,gBAAgB,EAAE,CAACtB,eAAD,CADqB,EAAjC,CAD8C;;AAItDuB,kBAAAA,MAAM,EAAE;AACNP,oBAAAA,MADM;AAENQ,oBAAAA,UAAU,EAAE,WAFN,EAJ8C;;AAQtDC,kBAAAA,QAAQ,EAAE;AACRT,oBAAAA,MADQ;AAERQ,oBAAAA,UAAU,EAAE,WAFJ;;AAIR;AACA;AACAE,oBAAAA,OAAO,EAAE;AACP;AACE/C,sBAAAA,MAAM,EAAE,KAAKV,cADf;AAEE0D,sBAAAA,SAAS,EAAE,CAFb,EADO,CAND,EAR4C,EAAjC,CAAvB;;;;;;AAuBA,wBAAQ5C,OAAR;AACE,uBAAK,uBAAL;AACEnC,oBAAAA,MAAM,CAAC,KAAKgF,mBAAL,KAA6BtC,SAA9B,CAAN;AACA,yBAAKsC,mBAAL,CAAyBC,WAAzB,CAAqCV,cAArC;AACA,yBAAKS,mBAAL,CAAyBE,YAAzB,CAAsC,CAAtC,EAAyCnB,SAAzC;AACA,yBAAKiB,mBAAL,CAAyBG,IAAzB,CAA8B,CAA9B;AACA;AACF,uBAAK,qBAAL;AACEnF,oBAAAA,MAAM,CAAC,KAAKoF,iBAAL,KAA2B1C,SAA5B,CAAN;AACA,yBAAK0C,iBAAL,CAAuBH,WAAvB,CAAmCV,cAAnC;AACA,yBAAKa,iBAAL,CAAuBF,YAAvB,CAAoC,CAApC,EAAuCnB,SAAvC;AACA,yBAAKqB,iBAAL,CAAuBD,IAAvB,CAA4B,CAA5B;AACA,0BAZJ;;AAcA;AACD;AACD,iBAAK,sBAAL,CAA6B;AAC3B,sBAAMf,MAAM,GAAG,KAAK3C,MAAL,CAAY4C,kBAAZ,CAA+B;AAC5CC,kBAAAA,IAAI,EAAG;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAb0D,EAA/B,CAAf;;AAeA,sBAAMe,eAAe,GAAG,KAAK5D,MAAL,CAAY6D,qBAAZ,CAAkC;AACxDrB,kBAAAA,MAAM,EAAE,KAAKxC,MAAL,CAAYgD,oBAAZ,CAAiC;AACvCC,oBAAAA,gBAAgB,EAAE,CAACtB,eAAD,CADqB,EAAjC,CADgD;;AAIxDmC,kBAAAA,OAAO,EAAE;AACPnB,oBAAAA,MADO;AAEPQ,oBAAAA,UAAU,EAAE,MAFL,EAJ+C,EAAlC,CAAxB;;;;AAUA5E,gBAAAA,MAAM,CAAC,KAAKwF,kBAAL,KAA4B9C,SAA7B,CAAN;AACA,qBAAK8C,kBAAL,CAAwBP,WAAxB,CAAoCI,eAApC;AACA,qBAAKG,kBAAL,CAAwBN,YAAxB,CAAqC,CAArC,EAAwCnB,SAAxC;AACA,qBAAKyB,kBAAL,CAAwBC,QAAxB;AACEC,gBAAAA,IAAI,CAACC,IAAL,CAAU,KAAKvE,YAAL,CAAkB,CAAlB,IAAuB,CAAjC,CADF;AAEEsE,gBAAAA,IAAI,CAACC,IAAL,CAAU,KAAKvE,YAAL,CAAkB,CAAlB,IAAuB,CAAjC,CAFF;;AAIA;AACD;AACD;AACElB,cAAAA,WAAW,GA3Ff;;;AA8FA,iBAAOyB,OAAP;AACD;AACD,WAAK,UAAL;AACA,WAAK,oBAAL;AACA,WAAK,kBAAL;AACEzB,QAAAA,WAAW,GArMf;;AAuMAA,IAAAA,WAAW;AACZ;;AAED0F,EAAAA,cAAc;AACZ,IAAE3D,EAAF,EAAMC,EAAE,EAAEC,OAAV,EADY;AAEZ0D,EAAAA,IAFY;AAGZ;AACA,SAAKzD,aAAL,CAAmBD,OAAnB;AACA,YAAQF,EAAR;AACE,WAAK,kBAAL,CAAyB;AACvBjC,UAAAA,MAAM,CAAC,KAAKyC,cAAL,KAAwBC,SAAzB,CAAN;AACA,eAAK0C,iBAAL,GAAyB,KAAK3C,cAAL,CAAoBqD,eAApB,CAAoC;AAC3DC,YAAAA,gBAAgB,EAAE;AAChB;AACEC,cAAAA,IAAI,EAAE,KAAKrE,OAAL,CAAawC,UAAb,EADR;AAEE;AACA8B,cAAAA,UAAU,EAAE,CAACJ,IAAI,CAACK,CAAL,IAAU,CAAX,EAAcL,IAAI,CAACM,CAAL,IAAU,CAAxB,EAA2BN,IAAI,CAACO,CAAL,IAAU,CAArC,EAAwCP,IAAI,CAACQ,CAAL,IAAU,CAAlD,CAHd;AAIEC,cAAAA,MAAM,EAAE,OAJV;AAKEC,cAAAA,OAAO,EAAE,OALX,EADgB,CADyC,EAApC,CAAzB;;;;AAWA,eAAKtF,cAAL,GAAsB,qBAAtB;AACA;AACD;AACD,WAAK,eAAL,CAAsB;AACpB;AACA,gBAAMuF,GAAG,GAAGlG,wBAAwB,CAAC,KAAKe,cAAN,CAApC;AACA,gBAAMoF,SAAS,GAAGD,GAAG,CAACE,IAAJ,CAASF,GAAG,CAACG,MAAJ,CAAWd,IAAX,CAAT,CAAlB;AACA,gBAAMe,SAAS,GAAG,KAAKxF,YAAL,CAAkB,CAAlB,IAAuB,KAAKA,YAAL,CAAkB,CAAlB,CAAzC;AACA,gBAAMyF,aAAa,GAAG,IAAIC,WAAJ,CAAgBL,SAAS,CAAC7D,UAAV,GAAuBgE,SAAvC,CAAtB;AACA,eAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,SAApB,EAA+B,EAAEG,CAAjC,EAAoC;AAClC9G,YAAAA,MAAM,CAAC,EAAE+G,GAAG,EAAEP,SAAP,EAAD,EAAqB,EAAEQ,GAAG,EAAEJ,aAAP,EAAsBK,KAAK,EAAEH,CAAC,GAAGN,SAAS,CAAC7D,UAA3C,EAArB,CAAN;AACD;;AAED,eAAKlB,KAAL,CAAWyF,YAAX;AACE,YAAExF,OAAO,EAAE,KAAKA,OAAhB,EADF;AAEEkF,UAAAA,aAFF;AAGE;AACEhE,YAAAA,WAAW,EAAE4D,SAAS,CAAC7D,UAAV,GAAuB,KAAKxB,YAAL,CAAkB,CAAlB,CADtC,EAHF;;AAME,eAAKA,YANP;;AAQA;AACD;AACD,WAAK,UAAL,CAAiB;AACf,gBAAMO,OAAO,GAAG,KAAKF,MAAL,CAAYI,aAAZ,CAA0B;AACxCC,YAAAA,IAAI,EAAE,KAAKV,YAD6B;AAExCW,YAAAA,MAAM,EAAE,KAAKV,cAF2B;AAGxCgB,YAAAA,KAAK,EAAEC,eAAe,CAACC,QAAhB,GAA2BD,eAAe,CAACE,QAHV,EAA1B,CAAhB;;;AAMA;AACA,gBAAMgE,GAAG,GAAGlG,wBAAwB,CAAC,KAAKe,cAAN,CAApC;AACA,gBAAMoF,SAAS,GAAGD,GAAG,CAACE,IAAJ,CAASF,GAAG,CAACG,MAAJ,CAAWd,IAAX,CAAT,CAAlB;AACA,gBAAMe,SAAS,GAAG,KAAKxF,YAAL,CAAkB,CAAlB,IAAuB,KAAKA,YAAL,CAAkB,CAAlB,CAAzC;AACA,gBAAMyF,aAAa,GAAG,IAAIC,WAAJ,CAAgBL,SAAS,CAAC7D,UAAV,GAAuBgE,SAAvC,CAAtB;AACA,eAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,SAApB,EAA+B,EAAEG,CAAjC,EAAoC;AAClC9G,YAAAA,MAAM,CAAC,EAAE+G,GAAG,EAAEP,SAAP,EAAD,EAAqB,EAAEQ,GAAG,EAAEJ,aAAP,EAAsBK,KAAK,EAAEH,CAAC,GAAGN,SAAS,CAAC7D,UAA3C,EAArB,CAAN;AACD;;AAED,eAAKlB,KAAL,CAAWyF,YAAX;AACE,YAAExF,OAAF,EADF;AAEEkF,UAAAA,aAFF;AAGE;AACEhE,YAAAA,WAAW,EAAE4D,SAAS,CAAC7D,UAAV,GAAuB,KAAKxB,YAAL,CAAkB,CAAlB,CADtC,EAHF;;AAME,eAAKA,YANP;;;AASApB,UAAAA,MAAM,CAAC,KAAKyC,cAAL,KAAwBC,SAAzB,CAAN;AACA,eAAKD,cAAL,CAAoBE,oBAApB;AACE,YAAEhB,OAAF,EADF;AAEE,YAAEA,OAAO,EAAE,KAAKA,OAAhB,EAFF;AAGE,eAAKP,YAHP;;AAKA;AACD;AACD,WAAK,UAAL,CAAiB;AACf;AACA,gBAAMoF,GAAG,GAAGlG,wBAAwB,CAAC,KAAKe,cAAN,CAApC;AACA,gBAAMoF,SAAS,GAAGD,GAAG,CAACE,IAAJ,CAASF,GAAG,CAACG,MAAJ,CAAWd,IAAX,CAAT,CAAlB;AACA,gBAAMhD,WAAW,GAAGzC,KAAK,CAACqG,SAAS,CAAC7D,UAAX,EAAuB,GAAvB,CAAzB;AACA,gBAAMiE,aAAa,GAAG,IAAIC,WAAJ,CAAgBjE,WAAW,GAAG,KAAKzB,YAAL,CAAkB,CAAlB,CAA9B,CAAtB;AACA,eAAK,IAAI2F,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK3F,YAAL,CAAkB,CAAlB,CAApB,EAA0C,EAAE2F,CAA5C,EAA+C;AAC7C,iBAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKhG,YAAL,CAAkB,CAAlB,CAApB,EAA0C,EAAEgG,CAA5C,EAA+C;AAC7CnH,cAAAA,MAAM;AACJ,gBAAE+G,GAAG,EAAEP,SAAP,EADI;AAEJ;AACEQ,gBAAAA,GAAG,EAAEJ,aADP;AAEEK,gBAAAA,KAAK,EAAEH,CAAC,GAAGlE,WAAJ,GAAkBuE,CAAC,GAAGX,SAAS,CAAC7D,UAFzC,EAFI,CAAN;;;AAOD;AACF;;AAED,gBAAME,MAAM,GAAG,KAAKvB,CAAL,CAAOK,eAAP;AACb,eAAKH,MAAL,CAAYsB,YAAZ,CAAyB;AACvBjB,YAAAA,IAAI,EAAE+E,aAAa,CAACjE,UADG;AAEvBP,YAAAA,KAAK,EAAEW,cAAc,CAACT,QAAf,GAA0BS,cAAc,CAACR,QAFzB,EAAzB,CADa,CAAf;;;;AAOA,eAAKd,KAAL,CAAW2F,WAAX,CAAuBvE,MAAvB,EAA+B,CAA/B,EAAkC+D,aAAlC;;AAEA7G,UAAAA,MAAM,CAAC,KAAKyC,cAAL,KAAwBC,SAAzB,CAAN;AACA,eAAKD,cAAL,CAAoBS,mBAApB;AACE,YAAEJ,MAAF,EAAUD,WAAV,EADF;AAEE,YAAElB,OAAO,EAAE,KAAKA,OAAhB,EAFF;AAGE,eAAKP,YAHP;;AAKA;AACD;AACD,WAAK,oBAAL,CAA2B;AACzBpB,UAAAA,MAAM,CAAC,KAAKyC,cAAL,KAAwBC,SAAzB,CAAN;AACA,gBAAM4E,YAAY,GAAG,KAAK/F,CAAL,CAAOK,eAAP;AACnB,eAAKH,MAAL,CAAYI,aAAZ,CAA0B;AACxBE,YAAAA,MAAM,EAAE,KAAKV,cADW;AAExBS,YAAAA,IAAI,EAAE,KAAKV,YAFa;AAGxBiB,YAAAA,KAAK,EAAEC,eAAe,CAACiF,iBAHC;AAIxBC,YAAAA,WAAW,EAAE,CAJW,EAA1B,CADmB,CAArB;;;AAQA,eAAKpC,iBAAL,GAAyB,KAAK3C,cAAL,CAAoBqD,eAApB,CAAoC;AAC3DC,YAAAA,gBAAgB,EAAE;AAChB;AACEC,cAAAA,IAAI,EAAEsB,YAAY,CAACnD,UAAb,EADR;AAEEsD,cAAAA,aAAa,EAAE,KAAK9F,OAAL,CAAawC,UAAb,EAFjB;AAGE;AACA8B,cAAAA,UAAU,EAAE,CAACJ,IAAI,CAACK,CAAL,IAAU,CAAX,EAAcL,IAAI,CAACM,CAAL,IAAU,CAAxB,EAA2BN,IAAI,CAACO,CAAL,IAAU,CAArC,EAAwCP,IAAI,CAACQ,CAAL,IAAU,CAAlD,CAJd;AAKEC,cAAAA,MAAM,EAAE,OALV;AAMEC,cAAAA,OAAO,EAAE,SANX,EADgB,CADyC,EAApC,CAAzB;;;;AAYA,eAAKtF,cAAL,GAAsB,qBAAtB;AACA;AACD;AACD,WAAK,SAAL,CAAgB;AACd,gBAAMmC,eAAe,GAAG,KAAK3B,MAAL,CAAY4B,qBAAZ,CAAkC;AACxDC,YAAAA,OAAO,EAAE;AACP;AACEC,cAAAA,OAAO,EAAE,CADX;AAEEC,cAAAA,UAAU,EAAEC,cAAc,CAACC,QAAf,GAA0BD,cAAc,CAACE,OAFvD;AAGEE,cAAAA,cAAc,EAAE;AACdC,gBAAAA,MAAM,EAAE,YADM;AAEd/B,gBAAAA,MAAM,EAAE,KAAKV,cAFC,EAHlB,EADO,CAD+C,EAAlC,CAAxB;;;;;;AAaA,gBAAM0C,SAAS,GAAG,KAAKtC,MAAL,CAAYuC,eAAZ,CAA4B;AAC5CC,YAAAA,MAAM,EAAEb,eADoC;AAE5CE,YAAAA,OAAO,EAAE;AACP;AACEC,cAAAA,OAAO,EAAE,CADX;AAEEW,cAAAA,QAAQ,EAAE,KAAKvC,OAAL,CAAawC,UAAb,EAFZ,EADO,CAFmC,EAA5B,CAAlB;;;;;AAUA;AACA,gBAAMuD,WAAW,GAAI,aAAY,CAAC7B,IAAI,CAACK,CAAL,IAAU,CAAX,EAAcL,IAAI,CAACM,CAAL,IAAU,CAAxB,EAA2BN,IAAI,CAACO,CAAL,IAAU,CAArC,EAAwCP,IAAI,CAACQ,CAAL,IAAU,CAAlD;AAC9BsB,UAAAA,GAD8B,CAC1B,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAF,CAAU,CAAV,CADqB;AAE9BC,UAAAA,IAF8B,CAEzB,IAFyB,CAEnB,GAFd;;AAIA,kBAAQ3F,OAAR;AACE,iBAAK,qBAAL;AACA,iBAAK,uBAAL,CAA8B;AAC5B,sBAAMiC,MAAM,GAAG,KAAK3C,MAAL,CAAY4C,kBAAZ,CAA+B;AAC5CC,kBAAAA,IAAI,EAAG,GAAEvD,kBAAmB;AAC1C;AACA;AACA;AACA;AACA,qEAAqE2G,WAAY;AACjF;AACA;AACA,eAT0D,EAA/B,CAAf;;AAWA,sBAAMnD,cAAc,GAAG,KAAK9C,MAAL,CAAY+C,oBAAZ,CAAiC;AACtDP,kBAAAA,MAAM,EAAE,KAAKxC,MAAL,CAAYgD,oBAAZ,CAAiC;AACvCC,oBAAAA,gBAAgB,EAAE,CAACtB,eAAD,CADqB,EAAjC,CAD8C;;AAItDuB,kBAAAA,MAAM,EAAE;AACNP,oBAAAA,MADM;AAENQ,oBAAAA,UAAU,EAAE,WAFN,EAJ8C;;AAQtDC,kBAAAA,QAAQ,EAAE;AACRT,oBAAAA,MADQ;AAERQ,oBAAAA,UAAU,EAAE,WAFJ;;AAIR;AACA;AACAE,oBAAAA,OAAO,EAAE;AACP;AACE/C,sBAAAA,MAAM,EAAE,KAAKV,cADf;AAEE0D,sBAAAA,SAAS,EAAE,CAFb,EADO,CAND,EAR4C,EAAjC,CAAvB;;;;;;AAuBA,wBAAQ5C,OAAR;AACE,uBAAK,uBAAL;AACEnC,oBAAAA,MAAM,CAAC,KAAKgF,mBAAL,KAA6BtC,SAA9B,CAAN;AACA,yBAAKsC,mBAAL,CAAyBC,WAAzB,CAAqCV,cAArC;AACA,yBAAKS,mBAAL,CAAyBE,YAAzB,CAAsC,CAAtC,EAAyCnB,SAAzC;AACA,yBAAKiB,mBAAL,CAAyBG,IAAzB,CAA8B,CAA9B;AACA;AACF,uBAAK,qBAAL;AACEnF,oBAAAA,MAAM,CAAC,KAAKoF,iBAAL,KAA2B1C,SAA5B,CAAN;AACA,yBAAK0C,iBAAL,CAAuBH,WAAvB,CAAmCV,cAAnC;AACA,yBAAKa,iBAAL,CAAuBF,YAAvB,CAAoC,CAApC,EAAuCnB,SAAvC;AACA,yBAAKqB,iBAAL,CAAuBD,IAAvB,CAA4B,CAA5B;AACA,0BAZJ;;AAcA;AACD;AACD,iBAAK,sBAAL,CAA6B;AAC3B,sBAAMf,MAAM,GAAG,KAAK3C,MAAL,CAAY4C,kBAAZ,CAA+B;AAC5CC,kBAAAA,IAAI,EAAG;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmDoD,WAAY;AAC/D;AACA,eAZ0D,EAA/B,CAAf;;AAcA,sBAAMrC,eAAe,GAAG,KAAK5D,MAAL,CAAY6D,qBAAZ,CAAkC;AACxDrB,kBAAAA,MAAM,EAAE,KAAKxC,MAAL,CAAYgD,oBAAZ,CAAiC;AACvCC,oBAAAA,gBAAgB,EAAE,CAACtB,eAAD,CADqB,EAAjC,CADgD;;AAIxDmC,kBAAAA,OAAO,EAAE;AACPnB,oBAAAA,MADO;AAEPQ,oBAAAA,UAAU,EAAE,MAFL,EAJ+C,EAAlC,CAAxB;;;;AAUA5E,gBAAAA,MAAM,CAAC,KAAKwF,kBAAL,KAA4B9C,SAA7B,CAAN;AACA,qBAAK8C,kBAAL,CAAwBP,WAAxB,CAAoCI,eAApC;AACA,qBAAKG,kBAAL,CAAwBN,YAAxB,CAAqC,CAArC,EAAwCnB,SAAxC;AACA,qBAAKyB,kBAAL,CAAwBC,QAAxB;AACEC,gBAAAA,IAAI,CAACC,IAAL,CAAU,KAAKvE,YAAL,CAAkB,CAAlB,IAAuB,CAAjC,CADF;AAEEsE,gBAAAA,IAAI,CAACC,IAAL,CAAU,KAAKvE,YAAL,CAAkB,CAAlB,IAAuB,CAAjC,CAFF;;AAIA;AACD;AACD;AACElB,cAAAA,WAAW,GAxFf;;AA0FA;AACD;AACD,WAAK,UAAL;AACA,WAAK,QAAL;AACEA,QAAAA,WAAW,GA7Pf;;AA+PD;;AAED;AACA6H,EAAAA,YAAY,GAAG;AACb,SAAK3F,aAAL,CAAmB,OAAnB;AACA,SAAK4F,mBAAL;AACD;;AAEOC,EAAAA,UAAU,GAA8C;AAC9D,YAAQ,KAAKhH,cAAb;AACE,WAAK,OAAL;AACEf,QAAAA,WAAW;AACX;AACF,WAAK,iBAAL,CAAwB;AACtBF,UAAAA,MAAM,CAAC,KAAKyC,cAAL,KAAwBC,SAAzB,CAAN;AACA,gBAAMwF,aAAa,GAAG,KAAKzF,cAAL,CAAoB0F,MAApB,EAAtB;AACA,eAAK1F,cAAL,GAAsBC,SAAtB;AACA,eAAKzB,cAAL,GAAsB,OAAtB;AACA,iBAAOiH,aAAP;AACD;AACD,WAAK,sBAAL;AACElI,QAAAA,MAAM,CAAC,KAAKwF,kBAAL,KAA4B9C,SAA7B,CAAN;AACA,aAAK8C,kBAAL,CAAwB4C,GAAxB;AACA,aAAK5C,kBAAL,GAA0B9C,SAA1B;AACA,aAAKzB,cAAL,GAAsB,iBAAtB;AACA;AACF,WAAK,qBAAL;AACEjB,QAAAA,MAAM,CAAC,KAAKoF,iBAAL,KAA2B1C,SAA5B,CAAN;AACA,aAAK0C,iBAAL,CAAuBgD,GAAvB;AACA,aAAKhD,iBAAL,GAAyB1C,SAAzB;AACA,aAAKzB,cAAL,GAAsB,iBAAtB;AACA;AACF,WAAK,uBAAL,CAA8B;AAC5BjB,UAAAA,MAAM,CAAC,KAAKgF,mBAAL,KAA6BtC,SAA9B,CAAN;AACA,gBAAM2F,YAAY,GAAG,KAAKrD,mBAAL,CAAyBmD,MAAzB,EAArB;AACA,eAAKnD,mBAAL,GAA2BtC,SAA3B;AACA,eAAKzB,cAAL,GAAsB,qBAAtB;AACA,iBAAOoH,YAAP;AACD,SA7BH;;AA+BA,WAAO,IAAP;AACD;;AAEOC,EAAAA,mBAAmB,GAAiC;AAC1D,UAAM3G,OAAO,GAAG,KAAKJ,CAAL,CAAOK,eAAP;AACd,SAAKH,MAAL,CAAYI,aAAZ,CAA0B;AACxBE,MAAAA,MAAM,EAAE,KAAKV,cADW;AAExBS,MAAAA,IAAI,EAAE,KAAKV,YAFa;AAGxBiB,MAAAA,KAAK,EAAEC,eAAe,CAACiF,iBAHC,EAA1B,CADc,CAAhB;;;AAOA,WAAO;AACLvB,MAAAA,IAAI,EAAErE,OAAO,CAACwC,UAAR,EADD;AAELmC,MAAAA,MAAM,EAAE,MAFH;AAGLC,MAAAA,OAAO,EAAE,OAHJ,EAAP;;AAKD;;AAEOnE,EAAAA,aAAa,CAACD,OAAD,EAA4B;AAC/C;AACA,UAAMoG,eAAe;AACnB1H,IAAAA,kBAAkB;AAChB6E,IAAAA,IAAI,CAAC8C,GAAL;AACE3H,IAAAA,kBAAkB,CAAC4H,OAAnB,CAA2BtG,OAA3B,CADF;AAEEtB,IAAAA,kBAAkB,CAAC4H,OAAnB,CAA2B,KAAKxH,cAAhC,CAFF,CADgB,CADpB;;;;AAQA;AACA,WAAO,KAAKA,cAAL,KAAwBsH,eAA/B,EAAgD;AAC9C;AACA,UAAI,KAAKtH,cAAL,KAAwB,qBAA5B,EAAmD;AACjD,aAAKyH,kBAAL;AACD;;AAED,YAAMC,MAAM,GAAG,KAAKV,UAAL,EAAf;AACA,UAAIU,MAAJ,EAAY;AACV,YAAIA,MAAM,YAAYC,eAAtB,EAAuC;AACrC,eAAKzH,aAAL,CAAmB0H,IAAnB,CAAwBF,MAAxB;AACD,SAFD,MAEO;AACL,eAAKzH,cAAL,CAAoB2H,IAApB,CAAyBF,MAAzB;AACD;AACF;AACF;;AAED,QAAI,KAAK1H,cAAL,KAAwBkB,OAA5B,EAAqC;AACnC;AACD;;AAED,YAAQA,OAAR;AACE,WAAK,OAAL;AACEjC,QAAAA,WAAW;AACX;AACF,WAAK,iBAAL;AACEF,QAAAA,MAAM,CAAC,KAAKiB,cAAL,KAAwB,OAAzB,CAAN;AACA,aAAKwB,cAAL,GAAsB,KAAKhB,MAAL,CAAYqH,oBAAZ,EAAtB;AACA;AACF,WAAK,sBAAL;AACE,gBAAQ,KAAK7H,cAAb;AACE,eAAK,OAAL;AACE,iBAAKwB,cAAL,GAAsB,KAAKhB,MAAL,CAAYqH,oBAAZ,EAAtB;AACF;AACA,eAAK,iBAAL;AACE9I,YAAAA,MAAM,CAAC,KAAKyC,cAAL,KAAwBC,SAAzB,CAAN;AACA,iBAAK8C,kBAAL,GAA0B,KAAK/C,cAAL,CAAoBsG,gBAApB,EAA1B;AACA;AACF,eAAK,sBAAL;AACA,eAAK,uBAAL;AACA,eAAK,qBAAL;AACE7I,YAAAA,WAAW,GAXf;;AAaA;AACF,WAAK,qBAAL;AACE,gBAAQ,KAAKe,cAAb;AACE,eAAK,OAAL;AACE,iBAAKwB,cAAL,GAAsB,KAAKhB,MAAL,CAAYqH,oBAAZ,EAAtB;AACF;AACA,eAAK,iBAAL;AACE9I,YAAAA,MAAM,CAAC,KAAKyC,cAAL,KAAwBC,SAAzB,CAAN;AACA,iBAAK0C,iBAAL,GAAyB,KAAK3C,cAAL,CAAoBqD,eAApB,CAAoC;AAC3DC,cAAAA,gBAAgB,EAAE,CAAC,KAAKuC,mBAAL,EAAD,CADyC,EAApC,CAAzB;;AAGA;AACF,eAAK,qBAAL;AACA,eAAK,uBAAL;AACA,eAAK,sBAAL;AACEpI,YAAAA,WAAW,GAbf;;AAeA;AACF,WAAK,uBAAL;AACE,gBAAQ,KAAKe,cAAb;AACE,eAAK,OAAL;AACE,iBAAKwB,cAAL,GAAsB,KAAKhB,MAAL,CAAYqH,oBAAZ,EAAtB;AACF;AACA,eAAK,iBAAL;AACE9I,YAAAA,MAAM,CAAC,KAAKyC,cAAL,KAAwBC,SAAzB,CAAN;AACA,iBAAK0C,iBAAL,GAAyB,KAAK3C,cAAL,CAAoBqD,eAApB,CAAoC;AAC3DC,cAAAA,gBAAgB,EAAE,CAAC,KAAKuC,mBAAL,EAAD,CADyC,EAApC,CAAzB;;AAGF;AACA,eAAK,qBAAL;AACE,iBAAKtD,mBAAL,GAA2B,KAAKvD,MAAL,CAAYuH,yBAAZ,CAAsC;AAC/DC,cAAAA,YAAY,EAAE,CAAC,KAAK5H,cAAN,CADiD,EAAtC,CAA3B;;AAGA;AACF,eAAK,uBAAL;AACA,eAAK,sBAAL;AACEnB,YAAAA,WAAW,GAjBf;;AAmBA,cA5DJ;;AA8DA,SAAKe,cAAL,GAAsBkB,OAAtB;AACD;;AAEOuG,EAAAA,kBAAkB,GAAG;AAC3B1I,IAAAA,MAAM,CAAC,KAAKoF,iBAAL,KAA2B1C,SAA5B,CAAN;AACA,QAAI,KAAKvB,aAAL,CAAmB+H,MAAvB,EAA+B;AAC7B,WAAK9D,iBAAL,CAAuB+D,cAAvB,CAAsC,KAAKhI,aAA3C;AACA,WAAKA,aAAL,GAAqB,EAArB;AACD;AACF;;AAEO6G,EAAAA,mBAAmB,GAAG;AAC5B,QAAI,KAAK9G,cAAL,CAAoBgI,MAAxB,EAAgC;AAC9B,WAAKxH,KAAL,CAAW0H,MAAX,CAAkB,KAAKlI,cAAvB;AACA,WAAKA,cAAL,GAAsB,EAAtB;AACD;AACF;;AAEDmI,EAAAA,cAAc,CAACC,QAAD,EAA8B;AAC1C,YAAQA,QAAR;AACE,WAAK,gBAAL;AACE,aAAKlH,aAAL,CAAmB,OAAnB;AACA;AACF,WAAK,UAAL;AACE,aAAKA,aAAL,CAAmB,OAAnB;AACA;AACA,aAAK4F,mBAAL;AACA;AACF,WAAK,UAAL;AACE;AACAhI,QAAAA,MAAM,CAAC,KAAKiB,cAAL,KAAwB,sBAAzB,CAAN;AACA;AACF,WAAK,MAAL;AACE;AACAjB,QAAAA,MAAM;AACJ,aAAKiB,cAAL,KAAwB,qBAAxB;AACE,aAAKA,cAAL,KAAwB,uBAFtB,CAAN;;AAIA;AACF,WAAK,MAAL;AACE,aAAKmB,aAAL,CAAmB,iBAAnB;AACA;AACF,WAAK,eAAL;AACE,aAAKA,aAAL,CAAmB,qBAAnB;AACA;AACF,WAAK,iBAAL;AACE,aAAKA,aAAL,CAAmB,qBAAnB;AACA;AACA,aAAKsG,kBAAL;AACA,cA9BJ;;AAgCD,GArsByB;;;AAwsB5B5H,CAAC,CAACyI,IAAF,CAAO,IAAP;AACGC,IADH;AAEK;AACL;AACA;AACA;AACA,0EANA;;AAQGC,MARH,CAQU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,UADX,EACuBpJ,oBADvB;AAEGqJ,MAFH,CAEU,UAFV,EAEsB,CAAAC,CAAC,KAAIrJ,aAAa,CAACqJ,CAAC,CAACP,QAAH,CAAb,CAA0BQ,QAFrD;AAGGC,gBAHH,CAGoB,WAAW,EAAEC,QAAF,EAAX,EAAyB;AACzC,OAAK,MAAMC,IAAX,IAAmBxJ,WAAnB,EAAgC;AAC9B,SAAK,MAAMyJ,KAAX,IAAoBxJ,YAApB,EAAkC;AAChC,UAAIC,uBAAuB,CAAC,CAACsJ,IAAD,EAAOC,KAAP,CAAD,EAAgBF,QAAhB,CAA3B,EAAsD;AACpD,cAAM;AACJC,UAAAA,IAAI,EAAE,EAAEhI,EAAE,EAAEgI,IAAN,EAAY/H,EAAE,EAAE8H,QAAQ,CAAC,CAAD,CAAxB,EADF;AAEJE,UAAAA,KAAK,EAAE,EAAEjI,EAAE,EAAEiI,KAAN,EAAahI,EAAE,EAAE8H,QAAQ,CAAC,CAAD,CAAzB,EAFH,EAAN;;AAID;AACF;AACF;AACF,CAdH,CATJ;;AAyBGG,EAzBH,CAyBM,CAAA5I,CAAC,KAAI;AACP,QAAM6I,MAAM,GAAG,IAAIpJ,qBAAJ,CAA0BO,CAA1B,EAA6B;AAC1Cc,IAAAA,KAAK;AACHC,IAAAA,eAAe,CAACE,QAAhB;AACA5B,IAAAA,OAAO,CAACW,CAAC,CAACkI,MAAF,CAASQ,IAAT,CAAchI,EAAf,CAAP,CAA0BoI,SAD1B;AAEAzJ,IAAAA,OAAO,CAACW,CAAC,CAACkI,MAAF,CAASS,KAAT,CAAejI,EAAhB,CAAP,CAA2BqI,UAJa,EAA7B,CAAf;;AAMA;AACA,QAAMC,WAAW,GAAG,EAAErE,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAoBC,CAAC,EAAE,CAAvB,EAApB;AACA,QAAMmE,WAAW,GAAG,EAAEtE,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAoBC,CAAC,EAAE,CAAvB,EAApB;;AAEA;AACA+D,EAAAA,MAAM,CAACxE,cAAP,CAAsB,EAAE3D,EAAE,EAAE,eAAN,EAAuBC,EAAE,EAAE,OAA3B,EAAtB,EAA4DqI,WAA5D;AACA,QAAME,eAAe,GAAGL,MAAM,CAACpI,aAAP,CAAqBT,CAAC,CAACkI,MAAF,CAASQ,IAA9B,CAAxB;AACAG,EAAAA,MAAM,CAACf,cAAP,CAAsB9H,CAAC,CAACkI,MAAF,CAASH,QAA/B;AACAc,EAAAA,MAAM,CAACxE,cAAP,CAAsBrE,CAAC,CAACkI,MAAF,CAASS,KAA/B,EAAsCM,WAAtC;AACAJ,EAAAA,MAAM,CAACrC,YAAP;;AAEA;AACAxG,EAAAA,CAAC,CAACmJ,iBAAF,CAAoBD,eAApB,EAAqCL,MAAM,CAAC/I,cAA5C,EAA4D;AAC1DS,IAAAA,IAAI,EAAE,CAAC,GAAGsI,MAAM,CAAChJ,YAAX,EAAyB,CAAzB,CADoD;AAE1DuJ,IAAAA,GAAG,EAAEJ,WAFqD,EAA5D;;AAID,CAhDH;;AAkDAzJ,CAAC,CAACyI,IAAF,CAAO,IAAP;AACGC,IADH;AAEK;AACL;AACA;AACA;AACA;AACA;AACA,qDARA;;AAUGC,MAVH,CAUU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,UADX,EACuBpJ,oBADvB;AAEGqJ,MAFH,CAEU,UAFV,EAEsB,CAAAC,CAAC,KAAIrJ,aAAa,CAACqJ,CAAC,CAACP,QAAH,CAAb,CAA0BQ,QAFrD;AAGGC,gBAHH,CAGoB,WAAW,EAAEC,QAAF,EAAX,EAAyB;AACzC,OAAK,MAAMC,IAAX,IAAmBxJ,WAAnB,EAAgC;AAC9B,SAAK,MAAMyJ,KAAX,IAAoBxJ,YAApB,EAAkC;AAChC,UAAIC,uBAAuB,CAAC,CAACuJ,KAAD,EAAQD,IAAR,CAAD,EAAgBD,QAAhB,CAA3B,EAAsD;AACpD,cAAM;AACJE,UAAAA,KAAK,EAAE,EAAEjI,EAAE,EAAEiI,KAAN,EAAahI,EAAE,EAAE8H,QAAQ,CAAC,CAAD,CAAzB,EADH;AAEJC,UAAAA,IAAI,EAAE,EAAEhI,EAAE,EAAEgI,IAAN,EAAY/H,EAAE,EAAE8H,QAAQ,CAAC,CAAD,CAAxB,EAFF,EAAN;;AAID;AACF;AACF;AACF,CAdH,CAXJ;;AA2BGG,EA3BH,CA2BM,CAAA5I,CAAC,KAAI;AACP,QAAM6I,MAAM,GAAG,IAAIpJ,qBAAJ,CAA0BO,CAA1B,EAA6B;AAC1Cc,IAAAA,KAAK,EAAEzB,OAAO,CAACW,CAAC,CAACkI,MAAF,CAASQ,IAAT,CAAchI,EAAf,CAAP,CAA0BoI,SAA1B,GAAsCzJ,OAAO,CAACW,CAAC,CAACkI,MAAF,CAASS,KAAT,CAAejI,EAAhB,CAAP,CAA2BqI,UAD9B,EAA7B,CAAf;;AAGA;AACA,QAAMM,UAAU,GAAG,EAAE1E,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAoBC,CAAC,EAAE,CAAvB,EAAnB;;AAEA+D,EAAAA,MAAM,CAACxE,cAAP,CAAsBrE,CAAC,CAACkI,MAAF,CAASS,KAA/B,EAAsCU,UAAtC;AACAR,EAAAA,MAAM,CAACf,cAAP,CAAsB9H,CAAC,CAACkI,MAAF,CAASH,QAA/B;AACA,QAAMmB,eAAe,GAAGL,MAAM,CAACpI,aAAP,CAAqBT,CAAC,CAACkI,MAAF,CAASQ,IAA9B,CAAxB;AACAG,EAAAA,MAAM,CAACrC,YAAP;;AAEA;AACAxG,EAAAA,CAAC,CAACmJ,iBAAF,CAAoBD,eAApB,EAAqCL,MAAM,CAAC/I,cAA5C,EAA4D;AAC1DS,IAAAA,IAAI,EAAE,CAAC,GAAGsI,MAAM,CAAChJ,YAAX,EAAyB,CAAzB,CADoD;AAE1DuJ,IAAAA,GAAG,EAAEC,UAFqD,EAA5D;;AAID,CA5CH;;AA8CA9J,CAAC,CAACyI,IAAF,CAAO,IAAP;AACGC,IADH;AAEK;AACL;AACA;AACA;AACA,iEANA;;AAQGC,MARH,CAQU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,UADX,EACuBpJ,oBADvB;AAEGqJ,MAFH,CAEU,UAFV,EAEsB,CAAAC,CAAC,KAAIrJ,aAAa,CAACqJ,CAAC,CAACP,QAAH,CAAb,CAA0BQ,QAFrD;AAGGC,gBAHH,CAGoB,WAAW,EAAEC,QAAF,EAAX,EAAyB;AACzC,OAAK,MAAMa,KAAX,IAAoBnK,YAApB,EAAkC;AAChC,SAAK,MAAMoK,MAAX,IAAqBpK,YAArB,EAAmC;AACjC,UAAIC,uBAAuB,CAAC,CAACkK,KAAD,EAAQC,MAAR,CAAD,EAAkBd,QAAlB,CAA3B,EAAwD;AACtD,cAAM;AACJa,UAAAA,KAAK,EAAE,EAAE5I,EAAE,EAAE4I,KAAN,EAAa3I,EAAE,EAAE8H,QAAQ,CAAC,CAAD,CAAzB,EADH;AAEJc,UAAAA,MAAM,EAAE,EAAE7I,EAAE,EAAE6I,MAAN,EAAc5I,EAAE,EAAE8H,QAAQ,CAAC,CAAD,CAA1B,EAFJ,EAAN;;AAID;AACF;AACF;AACF,CAdH,CATJ;;AAyBGG,EAzBH,CAyBM,CAAA5I,CAAC,KAAI;AACP,QAAM6I,MAAM,GAAG,IAAIpJ,qBAAJ,CAA0BO,CAA1B,EAA6B;AAC1Cc,IAAAA,KAAK;AACHC,IAAAA,eAAe,CAACC,QAAhB;AACA3B,IAAAA,OAAO,CAACW,CAAC,CAACkI,MAAF,CAASoB,KAAT,CAAe5I,EAAhB,CAAP,CAA2BqI,UAD3B;AAEA1J,IAAAA,OAAO,CAACW,CAAC,CAACkI,MAAF,CAASqB,MAAT,CAAgB7I,EAAjB,CAAP,CAA4BqI,UAJY,EAA7B,CAAf;;AAMA;AACA,QAAMC,WAAW,GAAG,EAAErE,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAoBC,CAAC,EAAE,CAAvB,EAApB;AACA,QAAMmE,WAAW,GAAG,EAAEtE,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAoBC,CAAC,EAAE,CAAvB,EAApB;;AAEA+D,EAAAA,MAAM,CAACxE,cAAP,CAAsBrE,CAAC,CAACkI,MAAF,CAASoB,KAA/B,EAAsCN,WAAtC;AACAH,EAAAA,MAAM,CAACf,cAAP,CAAsB9H,CAAC,CAACkI,MAAF,CAASH,QAA/B;AACAc,EAAAA,MAAM,CAACxE,cAAP,CAAsBrE,CAAC,CAACkI,MAAF,CAASqB,MAA/B,EAAuCN,WAAvC;AACAJ,EAAAA,MAAM,CAACrC,YAAP;;AAEA;AACA,QAAM0C,eAAe,GAAGL,MAAM,CAACpI,aAAP,CAAqB,EAAEC,EAAE,EAAE,UAAN,EAAkBC,EAAE,EAAE,iBAAtB,EAArB,CAAxB;AACAkI,EAAAA,MAAM,CAACrC,YAAP;;AAEA;AACAxG,EAAAA,CAAC,CAACmJ,iBAAF,CAAoBD,eAApB,EAAqCL,MAAM,CAAC/I,cAA5C,EAA4D;AAC1DS,IAAAA,IAAI,EAAE,CAAC,GAAGsI,MAAM,CAAChJ,YAAX,EAAyB,CAAzB,CADoD;AAE1DuJ,IAAAA,GAAG,EAAEH,WAFqD,EAA5D;;AAID,CAlDH;;AAoDA1J,CAAC,CAACyI,IAAF,CAAO,2BAAP;AACGC,IADH;AAEK;AACL,kHAHA;;AAKGuB,aALH;;AAOAjK,CAAC,CAACyI,IAAF,CAAO,6BAAP;AACGC,IADH;AAEK;AACL,oHAHA;;AAKGuB,aALH","sourcesContent":["export const description = `\nMemory Synchronization Tests for Texture: read before write, read after write, and write after write to the same subresource.\n\n- TODO: Test synchronization between multiple queues.\n- TODO: Test depth/stencil attachments.\n- TODO: Use non-solid-color texture contents [2]\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { assert, memcpy, unreachable } from '../../../../../common/util/util.js';\nimport { EncodableTextureFormat } from '../../../../capability_info.js';\nimport { GPUTest } from '../../../../gpu_test.js';\nimport { align } from '../../../../util/math.js';\nimport { getTextureCopyLayout } from '../../../../util/texture/layout.js';\nimport {\n  kTexelRepresentationInfo,\n  PerTexelComponent,\n} from '../../../../util/texture/texel_data.js';\n\nimport {\n  kOperationBoundaries,\n  kBoundaryInfo,\n  kAllReadOps,\n  kAllWriteOps,\n  checkOpsValidForContext,\n  Op,\n  OperationBoundary,\n  OperationContext,\n  kOpInfo,\n  kOperationContexts,\n} from './texture_sync_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nconst fullscreenQuadWGSL = `\n  struct VertexOutput {\n    @builtin(position) Position : vec4<f32>;\n  };\n\n  @stage(vertex) fn vert_main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n    var pos = array<vec2<f32>, 6>(\n        vec2<f32>( 1.0,  1.0),\n        vec2<f32>( 1.0, -1.0),\n        vec2<f32>(-1.0, -1.0),\n        vec2<f32>( 1.0,  1.0),\n        vec2<f32>(-1.0, -1.0),\n        vec2<f32>(-1.0,  1.0));\n\n    var output : VertexOutput;\n    output.Position = vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n    return output;\n  }\n`;\n\nclass TextureSyncTestHelper {\n  // We start at the queue context which is top-level.\n  private currentContext: OperationContext = 'queue';\n\n  // Set based on the current context.\n  private queue: GPUQueue;\n  private commandEncoder?: GPUCommandEncoder;\n  private computePassEncoder?: GPUComputePassEncoder;\n  private renderPassEncoder?: GPURenderPassEncoder;\n  private renderBundleEncoder?: GPURenderBundleEncoder;\n\n  private t: GPUTest;\n  private device: GPUDevice;\n  private texture: GPUTexture;\n\n  private commandBuffers: GPUCommandBuffer[] = [];\n  private renderBundles: GPURenderBundle[] = [];\n\n  public readonly kTextureSize = [4, 4] as const;\n  public readonly kTextureFormat: EncodableTextureFormat = 'rgba8unorm';\n\n  constructor(\n    t: GPUTest,\n    textureCreationParams: {\n      usage: GPUTextureUsageFlags;\n    }\n  ) {\n    this.t = t;\n    this.device = t.device;\n    this.queue = t.device.queue;\n    this.texture = t.trackForCleanup(\n      t.device.createTexture({\n        size: this.kTextureSize,\n        format: this.kTextureFormat,\n        ...textureCreationParams,\n      })\n    );\n  }\n\n  /**\n   * Perform a read operation on the test texture.\n   * @return GPUTexture copy containing the contents.\n   */\n  performReadOp({ op, in: context }: { op: Op; in: OperationContext }): GPUTexture {\n    this.ensureContext(context);\n    switch (op) {\n      case 't2t-copy': {\n        const texture = this.t.trackForCleanup(\n          this.device.createTexture({\n            size: this.kTextureSize,\n            format: this.kTextureFormat,\n            usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n          })\n        );\n\n        assert(this.commandEncoder !== undefined);\n        this.commandEncoder.copyTextureToTexture(\n          {\n            texture: this.texture,\n          },\n          { texture },\n          this.kTextureSize\n        );\n        return texture;\n      }\n      case 't2b-copy': {\n        const { byteLength, bytesPerRow } = getTextureCopyLayout(this.kTextureFormat, '2d', [\n          ...this.kTextureSize,\n          1,\n        ]);\n        const buffer = this.t.trackForCleanup(\n          this.device.createBuffer({\n            size: byteLength,\n            usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n          })\n        );\n\n        const texture = this.t.trackForCleanup(\n          this.device.createTexture({\n            size: this.kTextureSize,\n            format: this.kTextureFormat,\n            usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n          })\n        );\n\n        assert(this.commandEncoder !== undefined);\n        this.commandEncoder.copyTextureToBuffer(\n          {\n            texture: this.texture,\n          },\n          { buffer, bytesPerRow },\n          this.kTextureSize\n        );\n        this.commandEncoder.copyBufferToTexture(\n          { buffer, bytesPerRow },\n          { texture },\n          this.kTextureSize\n        );\n        return texture;\n      }\n      case 'sample': {\n        const texture = this.t.trackForCleanup(\n          this.device.createTexture({\n            size: this.kTextureSize,\n            format: this.kTextureFormat,\n            usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.STORAGE_BINDING,\n          })\n        );\n\n        const bindGroupLayout = this.device.createBindGroupLayout({\n          entries: [\n            {\n              binding: 0,\n              visibility: GPUShaderStage.FRAGMENT | GPUShaderStage.COMPUTE,\n              texture: {\n                sampleType: 'unfilterable-float',\n              },\n            },\n            {\n              binding: 1,\n              visibility: GPUShaderStage.FRAGMENT | GPUShaderStage.COMPUTE,\n              storageTexture: {\n                access: 'write-only',\n                format: this.kTextureFormat,\n              },\n            },\n          ],\n        });\n\n        const bindGroup = this.device.createBindGroup({\n          layout: bindGroupLayout,\n          entries: [\n            {\n              binding: 0,\n              resource: this.texture.createView(),\n            },\n            {\n              binding: 1,\n              resource: texture.createView(),\n            },\n          ],\n        });\n\n        switch (context) {\n          case 'render-pass-encoder':\n          case 'render-bundle-encoder': {\n            const module = this.device.createShaderModule({\n              code: `${fullscreenQuadWGSL}\n\n                @group(0) @binding(0) var inputTex: texture_2d<f32>;\n                @group(0) @binding(1) var outputTex: texture_storage_2d<rgba8unorm, write>;\n\n                @stage(fragment) fn frag_main(@builtin(position) fragCoord: vec4<f32>) -> @location(0) vec4<f32> {\n                  let coord = vec2<i32>(fragCoord.xy);\n                  textureStore(outputTex, coord, textureLoad(inputTex, coord, 0));\n                  return vec4<f32>();\n                }\n              `,\n            });\n            const renderPipeline = this.device.createRenderPipeline({\n              layout: this.device.createPipelineLayout({\n                bindGroupLayouts: [bindGroupLayout],\n              }),\n              vertex: {\n                module,\n                entryPoint: 'vert_main',\n              },\n              fragment: {\n                module,\n                entryPoint: 'frag_main',\n\n                // Unused attachment since we can't use textureStore in the vertex shader.\n                // Set writeMask to zero.\n                targets: [\n                  {\n                    format: this.kTextureFormat,\n                    writeMask: 0,\n                  },\n                ],\n              },\n            });\n\n            switch (context) {\n              case 'render-bundle-encoder':\n                assert(this.renderBundleEncoder !== undefined);\n                this.renderBundleEncoder.setPipeline(renderPipeline);\n                this.renderBundleEncoder.setBindGroup(0, bindGroup);\n                this.renderBundleEncoder.draw(6);\n                break;\n              case 'render-pass-encoder':\n                assert(this.renderPassEncoder !== undefined);\n                this.renderPassEncoder.setPipeline(renderPipeline);\n                this.renderPassEncoder.setBindGroup(0, bindGroup);\n                this.renderPassEncoder.draw(6);\n                break;\n            }\n            break;\n          }\n          case 'compute-pass-encoder': {\n            const module = this.device.createShaderModule({\n              code: `\n                @group(0) @binding(0) var inputTex: texture_2d<f32>;\n                @group(0) @binding(1) var outputTex: texture_storage_2d<rgba8unorm, write>;\n\n                @stage(compute) @workgroup_size(8, 8)\n                fn main(@builtin(global_invocation_id) gid : vec3<u32>) {\n                  if (any(gid.xy >= vec2<u32>(textureDimensions(inputTex)))) {\n                    return;\n                  }\n                  let coord = vec2<i32>(gid.xy);\n                  textureStore(outputTex, coord, textureLoad(inputTex, coord, 0));\n                }\n              `,\n            });\n            const computePipeline = this.device.createComputePipeline({\n              layout: this.device.createPipelineLayout({\n                bindGroupLayouts: [bindGroupLayout],\n              }),\n              compute: {\n                module,\n                entryPoint: 'main',\n              },\n            });\n\n            assert(this.computePassEncoder !== undefined);\n            this.computePassEncoder.setPipeline(computePipeline);\n            this.computePassEncoder.setBindGroup(0, bindGroup);\n            this.computePassEncoder.dispatch(\n              Math.ceil(this.kTextureSize[0] / 8),\n              Math.ceil(this.kTextureSize[1] / 8)\n            );\n            break;\n          }\n          default:\n            unreachable();\n        }\n\n        return texture;\n      }\n      case 'b2t-copy':\n      case 'attachment-resolve':\n      case 'attachment-store':\n        unreachable();\n    }\n    unreachable();\n  }\n\n  performWriteOp(\n    { op, in: context }: { op: Op; in: OperationContext },\n    data: PerTexelComponent<number>\n  ) {\n    this.ensureContext(context);\n    switch (op) {\n      case 'attachment-store': {\n        assert(this.commandEncoder !== undefined);\n        this.renderPassEncoder = this.commandEncoder.beginRenderPass({\n          colorAttachments: [\n            {\n              view: this.texture.createView(),\n              // [2] Use non-solid-color texture values\n              clearValue: [data.R ?? 0, data.G ?? 0, data.B ?? 0, data.A ?? 0],\n              loadOp: 'clear',\n              storeOp: 'store',\n            },\n          ],\n        });\n        this.currentContext = 'render-pass-encoder';\n        break;\n      }\n      case 'write-texture': {\n        // [2] Use non-solid-color texture values\n        const rep = kTexelRepresentationInfo[this.kTextureFormat];\n        const texelData = rep.pack(rep.encode(data));\n        const numTexels = this.kTextureSize[0] * this.kTextureSize[1];\n        const fullTexelData = new ArrayBuffer(texelData.byteLength * numTexels);\n        for (let i = 0; i < numTexels; ++i) {\n          memcpy({ src: texelData }, { dst: fullTexelData, start: i * texelData.byteLength });\n        }\n\n        this.queue.writeTexture(\n          { texture: this.texture },\n          fullTexelData,\n          {\n            bytesPerRow: texelData.byteLength * this.kTextureSize[0],\n          },\n          this.kTextureSize\n        );\n        break;\n      }\n      case 't2t-copy': {\n        const texture = this.device.createTexture({\n          size: this.kTextureSize,\n          format: this.kTextureFormat,\n          usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n        });\n\n        // [2] Use non-solid-color texture values\n        const rep = kTexelRepresentationInfo[this.kTextureFormat];\n        const texelData = rep.pack(rep.encode(data));\n        const numTexels = this.kTextureSize[0] * this.kTextureSize[1];\n        const fullTexelData = new ArrayBuffer(texelData.byteLength * numTexels);\n        for (let i = 0; i < numTexels; ++i) {\n          memcpy({ src: texelData }, { dst: fullTexelData, start: i * texelData.byteLength });\n        }\n\n        this.queue.writeTexture(\n          { texture },\n          fullTexelData,\n          {\n            bytesPerRow: texelData.byteLength * this.kTextureSize[0],\n          },\n          this.kTextureSize\n        );\n\n        assert(this.commandEncoder !== undefined);\n        this.commandEncoder.copyTextureToTexture(\n          { texture },\n          { texture: this.texture },\n          this.kTextureSize\n        );\n        break;\n      }\n      case 'b2t-copy': {\n        // [2] Use non-solid-color texture values\n        const rep = kTexelRepresentationInfo[this.kTextureFormat];\n        const texelData = rep.pack(rep.encode(data));\n        const bytesPerRow = align(texelData.byteLength, 256);\n        const fullTexelData = new ArrayBuffer(bytesPerRow * this.kTextureSize[1]);\n        for (let i = 0; i < this.kTextureSize[1]; ++i) {\n          for (let j = 0; j < this.kTextureSize[0]; ++j) {\n            memcpy(\n              { src: texelData },\n              {\n                dst: fullTexelData,\n                start: i * bytesPerRow + j * texelData.byteLength,\n              }\n            );\n          }\n        }\n\n        const buffer = this.t.trackForCleanup(\n          this.device.createBuffer({\n            size: fullTexelData.byteLength,\n            usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n          })\n        );\n\n        this.queue.writeBuffer(buffer, 0, fullTexelData);\n\n        assert(this.commandEncoder !== undefined);\n        this.commandEncoder.copyBufferToTexture(\n          { buffer, bytesPerRow },\n          { texture: this.texture },\n          this.kTextureSize\n        );\n        break;\n      }\n      case 'attachment-resolve': {\n        assert(this.commandEncoder !== undefined);\n        const renderTarget = this.t.trackForCleanup(\n          this.device.createTexture({\n            format: this.kTextureFormat,\n            size: this.kTextureSize,\n            usage: GPUTextureUsage.RENDER_ATTACHMENT,\n            sampleCount: 4,\n          })\n        );\n        this.renderPassEncoder = this.commandEncoder.beginRenderPass({\n          colorAttachments: [\n            {\n              view: renderTarget.createView(),\n              resolveTarget: this.texture.createView(),\n              // [2] Use non-solid-color texture values\n              clearValue: [data.R ?? 0, data.G ?? 0, data.B ?? 0, data.A ?? 0],\n              loadOp: 'clear',\n              storeOp: 'discard',\n            },\n          ],\n        });\n        this.currentContext = 'render-pass-encoder';\n        break;\n      }\n      case 'storage': {\n        const bindGroupLayout = this.device.createBindGroupLayout({\n          entries: [\n            {\n              binding: 0,\n              visibility: GPUShaderStage.FRAGMENT | GPUShaderStage.COMPUTE,\n              storageTexture: {\n                access: 'write-only',\n                format: this.kTextureFormat,\n              },\n            },\n          ],\n        });\n\n        const bindGroup = this.device.createBindGroup({\n          layout: bindGroupLayout,\n          entries: [\n            {\n              binding: 0,\n              resource: this.texture.createView(),\n            },\n          ],\n        });\n\n        // [2] Use non-solid-color texture values\n        const storedValue = `vec4<f32>(${[data.R ?? 0, data.G ?? 0, data.B ?? 0, data.A ?? 0]\n          .map(x => x.toFixed(5))\n          .join(', ')})`;\n\n        switch (context) {\n          case 'render-pass-encoder':\n          case 'render-bundle-encoder': {\n            const module = this.device.createShaderModule({\n              code: `${fullscreenQuadWGSL}\n\n                @group(0) @binding(0) var outputTex: texture_storage_2d<rgba8unorm, write>;\n\n                @stage(fragment) fn frag_main(@builtin(position) fragCoord: vec4<f32>) -> @location(0) vec4<f32> {\n                  textureStore(outputTex, vec2<i32>(fragCoord.xy), ${storedValue});\n                  return vec4<f32>();\n                }\n              `,\n            });\n            const renderPipeline = this.device.createRenderPipeline({\n              layout: this.device.createPipelineLayout({\n                bindGroupLayouts: [bindGroupLayout],\n              }),\n              vertex: {\n                module,\n                entryPoint: 'vert_main',\n              },\n              fragment: {\n                module,\n                entryPoint: 'frag_main',\n\n                // Unused attachment since we can't use textureStore in the vertex shader.\n                // Set writeMask to zero.\n                targets: [\n                  {\n                    format: this.kTextureFormat,\n                    writeMask: 0,\n                  },\n                ],\n              },\n            });\n\n            switch (context) {\n              case 'render-bundle-encoder':\n                assert(this.renderBundleEncoder !== undefined);\n                this.renderBundleEncoder.setPipeline(renderPipeline);\n                this.renderBundleEncoder.setBindGroup(0, bindGroup);\n                this.renderBundleEncoder.draw(6);\n                break;\n              case 'render-pass-encoder':\n                assert(this.renderPassEncoder !== undefined);\n                this.renderPassEncoder.setPipeline(renderPipeline);\n                this.renderPassEncoder.setBindGroup(0, bindGroup);\n                this.renderPassEncoder.draw(6);\n                break;\n            }\n            break;\n          }\n          case 'compute-pass-encoder': {\n            const module = this.device.createShaderModule({\n              code: `\n                @group(0) @binding(0) var outputTex: texture_storage_2d<rgba8unorm, write>;\n\n                @stage(compute) @workgroup_size(8, 8)\n                fn main(@builtin(global_invocation_id) gid : vec3<u32>) {\n                  if (any(gid.xy >= vec2<u32>(textureDimensions(outputTex)))) {\n                    return;\n                  }\n                  let coord = vec2<i32>(gid.xy);\n                  textureStore(outputTex, coord, ${storedValue});\n                }\n              `,\n            });\n            const computePipeline = this.device.createComputePipeline({\n              layout: this.device.createPipelineLayout({\n                bindGroupLayouts: [bindGroupLayout],\n              }),\n              compute: {\n                module,\n                entryPoint: 'main',\n              },\n            });\n\n            assert(this.computePassEncoder !== undefined);\n            this.computePassEncoder.setPipeline(computePipeline);\n            this.computePassEncoder.setBindGroup(0, bindGroup);\n            this.computePassEncoder.dispatch(\n              Math.ceil(this.kTextureSize[0] / 8),\n              Math.ceil(this.kTextureSize[1] / 8)\n            );\n            break;\n          }\n          default:\n            unreachable();\n        }\n        break;\n      }\n      case 't2b-copy':\n      case 'sample':\n        unreachable();\n    }\n  }\n\n  // Ensure that all encoded commands are finished and subitted.\n  ensureSubmit() {\n    this.ensureContext('queue');\n    this.flushCommandBuffers();\n  }\n\n  private popContext(): GPURenderBundle | GPUCommandBuffer | null {\n    switch (this.currentContext) {\n      case 'queue':\n        unreachable();\n        break;\n      case 'command-encoder': {\n        assert(this.commandEncoder !== undefined);\n        const commandBuffer = this.commandEncoder.finish();\n        this.commandEncoder = undefined;\n        this.currentContext = 'queue';\n        return commandBuffer;\n      }\n      case 'compute-pass-encoder':\n        assert(this.computePassEncoder !== undefined);\n        this.computePassEncoder.end();\n        this.computePassEncoder = undefined;\n        this.currentContext = 'command-encoder';\n        break;\n      case 'render-pass-encoder':\n        assert(this.renderPassEncoder !== undefined);\n        this.renderPassEncoder.end();\n        this.renderPassEncoder = undefined;\n        this.currentContext = 'command-encoder';\n        break;\n      case 'render-bundle-encoder': {\n        assert(this.renderBundleEncoder !== undefined);\n        const renderBundle = this.renderBundleEncoder.finish();\n        this.renderBundleEncoder = undefined;\n        this.currentContext = 'render-pass-encoder';\n        return renderBundle;\n      }\n    }\n    return null;\n  }\n\n  private makeDummyAttachment(): GPURenderPassColorAttachment {\n    const texture = this.t.trackForCleanup(\n      this.device.createTexture({\n        format: this.kTextureFormat,\n        size: this.kTextureSize,\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      })\n    );\n    return {\n      view: texture.createView(),\n      loadOp: 'load',\n      storeOp: 'store',\n    };\n  }\n\n  private ensureContext(context: OperationContext) {\n    // Find the common ancestor. So we can transition from currentContext -> context.\n    const ancestorContext =\n      kOperationContexts[\n        Math.min(\n          kOperationContexts.indexOf(context),\n          kOperationContexts.indexOf(this.currentContext)\n        )\n      ];\n\n    // Pop the context until we're at the common ancestor.\n    while (this.currentContext !== ancestorContext) {\n      // About to pop the render pass encoder. Execute any outstanding render bundles.\n      if (this.currentContext === 'render-pass-encoder') {\n        this.flushRenderBundles();\n      }\n\n      const result = this.popContext();\n      if (result) {\n        if (result instanceof GPURenderBundle) {\n          this.renderBundles.push(result);\n        } else {\n          this.commandBuffers.push(result);\n        }\n      }\n    }\n\n    if (this.currentContext === context) {\n      return;\n    }\n\n    switch (context) {\n      case 'queue':\n        unreachable();\n        break;\n      case 'command-encoder':\n        assert(this.currentContext === 'queue');\n        this.commandEncoder = this.device.createCommandEncoder();\n        break;\n      case 'compute-pass-encoder':\n        switch (this.currentContext) {\n          case 'queue':\n            this.commandEncoder = this.device.createCommandEncoder();\n          // fallthrough\n          case 'command-encoder':\n            assert(this.commandEncoder !== undefined);\n            this.computePassEncoder = this.commandEncoder.beginComputePass();\n            break;\n          case 'compute-pass-encoder':\n          case 'render-bundle-encoder':\n          case 'render-pass-encoder':\n            unreachable();\n        }\n        break;\n      case 'render-pass-encoder':\n        switch (this.currentContext) {\n          case 'queue':\n            this.commandEncoder = this.device.createCommandEncoder();\n          // fallthrough\n          case 'command-encoder':\n            assert(this.commandEncoder !== undefined);\n            this.renderPassEncoder = this.commandEncoder.beginRenderPass({\n              colorAttachments: [this.makeDummyAttachment()],\n            });\n            break;\n          case 'render-pass-encoder':\n          case 'render-bundle-encoder':\n          case 'compute-pass-encoder':\n            unreachable();\n        }\n        break;\n      case 'render-bundle-encoder':\n        switch (this.currentContext) {\n          case 'queue':\n            this.commandEncoder = this.device.createCommandEncoder();\n          // fallthrough\n          case 'command-encoder':\n            assert(this.commandEncoder !== undefined);\n            this.renderPassEncoder = this.commandEncoder.beginRenderPass({\n              colorAttachments: [this.makeDummyAttachment()],\n            });\n          // fallthrough\n          case 'render-pass-encoder':\n            this.renderBundleEncoder = this.device.createRenderBundleEncoder({\n              colorFormats: [this.kTextureFormat],\n            });\n            break;\n          case 'render-bundle-encoder':\n          case 'compute-pass-encoder':\n            unreachable();\n        }\n        break;\n    }\n    this.currentContext = context;\n  }\n\n  private flushRenderBundles() {\n    assert(this.renderPassEncoder !== undefined);\n    if (this.renderBundles.length) {\n      this.renderPassEncoder.executeBundles(this.renderBundles);\n      this.renderBundles = [];\n    }\n  }\n\n  private flushCommandBuffers() {\n    if (this.commandBuffers.length) {\n      this.queue.submit(this.commandBuffers);\n      this.commandBuffers = [];\n    }\n  }\n\n  ensureBoundary(boundary: OperationBoundary) {\n    switch (boundary) {\n      case 'command-buffer':\n        this.ensureContext('queue');\n        break;\n      case 'queue-op':\n        this.ensureContext('queue');\n        // Submit any GPUCommandBuffers so the next one is in a separate submit.\n        this.flushCommandBuffers();\n        break;\n      case 'dispatch':\n        // Nothing to do to separate dispatches.\n        assert(this.currentContext === 'compute-pass-encoder');\n        break;\n      case 'draw':\n        // Nothing to do to separate draws.\n        assert(\n          this.currentContext === 'render-pass-encoder' ||\n            this.currentContext === 'render-bundle-encoder'\n        );\n        break;\n      case 'pass':\n        this.ensureContext('command-encoder');\n        break;\n      case 'render-bundle':\n        this.ensureContext('render-pass-encoder');\n        break;\n      case 'execute-bundles':\n        this.ensureContext('render-pass-encoder');\n        // Execute any GPURenderBundles so the next one is in a separate executeBundles.\n        this.flushRenderBundles();\n        break;\n    }\n  }\n}\n\ng.test('rw')\n  .desc(\n    `\n    Perform a 'read' operations on a texture subresource, followed by a 'write' operation.\n    Operations are separated by a 'boundary' (pass, encoder, queue-op, etc.).\n    Test that the results are synchronized.\n    The read should not see the contents written by the subsequent write.`\n  )\n  .params(u =>\n    u\n      .combine('boundary', kOperationBoundaries)\n      .expand('_context', p => kBoundaryInfo[p.boundary].contexts)\n      .expandWithParams(function* ({ _context }) {\n        for (const read of kAllReadOps) {\n          for (const write of kAllWriteOps) {\n            if (checkOpsValidForContext([read, write], _context)) {\n              yield {\n                read: { op: read, in: _context[0] },\n                write: { op: write, in: _context[1] },\n              };\n            }\n          }\n        }\n      })\n  )\n  .fn(t => {\n    const helper = new TextureSyncTestHelper(t, {\n      usage:\n        GPUTextureUsage.COPY_DST |\n        kOpInfo[t.params.read.op].readUsage |\n        kOpInfo[t.params.write.op].writeUsage,\n    });\n    // [2] Use non-solid-color texture value.\n    const texelValue1 = { R: 0, G: 1, B: 0, A: 1 } as const;\n    const texelValue2 = { R: 1, G: 0, B: 0, A: 1 } as const;\n\n    // Initialize the texture with something.\n    helper.performWriteOp({ op: 'write-texture', in: 'queue' }, texelValue1);\n    const readbackTexture = helper.performReadOp(t.params.read);\n    helper.ensureBoundary(t.params.boundary);\n    helper.performWriteOp(t.params.write, texelValue2);\n    helper.ensureSubmit();\n\n    // Contents should be the first value written, not the second.\n    t.expectSingleColor(readbackTexture, helper.kTextureFormat, {\n      size: [...helper.kTextureSize, 1],\n      exp: texelValue1,\n    });\n  });\n\ng.test('wr')\n  .desc(\n    `\n    Perform a 'write' operation on a texture subresource, followed by a 'read' operation.\n    Operations are separated by a 'boundary' (pass, encoder, queue-op, etc.).\n    Test that the results are synchronized.\n    The read should see exactly the contents written by the previous write.\n\n    - TODO: Use non-solid-color texture contents [2]`\n  )\n  .params(u =>\n    u\n      .combine('boundary', kOperationBoundaries)\n      .expand('_context', p => kBoundaryInfo[p.boundary].contexts)\n      .expandWithParams(function* ({ _context }) {\n        for (const read of kAllReadOps) {\n          for (const write of kAllWriteOps) {\n            if (checkOpsValidForContext([write, read], _context)) {\n              yield {\n                write: { op: write, in: _context[0] },\n                read: { op: read, in: _context[1] },\n              };\n            }\n          }\n        }\n      })\n  )\n  .fn(t => {\n    const helper = new TextureSyncTestHelper(t, {\n      usage: kOpInfo[t.params.read.op].readUsage | kOpInfo[t.params.write.op].writeUsage,\n    });\n    // [2] Use non-solid-color texture value.\n    const texelValue = { R: 0, G: 1, B: 0, A: 1 } as const;\n\n    helper.performWriteOp(t.params.write, texelValue);\n    helper.ensureBoundary(t.params.boundary);\n    const readbackTexture = helper.performReadOp(t.params.read);\n    helper.ensureSubmit();\n\n    // Contents should be exactly the values written.\n    t.expectSingleColor(readbackTexture, helper.kTextureFormat, {\n      size: [...helper.kTextureSize, 1],\n      exp: texelValue,\n    });\n  });\n\ng.test('ww')\n  .desc(\n    `\n    Perform a 'first' write operation on a texture subresource, followed by a 'second' write operation.\n    Operations are separated by a 'boundary' (pass, encoder, queue-op, etc.).\n    Test that the results are synchronized.\n    The second write should overwrite the contents of the first.`\n  )\n  .params(u =>\n    u\n      .combine('boundary', kOperationBoundaries)\n      .expand('_context', p => kBoundaryInfo[p.boundary].contexts)\n      .expandWithParams(function* ({ _context }) {\n        for (const first of kAllWriteOps) {\n          for (const second of kAllWriteOps) {\n            if (checkOpsValidForContext([first, second], _context)) {\n              yield {\n                first: { op: first, in: _context[0] },\n                second: { op: second, in: _context[1] },\n              };\n            }\n          }\n        }\n      })\n  )\n  .fn(t => {\n    const helper = new TextureSyncTestHelper(t, {\n      usage:\n        GPUTextureUsage.COPY_SRC |\n        kOpInfo[t.params.first.op].writeUsage |\n        kOpInfo[t.params.second.op].writeUsage,\n    });\n    // [2] Use non-solid-color texture value.\n    const texelValue1 = { R: 1, G: 0, B: 0, A: 1 } as const;\n    const texelValue2 = { R: 0, G: 1, B: 0, A: 1 } as const;\n\n    helper.performWriteOp(t.params.first, texelValue1);\n    helper.ensureBoundary(t.params.boundary);\n    helper.performWriteOp(t.params.second, texelValue2);\n    helper.ensureSubmit();\n\n    // Read back the contents so we can test the result.\n    const readbackTexture = helper.performReadOp({ op: 't2t-copy', in: 'command-encoder' });\n    helper.ensureSubmit();\n\n    // Contents should be the second value written.\n    t.expectSingleColor(readbackTexture, helper.kTextureFormat, {\n      size: [...helper.kTextureSize, 1],\n      exp: texelValue2,\n    });\n  });\n\ng.test('rw,single_pass,load_store')\n  .desc(\n    `\n    TODO: Test memory synchronization when loading from a texture subresource in a single pass and storing to it.`\n  )\n  .unimplemented();\n\ng.test('rw,single_pass,load_resolve')\n  .desc(\n    `\n    TODO: Test memory synchronization when loading from a texture subresource in a single pass and resolving to it.`\n  )\n  .unimplemented();\n"],"file":"same_subresource.spec.js"}