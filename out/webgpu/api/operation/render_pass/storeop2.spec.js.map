{"version":3,"sources":["../../../../../src/webgpu/api/operation/render_pass/storeop2.spec.ts"],"names":["description","makeTestGroup","GPUTest","g","test","desc","paramsSimple","storeOp","_expected","fn","t","renderTexture","device","createTexture","size","width","height","depthOrArrayLayers","format","usage","GPUTextureUsage","COPY_SRC","RENDER_ATTACHMENT","renderPipeline","createRenderPipeline","vertex","module","createShaderModule","code","entryPoint","fragment","targets","primitive","topology","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","view","createView","params","loadValue","r","b","a","setPipeline","draw","endPass","queue","submit","finish","expectSingleColor","exp","R"],"mappings":"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","sourcesContent":["export const description = `\nrenderPass store op test that drawn quad is either stored or cleared based on storeop\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('storeOp_controls_whether_1x1_drawn_quad_is_stored')\n  .desc(\n    `\nTODO: is this duplicated with api,operation,render_pass,storeOp?\nTODO: needs review and rename\n`\n  )\n  .paramsSimple([\n    { storeOp: 'store', _expected: 1 }, //\n    { storeOp: 'discard', _expected: 0 },\n  ] as const)\n  .fn(async t => {\n    const renderTexture = t.device.createTexture({\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      format: 'r8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    // create render pipeline\n    const renderPipeline = t.device.createRenderPipeline({\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n            @stage(vertex) fn main(\n              @builtin(vertex_index) VertexIndex : u32\n              ) -> @builtin(position) vec4<f32> {\n              var pos : array<vec2<f32>, 3> = array<vec2<f32>, 3>(\n                  vec2<f32>( 1.0, -1.0),\n                  vec2<f32>( 1.0,  1.0),\n                  vec2<f32>(-1.0,  1.0));\n              return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n            }\n            `,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `\n            @stage(fragment) fn main() -> @location(0) vec4<f32> {\n              return vec4<f32>(1.0, 0.0, 0.0, 1.0);\n            }\n            `,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: 'r8unorm' }],\n      },\n      primitive: { topology: 'triangle-list' },\n    });\n\n    // encode pass and submit\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: renderTexture.createView(),\n          storeOp: t.params.storeOp,\n          loadValue: { r: 0.0, g: 0.0, b: 0.0, a: 0.0 },\n        },\n      ],\n    });\n    pass.setPipeline(renderPipeline);\n    pass.draw(3);\n    pass.endPass();\n    t.device.queue.submit([encoder.finish()]);\n\n    // expect the buffer to be clear\n    t.expectSingleColor(renderTexture, 'r8unorm', {\n      size: [1, 1, 1],\n      exp: { R: t.params._expected },\n    });\n  });\n"],"file":"storeop2.spec.js"}