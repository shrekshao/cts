{"version":3,"sources":["../../../../../src/webgpu/api/operation/render_pass/storeOp.spec.ts"],"names":["description","makeTestGroup","kTextureFormatInfo","kEncodableTextureFormats","kSizedDepthStencilFormats","GPUTest","kMipLevel","kMipLevelCount","kNumColorAttachments","kArrayLayers","kStoreOps","kHeight","kWidth","g","test","params","u","combine","fn","t","kColorFormat","colorAttachment","device","createTexture","format","size","width","height","depthOrArrayLayers","usage","GPUTextureUsage","COPY_SRC","RENDER_ATTACHMENT","colorAttachmentView","createView","kDepthStencilFormat","depthStencilAttachment","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","view","loadValue","r","b","a","storeOp","colorStoreOperation","depthLoadValue","depthStoreOp","depthStencilStoreOperation","stencilLoadValue","stencilStoreOp","endPass","queue","submit","finish","expectedColorValue","R","G","B","A","expectSingleColor","exp","expectedDepthValue","Depth","filter","colorFormat","info","color","renderable","beginSubcases","arrayLayer","mipLevelCount","colorViewDesc","baseArrayLayer","baseMipLevel","mipLevel","arrayLayerCount","storeOperation","expectedValue","slice","layout","i","push","renderPassColorAttachments","storeOperation1","storeOperation2","desc","depthStencilFormat","depthStencilViewDesc","depthStencilAttachmentView"],"mappings":"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","sourcesContent":["export const description = `API Operation Tests for RenderPass StoreOp.\n\n  Test Coverage:\n\n  - Tests that color and depth-stencil store operations {'clear', 'store'} work correctly for a\n    render pass with both a color attachment and depth-stencil attachment.\n      TODO: use depth24plus-stencil8\n\n  - Tests that store operations {'clear', 'store'} work correctly for a render pass with multiple\n    color attachments.\n      TODO: test with more interesting loadOp values\n\n  - Tests that store operations {'clear', 'store'} work correctly for a render pass with a color\n    attachment for:\n      - All renderable color formats\n      - mip level set to {'0', mip > '0'}\n      - array layer set to {'0', layer > '1'} for 2D textures\n      TODO: depth slice set to {'0', slice > '0'} for 3D textures\n\n  - Tests that store operations {'clear', 'store'} work correctly for a render pass with a\n    depth-stencil attachment for:\n      - All renderable depth-stencil formats\n      - mip level set to {'0', mip > '0'}\n      - array layer set to {'0', layer > '1'} for 2D textures\n      TODO: test depth24plus and depth24plus-stencil8 formats\n      TODO: test that depth and stencil aspects are set seperately\n      TODO: depth slice set to {'0', slice > '0'} for 3D textures\n      TODO: test with more interesting loadOp values`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport {\n  kTextureFormatInfo,\n  kEncodableTextureFormats,\n  kSizedDepthStencilFormats,\n} from '../../../capability_info.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { PerTexelComponent } from '../../../util/texture/texel_data.js';\n\n// Test with a zero and non-zero mip.\nconst kMipLevel: number[] = [0, 1];\nconst kMipLevelCount = 2;\n\n// Test with different numbers of color attachments.\ntype NumColorAttachments = 1 | 2 | 3 | 4;\nconst kNumColorAttachments: NumColorAttachments[] = [1, 2, 3, 4];\n\n// Test with a zero and non-zero array layer.\nconst kArrayLayers: number[] = [0, 1];\n\nconst kStoreOps: GPUStoreOp[] = ['clear', 'store'];\n\nconst kHeight = 2;\nconst kWidth = 2;\n\nexport const g = makeTestGroup(GPUTest);\n\n// Tests a render pass with both a color and depth stencil attachment to ensure store operations are\n// set independently.\ng.test('render_pass_store_op,color_attachment_with_depth_stencil_attachment')\n  .params(u =>\n    u //\n      .combine('colorStoreOperation', kStoreOps)\n      .combine('depthStencilStoreOperation', kStoreOps)\n  )\n  .fn(t => {\n    // Create a basic color attachment.\n    const kColorFormat: GPUTextureFormat = 'rgba8unorm';\n    const colorAttachment = t.device.createTexture({\n      format: kColorFormat,\n      size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const colorAttachmentView = colorAttachment.createView();\n\n    // Create a basic depth/stencil attachment.\n    const kDepthStencilFormat: GPUTextureFormat = 'depth32float';\n    const depthStencilAttachment = t.device.createTexture({\n      format: kDepthStencilFormat,\n      size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    // Color load operation will clear to {1.0, 1.0, 1.0, 1.0}.\n    // Depth & stencil load operations will clear to 1.0.\n    // Store operations are determined by test the params.\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: colorAttachmentView,\n          loadValue: { r: 1.0, g: 1.0, b: 1.0, a: 1.0 },\n          storeOp: t.params.colorStoreOperation,\n        },\n      ],\n      depthStencilAttachment: {\n        view: depthStencilAttachment.createView(),\n        depthLoadValue: 1.0,\n        depthStoreOp: t.params.depthStencilStoreOperation,\n        stencilLoadValue: 1.0,\n        stencilStoreOp: t.params.depthStencilStoreOperation,\n      },\n    });\n    pass.endPass();\n\n    t.device.queue.submit([encoder.finish()]);\n\n    // Check that the correct store operation occurred.\n    let expectedColorValue: PerTexelComponent<number> = {};\n    if (t.params.colorStoreOperation === 'clear') {\n      // If colorStoreOp was clear, the texture should now contain {0.0, 0.0, 0.0, 0.0}.\n      expectedColorValue = { R: 0.0, G: 0.0, B: 0.0, A: 0.0 };\n    } else if (t.params.colorStoreOperation === 'store') {\n      // If colorStoreOP was store, the texture should still contain {1.0, 1.0, 1.0, 1.0}.\n      expectedColorValue = { R: 1.0, G: 1.0, B: 1.0, A: 1.0 };\n    }\n    t.expectSingleColor(colorAttachment, kColorFormat, {\n      size: [kHeight, kWidth, 1],\n      exp: expectedColorValue,\n    });\n\n    // Check that the correct store operation occurred.\n    let expectedDepthValue: PerTexelComponent<number> = {};\n    if (t.params.depthStencilStoreOperation === 'clear') {\n      // If depthStencilStoreOperation was clear, the texture's depth component should be 0.0, and\n      // the stencil component should be 0.0.\n      expectedDepthValue = { Depth: 0.0 };\n    } else if (t.params.depthStencilStoreOperation === 'store') {\n      // If depthStencilStoreOperation was store, the texture's depth component should be 1.0, and\n      // the stencil component should be 1.0.\n      expectedDepthValue = { Depth: 1.0 };\n    }\n    t.expectSingleColor(depthStencilAttachment, kDepthStencilFormat, {\n      size: [kHeight, kWidth, 1],\n      exp: expectedDepthValue,\n    });\n  });\n\n// Tests that render pass color attachment store operations work correctly for all renderable color\n// formats, mip levels and array layers.\ng.test('render_pass_store_op,color_attachment_only')\n  .params(u =>\n    u\n      .combine('colorFormat', kEncodableTextureFormats)\n      // Filter out any non-renderable formats\n      .filter(({ colorFormat }) => {\n        const info = kTextureFormatInfo[colorFormat];\n        return info.color && info.renderable;\n      })\n      .combine('storeOperation', kStoreOps)\n      .beginSubcases()\n      .combine('mipLevel', kMipLevel)\n      .combine('arrayLayer', kArrayLayers)\n  )\n  .fn(t => {\n    const colorAttachment = t.device.createTexture({\n      format: t.params.colorFormat,\n      size: { width: kWidth, height: kHeight, depthOrArrayLayers: t.params.arrayLayer + 1 },\n      mipLevelCount: kMipLevelCount,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const colorViewDesc: GPUTextureViewDescriptor = {\n      baseArrayLayer: t.params.arrayLayer,\n      baseMipLevel: t.params.mipLevel,\n      mipLevelCount: 1,\n      arrayLayerCount: 1,\n    };\n\n    const colorAttachmentView = colorAttachment.createView(colorViewDesc);\n\n    // Color load operation will clear to {1.0, 0.0, 0.0, 1.0}.\n    // Color store operation is determined by the test params.\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: colorAttachmentView,\n          loadValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n          storeOp: t.params.storeOperation,\n        },\n      ],\n    });\n    pass.endPass();\n    t.device.queue.submit([encoder.finish()]);\n\n    // Check that the correct store operation occurred.\n    let expectedValue: PerTexelComponent<number> = {};\n    if (t.params.storeOperation === 'clear') {\n      // If colorStoreOp was clear, the texture should now contain {0.0, 0.0, 0.0, 0.0}.\n      expectedValue = { R: 0.0, G: 0.0, B: 0.0, A: 0.0 };\n    } else if (t.params.storeOperation === 'store') {\n      // If colorStoreOP was store, the texture should still contain {1.0, 0.0, 0.0, 1.0}.\n      expectedValue = { R: 1.0, G: 0.0, B: 0.0, A: 1.0 };\n    }\n\n    t.expectSingleColor(colorAttachment, t.params.colorFormat, {\n      size: [kHeight, kWidth, 1],\n      slice: t.params.arrayLayer,\n      exp: expectedValue,\n      layout: { mipLevel: t.params.mipLevel },\n    });\n  });\n\n// Test with multiple color attachments to ensure each attachment's storeOp is set independently.\ng.test('render_pass_store_op,multiple_color_attachments')\n  .params(u =>\n    u\n      .combine('storeOperation1', kStoreOps)\n      .combine('storeOperation2', kStoreOps)\n      .beginSubcases()\n      .combine('colorAttachments', kNumColorAttachments)\n  )\n  .fn(t => {\n    const kColorFormat: GPUTextureFormat = 'rgba8unorm';\n    const colorAttachments: GPUTexture[] = [];\n\n    for (let i = 0; i < t.params.colorAttachments; i++) {\n      colorAttachments.push(\n        t.device.createTexture({\n          format: kColorFormat,\n          size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n          usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n        })\n      );\n    }\n\n    // Color load operation will clear to {1.0, 1.0, 1.0, 1.0}\n    // Color store operation is determined by test params. Use storeOperation1 for even numbered\n    // attachments and storeOperation2 for odd numbered attachments.\n    const renderPassColorAttachments: GPURenderPassColorAttachment[] = [];\n    for (let i = 0; i < t.params.colorAttachments; i++) {\n      renderPassColorAttachments.push({\n        view: colorAttachments[i].createView(),\n        loadValue: { r: 1.0, g: 1.0, b: 1.0, a: 1.0 },\n        storeOp: i % 2 === 0 ? t.params.storeOperation1 : t.params.storeOperation2,\n      });\n    }\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: renderPassColorAttachments,\n    });\n    pass.endPass();\n    t.device.queue.submit([encoder.finish()]);\n\n    // Check that the correct store operation occurred.\n    let expectedValue: PerTexelComponent<number> = {};\n    for (let i = 0; i < t.params.colorAttachments; i++) {\n      if (renderPassColorAttachments[i].storeOp === 'clear') {\n        // If colorStoreOp was clear, the texture should now contain {0.0, 0.0, 0.0, 0.0}.\n        expectedValue = { R: 0.0, G: 0.0, B: 0.0, A: 0.0 };\n      } else if (renderPassColorAttachments[i].storeOp === 'store') {\n        // If colorStoreOP was store, the texture should still contain {1.0, 1.0, 1.0, 1.0}.\n        expectedValue = { R: 1.0, G: 1.0, B: 1.0, A: 1.0 };\n      }\n      t.expectSingleColor(colorAttachments[i], kColorFormat, {\n        size: [kHeight, kWidth, 1],\n        exp: expectedValue,\n      });\n    }\n  });\n\ng.test('render_pass_store_op,depth_stencil_attachment_only')\n  .desc(\n    `\nTests that render pass depth stencil store operations work correctly for all renderable color\nformats, mip levels and array layers.\n\n- x= all (sized) depth stencil formats, all store ops, multiple mip levels, multiple array layers\n\nTODO: Also test unsized depth/stencil formats\n  `\n  )\n  .params(u =>\n    u\n      .combine('depthStencilFormat', kSizedDepthStencilFormats) // TODO\n      .combine('storeOperation', kStoreOps)\n      .beginSubcases()\n      .combine('mipLevel', kMipLevel)\n      .combine('arrayLayer', kArrayLayers)\n  )\n  .fn(t => {\n    const depthStencilAttachment = t.device.createTexture({\n      format: t.params.depthStencilFormat,\n      size: { width: kWidth, height: kHeight, depthOrArrayLayers: t.params.arrayLayer + 1 },\n      mipLevelCount: kMipLevelCount,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const depthStencilViewDesc: GPUTextureViewDescriptor = {\n      baseArrayLayer: t.params.arrayLayer,\n      baseMipLevel: t.params.mipLevel,\n      mipLevelCount: 1,\n      arrayLayerCount: 1,\n    };\n\n    const depthStencilAttachmentView = depthStencilAttachment.createView(depthStencilViewDesc);\n\n    // Depth-stencil load operation will clear to depth = 1.0, stencil = 1.0.\n    // Depth-stencil store operate is determined by test params.\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [],\n      depthStencilAttachment: {\n        view: depthStencilAttachmentView,\n        depthLoadValue: 1.0,\n        depthStoreOp: t.params.storeOperation,\n        stencilLoadValue: 1.0,\n        stencilStoreOp: t.params.storeOperation,\n      },\n    });\n    pass.endPass();\n    t.device.queue.submit([encoder.finish()]);\n\n    let expectedValue: PerTexelComponent<number> = {};\n    if (t.params.storeOperation === 'clear') {\n      // If depthStencilStoreOperation was clear, the texture's depth component should be 0.0,\n      expectedValue = { Depth: 0.0 };\n    } else if (t.params.storeOperation === 'store') {\n      // If depthStencilStoreOperation was store, the texture's depth component should be 1.0,\n      expectedValue = { Depth: 1.0 };\n    }\n\n    t.expectSingleColor(depthStencilAttachment, t.params.depthStencilFormat, {\n      size: [kHeight, kWidth, 1],\n      slice: t.params.arrayLayer,\n      exp: expectedValue,\n      layout: { mipLevel: t.params.mipLevel },\n    });\n  });\n"],"file":"storeOp.spec.js"}