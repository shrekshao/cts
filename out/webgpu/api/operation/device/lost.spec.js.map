{"version":3,"sources":["../../../../../src/webgpu/api/operation/device/lost.spec.ts"],"names":["description","Fixture","makeTestGroup","attemptGarbageCollection","getGPU","assert","assertNotSettledWithinTime","raceWithRejectOnTimeout","DeviceLostTests","kDeviceLostTimeoutMS","getDeviceLostWithTimeout","lost","expectDeviceDestroyed","device","eventualAsyncExpectation","niceStack","expect","reason","ex","message","rec","expectationFailed","g","test","desc","fn","t","adapter","requestAdapter","requestDevice","destroy","lostPromise1","lostPromise2","lostPromise3","lost1","lost2","lost3","lostPromise4","lost4"],"mappings":"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","sourcesContent":["export const description = `\nTests for GPUDevice.lost.\n`;\n\nimport { Fixture } from '../../../../common/framework/fixture.js';\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { attemptGarbageCollection } from '../../../../common/util/collect_garbage.js';\nimport { getGPU } from '../../../../common/util/navigator_gpu.js';\nimport {\n  assert,\n  assertNotSettledWithinTime,\n  raceWithRejectOnTimeout,\n} from '../../../../common/util/util.js';\n\nclass DeviceLostTests extends Fixture {\n  // Default timeout for waiting for device lost is 2 seconds.\n  readonly kDeviceLostTimeoutMS = 2000;\n\n  getDeviceLostWithTimeout(lost: Promise<GPUDeviceLostInfo>): Promise<GPUDeviceLostInfo> {\n    return raceWithRejectOnTimeout(lost, this.kDeviceLostTimeoutMS, 'device was not lost');\n  }\n\n  expectDeviceDestroyed(device: GPUDevice): void {\n    this.eventualAsyncExpectation(async niceStack => {\n      try {\n        const lost = await this.getDeviceLostWithTimeout(device.lost);\n        this.expect(lost.reason === 'destroyed', 'device was lost from destroy');\n      } catch (ex) {\n        niceStack.message = 'device was not lost';\n        this.rec.expectationFailed(niceStack);\n      }\n    });\n  }\n}\n\nexport const g = makeTestGroup(DeviceLostTests);\n\ng.test('not_lost_on_gc')\n  .desc(\n    `'lost' is never resolved by GPUDevice being garbage collected (with attemptGarbageCollection).`\n  )\n  .fn(async t => {\n    // Wraps a lost promise object creation in a function scope so that the device has the best\n    // chance of being gone and ready for GC before trying to resolve the lost promise.\n    const { lost } = await (async () => {\n      const adapter = await getGPU().requestAdapter();\n      assert(adapter !== null);\n      const lost = (await adapter.requestDevice()).lost;\n      return { lost };\n    })();\n    await assertNotSettledWithinTime(lost, t.kDeviceLostTimeoutMS, 'device was unexpectedly lost');\n\n    await attemptGarbageCollection();\n  });\n\ng.test('lost_on_destroy')\n  .desc(`'lost' is resolved, with reason='destroyed', on GPUDevice.destroy().`)\n  .fn(async t => {\n    const adapter = await getGPU().requestAdapter();\n    assert(adapter !== null);\n    const device: GPUDevice = await adapter.requestDevice();\n    t.expectDeviceDestroyed(device);\n    device.destroy();\n  });\n\ng.test('same_object')\n  .desc(`'lost' provides the same Promise and GPUDeviceLostInfo objects each time it's accessed.`)\n  .fn(async t => {\n    const adapter = await getGPU().requestAdapter();\n    assert(adapter !== null);\n    const device: GPUDevice = await adapter.requestDevice();\n\n    // The promises should be the same promise object.\n    const lostPromise1 = device.lost;\n    const lostPromise2 = device.lost;\n    t.expect(lostPromise1 === lostPromise2);\n\n    // Promise object should still be the same after destroy.\n    device.destroy();\n    const lostPromise3 = device.lost;\n    t.expect(lostPromise1 === lostPromise3);\n\n    // The results should also be the same result object.\n    const lost1 = await t.getDeviceLostWithTimeout(lostPromise1);\n    const lost2 = await t.getDeviceLostWithTimeout(lostPromise2);\n    const lost3 = await t.getDeviceLostWithTimeout(lostPromise3);\n    // Promise object should still be the same after we've been notified about device loss.\n    const lostPromise4 = device.lost;\n    t.expect(lostPromise1 === lostPromise4);\n    const lost4 = await t.getDeviceLostWithTimeout(lostPromise4);\n    t.expect(lost1 === lost2 && lost2 === lost3 && lost3 === lost4);\n  });\n"],"file":"lost.spec.js"}