{"version":3,"sources":["../../../../../src/webgpu/api/operation/device/lost.spec.ts"],"names":["description","Fixture","makeTestGroup","g","test","desc","unimplemented"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAFO,CAIP,SAASC,OAAT,QAAwB,yCAAxB;AACA,SAASC,aAAT,QAA8B,4CAA9B;;AAEA,OAAO,MAAMC,CAAC,GAAGD,aAAa,CAACD,OAAD,CAAvB;;AAEPE,CAAC,CAACC,IAAF,CAAO,gBAAP;AACGC,IADH;AAEK,gGAFL;;AAIGC,aAJH;;AAMAH,CAAC,CAACC,IAAF,CAAO,qBAAP;AACGC,IADH,CACS,gFADT;AAEGC,aAFH;;AAIAH,CAAC,CAACC,IAAF,CAAO,aAAP;AACGC,IADH;AAEK;AACL,8FAHA;;AAKGC,aALH","sourcesContent":["export const description = `\nTests for GPUDevice.lost.\n`;\n\nimport { Fixture } from '../../../../common/framework/fixture.js';\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\n\nexport const g = makeTestGroup(Fixture);\n\ng.test('not_lost_on_gc')\n  .desc(\n    `'lost' is never resolved by GPUDevice being garbage collected (with attemptGarbageCollection).`\n  )\n  .unimplemented();\n\ng.test('not_lost_on_destroy')\n  .desc(`'lost' is not resolved on GPUDevice.destroy() (if GPUDevice.destroy is added).`)\n  .unimplemented();\n\ng.test('same_object')\n  .desc(\n    `'lost' provides a [new? same?] Promise object with a [new? same?] GPUDeviceLostInfo object\neach time it's accessed. (Not sure what the semantic is supposed to be, need to investigate.)`\n  )\n  .unimplemented();\n"],"file":"lost.spec.js"}