{"version":3,"sources":["../../../../../src/webgpu/api/operation/rendering/depth_clip_clamp.spec.ts"],"names":["description","makeTestGroup","kDepthStencilFormats","kTextureFormatInfo","GPUTest","checkElementsBetween","checkElementsPassPredicate","g","test","desc","params","u","combine","filter","p","format","depth","fn","t","clampDepth","writeDepth","multisampled","selectDeviceOrSkipTestCase","undefined","feature","info","kNumDepthValues","kNumTestPoints","kViewportMinDepth","kViewportMaxDepth","shaderSource","module","device","createShaderModule","code","testPipeline","createRenderPipeline","vertex","entryPoint","primitive","topology","depthStencil","depthWriteEnabled","multisample","count","fragment","targets","checkPipeline","depthCompare","dsTexture","createTexture","size","usage","GPUTextureUsage","RENDER_ATTACHMENT","COPY_SRC","sampleCount","dsTextureView","createView","checkTextureDesc","checkTexture","checkTextureView","checkTextureMSView","dsActual","bytesPerBlock","createBuffer","GPUBufferUsage","COPY_DST","MAP_READ","dsExpected","checkBuffer","fragInputZFailedBuffer","STORAGE","testBindGroup","createBindGroup","layout","getBindGroupLayout","entries","binding","resource","buffer","enc","createCommandEncoder","pass","beginRenderPass","colorAttachments","depthStencilAttachment","view","depthLoadValue","depthStoreOp","stencilLoadValue","stencilStoreOp","setPipeline","setBindGroup","setViewport","draw","endPass","copyTextureToBuffer","texture","loadValue","resolveTarget","storeOp","queue","submit","finish","expectGPUBufferValuesPassCheck","a","type","Float32Array","typedLength","kCheckPassedValue","predicatePrinter","leftHeader","getValueForCell","index","Promise","all","mapAsync","GPUMapMode","READ","act","getMappedRange","exp","push","toFixed","value","Uint8Array","method","initPipeline","testTextureDesc","testTexture","testTextureView","testTextureMSView","resultBuffer","expectGPUBufferValuesEqual"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,CAPO,CASP,SAASC,aAAT,QAA8B,4CAA9B;AACA,SAASC,oBAAT,EAA+BC,kBAA/B,QAAyD,6BAAzD;AACA,SAASC,OAAT,QAAwB,sBAAxB;AACA;AACEC,oBADF;AAEEC,0BAFF;;AAIO,iCAJP;;AAMA,OAAO,MAAMC,CAAC,GAAGN,aAAa,CAACG,OAAD,CAAvB;;AAEPG,CAAC,CAACC,IAAF,CAAO,sBAAP;AACGC,IADH;AAEK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+FAjBA;;AAmBGC,MAnBH,CAmBU,CAAAC,CAAC;AACPA,CAAC,CAAC;AAAD,CACEC,OADH,CACW,QADX,EACqBV,oBADrB;AAEGW,MAFH,CAEUC,CAAC,IAAIX,kBAAkB,CAACW,CAAC,CAACC,MAAH,CAAlB,CAA6BC,KAF5C;AAGGJ,OAHH,CAGW,YAHX,EAGyB,CAAC,KAAD,EAAQ,IAAR,CAHzB;AAIGA,OAJH,CAIW,YAJX,EAIyB,CAAC,KAAD,EAAQ,IAAR,CAJzB;AAKGA,OALH,CAKW,cALX,EAK2B,CAAC,KAAD,EAAQ,IAAR,CAL3B,CApBJ;;AA2BGK,EA3BH,CA2BM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEH,MAAF,EAAUI,UAAV,EAAsBC,UAAtB,EAAkCC,YAAlC,KAAmDH,CAAC,CAACR,MAA3D;AACA,QAAMQ,CAAC,CAACI,0BAAF,CAA6B;AACjCH,EAAAA,UAAU,GAAG,gBAAH,GAAsBI,SADC;AAEjCpB,EAAAA,kBAAkB,CAACY,MAAD,CAAlB,CAA2BS,OAFM,CAA7B,CAAN;;AAIA,QAAMC,IAAI,GAAGtB,kBAAkB,CAACY,MAAD,CAA/B;;AAEA;AACA,QAAMW,eAAe,GAAG,CAAxB;AACA;AACA,QAAMC,cAAc,GAAGD,eAAe,GAAGA,eAAzC;AACA,QAAME,iBAAiB,GAAG,IAA1B;AACA,QAAMC,iBAAiB,GAAG,IAA1B;;AAEA,QAAMC,YAAY,GAAI;AAC1B;AACA,yCAAyCJ,eAAgB,kBAAiBA,eAAgB;AAC1F;AACA;AACA,yBAAyBE,iBAAkB;AAC3C,yBAAyBC,iBAAkB;AAC3C;AACA;AACA;AACA,0CAA0CF,cAAe;AACzD;AACA;AACA;AACA;AACA;AACA,+BAA+BD,eAAgB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqCC,cAAe;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0CD,eAAgB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsDA,eAAgB;AACtE;AACA,wCAAwCN,UAAU,GAAG,cAAH,GAAoB,aAAc;AACpF;AACA,cAAc,CAACD,UAAW;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAzGI;AA0GA,QAAMY,MAAM,GAAGb,CAAC,CAACc,MAAF,CAASC,kBAAT,CAA4B,EAAEC,IAAI,EAAEJ,YAAR,EAA5B,CAAf;;AAEA;AACA;AACA,QAAMK,YAAY,GAAGjB,CAAC,CAACc,MAAF,CAASI,oBAAT,CAA8B;AACjDC,IAAAA,MAAM,EAAE,EAAEN,MAAF,EAAUO,UAAU,EAAE,OAAtB,EADyC;AAEjDC,IAAAA,SAAS,EAAE;AACTC,MAAAA,QAAQ,EAAE,YADD;AAET;AACA;AACArB,MAAAA,UAAU,EAAEA,UAAU,IAAII,SAJjB,EAFsC;;AAQjDkB,IAAAA,YAAY,EAAE,EAAE1B,MAAF,EAAU2B,iBAAiB,EAAE,IAA7B,EARmC;AASjDC,IAAAA,WAAW,EAAEtB,YAAY,GAAG,EAAEuB,KAAK,EAAE,CAAT,EAAH,GAAkBrB,SATM;AAUjDsB,IAAAA,QAAQ,EAA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","sourcesContent":["export const description = `\nTests for depth clipping, depth clamping (at various points in the pipeline), and maybe extended\ndepth ranges as well.\n\nTODO: Based on documentation and experimental results, depth should actually always be clamped.\nThe depth-clamping feature here is actually used to toggle depth _clipping_. These tests need to be\nupdated to say what they mean, once that's possible.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { kDepthStencilFormats, kTextureFormatInfo } from '../../../capability_info.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport {\n  checkElementsBetween,\n  checkElementsPassPredicate,\n  CheckElementsSupplementalTableRows,\n} from '../../../util/check_contents.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('depth_clamp_and_clip')\n  .desc(\n    `\nDepth written to the depth attachment should always be in the range of the viewport depth,\neven if it was written by the fragment shader (using frag_depth). If depth clipping is enabled,\nprimitives should be clipped to the viewport depth before rasterization; if not, these fragments\nshould be rasterized, and the fragment shader should receive out-of-viewport position.z values.\n\nTo test this, render NxN points, with N vertex depth values, by (if writeDepth=true) N\nfrag_depth values with the viewport depth set to [0.25,0.75].\n\nWhile rendering, check the fragment input position.z has the expected value (for all fragments that\nwere produced by the rasterizer) by writing the diff to a storage buffer, which is later checked to\nbe all (near) 0.\n\nThen, run another pass (which outputs every point at z=0.5 to avoid clipping) to verify the depth\nbuffer contents by outputting the expected depth with depthCompare:'not-equal': any fragments that\nhave unexpected values then get drawn to the color buffer, which is later checked to be empty.`\n  )\n  .params(u =>\n    u //\n      .combine('format', kDepthStencilFormats)\n      .filter(p => kTextureFormatInfo[p.format].depth)\n      .combine('clampDepth', [false, true])\n      .combine('writeDepth', [false, true])\n      .combine('multisampled', [false, true])\n  )\n  .fn(async t => {\n    const { format, clampDepth, writeDepth, multisampled } = t.params;\n    await t.selectDeviceOrSkipTestCase([\n      clampDepth ? 'depth-clamping' : undefined,\n      kTextureFormatInfo[format].feature,\n    ]);\n    const info = kTextureFormatInfo[format];\n\n    /** Number of depth values to test for both vertex output and frag_depth output. */\n    const kNumDepthValues = 8;\n    /** Test every combination of vertex output and frag_depth output. */\n    const kNumTestPoints = kNumDepthValues * kNumDepthValues;\n    const kViewportMinDepth = 0.25;\n    const kViewportMaxDepth = 0.75;\n\n    const shaderSource = `\n      // Test depths, with viewport range corresponding to [0,1].\n      var<private> kDepths: array<f32, ${kNumDepthValues}> = array<f32, ${kNumDepthValues}>(\n          -1.0, -0.5, 0.0, 0.25, 0.75, 1.0, 1.5, 2.0);\n\n      let vpMin: f32 = ${kViewportMinDepth};\n      let vpMax: f32 = ${kViewportMaxDepth};\n\n      // Draw the points in a straight horizontal row, one per pixel.\n      fn vertexX(idx: u32) -> f32 {\n        return (f32(idx) + 0.5) * 2.0 / ${kNumTestPoints}.0 - 1.0;\n      }\n\n      // Test vertex shader's position.z output.\n      // Here, the viewport range corresponds to position.z in [0,1].\n      fn vertexZ(idx: u32) -> f32 {\n        return kDepths[idx / ${kNumDepthValues}u];\n      }\n\n      // Test fragment shader's expected position.z input.\n      // Here, the viewport range corresponds to position.z in [vpMin,vpMax], but\n      // unclipped values extend beyond that range.\n      fn expectedFragPosZ(idx: u32) -> f32 {\n        return vpMin + vertexZ(idx) * (vpMax - vpMin);\n      }\n\n      //////// \"Test\" entry points\n\n      struct VFTest {\n        @builtin(position) pos: vec4<f32>;\n        @location(0) @interpolate(flat) vertexIndex: u32;\n      };\n\n      @stage(vertex)\n      fn vtest(@builtin(vertex_index) idx: u32) -> VFTest {\n        var vf: VFTest;\n        vf.pos = vec4<f32>(vertexX(idx), 0.0, vertexZ(idx), 1.0);\n        vf.vertexIndex = idx;\n        return vf;\n      }\n\n      struct Output {\n        // Each fragment (that didn't get clipped) writes into one element of this output.\n        // (Anything that doesn't get written is already zero.)\n        fragInputZDiff: array<f32, ${kNumTestPoints}>;\n      };\n      @group(0) @binding(0) var <storage, read_write> output: Output;\n\n      fn checkZ(vf: VFTest) {\n        output.fragInputZDiff[vf.vertexIndex] = vf.pos.z - expectedFragPosZ(vf.vertexIndex);\n      }\n\n      @stage(fragment)\n      fn ftest_WriteDepth(vf: VFTest) -> @builtin(frag_depth) f32 {\n        checkZ(vf);\n        return kDepths[vf.vertexIndex % ${kNumDepthValues}u];\n      }\n\n      @stage(fragment)\n      fn ftest_NoWriteDepth(vf: VFTest) {\n        checkZ(vf);\n      }\n\n      //////// \"Check\" entry points\n\n      struct VFCheck {\n        @builtin(position) pos: vec4<f32>;\n        @location(0) @interpolate(flat) vertexIndex: u32;\n      };\n\n      @stage(vertex)\n      fn vcheck(@builtin(vertex_index) idx: u32) -> VFCheck {\n        var vf: VFCheck;\n        // Depth=0.5 because we want to render every point, not get clipped.\n        vf.pos = vec4<f32>(vertexX(idx), 0.0, 0.5, 1.0);\n        vf.vertexIndex = idx;\n        return vf;\n      }\n\n      struct FCheck {\n        @builtin(frag_depth) depth: f32;\n        @location(0) color: f32;\n      };\n\n      @stage(fragment)\n      fn fcheck(vf: VFCheck) -> FCheck {\n        let vertZ = vertexZ(vf.vertexIndex);\n        let outOfRange = vertZ < 0.0 || vertZ > 1.0;\n        let expFragPosZ = expectedFragPosZ(vf.vertexIndex);\n\n        let writtenDepth = kDepths[vf.vertexIndex % ${kNumDepthValues}u];\n\n        let expectedDepthWriteInput = ${writeDepth ? 'writtenDepth' : 'expFragPosZ'};\n        var expectedDepthBufferValue = clamp(expectedDepthWriteInput, vpMin, vpMax);\n        if (${!clampDepth} && outOfRange) {\n          // Test fragment should have been clipped; expect the depth attachment to\n          // have its clear value (0.5).\n          expectedDepthBufferValue = 0.5;\n        }\n\n        var f: FCheck;\n        f.depth = expectedDepthBufferValue;\n        f.color = 1.0; // Color written if the resulting depth is unexpected.\n        return f;\n      }\n    `;\n    const module = t.device.createShaderModule({ code: shaderSource });\n\n    // Draw points at different vertex depths and fragment depths into the depth attachment,\n    // with a viewport of [0.25,0.75].\n    const testPipeline = t.device.createRenderPipeline({\n      vertex: { module, entryPoint: 'vtest' },\n      primitive: {\n        topology: 'point-list',\n        // `|| undefined` is a workaround for Chromium not allowing `false` here\n        // when the feature is unavailable.\n        clampDepth: clampDepth || undefined,\n      },\n      depthStencil: { format, depthWriteEnabled: true },\n      multisample: multisampled ? { count: 4 } : undefined,\n      fragment: {\n        module,\n        entryPoint: writeDepth ? 'ftest_WriteDepth' : 'ftest_NoWriteDepth',\n        targets: [],\n      },\n    });\n\n    // Use depth comparison to check that the depth attachment now has the expected values.\n    const checkPipeline = t.device.createRenderPipeline({\n      vertex: { module, entryPoint: 'vcheck' },\n      primitive: { topology: 'point-list' },\n      depthStencil: {\n        format,\n        // NOTE: This check is probably very susceptible to floating point error. If it fails, maybe\n        // replace it with two checks (less + greater) with an epsilon applied in the check shader?\n        depthCompare: 'not-equal', // Expect every depth value to be exactly equal.\n        depthWriteEnabled: true, // If the check failed, overwrite with the expected result.\n      },\n      multisample: multisampled ? { count: 4 } : undefined,\n      fragment: { module, entryPoint: 'fcheck', targets: [{ format: 'r8unorm' }] },\n    });\n\n    const dsTexture = t.device.createTexture({\n      format,\n      size: [kNumTestPoints],\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      sampleCount: multisampled ? 4 : 1,\n    });\n    const dsTextureView = dsTexture.createView();\n\n    const checkTextureDesc = {\n      format: 'r8unorm' as const,\n      size: [kNumTestPoints],\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n    };\n    const checkTexture = t.device.createTexture(checkTextureDesc);\n    const checkTextureView = checkTexture.createView();\n    const checkTextureMSView = multisampled\n      ? t.device.createTexture({ ...checkTextureDesc, sampleCount: 4 }).createView()\n      : undefined;\n\n    const dsActual =\n      !multisampled && info.bytesPerBlock\n        ? t.device.createBuffer({\n            size: kNumTestPoints * info.bytesPerBlock,\n            usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\n          })\n        : undefined;\n    const dsExpected =\n      !multisampled && info.bytesPerBlock\n        ? t.device.createBuffer({\n            size: kNumTestPoints * info.bytesPerBlock,\n            usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\n          })\n        : undefined;\n    const checkBuffer = t.device.createBuffer({\n      size: kNumTestPoints,\n      usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\n    });\n\n    const fragInputZFailedBuffer = t.device.createBuffer({\n      size: 4 * kNumTestPoints,\n      usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n    });\n    const testBindGroup = t.device.createBindGroup({\n      layout: testPipeline.getBindGroupLayout(0),\n      entries: [{ binding: 0, resource: { buffer: fragInputZFailedBuffer } }],\n    });\n\n    const enc = t.device.createCommandEncoder();\n    {\n      const pass = enc.beginRenderPass({\n        colorAttachments: [],\n        depthStencilAttachment: {\n          view: dsTextureView,\n          depthLoadValue: 0.5, // Will see this depth value if the fragment was clipped.\n          depthStoreOp: 'store',\n          stencilLoadValue: 0,\n          stencilStoreOp: 'discard',\n        },\n      });\n      pass.setPipeline(testPipeline);\n      pass.setBindGroup(0, testBindGroup);\n      pass.setViewport(0, 0, kNumTestPoints, 1, kViewportMinDepth, kViewportMaxDepth);\n      pass.draw(kNumTestPoints);\n      pass.endPass();\n    }\n    if (dsActual) {\n      enc.copyTextureToBuffer({ texture: dsTexture }, { buffer: dsActual }, [kNumTestPoints]);\n    }\n    {\n      const loadValue = [0, 0, 0, 0]; // Will see this color if the check passed.\n      const pass = enc.beginRenderPass({\n        colorAttachments: [\n          checkTextureMSView\n            ? {\n                view: checkTextureMSView,\n                resolveTarget: checkTextureView,\n                loadValue,\n                storeOp: 'discard',\n              }\n            : { view: checkTextureView, loadValue, storeOp: 'store' },\n        ],\n        depthStencilAttachment: {\n          view: dsTextureView,\n          depthLoadValue: 'load',\n          depthStoreOp: 'store',\n          stencilLoadValue: 0,\n          stencilStoreOp: 'discard',\n        },\n      });\n      pass.setPipeline(checkPipeline);\n      pass.setViewport(0, 0, kNumTestPoints, 1, 0.0, 1.0);\n      pass.draw(kNumTestPoints);\n      pass.endPass();\n    }\n    enc.copyTextureToBuffer({ texture: checkTexture }, { buffer: checkBuffer }, [kNumTestPoints]);\n    if (dsExpected) {\n      enc.copyTextureToBuffer({ texture: dsTexture }, { buffer: dsExpected }, [kNumTestPoints]);\n    }\n    t.device.queue.submit([enc.finish()]);\n\n    t.expectGPUBufferValuesPassCheck(\n      fragInputZFailedBuffer,\n      a => checkElementsBetween(a, [() => -1e-5, () => 1e-5]),\n      { type: Float32Array, typedLength: kNumTestPoints }\n    );\n\n    const kCheckPassedValue = 0;\n    const predicatePrinter: CheckElementsSupplementalTableRows = [\n      { leftHeader: 'expected ==', getValueForCell: index => kCheckPassedValue },\n    ];\n    if (dsActual && dsExpected && format === 'depth32float') {\n      await Promise.all([dsActual.mapAsync(GPUMapMode.READ), dsExpected.mapAsync(GPUMapMode.READ)]);\n      const act = new Float32Array(dsActual.getMappedRange());\n      const exp = new Float32Array(dsExpected.getMappedRange());\n      predicatePrinter.push(\n        { leftHeader: 'act ==', getValueForCell: index => act[index].toFixed(2) },\n        { leftHeader: 'exp ==', getValueForCell: index => exp[index].toFixed(2) }\n      );\n    }\n    t.expectGPUBufferValuesPassCheck(\n      checkBuffer,\n      a =>\n        checkElementsPassPredicate(a, (index, value) => value === kCheckPassedValue, {\n          predicatePrinter,\n        }),\n      { type: Uint8Array, typedLength: kNumTestPoints, method: 'map' }\n    );\n  });\n\ng.test('depth_test_input_clamped')\n  .desc(\n    `\nInput to the depth test should always be in the range of viewport depth, even if it was written by\nthe fragment shader (using frag_depth).\n\nTo test this, first initialize the depth buffer with N expected values (by writing frag_depth, with\nthe default viewport). These expected values are clamped by the shader to [0.25, 0.75].\n\nThen, run another pass with the viewport depth set to [0.25,0.75], and output various (unclamped)\nfrag_depth values from its fragment shader with depthCompare:'not-equal'. These should get clamped;\nany fragments that have unexpected valeus then get drawn to the color buffer, which is later checked\nto be empty.`\n  )\n  .params(u =>\n    u //\n      .combine('format', kDepthStencilFormats)\n      .filter(p => kTextureFormatInfo[p.format].depth)\n      .combine('clampDepth', [false, true])\n      .combine('multisampled', [false, true])\n  )\n  .fn(async t => {\n    const { format, clampDepth, multisampled } = t.params;\n    await t.selectDeviceOrSkipTestCase([\n      clampDepth ? 'depth-clamping' : undefined,\n      kTextureFormatInfo[format].feature,\n    ]);\n\n    const kNumDepthValues = 8;\n    const kViewportMinDepth = 0.25;\n    const kViewportMaxDepth = 0.75;\n\n    const shaderSource = `\n      // Test depths, with viewport range corresponding to [0,1].\n      var<private> kDepths: array<f32, ${kNumDepthValues}> = array<f32, ${kNumDepthValues}>(\n          -1.0, -0.5, 0.0, 0.25, 0.75, 1.0, 1.5, 2.0);\n\n      let vpMin: f32 = ${kViewportMinDepth};\n      let vpMax: f32 = ${kViewportMaxDepth};\n\n      // Draw the points in a straight horizontal row, one per pixel.\n      fn vertexX(idx: u32) -> f32 {\n        return (f32(idx) + 0.5) * 2.0 / ${kNumDepthValues}.0 - 1.0;\n      }\n\n      struct VF {\n        @builtin(position) pos: vec4<f32>;\n        @location(0) @interpolate(flat) vertexIndex: u32;\n      };\n\n      @stage(vertex)\n      fn vmain(@builtin(vertex_index) idx: u32) -> VF {\n        var vf: VF;\n        // Depth=0.5 because we want to render every point, not get clipped.\n        vf.pos = vec4<f32>(vertexX(idx), 0.0, 0.5, 1.0);\n        vf.vertexIndex = idx;\n        return vf;\n      }\n\n      @stage(fragment)\n      fn finit(vf: VF) -> @builtin(frag_depth) f32 {\n        // Expected values of the ftest pipeline.\n        return clamp(kDepths[vf.vertexIndex], vpMin, vpMax);\n      }\n\n      struct FTest {\n        @builtin(frag_depth) depth: f32;\n        @location(0) color: f32;\n      };\n\n      @stage(fragment)\n      fn ftest(vf: VF) -> FTest {\n        var f: FTest;\n        f.depth = kDepths[vf.vertexIndex]; // Should get clamped to the viewport.\n        f.color = 1.0; // Color written if the resulting depth is unexpected.\n        return f;\n      }\n    `;\n\n    const module = t.device.createShaderModule({ code: shaderSource });\n\n    // Initialize depth attachment with expected values, in [0.25,0.75].\n    const initPipeline = t.device.createRenderPipeline({\n      vertex: { module, entryPoint: 'vmain' },\n      primitive: { topology: 'point-list' },\n      depthStencil: { format, depthWriteEnabled: true },\n      multisample: multisampled ? { count: 4 } : undefined,\n      fragment: { module, entryPoint: 'finit', targets: [] },\n    });\n\n    // With a viewport set to [0.25,0.75], output values in [0.0,1.0] and check they're clamped\n    // before the depth test, regardless of whether clampDepth is enabled.\n    const testPipeline = t.device.createRenderPipeline({\n      vertex: { module, entryPoint: 'vmain' },\n      primitive: {\n        topology: 'point-list',\n        // `|| undefined` is a workaround for Chromium not allowing `false` here\n        // when the feature is unavailable.\n        clampDepth: clampDepth || undefined,\n      },\n      depthStencil: { format, depthCompare: 'not-equal' },\n      multisample: multisampled ? { count: 4 } : undefined,\n      fragment: { module, entryPoint: 'ftest', targets: [{ format: 'r8unorm' }] },\n    });\n\n    const dsTexture = t.device.createTexture({\n      format,\n      size: [kNumDepthValues],\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      sampleCount: multisampled ? 4 : 1,\n    });\n    const dsTextureView = dsTexture.createView();\n\n    const testTextureDesc = {\n      format: 'r8unorm' as const,\n      size: [kNumDepthValues],\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n    };\n    const testTexture = t.device.createTexture(testTextureDesc);\n    const testTextureView = testTexture.createView();\n    const testTextureMSView = multisampled\n      ? t.device.createTexture({ ...testTextureDesc, sampleCount: 4 }).createView()\n      : undefined;\n\n    const resultBuffer = t.device.createBuffer({\n      size: kNumDepthValues,\n      usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\n    });\n\n    const enc = t.device.createCommandEncoder();\n    {\n      const pass = enc.beginRenderPass({\n        colorAttachments: [],\n        depthStencilAttachment: {\n          view: dsTextureView,\n          depthLoadValue: 1.0,\n          depthStoreOp: 'store',\n          stencilLoadValue: 0,\n          stencilStoreOp: 'discard',\n        },\n      });\n      pass.setPipeline(initPipeline);\n      pass.draw(kNumDepthValues);\n      pass.endPass();\n    }\n    {\n      const loadValue = [0, 0, 0, 0]; // Will see this color if the test passed.\n      const pass = enc.beginRenderPass({\n        colorAttachments: [\n          testTextureMSView\n            ? {\n                view: testTextureMSView,\n                resolveTarget: testTextureView,\n                loadValue,\n                storeOp: 'discard',\n              }\n            : { view: testTextureView, loadValue, storeOp: 'store' },\n        ],\n        depthStencilAttachment: {\n          view: dsTextureView,\n          depthLoadValue: 'load',\n          depthStoreOp: 'store',\n          stencilLoadValue: 0,\n          stencilStoreOp: 'discard',\n        },\n      });\n      pass.setPipeline(testPipeline);\n      pass.setViewport(0, 0, kNumDepthValues, 1, kViewportMinDepth, kViewportMaxDepth);\n      pass.draw(kNumDepthValues);\n      pass.endPass();\n    }\n    enc.copyTextureToBuffer({ texture: testTexture }, { buffer: resultBuffer }, [kNumDepthValues]);\n    t.device.queue.submit([enc.finish()]);\n\n    t.expectGPUBufferValuesEqual(resultBuffer, new Uint8Array(kNumDepthValues), 0, {\n      method: 'map',\n    });\n  });\n"],"file":"depth_clip_clamp.spec.js"}