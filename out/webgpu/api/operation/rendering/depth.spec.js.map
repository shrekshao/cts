{"version":3,"file":"depth.spec.js","names":["description","makeTestGroup","kDepthStencilFormats","kTextureFormatInfo","GPUTest","TexelView","textureContentIsOKByT2B","backgroundColor","triangleColor","kBaseColor","Float32Array","kRedStencilColor","kGreenStencilColor","DepthTest","runDepthStateTest","testStates","expectedColor","renderTargetFormat","renderTarget","device","createTexture","format","size","width","height","depthOrArrayLayers","usage","GPUTextureUsage","COPY_SRC","RENDER_ATTACHMENT","depthStencilFormat","depthTexture","sampleCount","mipLevelCount","COPY_DST","depthStencilAttachment","view","createView","depthLoadOp","depthStoreOp","stencilLoadOp","stencilStoreOp","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","storeOp","loadOp","test","testPipeline","createRenderPipelineForTest","state","depth","setPipeline","setBindGroup","createBindGroupForTest","getBindGroupLayout","color","draw","end","queue","submit","finish","expColor","R","G","B","A","expTexelView","fromTexelsAsColors","coords","result","texture","maxDiffULPsForNormFormat","eventualExpectOK","trackForCleanup","depthStencil","createRenderPipeline","layout","vertex","module","createShaderModule","code","entryPoint","fragment","targets","primitive","topology","data","createBindGroup","entries","binding","resource","buffer","makeBufferWithContents","GPUBufferUsage","UNIFORM","g","desc","unimplemented","fn","t","depthSpencilFormat","last","i","j","params","u","combineWithParams","depthWriteEnabled","lastDepth","_expectedColor","stencilState","compare","failOp","depthFailOp","passOp","baseState","depthCompare","stencilFront","stencilBack","stencilReadMask","stencilWriteMask","depthWriteState","checkState","secondDepth","depthTestState","kMiddleDepthValue","combine","filter","depthClearValue","_expected","beforeAllSubcases","selectDeviceForTextureFormatOrSkipTestCase","colorAttachmentFormat","colorAttachment","colorAttachmentView","TEXTURE_BINDING","depthTextureView","pipelineDescriptor","pipeline","stencil","stencilClearValue","clearValue","r","b","a","expectSinglePixelIn2DTexture","x","y","exp","Uint8Array","depthBufferFormat","reversed"],"sources":["../../../../../src/webgpu/api/operation/rendering/depth.spec.ts"],"sourcesContent":["export const description = `\nTest related to depth buffer, depth op, compare func, etc.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { TypedArrayBufferView } from '../../../../common/util/util.js';\nimport { kDepthStencilFormats, kTextureFormatInfo } from '../../../capability_info.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { TexelView } from '../../../util/texture/texel_view.js';\nimport { textureContentIsOKByT2B } from '../../../util/texture/texture_ok.js';\n\nconst backgroundColor = [0x00, 0x00, 0x00, 0xff];\nconst triangleColor = [0xff, 0xff, 0xff, 0xff];\n\nconst kBaseColor = new Float32Array([1.0, 1.0, 1.0, 1.0]);\nconst kRedStencilColor = new Float32Array([1.0, 0.0, 0.0, 1.0]);\nconst kGreenStencilColor = new Float32Array([0.0, 1.0, 0.0, 1.0]);\n\ntype TestStates = {\n  state: GPUDepthStencilState;\n  color: Float32Array;\n  depth: number;\n};\n\nclass DepthTest extends GPUTest {\n  runDepthStateTest(testStates: TestStates[], expectedColor: Float32Array) {\n    const renderTargetFormat = 'rgba8unorm';\n\n    const renderTarget = this.device.createTexture({\n      format: renderTargetFormat,\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const depthStencilFormat: GPUTextureFormat = 'depth24plus-stencil8';\n    const depthTexture = this.device.createTexture({\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      format: depthStencilFormat,\n      sampleCount: 1,\n      mipLevelCount: 1,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_DST,\n    });\n\n    const depthStencilAttachment: GPURenderPassDepthStencilAttachment = {\n      view: depthTexture.createView(),\n      depthLoadOp: 'load',\n      depthStoreOp: 'store',\n      stencilLoadOp: 'load',\n      stencilStoreOp: 'store',\n    };\n\n    const encoder = this.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: renderTarget.createView(),\n          storeOp: 'store',\n          loadOp: 'load',\n        },\n      ],\n      depthStencilAttachment,\n    });\n\n    // Draw a triangle with the given depth state, color, and depth.\n    for (const test of testStates) {\n      const testPipeline = this.createRenderPipelineForTest(test.state, test.depth);\n      pass.setPipeline(testPipeline);\n      pass.setBindGroup(\n        0,\n        this.createBindGroupForTest(testPipeline.getBindGroupLayout(0), test.color)\n      );\n      pass.draw(1);\n    }\n\n    pass.end();\n    this.device.queue.submit([encoder.finish()]);\n\n    const expColor = {\n      R: expectedColor[0],\n      G: expectedColor[1],\n      B: expectedColor[2],\n      A: expectedColor[3],\n    };\n    const expTexelView = TexelView.fromTexelsAsColors(renderTargetFormat, coords => expColor);\n\n    const result = textureContentIsOKByT2B(\n      this,\n      { texture: renderTarget },\n      [1, 1],\n      { expTexelView },\n      { maxDiffULPsForNormFormat: 1 }\n    );\n    this.eventualExpectOK(result);\n    this.trackForCleanup(renderTarget);\n  }\n\n  createRenderPipelineForTest(\n    depthStencil: GPUDepthStencilState,\n    depth: number\n  ): GPURenderPipeline {\n    return this.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module: this.device.createShaderModule({\n          code: `\n            @vertex\n            fn main(@builtin(vertex_index) VertexIndex : u32) -> @builtin(position) vec4<f32> {\n                return vec4<f32>(0.0, 0.0, ${depth}, 1.0);\n            }\n            `,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        targets: [{ format: 'rgba8unorm' }],\n        module: this.device.createShaderModule({\n          code: `\n            struct Params {\n              color : vec4<f32>\n            }\n            @group(0) @binding(0) var<uniform> params : Params;\n\n            @fragment fn main() -> @location(0) vec4<f32> {\n                return vec4<f32>(params.color);\n            }`,\n        }),\n        entryPoint: 'main',\n      },\n      primitive: { topology: 'point-list' },\n      depthStencil,\n    });\n  }\n\n  createBindGroupForTest(layout: GPUBindGroupLayout, data: TypedArrayBufferView): GPUBindGroup {\n    return this.device.createBindGroup({\n      layout,\n      entries: [\n        {\n          binding: 0,\n          resource: {\n            buffer: this.makeBufferWithContents(data, GPUBufferUsage.UNIFORM),\n          },\n        },\n      ],\n    });\n  }\n}\n\nexport const g = makeTestGroup(DepthTest);\n\ng.test('depth_bias')\n  .desc(\n    `Tests render results with different depth bias values: positive, negative, infinity, slope, clamp, etc.`\n  )\n  .unimplemented();\n\ng.test('depth_disabled')\n  .desc('Tests render results with depth test disabled.')\n  .fn(async t => {\n    const depthSpencilFormat: GPUTextureFormat = 'depth24plus-stencil8';\n    const state = { format: depthSpencilFormat };\n\n    const testStates = [\n      { state, color: kBaseColor, depth: 0.0 },\n      { state, color: kRedStencilColor, depth: 0.5 },\n      { state, color: kGreenStencilColor, depth: 1.0 },\n    ];\n\n    // Test that for all combinations and ensure the last triangle drawn is the one visible\n    // regardless of depth testing.\n    for (let last = 0; last < 3; ++last) {\n      const i = (last + 1) % 3;\n      const j = (last + 2) % 3;\n\n      t.runDepthStateTest([testStates[i], testStates[j], testStates[last]], testStates[last].color);\n      t.runDepthStateTest([testStates[j], testStates[i], testStates[last]], testStates[last].color);\n    }\n  });\n\ng.test('depth_write_disabled')\n  .desc(\n    `\n  Test that depthWriteEnabled behaves as expected.\n  If enabled, a depth value of 0.0 is written.\n  If disabled, it's not written, so it keeps the previous value of 1.0.\n  Use a depthCompare: 'equal' check at the end to check the value.\n  `\n  )\n  .params(u =>\n    u //\n      .combineWithParams([\n        { depthWriteEnabled: false, lastDepth: 0.0, _expectedColor: kRedStencilColor },\n        { depthWriteEnabled: true, lastDepth: 0.0, _expectedColor: kGreenStencilColor },\n        { depthWriteEnabled: false, lastDepth: 1.0, _expectedColor: kGreenStencilColor },\n        { depthWriteEnabled: true, lastDepth: 1.0, _expectedColor: kRedStencilColor },\n      ])\n  )\n  .fn(async t => {\n    const { depthWriteEnabled, lastDepth, _expectedColor } = t.params;\n\n    const depthSpencilFormat: GPUTextureFormat = 'depth24plus-stencil8';\n\n    const stencilState = {\n      compare: 'always',\n      failOp: 'keep',\n      depthFailOp: 'keep',\n      passOp: 'keep',\n    } as const;\n\n    const baseState = {\n      format: depthSpencilFormat,\n      depthWriteEnabled: true,\n      depthCompare: 'always',\n      stencilFront: stencilState,\n      stencilBack: stencilState,\n      stencilReadMask: 0xff,\n      stencilWriteMask: 0xff,\n    } as const;\n\n    const depthWriteState = {\n      format: depthSpencilFormat,\n      depthWriteEnabled,\n      depthCompare: 'always',\n      stencilFront: stencilState,\n      stencilBack: stencilState,\n      stencilReadMask: 0xff,\n      stencilWriteMask: 0xff,\n    } as const;\n\n    const checkState = {\n      format: depthSpencilFormat,\n      depthWriteEnabled: false,\n      depthCompare: 'equal',\n      stencilFront: stencilState,\n      stencilBack: stencilState,\n      stencilReadMask: 0xff,\n      stencilWriteMask: 0xff,\n    } as const;\n\n    const testStates = [\n      // Draw a base point with depth write enabled.\n      { state: baseState, color: kBaseColor, depth: 1.0 },\n      // Draw a second point without depth write enabled.\n      { state: depthWriteState, color: kRedStencilColor, depth: 0.0 },\n      // Draw a third point which should occlude the second even though it is behind it.\n      { state: checkState, color: kGreenStencilColor, depth: lastDepth },\n    ];\n\n    t.runDepthStateTest(testStates, _expectedColor);\n  });\n\ng.test('depth_test_fail')\n  .desc(\n    `\n  Test that render results on depth test failure cases with 'less' depthCompare operation and\n  depthWriteEnabled is true.\n  `\n  )\n  .params(u =>\n    u //\n      .combineWithParams([\n        { secondDepth: 1.0, lastDepth: 2.0, _expectedColor: kBaseColor }, // fail -> fail.\n        { secondDepth: 0.0, lastDepth: 2.0, _expectedColor: kRedStencilColor }, // pass -> fail.\n        { secondDepth: 2.0, lastDepth: 0.9, _expectedColor: kGreenStencilColor }, // fail -> pass.\n      ] as const)\n  )\n  .fn(async t => {\n    const { secondDepth, lastDepth, _expectedColor } = t.params;\n\n    const depthSpencilFormat: GPUTextureFormat = 'depth24plus-stencil8';\n\n    const baseState = {\n      format: depthSpencilFormat,\n      depthWriteEnabled: true,\n      depthCompare: 'always',\n      stencilReadMask: 0xff,\n      stencilWriteMask: 0xff,\n    } as const;\n\n    const depthTestState = {\n      format: depthSpencilFormat,\n      depthWriteEnabled: true,\n      depthCompare: 'less',\n      stencilReadMask: 0xff,\n      stencilWriteMask: 0xff,\n    } as const;\n\n    const testStates = [\n      { state: baseState, color: kBaseColor, depth: 1.0 },\n      { state: depthTestState, color: kRedStencilColor, depth: secondDepth },\n      { state: depthTestState, color: kGreenStencilColor, depth: lastDepth },\n    ];\n\n    t.runDepthStateTest(testStates, _expectedColor);\n  });\n\n// Use a depth value that's not exactly 0.5 because it is exactly between two depth16unorm value and\n// can get rounded either way (and a different way between shaders and clearDepthValue).\nconst kMiddleDepthValue = 0.5001;\n\ng.test('depth_compare_func')\n  .desc(\n    `Tests each depth compare function works properly. Clears the depth attachment to various values, and renders a point at depth 0.5 with various depthCompare modes.`\n  )\n  .params(u =>\n    u\n      .combine(\n        'format',\n        kDepthStencilFormats.filter(format => kTextureFormatInfo[format].depth)\n      )\n      .combineWithParams([\n        { depthCompare: 'never', depthClearValue: 1.0, _expected: backgroundColor },\n        { depthCompare: 'never', depthClearValue: kMiddleDepthValue, _expected: backgroundColor },\n        { depthCompare: 'never', depthClearValue: 0.0, _expected: backgroundColor },\n        { depthCompare: 'less', depthClearValue: 1.0, _expected: triangleColor },\n        { depthCompare: 'less', depthClearValue: kMiddleDepthValue, _expected: backgroundColor },\n        { depthCompare: 'less', depthClearValue: 0.0, _expected: backgroundColor },\n        { depthCompare: 'less-equal', depthClearValue: 1.0, _expected: triangleColor },\n        {\n          depthCompare: 'less-equal',\n          depthClearValue: kMiddleDepthValue,\n          _expected: triangleColor,\n        },\n        { depthCompare: 'less-equal', depthClearValue: 0.0, _expected: backgroundColor },\n        { depthCompare: 'equal', depthClearValue: 1.0, _expected: backgroundColor },\n        { depthCompare: 'equal', depthClearValue: kMiddleDepthValue, _expected: triangleColor },\n        { depthCompare: 'equal', depthClearValue: 0.0, _expected: backgroundColor },\n        { depthCompare: 'not-equal', depthClearValue: 1.0, _expected: triangleColor },\n        {\n          depthCompare: 'not-equal',\n          depthClearValue: kMiddleDepthValue,\n          _expected: backgroundColor,\n        },\n        { depthCompare: 'not-equal', depthClearValue: 0.0, _expected: triangleColor },\n        { depthCompare: 'greater-equal', depthClearValue: 1.0, _expected: backgroundColor },\n        {\n          depthCompare: 'greater-equal',\n          depthClearValue: kMiddleDepthValue,\n          _expected: triangleColor,\n        },\n        { depthCompare: 'greater-equal', depthClearValue: 0.0, _expected: triangleColor },\n        { depthCompare: 'greater', depthClearValue: 1.0, _expected: backgroundColor },\n        { depthCompare: 'greater', depthClearValue: kMiddleDepthValue, _expected: backgroundColor },\n        { depthCompare: 'greater', depthClearValue: 0.0, _expected: triangleColor },\n        { depthCompare: 'always', depthClearValue: 1.0, _expected: triangleColor },\n        { depthCompare: 'always', depthClearValue: kMiddleDepthValue, _expected: triangleColor },\n        { depthCompare: 'always', depthClearValue: 0.0, _expected: triangleColor },\n      ] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n  })\n  .fn(async t => {\n    const { depthCompare, depthClearValue, _expected, format } = t.params;\n\n    const colorAttachmentFormat = 'rgba8unorm';\n    const colorAttachment = t.device.createTexture({\n      format: colorAttachmentFormat,\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n    const colorAttachmentView = colorAttachment.createView();\n\n    const depthTexture = t.device.createTexture({\n      size: { width: 1, height: 1 },\n      format,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING,\n    });\n    const depthTextureView = depthTexture.createView();\n\n    const pipelineDescriptor: GPURenderPipelineDescriptor = {\n      layout: 'auto',\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n            @vertex fn main(\n              @builtin(vertex_index) VertexIndex : u32) -> @builtin(position) vec4<f32> {\n              return vec4<f32>(0.5, 0.5, ${kMiddleDepthValue}, 1.0);\n            }\n            `,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `\n            @fragment fn main() -> @location(0) vec4<f32> {\n              return vec4<f32>(1.0, 1.0, 1.0, 1.0);\n            }\n            `,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: colorAttachmentFormat }],\n      },\n      primitive: { topology: 'point-list' },\n      depthStencil: {\n        depthWriteEnabled: true,\n        depthCompare,\n        format,\n      },\n    };\n    const pipeline = t.device.createRenderPipeline(pipelineDescriptor);\n\n    const encoder = t.device.createCommandEncoder();\n    const depthStencilAttachment: GPURenderPassDepthStencilAttachment = {\n      view: depthTextureView,\n      depthClearValue,\n      depthLoadOp: 'clear',\n      depthStoreOp: 'store',\n    };\n    if (kTextureFormatInfo[format].stencil) {\n      depthStencilAttachment.stencilClearValue = 0;\n      depthStencilAttachment.stencilLoadOp = 'clear';\n      depthStencilAttachment.stencilStoreOp = 'store';\n    }\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: colorAttachmentView,\n          storeOp: 'store',\n          clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n          loadOp: 'clear',\n        },\n      ],\n      depthStencilAttachment,\n    });\n    pass.setPipeline(pipeline);\n    pass.draw(1);\n    pass.end();\n    t.device.queue.submit([encoder.finish()]);\n\n    t.expectSinglePixelIn2DTexture(\n      colorAttachment,\n      colorAttachmentFormat,\n      { x: 0, y: 0 },\n      { exp: new Uint8Array(_expected) }\n    );\n  });\n\ng.test('reverse_depth')\n  .desc(\n    `Tests simple rendering with reversed depth buffer, ensures depth test works properly: fragments are in correct order and out of range fragments are clipped.\n    Note that in real use case the depth range remapping is done by the modified projection matrix.\n(see https://developer.nvidia.com/content/depth-precision-visualized).`\n  )\n  .params(u => u.combine('reversed', [false, true]))\n  .fn(async t => {\n    const colorAttachmentFormat = 'rgba8unorm';\n    const colorAttachment = t.device.createTexture({\n      format: colorAttachmentFormat,\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n    const colorAttachmentView = colorAttachment.createView();\n\n    const depthBufferFormat = 'depth32float';\n    const depthTexture = t.device.createTexture({\n      size: { width: 1, height: 1 },\n      format: depthBufferFormat,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING,\n    });\n    const depthTextureView = depthTexture.createView();\n\n    const pipelineDescriptor: GPURenderPipelineDescriptor = {\n      layout: 'auto',\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n            struct Output {\n              @builtin(position) Position : vec4<f32>,\n              @location(0) color : vec4<f32>,\n            };\n\n            @vertex fn main(\n              @builtin(vertex_index) VertexIndex : u32,\n              @builtin(instance_index) InstanceIndex : u32) -> Output {\n              // TODO: remove workaround for Tint unary array access broke\n              var zv : array<vec2<f32>, 4> = array<vec2<f32>, 4>(\n                  vec2<f32>(0.2, 0.2),\n                  vec2<f32>(0.3, 0.3),\n                  vec2<f32>(-0.1, -0.1),\n                  vec2<f32>(1.1, 1.1));\n              let z : f32 = zv[InstanceIndex].x;\n\n              var output : Output;\n              output.Position = vec4<f32>(0.5, 0.5, z, 1.0);\n              var colors : array<vec4<f32>, 4> = array<vec4<f32>, 4>(\n                  vec4<f32>(1.0, 0.0, 0.0, 1.0),\n                  vec4<f32>(0.0, 1.0, 0.0, 1.0),\n                  vec4<f32>(0.0, 0.0, 1.0, 1.0),\n                  vec4<f32>(1.0, 1.0, 1.0, 1.0)\n              );\n              output.color = colors[InstanceIndex];\n              return output;\n            }\n            `,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `\n            @fragment fn main(\n              @location(0) color : vec4<f32>\n              ) -> @location(0) vec4<f32> {\n              return color;\n            }\n            `,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: colorAttachmentFormat }],\n      },\n      primitive: { topology: 'point-list' },\n      depthStencil: {\n        depthWriteEnabled: true,\n        depthCompare: t.params.reversed ? 'greater' : 'less',\n        format: depthBufferFormat,\n      },\n    };\n    const pipeline = t.device.createRenderPipeline(pipelineDescriptor);\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: colorAttachmentView,\n          storeOp: 'store',\n          clearValue: { r: 0.5, g: 0.5, b: 0.5, a: 1.0 },\n          loadOp: 'clear',\n        },\n      ],\n      depthStencilAttachment: {\n        view: depthTextureView,\n\n        depthClearValue: t.params.reversed ? 0.0 : 1.0,\n        depthLoadOp: 'clear',\n        depthStoreOp: 'store',\n      },\n    });\n    pass.setPipeline(pipeline);\n    pass.draw(1, 4);\n    pass.end();\n    t.device.queue.submit([encoder.finish()]);\n\n    t.expectSinglePixelIn2DTexture(\n      colorAttachment,\n      colorAttachmentFormat,\n      { x: 0, y: 0 },\n      {\n        exp: new Uint8Array(\n          t.params.reversed ? [0x00, 0xff, 0x00, 0xff] : [0xff, 0x00, 0x00, 0xff]\n        ),\n      }\n    );\n  });\n"],"mappings":"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"}