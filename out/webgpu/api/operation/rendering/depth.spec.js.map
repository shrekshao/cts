{"version":3,"sources":["../../../../../src/webgpu/api/operation/rendering/depth.spec.ts"],"names":["description","makeTestGroup","kDepthStencilFormats","GPUTest","backgroundColor","triangleColor","g","test","desc","unimplemented","params","u","combine","filter","format","combineWithParams","depthCompare","depthLoadValue","_expected","fn","t","selectDeviceForTextureFormatOrSkipTestCase","colorAttachmentFormat","colorAttachment","device","createTexture","size","width","height","depthOrArrayLayers","usage","GPUTextureUsage","COPY_SRC","RENDER_ATTACHMENT","colorAttachmentView","createView","depthTexture","SAMPLED","depthTextureView","pipelineDescriptor","vertex","module","createShaderModule","code","entryPoint","fragment","targets","primitive","topology","depthStencil","depthWriteEnabled","pipeline","createRenderPipeline","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","view","storeOp","loadValue","r","b","a","depthStencilAttachment","depthStoreOp","stencilLoadValue","stencilStoreOp","setPipeline","draw","endPass","queue","submit","finish","expectSinglePixelIn2DTexture","x","y","exp","Uint8Array","depthBufferFormat","reversed"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAFO,CAIP,SAASC,aAAT,QAA8B,4CAA9B;AACA,SAASC,oBAAT,QAAqC,6BAArC;AACA,SAASC,OAAT,QAAwB,sBAAxB;;AAEA,MAAMC,eAAe,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAAxB;AACA,MAAMC,aAAa,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAAtB;;AAEA,OAAO,MAAMC,CAAC,GAAGL,aAAa,CAACE,OAAD,CAAvB;;AAEPG,CAAC,CAACC,IAAF,CAAO,YAAP;AACGC,IADH;AAEK,yGAFL;;AAIGC,aAJH;;AAMAH,CAAC,CAACC,IAAF,CAAO,gBAAP,EAAyBC,IAAzB,CAA+B,+CAA/B,EAA+EC,aAA/E;;AAEAH,CAAC,CAACC,IAAF,CAAO,sBAAP;AACGC,IADH,CACS,gDADT;AAEGC,aAFH;;AAIAH,CAAC,CAACC,IAAF,CAAO,oBAAP;AACGC,IADH;AAEK,oKAFL;;AAIGE,MAJH,CAIU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH;AAEI,QAFJ;AAGIV,oBAAoB,CAACW,MAArB,CAA4BC,MAAM,IAAIA,MAAM,KAAK,UAAjD,CAHJ;;AAKGC,iBALH,CAKqB;AACjB,EAAEC,YAAY,EAAE,OAAhB,EAAyBC,cAAc,EAAE,GAAzC,EAA8CC,SAAS,EAAEd,eAAzD,EADiB;AAEjB,EAAEY,YAAY,EAAE,OAAhB,EAAyBC,cAAc,EAAE,GAAzC,EAA8CC,SAAS,EAAEd,eAAzD,EAFiB;AAGjB,EAAEY,YAAY,EAAE,OAAhB,EAAyBC,cAAc,EAAE,GAAzC,EAA8CC,SAAS,EAAEd,eAAzD,EAHiB;AAIjB,EAAEY,YAAY,EAAE,MAAhB,EAAwBC,cAAc,EAAE,GAAxC,EAA6CC,SAAS,EAAEb,aAAxD,EAJiB;AAKjB,EAAEW,YAAY,EAAE,MAAhB,EAAwBC,cAAc,EAAE,GAAxC,EAA6CC,SAAS,EAAEd,eAAxD,EALiB;AAMjB,EAAEY,YAAY,EAAE,MAAhB,EAAwBC,cAAc,EAAE,GAAxC,EAA6CC,SAAS,EAAEd,eAAxD,EANiB;AAOjB,EAAEY,YAAY,EAAE,YAAhB,EAA8BC,cAAc,EAAE,GAA9C,EAAmDC,SAAS,EAAEb,aAA9D,EAPiB;AAQjB,EAAEW,YAAY,EAAE,YAAhB,EAA8BC,cAAc,EAAE,GAA9C,EAAmDC,SAAS,EAAEb,aAA9D,EARiB;AASjB,EAAEW,YAAY,EAAE,YAAhB,EAA8BC,cAAc,EAAE,GAA9C,EAAmDC,SAAS,EAAEd,eAA9D,EATiB;AAUjB,EAAEY,YAAY,EAAE,OAAhB,EAAyBC,cAAc,EAAE,GAAzC,EAA8CC,SAAS,EAAEd,eAAzD,EAViB;AAWjB,EAAEY,YAAY,EAAE,OAAhB,EAAyBC,cAAc,EAAE,GAAzC,EAA8CC,SAAS,EAAEb,aAAzD,EAXiB;AAYjB,EAAEW,YAAY,EAAE,OAAhB,EAAyBC,cAAc,EAAE,GAAzC,EAA8CC,SAAS,EAAEd,eAAzD,EAZiB;AAajB,EAAEY,YAAY,EAAE,WAAhB,EAA6BC,cAAc,EAAE,GAA7C,EAAkDC,SAAS,EAAEb,aAA7D,EAbiB;AAcjB,EAAEW,YAAY,EAAE,WAAhB,EAA6BC,cAAc,EAAE,GAA7C,EAAkDC,SAAS,EAAEd,eAA7D,EAdiB;AAejB,EAAEY,YAAY,EAAE,WAAhB,EAA6BC,cAAc,EAAE,GAA7C,EAAkDC,SAAS,EAAEb,aAA7D,EAfiB;AAgBjB,EAAEW,YAAY,EAAE,eAAhB,EAAiCC,cAAc,EAAE,GAAjD,EAAsDC,SAAS,EAAEd,eAAjE,EAhBiB;AAiBjB,EAAEY,YAAY,EAAE,eAAhB,EAAiCC,cAAc,EAAE,GAAjD,EAAsDC,SAAS,EAAEb,aAAjE,EAjBiB;AAkBjB,EAAEW,YAAY,EAAE,eAAhB,EAAiCC,cAAc,EAAE,GAAjD,EAAsDC,SAAS,EAAEb,aAAjE,EAlBiB;AAmBjB,EAAEW,YAAY,EAAE,SAAhB,EAA2BC,cAAc,EAAE,GAA3C,EAAgDC,SAAS,EAAEd,eAA3D,EAnBiB;AAoBjB,EAAEY,YAAY,EAAE,SAAhB,EAA2BC,cAAc,EAAE,GAA3C,EAAgDC,SAAS,EAAEd,eAA3D,EApBiB;AAqBjB,EAAEY,YAAY,EAAE,SAAhB,EAA2BC,cAAc,EAAE,GAA3C,EAAgDC,SAAS,EAAEb,aAA3D,EArBiB;AAsBjB,EAAEW,YAAY,EAAE,QAAhB,EAA0BC,cAAc,EAAE,GAA1C,EAA+CC,SAAS,EAAEb,aAA1D,EAtBiB;AAuBjB,EAAEW,YAAY,EAAE,QAAhB,EAA0BC,cAAc,EAAE,GAA1C,EAA+CC,SAAS,EAAEb,aAA1D,EAvBiB;AAwBjB,EAAEW,YAAY,EAAE,QAAhB,EAA0BC,cAAc,EAAE,GAA1C,EAA+CC,SAAS,EAAEb,aAA1D,EAxBiB,CALrB,CALJ;;;AAqCGc,EArCH,CAqCM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEJ,YAAF,EAAgBC,cAAhB,EAAgCC,SAAhC,EAA2CJ,MAA3C,KAAsDM,CAAC,CAACV,MAA9D;AACA,QAAMU,CAAC,CAACC,0CAAF,CAA6CP,MAA7C,CAAN;;AAEA,QAAMQ,qBAAqB,GAAG,YAA9B;AACA,QAAMC,eAAe,GAAGH,CAAC,CAACI,MAAF,CAASC,aAAT,CAAuB;AAC7CX,IAAAA,MAAM,EAAEQ,qBADqC;AAE7CI,IAAAA,IAAI,EAAE,EAAEC,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,kBAAkB,EAAE,CAA3C,EAFuC;AAG7CC,IAAAA,KAAK,EAAEC,eAAe,CAACC,QAAhB,GAA2BD,eAAe,CAACE,iBAHL,EAAvB,CAAxB;;AAKA,QAAMC,mBAAmB,GAAGX,eAAe,CAACY,UAAhB,EAA5B;;AAEA,QAAMC,YAAY,GAAGhB,CAAC,CAACI,MAAF,CAASC,aAAT,CAAuB;AAC1CC,IAAAA,IAAI,EAAE,EAAEC,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EADoC;AAE1Cd,IAAAA,MAF0C;AAG1CgB,IAAAA,KAAK,EAAEC,eAAe,CAACE,iBAAhB,GAAoCF,eAAe,CAACM,OAHjB,EAAvB,CAArB;;AAKA,QAAMC,gBAAgB,GAAGF,YAAY,CAACD,UAAb,EAAzB;;AAEA,QAAMI,kBAA+C,GAAG;AACtDC,IAAAA,MAAM,EAAE;AACNC,MAAAA,MAAM,EAAErB,CAAC,CAACI,MAAF,CAASkB,kBAAT,CAA4B;AAClCC,QAAAA,IAAI,EAAG;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAb4C,EAA5B,CADF;;AAgBNC,MAAAA,UAAU,EAAE,MAhBN,EAD8C;;AAmBtDC,IAAAA,QAAQ,EAAE;AACRJ,MAAAA,MAAM,EAAErB,CAAC,CAACI,MAAF,CAASkB,kBAAT,CAA4B;AAClCC,QAAAA,IAAI,EAAG;AACjB;AACA;AACA;AACA,aAL4C,EAA5B,CADA;;AAQRC,MAAAA,UAAU,EAAE,MARJ;AASRE,MAAAA,OAAO,EAAE,CAAC,EAAEhC,MAAM,EAAEQ,qBAAV,EAAD,CATD,EAnB4C;;AA8BtDyB,IAAAA,SAAS,EAAE,EAAEC,QAAQ,EAAE,YAAZ,EA9B2C;AA+BtDC,IAAAA,YAAY,EAAE;AACZC,MAAAA,iBAAiB,EAAE,IADP;AAEZlC,MAAAA,YAFY;AAGZF,MAAAA,MAHY,EA/BwC,EAAxD;;;AAqCA,QAAMqC,QAAQ,GAAG/B,CAAC,CAACI,MAAF,CAAS4B,oBAAT,CAA8Bb,kBAA9B,CAAjB;;AAEA,QAAMc,OAAO,GAAGjC,CAAC,CAACI,MAAF,CAAS8B,oBAAT,EAAhB;AACA,QAAMC,IAAI,GAAGF,OAAO,CAACG,eAAR,CAAwB;AACnCC,IAAAA,gBAAgB,EAAE;AAChB;AACEC,MAAAA,IAAI,EAAExB,mBADR;AAEEyB,MAAAA,OAAO,EAAE,OAFX;AAGEC,MAAAA,SAAS,EAAE,EAAEC,CAAC,EAAE,GAAL,EAAUvD,CAAC,EAAE,GAAb,EAAkBwD,CAAC,EAAE,GAArB,EAA0BC,CAAC,EAAE,GAA7B,EAHb,EADgB,CADiB;;;AAQnCC,IAAAA,sBAAsB,EAAE;AACtBN,MAAAA,IAAI,EAAEpB,gBADgB;;AAGtBrB,MAAAA,cAHsB;AAItBgD,MAAAA,YAAY,EAAE,OAJQ;AAKtBC,MAAAA,gBAAgB,EAAE,CALI;AAMtBC,MAAAA,cAAc,EAAE,OANM,EARW,EAAxB,CAAb;;;AAiBAZ,EAAAA,IAAI,CAACa,WAAL,CAAiBjB,QAAjB;AACAI,EAAAA,IAAI,CAACc,IAAL,CAAU,CAAV;AACAd,EAAAA,IAAI,CAACe,OAAL;AACAlD,EAAAA,CAAC,CAACI,MAAF,CAAS+C,KAAT,CAAeC,MAAf,CAAsB,CAACnB,OAAO,CAACoB,MAAR,EAAD,CAAtB;;AAEArD,EAAAA,CAAC,CAACsD,4BAAF;AACEnD,EAAAA,eADF;AAEED,EAAAA,qBAFF;AAGE,IAAEqD,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAHF;AAIE,IAAEC,GAAG,EAAE,IAAIC,UAAJ,CAAe5D,SAAf,CAAP,EAJF;;AAMD,CA5HH;;AA8HAZ,CAAC,CAACC,IAAF,CAAO,eAAP;AACGC,IADH;AAEK;AACL;AACA,uEAJA;;AAMGE,MANH,CAMUC,CAAC,IAAIA,CAAC,CAACC,OAAF,CAAU,UAAV,EAAsB,CAAC,KAAD,EAAQ,IAAR,CAAtB,CANf;AAOGO,EAPH,CAOM,MAAMC,CAAN,IAAW;AACb,QAAME,qBAAqB,GAAG,YAA9B;AACA,QAAMC,eAAe,GAAGH,CAAC,CAACI,MAAF,CAASC,aAAT,CAAuB;AAC7CX,IAAAA,MAAM,EAAEQ,qBADqC;AAE7CI,IAAAA,IAAI,EAAE,EAAEC,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,kBAAkB,EAAE,CAA3C,EAFuC;AAG7CC,IAAAA,KAAK,EAAEC,eAAe,CAACC,QAAhB,GAA2BD,eAAe,CAACE,iBAHL,EAAvB,CAAxB;;AAKA,QAAMC,mBAAmB,GAAGX,eAAe,CAACY,UAAhB,EAA5B;;AAEA,QAAM4C,iBAAiB,GAAG,cAA1B;AACA,QAAM3C,YAAY,GAAGhB,CAAC,CAACI,MAAF,CAASC,aAAT,CAAuB;AAC1CC,IAAAA,IAAI,EAAE,EAAEC,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EADoC;AAE1Cd,IAAAA,MAAM,EAAEiE,iBAFkC;AAG1CjD,IAAAA,KAAK,EAAEC,eAAe,CAACE,iBAAhB,GAAoCF,eAAe,CAACM,OAHjB,EAAvB,CAArB;;AAKA,QAAMC,gBAAgB,GAAGF,YAAY,CAACD,UAAb,EAAzB;;AAEA,QAAMI,kBAA+C,GAAG;AACtDC,IAAAA,MAAM,EAAE;AACNC,MAAAA,MAAM,EAAErB,CAAC,CAACI,MAAF,CAASkB,kBAAT,CAA4B;AAClCC,QAAAA,IAAI,EAAG;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aA7B4C,EAA5B,CADF;;AAgCNC,MAAAA,UAAU,EAAE,MAhCN,EAD8C;;AAmCtDC,IAAAA,QAAQ,EAAE;AACRJ,MAAAA,MAAM,EAAErB,CAAC,CAACI,MAAF,CAASkB,kBAAT,CAA4B;AAClCC,QAAAA,IAAI,EAAG;AACjB;AACA;AACA;AACA;AACA;AACA,aAP4C,EAA5B,CADA;;AAURC,MAAAA,UAAU,EAAE,MAVJ;AAWRE,MAAAA,OAAO,EAAE,CAAC,EAAEhC,MAAM,EAAEQ,qBAAV,EAAD,CAXD,EAnC4C;;AAgDtDyB,IAAAA,SAAS,EAAE,EAAEC,QAAQ,EAAE,YAAZ,EAhD2C;AAiDtDC,IAAAA,YAAY,EAAE;AACZC,MAAAA,iBAAiB,EAAE,IADP;AAEZlC,MAAAA,YAAY,EAAEI,CAAC,CAACV,MAAF,CAASsE,QAAT,GAAoB,SAApB,GAAgC,MAFlC;AAGZlE,MAAAA,MAAM,EAAEiE,iBAHI,EAjDwC,EAAxD;;;AAuDA,QAAM5B,QAAQ,GAAG/B,CAAC,CAACI,MAAF,CAAS4B,oBAAT,CAA8Bb,kBAA9B,CAAjB;;AAEA,QAAMc,OAAO,GAAGjC,CAAC,CAACI,MAAF,CAAS8B,oBAAT,EAAhB;AACA,QAAMC,IAAI,GAAGF,OAAO,CAACG,eAAR,CAAwB;AACnCC,IAAAA,gBAAgB,EAAE;AAChB;AACEC,MAAAA,IAAI,EAAExB,mBADR;AAEEyB,MAAAA,OAAO,EAAE,OAFX;AAGEC,MAAAA,SAAS,EAAE,EAAEC,CAAC,EAAE,GAAL,EAAUvD,CAAC,EAAE,GAAb,EAAkBwD,CAAC,EAAE,GAArB,EAA0BC,CAAC,EAAE,GAA7B,EAHb,EADgB,CADiB;;;AAQnCC,IAAAA,sBAAsB,EAAE;AACtBN,MAAAA,IAAI,EAAEpB,gBADgB;;AAGtBrB,MAAAA,cAAc,EAAEG,CAAC,CAACV,MAAF,CAASsE,QAAT,GAAoB,GAApB,GAA0B,GAHpB;AAItBf,MAAAA,YAAY,EAAE,OAJQ;AAKtBC,MAAAA,gBAAgB,EAAE,CALI;AAMtBC,MAAAA,cAAc,EAAE,OANM,EARW,EAAxB,CAAb;;;AAiBAZ,EAAAA,IAAI,CAACa,WAAL,CAAiBjB,QAAjB;AACAI,EAAAA,IAAI,CAACc,IAAL,CAAU,CAAV,EAAa,CAAb;AACAd,EAAAA,IAAI,CAACe,OAAL;AACAlD,EAAAA,CAAC,CAACI,MAAF,CAAS+C,KAAT,CAAeC,MAAf,CAAsB,CAACnB,OAAO,CAACoB,MAAR,EAAD,CAAtB;;AAEArD,EAAAA,CAAC,CAACsD,4BAAF;AACEnD,EAAAA,eADF;AAEED,EAAAA,qBAFF;AAGE,IAAEqD,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAHF;AAIE;AACEC,IAAAA,GAAG,EAAE,IAAIC,UAAJ;AACH1D,IAAAA,CAAC,CAACV,MAAF,CAASsE,QAAT,GAAoB,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAApB,GAA+C,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAD5C,CADP,EAJF;;;;AAUD,CAlHH","sourcesContent":["export const description = `\nTest related to depth buffer, depth op, compare func, etc.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { kDepthStencilFormats } from '../../../capability_info.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\nconst backgroundColor = [0x00, 0x00, 0x00, 0xff];\nconst triangleColor = [0xff, 0xff, 0xff, 0xff];\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('depth_bias')\n  .desc(\n    `Tests render results with different depth bias values: positive, negative, infinity, slope, clamp, etc.`\n  )\n  .unimplemented();\n\ng.test('depth_disabled').desc(`Tests render results with depth test disabled`).unimplemented();\n\ng.test('depth_write_disabled')\n  .desc(`Tests render results with depth write disabled`)\n  .unimplemented();\n\ng.test('depth_compare_func')\n  .desc(\n    `Tests each depth compare function works properly. Clears the depth attachment to various values, and renders a point at depth 0.5 with various depthCompare modes.`\n  )\n  .params(u =>\n    u\n      .combine(\n        'format',\n        kDepthStencilFormats.filter(format => format !== 'stencil8')\n      )\n      .combineWithParams([\n        { depthCompare: 'never', depthLoadValue: 1.0, _expected: backgroundColor },\n        { depthCompare: 'never', depthLoadValue: 0.5, _expected: backgroundColor },\n        { depthCompare: 'never', depthLoadValue: 0.0, _expected: backgroundColor },\n        { depthCompare: 'less', depthLoadValue: 1.0, _expected: triangleColor },\n        { depthCompare: 'less', depthLoadValue: 0.5, _expected: backgroundColor },\n        { depthCompare: 'less', depthLoadValue: 0.0, _expected: backgroundColor },\n        { depthCompare: 'less-equal', depthLoadValue: 1.0, _expected: triangleColor },\n        { depthCompare: 'less-equal', depthLoadValue: 0.5, _expected: triangleColor },\n        { depthCompare: 'less-equal', depthLoadValue: 0.0, _expected: backgroundColor },\n        { depthCompare: 'equal', depthLoadValue: 1.0, _expected: backgroundColor },\n        { depthCompare: 'equal', depthLoadValue: 0.5, _expected: triangleColor },\n        { depthCompare: 'equal', depthLoadValue: 0.0, _expected: backgroundColor },\n        { depthCompare: 'not-equal', depthLoadValue: 1.0, _expected: triangleColor },\n        { depthCompare: 'not-equal', depthLoadValue: 0.5, _expected: backgroundColor },\n        { depthCompare: 'not-equal', depthLoadValue: 0.0, _expected: triangleColor },\n        { depthCompare: 'greater-equal', depthLoadValue: 1.0, _expected: backgroundColor },\n        { depthCompare: 'greater-equal', depthLoadValue: 0.5, _expected: triangleColor },\n        { depthCompare: 'greater-equal', depthLoadValue: 0.0, _expected: triangleColor },\n        { depthCompare: 'greater', depthLoadValue: 1.0, _expected: backgroundColor },\n        { depthCompare: 'greater', depthLoadValue: 0.5, _expected: backgroundColor },\n        { depthCompare: 'greater', depthLoadValue: 0.0, _expected: triangleColor },\n        { depthCompare: 'always', depthLoadValue: 1.0, _expected: triangleColor },\n        { depthCompare: 'always', depthLoadValue: 0.5, _expected: triangleColor },\n        { depthCompare: 'always', depthLoadValue: 0.0, _expected: triangleColor },\n      ] as const)\n  )\n  .fn(async t => {\n    const { depthCompare, depthLoadValue, _expected, format } = t.params;\n    await t.selectDeviceForTextureFormatOrSkipTestCase(format);\n\n    const colorAttachmentFormat = 'rgba8unorm';\n    const colorAttachment = t.device.createTexture({\n      format: colorAttachmentFormat,\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n    const colorAttachmentView = colorAttachment.createView();\n\n    const depthTexture = t.device.createTexture({\n      size: { width: 1, height: 1 },\n      format,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.SAMPLED,\n    });\n    const depthTextureView = depthTexture.createView();\n\n    const pipelineDescriptor: GPURenderPipelineDescriptor = {\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n            struct Output {\n              [[builtin(position)]] Position : vec4<f32>;\n              [[location(0)]] color : vec4<f32>;\n            };\n\n            [[stage(vertex)]] fn main(\n              [[builtin(vertex_index)]] VertexIndex : u32) -> Output {\n              var output : Output;\n              output.Position = vec4<f32>(0.5, 0.5, 0.5, 1.0);\n              return output;\n            }\n            `,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `\n            [[stage(fragment)]] fn main() -> [[location(0)]] vec4<f32> {\n              return vec4<f32>(1.0, 1.0, 1.0, 1.0);\n            }\n            `,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: colorAttachmentFormat }],\n      },\n      primitive: { topology: 'point-list' },\n      depthStencil: {\n        depthWriteEnabled: true,\n        depthCompare,\n        format,\n      },\n    };\n    const pipeline = t.device.createRenderPipeline(pipelineDescriptor);\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: colorAttachmentView,\n          storeOp: 'store',\n          loadValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n        },\n      ],\n      depthStencilAttachment: {\n        view: depthTextureView,\n\n        depthLoadValue,\n        depthStoreOp: 'store',\n        stencilLoadValue: 0,\n        stencilStoreOp: 'store',\n      },\n    });\n    pass.setPipeline(pipeline);\n    pass.draw(1);\n    pass.endPass();\n    t.device.queue.submit([encoder.finish()]);\n\n    t.expectSinglePixelIn2DTexture(\n      colorAttachment,\n      colorAttachmentFormat,\n      { x: 0, y: 0 },\n      { exp: new Uint8Array(_expected) }\n    );\n  });\n\ng.test('reverse_depth')\n  .desc(\n    `Tests simple rendering with reversed depth buffer, ensures depth test works properly: fragments are in correct order and out of range fragments are clipped.\n    Note that in real use case the depth range remapping is done by the modified projection matrix.\n(see https://developer.nvidia.com/content/depth-precision-visualized).`\n  )\n  .params(u => u.combine('reversed', [false, true]))\n  .fn(async t => {\n    const colorAttachmentFormat = 'rgba8unorm';\n    const colorAttachment = t.device.createTexture({\n      format: colorAttachmentFormat,\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n    const colorAttachmentView = colorAttachment.createView();\n\n    const depthBufferFormat = 'depth32float';\n    const depthTexture = t.device.createTexture({\n      size: { width: 1, height: 1 },\n      format: depthBufferFormat,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.SAMPLED,\n    });\n    const depthTextureView = depthTexture.createView();\n\n    const pipelineDescriptor: GPURenderPipelineDescriptor = {\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n            struct Output {\n              [[builtin(position)]] Position : vec4<f32>;\n              [[location(0)]] color : vec4<f32>;\n            };\n\n            [[stage(vertex)]] fn main(\n              [[builtin(vertex_index)]] VertexIndex : u32,\n              [[builtin(instance_index)]] InstanceIndex : u32) -> Output {\n              // TODO: remove workaround for Tint unary array access broke\n              var zv : array<vec2<f32>, 4> = array<vec2<f32>, 4>(\n                  vec2<f32>(0.2, 0.2),\n                  vec2<f32>(0.3, 0.3),\n                  vec2<f32>(-0.1, -0.1),\n                  vec2<f32>(1.1, 1.1));\n              let z : f32 = zv[InstanceIndex].x;\n\n              var output : Output;\n              output.Position = vec4<f32>(0.5, 0.5, z, 1.0);\n              var colors : array<vec4<f32>, 4> = array<vec4<f32>, 4>(\n                  vec4<f32>(1.0, 0.0, 0.0, 1.0),\n                  vec4<f32>(0.0, 1.0, 0.0, 1.0),\n                  vec4<f32>(0.0, 0.0, 1.0, 1.0),\n                  vec4<f32>(1.0, 1.0, 1.0, 1.0)\n              );\n              output.color = colors[InstanceIndex];\n              return output;\n            }\n            `,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `\n            [[stage(fragment)]] fn main(\n              [[location(0)]] color : vec4<f32>\n              ) -> [[location(0)]] vec4<f32> {\n              return color;\n            }\n            `,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: colorAttachmentFormat }],\n      },\n      primitive: { topology: 'point-list' },\n      depthStencil: {\n        depthWriteEnabled: true,\n        depthCompare: t.params.reversed ? 'greater' : 'less',\n        format: depthBufferFormat,\n      },\n    };\n    const pipeline = t.device.createRenderPipeline(pipelineDescriptor);\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: colorAttachmentView,\n          storeOp: 'store',\n          loadValue: { r: 0.5, g: 0.5, b: 0.5, a: 1.0 },\n        },\n      ],\n      depthStencilAttachment: {\n        view: depthTextureView,\n\n        depthLoadValue: t.params.reversed ? 0.0 : 1.0,\n        depthStoreOp: 'store',\n        stencilLoadValue: 0,\n        stencilStoreOp: 'store',\n      },\n    });\n    pass.setPipeline(pipeline);\n    pass.draw(1, 4);\n    pass.endPass();\n    t.device.queue.submit([encoder.finish()]);\n\n    t.expectSinglePixelIn2DTexture(\n      colorAttachment,\n      colorAttachmentFormat,\n      { x: 0, y: 0 },\n      {\n        exp: new Uint8Array(\n          t.params.reversed ? [0x00, 0xff, 0x00, 0xff] : [0xff, 0x00, 0x00, 0xff]\n        ),\n      }\n    );\n  });\n"],"file":"depth.spec.js"}