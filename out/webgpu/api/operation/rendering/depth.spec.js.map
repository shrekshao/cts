{"version":3,"sources":["../../../../../src/webgpu/api/operation/rendering/depth.spec.ts"],"names":["description","makeTestGroup","kDepthStencilFormats","kTextureFormatInfo","GPUTest","backgroundColor","triangleColor","g","test","desc","unimplemented","kMiddleDepthValue","params","u","combine","filter","format","depth","combineWithParams","depthCompare","depthClearValue","_expected","beforeAllSubcases","t","selectDeviceForTextureFormatOrSkipTestCase","fn","colorAttachmentFormat","colorAttachment","device","createTexture","size","width","height","depthOrArrayLayers","usage","GPUTextureUsage","COPY_SRC","RENDER_ATTACHMENT","colorAttachmentView","createView","depthTexture","TEXTURE_BINDING","depthTextureView","pipelineDescriptor","layout","vertex","module","createShaderModule","code","entryPoint","fragment","targets","primitive","topology","depthStencil","depthWriteEnabled","pipeline","createRenderPipeline","encoder","createCommandEncoder","depthStencilAttachment","view","depthLoadOp","depthStoreOp","stencil","stencilClearValue","stencilLoadOp","stencilStoreOp","pass","beginRenderPass","colorAttachments","storeOp","clearValue","r","b","a","loadOp","setPipeline","draw","end","queue","submit","finish","expectSinglePixelIn2DTexture","x","y","exp","Uint8Array","depthBufferFormat","reversed"],"mappings":"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","sourcesContent":["export const description = `\nTest related to depth buffer, depth op, compare func, etc.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { kDepthStencilFormats, kTextureFormatInfo } from '../../../capability_info.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\nconst backgroundColor = [0x00, 0x00, 0x00, 0xff];\nconst triangleColor = [0xff, 0xff, 0xff, 0xff];\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('depth_bias')\n  .desc(\n    `Tests render results with different depth bias values: positive, negative, infinity, slope, clamp, etc.`\n  )\n  .unimplemented();\n\ng.test('depth_disabled').desc(`Tests render results with depth test disabled`).unimplemented();\n\ng.test('depth_write_disabled')\n  .desc(`Tests render results with depth write disabled`)\n  .unimplemented();\n\n// Use a depth value that's not exactly 0.5 because it is exactly between two depth16unorm value and\n// can get rounded either way (and a different way between shaders and clearDepthValue).\nconst kMiddleDepthValue = 0.5001;\n\ng.test('depth_compare_func')\n  .desc(\n    `Tests each depth compare function works properly. Clears the depth attachment to various values, and renders a point at depth 0.5 with various depthCompare modes.`\n  )\n  .params(u =>\n    u\n      .combine(\n        'format',\n        kDepthStencilFormats.filter(format => kTextureFormatInfo[format].depth)\n      )\n      .combineWithParams([\n        { depthCompare: 'never', depthClearValue: 1.0, _expected: backgroundColor },\n        { depthCompare: 'never', depthClearValue: kMiddleDepthValue, _expected: backgroundColor },\n        { depthCompare: 'never', depthClearValue: 0.0, _expected: backgroundColor },\n        { depthCompare: 'less', depthClearValue: 1.0, _expected: triangleColor },\n        { depthCompare: 'less', depthClearValue: kMiddleDepthValue, _expected: backgroundColor },\n        { depthCompare: 'less', depthClearValue: 0.0, _expected: backgroundColor },\n        { depthCompare: 'less-equal', depthClearValue: 1.0, _expected: triangleColor },\n        {\n          depthCompare: 'less-equal',\n          depthClearValue: kMiddleDepthValue,\n          _expected: triangleColor,\n        },\n        { depthCompare: 'less-equal', depthClearValue: 0.0, _expected: backgroundColor },\n        { depthCompare: 'equal', depthClearValue: 1.0, _expected: backgroundColor },\n        { depthCompare: 'equal', depthClearValue: kMiddleDepthValue, _expected: triangleColor },\n        { depthCompare: 'equal', depthClearValue: 0.0, _expected: backgroundColor },\n        { depthCompare: 'not-equal', depthClearValue: 1.0, _expected: triangleColor },\n        {\n          depthCompare: 'not-equal',\n          depthClearValue: kMiddleDepthValue,\n          _expected: backgroundColor,\n        },\n        { depthCompare: 'not-equal', depthClearValue: 0.0, _expected: triangleColor },\n        { depthCompare: 'greater-equal', depthClearValue: 1.0, _expected: backgroundColor },\n        {\n          depthCompare: 'greater-equal',\n          depthClearValue: kMiddleDepthValue,\n          _expected: triangleColor,\n        },\n        { depthCompare: 'greater-equal', depthClearValue: 0.0, _expected: triangleColor },\n        { depthCompare: 'greater', depthClearValue: 1.0, _expected: backgroundColor },\n        { depthCompare: 'greater', depthClearValue: kMiddleDepthValue, _expected: backgroundColor },\n        { depthCompare: 'greater', depthClearValue: 0.0, _expected: triangleColor },\n        { depthCompare: 'always', depthClearValue: 1.0, _expected: triangleColor },\n        { depthCompare: 'always', depthClearValue: kMiddleDepthValue, _expected: triangleColor },\n        { depthCompare: 'always', depthClearValue: 0.0, _expected: triangleColor },\n      ] as const)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n  })\n  .fn(async t => {\n    const { depthCompare, depthClearValue, _expected, format } = t.params;\n\n    const colorAttachmentFormat = 'rgba8unorm';\n    const colorAttachment = t.device.createTexture({\n      format: colorAttachmentFormat,\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n    const colorAttachmentView = colorAttachment.createView();\n\n    const depthTexture = t.device.createTexture({\n      size: { width: 1, height: 1 },\n      format,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING,\n    });\n    const depthTextureView = depthTexture.createView();\n\n    const pipelineDescriptor: GPURenderPipelineDescriptor = {\n      layout: 'auto',\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n            @vertex fn main(\n              @builtin(vertex_index) VertexIndex : u32) -> @builtin(position) vec4<f32> {\n              return vec4<f32>(0.5, 0.5, ${kMiddleDepthValue}, 1.0);\n            }\n            `,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `\n            @fragment fn main() -> @location(0) vec4<f32> {\n              return vec4<f32>(1.0, 1.0, 1.0, 1.0);\n            }\n            `,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: colorAttachmentFormat }],\n      },\n      primitive: { topology: 'point-list' },\n      depthStencil: {\n        depthWriteEnabled: true,\n        depthCompare,\n        format,\n      },\n    };\n    const pipeline = t.device.createRenderPipeline(pipelineDescriptor);\n\n    const encoder = t.device.createCommandEncoder();\n    const depthStencilAttachment: GPURenderPassDepthStencilAttachment = {\n      view: depthTextureView,\n      depthClearValue,\n      depthLoadOp: 'clear',\n      depthStoreOp: 'store',\n    };\n    if (kTextureFormatInfo[format].stencil) {\n      depthStencilAttachment.stencilClearValue = 0;\n      depthStencilAttachment.stencilLoadOp = 'clear';\n      depthStencilAttachment.stencilStoreOp = 'store';\n    }\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: colorAttachmentView,\n          storeOp: 'store',\n          clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n          loadOp: 'clear',\n        },\n      ],\n      depthStencilAttachment,\n    });\n    pass.setPipeline(pipeline);\n    pass.draw(1);\n    pass.end();\n    t.device.queue.submit([encoder.finish()]);\n\n    t.expectSinglePixelIn2DTexture(\n      colorAttachment,\n      colorAttachmentFormat,\n      { x: 0, y: 0 },\n      { exp: new Uint8Array(_expected) }\n    );\n  });\n\ng.test('reverse_depth')\n  .desc(\n    `Tests simple rendering with reversed depth buffer, ensures depth test works properly: fragments are in correct order and out of range fragments are clipped.\n    Note that in real use case the depth range remapping is done by the modified projection matrix.\n(see https://developer.nvidia.com/content/depth-precision-visualized).`\n  )\n  .params(u => u.combine('reversed', [false, true]))\n  .fn(async t => {\n    const colorAttachmentFormat = 'rgba8unorm';\n    const colorAttachment = t.device.createTexture({\n      format: colorAttachmentFormat,\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n    const colorAttachmentView = colorAttachment.createView();\n\n    const depthBufferFormat = 'depth32float';\n    const depthTexture = t.device.createTexture({\n      size: { width: 1, height: 1 },\n      format: depthBufferFormat,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING,\n    });\n    const depthTextureView = depthTexture.createView();\n\n    const pipelineDescriptor: GPURenderPipelineDescriptor = {\n      layout: 'auto',\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n            struct Output {\n              @builtin(position) Position : vec4<f32>,\n              @location(0) color : vec4<f32>,\n            };\n\n            @vertex fn main(\n              @builtin(vertex_index) VertexIndex : u32,\n              @builtin(instance_index) InstanceIndex : u32) -> Output {\n              // TODO: remove workaround for Tint unary array access broke\n              var zv : array<vec2<f32>, 4> = array<vec2<f32>, 4>(\n                  vec2<f32>(0.2, 0.2),\n                  vec2<f32>(0.3, 0.3),\n                  vec2<f32>(-0.1, -0.1),\n                  vec2<f32>(1.1, 1.1));\n              let z : f32 = zv[InstanceIndex].x;\n\n              var output : Output;\n              output.Position = vec4<f32>(0.5, 0.5, z, 1.0);\n              var colors : array<vec4<f32>, 4> = array<vec4<f32>, 4>(\n                  vec4<f32>(1.0, 0.0, 0.0, 1.0),\n                  vec4<f32>(0.0, 1.0, 0.0, 1.0),\n                  vec4<f32>(0.0, 0.0, 1.0, 1.0),\n                  vec4<f32>(1.0, 1.0, 1.0, 1.0)\n              );\n              output.color = colors[InstanceIndex];\n              return output;\n            }\n            `,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `\n            @fragment fn main(\n              @location(0) color : vec4<f32>\n              ) -> @location(0) vec4<f32> {\n              return color;\n            }\n            `,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: colorAttachmentFormat }],\n      },\n      primitive: { topology: 'point-list' },\n      depthStencil: {\n        depthWriteEnabled: true,\n        depthCompare: t.params.reversed ? 'greater' : 'less',\n        format: depthBufferFormat,\n      },\n    };\n    const pipeline = t.device.createRenderPipeline(pipelineDescriptor);\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: colorAttachmentView,\n          storeOp: 'store',\n          clearValue: { r: 0.5, g: 0.5, b: 0.5, a: 1.0 },\n          loadOp: 'clear',\n        },\n      ],\n      depthStencilAttachment: {\n        view: depthTextureView,\n\n        depthClearValue: t.params.reversed ? 0.0 : 1.0,\n        depthLoadOp: 'clear',\n        depthStoreOp: 'store',\n      },\n    });\n    pass.setPipeline(pipeline);\n    pass.draw(1, 4);\n    pass.end();\n    t.device.queue.submit([encoder.finish()]);\n\n    t.expectSinglePixelIn2DTexture(\n      colorAttachment,\n      colorAttachmentFormat,\n      { x: 0, y: 0 },\n      {\n        exp: new Uint8Array(\n          t.params.reversed ? [0x00, 0xff, 0x00, 0xff] : [0xff, 0x00, 0x00, 0xff]\n        ),\n      }\n    );\n  });\n"],"file":"depth.spec.js"}