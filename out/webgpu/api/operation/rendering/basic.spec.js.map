{"version":3,"sources":["../../../../../src/webgpu/api/operation/rendering/basic.spec.ts"],"names":["description","makeTestGroup","GPUTest","g","test","fn","t","dst","device","createBuffer","size","usage","GPUBufferUsage","COPY_SRC","COPY_DST","colorAttachment","createTexture","format","width","height","depthOrArrayLayers","GPUTextureUsage","RENDER_ATTACHMENT","colorAttachmentView","createView","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","view","loadValue","r","b","a","storeOp","endPass","copyTextureToBuffer","texture","mipLevel","origin","x","y","z","buffer","bytesPerRow","queue","submit","finish","expectGPUBufferValuesEqual","Uint8Array","pipeline","createRenderPipeline","vertex","module","createShaderModule","code","entryPoint","fragment","targets","primitive","topology","setPipeline","draw","desc","unimplemented"],"mappings":"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","sourcesContent":["export const description = `\nBasic command buffer rendering tests.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('clear').fn(async t => {\n  const dst = t.device.createBuffer({\n    size: 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n\n  const colorAttachment = t.device.createTexture({\n    format: 'rgba8unorm',\n    size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n  const colorAttachmentView = colorAttachment.createView();\n\n  const encoder = t.device.createCommandEncoder();\n  const pass = encoder.beginRenderPass({\n    colorAttachments: [\n      {\n        view: colorAttachmentView,\n        loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n        storeOp: 'store',\n      },\n    ],\n  });\n  pass.endPass();\n  encoder.copyTextureToBuffer(\n    { texture: colorAttachment, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { buffer: dst, bytesPerRow: 256 },\n    { width: 1, height: 1, depthOrArrayLayers: 1 }\n  );\n  t.device.queue.submit([encoder.finish()]);\n\n  t.expectGPUBufferValuesEqual(dst, new Uint8Array([0x00, 0xff, 0x00, 0xff]));\n});\n\ng.test('fullscreen_quad').fn(async t => {\n  const dst = t.device.createBuffer({\n    size: 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n\n  const colorAttachment = t.device.createTexture({\n    format: 'rgba8unorm',\n    size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n  const colorAttachmentView = colorAttachment.createView();\n\n  const pipeline = t.device.createRenderPipeline({\n    vertex: {\n      module: t.device.createShaderModule({\n        code: `\n        [[stage(vertex)]] fn main(\n          [[builtin(vertex_index)]] VertexIndex : u32\n          ) -> [[builtin(position)]] vec4<f32> {\n            var pos : array<vec2<f32>, 3> = array<vec2<f32>, 3>(\n                vec2<f32>(-1.0, -3.0),\n                vec2<f32>(3.0, 1.0),\n                vec2<f32>(-1.0, 1.0));\n            return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n          }\n          `,\n      }),\n      entryPoint: 'main',\n    },\n    fragment: {\n      module: t.device.createShaderModule({\n        code: `\n          [[stage(fragment)]] fn main() -> [[location(0)]] vec4<f32> {\n            return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n          }\n          `,\n      }),\n      entryPoint: 'main',\n      targets: [{ format: 'rgba8unorm' }],\n    },\n    primitive: { topology: 'triangle-list' },\n  });\n\n  const encoder = t.device.createCommandEncoder();\n  const pass = encoder.beginRenderPass({\n    colorAttachments: [\n      {\n        view: colorAttachmentView,\n        storeOp: 'store',\n        loadValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n      },\n    ],\n  });\n  pass.setPipeline(pipeline);\n  pass.draw(3);\n  pass.endPass();\n  encoder.copyTextureToBuffer(\n    { texture: colorAttachment, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { buffer: dst, bytesPerRow: 256 },\n    { width: 1, height: 1, depthOrArrayLayers: 1 }\n  );\n  t.device.queue.submit([encoder.finish()]);\n\n  t.expectGPUBufferValuesEqual(dst, new Uint8Array([0x00, 0xff, 0x00, 0xff]));\n});\n\ng.test('large_draw')\n  .desc(`Test reasonably-sized large {draw, drawIndexed} (see also stress tests).`)\n  .unimplemented();\n"],"file":"basic.spec.js"}