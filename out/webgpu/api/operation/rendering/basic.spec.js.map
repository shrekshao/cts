{"version":3,"sources":["../../../../../src/webgpu/api/operation/rendering/basic.spec.ts"],"names":["description","makeTestGroup","now","GPUTest","checkElementsEqual","g","test","fn","t","dst","device","createBuffer","size","usage","GPUBufferUsage","COPY_SRC","COPY_DST","colorAttachment","createTexture","format","width","height","depthOrArrayLayers","GPUTextureUsage","RENDER_ATTACHMENT","colorAttachmentView","createView","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","view","loadValue","r","b","a","storeOp","endPass","copyTextureToBuffer","texture","mipLevel","origin","x","y","z","buffer","bytesPerRow","queue","submit","finish","expectGPUBufferValuesEqual","Uint8Array","pipeline","createRenderPipeline","vertex","module","createShaderModule","code","entryPoint","fragment","targets","primitive","topology","setPipeline","draw","desc","params","u","combine","indexed","indirect","kBytesPerRow","paramsBuffer","UNIFORM","indirectBuffer","INDIRECT","writeIndirectParams","count","instanceCount","Uint32Array","writeBuffer","indexBuffer","kMaxIndices","BYTES_PER_ELEMENT","INDEX","mappedAtCreation","trackForCleanup","indexData","getMappedRange","i","unmap","bgLayout","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","VERTEX","bindGroup","createBindGroup","layout","resource","createPipelineLayout","bindGroupLayouts","runPipeline","numVertices","numInstances","setBindGroup","setIndexBuffer","drawIndexedIndirect","drawIndirect","drawIndexed","yellow","allYellow","row","expectGPUBufferValuesPassCheck","data","srcByteOffset","type","typedLength","maxDurationMs","counts","vertexCounts","start","onSubmittedWorkDone","duration"],"mappings":"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","sourcesContent":["export const description = `\nBasic command buffer rendering tests.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { now } from '../../../../common/util/util.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { checkElementsEqual } from '../../../util/check_contents.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('clear').fn(async t => {\n  const dst = t.device.createBuffer({\n    size: 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n\n  const colorAttachment = t.device.createTexture({\n    format: 'rgba8unorm',\n    size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n  const colorAttachmentView = colorAttachment.createView();\n\n  const encoder = t.device.createCommandEncoder();\n  const pass = encoder.beginRenderPass({\n    colorAttachments: [\n      {\n        view: colorAttachmentView,\n        loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n        storeOp: 'store',\n      },\n    ],\n  });\n  pass.endPass();\n  encoder.copyTextureToBuffer(\n    { texture: colorAttachment, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { buffer: dst, bytesPerRow: 256 },\n    { width: 1, height: 1, depthOrArrayLayers: 1 }\n  );\n  t.device.queue.submit([encoder.finish()]);\n\n  t.expectGPUBufferValuesEqual(dst, new Uint8Array([0x00, 0xff, 0x00, 0xff]));\n});\n\ng.test('fullscreen_quad').fn(async t => {\n  const dst = t.device.createBuffer({\n    size: 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n\n  const colorAttachment = t.device.createTexture({\n    format: 'rgba8unorm',\n    size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n  const colorAttachmentView = colorAttachment.createView();\n\n  const pipeline = t.device.createRenderPipeline({\n    vertex: {\n      module: t.device.createShaderModule({\n        code: `\n        @stage(vertex) fn main(\n          @builtin(vertex_index) VertexIndex : u32\n          ) -> @builtin(position) vec4<f32> {\n            var pos : array<vec2<f32>, 3> = array<vec2<f32>, 3>(\n                vec2<f32>(-1.0, -3.0),\n                vec2<f32>(3.0, 1.0),\n                vec2<f32>(-1.0, 1.0));\n            return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n          }\n          `,\n      }),\n      entryPoint: 'main',\n    },\n    fragment: {\n      module: t.device.createShaderModule({\n        code: `\n          @stage(fragment) fn main() -> @location(0) vec4<f32> {\n            return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n          }\n          `,\n      }),\n      entryPoint: 'main',\n      targets: [{ format: 'rgba8unorm' }],\n    },\n    primitive: { topology: 'triangle-list' },\n  });\n\n  const encoder = t.device.createCommandEncoder();\n  const pass = encoder.beginRenderPass({\n    colorAttachments: [\n      {\n        view: colorAttachmentView,\n        storeOp: 'store',\n        loadValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n      },\n    ],\n  });\n  pass.setPipeline(pipeline);\n  pass.draw(3);\n  pass.endPass();\n  encoder.copyTextureToBuffer(\n    { texture: colorAttachment, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { buffer: dst, bytesPerRow: 256 },\n    { width: 1, height: 1, depthOrArrayLayers: 1 }\n  );\n  t.device.queue.submit([encoder.finish()]);\n\n  t.expectGPUBufferValuesEqual(dst, new Uint8Array([0x00, 0xff, 0x00, 0xff]));\n});\n\ng.test('large_draw')\n  .desc(\n    `Test reasonably-sized large {draw, drawIndexed} (see also stress tests).\n\n  Tests that draw calls behave reasonably with large vertex counts for\n  non-indexed draws, large index counts for indexed draws, and large instance\n  counts in both cases. Various combinations of these counts are tested with\n  both direct and indrect draw calls.\n\n  Draw call sizes are increased incrementally over these parameters until we the\n  run out of values or completion of a draw call exceeds a fixed time limit of\n  100ms.\n\n  To validate that the drawn vertices actually made it though the pipeline on\n  each draw call, we render a 3x3 target with the positions of the first and\n  last vertices of the first and last instances in different respective corners,\n  and everything else positioned to cover only one of the intermediate\n  fragments. If the output image is completely yellow, then we can reasonably\n  infer that all vertices were drawn.\n\n  Params:\n    - indexed= {true, false} - whether to test indexed or non-indexed draw calls\n    - indirect= {true, false} - whether to use indirect or direct draw calls`\n  )\n  .params(u =>\n    u //\n      .combine('indexed', [true, false])\n      .combine('indirect', [true, false])\n  )\n  .fn(async t => {\n    const { indexed, indirect } = t.params;\n\n    const kBytesPerRow = 256;\n    const dst = t.device.createBuffer({\n      size: 3 * kBytesPerRow,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n\n    const paramsBuffer = t.device.createBuffer({\n      size: 8,\n      usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n    });\n\n    const indirectBuffer = t.device.createBuffer({\n      size: 20,\n      usage: GPUBufferUsage.INDIRECT | GPUBufferUsage.COPY_DST,\n    });\n    const writeIndirectParams = (count: number, instanceCount: number) => {\n      const params = new Uint32Array(5);\n      params[0] = count; // Vertex or index count\n      params[1] = instanceCount;\n      params[2] = 0; // First vertex or index\n      params[3] = 0; // First instance (non-indexed) or base vertex (indexed)\n      params[4] = 0; // First instance (indexed)\n      t.device.queue.writeBuffer(indirectBuffer, 0, params, 0, 5);\n    };\n\n    let indexBuffer: null | GPUBuffer = null;\n    if (indexed) {\n      const kMaxIndices = 16 * 1024 * 1024;\n      indexBuffer = t.device.createBuffer({\n        size: kMaxIndices * Uint32Array.BYTES_PER_ELEMENT,\n        usage: GPUBufferUsage.INDEX | GPUBufferUsage.COPY_DST,\n        mappedAtCreation: true,\n      });\n      t.trackForCleanup(indexBuffer);\n      const indexData = new Uint32Array(indexBuffer.getMappedRange());\n      for (let i = 0; i < kMaxIndices; ++i) {\n        indexData[i] = i;\n      }\n      indexBuffer.unmap();\n    }\n\n    const colorAttachment = t.device.createTexture({\n      format: 'rgba8unorm',\n      size: { width: 3, height: 3, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n    const colorAttachmentView = colorAttachment.createView();\n\n    const bgLayout = t.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.VERTEX,\n          buffer: {},\n        },\n      ],\n    });\n\n    const bindGroup = t.device.createBindGroup({\n      layout: bgLayout,\n      entries: [\n        {\n          binding: 0,\n          resource: { buffer: paramsBuffer },\n        },\n      ],\n    });\n\n    const pipeline = t.device.createRenderPipeline({\n      layout: t.device.createPipelineLayout({ bindGroupLayouts: [bgLayout] }),\n\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n          struct Params {\n            numVertices: u32;\n            numInstances: u32;\n          };\n\n          fn selectValue(index: u32, maxIndex: u32) -> f32 {\n            let highOrMid = select(0.0, 2.0 / 3.0, index == maxIndex - 1u);\n            return select(highOrMid, -2.0 / 3.0, index == 0u);\n          }\n\n          @group(0) @binding(0) var<uniform> params: Params;\n\n          @stage(vertex) fn main(\n              @builtin(vertex_index) v: u32,\n              @builtin(instance_index) i: u32)\n              -> @builtin(position) vec4<f32> {\n            let x = selectValue(v, params.numVertices);\n            let y = -selectValue(i, params.numInstances);\n            return vec4<f32>(x, y, 0.0, 1.0);\n          }\n          `,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `\n            @stage(fragment) fn main() -> @location(0) vec4<f32> {\n              return vec4<f32>(1.0, 1.0, 0.0, 1.0);\n            }\n            `,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: 'rgba8unorm' }],\n      },\n      primitive: { topology: 'point-list' },\n    });\n\n    const runPipeline = async (numVertices: number, numInstances: number) => {\n      const encoder = t.device.createCommandEncoder();\n      const pass = encoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: colorAttachmentView,\n            storeOp: 'store',\n            loadValue: { r: 0.0, g: 0.0, b: 1.0, a: 1.0 },\n          },\n        ],\n      });\n\n      pass.setPipeline(pipeline);\n      pass.setBindGroup(0, bindGroup);\n      if (indexBuffer !== null) {\n        pass.setIndexBuffer(indexBuffer, 'uint32');\n      }\n\n      if (indirect) {\n        writeIndirectParams(numVertices, numInstances);\n        if (indexed) {\n          pass.drawIndexedIndirect(indirectBuffer, 0);\n        } else {\n          pass.drawIndirect(indirectBuffer, 0);\n        }\n      } else {\n        if (indexed) {\n          pass.drawIndexed(numVertices, numInstances);\n        } else {\n          pass.draw(numVertices, numInstances);\n        }\n      }\n      pass.endPass();\n      encoder.copyTextureToBuffer(\n        { texture: colorAttachment, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n        { buffer: dst, bytesPerRow: kBytesPerRow },\n        { width: 3, height: 3, depthOrArrayLayers: 1 }\n      );\n\n      const params = new Uint32Array([numVertices, numInstances]);\n      t.device.queue.writeBuffer(paramsBuffer, 0, params, 0, 2);\n      t.device.queue.submit([encoder.finish()]);\n\n      const yellow = [0xff, 0xff, 0x00, 0xff];\n      const allYellow = new Uint8Array([...yellow, ...yellow, ...yellow]);\n      for (const row of [0, 1, 2]) {\n        t.expectGPUBufferValuesPassCheck(dst, data => checkElementsEqual(data, allYellow), {\n          srcByteOffset: row * 256,\n          type: Uint8Array,\n          typedLength: 12,\n        });\n      }\n    };\n\n    // If any iteration takes longer than this, we stop incrementing along that\n    // branch and move on to the next instance count. Note that the max\n    // supported vertex count for any iteration is 2**24 due to our choice of\n    // index buffer size.\n    const maxDurationMs = 100;\n    const counts = [\n      {\n        numInstances: 4,\n        vertexCounts: [2 ** 10, 2 ** 16, 2 ** 18, 2 ** 20, 2 ** 22, 2 ** 24],\n      },\n      {\n        numInstances: 2 ** 8,\n        vertexCounts: [2 ** 10, 2 ** 16, 2 ** 18, 2 ** 20, 2 ** 22],\n      },\n      {\n        numInstances: 2 ** 10,\n        vertexCounts: [2 ** 8, 2 ** 10, 2 ** 12, 2 ** 16, 2 ** 18, 2 ** 20],\n      },\n      {\n        numInstances: 2 ** 16,\n        vertexCounts: [2 ** 4, 2 ** 8, 2 ** 10, 2 ** 12, 2 ** 14],\n      },\n      {\n        numInstances: 2 ** 20,\n        vertexCounts: [2 ** 4, 2 ** 8, 2 ** 10],\n      },\n    ];\n    for (const { numInstances, vertexCounts } of counts) {\n      for (const numVertices of vertexCounts) {\n        const start = now();\n        runPipeline(numVertices, numInstances);\n        await t.device.queue.onSubmittedWorkDone();\n        const duration = now() - start;\n        if (duration >= maxDurationMs) {\n          break;\n        }\n      }\n    }\n  });\n"],"file":"basic.spec.js"}