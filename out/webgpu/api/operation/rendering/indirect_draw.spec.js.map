{"version":3,"sources":["../../../../../src/webgpu/api/operation/rendering/indirect_draw.spec.ts"],"names":["description","makeTestGroup","kDrawIndirectParametersSize","kDrawIndexedIndirectParametersSize","GPUTest","filled","Uint8Array","notFilled","kRenderTargetFormat","F","MakeIndexBuffer","makeBufferWithContents","Uint32Array","GPUBufferUsage","INDEX","MakeVertexBuffer","isIndexed","vextices","Float32Array","VERTEX","MakeIndirectBuffer","indirectOffset","o","BYTES_PER_ELEMENT","parametersSize","arraySize","indirectBuffer","Array","map","Math","floor","random","INDIRECT","g","test","desc","params","u","combine","beginSubcases","expand","p","indirectDrawParametersSize","fn","t","vertexBuffer","pipeline","device","createRenderPipeline","vertex","module","createShaderModule","code","entryPoint","buffers","attributes","shaderLocation","format","offset","arrayStride","fragment","targets","renderTarget","createTexture","size","usage","GPUTextureUsage","RENDER_ATTACHMENT","COPY_SRC","commandEncoder","createCommandEncoder","renderPass","beginRenderPass","colorAttachments","view","createView","loadValue","storeOp","setPipeline","setVertexBuffer","setIndexBuffer","drawIndexedIndirect","drawIndirect","endPass","queue","submit","finish","expectSinglePixelIn2DTexture","x","y","exp"],"mappings":"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","sourcesContent":["export const description = `\nTests for the indirect-specific aspects of drawIndirect/drawIndexedIndirect.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport {\n  kDrawIndirectParametersSize,\n  kDrawIndexedIndirectParametersSize,\n} from '../../../capability_info.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\nconst filled = new Uint8Array([0, 255, 0, 255]);\nconst notFilled = new Uint8Array([0, 0, 0, 0]);\n\nconst kRenderTargetFormat = 'rgba8unorm';\n\nclass F extends GPUTest {\n  MakeIndexBuffer(): GPUBuffer {\n    return this.makeBufferWithContents(\n      /* prettier-ignore */\n      new Uint32Array([\n        0,  1,  2, // The bottom left triangle\n        1,  2,  3, // The top right triangle\n      ]),\n      GPUBufferUsage.INDEX\n    );\n  }\n\n  MakeVertexBuffer(isIndexed: boolean): GPUBuffer {\n    /* prettier-ignore */\n    const vextices = isIndexed\n      ? [\n          -1.0, -1.0,\n          -1.0,  1.0,\n           1.0, -1.0,\n           1.0,  1.0,\n        ]\n      : [\n          // The bottom left triangle\n          -1.0,  1.0,\n           1.0, -1.0,\n          -1.0, -1.0,\n\n          // The top right triangle\n          -1.0,  1.0,\n           1.0, -1.0,\n           1.0,  1.0,\n        ];\n    return this.makeBufferWithContents(new Float32Array(vextices), GPUBufferUsage.VERTEX);\n  }\n\n  MakeIndirectBuffer(isIndexed: boolean, indirectOffset: number): GPUBuffer {\n    const o = indirectOffset / Uint32Array.BYTES_PER_ELEMENT;\n\n    const parametersSize = isIndexed\n      ? kDrawIndexedIndirectParametersSize\n      : kDrawIndirectParametersSize;\n    const arraySize = o + parametersSize * 2;\n\n    const indirectBuffer = [...Array(arraySize)].map(() => Math.floor(Math.random() * 100));\n\n    if (isIndexed) {\n      // draw args that will draw the left bottom triangle (expected call)\n      indirectBuffer[o] = 3; // indexCount\n      indirectBuffer[o + 1] = 1; // instanceCount\n      indirectBuffer[o + 2] = 0; // firstIndex\n      indirectBuffer[o + 3] = 0; // baseVertex\n      indirectBuffer[o + 4] = 0; // firstInstance\n\n      // draw args that will draw both triangles\n      indirectBuffer[o + 5] = 6; // indexCount\n      indirectBuffer[o + 6] = 1; // instanceCount\n      indirectBuffer[o + 7] = 0; // firstIndex\n      indirectBuffer[o + 8] = 0; // baseVertex\n      indirectBuffer[o + 9] = 0; // firstInstance\n\n      if (o >= parametersSize) {\n        // draw args that will draw the right top triangle\n        indirectBuffer[o - 5] = 3; // indexCount\n        indirectBuffer[o - 4] = 1; // instanceCount\n        indirectBuffer[o - 3] = 3; // firstIndex\n        indirectBuffer[o - 2] = 0; // baseVertex\n        indirectBuffer[o - 1] = 0; // firstInstance\n      }\n\n      if (o >= parametersSize * 2) {\n        // draw args that will draw nothing\n        indirectBuffer[0] = 0; // indexCount\n        indirectBuffer[1] = 0; // instanceCount\n        indirectBuffer[2] = 0; // firstIndex\n        indirectBuffer[3] = 0; // baseVertex\n        indirectBuffer[4] = 0; // firstInstance\n      }\n    } else {\n      // draw args that will draw the left bottom triangle (expected call)\n      indirectBuffer[o] = 3; // vertexCount\n      indirectBuffer[o + 1] = 1; // instanceCount\n      indirectBuffer[o + 2] = 0; // firstVertex\n      indirectBuffer[o + 3] = 0; // firstInstance\n\n      // draw args that will draw both triangles\n      indirectBuffer[o + 4] = 6; // vertexCount\n      indirectBuffer[o + 5] = 1; // instanceCount\n      indirectBuffer[o + 6] = 0; // firstVertex\n      indirectBuffer[o + 7] = 0; // firstInstance\n\n      if (o >= parametersSize) {\n        // draw args that will draw the right top triangle\n        indirectBuffer[o - 4] = 3; // vertexCount\n        indirectBuffer[o - 3] = 1; // instanceCount\n        indirectBuffer[o - 2] = 3; // firstVertex\n        indirectBuffer[o - 1] = 0; // firstInstance\n      }\n\n      if (o >= parametersSize * 2) {\n        // draw args that will draw nothing\n        indirectBuffer[0] = 0; // vertexCount\n        indirectBuffer[1] = 0; // instanceCount\n        indirectBuffer[2] = 0; // firstVertex\n        indirectBuffer[3] = 0; // firstInstance\n      }\n    }\n\n    return this.makeBufferWithContents(new Uint32Array(indirectBuffer), GPUBufferUsage.INDIRECT);\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('basics')\n  .desc(\n    `Test that the indirect draw parameters are tightly packed for drawIndirect and drawIndexedIndirect.\nAn indirectBuffer is created based on indirectOffset. The actual draw args being used indicated by the\nindirectOffset is going to draw a left bottom triangle.\nWhile the remaining indirectBuffer is populated with random numbers or draw args\nthat draw right top triangle, both, or nothing which will fail the color check.\nThe test will check render target to see if only the left bottom area is filled,\nmeaning the expected draw args is uploaded correctly by the indirectBuffer and indirectOffset.\n\nParams:\n    - draw{Indirect, IndexedIndirect}\n    - indirectOffset= {0, 4, k * sizeof(args struct), k * sizeof(args struct) + 4}\n    `\n  )\n  .params(u =>\n    u\n      .combine('isIndexed', [true, false])\n      .beginSubcases()\n      .expand('indirectOffset', p => {\n        const indirectDrawParametersSize = p.isIndexed\n          ? kDrawIndexedIndirectParametersSize * Uint32Array.BYTES_PER_ELEMENT\n          : kDrawIndirectParametersSize * Uint32Array.BYTES_PER_ELEMENT;\n        return [\n          0,\n          Uint32Array.BYTES_PER_ELEMENT,\n          1 * indirectDrawParametersSize,\n          1 * indirectDrawParametersSize + Uint32Array.BYTES_PER_ELEMENT,\n          3 * indirectDrawParametersSize,\n          3 * indirectDrawParametersSize + Uint32Array.BYTES_PER_ELEMENT,\n          99 * indirectDrawParametersSize,\n          99 * indirectDrawParametersSize + Uint32Array.BYTES_PER_ELEMENT,\n        ] as const;\n      })\n  )\n  .fn(t => {\n    const { isIndexed, indirectOffset } = t.params;\n\n    const vertexBuffer = t.MakeVertexBuffer(isIndexed);\n    const indirectBuffer = t.MakeIndirectBuffer(isIndexed, indirectOffset);\n\n    const pipeline = t.device.createRenderPipeline({\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `@stage(vertex) fn main(@location(0) pos : vec2<f32>) -> @builtin(position) vec4<f32> {\n              return vec4<f32>(pos, 0.0, 1.0);\n          }`,\n        }),\n        entryPoint: 'main',\n        buffers: [\n          {\n            attributes: [\n              {\n                shaderLocation: 0,\n                format: 'float32x2',\n                offset: 0,\n              },\n            ],\n            arrayStride: 2 * Float32Array.BYTES_PER_ELEMENT,\n          },\n        ],\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `@stage(fragment) fn main() -> @location(0) vec4<f32> {\n            return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n        }`,\n        }),\n        entryPoint: 'main',\n        targets: [\n          {\n            format: kRenderTargetFormat,\n          },\n        ],\n      },\n    });\n\n    const renderTarget = t.device.createTexture({\n      size: [4, 4],\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      format: kRenderTargetFormat,\n    });\n\n    const commandEncoder = t.device.createCommandEncoder();\n    const renderPass = commandEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: renderTarget.createView(),\n          loadValue: [0, 0, 0, 0],\n          storeOp: 'store',\n        },\n      ],\n    });\n    renderPass.setPipeline(pipeline);\n    renderPass.setVertexBuffer(0, vertexBuffer, 0);\n\n    if (isIndexed) {\n      renderPass.setIndexBuffer(t.MakeIndexBuffer(), 'uint32', 0);\n      renderPass.drawIndexedIndirect(indirectBuffer, indirectOffset);\n    } else {\n      renderPass.drawIndirect(indirectBuffer, indirectOffset);\n    }\n    renderPass.endPass();\n    t.queue.submit([commandEncoder.finish()]);\n\n    // The bottom left area is filled\n    t.expectSinglePixelIn2DTexture(\n      renderTarget,\n      kRenderTargetFormat,\n      { x: 0, y: 1 },\n      { exp: filled }\n    );\n    // The top right area is not filled\n    t.expectSinglePixelIn2DTexture(\n      renderTarget,\n      kRenderTargetFormat,\n      { x: 1, y: 0 },\n      { exp: notFilled }\n    );\n  });\n"],"file":"indirect_draw.spec.js"}