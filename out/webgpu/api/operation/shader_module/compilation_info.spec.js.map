{"version":3,"sources":["../../../../../src/webgpu/api/operation/shader_module/compilation_info.spec.ts"],"names":["description","makeTestGroup","assert","GPUTest","g","kValidShaderSources","valid","unicode","_code","kInvalidShaderSources","_errorLine","kAllShaderSources","test","desc","paramsSimple","fn","t","params","shaderModule","expectGPUError","device","createShaderModule","code","info","compilationInfo","expect","GPUCompilationInfo","errorCount","message","messages","type","foundAppropriateError","lineNum","linePos","offset","length","lineOffset","i","indexOf"],"mappings":"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","sourcesContent":["export const description = `\nShaderModule CompilationInfo tests.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert } from '../../../../common/util/util.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nconst kValidShaderSources = [\n  {\n    valid: true,\n    unicode: false,\n    _code: `\n      [[stage(vertex)]] fn main() -> [[builtin(position)]] vec4<f32> {\n        return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n      }`,\n  },\n  {\n    valid: true,\n    unicode: true,\n    _code: `\n      // 頂点シェーダー 👩‍💻\n      [[stage(vertex)]] fn main() -> [[builtin(position)]] vec4<f32> {\n        return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n      }`,\n  },\n];\n\nconst kInvalidShaderSources = [\n  {\n    valid: false,\n    unicode: false,\n    _errorLine: 4,\n    _code: `\n      [[stage(vertex)]] fn main() -> [[builtin(position)]] vec4<f32> {\n        // Expected Error: vec4 should be vec4<f32>\n        return vec4(0.0, 0.0, 0.0, 1.0);\n      }`,\n  },\n  {\n    valid: false,\n    unicode: true,\n    _errorLine: 5,\n    _code: `\n      // 頂点シェーダー 👩‍💻\n      [[stage(vertex)]] fn main() -> [[builtin(position)]] vec4<f32> {\n        // Expected Error: vec4 should be vec4<f32>\n        return vec4(0.0, 0.0, 0.0, 1.0);\n      }`,\n  },\n];\n\nconst kAllShaderSources = [...kValidShaderSources, ...kInvalidShaderSources];\n\ng.test('compilationInfo_returns')\n  .desc(\n    `\n    Test that compilationInfo() can be called on any ShaderModule.\n    - Test for both valid and invalid shader modules.\n    - Test for shader modules containing only ASCII and those containing unicode characters.\n    - Test that the compilation info for valid shader modules contains no errors.\n    - Test that the compilation info for invalid shader modules contains at least one error.`\n  )\n  .paramsSimple(kAllShaderSources)\n  .fn(async t => {\n    const { _code, valid } = t.params;\n\n    const shaderModule = t.expectGPUError(\n      'validation',\n      () => t.device.createShaderModule({ code: _code }),\n      !valid\n    );\n\n    const info = await shaderModule.compilationInfo();\n\n    t.expect(\n      info instanceof GPUCompilationInfo,\n      'Expected a GPUCompilationInfo object to be returned'\n    );\n\n    // Expect that we get zero error messages from a valid shader.\n    // Message types other than errors are OK.\n    let errorCount = 0;\n    for (const message of info.messages) {\n      if (message.type === 'error') {\n        errorCount++;\n      }\n    }\n    if (valid) {\n      t.expect(errorCount === 0, \"Expected zero GPUCompilationMessages of type 'error'\");\n    } else {\n      t.expect(errorCount > 0, \"Expected at least one GPUCompilationMessages of type 'error'\");\n    }\n  });\n\ng.test('line_number_and_position')\n  .desc(\n    `\n    Test that line numbers reported by compilationInfo either point at an appropriate line and\n    position or at 0:0, indicating an unknown position.\n    - Test for invalid shader modules containing containing at least one error.\n    - Test for shader modules containing only ASCII and those containing unicode characters.`\n  )\n  .paramsSimple(kInvalidShaderSources)\n  .fn(async t => {\n    const { _code, _errorLine } = t.params;\n\n    const shaderModule = t.expectGPUError('validation', () =>\n      t.device.createShaderModule({ code: _code })\n    );\n\n    const info = await shaderModule.compilationInfo();\n\n    let foundAppropriateError = false;\n    for (const message of info.messages) {\n      if (message.type === 'error') {\n        // Some backends may not be able to indicate a precise location for the error. In those\n        // cases a line and position of 0 should be reported.\n        // If a line is reported, it should point at the correct line (1-based).\n        t.expect(\n          (message.lineNum === 0) === (message.linePos === 0),\n          \"GPUCompilationMessages that don't report a line number should not report a line position.\"\n        );\n\n        if (message.lineNum === 0 || message.lineNum === _errorLine) {\n          foundAppropriateError = true;\n\n          // Various backends may choose to report the error at different positions within the line,\n          // so it's difficult to meaningfully validate them.\n          break;\n        }\n      }\n    }\n    t.expect(\n      foundAppropriateError,\n      'Expected to find an error which corresponded with the erroneous line'\n    );\n  });\n\ng.test('offset_and_length')\n  .desc(\n    `Test that message offsets and lengths are valid and align with any reported lineNum and linePos.\n    - Test for valid and invalid shader modules.\n    - Test for shader modules containing only ASCII and those containing unicode characters.`\n  )\n  .paramsSimple(kAllShaderSources)\n  .fn(async t => {\n    const { _code, valid } = t.params;\n\n    const shaderModule = t.expectGPUError(\n      'validation',\n      () => t.device.createShaderModule({ code: _code }),\n      !valid\n    );\n\n    const info = await shaderModule.compilationInfo();\n\n    for (const message of info.messages) {\n      // Any offsets and lengths should reference valid spans of the shader code.\n      t.expect(message.offset <= _code.length, 'Message offset should be within the shader source');\n      t.expect(\n        message.offset + message.length <= _code.length,\n        'Message offset and length should be within the shader source'\n      );\n\n      // If a valid line number and position are given, the offset should point the the same\n      // location in the shader source.\n      if (message.lineNum !== 0 && message.linePos !== 0) {\n        let lineOffset = 0;\n        for (let i = 0; i < message.lineNum - 1; ++i) {\n          lineOffset = _code.indexOf('\\n', lineOffset);\n          assert(lineOffset !== -1);\n          lineOffset += 1;\n        }\n\n        t.expect(\n          message.offset === lineOffset + message.linePos - 1,\n          'lineNum and linePos should point to the same location as offset'\n        );\n      }\n    }\n  });\n"],"file":"compilation_info.spec.js"}