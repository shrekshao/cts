{"version":3,"file":"compilation_info.spec.js","names":["description","makeTestGroup","assert","GPUTest","g","kValidShaderSources","valid","name","_code","kInvalidShaderSources","_errorLine","kAllShaderSources","test","desc","paramsSimple","fn","t","params","shaderModule","expectGPUError","device","createShaderModule","code","info","compilationInfo","expect","GPUCompilationInfo","errorCount","message","messages","type","foundAppropriateError","lineNum","linePos","offset","length","lineOffset","i","indexOf"],"sources":["../../../../../src/webgpu/api/operation/shader_module/compilation_info.spec.ts"],"sourcesContent":["export const description = `\nShaderModule CompilationInfo tests.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert } from '../../../../common/util/util.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nconst kValidShaderSources = [\n  {\n    valid: true,\n    name: 'ascii',\n    _code: `\n      @vertex fn main() -> @builtin(position) vec4<f32> {\n        return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n      }`,\n  },\n  {\n    valid: true,\n    name: 'unicode',\n    _code: `\n      // 頂点シェーダー 👩‍💻\n      @vertex fn main() -> @builtin(position) vec4<f32> {\n        return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n      }`,\n  },\n];\n\nconst kInvalidShaderSources = [\n  {\n    valid: false,\n    name: 'ascii',\n    _errorLine: 4,\n    _code: `\n      @vertex fn main() -> @builtin(position) vec4<f32> {\n        // Expected Error: unknown function 'unknown'\n        return unknown(0.0, 0.0, 0.0, 1.0);\n      }`,\n  },\n  {\n    valid: false,\n    name: 'unicode',\n    _errorLine: 5,\n    _code: `\n      // 頂点シェーダー 👩‍💻\n      @vertex fn main() -> @builtin(position) vec4<f32> {\n        // Expected Error: unknown function 'unknown'\n        return unknown(0.0, 0.0, 0.0, 1.0);\n      }`,\n  },\n  {\n    valid: false,\n    name: 'carriage-return',\n    _errorLine: 5,\n    _code:\n      `\n      @vertex fn main() -> @builtin(position) vec4<f32> {` +\n      '\\r\\n' +\n      `\n        // Expected Error: unknown function 'unknown'\n        return unknown(0.0, 0.0, 0.0, 1.0);\n      }`,\n  },\n];\n\nconst kAllShaderSources = [...kValidShaderSources, ...kInvalidShaderSources];\n\ng.test('compilationInfo_returns')\n  .desc(\n    `\n    Test that compilationInfo() can be called on any ShaderModule.\n    - Test for both valid and invalid shader modules.\n    - Test for shader modules containing only ASCII and those containing unicode characters.\n    - Test that the compilation info for valid shader modules contains no errors.\n    - Test that the compilation info for invalid shader modules contains at least one error.`\n  )\n  .paramsSimple(kAllShaderSources)\n  .fn(async t => {\n    const { _code, valid } = t.params;\n\n    const shaderModule = t.expectGPUError(\n      'validation',\n      () => t.device.createShaderModule({ code: _code }),\n      !valid\n    );\n\n    const info = await shaderModule.compilationInfo();\n\n    t.expect(\n      info instanceof GPUCompilationInfo,\n      'Expected a GPUCompilationInfo object to be returned'\n    );\n\n    // Expect that we get zero error messages from a valid shader.\n    // Message types other than errors are OK.\n    let errorCount = 0;\n    for (const message of info.messages) {\n      if (message.type === 'error') {\n        errorCount++;\n      }\n    }\n    if (valid) {\n      t.expect(errorCount === 0, \"Expected zero GPUCompilationMessages of type 'error'\");\n    } else {\n      t.expect(errorCount > 0, \"Expected at least one GPUCompilationMessages of type 'error'\");\n    }\n  });\n\ng.test('line_number_and_position')\n  .desc(\n    `\n    Test that line numbers reported by compilationInfo either point at an appropriate line and\n    position or at 0:0, indicating an unknown position.\n    - Test for invalid shader modules containing containing at least one error.\n    - Test for shader modules containing only ASCII and those containing unicode characters.`\n  )\n  .paramsSimple(kInvalidShaderSources)\n  .fn(async t => {\n    const { _code, _errorLine } = t.params;\n\n    const shaderModule = t.expectGPUError('validation', () =>\n      t.device.createShaderModule({ code: _code })\n    );\n\n    const info = await shaderModule.compilationInfo();\n\n    let foundAppropriateError = false;\n    for (const message of info.messages) {\n      if (message.type === 'error') {\n        // Some backends may not be able to indicate a precise location for the error. In those\n        // cases a line and position of 0 should be reported.\n        // If a line is reported, it should point at the correct line (1-based).\n        t.expect(\n          (message.lineNum === 0) === (message.linePos === 0),\n          \"GPUCompilationMessages that don't report a line number should not report a line position.\"\n        );\n\n        if (message.lineNum === 0 || message.lineNum === _errorLine) {\n          foundAppropriateError = true;\n\n          // Various backends may choose to report the error at different positions within the line,\n          // so it's difficult to meaningfully validate them.\n          break;\n        }\n      }\n    }\n    t.expect(\n      foundAppropriateError,\n      'Expected to find an error which corresponded with the erroneous line'\n    );\n  });\n\ng.test('offset_and_length')\n  .desc(\n    `Test that message offsets and lengths are valid and align with any reported lineNum and linePos.\n    - Test for valid and invalid shader modules.\n    - Test for shader modules containing only ASCII and those containing unicode characters.`\n  )\n  .paramsSimple(kAllShaderSources)\n  .fn(async t => {\n    const { _code, valid } = t.params;\n\n    const shaderModule = t.expectGPUError(\n      'validation',\n      () => t.device.createShaderModule({ code: _code }),\n      !valid\n    );\n\n    const info = await shaderModule.compilationInfo();\n\n    for (const message of info.messages) {\n      // Any offsets and lengths should reference valid spans of the shader code.\n      t.expect(message.offset <= _code.length, 'Message offset should be within the shader source');\n      t.expect(\n        message.offset + message.length <= _code.length,\n        'Message offset and length should be within the shader source'\n      );\n\n      // If a valid line number and position are given, the offset should point the the same\n      // location in the shader source.\n      if (message.lineNum !== 0 && message.linePos !== 0) {\n        let lineOffset = 0;\n        for (let i = 0; i < message.lineNum - 1; ++i) {\n          lineOffset = _code.indexOf('\\n', lineOffset);\n          assert(lineOffset !== -1);\n          lineOffset += 1;\n        }\n\n        t.expect(\n          message.offset === lineOffset + message.linePos - 1,\n          'lineNum and linePos should point to the same location as offset'\n        );\n      }\n    }\n  });\n"],"mappings":"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"}