{"version":3,"sources":["../../../../../src/webgpu/api/operation/command_buffer/copyTextureToTexture.spec.ts"],"names":["description","makeTestGroup","assert","memcpy","kTextureFormatInfo","kRegularTextureFormats","kCompressedTextureFormats","depthStencilFormatAspectSize","kBufferSizeAlignment","kDepthStencilFormats","kMinDynamicBufferOffsetAlignment","kTextureDimensions","textureDimensionAndFormatCompatible","GPUTest","makeBufferWithContents","align","physicalMipSize","DataArrayGenerator","kBytesPerRowAlignment","dataBytesForCopyOrFail","dataGenerator","F","GetInitialDataPerMipLevel","dimension","textureSize","format","mipLevel","textureSizeAtLevel","bytesPerBlock","blockWidthInTexel","blockWidth","blockHeightInTexel","blockHeight","blocksPerSubresource","width","height","byteSize","depthOrArrayLayers","generateView","GetInitialStencilDataPerMipLevel","aspectBytesPerBlock","DoCopyTextureToTextureTest","srcTextureSize","dstTextureSize","srcFormat","dstFormat","copyBoxOffsets","srcCopyLevel","dstCopyLevel","mipLevelCount","srcTextureDesc","size","usage","GPUTextureUsage","COPY_SRC","COPY_DST","srcTexture","device","createTexture","trackForCleanup","dstTextureDesc","dstTexture","initialSrcData","srcTextureSizeAtLevel","srcBlocksPerRow","srcBlockRowsPerImage","queue","writeTexture","texture","bytesPerRow","rowsPerImage","dstTextureSizeAtLevel","minWidth","Math","min","minHeight","minDepth","appliedSrcOffset","x","srcOffset","y","z","appliedDstOffset","dstOffset","appliedCopyWidth","max","copyExtent","appliedCopyHeight","appliedCopyDepth","encoder","createCommandEncoder","copyTextureToTexture","origin","dstBlocksPerRow","dstBlockRowsPerImage","bytesPerDstAlignedBlockRow","dstBufferSize","dstBufferDesc","GPUBufferUsage","dstBuffer","createBuffer","copyTextureToBuffer","buffer","submit","finish","expectedDataWithPadding","ArrayBuffer","expectedUint8DataWithPadding","Uint8Array","expectedUint8Data","appliedCopyBlocksPerRow","appliedCopyBlockRowsPerImage","srcCopyOffsetInBlocks","dstCopyOffsetInBlocks","srcOffsetZ","dstOffsetZ","dstOffsetYInBlocks","expectedDataWithPaddingOffset","srcOffsetYInBlocks","expectedDataOffset","bytesInRow","src","start","length","dst","expectGPUBufferValuesEqual","InitializeStencilAspect","sourceTexture","initialStencilData","srcCopyBaseArrayLayer","copySize","aspect","VerifyStencilAspect","destinationTexture","dstCopyBaseArrayLayer","outputBufferSize","layout","method","outputBuffer","expectedStencilData","initialOffsetPerLayer","expectedOffsetPerLayer","initialOffsetPerRow","expectedOffsetPerRow","GetRenderPipelineForT2TCopyWithDepthTests","bindGroupLayout","hasColorAttachment","depthStencil","renderPipelineDescriptor","createPipelineLayout","bindGroupLayouts","vertex","module","createShaderModule","code","entryPoint","fragment","targets","createRenderPipeline","GetBindGroupLayoutForT2TCopyWithDepthTests","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","VERTEX","type","minBindingSize","hasDynamicOffset","GetBindGroupForT2TCopyWithDepthTests","totalCopyArrayLayers","uniformBufferSize","uniformBufferData","Float32Array","i","uniformBuffer","UNIFORM","createBindGroup","resource","InitializeDepthAspect","depthFormat","renderPipeline","depthWriteEnabled","depthCompare","bindGroup","srcCopyLayer","renderPass","beginRenderPass","colorAttachments","depthStencilAttachment","view","createView","baseArrayLayer","arrayLayerCount","baseMipLevel","depthClearValue","depthLoadOp","depthStoreOp","stencilLoadOp","stencilStoreOp","setBindGroup","setPipeline","draw","end","VerifyDepthAspect","outputColorTexture","RENDER_ATTACHMENT","dstCopyLayer","clearValue","r","g","b","a","loadOp","storeOp","expectSingleColor","exp","R","G","B","A","kCopyBoxOffsetsForWholeDepth","kCopyBoxOffsetsFor2DArrayTextures","test","desc","params","u","combine","filter","srcBaseFormat","baseFormat","dstBaseFormat","undefined","beginSubcases","expandWithParams","p","param","unless","fn","t","beforeAllSubcases","selectDeviceOrSkipTestCase","feature","textureSizeInBlocks","srcBlockWidth","srcBlockHeight","dstBlockWidth","dstBlockHeight","paramsSubcasesOnly","combineWithParams","copyBoxOffset","selectDeviceForTextureFormatOrSkipTestCase","stencil","depth","kColorFormat","kSampleCount","TEXTURE_BINDING","sampleCount","renderPipelineForInit","multisample","count","initEncoder","renderPassForInit","copyEncoder","renderPipelineForValidation","getBindGroupLayout","expectedOutputTexture","validationEncoder","renderPassForValidation","kDepthFormat","vertexState","encoderForInit","renderPipelineForVerify","multisampledColorTexture","colorTextureAsResolveTarget","encoderForVerify","renderPassForVerify","resolveTarget"],"mappings":"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","sourcesContent":["export const description = `copyTextureToTexture operation tests`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert, memcpy } from '../../../../common/util/util.js';\nimport {\n  kTextureFormatInfo,\n  kRegularTextureFormats,\n  SizedTextureFormat,\n  kCompressedTextureFormats,\n  depthStencilFormatAspectSize,\n  DepthStencilFormat,\n  kBufferSizeAlignment,\n  kDepthStencilFormats,\n  kMinDynamicBufferOffsetAlignment,\n  kTextureDimensions,\n  textureDimensionAndFormatCompatible,\n} from '../../../capability_info.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { makeBufferWithContents } from '../../../util/buffer.js';\nimport { align } from '../../../util/math.js';\nimport { physicalMipSize } from '../../../util/texture/base.js';\nimport { DataArrayGenerator } from '../../../util/texture/data_generation.js';\nimport { kBytesPerRowAlignment, dataBytesForCopyOrFail } from '../../../util/texture/layout.js';\n\nconst dataGenerator = new DataArrayGenerator();\n\nclass F extends GPUTest {\n  GetInitialDataPerMipLevel(\n    dimension: GPUTextureDimension,\n    textureSize: Required<GPUExtent3DDict>,\n    format: SizedTextureFormat,\n    mipLevel: number\n  ): Uint8Array {\n    const textureSizeAtLevel = physicalMipSize(textureSize, format, dimension, mipLevel);\n    const bytesPerBlock = kTextureFormatInfo[format].bytesPerBlock;\n    const blockWidthInTexel = kTextureFormatInfo[format].blockWidth;\n    const blockHeightInTexel = kTextureFormatInfo[format].blockHeight;\n    const blocksPerSubresource =\n      (textureSizeAtLevel.width / blockWidthInTexel) *\n      (textureSizeAtLevel.height / blockHeightInTexel);\n\n    const byteSize = bytesPerBlock * blocksPerSubresource * textureSizeAtLevel.depthOrArrayLayers;\n    return dataGenerator.generateView(byteSize);\n  }\n\n  GetInitialStencilDataPerMipLevel(\n    textureSize: Required<GPUExtent3DDict>,\n    format: DepthStencilFormat,\n    mipLevel: number\n  ): Uint8Array {\n    const textureSizeAtLevel = physicalMipSize(textureSize, format, '2d', mipLevel);\n    const aspectBytesPerBlock = depthStencilFormatAspectSize(format, 'stencil-only');\n    const byteSize =\n      aspectBytesPerBlock *\n      textureSizeAtLevel.width *\n      textureSizeAtLevel.height *\n      textureSizeAtLevel.depthOrArrayLayers;\n    return dataGenerator.generateView(byteSize);\n  }\n\n  DoCopyTextureToTextureTest(\n    dimension: GPUTextureDimension,\n    srcTextureSize: Required<GPUExtent3DDict>,\n    dstTextureSize: Required<GPUExtent3DDict>,\n    srcFormat: SizedTextureFormat,\n    dstFormat: SizedTextureFormat,\n    copyBoxOffsets: {\n      srcOffset: { x: number; y: number; z: number };\n      dstOffset: { x: number; y: number; z: number };\n      copyExtent: Required<GPUExtent3DDict>;\n    },\n    srcCopyLevel: number,\n    dstCopyLevel: number\n  ): void {\n    const mipLevelCount = dimension === '1d' ? 1 : 4;\n\n    // Create srcTexture and dstTexture\n    const srcTextureDesc: GPUTextureDescriptor = {\n      dimension,\n      size: srcTextureSize,\n      format: srcFormat,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n      mipLevelCount,\n    };\n    const srcTexture = this.device.createTexture(srcTextureDesc);\n    this.trackForCleanup(srcTexture);\n    const dstTextureDesc: GPUTextureDescriptor = {\n      dimension,\n      size: dstTextureSize,\n      format: dstFormat,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n      mipLevelCount,\n    };\n    const dstTexture = this.device.createTexture(dstTextureDesc);\n    this.trackForCleanup(dstTexture);\n\n    // Fill the whole subresource of srcTexture at srcCopyLevel with initialSrcData.\n    const initialSrcData = this.GetInitialDataPerMipLevel(\n      dimension,\n      srcTextureSize,\n      srcFormat,\n      srcCopyLevel\n    );\n    const srcTextureSizeAtLevel = physicalMipSize(\n      srcTextureSize,\n      srcFormat,\n      dimension,\n      srcCopyLevel\n    );\n    const bytesPerBlock = kTextureFormatInfo[srcFormat].bytesPerBlock;\n    const blockWidth = kTextureFormatInfo[srcFormat].blockWidth;\n    const blockHeight = kTextureFormatInfo[srcFormat].blockHeight;\n    const srcBlocksPerRow = srcTextureSizeAtLevel.width / blockWidth;\n    const srcBlockRowsPerImage = srcTextureSizeAtLevel.height / blockHeight;\n    this.device.queue.writeTexture(\n      { texture: srcTexture, mipLevel: srcCopyLevel },\n      initialSrcData,\n      {\n        bytesPerRow: srcBlocksPerRow * bytesPerBlock,\n        rowsPerImage: srcBlockRowsPerImage,\n      },\n      srcTextureSizeAtLevel\n    );\n\n    // Copy the region specified by copyBoxOffsets from srcTexture to dstTexture.\n    const dstTextureSizeAtLevel = physicalMipSize(\n      dstTextureSize,\n      dstFormat,\n      dimension,\n      dstCopyLevel\n    );\n    const minWidth = Math.min(srcTextureSizeAtLevel.width, dstTextureSizeAtLevel.width);\n    const minHeight = Math.min(srcTextureSizeAtLevel.height, dstTextureSizeAtLevel.height);\n    const minDepth = Math.min(\n      srcTextureSizeAtLevel.depthOrArrayLayers,\n      dstTextureSizeAtLevel.depthOrArrayLayers\n    );\n\n    const appliedSrcOffset = {\n      x: Math.min(copyBoxOffsets.srcOffset.x * blockWidth, minWidth),\n      y: Math.min(copyBoxOffsets.srcOffset.y * blockHeight, minHeight),\n      z: Math.min(copyBoxOffsets.srcOffset.z, minDepth),\n    };\n    const appliedDstOffset = {\n      x: Math.min(copyBoxOffsets.dstOffset.x * blockWidth, minWidth),\n      y: Math.min(copyBoxOffsets.dstOffset.y * blockHeight, minHeight),\n      z: Math.min(copyBoxOffsets.dstOffset.z, minDepth),\n    };\n\n    const appliedCopyWidth = Math.max(\n      minWidth +\n        copyBoxOffsets.copyExtent.width * blockWidth -\n        Math.max(appliedSrcOffset.x, appliedDstOffset.x),\n      0\n    );\n    const appliedCopyHeight = Math.max(\n      minHeight +\n        copyBoxOffsets.copyExtent.height * blockHeight -\n        Math.max(appliedSrcOffset.y, appliedDstOffset.y),\n      0\n    );\n    assert(appliedCopyWidth % blockWidth === 0 && appliedCopyHeight % blockHeight === 0);\n\n    const appliedCopyDepth = Math.max(\n      0,\n      minDepth +\n        copyBoxOffsets.copyExtent.depthOrArrayLayers -\n        Math.max(appliedSrcOffset.z, appliedDstOffset.z)\n    );\n    assert(appliedCopyDepth >= 0);\n\n    const encoder = this.device.createCommandEncoder();\n    encoder.copyTextureToTexture(\n      { texture: srcTexture, mipLevel: srcCopyLevel, origin: appliedSrcOffset },\n      { texture: dstTexture, mipLevel: dstCopyLevel, origin: appliedDstOffset },\n      { width: appliedCopyWidth, height: appliedCopyHeight, depthOrArrayLayers: appliedCopyDepth }\n    );\n\n    // Copy the whole content of dstTexture at dstCopyLevel to dstBuffer.\n    const dstBlocksPerRow = dstTextureSizeAtLevel.width / blockWidth;\n    const dstBlockRowsPerImage = dstTextureSizeAtLevel.height / blockHeight;\n    const bytesPerDstAlignedBlockRow = align(dstBlocksPerRow * bytesPerBlock, 256);\n    const dstBufferSize =\n      (dstBlockRowsPerImage * dstTextureSizeAtLevel.depthOrArrayLayers - 1) *\n        bytesPerDstAlignedBlockRow +\n      align(dstBlocksPerRow * bytesPerBlock, 4);\n    const dstBufferDesc: GPUBufferDescriptor = {\n      size: dstBufferSize,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    };\n    const dstBuffer = this.device.createBuffer(dstBufferDesc);\n    this.trackForCleanup(dstBuffer);\n\n    encoder.copyTextureToBuffer(\n      { texture: dstTexture, mipLevel: dstCopyLevel },\n      {\n        buffer: dstBuffer,\n        bytesPerRow: bytesPerDstAlignedBlockRow,\n        rowsPerImage: dstBlockRowsPerImage,\n      },\n      dstTextureSizeAtLevel\n    );\n    this.device.queue.submit([encoder.finish()]);\n\n    // Fill expectedDataWithPadding with the expected data of dstTexture. The other values in\n    // expectedDataWithPadding are kept 0 to check if the texels untouched by the copy are 0\n    // (their previous values).\n    const expectedDataWithPadding = new ArrayBuffer(dstBufferSize);\n    const expectedUint8DataWithPadding = new Uint8Array(expectedDataWithPadding);\n    const expectedUint8Data = new Uint8Array(initialSrcData);\n\n    const appliedCopyBlocksPerRow = appliedCopyWidth / blockWidth;\n    const appliedCopyBlockRowsPerImage = appliedCopyHeight / blockHeight;\n    const srcCopyOffsetInBlocks = {\n      x: appliedSrcOffset.x / blockWidth,\n      y: appliedSrcOffset.y / blockHeight,\n      z: appliedSrcOffset.z,\n    };\n    const dstCopyOffsetInBlocks = {\n      x: appliedDstOffset.x / blockWidth,\n      y: appliedDstOffset.y / blockHeight,\n      z: appliedDstOffset.z,\n    };\n\n    for (let z = 0; z < appliedCopyDepth; ++z) {\n      const srcOffsetZ = srcCopyOffsetInBlocks.z + z;\n      const dstOffsetZ = dstCopyOffsetInBlocks.z + z;\n      for (let y = 0; y < appliedCopyBlockRowsPerImage; ++y) {\n        const dstOffsetYInBlocks = dstCopyOffsetInBlocks.y + y;\n        const expectedDataWithPaddingOffset =\n          bytesPerDstAlignedBlockRow * (dstBlockRowsPerImage * dstOffsetZ + dstOffsetYInBlocks) +\n          dstCopyOffsetInBlocks.x * bytesPerBlock;\n\n        const srcOffsetYInBlocks = srcCopyOffsetInBlocks.y + y;\n        const expectedDataOffset =\n          bytesPerBlock *\n            srcBlocksPerRow *\n            (srcBlockRowsPerImage * srcOffsetZ + srcOffsetYInBlocks) +\n          srcCopyOffsetInBlocks.x * bytesPerBlock;\n\n        const bytesInRow = appliedCopyBlocksPerRow * bytesPerBlock;\n        memcpy(\n          { src: expectedUint8Data, start: expectedDataOffset, length: bytesInRow },\n          { dst: expectedUint8DataWithPadding, start: expectedDataWithPaddingOffset }\n        );\n      }\n    }\n\n    // Verify the content of the whole subresource of dstTexture at dstCopyLevel (in dstBuffer) is expected.\n    this.expectGPUBufferValuesEqual(dstBuffer, expectedUint8DataWithPadding);\n  }\n\n  InitializeStencilAspect(\n    sourceTexture: GPUTexture,\n    initialStencilData: Uint8Array,\n    srcCopyLevel: number,\n    srcCopyBaseArrayLayer: number,\n    copySize: readonly [number, number, number]\n  ): void {\n    this.queue.writeTexture(\n      {\n        texture: sourceTexture,\n        mipLevel: srcCopyLevel,\n        aspect: 'stencil-only',\n        origin: { x: 0, y: 0, z: srcCopyBaseArrayLayer },\n      },\n      initialStencilData,\n      { bytesPerRow: copySize[0], rowsPerImage: copySize[1] },\n      copySize\n    );\n  }\n\n  VerifyStencilAspect(\n    destinationTexture: GPUTexture,\n    initialStencilData: Uint8Array,\n    dstCopyLevel: number,\n    dstCopyBaseArrayLayer: number,\n    copySize: readonly [number, number, number]\n  ): void {\n    const bytesPerRow = align(copySize[0], kBytesPerRowAlignment);\n    const rowsPerImage = copySize[1];\n    const outputBufferSize = align(\n      dataBytesForCopyOrFail({\n        layout: { bytesPerRow, rowsPerImage },\n        format: 'stencil8',\n        copySize,\n        method: 'CopyT2B',\n      }),\n      kBufferSizeAlignment\n    );\n    const outputBuffer = this.device.createBuffer({\n      size: outputBufferSize,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n    this.trackForCleanup(outputBuffer);\n    const encoder = this.device.createCommandEncoder();\n    encoder.copyTextureToBuffer(\n      {\n        texture: destinationTexture,\n        aspect: 'stencil-only',\n        mipLevel: dstCopyLevel,\n        origin: { x: 0, y: 0, z: dstCopyBaseArrayLayer },\n      },\n      { buffer: outputBuffer, bytesPerRow, rowsPerImage },\n      copySize\n    );\n    this.queue.submit([encoder.finish()]);\n\n    const expectedStencilData = new Uint8Array(outputBufferSize);\n    for (let z = 0; z < copySize[2]; ++z) {\n      const initialOffsetPerLayer = z * copySize[0] * copySize[1];\n      const expectedOffsetPerLayer = z * bytesPerRow * rowsPerImage;\n      for (let y = 0; y < copySize[1]; ++y) {\n        const initialOffsetPerRow = initialOffsetPerLayer + y * copySize[0];\n        const expectedOffsetPerRow = expectedOffsetPerLayer + y * bytesPerRow;\n        memcpy(\n          { src: initialStencilData, start: initialOffsetPerRow, length: copySize[0] },\n          { dst: expectedStencilData, start: expectedOffsetPerRow }\n        );\n      }\n    }\n    this.expectGPUBufferValuesEqual(outputBuffer, expectedStencilData);\n  }\n\n  GetRenderPipelineForT2TCopyWithDepthTests(\n    bindGroupLayout: GPUBindGroupLayout,\n    hasColorAttachment: boolean,\n    depthStencil: GPUDepthStencilState\n  ): GPURenderPipeline {\n    const renderPipelineDescriptor: GPURenderPipelineDescriptor = {\n      layout: this.device.createPipelineLayout({ bindGroupLayouts: [bindGroupLayout] }),\n      vertex: {\n        module: this.device.createShaderModule({\n          code: `\n            struct Params {\n              copyLayer: f32\n            };\n            @group(0) @binding(0) var<uniform> param: Params;\n            @vertex\n            fn main(@builtin(vertex_index) VertexIndex : u32)-> @builtin(position) vec4<f32> {\n              var depthValue = 0.5 + 0.2 * sin(param.copyLayer);\n              var pos : array<vec3<f32>, 6> = array<vec3<f32>, 6>(\n                  vec3<f32>(-1.0,  1.0, depthValue),\n                  vec3<f32>(-1.0, -1.0, 0.0),\n                  vec3<f32>( 1.0,  1.0, 1.0),\n                  vec3<f32>(-1.0, -1.0, 0.0),\n                  vec3<f32>( 1.0,  1.0, 1.0),\n                  vec3<f32>( 1.0, -1.0, depthValue));\n              return vec4<f32>(pos[VertexIndex], 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n      },\n      depthStencil,\n    };\n    if (hasColorAttachment) {\n      renderPipelineDescriptor.fragment = {\n        module: this.device.createShaderModule({\n          code: `\n            @fragment\n            fn main() -> @location(0) vec4<f32> {\n              return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: 'rgba8unorm' }],\n      };\n    }\n    return this.device.createRenderPipeline(renderPipelineDescriptor);\n  }\n\n  GetBindGroupLayoutForT2TCopyWithDepthTests(): GPUBindGroupLayout {\n    return this.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.VERTEX,\n          buffer: {\n            type: 'uniform',\n            minBindingSize: 4,\n            hasDynamicOffset: true,\n          },\n        },\n      ],\n    });\n  }\n\n  GetBindGroupForT2TCopyWithDepthTests(\n    bindGroupLayout: GPUBindGroupLayout,\n    totalCopyArrayLayers: number\n  ): GPUBindGroup {\n    // Prepare the uniform buffer that contains all the copy layers to generate different depth\n    // values for different copy layers.\n    assert(totalCopyArrayLayers > 0);\n    const uniformBufferSize = kMinDynamicBufferOffsetAlignment * (totalCopyArrayLayers - 1) + 4;\n    const uniformBufferData = new Float32Array(uniformBufferSize / 4);\n    for (let i = 1; i < totalCopyArrayLayers; ++i) {\n      uniformBufferData[(kMinDynamicBufferOffsetAlignment / 4) * i] = i;\n    }\n    const uniformBuffer = makeBufferWithContents(\n      this.device,\n      uniformBufferData,\n      GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM\n    );\n    return this.device.createBindGroup({\n      layout: bindGroupLayout,\n      entries: [\n        {\n          binding: 0,\n          resource: {\n            buffer: uniformBuffer,\n            size: 4,\n          },\n        },\n      ],\n    });\n  }\n\n  /** Initialize the depth aspect of sourceTexture with draw calls */\n  InitializeDepthAspect(\n    sourceTexture: GPUTexture,\n    depthFormat: GPUTextureFormat,\n    srcCopyLevel: number,\n    srcCopyBaseArrayLayer: number,\n    copySize: readonly [number, number, number]\n  ): void {\n    // Prepare a renderPipeline with depthCompareFunction == 'always' and depthWriteEnabled == true\n    // for the initializations of the depth attachment.\n    const bindGroupLayout = this.GetBindGroupLayoutForT2TCopyWithDepthTests();\n    const renderPipeline = this.GetRenderPipelineForT2TCopyWithDepthTests(bindGroupLayout, false, {\n      format: depthFormat,\n      depthWriteEnabled: true,\n      depthCompare: 'always',\n    });\n    const bindGroup = this.GetBindGroupForT2TCopyWithDepthTests(bindGroupLayout, copySize[2]);\n\n    const encoder = this.device.createCommandEncoder();\n    for (let srcCopyLayer = 0; srcCopyLayer < copySize[2]; ++srcCopyLayer) {\n      const renderPass = encoder.beginRenderPass({\n        colorAttachments: [],\n        depthStencilAttachment: {\n          view: sourceTexture.createView({\n            baseArrayLayer: srcCopyLayer + srcCopyBaseArrayLayer,\n            arrayLayerCount: 1,\n            baseMipLevel: srcCopyLevel,\n            mipLevelCount: 1,\n          }),\n          depthClearValue: 0.0,\n          depthLoadOp: 'clear',\n          depthStoreOp: 'store',\n          stencilLoadOp: 'load',\n          stencilStoreOp: 'store',\n        },\n      });\n      renderPass.setBindGroup(0, bindGroup, [srcCopyLayer * kMinDynamicBufferOffsetAlignment]);\n      renderPass.setPipeline(renderPipeline);\n      renderPass.draw(6);\n      renderPass.end();\n    }\n    this.queue.submit([encoder.finish()]);\n  }\n\n  VerifyDepthAspect(\n    destinationTexture: GPUTexture,\n    depthFormat: GPUTextureFormat,\n    dstCopyLevel: number,\n    dstCopyBaseArrayLayer: number,\n    copySize: [number, number, number]\n  ): void {\n    // Prepare a renderPipeline with depthCompareFunction == 'equal' and depthWriteEnabled == false\n    // for the comparison of the depth attachment.\n    const bindGroupLayout = this.GetBindGroupLayoutForT2TCopyWithDepthTests();\n    const renderPipeline = this.GetRenderPipelineForT2TCopyWithDepthTests(bindGroupLayout, true, {\n      format: depthFormat,\n      depthWriteEnabled: false,\n      depthCompare: 'equal',\n    });\n    const bindGroup = this.GetBindGroupForT2TCopyWithDepthTests(bindGroupLayout, copySize[2]);\n\n    const outputColorTexture = this.device.createTexture({\n      format: 'rgba8unorm',\n      size: copySize,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n    });\n    this.trackForCleanup(outputColorTexture);\n    const encoder = this.device.createCommandEncoder();\n    for (let dstCopyLayer = 0; dstCopyLayer < copySize[2]; ++dstCopyLayer) {\n      // If the depth value is not expected, the color of outputColorTexture will remain Red after\n      // the render pass.\n      const renderPass = encoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: outputColorTexture.createView({\n              baseArrayLayer: dstCopyLayer,\n              arrayLayerCount: 1,\n            }),\n            clearValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n        depthStencilAttachment: {\n          view: destinationTexture.createView({\n            baseArrayLayer: dstCopyLayer + dstCopyBaseArrayLayer,\n            arrayLayerCount: 1,\n            baseMipLevel: dstCopyLevel,\n            mipLevelCount: 1,\n          }),\n          depthLoadOp: 'load',\n          depthStoreOp: 'store',\n          stencilLoadOp: 'load',\n          stencilStoreOp: 'store',\n        },\n      });\n      renderPass.setBindGroup(0, bindGroup, [dstCopyLayer * kMinDynamicBufferOffsetAlignment]);\n      renderPass.setPipeline(renderPipeline);\n      renderPass.draw(6);\n      renderPass.end();\n    }\n    this.queue.submit([encoder.finish()]);\n\n    this.expectSingleColor(outputColorTexture, 'rgba8unorm', {\n      size: copySize,\n      exp: { R: 0.0, G: 1.0, B: 0.0, A: 1.0 },\n    });\n  }\n}\n\nconst kCopyBoxOffsetsForWholeDepth = [\n  // From (0, 0) of src to (0, 0) of dst.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (0, 0) of src to (blockWidth, 0) of dst.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 1, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (0, 0) of src to (0, blockHeight) of dst.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 1, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (blockWidth, 0) of src to (0, 0) of dst.\n  {\n    srcOffset: { x: 1, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (0, blockHeight) of src to (0, 0) of dst.\n  {\n    srcOffset: { x: 0, y: 1, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (blockWidth, 0) of src to (0, 0) of dst, and the copy extent will not cover the last\n  // texel block column of both source and destination texture.\n  {\n    srcOffset: { x: 1, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: -1, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (0, blockHeight) of src to (0, 0) of dst, and the copy extent will not cover the last\n  // texel block row of both source and destination texture.\n  {\n    srcOffset: { x: 0, y: 1, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: -1, depthOrArrayLayers: 0 },\n  },\n] as const;\n\nconst kCopyBoxOffsetsFor2DArrayTextures = [\n  // Copy the whole array slices from the source texture to the destination texture.\n  // The copy extent will cover the whole subresource of either source or the\n  // destination texture\n  ...kCopyBoxOffsetsForWholeDepth,\n\n  // Copy 1 texture slice from the 1st slice of the source texture to the 1st slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -2 },\n  },\n  // Copy 1 texture slice from the 2nd slice of the source texture to the 2nd slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 1 },\n    dstOffset: { x: 0, y: 0, z: 1 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -3 },\n  },\n  // Copy 1 texture slice from the 1st slice of the source texture to the 2nd slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 1 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -1 },\n  },\n  // Copy 1 texture slice from the 2nd slice of the source texture to the 1st slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 1 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -1 },\n  },\n  // Copy 2 texture slices from the 1st slice of the source texture to the 1st slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -3 },\n  },\n  // Copy 3 texture slices from the 2nd slice of the source texture to the 2nd slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 1 },\n    dstOffset: { x: 0, y: 0, z: 1 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -1 },\n  },\n] as const;\n\nexport const g = makeTestGroup(F);\n\ng.test('color_textures,non_compressed,non_array')\n  .desc(\n    `\n  Validate the correctness of the copy by filling the srcTexture with testable data and any\n  non-compressed color format supported by WebGPU, doing CopyTextureToTexture() copy, and verifying\n  the content of the whole dstTexture.\n\n  Copy {1 texel block, part of, the whole} srcTexture to the dstTexture {with, without} a non-zero\n  valid srcOffset that\n  - covers the whole dstTexture subresource\n  - covers the corners of the dstTexture\n  - doesn't cover any texels that are on the edge of the dstTexture\n  - covers the mipmap level > 0\n\n  Tests for all pairs of valid source/destination formats, and all texture dimensions.\n  `\n  )\n  .params(u =>\n    u\n      .combine('srcFormat', kRegularTextureFormats)\n      .combine('dstFormat', kRegularTextureFormats)\n      .filter(({ srcFormat, dstFormat }) => {\n        const srcBaseFormat = kTextureFormatInfo[srcFormat].baseFormat;\n        const dstBaseFormat = kTextureFormatInfo[dstFormat].baseFormat;\n        return (\n          srcFormat === dstFormat ||\n          (srcBaseFormat !== undefined &&\n            dstBaseFormat !== undefined &&\n            srcBaseFormat === dstBaseFormat)\n        );\n      })\n      .combine('dimension', kTextureDimensions)\n      .filter(\n        ({ dimension, srcFormat, dstFormat }) =>\n          textureDimensionAndFormatCompatible(dimension, srcFormat) &&\n          textureDimensionAndFormatCompatible(dimension, dstFormat)\n      )\n      .beginSubcases()\n      .expandWithParams(p => {\n        const params = [\n          {\n            srcTextureSize: { width: 32, height: 32, depthOrArrayLayers: 1 },\n            dstTextureSize: { width: 32, height: 32, depthOrArrayLayers: 1 },\n          },\n          {\n            srcTextureSize: { width: 31, height: 33, depthOrArrayLayers: 1 },\n            dstTextureSize: { width: 31, height: 33, depthOrArrayLayers: 1 },\n          },\n          {\n            srcTextureSize: { width: 32, height: 32, depthOrArrayLayers: 1 },\n            dstTextureSize: { width: 64, height: 64, depthOrArrayLayers: 1 },\n          },\n          {\n            srcTextureSize: { width: 32, height: 32, depthOrArrayLayers: 1 },\n            dstTextureSize: { width: 63, height: 61, depthOrArrayLayers: 1 },\n          },\n        ];\n        if (p.dimension === '1d') {\n          for (const param of params) {\n            param.srcTextureSize.height = 1;\n            param.dstTextureSize.height = 1;\n          }\n        }\n\n        return params;\n      })\n      .combine('copyBoxOffsets', kCopyBoxOffsetsForWholeDepth)\n      .unless(\n        p =>\n          p.dimension === '1d' &&\n          (p.copyBoxOffsets.copyExtent.height !== 0 ||\n            p.copyBoxOffsets.srcOffset.y !== 0 ||\n            p.copyBoxOffsets.dstOffset.y !== 0)\n      )\n      .combine('srcCopyLevel', [0, 3])\n      .combine('dstCopyLevel', [0, 3])\n      .unless(p => p.dimension === '1d' && (p.srcCopyLevel !== 0 || p.dstCopyLevel !== 0))\n  )\n  .fn(async t => {\n    const {\n      dimension,\n      srcTextureSize,\n      dstTextureSize,\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel,\n    } = t.params;\n\n    t.DoCopyTextureToTextureTest(\n      dimension,\n      srcTextureSize,\n      dstTextureSize,\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel\n    );\n  });\n\ng.test('color_textures,compressed,non_array')\n  .desc(\n    `\n  Validate the correctness of the copy by filling the srcTexture with testable data and any\n  compressed color format supported by WebGPU, doing CopyTextureToTexture() copy, and verifying\n  the content of the whole dstTexture.\n\n  Tests for all pairs of valid source/destination formats, and all texture dimensions.\n  `\n  )\n  .params(u =>\n    u\n      .combine('srcFormat', kCompressedTextureFormats)\n      .combine('dstFormat', kCompressedTextureFormats)\n      .filter(({ srcFormat, dstFormat }) => {\n        const srcBaseFormat = kTextureFormatInfo[srcFormat].baseFormat;\n        const dstBaseFormat = kTextureFormatInfo[dstFormat].baseFormat;\n        return (\n          srcFormat === dstFormat ||\n          (srcBaseFormat !== undefined &&\n            dstBaseFormat !== undefined &&\n            srcBaseFormat === dstBaseFormat)\n        );\n      })\n      .combine('dimension', kTextureDimensions)\n      .filter(\n        ({ dimension, srcFormat, dstFormat }) =>\n          textureDimensionAndFormatCompatible(dimension, srcFormat) &&\n          textureDimensionAndFormatCompatible(dimension, dstFormat)\n      )\n      .beginSubcases()\n      .combine('textureSizeInBlocks', [\n        // The heights and widths in blocks are all power of 2\n        { src: { width: 16, height: 8 }, dst: { width: 16, height: 8 } },\n        // The virtual width of the source texture at mipmap level 2 (15) is not a multiple of 4 blocks\n        { src: { width: 15, height: 8 }, dst: { width: 16, height: 8 } },\n        // The virtual width of the destination texture at mipmap level 2 (15) is not a multiple\n        // of 4 blocks\n        { src: { width: 16, height: 8 }, dst: { width: 15, height: 8 } },\n        // The virtual height of the source texture at mipmap level 2 (13) is not a multiple of 4 blocks\n        { src: { width: 16, height: 13 }, dst: { width: 16, height: 8 } },\n        // The virtual height of the destination texture at mipmap level 2 (13) is not a\n        // multiple of 4 blocks\n        { src: { width: 16, height: 8 }, dst: { width: 16, height: 13 } },\n        // None of the widths or heights in blocks are power of 2\n        { src: { width: 15, height: 13 }, dst: { width: 15, height: 13 } },\n      ])\n      .combine('copyBoxOffsets', kCopyBoxOffsetsForWholeDepth)\n      .combine('srcCopyLevel', [0, 2])\n      .combine('dstCopyLevel', [0, 2])\n  )\n  .beforeAllSubcases(t => {\n    const { srcFormat, dstFormat } = t.params;\n    t.selectDeviceOrSkipTestCase([\n      kTextureFormatInfo[srcFormat].feature,\n      kTextureFormatInfo[dstFormat].feature,\n    ]);\n  })\n  .fn(async t => {\n    const {\n      dimension,\n      textureSizeInBlocks,\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel,\n    } = t.params;\n    const srcBlockWidth = kTextureFormatInfo[srcFormat].blockWidth;\n    const srcBlockHeight = kTextureFormatInfo[srcFormat].blockHeight;\n    const dstBlockWidth = kTextureFormatInfo[dstFormat].blockWidth;\n    const dstBlockHeight = kTextureFormatInfo[dstFormat].blockHeight;\n\n    t.DoCopyTextureToTextureTest(\n      dimension,\n      {\n        width: textureSizeInBlocks.src.width * srcBlockWidth,\n        height: textureSizeInBlocks.src.height * srcBlockHeight,\n        depthOrArrayLayers: 1,\n      },\n      {\n        width: textureSizeInBlocks.dst.width * dstBlockWidth,\n        height: textureSizeInBlocks.dst.height * dstBlockHeight,\n        depthOrArrayLayers: 1,\n      },\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel\n    );\n  });\n\ng.test('color_textures,non_compressed,array')\n  .desc(\n    `\n  Validate the correctness of the texture-to-texture copy on 2D array textures by filling the\n  srcTexture with testable data and any non-compressed color format supported by WebGPU, doing\n  CopyTextureToTexture() copy, and verifying the content of the whole dstTexture.\n  `\n  )\n  .params(u =>\n    u\n      .combine('srcFormat', kRegularTextureFormats)\n      .combine('dstFormat', kRegularTextureFormats)\n      .filter(({ srcFormat, dstFormat }) => {\n        const srcBaseFormat = kTextureFormatInfo[srcFormat].baseFormat;\n        const dstBaseFormat = kTextureFormatInfo[dstFormat].baseFormat;\n        return (\n          srcFormat === dstFormat ||\n          (srcBaseFormat !== undefined &&\n            dstBaseFormat !== undefined &&\n            srcBaseFormat === dstBaseFormat)\n        );\n      })\n      .combine('dimension', ['2d', '3d'] as const)\n      .filter(\n        ({ dimension, srcFormat, dstFormat }) =>\n          textureDimensionAndFormatCompatible(dimension, srcFormat) &&\n          textureDimensionAndFormatCompatible(dimension, dstFormat)\n      )\n      .beginSubcases()\n      .combine('textureSize', [\n        {\n          srcTextureSize: { width: 64, height: 32, depthOrArrayLayers: 5 },\n          dstTextureSize: { width: 64, height: 32, depthOrArrayLayers: 5 },\n        },\n        {\n          srcTextureSize: { width: 31, height: 33, depthOrArrayLayers: 5 },\n          dstTextureSize: { width: 31, height: 33, depthOrArrayLayers: 5 },\n        },\n        {\n          srcTextureSize: { width: 31, height: 32, depthOrArrayLayers: 33 },\n          dstTextureSize: { width: 31, height: 32, depthOrArrayLayers: 33 },\n        },\n      ])\n\n      .combine('copyBoxOffsets', kCopyBoxOffsetsFor2DArrayTextures)\n      .combine('srcCopyLevel', [0, 3])\n      .combine('dstCopyLevel', [0, 3])\n  )\n  .fn(async t => {\n    const {\n      dimension,\n      textureSize,\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel,\n    } = t.params;\n\n    t.DoCopyTextureToTextureTest(\n      dimension,\n      textureSize.srcTextureSize,\n      textureSize.dstTextureSize,\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel\n    );\n  });\n\ng.test('color_textures,compressed,array')\n  .desc(\n    `\n  Validate the correctness of the texture-to-texture copy on 2D array textures by filling the\n  srcTexture with testable data and any compressed color format supported by WebGPU, doing\n  CopyTextureToTexture() copy, and verifying the content of the whole dstTexture.\n\n  Tests for all pairs of valid source/destination formats, and all texture dimensions.\n  `\n  )\n  .params(u =>\n    u\n      .combine('srcFormat', kCompressedTextureFormats)\n      .combine('dstFormat', kCompressedTextureFormats)\n      .filter(({ srcFormat, dstFormat }) => {\n        const srcBaseFormat = kTextureFormatInfo[srcFormat].baseFormat;\n        const dstBaseFormat = kTextureFormatInfo[dstFormat].baseFormat;\n        return (\n          srcFormat === dstFormat ||\n          (srcBaseFormat !== undefined &&\n            dstBaseFormat !== undefined &&\n            srcBaseFormat === dstBaseFormat)\n        );\n      })\n      .combine('dimension', ['2d', '3d'] as const)\n      .filter(\n        ({ dimension, srcFormat, dstFormat }) =>\n          textureDimensionAndFormatCompatible(dimension, srcFormat) &&\n          textureDimensionAndFormatCompatible(dimension, dstFormat)\n      )\n      .beginSubcases()\n      .combine('textureSizeInBlocks', [\n        // The heights and widths in blocks are all power of 2\n        { src: { width: 2, height: 2 }, dst: { width: 2, height: 2 } },\n        // None of the widths or heights in blocks are power of 2\n        { src: { width: 15, height: 13 }, dst: { width: 15, height: 13 } },\n      ])\n      .combine('copyBoxOffsets', kCopyBoxOffsetsFor2DArrayTextures)\n      .combine('srcCopyLevel', [0, 2])\n      .combine('dstCopyLevel', [0, 2])\n  )\n  .beforeAllSubcases(t => {\n    const { srcFormat, dstFormat } = t.params;\n\n    t.selectDeviceOrSkipTestCase([\n      kTextureFormatInfo[srcFormat].feature,\n      kTextureFormatInfo[dstFormat].feature,\n    ]);\n  })\n  .fn(async t => {\n    const {\n      dimension,\n      textureSizeInBlocks,\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel,\n    } = t.params;\n    const srcBlockWidth = kTextureFormatInfo[srcFormat].blockWidth;\n    const srcBlockHeight = kTextureFormatInfo[srcFormat].blockHeight;\n    const dstBlockWidth = kTextureFormatInfo[dstFormat].blockWidth;\n    const dstBlockHeight = kTextureFormatInfo[dstFormat].blockHeight;\n\n    t.DoCopyTextureToTextureTest(\n      dimension,\n      {\n        width: textureSizeInBlocks.src.width * srcBlockWidth,\n        height: textureSizeInBlocks.src.height * srcBlockHeight,\n        depthOrArrayLayers: 5,\n      },\n      {\n        width: textureSizeInBlocks.dst.width * dstBlockWidth,\n        height: textureSizeInBlocks.dst.height * dstBlockHeight,\n        depthOrArrayLayers: 5,\n      },\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel\n    );\n  });\n\ng.test('zero_sized')\n  .desc(\n    `\n  Validate the correctness of zero-sized copies (should be no-ops).\n\n  - For each texture dimension.\n  - Copies that are zero-sized in only one dimension {x, y, z}, each touching the {lower, upper} end\n  of that dimension.\n  `\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combineWithParams([\n        { dimension: '1d', textureSize: { width: 32, height: 1, depthOrArrayLayers: 1 } },\n        { dimension: '2d', textureSize: { width: 32, height: 32, depthOrArrayLayers: 5 } },\n        { dimension: '3d', textureSize: { width: 32, height: 32, depthOrArrayLayers: 5 } },\n      ] as const)\n      .combine('copyBoxOffset', [\n        // copyExtent.width === 0\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: -64, height: 0, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.width === 0 && srcOffset.x === textureWidth\n        {\n          srcOffset: { x: 64, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: -64, height: 0, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.width === 0 && dstOffset.x === textureWidth\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 64, y: 0, z: 0 },\n          copyExtent: { width: -64, height: 0, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.height === 0\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: 0, height: -32, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.height === 0 && srcOffset.y === textureHeight\n        {\n          srcOffset: { x: 0, y: 32, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: 0, height: -32, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.height === 0 && dstOffset.y === textureHeight\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 32, z: 0 },\n          copyExtent: { width: 0, height: -32, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.depthOrArrayLayers === 0\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: 0, height: 0, depthOrArrayLayers: -5 },\n        },\n        // copyExtent.depthOrArrayLayers === 0 && srcOffset.z === textureDepth\n        {\n          srcOffset: { x: 0, y: 0, z: 5 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.depthOrArrayLayers === 0 && dstOffset.z === textureDepth\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 5 },\n          copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n        },\n      ])\n      .unless(\n        p =>\n          p.dimension === '1d' &&\n          (p.copyBoxOffset.copyExtent.height !== 0 ||\n            p.copyBoxOffset.srcOffset.y !== 0 ||\n            p.copyBoxOffset.dstOffset.y !== 0)\n      )\n      .combine('srcCopyLevel', [0, 3])\n      .combine('dstCopyLevel', [0, 3])\n      .unless(p => p.dimension === '1d' && (p.srcCopyLevel !== 0 || p.dstCopyLevel !== 0))\n  )\n  .fn(async t => {\n    const { dimension, textureSize, copyBoxOffset, srcCopyLevel, dstCopyLevel } = t.params;\n\n    const srcFormat = 'rgba8unorm';\n    const dstFormat = 'rgba8unorm';\n\n    t.DoCopyTextureToTextureTest(\n      dimension,\n      textureSize,\n      textureSize,\n      srcFormat,\n      dstFormat,\n      copyBoxOffset,\n      srcCopyLevel,\n      dstCopyLevel\n    );\n  });\n\ng.test('copy_depth_stencil')\n  .desc(\n    `\n  Validate the correctness of copyTextureToTexture() with depth and stencil aspect.\n\n  For all the texture formats with stencil aspect:\n  - Initialize the stencil aspect of the source texture with writeTexture().\n  - Copy the stencil aspect from the source texture into the destination texture\n  - Copy the stencil aspect of the destination texture into another staging buffer and check its\n    content\n  - Test the copies from / into zero / non-zero array layer / mipmap levels\n  - Test copying multiple array layers\n\n  For all the texture formats with depth aspect:\n  - Initialize the depth aspect of the source texture with a draw call\n  - Copy the depth aspect from the source texture into the destination texture\n  - Validate the content in the destination texture with the depth comparison function 'equal'\n  `\n  )\n  .params(u =>\n    u\n      .combine('format', kDepthStencilFormats)\n      .beginSubcases()\n      .combine('srcTextureSize', [\n        { width: 32, height: 16, depthOrArrayLayers: 1 },\n        { width: 32, height: 16, depthOrArrayLayers: 4 },\n        { width: 24, height: 48, depthOrArrayLayers: 5 },\n      ])\n      .combine('srcCopyLevel', [0, 2])\n      .combine('dstCopyLevel', [0, 2])\n      .combine('srcCopyBaseArrayLayer', [0, 1])\n      .combine('dstCopyBaseArrayLayer', [0, 1])\n      .filter(t => {\n        return (\n          t.srcTextureSize.depthOrArrayLayers > t.srcCopyBaseArrayLayer &&\n          t.srcTextureSize.depthOrArrayLayers > t.dstCopyBaseArrayLayer\n        );\n      })\n  )\n  .beforeAllSubcases(t => {\n    const { format } = t.params;\n    t.selectDeviceForTextureFormatOrSkipTestCase(format);\n  })\n  .fn(async t => {\n    const {\n      format,\n      srcTextureSize,\n      srcCopyLevel,\n      dstCopyLevel,\n      srcCopyBaseArrayLayer,\n      dstCopyBaseArrayLayer,\n    } = t.params;\n\n    const copySize: [number, number, number] = [\n      srcTextureSize.width >> srcCopyLevel,\n      srcTextureSize.height >> srcCopyLevel,\n      srcTextureSize.depthOrArrayLayers - Math.max(srcCopyBaseArrayLayer, dstCopyBaseArrayLayer),\n    ];\n    const sourceTexture = t.device.createTexture({\n      format,\n      size: srcTextureSize,\n      usage:\n        GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n      mipLevelCount: srcCopyLevel + 1,\n    });\n    t.trackForCleanup(sourceTexture);\n    const destinationTexture = t.device.createTexture({\n      format,\n      size: [\n        copySize[0] << dstCopyLevel,\n        copySize[1] << dstCopyLevel,\n        srcTextureSize.depthOrArrayLayers,\n      ] as const,\n      usage:\n        GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n      mipLevelCount: dstCopyLevel + 1,\n    });\n    t.trackForCleanup(destinationTexture);\n\n    let initialStencilData: undefined | Uint8Array = undefined;\n    if (kTextureFormatInfo[format].stencil) {\n      initialStencilData = t.GetInitialStencilDataPerMipLevel(srcTextureSize, format, srcCopyLevel);\n      t.InitializeStencilAspect(\n        sourceTexture,\n        initialStencilData,\n        srcCopyLevel,\n        srcCopyBaseArrayLayer,\n        copySize\n      );\n    }\n    if (kTextureFormatInfo[format].depth) {\n      t.InitializeDepthAspect(sourceTexture, format, srcCopyLevel, srcCopyBaseArrayLayer, copySize);\n    }\n\n    const encoder = t.device.createCommandEncoder();\n    encoder.copyTextureToTexture(\n      {\n        texture: sourceTexture,\n        mipLevel: srcCopyLevel,\n        origin: { x: 0, y: 0, z: srcCopyBaseArrayLayer },\n      },\n      {\n        texture: destinationTexture,\n        mipLevel: dstCopyLevel,\n        origin: { x: 0, y: 0, z: dstCopyBaseArrayLayer },\n      },\n      copySize\n    );\n    t.queue.submit([encoder.finish()]);\n\n    if (kTextureFormatInfo[format].stencil) {\n      assert(initialStencilData !== undefined);\n      t.VerifyStencilAspect(\n        destinationTexture,\n        initialStencilData,\n        dstCopyLevel,\n        dstCopyBaseArrayLayer,\n        copySize\n      );\n    }\n    if (kTextureFormatInfo[format].depth) {\n      t.VerifyDepthAspect(\n        destinationTexture,\n        format,\n        dstCopyLevel,\n        dstCopyBaseArrayLayer,\n        copySize\n      );\n    }\n  });\n\ng.test('copy_multisampled_color')\n  .desc(\n    `\n  Validate the correctness of copyTextureToTexture() with multisampled color formats.\n\n  - Initialize the source texture with a triangle in a render pass.\n  - Copy from the source texture into the destination texture with CopyTextureToTexture().\n  - Compare every sub-pixel of source texture and destination texture in another render pass:\n    - If they are different, then output RED; otherwise output GREEN\n  - Verify the pixels in the output texture are all GREEN.\n  - Note that in current WebGPU SPEC the mipmap level count and array layer count of a multisampled\n    texture can only be 1.\n  `\n  )\n  .fn(async t => {\n    const textureSize = [32, 16, 1] as const;\n    const kColorFormat = 'rgba8unorm';\n    const kSampleCount = 4;\n\n    const sourceTexture = t.device.createTexture({\n      format: kColorFormat,\n      size: textureSize,\n      usage:\n        GPUTextureUsage.COPY_SRC |\n        GPUTextureUsage.TEXTURE_BINDING |\n        GPUTextureUsage.RENDER_ATTACHMENT,\n      sampleCount: kSampleCount,\n    });\n    t.trackForCleanup(sourceTexture);\n    const destinationTexture = t.device.createTexture({\n      format: kColorFormat,\n      size: textureSize,\n      usage:\n        GPUTextureUsage.COPY_DST |\n        GPUTextureUsage.TEXTURE_BINDING |\n        GPUTextureUsage.RENDER_ATTACHMENT,\n      sampleCount: kSampleCount,\n    });\n    t.trackForCleanup(destinationTexture);\n\n    // Initialize sourceTexture with a draw call.\n    const renderPipelineForInit = t.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n            @vertex\n            fn main(@builtin(vertex_index) VertexIndex : u32) -> @builtin(position) vec4<f32> {\n              var pos = array<vec2<f32>, 3>(\n                  vec2<f32>(-1.0,  1.0),\n                  vec2<f32>( 1.0,  1.0),\n                  vec2<f32>( 1.0, -1.0)\n              );\n              return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `\n            @fragment\n            fn main() -> @location(0) vec4<f32> {\n              return vec4<f32>(0.3, 0.5, 0.8, 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: kColorFormat }],\n      },\n      multisample: {\n        count: kSampleCount,\n      },\n    });\n    const initEncoder = t.device.createCommandEncoder();\n    const renderPassForInit = initEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: sourceTexture.createView(),\n          clearValue: [1.0, 0.0, 0.0, 1.0],\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n    renderPassForInit.setPipeline(renderPipelineForInit);\n    renderPassForInit.draw(3);\n    renderPassForInit.end();\n    t.queue.submit([initEncoder.finish()]);\n\n    // Do the texture-to-texture copy\n    const copyEncoder = t.device.createCommandEncoder();\n    copyEncoder.copyTextureToTexture(\n      {\n        texture: sourceTexture,\n      },\n      {\n        texture: destinationTexture,\n      },\n      textureSize\n    );\n    t.queue.submit([copyEncoder.finish()]);\n\n    // Verify if all the sub-pixel values at the same location of sourceTexture and\n    // destinationTexture are equal.\n    const renderPipelineForValidation = t.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n          @vertex\n          fn main(@builtin(vertex_index) VertexIndex : u32) -> @builtin(position) vec4<f32> {\n            var pos = array<vec2<f32>, 6>(\n              vec2<f32>(-1.0,  1.0),\n              vec2<f32>(-1.0, -1.0),\n              vec2<f32>( 1.0,  1.0),\n              vec2<f32>(-1.0, -1.0),\n              vec2<f32>( 1.0,  1.0),\n              vec2<f32>( 1.0, -1.0));\n            return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n          }`,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `\n          @group(0) @binding(0) var sourceTexture : texture_multisampled_2d<f32>;\n          @group(0) @binding(1) var destinationTexture : texture_multisampled_2d<f32>;\n          @fragment\n          fn main(@builtin(position) coord_in: vec4<f32>) -> @location(0) vec4<f32> {\n            var coord_in_vec2 = vec2<i32>(i32(coord_in.x), i32(coord_in.y));\n            for (var sampleIndex = 0; sampleIndex < ${kSampleCount};\n              sampleIndex = sampleIndex + 1) {\n              var sourceSubPixel : vec4<f32> =\n                textureLoad(sourceTexture, coord_in_vec2, sampleIndex);\n              var destinationSubPixel : vec4<f32> =\n                textureLoad(destinationTexture, coord_in_vec2, sampleIndex);\n              if (!all(sourceSubPixel == destinationSubPixel)) {\n                return vec4<f32>(1.0, 0.0, 0.0, 1.0);\n              }\n            }\n            return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n          }`,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: kColorFormat }],\n      },\n    });\n    const bindGroup = t.device.createBindGroup({\n      layout: renderPipelineForValidation.getBindGroupLayout(0),\n      entries: [\n        {\n          binding: 0,\n          resource: sourceTexture.createView(),\n        },\n        {\n          binding: 1,\n          resource: destinationTexture.createView(),\n        },\n      ],\n    });\n    const expectedOutputTexture = t.device.createTexture({\n      format: kColorFormat,\n      size: textureSize,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n    t.trackForCleanup(expectedOutputTexture);\n    const validationEncoder = t.device.createCommandEncoder();\n    const renderPassForValidation = validationEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: expectedOutputTexture.createView(),\n          clearValue: [1.0, 0.0, 0.0, 1.0],\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n    renderPassForValidation.setPipeline(renderPipelineForValidation);\n    renderPassForValidation.setBindGroup(0, bindGroup);\n    renderPassForValidation.draw(6);\n    renderPassForValidation.end();\n    t.queue.submit([validationEncoder.finish()]);\n\n    t.expectSingleColor(expectedOutputTexture, 'rgba8unorm', {\n      size: [textureSize[0], textureSize[1], textureSize[2]],\n      exp: { R: 0.0, G: 1.0, B: 0.0, A: 1.0 },\n    });\n  });\n\ng.test('copy_multisampled_depth')\n  .desc(\n    `\n  Validate the correctness of copyTextureToTexture() with multisampled depth formats.\n\n  - Initialize the source texture with a triangle in a render pass.\n  - Copy from the source texture into the destination texture with CopyTextureToTexture().\n  - Validate the content in the destination texture with the depth comparison function 'equal'.\n  - Note that in current WebGPU SPEC the mipmap level count and array layer count of a multisampled\n    texture can only be 1.\n  `\n  )\n  .fn(async t => {\n    const textureSize = [32, 16, 1] as const;\n    const kDepthFormat = 'depth24plus';\n    const kSampleCount = 4;\n\n    const sourceTexture = t.device.createTexture({\n      format: kDepthFormat,\n      size: textureSize,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n      sampleCount: kSampleCount,\n    });\n    t.trackForCleanup(sourceTexture);\n    const destinationTexture = t.device.createTexture({\n      format: kDepthFormat,\n      size: textureSize,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n      sampleCount: kSampleCount,\n    });\n    t.trackForCleanup(destinationTexture);\n\n    const vertexState: GPUVertexState = {\n      module: t.device.createShaderModule({\n        code: `\n          @vertex\n          fn main(@builtin(vertex_index) VertexIndex : u32)-> @builtin(position) vec4<f32> {\n            var pos : array<vec3<f32>, 6> = array<vec3<f32>, 6>(\n                vec3<f32>(-1.0,  1.0, 0.5),\n                vec3<f32>(-1.0, -1.0, 0.0),\n                vec3<f32>( 1.0,  1.0, 1.0),\n                vec3<f32>(-1.0, -1.0, 0.0),\n                vec3<f32>( 1.0,  1.0, 1.0),\n                vec3<f32>( 1.0, -1.0, 0.5));\n            return vec4<f32>(pos[VertexIndex], 1.0);\n          }`,\n      }),\n      entryPoint: 'main',\n    };\n\n    // Initialize the depth aspect of source texture with a draw call\n    const renderPipelineForInit = t.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: vertexState,\n      depthStencil: {\n        format: kDepthFormat,\n        depthCompare: 'always',\n        depthWriteEnabled: true,\n      },\n      multisample: {\n        count: kSampleCount,\n      },\n    });\n\n    const encoderForInit = t.device.createCommandEncoder();\n    const renderPassForInit = encoderForInit.beginRenderPass({\n      colorAttachments: [],\n      depthStencilAttachment: {\n        view: sourceTexture.createView(),\n        depthClearValue: 0.0,\n        depthLoadOp: 'clear',\n        depthStoreOp: 'store',\n      },\n    });\n    renderPassForInit.setPipeline(renderPipelineForInit);\n    renderPassForInit.draw(6);\n    renderPassForInit.end();\n    t.queue.submit([encoderForInit.finish()]);\n\n    // Do the texture-to-texture copy\n    const copyEncoder = t.device.createCommandEncoder();\n    copyEncoder.copyTextureToTexture(\n      {\n        texture: sourceTexture,\n      },\n      {\n        texture: destinationTexture,\n      },\n      textureSize\n    );\n    t.queue.submit([copyEncoder.finish()]);\n\n    // Verify the depth values in destinationTexture are what we expected with\n    // depthCompareFunction == 'equal' and depthWriteEnabled == false in the render pipeline\n    const kColorFormat = 'rgba8unorm';\n    const renderPipelineForVerify = t.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: vertexState,\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `\n          @fragment\n          fn main() -> @location(0) vec4<f32> {\n            return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n          }`,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: kColorFormat }],\n      },\n      depthStencil: {\n        format: kDepthFormat,\n        depthCompare: 'equal',\n        depthWriteEnabled: false,\n      },\n      multisample: {\n        count: kSampleCount,\n      },\n    });\n    const multisampledColorTexture = t.device.createTexture({\n      format: kColorFormat,\n      size: textureSize,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n      sampleCount: kSampleCount,\n    });\n    t.trackForCleanup(multisampledColorTexture);\n    const colorTextureAsResolveTarget = t.device.createTexture({\n      format: kColorFormat,\n      size: textureSize,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n    t.trackForCleanup(colorTextureAsResolveTarget);\n\n    const encoderForVerify = t.device.createCommandEncoder();\n    const renderPassForVerify = encoderForVerify.beginRenderPass({\n      colorAttachments: [\n        {\n          view: multisampledColorTexture.createView(),\n          clearValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n          loadOp: 'clear',\n          storeOp: 'discard',\n          resolveTarget: colorTextureAsResolveTarget.createView(),\n        },\n      ],\n      depthStencilAttachment: {\n        view: destinationTexture.createView(),\n        depthLoadOp: 'load',\n        depthStoreOp: 'store',\n      },\n    });\n    renderPassForVerify.setPipeline(renderPipelineForVerify);\n    renderPassForVerify.draw(6);\n    renderPassForVerify.end();\n    t.queue.submit([encoderForVerify.finish()]);\n\n    t.expectSingleColor(colorTextureAsResolveTarget, kColorFormat, {\n      size: [textureSize[0], textureSize[1], textureSize[2]],\n      exp: { R: 0.0, G: 1.0, B: 0.0, A: 1.0 },\n    });\n  });\n"],"file":"copyTextureToTexture.spec.js"}