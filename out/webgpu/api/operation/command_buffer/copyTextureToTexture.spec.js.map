{"version":3,"sources":["../../../../../src/webgpu/api/operation/command_buffer/copyTextureToTexture.spec.ts"],"names":["description","makeTestGroup","assert","memcpy","kTextureFormatInfo","kRegularTextureFormats","kCompressedTextureFormats","depthStencilFormatAspectSize","kBufferSizeAlignment","kDepthStencilFormats","kMinDynamicBufferOffsetAlignment","kTextureDimensions","textureDimensionAndFormatCompatible","GPUTest","makeBufferWithContents","align","physicalMipSize","kBytesPerRowAlignment","dataBytesForCopyOrFail","F","GetInitialData","byteSize","initialData","Uint8Array","i","length","GetInitialDataPerMipLevel","dimension","textureSize","format","mipLevel","textureSizeAtLevel","bytesPerBlock","blockWidthInTexel","blockWidth","blockHeightInTexel","blockHeight","blocksPerSubresource","width","height","depthOrArrayLayers","GetInitialStencilDataPerMipLevel","aspectBytesPerBlock","DoCopyTextureToTextureTest","srcTextureSize","dstTextureSize","srcFormat","dstFormat","copyBoxOffsets","srcCopyLevel","dstCopyLevel","mipLevelCount","srcTextureDesc","size","usage","GPUTextureUsage","COPY_SRC","COPY_DST","srcTexture","device","createTexture","dstTextureDesc","dstTexture","initialSrcData","srcTextureSizeAtLevel","srcBlocksPerRow","srcBlockRowsPerImage","queue","writeTexture","texture","bytesPerRow","rowsPerImage","dstTextureSizeAtLevel","minWidth","Math","min","minHeight","minDepth","appliedSrcOffset","x","srcOffset","y","z","appliedDstOffset","dstOffset","appliedCopyWidth","max","copyExtent","appliedCopyHeight","appliedCopyDepth","encoder","createCommandEncoder","copyTextureToTexture","origin","dstBlocksPerRow","dstBlockRowsPerImage","bytesPerDstAlignedBlockRow","dstBufferSize","dstBufferDesc","GPUBufferUsage","dstBuffer","createBuffer","copyTextureToBuffer","buffer","submit","finish","expectedDataWithPadding","ArrayBuffer","expectedUint8DataWithPadding","expectedUint8Data","appliedCopyBlocksPerRow","appliedCopyBlockRowsPerImage","srcCopyOffsetInBlocks","dstCopyOffsetInBlocks","srcOffsetZ","dstOffsetZ","dstOffsetYInBlocks","expectedDataWithPaddingOffset","srcOffsetYInBlocks","expectedDataOffset","bytesInRow","src","start","dst","expectGPUBufferValuesEqual","InitializeStencilAspect","sourceTexture","initialStencilData","srcCopyBaseArrayLayer","copySize","aspect","VerifyStencilAspect","destinationTexture","dstCopyBaseArrayLayer","outputBufferSize","layout","method","outputBuffer","expectedStencilData","initialOffsetPerLayer","expectedOffsetPerLayer","initialOffsetPerRow","expectedOffsetPerRow","GetRenderPipelineForT2TCopyWithDepthTests","bindGroupLayout","hasColorAttachment","depthStencil","renderPipelineDescriptor","createPipelineLayout","bindGroupLayouts","vertex","module","createShaderModule","code","entryPoint","fragment","targets","createRenderPipeline","GetBindGroupLayoutForT2TCopyWithDepthTests","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","VERTEX","type","minBindingSize","hasDynamicOffset","GetBindGroupForT2TCopyWithDepthTests","totalCopyArrayLayers","uniformBufferSize","uniformBufferData","Float32Array","uniformBuffer","UNIFORM","createBindGroup","resource","InitializeDepthAspect","depthFormat","renderPipeline","depthWriteEnabled","depthCompare","bindGroup","srcCopyLayer","renderPass","beginRenderPass","colorAttachments","depthStencilAttachment","view","createView","baseArrayLayer","arrayLayerCount","baseMipLevel","depthLoadValue","depthStoreOp","stencilLoadValue","stencilStoreOp","setBindGroup","setPipeline","draw","endPass","VerifyDepthAspect","outputColorTexture","RENDER_ATTACHMENT","dstCopyLayer","loadValue","r","g","b","a","storeOp","expectSingleColor","exp","R","G","B","A","kCopyBoxOffsetsForWholeDepth","kCopyBoxOffsetsFor2DArrayTextures","test","desc","params","u","combine","filter","srcBaseFormat","baseFormat","dstBaseFormat","undefined","beginSubcases","expandWithParams","p","param","unless","fn","t","textureSizeInBlocks","selectDeviceOrSkipTestCase","feature","srcBlockWidth","srcBlockHeight","dstBlockWidth","dstBlockHeight","paramsSubcasesOnly","combineWithParams","copyBoxOffset","selectDeviceForTextureFormatOrSkipTestCase","stencil","depth","kColorFormat","kSampleCount","TEXTURE_BINDING","sampleCount","renderPipelineForInit","multisample","count","initEncoder","renderPassForInit","copyEncoder","renderPipelineForValidation","getBindGroupLayout","expectedOutputTexture","validationEncoder","renderPassForValidation","kDepthFormat","vertexState","encoderForInit","renderPipelineForVerify","multisampledColorTexture","colorTextureAsResolveTarget","encoderForVerify","renderPassForVerify","resolveTarget"],"mappings":"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","sourcesContent":["export const description = `copyTexturetoTexture operation tests`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert, memcpy } from '../../../../common/util/util.js';\nimport {\n  kTextureFormatInfo,\n  kRegularTextureFormats,\n  SizedTextureFormat,\n  kCompressedTextureFormats,\n  depthStencilFormatAspectSize,\n  DepthStencilFormat,\n  kBufferSizeAlignment,\n  kDepthStencilFormats,\n  kMinDynamicBufferOffsetAlignment,\n  kTextureDimensions,\n  textureDimensionAndFormatCompatible,\n} from '../../../capability_info.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { makeBufferWithContents } from '../../../util/buffer.js';\nimport { align } from '../../../util/math.js';\nimport { physicalMipSize } from '../../../util/texture/base.js';\nimport { kBytesPerRowAlignment, dataBytesForCopyOrFail } from '../../../util/texture/layout.js';\n\nclass F extends GPUTest {\n  GetInitialData(byteSize: number): Uint8Array {\n    const initialData = new Uint8Array(byteSize);\n    for (let i = 0; i < initialData.length; ++i) {\n      initialData[i] = ((i ** 3 + i) % 251) + 1; // Have all initialData be non zero.\n    }\n    return initialData;\n  }\n\n  GetInitialDataPerMipLevel(\n    dimension: GPUTextureDimension,\n    textureSize: Required<GPUExtent3DDict>,\n    format: SizedTextureFormat,\n    mipLevel: number\n  ): Uint8Array {\n    const textureSizeAtLevel = physicalMipSize(textureSize, format, dimension, mipLevel);\n    const bytesPerBlock = kTextureFormatInfo[format].bytesPerBlock;\n    const blockWidthInTexel = kTextureFormatInfo[format].blockWidth;\n    const blockHeightInTexel = kTextureFormatInfo[format].blockHeight;\n    const blocksPerSubresource =\n      (textureSizeAtLevel.width / blockWidthInTexel) *\n      (textureSizeAtLevel.height / blockHeightInTexel);\n\n    const byteSize = bytesPerBlock * blocksPerSubresource * textureSizeAtLevel.depthOrArrayLayers;\n    return this.GetInitialData(byteSize);\n  }\n\n  GetInitialStencilDataPerMipLevel(\n    textureSize: Required<GPUExtent3DDict>,\n    format: DepthStencilFormat,\n    mipLevel: number\n  ): Uint8Array {\n    const textureSizeAtLevel = physicalMipSize(textureSize, format, '2d', mipLevel);\n    const aspectBytesPerBlock = depthStencilFormatAspectSize(format, 'stencil-only');\n    const byteSize =\n      aspectBytesPerBlock *\n      textureSizeAtLevel.width *\n      textureSizeAtLevel.height *\n      textureSizeAtLevel.depthOrArrayLayers;\n    return this.GetInitialData(byteSize);\n  }\n\n  DoCopyTextureToTextureTest(\n    dimension: GPUTextureDimension,\n    srcTextureSize: Required<GPUExtent3DDict>,\n    dstTextureSize: Required<GPUExtent3DDict>,\n    srcFormat: SizedTextureFormat,\n    dstFormat: SizedTextureFormat,\n    copyBoxOffsets: {\n      srcOffset: { x: number; y: number; z: number };\n      dstOffset: { x: number; y: number; z: number };\n      copyExtent: Required<GPUExtent3DDict>;\n    },\n    srcCopyLevel: number,\n    dstCopyLevel: number\n  ): void {\n    const mipLevelCount = dimension === '1d' ? 1 : 4;\n\n    // Create srcTexture and dstTexture\n    const srcTextureDesc: GPUTextureDescriptor = {\n      dimension,\n      size: srcTextureSize,\n      format: srcFormat,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n      mipLevelCount,\n    };\n    const srcTexture = this.device.createTexture(srcTextureDesc);\n    const dstTextureDesc: GPUTextureDescriptor = {\n      dimension,\n      size: dstTextureSize,\n      format: dstFormat,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n      mipLevelCount,\n    };\n    const dstTexture = this.device.createTexture(dstTextureDesc);\n\n    // Fill the whole subresource of srcTexture at srcCopyLevel with initialSrcData.\n    const initialSrcData = this.GetInitialDataPerMipLevel(\n      dimension,\n      srcTextureSize,\n      srcFormat,\n      srcCopyLevel\n    );\n    const srcTextureSizeAtLevel = physicalMipSize(\n      srcTextureSize,\n      srcFormat,\n      dimension,\n      srcCopyLevel\n    );\n    const bytesPerBlock = kTextureFormatInfo[srcFormat].bytesPerBlock;\n    const blockWidth = kTextureFormatInfo[srcFormat].blockWidth;\n    const blockHeight = kTextureFormatInfo[srcFormat].blockHeight;\n    const srcBlocksPerRow = srcTextureSizeAtLevel.width / blockWidth;\n    const srcBlockRowsPerImage = srcTextureSizeAtLevel.height / blockHeight;\n    this.device.queue.writeTexture(\n      { texture: srcTexture, mipLevel: srcCopyLevel },\n      initialSrcData,\n      {\n        bytesPerRow: srcBlocksPerRow * bytesPerBlock,\n        rowsPerImage: srcBlockRowsPerImage,\n      },\n      srcTextureSizeAtLevel\n    );\n\n    // Copy the region specified by copyBoxOffsets from srcTexture to dstTexture.\n    const dstTextureSizeAtLevel = physicalMipSize(\n      dstTextureSize,\n      dstFormat,\n      dimension,\n      dstCopyLevel\n    );\n    const minWidth = Math.min(srcTextureSizeAtLevel.width, dstTextureSizeAtLevel.width);\n    const minHeight = Math.min(srcTextureSizeAtLevel.height, dstTextureSizeAtLevel.height);\n    const minDepth = Math.min(\n      srcTextureSizeAtLevel.depthOrArrayLayers,\n      dstTextureSizeAtLevel.depthOrArrayLayers\n    );\n\n    const appliedSrcOffset = {\n      x: Math.min(copyBoxOffsets.srcOffset.x * blockWidth, minWidth),\n      y: Math.min(copyBoxOffsets.srcOffset.y * blockHeight, minHeight),\n      z: Math.min(copyBoxOffsets.srcOffset.z, minDepth),\n    };\n    const appliedDstOffset = {\n      x: Math.min(copyBoxOffsets.dstOffset.x * blockWidth, minWidth),\n      y: Math.min(copyBoxOffsets.dstOffset.y * blockHeight, minHeight),\n      z: Math.min(copyBoxOffsets.dstOffset.z, minDepth),\n    };\n\n    const appliedCopyWidth = Math.max(\n      minWidth +\n        copyBoxOffsets.copyExtent.width * blockWidth -\n        Math.max(appliedSrcOffset.x, appliedDstOffset.x),\n      0\n    );\n    const appliedCopyHeight = Math.max(\n      minHeight +\n        copyBoxOffsets.copyExtent.height * blockHeight -\n        Math.max(appliedSrcOffset.y, appliedDstOffset.y),\n      0\n    );\n    assert(appliedCopyWidth % blockWidth === 0 && appliedCopyHeight % blockHeight === 0);\n\n    const appliedCopyDepth = Math.max(\n      0,\n      minDepth +\n        copyBoxOffsets.copyExtent.depthOrArrayLayers -\n        Math.max(appliedSrcOffset.z, appliedDstOffset.z)\n    );\n    assert(appliedCopyDepth >= 0);\n\n    const encoder = this.device.createCommandEncoder();\n    encoder.copyTextureToTexture(\n      { texture: srcTexture, mipLevel: srcCopyLevel, origin: appliedSrcOffset },\n      { texture: dstTexture, mipLevel: dstCopyLevel, origin: appliedDstOffset },\n      { width: appliedCopyWidth, height: appliedCopyHeight, depthOrArrayLayers: appliedCopyDepth }\n    );\n\n    // Copy the whole content of dstTexture at dstCopyLevel to dstBuffer.\n    const dstBlocksPerRow = dstTextureSizeAtLevel.width / blockWidth;\n    const dstBlockRowsPerImage = dstTextureSizeAtLevel.height / blockHeight;\n    const bytesPerDstAlignedBlockRow = align(dstBlocksPerRow * bytesPerBlock, 256);\n    const dstBufferSize =\n      (dstBlockRowsPerImage * dstTextureSizeAtLevel.depthOrArrayLayers - 1) *\n        bytesPerDstAlignedBlockRow +\n      align(dstBlocksPerRow * bytesPerBlock, 4);\n    const dstBufferDesc: GPUBufferDescriptor = {\n      size: dstBufferSize,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    };\n    const dstBuffer = this.device.createBuffer(dstBufferDesc);\n\n    encoder.copyTextureToBuffer(\n      { texture: dstTexture, mipLevel: dstCopyLevel },\n      {\n        buffer: dstBuffer,\n        bytesPerRow: bytesPerDstAlignedBlockRow,\n        rowsPerImage: dstBlockRowsPerImage,\n      },\n      dstTextureSizeAtLevel\n    );\n    this.device.queue.submit([encoder.finish()]);\n\n    // Fill expectedDataWithPadding with the expected data of dstTexture. The other values in\n    // expectedDataWithPadding are kept 0 to check if the texels untouched by the copy are 0\n    // (their previous values).\n    const expectedDataWithPadding = new ArrayBuffer(dstBufferSize);\n    const expectedUint8DataWithPadding = new Uint8Array(expectedDataWithPadding);\n    const expectedUint8Data = new Uint8Array(initialSrcData);\n\n    const appliedCopyBlocksPerRow = appliedCopyWidth / blockWidth;\n    const appliedCopyBlockRowsPerImage = appliedCopyHeight / blockHeight;\n    const srcCopyOffsetInBlocks = {\n      x: appliedSrcOffset.x / blockWidth,\n      y: appliedSrcOffset.y / blockHeight,\n      z: appliedSrcOffset.z,\n    };\n    const dstCopyOffsetInBlocks = {\n      x: appliedDstOffset.x / blockWidth,\n      y: appliedDstOffset.y / blockHeight,\n      z: appliedDstOffset.z,\n    };\n\n    for (let z = 0; z < appliedCopyDepth; ++z) {\n      const srcOffsetZ = srcCopyOffsetInBlocks.z + z;\n      const dstOffsetZ = dstCopyOffsetInBlocks.z + z;\n      for (let y = 0; y < appliedCopyBlockRowsPerImage; ++y) {\n        const dstOffsetYInBlocks = dstCopyOffsetInBlocks.y + y;\n        const expectedDataWithPaddingOffset =\n          bytesPerDstAlignedBlockRow * (dstBlockRowsPerImage * dstOffsetZ + dstOffsetYInBlocks) +\n          dstCopyOffsetInBlocks.x * bytesPerBlock;\n\n        const srcOffsetYInBlocks = srcCopyOffsetInBlocks.y + y;\n        const expectedDataOffset =\n          bytesPerBlock *\n            srcBlocksPerRow *\n            (srcBlockRowsPerImage * srcOffsetZ + srcOffsetYInBlocks) +\n          srcCopyOffsetInBlocks.x * bytesPerBlock;\n\n        const bytesInRow = appliedCopyBlocksPerRow * bytesPerBlock;\n        memcpy(\n          { src: expectedUint8Data, start: expectedDataOffset, length: bytesInRow },\n          { dst: expectedUint8DataWithPadding, start: expectedDataWithPaddingOffset }\n        );\n      }\n    }\n\n    // Verify the content of the whole subresouce of dstTexture at dstCopyLevel (in dstBuffer) is expected.\n    this.expectGPUBufferValuesEqual(dstBuffer, expectedUint8DataWithPadding);\n  }\n\n  InitializeStencilAspect(\n    sourceTexture: GPUTexture,\n    initialStencilData: Uint8Array,\n    srcCopyLevel: number,\n    srcCopyBaseArrayLayer: number,\n    copySize: readonly [number, number, number]\n  ): void {\n    this.queue.writeTexture(\n      {\n        texture: sourceTexture,\n        mipLevel: srcCopyLevel,\n        aspect: 'stencil-only',\n        origin: { x: 0, y: 0, z: srcCopyBaseArrayLayer },\n      },\n      initialStencilData,\n      { bytesPerRow: copySize[0], rowsPerImage: copySize[1] },\n      copySize\n    );\n  }\n\n  VerifyStencilAspect(\n    destinationTexture: GPUTexture,\n    initialStencilData: Uint8Array,\n    dstCopyLevel: number,\n    dstCopyBaseArrayLayer: number,\n    copySize: readonly [number, number, number]\n  ): void {\n    const bytesPerRow = align(copySize[0], kBytesPerRowAlignment);\n    const rowsPerImage = copySize[1];\n    const outputBufferSize = align(\n      dataBytesForCopyOrFail({\n        layout: { bytesPerRow, rowsPerImage },\n        format: 'stencil8',\n        copySize,\n        method: 'CopyT2B',\n      }),\n      kBufferSizeAlignment\n    );\n    const outputBuffer = this.device.createBuffer({\n      size: outputBufferSize,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n    const encoder = this.device.createCommandEncoder();\n    encoder.copyTextureToBuffer(\n      {\n        texture: destinationTexture,\n        aspect: 'stencil-only',\n        mipLevel: dstCopyLevel,\n        origin: { x: 0, y: 0, z: dstCopyBaseArrayLayer },\n      },\n      { buffer: outputBuffer, bytesPerRow, rowsPerImage },\n      copySize\n    );\n    this.queue.submit([encoder.finish()]);\n\n    const expectedStencilData = new Uint8Array(outputBufferSize);\n    for (let z = 0; z < copySize[2]; ++z) {\n      const initialOffsetPerLayer = z * copySize[0] * copySize[1];\n      const expectedOffsetPerLayer = z * bytesPerRow * rowsPerImage;\n      for (let y = 0; y < copySize[1]; ++y) {\n        const initialOffsetPerRow = initialOffsetPerLayer + y * copySize[0];\n        const expectedOffsetPerRow = expectedOffsetPerLayer + y * bytesPerRow;\n        memcpy(\n          { src: initialStencilData, start: initialOffsetPerRow, length: copySize[0] },\n          { dst: expectedStencilData, start: expectedOffsetPerRow }\n        );\n      }\n    }\n    this.expectGPUBufferValuesEqual(outputBuffer, expectedStencilData);\n  }\n\n  GetRenderPipelineForT2TCopyWithDepthTests(\n    bindGroupLayout: GPUBindGroupLayout,\n    hasColorAttachment: boolean,\n    depthStencil: GPUDepthStencilState\n  ): GPURenderPipeline {\n    const renderPipelineDescriptor: GPURenderPipelineDescriptor = {\n      layout: this.device.createPipelineLayout({ bindGroupLayouts: [bindGroupLayout] }),\n      vertex: {\n        module: this.device.createShaderModule({\n          code: `\n            struct Params {\n              copyLayer: f32;\n            };\n            @group(0) @binding(0) var<uniform> param: Params;\n            @stage(vertex)\n            fn main(@builtin(vertex_index) VertexIndex : u32)-> @builtin(position) vec4<f32> {\n              var depthValue = 0.5 + 0.2 * sin(param.copyLayer);\n              var pos : array<vec3<f32>, 6> = array<vec3<f32>, 6>(\n                  vec3<f32>(-1.0,  1.0, depthValue),\n                  vec3<f32>(-1.0, -1.0, 0.0),\n                  vec3<f32>( 1.0,  1.0, 1.0),\n                  vec3<f32>(-1.0, -1.0, 0.0),\n                  vec3<f32>( 1.0,  1.0, 1.0),\n                  vec3<f32>( 1.0, -1.0, depthValue));\n              return vec4<f32>(pos[VertexIndex], 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n      },\n      depthStencil,\n    };\n    if (hasColorAttachment) {\n      renderPipelineDescriptor.fragment = {\n        module: this.device.createShaderModule({\n          code: `\n            @stage(fragment)\n            fn main() -> @location(0) vec4<f32> {\n              return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: 'rgba8unorm' }],\n      };\n    }\n    return this.device.createRenderPipeline(renderPipelineDescriptor);\n  }\n\n  GetBindGroupLayoutForT2TCopyWithDepthTests(): GPUBindGroupLayout {\n    return this.device.createBindGroupLayout({\n      entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.VERTEX,\n          buffer: {\n            type: 'uniform',\n            minBindingSize: 4,\n            hasDynamicOffset: true,\n          },\n        },\n      ],\n    });\n  }\n\n  GetBindGroupForT2TCopyWithDepthTests(\n    bindGroupLayout: GPUBindGroupLayout,\n    totalCopyArrayLayers: number\n  ): GPUBindGroup {\n    // Prepare the uniform buffer that contains all the copy layers to generate different depth\n    // values for different copy layers.\n    assert(totalCopyArrayLayers > 0);\n    const uniformBufferSize = kMinDynamicBufferOffsetAlignment * (totalCopyArrayLayers - 1) + 4;\n    const uniformBufferData = new Float32Array(uniformBufferSize / 4);\n    for (let i = 1; i < totalCopyArrayLayers; ++i) {\n      uniformBufferData[(kMinDynamicBufferOffsetAlignment / 4) * i] = i;\n    }\n    const uniformBuffer = makeBufferWithContents(\n      this.device,\n      uniformBufferData,\n      GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM\n    );\n    return this.device.createBindGroup({\n      layout: bindGroupLayout,\n      entries: [\n        {\n          binding: 0,\n          resource: {\n            buffer: uniformBuffer,\n            size: 4,\n          },\n        },\n      ],\n    });\n  }\n\n  /** Initialize the depth aspect of sourceTexture with draw calls */\n  InitializeDepthAspect(\n    sourceTexture: GPUTexture,\n    depthFormat: GPUTextureFormat,\n    srcCopyLevel: number,\n    srcCopyBaseArrayLayer: number,\n    copySize: readonly [number, number, number]\n  ): void {\n    // Prepare a renderPipeline with depthCompareFunction == 'always' and depthWriteEnabled == true\n    // for the initializations of the depth attachment.\n    const bindGroupLayout = this.GetBindGroupLayoutForT2TCopyWithDepthTests();\n    const renderPipeline = this.GetRenderPipelineForT2TCopyWithDepthTests(bindGroupLayout, false, {\n      format: depthFormat,\n      depthWriteEnabled: true,\n      depthCompare: 'always',\n    });\n    const bindGroup = this.GetBindGroupForT2TCopyWithDepthTests(bindGroupLayout, copySize[2]);\n\n    const encoder = this.device.createCommandEncoder();\n    for (let srcCopyLayer = 0; srcCopyLayer < copySize[2]; ++srcCopyLayer) {\n      const renderPass = encoder.beginRenderPass({\n        colorAttachments: [],\n        depthStencilAttachment: {\n          view: sourceTexture.createView({\n            baseArrayLayer: srcCopyLayer + srcCopyBaseArrayLayer,\n            arrayLayerCount: 1,\n            baseMipLevel: srcCopyLevel,\n            mipLevelCount: 1,\n          }),\n          depthLoadValue: 0.0,\n          depthStoreOp: 'store',\n          stencilLoadValue: 'load',\n          stencilStoreOp: 'store',\n        },\n      });\n      renderPass.setBindGroup(0, bindGroup, [srcCopyLayer * kMinDynamicBufferOffsetAlignment]);\n      renderPass.setPipeline(renderPipeline);\n      renderPass.draw(6);\n      renderPass.endPass();\n    }\n    this.queue.submit([encoder.finish()]);\n  }\n\n  VerifyDepthAspect(\n    destinationTexture: GPUTexture,\n    depthFormat: GPUTextureFormat,\n    dstCopyLevel: number,\n    dstCopyBaseArrayLayer: number,\n    copySize: [number, number, number]\n  ): void {\n    // Prepare a renderPipeline with depthCompareFunction == 'equal' and depthWriteEnabled == false\n    // for the comparations of the depth attachment.\n    const bindGroupLayout = this.GetBindGroupLayoutForT2TCopyWithDepthTests();\n    const renderPipeline = this.GetRenderPipelineForT2TCopyWithDepthTests(bindGroupLayout, true, {\n      format: depthFormat,\n      depthWriteEnabled: false,\n      depthCompare: 'equal',\n    });\n    const bindGroup = this.GetBindGroupForT2TCopyWithDepthTests(bindGroupLayout, copySize[2]);\n\n    const outputColorTexture = this.device.createTexture({\n      format: 'rgba8unorm',\n      size: copySize,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n    });\n    const encoder = this.device.createCommandEncoder();\n    for (let dstCopyLayer = 0; dstCopyLayer < copySize[2]; ++dstCopyLayer) {\n      // If the depth value is not expected, the color of outputColorTexture will remain Red after\n      // the render pass.\n      const renderPass = encoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: outputColorTexture.createView({\n              baseArrayLayer: dstCopyLayer,\n              arrayLayerCount: 1,\n            }),\n            loadValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n            storeOp: 'store',\n          },\n        ],\n        depthStencilAttachment: {\n          view: destinationTexture.createView({\n            baseArrayLayer: dstCopyLayer + dstCopyBaseArrayLayer,\n            arrayLayerCount: 1,\n            baseMipLevel: dstCopyLevel,\n            mipLevelCount: 1,\n          }),\n          depthLoadValue: 'load',\n          depthStoreOp: 'store',\n          stencilLoadValue: 'load',\n          stencilStoreOp: 'store',\n        },\n      });\n      renderPass.setBindGroup(0, bindGroup, [dstCopyLayer * kMinDynamicBufferOffsetAlignment]);\n      renderPass.setPipeline(renderPipeline);\n      renderPass.draw(6);\n      renderPass.endPass();\n    }\n    this.queue.submit([encoder.finish()]);\n\n    this.expectSingleColor(outputColorTexture, 'rgba8unorm', {\n      size: copySize,\n      exp: { R: 0.0, G: 1.0, B: 0.0, A: 1.0 },\n    });\n  }\n}\n\nconst kCopyBoxOffsetsForWholeDepth = [\n  // From (0, 0) of src to (0, 0) of dst.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (0, 0) of src to (blockWidth, 0) of dst.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 1, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (0, 0) of src to (0, blockHeight) of dst.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 1, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (blockWidth, 0) of src to (0, 0) of dst.\n  {\n    srcOffset: { x: 1, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (0, blockHeight) of src to (0, 0) of dst.\n  {\n    srcOffset: { x: 0, y: 1, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (blockWidth, 0) of src to (0, 0) of dst, and the copy extent will not cover the last\n  // texel block column of both source and destination texture.\n  {\n    srcOffset: { x: 1, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: -1, height: 0, depthOrArrayLayers: 0 },\n  },\n  // From (0, blockHeight) of src to (0, 0) of dst, and the copy extent will not cover the last\n  // texel block row of both source and destination texture.\n  {\n    srcOffset: { x: 0, y: 1, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: -1, depthOrArrayLayers: 0 },\n  },\n] as const;\n\nconst kCopyBoxOffsetsFor2DArrayTextures = [\n  // Copy the whole array slices from the source texture to the destination texture.\n  // The copy extent will cover the whole subresource of either source or the\n  // destination texture\n  ...kCopyBoxOffsetsForWholeDepth,\n\n  // Copy 1 texture slice from the 1st slice of the source texture to the 1st slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -2 },\n  },\n  // Copy 1 texture slice from the 2nd slice of the source texture to the 2nd slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 1 },\n    dstOffset: { x: 0, y: 0, z: 1 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -3 },\n  },\n  // Copy 1 texture slice from the 1st slice of the source texture to the 2nd slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 1 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -1 },\n  },\n  // Copy 1 texture slice from the 2nd slice of the source texture to the 1st slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 1 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -1 },\n  },\n  // Copy 2 texture slices from the 1st slice of the source texture to the 1st slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 0 },\n    dstOffset: { x: 0, y: 0, z: 0 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -3 },\n  },\n  // Copy 3 texture slices from the 2nd slice of the source texture to the 2nd slice of the\n  // destination texture.\n  {\n    srcOffset: { x: 0, y: 0, z: 1 },\n    dstOffset: { x: 0, y: 0, z: 1 },\n    copyExtent: { width: 0, height: 0, depthOrArrayLayers: -1 },\n  },\n] as const;\n\nexport const g = makeTestGroup(F);\n\ng.test('color_textures,non_compressed,non_array')\n  .desc(\n    `\n  Validate the correctness of the copy by filling the srcTexture with testable data and any\n  non-compressed color format supported by WebGPU, doing CopyTextureToTexture() copy, and verifying\n  the content of the whole dstTexture.\n\n  Copy {1 texel block, part of, the whole} srcTexture to the dstTexture {with, without} a non-zero\n  valid srcOffset that\n  - covers the whole dstTexture subresource\n  - covers the corners of the dstTexture\n  - doesn't cover any texels that are on the edge of the dstTexture\n  - covers the mipmap level > 0\n\n  Tests for all pairs of valid source/destination formats, and all texture dimensions.\n  `\n  )\n  .params(u =>\n    u\n      .combine('srcFormat', kRegularTextureFormats)\n      .combine('dstFormat', kRegularTextureFormats)\n      .filter(({ srcFormat, dstFormat }) => {\n        const srcBaseFormat = kTextureFormatInfo[srcFormat].baseFormat;\n        const dstBaseFormat = kTextureFormatInfo[dstFormat].baseFormat;\n        return (\n          srcFormat === dstFormat ||\n          (srcBaseFormat !== undefined &&\n            dstBaseFormat !== undefined &&\n            srcBaseFormat === dstBaseFormat)\n        );\n      })\n      .combine('dimension', kTextureDimensions)\n      .filter(\n        ({ dimension, srcFormat, dstFormat }) =>\n          textureDimensionAndFormatCompatible(dimension, srcFormat) &&\n          textureDimensionAndFormatCompatible(dimension, dstFormat)\n      )\n      .beginSubcases()\n      .expandWithParams(p => {\n        const params = [\n          {\n            srcTextureSize: { width: 32, height: 32, depthOrArrayLayers: 1 },\n            dstTextureSize: { width: 32, height: 32, depthOrArrayLayers: 1 },\n          },\n          {\n            srcTextureSize: { width: 31, height: 33, depthOrArrayLayers: 1 },\n            dstTextureSize: { width: 31, height: 33, depthOrArrayLayers: 1 },\n          },\n          {\n            srcTextureSize: { width: 32, height: 32, depthOrArrayLayers: 1 },\n            dstTextureSize: { width: 64, height: 64, depthOrArrayLayers: 1 },\n          },\n          {\n            srcTextureSize: { width: 32, height: 32, depthOrArrayLayers: 1 },\n            dstTextureSize: { width: 63, height: 61, depthOrArrayLayers: 1 },\n          },\n        ];\n        if (p.dimension === '1d') {\n          for (const param of params) {\n            param.srcTextureSize.height = 1;\n            param.dstTextureSize.height = 1;\n          }\n        }\n\n        return params;\n      })\n      .combine('copyBoxOffsets', kCopyBoxOffsetsForWholeDepth)\n      .unless(\n        p =>\n          p.dimension === '1d' &&\n          (p.copyBoxOffsets.copyExtent.height !== 0 ||\n            p.copyBoxOffsets.srcOffset.y !== 0 ||\n            p.copyBoxOffsets.dstOffset.y !== 0)\n      )\n      .combine('srcCopyLevel', [0, 3])\n      .combine('dstCopyLevel', [0, 3])\n      .unless(p => p.dimension === '1d' && (p.srcCopyLevel !== 0 || p.dstCopyLevel !== 0))\n  )\n  .fn(async t => {\n    const {\n      dimension,\n      srcTextureSize,\n      dstTextureSize,\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel,\n    } = t.params;\n\n    t.DoCopyTextureToTextureTest(\n      dimension,\n      srcTextureSize,\n      dstTextureSize,\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel\n    );\n  });\n\ng.test('color_textures,compressed,non_array')\n  .desc(\n    `\n  Validate the correctness of the copy by filling the srcTexture with testable data and any\n  compressed color format supported by WebGPU, doing CopyTextureToTexture() copy, and verifying\n  the content of the whole dstTexture.\n\n  Tests for all pairs of valid source/destination formats, and all texture dimensions.\n  `\n  )\n  .params(u =>\n    u\n      .combine('srcFormat', kCompressedTextureFormats)\n      .combine('dstFormat', kCompressedTextureFormats)\n      .filter(({ srcFormat, dstFormat }) => {\n        const srcBaseFormat = kTextureFormatInfo[srcFormat].baseFormat;\n        const dstBaseFormat = kTextureFormatInfo[dstFormat].baseFormat;\n        return (\n          srcFormat === dstFormat ||\n          (srcBaseFormat !== undefined &&\n            dstBaseFormat !== undefined &&\n            srcBaseFormat === dstBaseFormat)\n        );\n      })\n      .combine('dimension', kTextureDimensions)\n      .filter(\n        ({ dimension, srcFormat, dstFormat }) =>\n          textureDimensionAndFormatCompatible(dimension, srcFormat) &&\n          textureDimensionAndFormatCompatible(dimension, dstFormat)\n      )\n      .beginSubcases()\n      .combine('textureSizeInBlocks', [\n        // The heights and widths in blocks are all power of 2\n        { src: { width: 16, height: 8 }, dst: { width: 16, height: 8 } },\n        // The virtual width of the source texture at mipmap level 2 (15) is not a multiple of 4 blocks\n        { src: { width: 15, height: 8 }, dst: { width: 16, height: 8 } },\n        // The virtual width of the destination texture at mipmap level 2 (15) is not a multiple\n        // of 4 blocks\n        { src: { width: 16, height: 8 }, dst: { width: 15, height: 8 } },\n        // The virtual height of the source texture at mipmap level 2 (13) is not a multiple of 4 blocks\n        { src: { width: 16, height: 13 }, dst: { width: 16, height: 8 } },\n        // The virtual height of the destination texture at mipmap level 2 (13) is not a\n        // multiple of 4 blocks\n        { src: { width: 16, height: 8 }, dst: { width: 16, height: 13 } },\n        // None of the widths or heights in blocks are power of 2\n        { src: { width: 15, height: 13 }, dst: { width: 15, height: 13 } },\n      ])\n      .combine('copyBoxOffsets', kCopyBoxOffsetsForWholeDepth)\n      .combine('srcCopyLevel', [0, 2])\n      .combine('dstCopyLevel', [0, 2])\n  )\n  .fn(async t => {\n    const {\n      dimension,\n      textureSizeInBlocks,\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel,\n    } = t.params;\n    await t.selectDeviceOrSkipTestCase([\n      kTextureFormatInfo[srcFormat].feature,\n      kTextureFormatInfo[dstFormat].feature,\n    ]);\n    const srcBlockWidth = kTextureFormatInfo[srcFormat].blockWidth;\n    const srcBlockHeight = kTextureFormatInfo[srcFormat].blockHeight;\n    const dstBlockWidth = kTextureFormatInfo[dstFormat].blockWidth;\n    const dstBlockHeight = kTextureFormatInfo[dstFormat].blockHeight;\n\n    t.DoCopyTextureToTextureTest(\n      dimension,\n      {\n        width: textureSizeInBlocks.src.width * srcBlockWidth,\n        height: textureSizeInBlocks.src.height * srcBlockHeight,\n        depthOrArrayLayers: 1,\n      },\n      {\n        width: textureSizeInBlocks.dst.width * dstBlockWidth,\n        height: textureSizeInBlocks.dst.height * dstBlockHeight,\n        depthOrArrayLayers: 1,\n      },\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel\n    );\n  });\n\ng.test('color_textures,non_compressed,array')\n  .desc(\n    `\n  Validate the correctness of the texture-to-texture copy on 2D array textures by filling the\n  srcTexture with testable data and any non-compressed color format supported by WebGPU, doing\n  CopyTextureToTexture() copy, and verifying the content of the whole dstTexture.\n  `\n  )\n  .params(u =>\n    u\n      .combine('srcFormat', kRegularTextureFormats)\n      .combine('dstFormat', kRegularTextureFormats)\n      .filter(({ srcFormat, dstFormat }) => {\n        const srcBaseFormat = kTextureFormatInfo[srcFormat].baseFormat;\n        const dstBaseFormat = kTextureFormatInfo[dstFormat].baseFormat;\n        return (\n          srcFormat === dstFormat ||\n          (srcBaseFormat !== undefined &&\n            dstBaseFormat !== undefined &&\n            srcBaseFormat === dstBaseFormat)\n        );\n      })\n      .combine('dimension', ['2d', '3d'] as const)\n      .filter(\n        ({ dimension, srcFormat, dstFormat }) =>\n          textureDimensionAndFormatCompatible(dimension, srcFormat) &&\n          textureDimensionAndFormatCompatible(dimension, dstFormat)\n      )\n      .beginSubcases()\n      .combine('textureSize', [\n        {\n          srcTextureSize: { width: 64, height: 32, depthOrArrayLayers: 5 },\n          dstTextureSize: { width: 64, height: 32, depthOrArrayLayers: 5 },\n        },\n        {\n          srcTextureSize: { width: 31, height: 33, depthOrArrayLayers: 5 },\n          dstTextureSize: { width: 31, height: 33, depthOrArrayLayers: 5 },\n        },\n        {\n          srcTextureSize: { width: 31, height: 32, depthOrArrayLayers: 33 },\n          dstTextureSize: { width: 31, height: 32, depthOrArrayLayers: 33 },\n        },\n      ])\n\n      .combine('copyBoxOffsets', kCopyBoxOffsetsFor2DArrayTextures)\n      .combine('srcCopyLevel', [0, 3])\n      .combine('dstCopyLevel', [0, 3])\n  )\n  .fn(async t => {\n    const {\n      dimension,\n      textureSize,\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel,\n    } = t.params;\n\n    t.DoCopyTextureToTextureTest(\n      dimension,\n      textureSize.srcTextureSize,\n      textureSize.dstTextureSize,\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel\n    );\n  });\n\ng.test('color_textures,compressed,array')\n  .desc(\n    `\n  Validate the correctness of the texture-to-texture copy on 2D array textures by filling the\n  srcTexture with testable data and any compressed color format supported by WebGPU, doing\n  CopyTextureToTexture() copy, and verifying the content of the whole dstTexture.\n\n  Tests for all pairs of valid source/destination formats, and all texture dimensions.\n  `\n  )\n  .params(u =>\n    u\n      .combine('srcFormat', kCompressedTextureFormats)\n      .combine('dstFormat', kCompressedTextureFormats)\n      .filter(({ srcFormat, dstFormat }) => {\n        const srcBaseFormat = kTextureFormatInfo[srcFormat].baseFormat;\n        const dstBaseFormat = kTextureFormatInfo[dstFormat].baseFormat;\n        return (\n          srcFormat === dstFormat ||\n          (srcBaseFormat !== undefined &&\n            dstBaseFormat !== undefined &&\n            srcBaseFormat === dstBaseFormat)\n        );\n      })\n      .combine('dimension', ['2d', '3d'] as const)\n      .filter(\n        ({ dimension, srcFormat, dstFormat }) =>\n          textureDimensionAndFormatCompatible(dimension, srcFormat) &&\n          textureDimensionAndFormatCompatible(dimension, dstFormat)\n      )\n      .beginSubcases()\n      .combine('textureSizeInBlocks', [\n        // The heights and widths in blocks are all power of 2\n        { src: { width: 2, height: 2 }, dst: { width: 2, height: 2 } },\n        // None of the widths or heights in blocks are power of 2\n        { src: { width: 15, height: 13 }, dst: { width: 15, height: 13 } },\n      ])\n      .combine('copyBoxOffsets', kCopyBoxOffsetsFor2DArrayTextures)\n      .combine('srcCopyLevel', [0, 2])\n      .combine('dstCopyLevel', [0, 2])\n  )\n  .fn(async t => {\n    const {\n      dimension,\n      textureSizeInBlocks,\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel,\n    } = t.params;\n    await t.selectDeviceOrSkipTestCase([\n      kTextureFormatInfo[srcFormat].feature,\n      kTextureFormatInfo[dstFormat].feature,\n    ]);\n    const srcBlockWidth = kTextureFormatInfo[srcFormat].blockWidth;\n    const srcBlockHeight = kTextureFormatInfo[srcFormat].blockHeight;\n    const dstBlockWidth = kTextureFormatInfo[dstFormat].blockWidth;\n    const dstBlockHeight = kTextureFormatInfo[dstFormat].blockHeight;\n\n    t.DoCopyTextureToTextureTest(\n      dimension,\n      {\n        width: textureSizeInBlocks.src.width * srcBlockWidth,\n        height: textureSizeInBlocks.src.height * srcBlockHeight,\n        depthOrArrayLayers: 5,\n      },\n      {\n        width: textureSizeInBlocks.dst.width * dstBlockWidth,\n        height: textureSizeInBlocks.dst.height * dstBlockHeight,\n        depthOrArrayLayers: 5,\n      },\n      srcFormat,\n      dstFormat,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel\n    );\n  });\n\ng.test('zero_sized')\n  .desc(\n    `\n  Validate the correctness of zero-sized copies (should be no-ops).\n\n  - For each texture dimension.\n  - Copies that are zero-sized in only one dimension {x, y, z}, each touching the {lower, upper} end\n  of that dimension.\n  `\n  )\n  .paramsSubcasesOnly(u =>\n    u //\n      .combineWithParams([\n        { dimension: '1d', textureSize: { width: 32, height: 1, depthOrArrayLayers: 1 } },\n        { dimension: '2d', textureSize: { width: 32, height: 32, depthOrArrayLayers: 5 } },\n        { dimension: '3d', textureSize: { width: 32, height: 32, depthOrArrayLayers: 5 } },\n      ] as const)\n      .combine('copyBoxOffset', [\n        // copyExtent.width === 0\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: -64, height: 0, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.width === 0 && srcOffset.x === textureWidth\n        {\n          srcOffset: { x: 64, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: -64, height: 0, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.width === 0 && dstOffset.x === textureWidth\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 64, y: 0, z: 0 },\n          copyExtent: { width: -64, height: 0, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.height === 0\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: 0, height: -32, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.height === 0 && srcOffset.y === textureHeight\n        {\n          srcOffset: { x: 0, y: 32, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: 0, height: -32, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.height === 0 && dstOffset.y === textureHeight\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 32, z: 0 },\n          copyExtent: { width: 0, height: -32, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.depthOrArrayLayers === 0\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: 0, height: 0, depthOrArrayLayers: -5 },\n        },\n        // copyExtent.depthOrArrayLayers === 0 && srcOffset.z === textureDepth\n        {\n          srcOffset: { x: 0, y: 0, z: 5 },\n          dstOffset: { x: 0, y: 0, z: 0 },\n          copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n        },\n        // copyExtent.depthOrArrayLayers === 0 && dstOffset.z === textureDepth\n        {\n          srcOffset: { x: 0, y: 0, z: 0 },\n          dstOffset: { x: 0, y: 0, z: 5 },\n          copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 },\n        },\n      ])\n      .unless(\n        p =>\n          p.dimension === '1d' &&\n          (p.copyBoxOffset.copyExtent.height !== 0 ||\n            p.copyBoxOffset.srcOffset.y !== 0 ||\n            p.copyBoxOffset.dstOffset.y !== 0)\n      )\n      .combine('srcCopyLevel', [0, 3])\n      .combine('dstCopyLevel', [0, 3])\n      .unless(p => p.dimension === '1d' && (p.srcCopyLevel !== 0 || p.dstCopyLevel !== 0))\n  )\n  .fn(async t => {\n    const { dimension, textureSize, copyBoxOffset, srcCopyLevel, dstCopyLevel } = t.params;\n\n    const srcFormat = 'rgba8unorm';\n    const dstFormat = 'rgba8unorm';\n\n    t.DoCopyTextureToTextureTest(\n      dimension,\n      textureSize,\n      textureSize,\n      srcFormat,\n      dstFormat,\n      copyBoxOffset,\n      srcCopyLevel,\n      dstCopyLevel\n    );\n  });\n\ng.test('copy_depth_stencil')\n  .desc(\n    `\n  Validate the correctness of copyTextureToTexture() with depth and stencil aspect.\n\n  For all the texture formats with stencil aspect:\n  - Initialize the stencil aspect of the source texture with writeTexture().\n  - Copy the stencil aspect from the source texture into the destination texture\n  - Copy the stencil aspect of the destination texture into another staging buffer and check its\n    content\n  - Test the copies from / into zero / non-zero array layer / mipmap levels\n  - Test copying multiple array layers\n\n  For all the texture formats with depth aspect:\n  - Initialize the depth aspect of the source texture with a draw call\n  - Copy the depth aspect from the source texture into the destination texture\n  - Validate the content in the destination texture with the depth comparation function 'equal'\n  `\n  )\n  .params(u =>\n    u\n      .combine('format', kDepthStencilFormats)\n      .beginSubcases()\n      .combine('srcTextureSize', [\n        { width: 32, height: 16, depthOrArrayLayers: 1 },\n        { width: 32, height: 16, depthOrArrayLayers: 4 },\n        { width: 24, height: 48, depthOrArrayLayers: 5 },\n      ])\n      .combine('srcCopyLevel', [0, 2])\n      .combine('dstCopyLevel', [0, 2])\n      .combine('srcCopyBaseArrayLayer', [0, 1])\n      .combine('dstCopyBaseArrayLayer', [0, 1])\n      .filter(t => {\n        return (\n          t.srcTextureSize.depthOrArrayLayers > t.srcCopyBaseArrayLayer &&\n          t.srcTextureSize.depthOrArrayLayers > t.dstCopyBaseArrayLayer\n        );\n      })\n  )\n  .fn(async t => {\n    const {\n      format,\n      srcTextureSize,\n      srcCopyLevel,\n      dstCopyLevel,\n      srcCopyBaseArrayLayer,\n      dstCopyBaseArrayLayer,\n    } = t.params;\n    await t.selectDeviceForTextureFormatOrSkipTestCase(format);\n\n    const copySize: [number, number, number] = [\n      srcTextureSize.width >> srcCopyLevel,\n      srcTextureSize.height >> srcCopyLevel,\n      srcTextureSize.depthOrArrayLayers - Math.max(srcCopyBaseArrayLayer, dstCopyBaseArrayLayer),\n    ];\n    const sourceTexture = t.device.createTexture({\n      format,\n      size: srcTextureSize,\n      usage:\n        GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n      mipLevelCount: srcCopyLevel + 1,\n    });\n    const destinationTexture = t.device.createTexture({\n      format,\n      size: [\n        copySize[0] << dstCopyLevel,\n        copySize[1] << dstCopyLevel,\n        srcTextureSize.depthOrArrayLayers,\n      ] as const,\n      usage:\n        GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n      mipLevelCount: dstCopyLevel + 1,\n    });\n\n    let initialStencilData: undefined | Uint8Array = undefined;\n    if (kTextureFormatInfo[format].stencil) {\n      initialStencilData = t.GetInitialStencilDataPerMipLevel(srcTextureSize, format, srcCopyLevel);\n      t.InitializeStencilAspect(\n        sourceTexture,\n        initialStencilData,\n        srcCopyLevel,\n        srcCopyBaseArrayLayer,\n        copySize\n      );\n    }\n    if (kTextureFormatInfo[format].depth) {\n      t.InitializeDepthAspect(sourceTexture, format, srcCopyLevel, srcCopyBaseArrayLayer, copySize);\n    }\n\n    const encoder = t.device.createCommandEncoder();\n    encoder.copyTextureToTexture(\n      {\n        texture: sourceTexture,\n        mipLevel: srcCopyLevel,\n        origin: { x: 0, y: 0, z: srcCopyBaseArrayLayer },\n      },\n      {\n        texture: destinationTexture,\n        mipLevel: dstCopyLevel,\n        origin: { x: 0, y: 0, z: dstCopyBaseArrayLayer },\n      },\n      copySize\n    );\n    t.queue.submit([encoder.finish()]);\n\n    if (kTextureFormatInfo[format].stencil) {\n      assert(initialStencilData !== undefined);\n      t.VerifyStencilAspect(\n        destinationTexture,\n        initialStencilData,\n        dstCopyLevel,\n        dstCopyBaseArrayLayer,\n        copySize\n      );\n    }\n    if (kTextureFormatInfo[format].depth) {\n      t.VerifyDepthAspect(\n        destinationTexture,\n        format,\n        dstCopyLevel,\n        dstCopyBaseArrayLayer,\n        copySize\n      );\n    }\n  });\n\ng.test('copy_multisampled_color')\n  .desc(\n    `\n  Validate the correctness of copyTextureToTexture() with multisampled color formats.\n\n  - Initialize the source texture with a triangle in a render pass.\n  - Copy from the source texture into the destination texture with CopyTextureToTexture().\n  - Compare every sub-pixel of source texture and destination texture in another render pass:\n    - If they are different, then output RED; otherwise output GREEN\n  - Verify the pixels in the output texture are all GREEN.\n  - Note that in current WebGPU SPEC the mipmap level count and array layer count of a multisampled\n    texture can only be 1.\n  `\n  )\n  .fn(async t => {\n    const textureSize = [32, 16, 1] as const;\n    const kColorFormat = 'rgba8unorm';\n    const kSampleCount = 4;\n\n    const sourceTexture = t.device.createTexture({\n      format: kColorFormat,\n      size: textureSize,\n      usage:\n        GPUTextureUsage.COPY_SRC |\n        GPUTextureUsage.TEXTURE_BINDING |\n        GPUTextureUsage.RENDER_ATTACHMENT,\n      sampleCount: kSampleCount,\n    });\n    const destinationTexture = t.device.createTexture({\n      format: kColorFormat,\n      size: textureSize,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n      sampleCount: kSampleCount,\n    });\n\n    // Initialize sourceTexture with a draw call.\n    const renderPipelineForInit = t.device.createRenderPipeline({\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n            @stage(vertex)\n            fn main(@builtin(vertex_index) VertexIndex : u32) -> @builtin(position) vec4<f32> {\n              var pos = array<vec2<f32>, 3>(\n                  vec2<f32>(-1.0,  1.0),\n                  vec2<f32>( 1.0,  1.0),\n                  vec2<f32>( 1.0, -1.0)\n              );\n              return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `\n            @stage(fragment)\n            fn main() -> @location(0) vec4<f32> {\n              return vec4<f32>(0.3, 0.5, 0.8, 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: kColorFormat }],\n      },\n      multisample: {\n        count: kSampleCount,\n      },\n    });\n    const initEncoder = t.device.createCommandEncoder();\n    const renderPassForInit = initEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: sourceTexture.createView(),\n          loadValue: [1.0, 0.0, 0.0, 1.0],\n          storeOp: 'store',\n        },\n      ],\n    });\n    renderPassForInit.setPipeline(renderPipelineForInit);\n    renderPassForInit.draw(3);\n    renderPassForInit.endPass();\n    t.queue.submit([initEncoder.finish()]);\n\n    // Do the texture-to-texture copy\n    const copyEncoder = t.device.createCommandEncoder();\n    copyEncoder.copyTextureToTexture(\n      {\n        texture: sourceTexture,\n      },\n      {\n        texture: destinationTexture,\n      },\n      textureSize\n    );\n    t.queue.submit([copyEncoder.finish()]);\n\n    // Verify if all the sub-pixel values at the same location of sourceTexture and\n    // destinationTexture are equal.\n    const renderPipelineForValidation = t.device.createRenderPipeline({\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n          @stage(vertex)\n          fn main(@builtin(vertex_index) VertexIndex : u32) -> @builtin(position) vec4<f32> {\n            var pos = array<vec2<f32>, 6>(\n              vec2<f32>(-1.0,  1.0),\n              vec2<f32>(-1.0, -1.0),\n              vec2<f32>( 1.0,  1.0),\n              vec2<f32>(-1.0, -1.0),\n              vec2<f32>( 1.0,  1.0),\n              vec2<f32>( 1.0, -1.0));\n            return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n          }`,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `\n          @group(0) @binding(0) var sourceTexture : texture_multisampled_2d<f32>;\n          @group(0) @binding(1) var destinationTexture : texture_multisampled_2d<f32>;\n          @stage(fragment)\n          fn main(@builtin(position) coord_in: vec4<f32>) -> @location(0) vec4<f32> {\n            var coord_in_vec2 = vec2<i32>(i32(coord_in.x), i32(coord_in.y));\n            for (var sampleIndex = 0; sampleIndex < ${kSampleCount};\n              sampleIndex = sampleIndex + 1) {\n              var sourceSubPixel : vec4<f32> =\n                textureLoad(sourceTexture, coord_in_vec2, sampleIndex);\n              var destinationSubPixel : vec4<f32> =\n                textureLoad(destinationTexture, coord_in_vec2, sampleIndex);\n              if (!all(sourceSubPixel == destinationSubPixel)) {\n                return vec4<f32>(1.0, 0.0, 0.0, 1.0);\n              }\n            }\n            return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n          }`,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: kColorFormat }],\n      },\n    });\n    const bindGroup = t.device.createBindGroup({\n      layout: renderPipelineForValidation.getBindGroupLayout(0),\n      entries: [\n        {\n          binding: 0,\n          resource: sourceTexture.createView(),\n        },\n        {\n          binding: 1,\n          resource: destinationTexture.createView(),\n        },\n      ],\n    });\n    const expectedOutputTexture = t.device.createTexture({\n      format: kColorFormat,\n      size: textureSize,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n    const validationEncoder = t.device.createCommandEncoder();\n    const renderPassForValidation = validationEncoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: expectedOutputTexture.createView(),\n          loadValue: [1.0, 0.0, 0.0, 1.0],\n          storeOp: 'store',\n        },\n      ],\n    });\n    renderPassForValidation.setPipeline(renderPipelineForValidation);\n    renderPassForValidation.setBindGroup(0, bindGroup);\n    renderPassForValidation.draw(6);\n    renderPassForValidation.endPass();\n    t.queue.submit([validationEncoder.finish()]);\n\n    t.expectSingleColor(expectedOutputTexture, 'rgba8unorm', {\n      size: [textureSize[0], textureSize[1], textureSize[2]],\n      exp: { R: 0.0, G: 1.0, B: 0.0, A: 1.0 },\n    });\n  });\n\ng.test('copy_multisampled_depth')\n  .desc(\n    `\n  Validate the correctness of copyTextureToTexture() with multisampled depth formats.\n\n  - Initialize the source texture with a triangle in a render pass.\n  - Copy from the source texture into the destination texture with CopyTextureToTexture().\n  - Validate the content in the destination texture with the depth comparation function 'equal'.\n  - Note that in current WebGPU SPEC the mipmap level count and array layer count of a multisampled\n    texture can only be 1.\n  `\n  )\n  .fn(async t => {\n    const textureSize = [32, 16, 1] as const;\n    const kDepthFormat = 'depth24plus';\n    const kSampleCount = 4;\n\n    const sourceTexture = t.device.createTexture({\n      format: kDepthFormat,\n      size: textureSize,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n      sampleCount: kSampleCount,\n    });\n    const destinationTexture = t.device.createTexture({\n      format: kDepthFormat,\n      size: textureSize,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n      sampleCount: kSampleCount,\n    });\n\n    const vertexState: GPUVertexState = {\n      module: t.device.createShaderModule({\n        code: `\n          @stage(vertex)\n          fn main(@builtin(vertex_index) VertexIndex : u32)-> @builtin(position) vec4<f32> {\n            var pos : array<vec3<f32>, 6> = array<vec3<f32>, 6>(\n                vec3<f32>(-1.0,  1.0, 0.5),\n                vec3<f32>(-1.0, -1.0, 0.0),\n                vec3<f32>( 1.0,  1.0, 1.0),\n                vec3<f32>(-1.0, -1.0, 0.0),\n                vec3<f32>( 1.0,  1.0, 1.0),\n                vec3<f32>( 1.0, -1.0, 0.5));\n            return vec4<f32>(pos[VertexIndex], 1.0);\n          }`,\n      }),\n      entryPoint: 'main',\n    };\n\n    // Initialize the depth aspect of source texture with a draw call\n    const renderPipelineForInit = t.device.createRenderPipeline({\n      vertex: vertexState,\n      depthStencil: {\n        format: kDepthFormat,\n        depthCompare: 'always',\n        depthWriteEnabled: true,\n      },\n      multisample: {\n        count: kSampleCount,\n      },\n    });\n\n    const encoderForInit = t.device.createCommandEncoder();\n    const renderPassForInit = encoderForInit.beginRenderPass({\n      colorAttachments: [],\n      depthStencilAttachment: {\n        view: sourceTexture.createView(),\n        depthLoadValue: 0.0,\n        depthStoreOp: 'store',\n        stencilLoadValue: 0,\n        stencilStoreOp: 'store',\n      },\n    });\n    renderPassForInit.setPipeline(renderPipelineForInit);\n    renderPassForInit.draw(6);\n    renderPassForInit.endPass();\n    t.queue.submit([encoderForInit.finish()]);\n\n    // Do the texture-to-texture copy\n    const copyEncoder = t.device.createCommandEncoder();\n    copyEncoder.copyTextureToTexture(\n      {\n        texture: sourceTexture,\n      },\n      {\n        texture: destinationTexture,\n      },\n      textureSize\n    );\n    t.queue.submit([copyEncoder.finish()]);\n\n    // Verify the depth values in destinationTexture are what we expected with\n    // depthCompareFunction == 'equal' and depthWriteEnabled == false in the render pipeline\n    const kColorFormat = 'rgba8unorm';\n    const renderPipelineForVerify = t.device.createRenderPipeline({\n      vertex: vertexState,\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `\n          @stage(fragment)\n          fn main() -> @location(0) vec4<f32> {\n            return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n          }`,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: kColorFormat }],\n      },\n      depthStencil: {\n        format: kDepthFormat,\n        depthCompare: 'equal',\n        depthWriteEnabled: false,\n      },\n      multisample: {\n        count: kSampleCount,\n      },\n    });\n    const multisampledColorTexture = t.device.createTexture({\n      format: kColorFormat,\n      size: textureSize,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n      sampleCount: kSampleCount,\n    });\n    const colorTextureAsResolveTarget = t.device.createTexture({\n      format: kColorFormat,\n      size: textureSize,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const encoderForVerify = t.device.createCommandEncoder();\n    const renderPassForVerify = encoderForVerify.beginRenderPass({\n      colorAttachments: [\n        {\n          view: multisampledColorTexture.createView(),\n          loadValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n          storeOp: 'discard',\n          resolveTarget: colorTextureAsResolveTarget.createView(),\n        },\n      ],\n      depthStencilAttachment: {\n        view: destinationTexture.createView(),\n        depthLoadValue: 'load',\n        depthStoreOp: 'store',\n        stencilLoadValue: 0,\n        stencilStoreOp: 'store',\n      },\n    });\n    renderPassForVerify.setPipeline(renderPipelineForVerify);\n    renderPassForVerify.draw(6);\n    renderPassForVerify.endPass();\n    t.queue.submit([encoderForVerify.finish()]);\n\n    t.expectSingleColor(colorTextureAsResolveTarget, kColorFormat, {\n      size: [textureSize[0], textureSize[1], textureSize[2]],\n      exp: { R: 0.0, G: 1.0, B: 0.0, A: 1.0 },\n    });\n  });\n"],"file":"copyTextureToTexture.spec.js"}