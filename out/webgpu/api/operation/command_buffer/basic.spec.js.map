{"version":3,"sources":["../../../../../src/webgpu/api/operation/command_buffer/basic.spec.ts"],"names":["description","makeTestGroup","memcpy","GPUTest","g","test","fn","t","encoder","device","createCommandEncoder","cmd","finish","queue","submit","data","Uint32Array","src","createBuffer","mappedAtCreation","size","usage","GPUBufferUsage","COPY_SRC","COPY_DST","dst","getMappedRange","unmap","mid","createTexture","width","height","depthOrArrayLayers","format","GPUTextureUsage","copyBufferToTexture","buffer","bytesPerRow","texture","mipLevel","origin","x","y","z","copyTextureToBuffer","expectGPUBufferValuesEqual","midDesc","mid1","mid2","copyTextureToTexture"],"mappings":"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","sourcesContent":["export const description = `\nBasic tests.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { memcpy } from '../../../../common/util/util.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('empty').fn(async t => {\n  const encoder = t.device.createCommandEncoder();\n  const cmd = encoder.finish();\n  t.device.queue.submit([cmd]);\n});\n\ng.test('b2t2b').fn(async t => {\n  const data = new Uint32Array([0x01020304]);\n\n  const src = t.device.createBuffer({\n    mappedAtCreation: true,\n    size: 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n  memcpy({ src: data }, { dst: src.getMappedRange() });\n  src.unmap();\n\n  const dst = t.device.createBuffer({\n    size: 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n\n  const mid = t.device.createTexture({\n    size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n    format: 'rgba8uint',\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n  });\n\n  const encoder = t.device.createCommandEncoder();\n  encoder.copyBufferToTexture(\n    { buffer: src, bytesPerRow: 256 },\n    { texture: mid, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { width: 1, height: 1, depthOrArrayLayers: 1 }\n  );\n  encoder.copyTextureToBuffer(\n    { texture: mid, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { buffer: dst, bytesPerRow: 256 },\n    { width: 1, height: 1, depthOrArrayLayers: 1 }\n  );\n  t.device.queue.submit([encoder.finish()]);\n\n  t.expectGPUBufferValuesEqual(dst, data);\n});\n\ng.test('b2t2t2b').fn(async t => {\n  const data = new Uint32Array([0x01020304]);\n\n  const src = t.device.createBuffer({\n    mappedAtCreation: true,\n    size: 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n  memcpy({ src: data }, { dst: src.getMappedRange() });\n  src.unmap();\n\n  const dst = t.device.createBuffer({\n    size: 4,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  });\n\n  const midDesc: GPUTextureDescriptor = {\n    size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n    format: 'rgba8uint',\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n  };\n  const mid1 = t.device.createTexture(midDesc);\n  const mid2 = t.device.createTexture(midDesc);\n\n  const encoder = t.device.createCommandEncoder();\n  encoder.copyBufferToTexture(\n    { buffer: src, bytesPerRow: 256 },\n    { texture: mid1, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { width: 1, height: 1, depthOrArrayLayers: 1 }\n  );\n  encoder.copyTextureToTexture(\n    { texture: mid1, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { texture: mid2, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { width: 1, height: 1, depthOrArrayLayers: 1 }\n  );\n  encoder.copyTextureToBuffer(\n    { texture: mid2, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n    { buffer: dst, bytesPerRow: 256 },\n    { width: 1, height: 1, depthOrArrayLayers: 1 }\n  );\n  t.device.queue.submit([encoder.finish()]);\n\n  t.expectGPUBufferValuesEqual(dst, data);\n});\n"],"file":"basic.spec.js"}