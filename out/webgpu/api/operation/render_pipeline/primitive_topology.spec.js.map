{"version":3,"sources":["../../../../../src/webgpu/api/operation/render_pipeline/primitive_topology.spec.ts"],"names":["description","makeTestGroup","GPUTest","kRTSize","kColorFormat","kValidPixelColor","Uint8Array","kInvalidPixelColor","Point2D","constructor","x","y","z","w","toNDC","getMidpoint","a","b","getCentroid","c","VertexLocations","getPointTestLocations","expectedColor","testLocations","location","push","color","getLineTestLocations","getPrimitiveRestartLineTestLocations","getLineStripTestLocations","getTriangleListTestLocations","getTriangleStripTestLocations","getDefaultTestLocations","topology","primitiveRestart","invalidateLastInList","maybeInvalidateLast","locations","map","tl","i","length","generateVertexBuffer","vertexLocations","vertexCoords","Float32Array","point","kDefaultDrawCount","PrimitiveTopologyTest","makeAttachmentTexture","device","createTexture","format","size","width","height","depthOrArrayLayers","usage","GPUTextureUsage","RENDER_ATTACHMENT","COPY_SRC","run","indirect","drawCount","colorAttachment","encoder","createCommandEncoder","renderPass","beginRenderPass","colorAttachments","view","createView","loadValue","r","g","storeOp","stripIndexFormat","undefined","setPipeline","createRenderPipeline","vertex","module","createShaderModule","code","entryPoint","buffers","arrayStride","BYTES_PER_ELEMENT","attributes","offset","shaderLocation","fragment","targets","primitive","vertexBuffer","makeBufferWithContents","GPUBufferUsage","VERTEX","setVertexBuffer","indexBuffer","Uint32Array","INDEX","setIndexBuffer","drawIndexedIndirect","INDIRECT","drawIndexed","drawIndirect","draw","endPass","queue","submit","finish","testPixel","expectSinglePixelIn2DTexture","exp","topologies","test","desc","params","u","combine","unless","p","fn","t","expand"],"mappings":"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","sourcesContent":["export const description = `Test primitive topology rendering.\n\nDraw a primitive using 6 vertices with each topology and check if the pixel is covered.\n\nVertex sequence and coordinates are the same for each topology:\n  - Vertex buffer = [v1, v2, v3, v4, v5, v6]\n  - Topology = [point-list, line-list, line-strip, triangle-list, triangle-strip]\n\nTest locations are framebuffer coordinates:\n  - Pixel value { valid: green, invalid: black, format: 'rgba8unorm'}\n  - Test point is valid if the pixel value equals the covered pixel value at the test location.\n  - Primitive restart occurs for strips (line-strip and triangle-strip) between [v3, v4].\n\n  Topology: point-list         Valid test location(s)           Invalid test location(s)\n\n       v2    v4     v6         Every vertex.                    Line-strip locations.\n                                                                Triangle-list locations.\n                                                                Triangle-strip locations.\n\n   v1     v3     v5\n\n  Topology: line-list (3 lines)\n\n       v2    v4     v6         Center of three line segments:   Line-strip locations.\n      *      *      *          {v1,V2}, {v3,v4}, and {v4,v5}.   Triangle-list locations.\n     *      *      *                                            Triangle-strip locations.\n    *      *      *\n   v1     v3     v5\n\n  Topology: line-strip (5 lines)\n\n       v2    v4     v6\n       **    **     *\n      *  *  *  *   *           Line-list locations              Triangle-list locations.\n     *    **     **          + Center of two line segments:     Triangle-strip locations.\n    v1    v3     v5            {v2,v3} and {v4,v5}.\n                                                                With primitive restart:\n                                                                Line segment {v3, v4}.\n\n  Topology: triangle-list (2 triangles)\n\n      v2       v4    v6\n      **        ******         Center of two triangle(s):       Triangle-strip locations.\n     ****        ****          {v1,v2,v3} and {v4,v5,v6}.\n    ******        **\n   v1     v3      v5\n\n  Topology: triangle-strip (4 triangles)\n\n      v2        v4      v6\n      ** ****** ** ******      Triangle-list locations          None.\n     **** **** **** ****     + Center of two triangle(s):\n    ****** ** ****** **        {v2,v3,v4} and {v3,v4,v5}.       With primitive restart:\n   v1       v3        v5                                        Triangle {v2, v3, v4}\n                                                                and {v3, v4, v5}.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\nconst kRTSize: number = 56;\nconst kColorFormat = 'rgba8unorm';\nconst kValidPixelColor = new Uint8Array([0x00, 0xff, 0x00, 0xff]); // green\nconst kInvalidPixelColor = new Uint8Array([0x00, 0x00, 0x00, 0x00]); // black\n\nclass Point2D {\n  x: number;\n  y: number;\n  z: number;\n  w: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n    this.z = 0;\n    this.w = 1;\n  }\n\n  toNDC(): Point2D {\n    // NDC coordinate space is y-up, so we negate the y mapping.\n    // To ensure the resulting vertex in NDC will be placed at the center of the pixel, we\n    // must offset by the pixel coordinates or 0.5.\n    return new Point2D((2 * (this.x + 0.5)) / kRTSize - 1, (-2 * (this.y + 0.5)) / kRTSize + 1);\n  }\n\n  static getMidpoint(a: Point2D, b: Point2D) {\n    return new Point2D((a.x + b.x) / 2, (a.y + b.y) / 2);\n  }\n\n  static getCentroid(a: Point2D, b: Point2D, c: Point2D) {\n    return new Point2D((a.x + b.x + c.x) / 3, (a.y + b.y + c.y) / 3);\n  }\n}\n\ninterface TestLocation {\n  location: Point2D;\n  color: Uint8Array;\n}\n\nconst VertexLocations = [\n  new Point2D(8, 24), // v1\n  new Point2D(16, 8), // v2\n  new Point2D(24, 24), // v3\n  new Point2D(32, 8), // v4\n  new Point2D(40, 24), // v5\n  new Point2D(48, 8), // v6\n];\n\nfunction getPointTestLocations(expectedColor: Uint8Array): TestLocation[] {\n  // Test points are always equal to vertex locations.\n  const testLocations: TestLocation[] = [];\n  for (const location of VertexLocations) {\n    testLocations.push({ location, color: expectedColor });\n  }\n  return testLocations;\n}\n\nfunction getLineTestLocations(expectedColor: Uint8Array): TestLocation[] {\n  // Midpoints of 3 line segments\n  return [\n    {\n      // Line {v1, v2}\n      location: Point2D.getMidpoint(VertexLocations[0], VertexLocations[1]),\n      color: expectedColor,\n    },\n    {\n      // Line {v3, v4}\n      location: Point2D.getMidpoint(VertexLocations[2], VertexLocations[3]),\n      color: expectedColor,\n    },\n    {\n      // Line {v5, v6}\n      location: Point2D.getMidpoint(VertexLocations[4], VertexLocations[5]),\n      color: expectedColor,\n    },\n  ];\n}\n\nfunction getPrimitiveRestartLineTestLocations(expectedColor: Uint8Array): TestLocation[] {\n  // Midpoints of 2 line segments\n  return [\n    {\n      // Line {v1, v2}\n      location: Point2D.getMidpoint(VertexLocations[0], VertexLocations[1]),\n      color: expectedColor,\n    },\n    {\n      // Line {v5, v6}\n      location: Point2D.getMidpoint(VertexLocations[4], VertexLocations[5]),\n      color: expectedColor,\n    },\n  ];\n}\n\nfunction getLineStripTestLocations(expectedColor: Uint8Array): TestLocation[] {\n  // Midpoints of 2 line segments\n  return [\n    {\n      // Line {v2, v3}\n      location: Point2D.getMidpoint(VertexLocations[1], VertexLocations[2]),\n      color: expectedColor,\n    },\n    {\n      // Line {v4, v5}\n      location: Point2D.getMidpoint(VertexLocations[3], VertexLocations[4]),\n      color: expectedColor,\n    },\n  ];\n}\n\nfunction getTriangleListTestLocations(expectedColor: Uint8Array): TestLocation[] {\n  // Center of two triangles\n  return [\n    {\n      // Triangle {v1, v2, v3}\n      location: Point2D.getCentroid(VertexLocations[0], VertexLocations[1], VertexLocations[2]),\n      color: expectedColor,\n    },\n    {\n      // Triangle {v4, v5, v6}\n      location: Point2D.getCentroid(VertexLocations[3], VertexLocations[4], VertexLocations[5]),\n      color: expectedColor,\n    },\n  ];\n}\n\nfunction getTriangleStripTestLocations(expectedColor: Uint8Array): TestLocation[] {\n  // Center of two triangles\n  return [\n    {\n      // Triangle {v2, v3, v4}\n      location: Point2D.getCentroid(VertexLocations[1], VertexLocations[2], VertexLocations[3]),\n      color: expectedColor,\n    },\n    {\n      // Triangle {v3, v4, v5}\n      location: Point2D.getCentroid(VertexLocations[2], VertexLocations[3], VertexLocations[4]),\n      color: expectedColor,\n    },\n  ];\n}\n\nfunction getDefaultTestLocations({\n  topology,\n  primitiveRestart = false,\n  invalidateLastInList = false,\n}: {\n  topology: GPUPrimitiveTopology;\n  primitiveRestart?: boolean;\n  invalidateLastInList?: boolean;\n}) {\n  function maybeInvalidateLast(locations: TestLocation[]) {\n    if (!invalidateLastInList) return locations;\n\n    return locations.map((tl, i) => {\n      if (i === locations.length - 1) {\n        return {\n          location: tl.location,\n          color: kInvalidPixelColor,\n        };\n      } else {\n        return tl;\n      }\n    });\n  }\n\n  let testLocations: TestLocation[];\n  switch (topology) {\n    case 'point-list':\n      testLocations = [\n        ...getPointTestLocations(kValidPixelColor),\n        ...getLineStripTestLocations(kInvalidPixelColor),\n        ...getTriangleListTestLocations(kInvalidPixelColor),\n        ...getTriangleStripTestLocations(kInvalidPixelColor),\n      ];\n      break;\n    case 'line-list':\n      testLocations = [\n        ...maybeInvalidateLast(getLineTestLocations(kValidPixelColor)),\n        ...getLineStripTestLocations(kInvalidPixelColor),\n        ...getTriangleListTestLocations(kInvalidPixelColor),\n        ...getTriangleStripTestLocations(kInvalidPixelColor),\n      ];\n      break;\n    case 'line-strip':\n      testLocations = [\n        ...(primitiveRestart\n          ? getPrimitiveRestartLineTestLocations(kValidPixelColor)\n          : getLineTestLocations(kValidPixelColor)),\n        ...getLineStripTestLocations(kValidPixelColor),\n        ...getTriangleListTestLocations(kInvalidPixelColor),\n        ...getTriangleStripTestLocations(kInvalidPixelColor),\n      ];\n      break;\n    case 'triangle-list':\n      testLocations = [\n        ...maybeInvalidateLast(getTriangleListTestLocations(kValidPixelColor)),\n        ...getTriangleStripTestLocations(kInvalidPixelColor),\n      ];\n      break;\n    case 'triangle-strip':\n      testLocations = [\n        ...getTriangleListTestLocations(kValidPixelColor),\n        ...getTriangleStripTestLocations(primitiveRestart ? kInvalidPixelColor : kValidPixelColor),\n      ];\n      break;\n  }\n  return testLocations;\n}\n\nfunction generateVertexBuffer(vertexLocations: Point2D[]): Float32Array {\n  const vertexCoords = new Float32Array(vertexLocations.length * 4);\n  for (let i = 0; i < vertexLocations.length; i++) {\n    const point = vertexLocations[i].toNDC();\n    vertexCoords[i * 4 + 0] = point.x;\n    vertexCoords[i * 4 + 1] = point.y;\n    vertexCoords[i * 4 + 2] = point.z;\n    vertexCoords[i * 4 + 3] = point.w;\n  }\n  return vertexCoords;\n}\n\nconst kDefaultDrawCount = 6;\nclass PrimitiveTopologyTest extends GPUTest {\n  makeAttachmentTexture(): GPUTexture {\n    return this.device.createTexture({\n      format: kColorFormat,\n      size: { width: kRTSize, height: kRTSize, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n    });\n  }\n\n  run({\n    topology,\n    indirect,\n    testLocations,\n    primitiveRestart = false,\n    drawCount = kDefaultDrawCount,\n  }: {\n    topology: GPUPrimitiveTopology;\n    indirect: boolean;\n    testLocations: TestLocation[];\n    primitiveRestart?: boolean;\n    drawCount?: number;\n  }): void {\n    const colorAttachment = this.makeAttachmentTexture();\n\n    // Color load operator will clear color attachment to zero.\n    const encoder = this.device.createCommandEncoder();\n    const renderPass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: colorAttachment.createView(),\n          loadValue: { r: 0.0, g: 0.0, b: 0.0, a: 0.0 },\n          storeOp: 'store',\n        },\n      ],\n    });\n\n    let stripIndexFormat = undefined;\n    if (topology === 'triangle-strip' || topology === 'line-strip') {\n      stripIndexFormat = 'uint32' as const;\n    }\n\n    // Draw a primitive using 6 vertices based on the type.\n    // Pixels are generated based on vertex position.\n    // If point, 1 pixel is generated at each vertex location.\n    // Otherwise, >1 pixels could be generated.\n    // Output color is solid green.\n    renderPass.setPipeline(\n      this.device.createRenderPipeline({\n        vertex: {\n          module: this.device.createShaderModule({\n            code: `\n              @stage(vertex) fn main(\n                @location(0) pos : vec4<f32>\n                ) -> @builtin(position) vec4<f32> {\n                return pos;\n              }`,\n          }),\n          entryPoint: 'main',\n          buffers: [\n            {\n              arrayStride: 4 * Float32Array.BYTES_PER_ELEMENT,\n              attributes: [\n                {\n                  format: 'float32x4',\n                  offset: 0,\n                  shaderLocation: 0,\n                },\n              ],\n            },\n          ],\n        },\n        fragment: {\n          module: this.device.createShaderModule({\n            code: `\n              @stage(fragment) fn main() -> @location(0) vec4<f32> {\n                return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n              }`,\n          }),\n          entryPoint: 'main',\n          targets: [{ format: kColorFormat }],\n        },\n        primitive: {\n          topology,\n          stripIndexFormat,\n        },\n      })\n    );\n\n    // Create vertices for the primitive in a vertex buffer and bind it.\n    const vertexCoords = generateVertexBuffer(VertexLocations);\n    const vertexBuffer = this.makeBufferWithContents(vertexCoords, GPUBufferUsage.VERTEX);\n    renderPass.setVertexBuffer(0, vertexBuffer);\n\n    // Restart the strip between [v3, <restart>, v4].\n    if (primitiveRestart) {\n      const indexBuffer = this.makeBufferWithContents(\n        new Uint32Array([0, 1, 2, -1, 3, 4, 5]),\n        GPUBufferUsage.INDEX\n      );\n      renderPass.setIndexBuffer(indexBuffer, 'uint32');\n\n      if (indirect) {\n        renderPass.drawIndexedIndirect(\n          this.makeBufferWithContents(\n            new Uint32Array([drawCount + 1, 1, 0, 0, 0]),\n            GPUBufferUsage.INDIRECT\n          ),\n          0\n        );\n      } else {\n        renderPass.drawIndexed(drawCount + 1); // extra index for restart\n      }\n    } else {\n      if (indirect) {\n        renderPass.drawIndirect(\n          this.makeBufferWithContents(\n            new Uint32Array([drawCount, 1, 0, 0]),\n            GPUBufferUsage.INDIRECT\n          ),\n          0\n        );\n      } else {\n        renderPass.draw(drawCount);\n      }\n    }\n\n    renderPass.endPass();\n\n    this.device.queue.submit([encoder.finish()]);\n\n    for (const testPixel of testLocations) {\n      this.expectSinglePixelIn2DTexture(\n        colorAttachment,\n        kColorFormat,\n        { x: testPixel.location.x, y: testPixel.location.y },\n        { exp: testPixel.color }\n      );\n    }\n  }\n}\n\nexport const g = makeTestGroup(PrimitiveTopologyTest);\n\nconst topologies: GPUPrimitiveTopology[] = [\n  'point-list',\n  'line-list',\n  'line-strip',\n  'triangle-list',\n  'triangle-strip',\n];\n\ng.test('basic')\n  .desc(\n    `Compute test locations for valid and invalid pixels for each topology.\n  If the primitive covers the pixel, the color value will be |kValidPixelColor|.\n  Otherwise, a non-covered pixel will be |kInvalidPixelColor|.\n\n  Params:\n    - topology= {...all topologies}\n    - indirect= {true, false}\n    - primitiveRestart= { true, false } - always false for non-strip topologies\n  `\n  )\n  .params(u =>\n    u //\n      .combine('topology', topologies)\n      .combine('indirect', [false, true])\n      .combine('primitiveRestart', [false, true])\n      .unless(\n        p => p.primitiveRestart && p.topology !== 'line-strip' && p.topology !== 'triangle-strip'\n      )\n  )\n  .fn(t => {\n    t.run({\n      ...t.params,\n      testLocations: getDefaultTestLocations(t.params),\n    });\n  });\n\ng.test('unaligned_vertex_count')\n  .desc(\n    `Test that drawing with a number of vertices that's not a multiple of the vertices a given primitive list topology is not an error. The last primitive is not drawn.\n\n    Params:\n    - topology= {line-list, triangle-list}\n    - indirect= {true, false}\n    - drawCount - number of vertices to draw. A value smaller than the test's default of ${kDefaultDrawCount}.\n                   One smaller for line-list. One or two smaller for triangle-list.\n    `\n  )\n  .params(u =>\n    u //\n      .combine('topology', ['line-list', 'triangle-list'] as const)\n      .combine('indirect', [false, true])\n      .expand('drawCount', function* (p) {\n        switch (p.topology) {\n          case 'line-list':\n            yield kDefaultDrawCount - 1;\n            break;\n          case 'triangle-list':\n            yield kDefaultDrawCount - 1;\n            yield kDefaultDrawCount - 2;\n            break;\n        }\n      })\n  )\n  .fn(t => {\n    const testLocations = getDefaultTestLocations({ ...t.params, invalidateLastInList: true });\n    t.run({\n      ...t.params,\n      testLocations,\n    });\n  });\n"],"file":"primitive_topology.spec.js"}