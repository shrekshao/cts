{"version":3,"sources":["../../../../../src/webgpu/api/operation/render_pipeline/pipeline_output_targets.spec.ts"],"names":["description","makeTestGroup","unreachable","kRenderableColorTextureFormats","kTextureFormatInfo","GPUTest","kTexelRepresentationInfo","F","getFragmentShaderCode","output","sampleType","componentCount","fragColorType","suffix","fractionDigits","v","map","n","toFixed","outputType","result","g","test","desc","params","u","combine","beginSubcases","filter","x","format","componentOrder","length","fn","t","info","selectDeviceOrSkipTestCase","feature","renderTarget","device","createTexture","size","width","height","depthOrArrayLayers","usage","GPUTextureUsage","COPY_SRC","RENDER_ATTACHMENT","pipeline","createRenderPipeline","vertex","module","createShaderModule","code","entryPoint","fragment","targets","primitive","topology","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","view","createView","storeOp","loadValue","r","b","a","setPipeline","draw","endPass","queue","submit","finish","expectSingleColor","exp","R","G","B","A","combineWithParams","_result","colorSrcFactor","colorDstFactor","alphaSrcFactor","alphaDstFactor","blend","color","srcFactor","dstFactor","operation","alpha"],"mappings":"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","sourcesContent":["export const description = `\n- Test pipeline outputs with different color target formats.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { unreachable } from '../../../../common/util/util.js';\nimport { kRenderableColorTextureFormats, kTextureFormatInfo } from '../../../capability_info.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { kTexelRepresentationInfo } from '../../../util/texture/texel_data.js';\n\nclass F extends GPUTest {\n  getFragmentShaderCode(\n    output: readonly number[],\n    sampleType: GPUTextureSampleType,\n    componentCount: number\n  ): string {\n    let fragColorType;\n    let suffix;\n    let fractionDigits = 0;\n    switch (sampleType) {\n      case 'sint':\n        fragColorType = 'i32';\n        suffix = '';\n        break;\n      case 'uint':\n        fragColorType = 'u32';\n        suffix = 'u';\n        break;\n      case 'float':\n        fragColorType = 'f32';\n        suffix = '';\n        fractionDigits = 4;\n        break;\n      default:\n        unreachable();\n    }\n\n    const v = output.map(n => n.toFixed(fractionDigits));\n\n    let outputType;\n    let result;\n    switch (componentCount) {\n      case 1:\n        outputType = fragColorType;\n        result = `${v[0]}${suffix}`;\n        break;\n      case 2:\n        outputType = `vec2<${fragColorType}>`;\n        result = `${outputType}(${v[0]}${suffix}, ${v[1]}${suffix})`;\n        break;\n      case 3:\n        outputType = `vec3<${fragColorType}>`;\n        result = `${outputType}(${v[0]}${suffix}, ${v[1]}${suffix}, ${v[2]}${suffix})`;\n        break;\n      case 4:\n        outputType = `vec4<${fragColorType}>`;\n        result = `${outputType}(${v[0]}${suffix}, ${v[1]}${suffix}, ${v[2]}${suffix}, ${v[3]}${suffix})`;\n        break;\n      default:\n        unreachable();\n    }\n\n    return `\n    [[stage(fragment)]] fn main() -> [[location(0)]] ${outputType} {\n        return ${result};\n    }`;\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('color,component_count')\n  .desc(\n    `Test that extra components of the output (e.g. f32, vec2<f32>, vec3<f32>, vec4<f32>) are discarded.`\n  )\n  .params(u =>\n    u\n      .combine('format', kRenderableColorTextureFormats)\n      .beginSubcases()\n      .combine('componentCount', [1, 2, 3, 4])\n      .filter(x => x.componentCount >= kTexelRepresentationInfo[x.format].componentOrder.length)\n  )\n  .fn(async t => {\n    const { format, componentCount } = t.params;\n    const info = kTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    // expected RGBA values\n    // extra channels are discarded\n    const result = [0, 1, 0, 1];\n\n    const renderTarget = t.device.createTexture({\n      format,\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const pipeline = t.device.createRenderPipeline({\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n            [[stage(vertex)]] fn main(\n              [[builtin(vertex_index)]] VertexIndex : u32\n              ) -> [[builtin(position)]] vec4<f32> {\n                var pos : array<vec2<f32>, 3> = array<vec2<f32>, 3>(\n                    vec2<f32>(-1.0, -3.0),\n                    vec2<f32>(3.0, 1.0),\n                    vec2<f32>(-1.0, 1.0));\n                return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n              }\n              `,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: t.getFragmentShaderCode(result, info.sampleType, componentCount),\n        }),\n        entryPoint: 'main',\n        targets: [{ format }],\n      },\n      primitive: { topology: 'triangle-list' },\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: renderTarget.createView(),\n          storeOp: 'store',\n          loadValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n        },\n      ],\n    });\n    pass.setPipeline(pipeline);\n    pass.draw(3);\n    pass.endPass();\n    t.device.queue.submit([encoder.finish()]);\n\n    t.expectSingleColor(renderTarget, format, {\n      size: [1, 1, 1],\n      exp: { R: result[0], G: result[1], B: result[2], A: result[3] },\n    });\n  });\n\ng.test('color,component_count,blend')\n  .desc(\n    `Test that blending behaves correctly when:\n- fragment output has no alpha, but the src alpha is not used for the blend operation indicated by blend factors\n- attachment format has no alpha, and the dst alpha should be assumed as 1\n\nThe attachment has a load value of [1, 0, 0, 1]\n`\n  )\n  .params(u =>\n    u\n      .combine('format', ['r8unorm', 'rg8unorm', 'rgba8unorm', 'bgra8unorm'] as const)\n      .beginSubcases()\n      // _result is expected values in the color attachment (extra channels are discarded)\n      // output is the fragment shader output vector\n      // 0.498 -> 0x7f, 0.502 -> 0x80\n      .combineWithParams([\n        // fragment output has no alpha\n        {\n          _result: [0, 0, 0, 0],\n          output: [0],\n          colorSrcFactor: 'one',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'zero',\n        },\n        {\n          _result: [0, 0, 0, 0],\n          output: [0],\n          colorSrcFactor: 'dst-alpha',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'zero',\n        },\n        {\n          _result: [1, 0, 0, 0],\n          output: [0],\n          colorSrcFactor: 'one-minus-dst-alpha',\n          colorDstFactor: 'dst-alpha',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'one',\n        },\n        {\n          _result: [0.498, 0, 0, 0],\n          output: [0.498],\n          colorSrcFactor: 'dst-alpha',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'one',\n        },\n        {\n          _result: [0, 1, 0, 0],\n          output: [0, 1],\n          colorSrcFactor: 'one',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'zero',\n        },\n        {\n          _result: [0, 1, 0, 0],\n          output: [0, 1],\n          colorSrcFactor: 'dst-alpha',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'zero',\n        },\n        {\n          _result: [1, 0, 0, 0],\n          output: [0, 1],\n          colorSrcFactor: 'one-minus-dst-alpha',\n          colorDstFactor: 'dst-alpha',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'one',\n        },\n        {\n          _result: [0, 1, 0, 0],\n          output: [0, 1, 0],\n          colorSrcFactor: 'one',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'zero',\n        },\n        {\n          _result: [0, 1, 0, 0],\n          output: [0, 1, 0],\n          colorSrcFactor: 'dst-alpha',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'zero',\n        },\n        {\n          _result: [1, 0, 0, 0],\n          output: [0, 1, 0],\n          colorSrcFactor: 'one-minus-dst-alpha',\n          colorDstFactor: 'dst-alpha',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'one',\n        },\n        // fragment output has alpha\n        {\n          _result: [0.502, 1, 0, 0.498],\n          output: [0, 1, 0, 0.498],\n          colorSrcFactor: 'one',\n          colorDstFactor: 'one-minus-src-alpha',\n          alphaSrcFactor: 'one',\n          alphaDstFactor: 'zero',\n        },\n        {\n          _result: [0.502, 0.498, 0, 0.498],\n          output: [0, 1, 0, 0.498],\n          colorSrcFactor: 'src-alpha',\n          colorDstFactor: 'one-minus-src-alpha',\n          alphaSrcFactor: 'one',\n          alphaDstFactor: 'zero',\n        },\n        {\n          _result: [0, 1, 0, 0.498],\n          output: [0, 1, 0, 0.498],\n          colorSrcFactor: 'dst-alpha',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'one',\n          alphaDstFactor: 'zero',\n        },\n        {\n          _result: [0, 1, 0, 0.498],\n          output: [0, 1, 0, 0.498],\n          colorSrcFactor: 'dst-alpha',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'src',\n        },\n        {\n          _result: [1, 0, 0, 1],\n          output: [0, 1, 0, 0.498],\n          colorSrcFactor: 'one-minus-dst-alpha',\n          colorDstFactor: 'dst-alpha',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'dst-alpha',\n        },\n      ] as const)\n      .filter(x => x.output.length >= kTexelRepresentationInfo[x.format].componentOrder.length)\n  )\n  .fn(async t => {\n    const {\n      format,\n      _result,\n      output,\n      colorSrcFactor,\n      colorDstFactor,\n      alphaSrcFactor,\n      alphaDstFactor,\n    } = t.params;\n    const componentCount = output.length;\n    const info = kTextureFormatInfo[format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n\n    const renderTarget = t.device.createTexture({\n      format,\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const pipeline = t.device.createRenderPipeline({\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\n            [[stage(vertex)]] fn main(\n              [[builtin(vertex_index)]] VertexIndex : u32\n              ) -> [[builtin(position)]] vec4<f32> {\n                var pos : array<vec2<f32>, 3> = array<vec2<f32>, 3>(\n                    vec2<f32>(-1.0, -3.0),\n                    vec2<f32>(3.0, 1.0),\n                    vec2<f32>(-1.0, 1.0));\n                return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n              }\n              `,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: t.getFragmentShaderCode(output, info.sampleType, componentCount),\n        }),\n        entryPoint: 'main',\n        targets: [\n          {\n            format,\n            blend: {\n              color: {\n                srcFactor: colorSrcFactor,\n                dstFactor: colorDstFactor,\n                operation: 'add',\n              },\n              alpha: {\n                srcFactor: alphaSrcFactor,\n                dstFactor: alphaDstFactor,\n                operation: 'add',\n              },\n            },\n          },\n        ],\n      },\n      primitive: { topology: 'triangle-list' },\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: renderTarget.createView(),\n          storeOp: 'store',\n          loadValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n        },\n      ],\n    });\n    pass.setPipeline(pipeline);\n    pass.draw(3);\n    pass.endPass();\n    t.device.queue.submit([encoder.finish()]);\n\n    t.expectSingleColor(renderTarget, format, {\n      size: [1, 1, 1],\n      exp: { R: _result[0], G: _result[1], B: _result[2], A: _result[3] },\n    });\n  });\n"],"file":"pipeline_output_targets.spec.js"}