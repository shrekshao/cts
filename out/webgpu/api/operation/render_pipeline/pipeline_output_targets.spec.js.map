{"version":3,"sources":["../../../../../src/webgpu/api/operation/render_pipeline/pipeline_output_targets.spec.ts"],"names":["description","makeTestGroup","range","unreachable","kRenderableColorTextureFormats","kTextureFormatInfo","GPUTest","kTexelRepresentationInfo","TexelView","textureContentIsOKByT2B","kVertexShader","F","getFragmentShaderCode","outputs","resultStrings","outputStructString","i","length","o","fragColorType","suffix","fractionDigits","sampleType","outputType","v","values","map","n","toFixed","componentCount","push","join","g","attachmentsIntWriteValues","R","G","B","A","attachmentsFloatWriteValues","test","desc","params","u","combine","beginSubcases","expand","p","attachmentCount","beforeAllSubcases","t","info","format","selectDeviceOrSkipTestCase","feature","fn","emptyAttachmentId","componentOrder","writeValues","renderTargets","device","createTexture","size","width","height","depthOrArrayLayers","usage","GPUTextureUsage","COPY_SRC","RENDER_ATTACHMENT","pipeline","createRenderPipeline","vertex","module","createShaderModule","code","entryPoint","fragment","targets","primitive","topology","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","view","createView","storeOp","clearValue","r","b","a","loadOp","setPipeline","draw","end","queue","submit","finish","promises","undefined","texture","expTexelView","fromTexelsAsColors","coords","maxIntDiff","maxDiffULPsForNormFormat","maxDiffULPsForFloatFormat","results","Promise","all","expectOK","filter","x","renderTarget","expectSingleColor","exp","combineWithParams","_result","output","colorSrcFactor","colorDstFactor","alphaSrcFactor","alphaDstFactor","blend","color","srcFactor","dstFactor","operation","alpha"],"mappings":"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","sourcesContent":["export const description = `\n- Test pipeline outputs with different color attachment number, formats, component counts, etc.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { range, unreachable } from '../../../../common/util/util.js';\nimport { kRenderableColorTextureFormats, kTextureFormatInfo } from '../../../capability_info.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { kTexelRepresentationInfo } from '../../../util/texture/texel_data.js';\nimport { TexelView } from '../../../util/texture/texel_view.js';\nimport { textureContentIsOKByT2B } from '../../../util/texture/texture_ok.js';\n\nconst kVertexShader = `\n@stage(vertex) fn main(\n@builtin(vertex_index) VertexIndex : u32\n) -> @builtin(position) vec4<f32> {\n  var pos : array<vec2<f32>, 3> = array<vec2<f32>, 3>(\n      vec2<f32>(-1.0, -3.0),\n      vec2<f32>(3.0, 1.0),\n      vec2<f32>(-1.0, 1.0));\n  return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n}\n`;\n\nclass F extends GPUTest {\n  // Build fragment shader based on output value and types\n  // e.g. write to color target 0 a vec4<f32>(1.0, 0.0, 1.0, 1.0) and color target 2 a vec2<u32>(1, 2)\n  // outputs: [\n  //   {\n  //     values: [1, 0, 1, 1],,\n  //     sampleType: 'float',\n  //     componentCount: 4,\n  //   },\n  //   null,\n  //   {\n  //     values: [1, 2],\n  //     sampleType: 'uint',\n  //     componentCount: 2,\n  //   },\n  // ]\n  //\n  // return:\n  // struct Outputs {\n  //     @location(0) o1 : vec4<f32>;\n  //     @location(2) o3 : vec2<u32>;\n  // }\n  // @stage(fragment) fn main() -> Outputs {\n  //     return Outputs(vec4<f32>(1.0, 0.0, 1.0, 1.0), vec4<u32>(1, 2));\n  // }\n  getFragmentShaderCode(\n    outputs: ({\n      values: readonly number[];\n      sampleType: GPUTextureSampleType;\n      componentCount: number;\n    } | null)[]\n  ): string {\n    const resultStrings = [] as string[];\n    let outputStructString = '';\n\n    for (let i = 0; i < outputs.length; i++) {\n      const o = outputs[i];\n      if (o === null) {\n        continue;\n      }\n\n      let fragColorType;\n      let suffix;\n      let fractionDigits = 0;\n      switch (o.sampleType) {\n        case 'sint':\n          fragColorType = 'i32';\n          suffix = '';\n          break;\n        case 'uint':\n          fragColorType = 'u32';\n          suffix = 'u';\n          break;\n        case 'float':\n        case 'unfilterable-float':\n          fragColorType = 'f32';\n          suffix = '';\n          fractionDigits = 4;\n          break;\n        default:\n          unreachable();\n      }\n\n      let outputType;\n      const v = o.values.map(n => n.toFixed(fractionDigits));\n      switch (o.componentCount) {\n        case 1:\n          outputType = fragColorType;\n          resultStrings.push(`${v[0]}${suffix}`);\n          break;\n        case 2:\n          outputType = `vec2<${fragColorType}>`;\n          resultStrings.push(`${outputType}(${v[0]}${suffix}, ${v[1]}${suffix})`);\n          break;\n        case 3:\n          outputType = `vec3<${fragColorType}>`;\n          resultStrings.push(`${outputType}(${v[0]}${suffix}, ${v[1]}${suffix}, ${v[2]}${suffix})`);\n          break;\n        case 4:\n          outputType = `vec4<${fragColorType}>`;\n          resultStrings.push(\n            `${outputType}(${v[0]}${suffix}, ${v[1]}${suffix}, ${v[2]}${suffix}, ${v[3]}${suffix})`\n          );\n          break;\n        default:\n          unreachable();\n      }\n\n      outputStructString += `@location(${i}) o${i} : ${outputType},\\n`;\n    }\n\n    return `\n    struct Outputs {\n      ${outputStructString}\n    }\n\n    @stage(fragment) fn main() -> Outputs {\n        return Outputs(${resultStrings.join(',')});\n    }`;\n  }\n}\n\nexport const g = makeTestGroup(F);\n\n// Values to write into each attachment\n// We make values different for each attachment index and each channel\n// to make sure they didn't get mixed up\nconst attachmentsIntWriteValues = [\n  { R: 1, G: 2, B: 3, A: 4 },\n  { R: 5, G: 6, B: 7, A: 8 },\n  { R: 9, G: 10, B: 11, A: 12 },\n  { R: 13, G: 14, B: 15, A: 16 },\n];\nconst attachmentsFloatWriteValues = [\n  { R: 0.12, G: 0.34, B: 0.56, A: 0 },\n  { R: 0.78, G: 0.9, B: 0.19, A: 1 },\n  { R: 0.28, G: 0.37, B: 0.46, A: 0.3 },\n  { R: 0.55, G: 0.64, B: 0.73, A: 1 },\n];\n\ng.test('color,attachments')\n  .desc(`Test that pipeline with sparse color attachments write values correctly.`)\n  .params(u =>\n    u\n      .combine('format', kRenderableColorTextureFormats)\n      .beginSubcases()\n      .combine('attachmentCount', [2, 3, 4])\n      .expand('emptyAttachmentId', p => range(p.attachmentCount, i => i))\n  )\n  .beforeAllSubcases(async t => {\n    const info = kTextureFormatInfo[t.params.format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(async t => {\n    const { format, attachmentCount, emptyAttachmentId } = t.params;\n    const componentCount = kTexelRepresentationInfo[format].componentOrder.length;\n    const info = kTextureFormatInfo[format];\n\n    const writeValues =\n      info.sampleType === 'sint' || info.sampleType === 'uint'\n        ? attachmentsIntWriteValues\n        : attachmentsFloatWriteValues;\n\n    const renderTargets = range(attachmentCount, () =>\n      t.device.createTexture({\n        format,\n        size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n        usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n      })\n    );\n    const pipeline = t.device.createRenderPipeline({\n      vertex: {\n        module: t.device.createShaderModule({\n          code: kVertexShader,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: t.getFragmentShaderCode(\n            range(attachmentCount, i =>\n              i === emptyAttachmentId\n                ? null\n                : {\n                    values: [\n                      writeValues[i].R,\n                      writeValues[i].G,\n                      writeValues[i].B,\n                      writeValues[i].A,\n                    ],\n                    sampleType: info.sampleType,\n                    componentCount,\n                  }\n            )\n          ),\n        }),\n        entryPoint: 'main',\n        targets: range(attachmentCount, i => (i === emptyAttachmentId ? null : { format })),\n      },\n      primitive: { topology: 'triangle-list' },\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: range(attachmentCount, i =>\n        i === emptyAttachmentId\n          ? null\n          : {\n              view: renderTargets[i].createView(),\n              storeOp: 'store',\n              clearValue: { r: 0.5, g: 0.5, b: 0.5, a: 0.5 },\n              loadOp: 'clear',\n            }\n      ),\n    });\n    pass.setPipeline(pipeline);\n    pass.draw(3);\n    pass.end();\n    t.device.queue.submit([encoder.finish()]);\n\n    const promises = range(attachmentCount, i => {\n      if (i === emptyAttachmentId) {\n        return undefined;\n      }\n      return textureContentIsOKByT2B(\n        t,\n        { texture: renderTargets[i] },\n        [1, 1, 1],\n        {\n          expTexelView: TexelView.fromTexelsAsColors(format, coords => writeValues[i]),\n        },\n        {\n          maxIntDiff: 0,\n          maxDiffULPsForNormFormat: 1,\n          maxDiffULPsForFloatFormat: 1,\n        }\n      );\n    });\n    const results = await Promise.all(promises);\n    for (let i = 0; i < results.length; i++) {\n      t.expectOK(results[i]);\n    }\n  });\n\ng.test('color,component_count')\n  .desc(\n    `Test that extra components of the output (e.g. f32, vec2<f32>, vec3<f32>, vec4<f32>) are discarded.`\n  )\n  .params(u =>\n    u\n      .combine('format', kRenderableColorTextureFormats)\n      .beginSubcases()\n      .combine('componentCount', [1, 2, 3, 4])\n      .filter(x => x.componentCount >= kTexelRepresentationInfo[x.format].componentOrder.length)\n  )\n  .beforeAllSubcases(async t => {\n    const info = kTextureFormatInfo[t.params.format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(async t => {\n    const { format, componentCount } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    // expected RGBA values\n    // extra channels are discarded\n    const values = [0, 1, 0, 1];\n\n    const renderTarget = t.device.createTexture({\n      format,\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const pipeline = t.device.createRenderPipeline({\n      vertex: {\n        module: t.device.createShaderModule({\n          code: kVertexShader,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: t.getFragmentShaderCode([\n            {\n              values,\n              sampleType: info.sampleType,\n              componentCount,\n            },\n          ]),\n        }),\n        entryPoint: 'main',\n        targets: [{ format }],\n      },\n      primitive: { topology: 'triangle-list' },\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: renderTarget.createView(),\n          storeOp: 'store',\n          clearValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n          loadOp: 'clear',\n        },\n      ],\n    });\n    pass.setPipeline(pipeline);\n    pass.draw(3);\n    pass.end();\n    t.device.queue.submit([encoder.finish()]);\n\n    t.expectSingleColor(renderTarget, format, {\n      size: [1, 1, 1],\n      exp: { R: values[0], G: values[1], B: values[2], A: values[3] },\n    });\n  });\n\ng.test('color,component_count,blend')\n  .desc(\n    `Test that blending behaves correctly when:\n- fragment output has no alpha, but the src alpha is not used for the blend operation indicated by blend factors\n- attachment format has no alpha, and the dst alpha should be assumed as 1\n\nThe attachment has a load value of [1, 0, 0, 1]\n`\n  )\n  .params(u =>\n    u\n      .combine('format', ['r8unorm', 'rg8unorm', 'rgba8unorm', 'bgra8unorm'] as const)\n      .beginSubcases()\n      // _result is expected values in the color attachment (extra channels are discarded)\n      // output is the fragment shader output vector\n      // 0.498 -> 0x7f, 0.502 -> 0x80\n      .combineWithParams([\n        // fragment output has no alpha\n        {\n          _result: [0, 0, 0, 0],\n          output: [0],\n          colorSrcFactor: 'one',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'zero',\n        },\n        {\n          _result: [0, 0, 0, 0],\n          output: [0],\n          colorSrcFactor: 'dst-alpha',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'zero',\n        },\n        {\n          _result: [1, 0, 0, 0],\n          output: [0],\n          colorSrcFactor: 'one-minus-dst-alpha',\n          colorDstFactor: 'dst-alpha',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'one',\n        },\n        {\n          _result: [0.498, 0, 0, 0],\n          output: [0.498],\n          colorSrcFactor: 'dst-alpha',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'one',\n        },\n        {\n          _result: [0, 1, 0, 0],\n          output: [0, 1],\n          colorSrcFactor: 'one',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'zero',\n        },\n        {\n          _result: [0, 1, 0, 0],\n          output: [0, 1],\n          colorSrcFactor: 'dst-alpha',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'zero',\n        },\n        {\n          _result: [1, 0, 0, 0],\n          output: [0, 1],\n          colorSrcFactor: 'one-minus-dst-alpha',\n          colorDstFactor: 'dst-alpha',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'one',\n        },\n        {\n          _result: [0, 1, 0, 0],\n          output: [0, 1, 0],\n          colorSrcFactor: 'one',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'zero',\n        },\n        {\n          _result: [0, 1, 0, 0],\n          output: [0, 1, 0],\n          colorSrcFactor: 'dst-alpha',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'zero',\n        },\n        {\n          _result: [1, 0, 0, 0],\n          output: [0, 1, 0],\n          colorSrcFactor: 'one-minus-dst-alpha',\n          colorDstFactor: 'dst-alpha',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'one',\n        },\n        // fragment output has alpha\n        {\n          _result: [0.502, 1, 0, 0.498],\n          output: [0, 1, 0, 0.498],\n          colorSrcFactor: 'one',\n          colorDstFactor: 'one-minus-src-alpha',\n          alphaSrcFactor: 'one',\n          alphaDstFactor: 'zero',\n        },\n        {\n          _result: [0.502, 0.498, 0, 0.498],\n          output: [0, 1, 0, 0.498],\n          colorSrcFactor: 'src-alpha',\n          colorDstFactor: 'one-minus-src-alpha',\n          alphaSrcFactor: 'one',\n          alphaDstFactor: 'zero',\n        },\n        {\n          _result: [0, 1, 0, 0.498],\n          output: [0, 1, 0, 0.498],\n          colorSrcFactor: 'dst-alpha',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'one',\n          alphaDstFactor: 'zero',\n        },\n        {\n          _result: [0, 1, 0, 0.498],\n          output: [0, 1, 0, 0.498],\n          colorSrcFactor: 'dst-alpha',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'src',\n        },\n        {\n          _result: [1, 0, 0, 1],\n          output: [0, 1, 0, 0.498],\n          colorSrcFactor: 'one-minus-dst-alpha',\n          colorDstFactor: 'dst-alpha',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'dst-alpha',\n        },\n      ] as const)\n      .filter(x => x.output.length >= kTexelRepresentationInfo[x.format].componentOrder.length)\n  )\n  .beforeAllSubcases(async t => {\n    const info = kTextureFormatInfo[t.params.format];\n    await t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(async t => {\n    const {\n      format,\n      _result,\n      output,\n      colorSrcFactor,\n      colorDstFactor,\n      alphaSrcFactor,\n      alphaDstFactor,\n    } = t.params;\n    const componentCount = output.length;\n    const info = kTextureFormatInfo[format];\n\n    const renderTarget = t.device.createTexture({\n      format,\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const pipeline = t.device.createRenderPipeline({\n      vertex: {\n        module: t.device.createShaderModule({\n          code: kVertexShader,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: t.getFragmentShaderCode([\n            {\n              values: output,\n              sampleType: info.sampleType,\n              componentCount,\n            },\n          ]),\n        }),\n        entryPoint: 'main',\n        targets: [\n          {\n            format,\n            blend: {\n              color: {\n                srcFactor: colorSrcFactor,\n                dstFactor: colorDstFactor,\n                operation: 'add',\n              },\n              alpha: {\n                srcFactor: alphaSrcFactor,\n                dstFactor: alphaDstFactor,\n                operation: 'add',\n              },\n            },\n          },\n        ],\n      },\n      primitive: { topology: 'triangle-list' },\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: renderTarget.createView(),\n          storeOp: 'store',\n          clearValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n          loadOp: 'clear',\n        },\n      ],\n    });\n    pass.setPipeline(pipeline);\n    pass.draw(3);\n    pass.end();\n    t.device.queue.submit([encoder.finish()]);\n\n    t.expectSingleColor(renderTarget, format, {\n      size: [1, 1, 1],\n      exp: { R: _result[0], G: _result[1], B: _result[2], A: _result[3] },\n    });\n  });\n"],"file":"pipeline_output_targets.spec.js"}