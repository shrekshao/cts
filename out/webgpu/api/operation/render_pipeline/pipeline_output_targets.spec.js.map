{"version":3,"sources":["../../../../../src/webgpu/api/operation/render_pipeline/pipeline_output_targets.spec.ts"],"names":["description","makeTestGroup","range","kRenderableColorTextureFormats","kTextureFormatInfo","GPUTest","getFragmentShaderCodeWithOutput","getPlainTypeInfo","kTexelRepresentationInfo","TexelView","textureContentIsOKByT2B","kVertexShader","g","attachmentsIntWriteValues","R","G","B","A","attachmentsFloatWriteValues","test","desc","params","u","combine","beginSubcases","expand","p","attachmentCount","i","beforeAllSubcases","t","info","format","selectDeviceOrSkipTestCase","feature","fn","emptyAttachmentId","componentCount","componentOrder","length","writeValues","sampleType","renderTargets","device","createTexture","size","width","height","depthOrArrayLayers","usage","GPUTextureUsage","COPY_SRC","RENDER_ATTACHMENT","pipeline","createRenderPipeline","layout","vertex","module","createShaderModule","code","entryPoint","fragment","values","plainType","targets","primitive","topology","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","view","createView","storeOp","clearValue","r","b","a","loadOp","setPipeline","draw","end","queue","submit","finish","promises","undefined","texture","expTexelView","fromTexelsAsColors","coords","maxIntDiff","maxDiffULPsForNormFormat","maxDiffULPsForFloatFormat","eventualExpectOK","Promise","all","filter","x","renderTarget","expectSingleColor","exp","combineWithParams","_result","output","colorSrcFactor","colorDstFactor","alphaSrcFactor","alphaDstFactor","blend","color","srcFactor","dstFactor","operation","alpha"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAFO,CAIP,SAASC,aAAT,QAA8B,4CAA9B;AACA,SAASC,KAAT,QAAsB,iCAAtB;AACA,SAASC,8BAAT,EAAyCC,kBAAzC,QAAmE,6BAAnE;AACA,SAASC,OAAT,QAAwB,sBAAxB;AACA,SAASC,+BAAT,EAA0CC,gBAA1C,QAAkE,yBAAlE;AACA,SAASC,wBAAT,QAAyC,qCAAzC;AACA,SAASC,SAAT,QAA0B,qCAA1B;AACA,SAASC,uBAAT,QAAwC,qCAAxC;;AAEA,MAAMC,aAAa,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAVA;;AAYA,OAAO,MAAMC,CAAC,GAAGX,aAAa,CAACI,OAAD,CAAvB;;AAEP;AACA;AACA;AACA,MAAMQ,yBAAyB,GAAG;AAChC,EAAEC,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAoBC,CAAC,EAAE,CAAvB,EADgC;AAEhC,EAAEH,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAAoBC,CAAC,EAAE,CAAvB,EAFgC;AAGhC,EAAEH,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,EAAX,EAAeC,CAAC,EAAE,EAAlB,EAAsBC,CAAC,EAAE,EAAzB,EAHgC;AAIhC,EAAEH,CAAC,EAAE,EAAL,EAASC,CAAC,EAAE,EAAZ,EAAgBC,CAAC,EAAE,EAAnB,EAAuBC,CAAC,EAAE,EAA1B,EAJgC,CAAlC;;AAMA,MAAMC,2BAA2B,GAAG;AAClC,EAAEJ,CAAC,EAAE,IAAL,EAAWC,CAAC,EAAE,IAAd,EAAoBC,CAAC,EAAE,IAAvB,EAA6BC,CAAC,EAAE,CAAhC,EADkC;AAElC,EAAEH,CAAC,EAAE,IAAL,EAAWC,CAAC,EAAE,GAAd,EAAmBC,CAAC,EAAE,IAAtB,EAA4BC,CAAC,EAAE,CAA/B,EAFkC;AAGlC,EAAEH,CAAC,EAAE,IAAL,EAAWC,CAAC,EAAE,IAAd,EAAoBC,CAAC,EAAE,IAAvB,EAA6BC,CAAC,EAAE,GAAhC,EAHkC;AAIlC,EAAEH,CAAC,EAAE,IAAL,EAAWC,CAAC,EAAE,IAAd,EAAoBC,CAAC,EAAE,IAAvB,EAA6BC,CAAC,EAAE,CAAhC,EAJkC,CAApC;;;AAOAL,CAAC,CAACO,IAAF,CAAO,mBAAP;AACGC,IADH,CACS,0EADT;AAEGC,MAFH,CAEU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,QADX,EACqBpB,8BADrB;AAEGqB,aAFH;AAGGD,OAHH,CAGW,iBAHX,EAG8B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAH9B;AAIGE,MAJH,CAIU,mBAJV,EAI+B,CAAAC,CAAC,KAAIxB,KAAK,CAACwB,CAAC,CAACC,eAAH,EAAoB,CAAAC,CAAC,KAAIA,CAAzB,CAJzC,CAHJ;;AASGC,iBATH,CASqB,CAAAC,CAAC,KAAI;AACtB,QAAMC,IAAI,GAAG3B,kBAAkB,CAAC0B,CAAC,CAACT,MAAF,CAASW,MAAV,CAA/B;AACAF,EAAAA,CAAC,CAACG,0BAAF,CAA6BF,IAAI,CAACG,OAAlC;AACD,CAZH;AAaGC,EAbH,CAaM,OAAML,CAAN,KAAW;AACb,QAAM,EAAEE,MAAF,EAAUL,eAAV,EAA2BS,iBAA3B,KAAiDN,CAAC,CAACT,MAAzD;AACA,QAAMgB,cAAc,GAAG7B,wBAAwB,CAACwB,MAAD,CAAxB,CAAiCM,cAAjC,CAAgDC,MAAvE;AACA,QAAMR,IAAI,GAAG3B,kBAAkB,CAAC4B,MAAD,CAA/B;;AAEA,QAAMQ,WAAW;AACfT,EAAAA,IAAI,CAACU,UAAL,KAAoB,MAApB,IAA8BV,IAAI,CAACU,UAAL,KAAoB,MAAlD;AACI5B,EAAAA,yBADJ;AAEIK,EAAAA,2BAHN;;AAKA,QAAMwB,aAAa,GAAGxC,KAAK,CAACyB,eAAD,EAAkB;AAC3CG,EAAAA,CAAC,CAACa,MAAF,CAASC,aAAT,CAAuB;AACrBZ,IAAAA,MADqB;AAErBa,IAAAA,IAAI,EAAE,EAAEC,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,kBAAkB,EAAE,CAA3C,EAFe;AAGrBC,IAAAA,KAAK,EAAEC,eAAe,CAACC,QAAhB,GAA2BD,eAAe,CAACE,iBAH7B,EAAvB,CADyB,CAA3B;;;AAOA,QAAMC,QAAQ,GAAGvB,CAAC,CAACa,MAAF,CAASW,oBAAT,CAA8B;AAC7CC,IAAAA,MAAM,EAAE,MADqC;AAE7CC,IAAAA,MAAM,EAAE;AACNC,MAAAA,MAAM,EAAE3B,CAAC,CAACa,MAAF,CAASe,kBAAT,CAA4B;AAClCC,QAAAA,IAAI,EAAEhD,aAD4B,EAA5B,CADF;;AAINiD,MAAAA,UAAU,EAAE,MAJN,EAFqC;;AAQ7CC,IAAAA,QAAQ,EAAE;AACRJ,MAAAA,MAAM,EAAE3B,CAAC,CAACa,MAAF,CAASe,kBAAT,CAA4B;AAClCC,QAAAA,IAAI,EAAErD,+BAA+B;AACnCJ,QAAAA,KAAK,CAACyB,eAAD,EAAkB,CAAAC,CAAC;AACtBA,QAAAA,CAAC,KAAKQ,iBAAN;AACI,YADJ;AAEI;AACE0B,UAAAA,MAAM,EAAE;AACNtB,UAAAA,WAAW,CAACZ,CAAD,CAAX,CAAed,CADT;AAEN0B,UAAAA,WAAW,CAACZ,CAAD,CAAX,CAAeb,CAFT;AAGNyB,UAAAA,WAAW,CAACZ,CAAD,CAAX,CAAeZ,CAHT;AAINwB,UAAAA,WAAW,CAACZ,CAAD,CAAX,CAAeX,CAJT,CADV;;AAOE8C,UAAAA,SAAS,EAAExD,gBAAgB,CAACwB,IAAI,CAACU,UAAN,CAP7B;AAQEJ,UAAAA,cARF,EAHD,CAD8B,CADH,EAA5B,CADA;;;;;AAmBRuB,MAAAA,UAAU,EAAE,MAnBJ;AAoBRI,MAAAA,OAAO,EAAE9D,KAAK,CAACyB,eAAD,EAAkB,CAAAC,CAAC,KAAKA,CAAC,KAAKQ,iBAAN,GAA0B,IAA1B,GAAiC,EAAEJ,MAAF,EAAzD,CApBN,EARmC;;AA8B7CiC,IAAAA,SAAS,EAAE,EAAEC,QAAQ,EAAE,eAAZ,EA9BkC,EAA9B,CAAjB;;;AAiCA,QAAMC,OAAO,GAAGrC,CAAC,CAACa,MAAF,CAASyB,oBAAT,EAAhB;AACA,QAAMC,IAAI,GAAGF,OAAO,CAACG,eAAR,CAAwB;AACnCC,IAAAA,gBAAgB,EAAErE,KAAK,CAACyB,eAAD,EAAkB,CAAAC,CAAC;AACxCA,IAAAA,CAAC,KAAKQ,iBAAN;AACI,QADJ;AAEI;AACEoC,MAAAA,IAAI,EAAE9B,aAAa,CAACd,CAAD,CAAb,CAAiB6C,UAAjB,EADR;AAEEC,MAAAA,OAAO,EAAE,OAFX;AAGEC,MAAAA,UAAU,EAAE,EAAEC,CAAC,EAAE,GAAL,EAAUhE,CAAC,EAAE,GAAb,EAAkBiE,CAAC,EAAE,GAArB,EAA0BC,CAAC,EAAE,GAA7B,EAHd;AAIEC,MAAAA,MAAM,EAAE,OAJV,EAHiB,CADY,EAAxB,CAAb;;;;AAYAV,EAAAA,IAAI,CAACW,WAAL,CAAiB3B,QAAjB;AACAgB,EAAAA,IAAI,CAACY,IAAL,CAAU,CAAV;AACAZ,EAAAA,IAAI,CAACa,GAAL;AACApD,EAAAA,CAAC,CAACa,MAAF,CAASwC,KAAT,CAAeC,MAAf,CAAsB,CAACjB,OAAO,CAACkB,MAAR,EAAD,CAAtB;;AAEA,QAAMC,QAAQ,GAAGpF,KAAK,CAACyB,eAAD,EAAkB,CAAAC,CAAC,KAAI;AAC3C,QAAIA,CAAC,KAAKQ,iBAAV,EAA6B;AAC3B,aAAOmD,SAAP;AACD;AACD,WAAO7E,uBAAuB;AAC5BoB,IAAAA,CAD4B;AAE5B,MAAE0D,OAAO,EAAE9C,aAAa,CAACd,CAAD,CAAxB,EAF4B;AAG5B,KAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAH4B;AAI5B;AACE6D,MAAAA,YAAY,EAAEhF,SAAS,CAACiF,kBAAV,CAA6B1D,MAA7B,EAAqC,CAAA2D,MAAM,KAAInD,WAAW,CAACZ,CAAD,CAA1D,CADhB,EAJ4B;;AAO5B;AACEgE,MAAAA,UAAU,EAAE,CADd;AAEEC,MAAAA,wBAAwB,EAAE,CAF5B;AAGEC,MAAAA,yBAAyB,EAAE,CAH7B,EAP4B,CAA9B;;;AAaD,GAjBqB,CAAtB;AAkBAhE,EAAAA,CAAC,CAACiE,gBAAF,CAAmBC,OAAO,CAACC,GAAR,CAAYX,QAAZ,CAAnB;AACD,CApGH;;AAsGA1E,CAAC,CAACO,IAAF,CAAO,uBAAP;AACGC,IADH;AAEK,qGAFL;;AAIGC,MAJH,CAIU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,QADX,EACqBpB,8BADrB;AAEGqB,aAFH;AAGGD,OAHH,CAGW,gBAHX,EAG6B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAH7B;AAIG2E,MAJH,CAIU,CAAAC,CAAC,KAAIA,CAAC,CAAC9D,cAAF,IAAoB7B,wBAAwB,CAAC2F,CAAC,CAACnE,MAAH,CAAxB,CAAmCM,cAAnC,CAAkDC,MAJrF,CALJ;;AAWGV,iBAXH,CAWqB,CAAAC,CAAC,KAAI;AACtB,QAAMC,IAAI,GAAG3B,kBAAkB,CAAC0B,CAAC,CAACT,MAAF,CAASW,MAAV,CAA/B;AACAF,EAAAA,CAAC,CAACG,0BAAF,CAA6BF,IAAI,CAACG,OAAlC;AACD,CAdH;AAeGC,EAfH,CAeM,OAAML,CAAN,KAAW;AACb,QAAM,EAAEE,MAAF,EAAUK,cAAV,KAA6BP,CAAC,CAACT,MAArC;AACA,QAAMU,IAAI,GAAG3B,kBAAkB,CAAC4B,MAAD,CAA/B;;AAEA;AACA;AACA,QAAM8B,MAAM,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAf;;AAEA,QAAMsC,YAAY,GAAGtE,CAAC,CAACa,MAAF,CAASC,aAAT,CAAuB;AAC1CZ,IAAAA,MAD0C;AAE1Ca,IAAAA,IAAI,EAAE,EAAEC,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,kBAAkB,EAAE,CAA3C,EAFoC;AAG1CC,IAAAA,KAAK,EAAEC,eAAe,CAACC,QAAhB,GAA2BD,eAAe,CAACE,iBAHR,EAAvB,CAArB;;;AAMA,QAAMC,QAAQ,GAAGvB,CAAC,CAACa,MAAF,CAASW,oBAAT,CAA8B;AAC7CC,IAAAA,MAAM,EAAE,MADqC;AAE7CC,IAAAA,MAAM,EAAE;AACNC,MAAAA,MAAM,EAAE3B,CAAC,CAACa,MAAF,CAASe,kBAAT,CAA4B;AAClCC,QAAAA,IAAI,EAAEhD,aAD4B,EAA5B,CADF;;AAINiD,MAAAA,UAAU,EAAE,MAJN,EAFqC;;AAQ7CC,IAAAA,QAAQ,EAAE;AACRJ,MAAAA,MAAM,EAAE3B,CAAC,CAACa,MAAF,CAASe,kBAAT,CAA4B;AAClCC,QAAAA,IAAI,EAAErD,+BAA+B,CAAC;AACpC;AACEwD,UAAAA,MADF;AAEEC,UAAAA,SAAS,EAAExD,gBAAgB,CAACwB,IAAI,CAACU,UAAN,CAF7B;AAGEJ,UAAAA,cAHF,EADoC,CAAD,CADH,EAA5B,CADA;;;;AAURuB,MAAAA,UAAU,EAAE,MAVJ;AAWRI,MAAAA,OAAO,EAAE,CAAC,EAAEhC,MAAF,EAAD,CAXD,EARmC;;AAqB7CiC,IAAAA,SAAS,EAAE,EAAEC,QAAQ,EAAE,eAAZ,EArBkC,EAA9B,CAAjB;;;AAwBA,QAAMC,OAAO,GAAGrC,CAAC,CAACa,MAAF,CAASyB,oBAAT,EAAhB;AACA,QAAMC,IAAI,GAAGF,OAAO,CAACG,eAAR,CAAwB;AACnCC,IAAAA,gBAAgB,EAAE;AAChB;AACEC,MAAAA,IAAI,EAAE4B,YAAY,CAAC3B,UAAb,EADR;AAEEC,MAAAA,OAAO,EAAE,OAFX;AAGEC,MAAAA,UAAU,EAAE,EAAEC,CAAC,EAAE,GAAL,EAAUhE,CAAC,EAAE,GAAb,EAAkBiE,CAAC,EAAE,GAArB,EAA0BC,CAAC,EAAE,GAA7B,EAHd;AAIEC,MAAAA,MAAM,EAAE,OAJV,EADgB,CADiB,EAAxB,CAAb;;;;AAUAV,EAAAA,IAAI,CAACW,WAAL,CAAiB3B,QAAjB;AACAgB,EAAAA,IAAI,CAACY,IAAL,CAAU,CAAV;AACAZ,EAAAA,IAAI,CAACa,GAAL;AACApD,EAAAA,CAAC,CAACa,MAAF,CAASwC,KAAT,CAAeC,MAAf,CAAsB,CAACjB,OAAO,CAACkB,MAAR,EAAD,CAAtB;;AAEAvD,EAAAA,CAAC,CAACuE,iBAAF,CAAoBD,YAApB,EAAkCpE,MAAlC,EAA0C;AACxCa,IAAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADkC;AAExCyD,IAAAA,GAAG,EAAE,EAAExF,CAAC,EAAEgD,MAAM,CAAC,CAAD,CAAX,EAAgB/C,CAAC,EAAE+C,MAAM,CAAC,CAAD,CAAzB,EAA8B9C,CAAC,EAAE8C,MAAM,CAAC,CAAD,CAAvC,EAA4C7C,CAAC,EAAE6C,MAAM,CAAC,CAAD,CAArD,EAFmC,EAA1C;;AAID,CAzEH;;AA2EAlD,CAAC,CAACO,IAAF,CAAO,6BAAP;AACGC,IADH;AAEK;AACL;AACA;AACA;AACA;AACA,CAPA;;AASGC,MATH,CASU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,QADX,EACqB,CAAC,SAAD,EAAY,UAAZ,EAAwB,YAAxB,EAAsC,YAAtC,CADrB;AAEGC,aAFH;AAGE;AACA;AACA;AALF,CAMG+E,iBANH,CAMqB;AACjB;AACA;AACEC,EAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CADX;AAEEC,EAAAA,MAAM,EAAE,CAAC,CAAD,CAFV;AAGEC,EAAAA,cAAc,EAAE,KAHlB;AAIEC,EAAAA,cAAc,EAAE,MAJlB;AAKEC,EAAAA,cAAc,EAAE,MALlB;AAMEC,EAAAA,cAAc,EAAE,MANlB,EAFiB;;AAUjB;AACEL,EAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CADX;AAEEC,EAAAA,MAAM,EAAE,CAAC,CAAD,CAFV;AAGEC,EAAAA,cAAc,EAAE,WAHlB;AAIEC,EAAAA,cAAc,EAAE,MAJlB;AAKEC,EAAAA,cAAc,EAAE,MALlB;AAMEC,EAAAA,cAAc,EAAE,MANlB,EAViB;;AAkBjB;AACEL,EAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CADX;AAEEC,EAAAA,MAAM,EAAE,CAAC,CAAD,CAFV;AAGEC,EAAAA,cAAc,EAAE,qBAHlB;AAIEC,EAAAA,cAAc,EAAE,WAJlB;AAKEC,EAAAA,cAAc,EAAE,MALlB;AAMEC,EAAAA,cAAc,EAAE,KANlB,EAlBiB;;AA0BjB;AACEL,EAAAA,OAAO,EAAE,CAAC,KAAD,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,CADX;AAEEC,EAAAA,MAAM,EAAE,CAAC,KAAD,CAFV;AAGEC,EAAAA,cAAc,EAAE,WAHlB;AAIEC,EAAAA,cAAc,EAAE,MAJlB;AAKEC,EAAAA,cAAc,EAAE,MALlB;AAMEC,EAAAA,cAAc,EAAE,KANlB,EA1BiB;;AAkCjB;AACEL,EAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CADX;AAEEC,EAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,CAFV;AAGEC,EAAAA,cAAc,EAAE,KAHlB;AAIEC,EAAAA,cAAc,EAAE,MAJlB;AAKEC,EAAAA,cAAc,EAAE,MALlB;AAMEC,EAAAA,cAAc,EAAE,MANlB,EAlCiB;;AA0CjB;AACEL,EAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CADX;AAEEC,EAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,CAFV;AAGEC,EAAAA,cAAc,EAAE,WAHlB;AAIEC,EAAAA,cAAc,EAAE,MAJlB;AAKEC,EAAAA,cAAc,EAAE,MALlB;AAMEC,EAAAA,cAAc,EAAE,MANlB,EA1CiB;;AAkDjB;AACEL,EAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CADX;AAEEC,EAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,CAFV;AAGEC,EAAAA,cAAc,EAAE,qBAHlB;AAIEC,EAAAA,cAAc,EAAE,WAJlB;AAKEC,EAAAA,cAAc,EAAE,MALlB;AAMEC,EAAAA,cAAc,EAAE,KANlB,EAlDiB;;AA0DjB;AACEL,EAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CADX;AAEEC,EAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFV;AAGEC,EAAAA,cAAc,EAAE,KAHlB;AAIEC,EAAAA,cAAc,EAAE,MAJlB;AAKEC,EAAAA,cAAc,EAAE,MALlB;AAMEC,EAAAA,cAAc,EAAE,MANlB,EA1DiB;;AAkEjB;AACEL,EAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CADX;AAEEC,EAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFV;AAGEC,EAAAA,cAAc,EAAE,WAHlB;AAIEC,EAAAA,cAAc,EAAE,MAJlB;AAKEC,EAAAA,cAAc,EAAE,MALlB;AAMEC,EAAAA,cAAc,EAAE,MANlB,EAlEiB;;AA0EjB;AACEL,EAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CADX;AAEEC,EAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFV;AAGEC,EAAAA,cAAc,EAAE,qBAHlB;AAIEC,EAAAA,cAAc,EAAE,WAJlB;AAKEC,EAAAA,cAAc,EAAE,MALlB;AAMEC,EAAAA,cAAc,EAAE,KANlB,EA1EiB;;AAkFjB;AACA;AACEL,EAAAA,OAAO,EAAE,CAAC,KAAD,EAAQ,CAAR,EAAW,CAAX,EAAc,KAAd,CADX;AAEEC,EAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,KAAV,CAFV;AAGEC,EAAAA,cAAc,EAAE,KAHlB;AAIEC,EAAAA,cAAc,EAAE,qBAJlB;AAKEC,EAAAA,cAAc,EAAE,KALlB;AAMEC,EAAAA,cAAc,EAAE,MANlB,EAnFiB;;AA2FjB;AACEL,EAAAA,OAAO,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,CAAf,EAAkB,KAAlB,CADX;AAEEC,EAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,KAAV,CAFV;AAGEC,EAAAA,cAAc,EAAE,WAHlB;AAIEC,EAAAA,cAAc,EAAE,qBAJlB;AAKEC,EAAAA,cAAc,EAAE,KALlB;AAMEC,EAAAA,cAAc,EAAE,MANlB,EA3FiB;;AAmGjB;AACEL,EAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,KAAV,CADX;AAEEC,EAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,KAAV,CAFV;AAGEC,EAAAA,cAAc,EAAE,WAHlB;AAIEC,EAAAA,cAAc,EAAE,MAJlB;AAKEC,EAAAA,cAAc,EAAE,KALlB;AAMEC,EAAAA,cAAc,EAAE,MANlB,EAnGiB;;AA2GjB;AACEL,EAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,KAAV,CADX;AAEEC,EAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,KAAV,CAFV;AAGEC,EAAAA,cAAc,EAAE,WAHlB;AAIEC,EAAAA,cAAc,EAAE,MAJlB;AAKEC,EAAAA,cAAc,EAAE,MALlB;AAMEC,EAAAA,cAAc,EAAE,KANlB,EA3GiB;;AAmHjB;AACEL,EAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CADX;AAEEC,EAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,KAAV,CAFV;AAGEC,EAAAA,cAAc,EAAE,qBAHlB;AAIEC,EAAAA,cAAc,EAAE,WAJlB;AAKEC,EAAAA,cAAc,EAAE,MALlB;AAMEC,EAAAA,cAAc,EAAE,WANlB,EAnHiB,CANrB;;;AAkIGX,MAlIH,CAkIU,CAAAC,CAAC,KAAIA,CAAC,CAACM,MAAF,CAASlE,MAAT,IAAmB/B,wBAAwB,CAAC2F,CAAC,CAACnE,MAAH,CAAxB,CAAmCM,cAAnC,CAAkDC,MAlIpF,CAVJ;;AA8IGV,iBA9IH,CA8IqB,CAAAC,CAAC,KAAI;AACtB,QAAMC,IAAI,GAAG3B,kBAAkB,CAAC0B,CAAC,CAACT,MAAF,CAASW,MAAV,CAA/B;AACAF,EAAAA,CAAC,CAACG,0BAAF,CAA6BF,IAAI,CAACG,OAAlC;AACD,CAjJH;AAkJGC,EAlJH,CAkJM,OAAML,CAAN,KAAW;AACb,QAAM;AACJE,IAAAA,MADI;AAEJwE,IAAAA,OAFI;AAGJC,IAAAA,MAHI;AAIJC,IAAAA,cAJI;AAKJC,IAAAA,cALI;AAMJC,IAAAA,cANI;AAOJC,IAAAA,cAPI;AAQF/E,EAAAA,CAAC,CAACT,MARN;AASA,QAAMgB,cAAc,GAAGoE,MAAM,CAAClE,MAA9B;AACA,QAAMR,IAAI,GAAG3B,kBAAkB,CAAC4B,MAAD,CAA/B;;AAEA,QAAMoE,YAAY,GAAGtE,CAAC,CAACa,MAAF,CAASC,aAAT,CAAuB;AAC1CZ,IAAAA,MAD0C;AAE1Ca,IAAAA,IAAI,EAAE,EAAEC,KAAK,EAAE,CAAT,EAAYC,MAAM,EAAE,CAApB,EAAuBC,kBAAkB,EAAE,CAA3C,EAFoC;AAG1CC,IAAAA,KAAK,EAAEC,eAAe,CAACC,QAAhB,GAA2BD,eAAe,CAACE,iBAHR,EAAvB,CAArB;;;AAMA,QAAMC,QAAQ,GAAGvB,CAAC,CAACa,MAAF,CAASW,oBAAT,CAA8B;AAC7CC,IAAAA,MAAM,EAAE,MADqC;AAE7CC,IAAAA,MAAM,EAAE;AACNC,MAAAA,MAAM,EAAE3B,CAAC,CAACa,MAAF,CAASe,kBAAT,CAA4B;AAClCC,QAAAA,IAAI,EAAEhD,aAD4B,EAA5B,CADF;;AAINiD,MAAAA,UAAU,EAAE,MAJN,EAFqC;;AAQ7CC,IAAAA,QAAQ,EAAE;AACRJ,MAAAA,MAAM,EAAE3B,CAAC,CAACa,MAAF,CAASe,kBAAT,CAA4B;AAClCC,QAAAA,IAAI,EAAErD,+BAA+B,CAAC;AACpC;AACEwD,UAAAA,MAAM,EAAE2C,MADV;AAEE1C,UAAAA,SAAS,EAAExD,gBAAgB,CAACwB,IAAI,CAACU,UAAN,CAF7B;AAGEJ,UAAAA,cAHF,EADoC,CAAD,CADH,EAA5B,CADA;;;;AAURuB,MAAAA,UAAU,EAAE,MAVJ;AAWRI,MAAAA,OAAO,EAAE;AACP;AACEhC,QAAAA,MADF;AAEE8E,QAAAA,KAAK,EAAE;AACLC,UAAAA,KAAK,EAAE;AACLC,YAAAA,SAAS,EAAEN,cADN;AAELO,YAAAA,SAAS,EAAEN,cAFN;AAGLO,YAAAA,SAAS,EAAE,KAHN,EADF;;AAMLC,UAAAA,KAAK,EAAE;AACLH,YAAAA,SAAS,EAAEJ,cADN;AAELK,YAAAA,SAAS,EAAEJ,cAFN;AAGLK,YAAAA,SAAS,EAAE,KAHN,EANF,EAFT,EADO,CAXD,EARmC;;;;;;AAqC7CjD,IAAAA,SAAS,EAAE,EAAEC,QAAQ,EAAE,eAAZ,EArCkC,EAA9B,CAAjB;;;AAwCA,QAAMC,OAAO,GAAGrC,CAAC,CAACa,MAAF,CAASyB,oBAAT,EAAhB;AACA,QAAMC,IAAI,GAAGF,OAAO,CAACG,eAAR,CAAwB;AACnCC,IAAAA,gBAAgB,EAAE;AAChB;AACEC,MAAAA,IAAI,EAAE4B,YAAY,CAAC3B,UAAb,EADR;AAEEC,MAAAA,OAAO,EAAE,OAFX;AAGEC,MAAAA,UAAU,EAAE,EAAEC,CAAC,EAAE,GAAL,EAAUhE,CAAC,EAAE,GAAb,EAAkBiE,CAAC,EAAE,GAArB,EAA0BC,CAAC,EAAE,GAA7B,EAHd;AAIEC,MAAAA,MAAM,EAAE,OAJV,EADgB,CADiB,EAAxB,CAAb;;;;AAUAV,EAAAA,IAAI,CAACW,WAAL,CAAiB3B,QAAjB;AACAgB,EAAAA,IAAI,CAACY,IAAL,CAAU,CAAV;AACAZ,EAAAA,IAAI,CAACa,GAAL;AACApD,EAAAA,CAAC,CAACa,MAAF,CAASwC,KAAT,CAAeC,MAAf,CAAsB,CAACjB,OAAO,CAACkB,MAAR,EAAD,CAAtB;;AAEAvD,EAAAA,CAAC,CAACuE,iBAAF,CAAoBD,YAApB,EAAkCpE,MAAlC,EAA0C;AACxCa,IAAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADkC;AAExCyD,IAAAA,GAAG,EAAE,EAAExF,CAAC,EAAE0F,OAAO,CAAC,CAAD,CAAZ,EAAiBzF,CAAC,EAAEyF,OAAO,CAAC,CAAD,CAA3B,EAAgCxF,CAAC,EAAEwF,OAAO,CAAC,CAAD,CAA1C,EAA+CvF,CAAC,EAAEuF,OAAO,CAAC,CAAD,CAAzD,EAFmC,EAA1C;;AAID,CAjOH","sourcesContent":["export const description = `\n- Test pipeline outputs with different color attachment number, formats, component counts, etc.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { range } from '../../../../common/util/util.js';\nimport { kRenderableColorTextureFormats, kTextureFormatInfo } from '../../../capability_info.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { getFragmentShaderCodeWithOutput, getPlainTypeInfo } from '../../../util/shader.js';\nimport { kTexelRepresentationInfo } from '../../../util/texture/texel_data.js';\nimport { TexelView } from '../../../util/texture/texel_view.js';\nimport { textureContentIsOKByT2B } from '../../../util/texture/texture_ok.js';\n\nconst kVertexShader = `\n@vertex fn main(\n@builtin(vertex_index) VertexIndex : u32\n) -> @builtin(position) vec4<f32> {\n  var pos : array<vec2<f32>, 3> = array<vec2<f32>, 3>(\n      vec2<f32>(-1.0, -3.0),\n      vec2<f32>(3.0, 1.0),\n      vec2<f32>(-1.0, 1.0));\n  return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n}\n`;\n\nexport const g = makeTestGroup(GPUTest);\n\n// Values to write into each attachment\n// We make values different for each attachment index and each channel\n// to make sure they didn't get mixed up\nconst attachmentsIntWriteValues = [\n  { R: 1, G: 2, B: 3, A: 4 },\n  { R: 5, G: 6, B: 7, A: 8 },\n  { R: 9, G: 10, B: 11, A: 12 },\n  { R: 13, G: 14, B: 15, A: 16 },\n];\nconst attachmentsFloatWriteValues = [\n  { R: 0.12, G: 0.34, B: 0.56, A: 0 },\n  { R: 0.78, G: 0.9, B: 0.19, A: 1 },\n  { R: 0.28, G: 0.37, B: 0.46, A: 0.3 },\n  { R: 0.55, G: 0.64, B: 0.73, A: 1 },\n];\n\ng.test('color,attachments')\n  .desc(`Test that pipeline with sparse color attachments write values correctly.`)\n  .params(u =>\n    u\n      .combine('format', kRenderableColorTextureFormats)\n      .beginSubcases()\n      .combine('attachmentCount', [2, 3, 4])\n      .expand('emptyAttachmentId', p => range(p.attachmentCount, i => i))\n  )\n  .beforeAllSubcases(t => {\n    const info = kTextureFormatInfo[t.params.format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(async t => {\n    const { format, attachmentCount, emptyAttachmentId } = t.params;\n    const componentCount = kTexelRepresentationInfo[format].componentOrder.length;\n    const info = kTextureFormatInfo[format];\n\n    const writeValues =\n      info.sampleType === 'sint' || info.sampleType === 'uint'\n        ? attachmentsIntWriteValues\n        : attachmentsFloatWriteValues;\n\n    const renderTargets = range(attachmentCount, () =>\n      t.device.createTexture({\n        format,\n        size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n        usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n      })\n    );\n    const pipeline = t.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module: t.device.createShaderModule({\n          code: kVertexShader,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: getFragmentShaderCodeWithOutput(\n            range(attachmentCount, i =>\n              i === emptyAttachmentId\n                ? null\n                : {\n                    values: [\n                      writeValues[i].R,\n                      writeValues[i].G,\n                      writeValues[i].B,\n                      writeValues[i].A,\n                    ],\n                    plainType: getPlainTypeInfo(info.sampleType),\n                    componentCount,\n                  }\n            )\n          ),\n        }),\n        entryPoint: 'main',\n        targets: range(attachmentCount, i => (i === emptyAttachmentId ? null : { format })),\n      },\n      primitive: { topology: 'triangle-list' },\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: range(attachmentCount, i =>\n        i === emptyAttachmentId\n          ? null\n          : {\n              view: renderTargets[i].createView(),\n              storeOp: 'store',\n              clearValue: { r: 0.5, g: 0.5, b: 0.5, a: 0.5 },\n              loadOp: 'clear',\n            }\n      ),\n    });\n    pass.setPipeline(pipeline);\n    pass.draw(3);\n    pass.end();\n    t.device.queue.submit([encoder.finish()]);\n\n    const promises = range(attachmentCount, i => {\n      if (i === emptyAttachmentId) {\n        return undefined;\n      }\n      return textureContentIsOKByT2B(\n        t,\n        { texture: renderTargets[i] },\n        [1, 1, 1],\n        {\n          expTexelView: TexelView.fromTexelsAsColors(format, coords => writeValues[i]),\n        },\n        {\n          maxIntDiff: 0,\n          maxDiffULPsForNormFormat: 1,\n          maxDiffULPsForFloatFormat: 1,\n        }\n      );\n    });\n    t.eventualExpectOK(Promise.all(promises));\n  });\n\ng.test('color,component_count')\n  .desc(\n    `Test that extra components of the output (e.g. f32, vec2<f32>, vec3<f32>, vec4<f32>) are discarded.`\n  )\n  .params(u =>\n    u\n      .combine('format', kRenderableColorTextureFormats)\n      .beginSubcases()\n      .combine('componentCount', [1, 2, 3, 4])\n      .filter(x => x.componentCount >= kTexelRepresentationInfo[x.format].componentOrder.length)\n  )\n  .beforeAllSubcases(t => {\n    const info = kTextureFormatInfo[t.params.format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(async t => {\n    const { format, componentCount } = t.params;\n    const info = kTextureFormatInfo[format];\n\n    // expected RGBA values\n    // extra channels are discarded\n    const values = [0, 1, 0, 1];\n\n    const renderTarget = t.device.createTexture({\n      format,\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const pipeline = t.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module: t.device.createShaderModule({\n          code: kVertexShader,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: getFragmentShaderCodeWithOutput([\n            {\n              values,\n              plainType: getPlainTypeInfo(info.sampleType),\n              componentCount,\n            },\n          ]),\n        }),\n        entryPoint: 'main',\n        targets: [{ format }],\n      },\n      primitive: { topology: 'triangle-list' },\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: renderTarget.createView(),\n          storeOp: 'store',\n          clearValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n          loadOp: 'clear',\n        },\n      ],\n    });\n    pass.setPipeline(pipeline);\n    pass.draw(3);\n    pass.end();\n    t.device.queue.submit([encoder.finish()]);\n\n    t.expectSingleColor(renderTarget, format, {\n      size: [1, 1, 1],\n      exp: { R: values[0], G: values[1], B: values[2], A: values[3] },\n    });\n  });\n\ng.test('color,component_count,blend')\n  .desc(\n    `Test that blending behaves correctly when:\n- fragment output has no alpha, but the src alpha is not used for the blend operation indicated by blend factors\n- attachment format has no alpha, and the dst alpha should be assumed as 1\n\nThe attachment has a load value of [1, 0, 0, 1]\n`\n  )\n  .params(u =>\n    u\n      .combine('format', ['r8unorm', 'rg8unorm', 'rgba8unorm', 'bgra8unorm'] as const)\n      .beginSubcases()\n      // _result is expected values in the color attachment (extra channels are discarded)\n      // output is the fragment shader output vector\n      // 0.498 -> 0x7f, 0.502 -> 0x80\n      .combineWithParams([\n        // fragment output has no alpha\n        {\n          _result: [0, 0, 0, 0],\n          output: [0],\n          colorSrcFactor: 'one',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'zero',\n        },\n        {\n          _result: [0, 0, 0, 0],\n          output: [0],\n          colorSrcFactor: 'dst-alpha',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'zero',\n        },\n        {\n          _result: [1, 0, 0, 0],\n          output: [0],\n          colorSrcFactor: 'one-minus-dst-alpha',\n          colorDstFactor: 'dst-alpha',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'one',\n        },\n        {\n          _result: [0.498, 0, 0, 0],\n          output: [0.498],\n          colorSrcFactor: 'dst-alpha',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'one',\n        },\n        {\n          _result: [0, 1, 0, 0],\n          output: [0, 1],\n          colorSrcFactor: 'one',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'zero',\n        },\n        {\n          _result: [0, 1, 0, 0],\n          output: [0, 1],\n          colorSrcFactor: 'dst-alpha',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'zero',\n        },\n        {\n          _result: [1, 0, 0, 0],\n          output: [0, 1],\n          colorSrcFactor: 'one-minus-dst-alpha',\n          colorDstFactor: 'dst-alpha',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'one',\n        },\n        {\n          _result: [0, 1, 0, 0],\n          output: [0, 1, 0],\n          colorSrcFactor: 'one',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'zero',\n        },\n        {\n          _result: [0, 1, 0, 0],\n          output: [0, 1, 0],\n          colorSrcFactor: 'dst-alpha',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'zero',\n        },\n        {\n          _result: [1, 0, 0, 0],\n          output: [0, 1, 0],\n          colorSrcFactor: 'one-minus-dst-alpha',\n          colorDstFactor: 'dst-alpha',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'one',\n        },\n        // fragment output has alpha\n        {\n          _result: [0.502, 1, 0, 0.498],\n          output: [0, 1, 0, 0.498],\n          colorSrcFactor: 'one',\n          colorDstFactor: 'one-minus-src-alpha',\n          alphaSrcFactor: 'one',\n          alphaDstFactor: 'zero',\n        },\n        {\n          _result: [0.502, 0.498, 0, 0.498],\n          output: [0, 1, 0, 0.498],\n          colorSrcFactor: 'src-alpha',\n          colorDstFactor: 'one-minus-src-alpha',\n          alphaSrcFactor: 'one',\n          alphaDstFactor: 'zero',\n        },\n        {\n          _result: [0, 1, 0, 0.498],\n          output: [0, 1, 0, 0.498],\n          colorSrcFactor: 'dst-alpha',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'one',\n          alphaDstFactor: 'zero',\n        },\n        {\n          _result: [0, 1, 0, 0.498],\n          output: [0, 1, 0, 0.498],\n          colorSrcFactor: 'dst-alpha',\n          colorDstFactor: 'zero',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'src',\n        },\n        {\n          _result: [1, 0, 0, 1],\n          output: [0, 1, 0, 0.498],\n          colorSrcFactor: 'one-minus-dst-alpha',\n          colorDstFactor: 'dst-alpha',\n          alphaSrcFactor: 'zero',\n          alphaDstFactor: 'dst-alpha',\n        },\n      ] as const)\n      .filter(x => x.output.length >= kTexelRepresentationInfo[x.format].componentOrder.length)\n  )\n  .beforeAllSubcases(t => {\n    const info = kTextureFormatInfo[t.params.format];\n    t.selectDeviceOrSkipTestCase(info.feature);\n  })\n  .fn(async t => {\n    const {\n      format,\n      _result,\n      output,\n      colorSrcFactor,\n      colorDstFactor,\n      alphaSrcFactor,\n      alphaDstFactor,\n    } = t.params;\n    const componentCount = output.length;\n    const info = kTextureFormatInfo[format];\n\n    const renderTarget = t.device.createTexture({\n      format,\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const pipeline = t.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module: t.device.createShaderModule({\n          code: kVertexShader,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: getFragmentShaderCodeWithOutput([\n            {\n              values: output,\n              plainType: getPlainTypeInfo(info.sampleType),\n              componentCount,\n            },\n          ]),\n        }),\n        entryPoint: 'main',\n        targets: [\n          {\n            format,\n            blend: {\n              color: {\n                srcFactor: colorSrcFactor,\n                dstFactor: colorDstFactor,\n                operation: 'add',\n              },\n              alpha: {\n                srcFactor: alphaSrcFactor,\n                dstFactor: alphaDstFactor,\n                operation: 'add',\n              },\n            },\n          },\n        ],\n      },\n      primitive: { topology: 'triangle-list' },\n    });\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: renderTarget.createView(),\n          storeOp: 'store',\n          clearValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n          loadOp: 'clear',\n        },\n      ],\n    });\n    pass.setPipeline(pipeline);\n    pass.draw(3);\n    pass.end();\n    t.device.queue.submit([encoder.finish()]);\n\n    t.expectSingleColor(renderTarget, format, {\n      size: [1, 1, 1],\n      exp: { R: _result[0], G: _result[1], B: _result[2], A: _result[3] },\n    });\n  });\n"],"file":"pipeline_output_targets.spec.js"}