{"version":3,"sources":["../../../../../src/webgpu/api/operation/render_pipeline/culling_tests.spec.ts"],"names":["description","makeTestGroup","kTextureFormatInfo","GPUTest","faceIsCulled","face","frontFace","cullMode","faceColor","isCulled","Uint8Array","g","test","desc","params","u","combine","beginSubcases","fn","t","size","format","texture","device","createTexture","width","height","depthOrArrayLayers","usage","GPUTextureUsage","RENDER_ATTACHMENT","COPY_SRC","depthTexture","undefined","depthStencilAttachment","depthStencilFormat","view","createView","depthClearValue","depthLoadOp","depthStoreOp","stencil","stencilClearValue","stencilLoadOp","stencilStoreOp","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","clearValue","r","b","a","loadOp","storeOp","setPipeline","createRenderPipeline","layout","vertex","module","createShaderModule","code","entryPoint","fragment","targets","primitive","topology","primitiveTopology","depthStencil","draw","end","queue","submit","finish","kCCWTriangleTopLeftColor","expectSinglePixelIn2DTexture","x","y","exp","kCWTriangleBottomRightColor"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAlBO,CAoBP,SAASC,aAAT,QAA8B,4CAA9B;AACA,SAASC,kBAAT,QAAmC,6BAAnC;AACA,SAASC,OAAT,QAAwB,sBAAxB;;AAEA,SAASC,YAAT,CAAsBC,IAAtB,EAA0CC,SAA1C,EAAmEC,QAAnE,EAAmG;AACjG,SAAOA,QAAQ,KAAK,MAAb,IAAwBD,SAAS,KAAKD,IAAf,MAA0BE,QAAQ,KAAK,OAAvC,CAA9B;AACD;;AAED,SAASC,SAAT,CAAmBH,IAAnB,EAAuCC,SAAvC,EAAgEC,QAAhE,EAAmG;AACjG;AACA,QAAME,QAAQ,GAAGL,YAAY,CAACC,IAAD,EAAOC,SAAP,EAAkBC,QAAlB,CAA7B;AACA,MAAI,CAACE,QAAD,IAAaJ,IAAI,KAAKC,SAA1B,EAAqC;AACnC,WAAO,IAAII,UAAJ,CAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAAf,CAAP;AACD,GAFD,MAEO,IAAID,QAAJ,EAAc;AACnB,WAAO,IAAIC,UAAJ,CAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAAf,CAAP;AACD,GAFM,MAEA;AACL,WAAO,IAAIA,UAAJ,CAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAAf,CAAP;AACD;AACF;;AAED,OAAO,MAAMC,CAAC,GAAGV,aAAa,CAACE,OAAD,CAAvB;;AAEPQ,CAAC,CAACC,IAAF,CAAO,SAAP;AACGC,IADH;AAEK;AACL;AACA;AACA,CALA;;AAOGC,MAPH;AAQI,CAAAC,CAAC;AACCA,CAAC;AACEC,OADH,CACW,WADX,EACwB,CAAC,KAAD,EAAQ,IAAR,CADxB;AAEGA,OAFH,CAEW,UAFX,EAEuB,CAAC,MAAD,EAAS,OAAT,EAAkB,MAAlB,CAFvB;AAGGC,aAHH;AAIGD,OAJH,CAIW,oBAJX,EAIiC;AAC7B,IAD6B;AAE7B,aAF6B;AAG7B,cAH6B;AAI7B,sBAJ6B,CAJjC;;AAUGA,OAVH,CAUW,mBAVX,EAUgC,CAAC,eAAD,CAVhC,CATN,CAmBkE;AAnBlE;AAqBGE,EArBH,CAqBM,CAAAC,CAAC,KAAI;AACP,QAAMC,IAAI,GAAG,CAAb;AACA,QAAMC,MAAM,GAAG,YAAf;;AAEA,QAAMC,OAAO,GAAGH,CAAC,CAACI,MAAF,CAASC,aAAT,CAAuB;AACrCJ,IAAAA,IAAI,EAAE,EAAEK,KAAK,EAAEL,IAAT,EAAeM,MAAM,EAAEN,IAAvB,EAA6BO,kBAAkB,EAAE,CAAjD,EAD+B;AAErCN,IAAAA,MAFqC;AAGrCO,IAAAA,KAAK,EAAEC,eAAe,CAACC,iBAAhB,GAAoCD,eAAe,CAACE,QAHtB,EAAvB,CAAhB;;;AAMA,MAAIC,YAAoC,GAAGC,SAA3C;AACA,MAAIC,sBAAuE,GAAGD,SAA9E;AACA,MAAId,CAAC,CAACL,MAAF,CAASqB,kBAAb,EAAiC;AAC/BH,IAAAA,YAAY,GAAGb,CAAC,CAACI,MAAF,CAASC,aAAT,CAAuB;AACpCJ,MAAAA,IAAI,EAAE,EAAEK,KAAK,EAAEL,IAAT,EAAeM,MAAM,EAAEN,IAAvB,EAA6BO,kBAAkB,EAAE,CAAjD,EAD8B;AAEpCN,MAAAA,MAAM,EAAEF,CAAC,CAACL,MAAF,CAASqB,kBAFmB;AAGpCP,MAAAA,KAAK,EAAEC,eAAe,CAACC,iBAHa,EAAvB,CAAf;;;AAMAI,IAAAA,sBAAsB,GAAG;AACvBE,MAAAA,IAAI,EAAEJ,YAAY,CAACK,UAAb,EADiB;AAEvBC,MAAAA,eAAe,EAAE,GAFM;AAGvBC,MAAAA,WAAW,EAAE,OAHU;AAIvBC,MAAAA,YAAY,EAAE,OAJS,EAAzB;;;AAOA,QAAIrB,CAAC,CAACL,MAAF,CAASqB,kBAAT,IAA+BjC,kBAAkB,CAACiB,CAAC,CAACL,MAAF,CAASqB,kBAAV,CAAlB,CAAgDM,OAAnF,EAA4F;AAC1FP,MAAAA,sBAAsB,CAACQ,iBAAvB,GAA2C,CAA3C;AACAR,MAAAA,sBAAsB,CAACS,aAAvB,GAAuC,OAAvC;AACAT,MAAAA,sBAAsB,CAACU,cAAvB,GAAwC,OAAxC;AACD;AACF;;AAED,QAAMC,OAAO,GAAG1B,CAAC,CAACI,MAAF,CAASuB,oBAAT,EAAhB;AACA,QAAMC,IAAI,GAAGF,OAAO,CAACG,eAAR,CAAwB;AACnCC,IAAAA,gBAAgB,EAAE;AAChB;AACEb,MAAAA,IAAI,EAAEd,OAAO,CAACe,UAAR,EADR;AAEEa,MAAAA,UAAU,EAAE,EAAEC,CAAC,EAAE,GAAL,EAAUxC,CAAC,EAAE,GAAb,EAAkByC,CAAC,EAAE,GAArB,EAA0BC,CAAC,EAAE,GAA7B,EAFd;AAGEC,MAAAA,MAAM,EAAE,OAHV;AAIEC,MAAAA,OAAO,EAAE,OAJX,EADgB,CADiB;;;AASnCrB,IAAAA,sBATmC,EAAxB,CAAb;;;AAYA;AACA;AACA;AACAa,EAAAA,IAAI,CAACS,WAAL;AACErC,EAAAA,CAAC,CAACI,MAAF,CAASkC,oBAAT,CAA8B;AAC5BC,IAAAA,MAAM,EAAE,MADoB;AAE5BC,IAAAA,MAAM,EAAE;AACNC,MAAAA,MAAM,EAAEzC,CAAC,CAACI,MAAF,CAASsC,kBAAT,CAA4B;AAClCC,QAAAA,IAAI,EAAG;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAb8C,EAA5B,CADF;;AAgBNC,MAAAA,UAAU,EAAE,MAhBN,EAFoB;;AAoB5BC,IAAAA,QAAQ,EAAE;AACRJ,MAAAA,MAAM,EAAEzC,CAAC,CAACI,MAAF,CAASsC,kBAAT,CAA4B;AAClCC,QAAAA,IAAI,EAAG;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAZ8C,EAA5B,CADA;;AAeRC,MAAAA,UAAU,EAAE,MAfJ;AAgBRE,MAAAA,OAAO,EAAE,CAAC,EAAE5C,MAAF,EAAD,CAhBD,EApBkB;;AAsC5B6C,IAAAA,SAAS,EAAE;AACTC,MAAAA,QAAQ,EAAEhD,CAAC,CAACL,MAAF,CAASsD,iBADV;AAET9D,MAAAA,SAAS,EAAEa,CAAC,CAACL,MAAF,CAASR,SAFX;AAGTC,MAAAA,QAAQ,EAAEY,CAAC,CAACL,MAAF,CAASP,QAHV,EAtCiB;;AA2C5B8D,IAAAA,YAAY,EAAErC,YAAY;AACtB,MAAEX,MAAM,EAAEF,CAAC,CAACL,MAAF,CAASqB,kBAAnB,EADsB;AAEtBF,IAAAA,SA7CwB,EAA9B,CADF;;;;AAkDAc,EAAAA,IAAI,CAACuB,IAAL,CAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB;AACAvB,EAAAA,IAAI,CAACwB,GAAL;;AAEApD,EAAAA,CAAC,CAACI,MAAF,CAASiD,KAAT,CAAeC,MAAf,CAAsB,CAAC5B,OAAO,CAAC6B,MAAR,EAAD,CAAtB;;AAEA;AACA,QAAMC,wBAAwB,GAAGnE,SAAS,CAAC,KAAD,EAAQW,CAAC,CAACL,MAAF,CAASR,SAAjB,EAA4Ba,CAAC,CAACL,MAAF,CAASP,QAArC,CAA1C;AACAY,EAAAA,CAAC,CAACyD,4BAAF;AACEtD,EAAAA,OADF;AAEED,EAAAA,MAFF;AAGE,IAAEwD,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAHF;AAIE,IAAEC,GAAG,EAAEJ,wBAAP,EAJF;;;AAOA,QAAMK,2BAA2B,GAAGxE,SAAS,CAAC,IAAD,EAAOW,CAAC,CAACL,MAAF,CAASR,SAAhB,EAA2Ba,CAAC,CAACL,MAAF,CAASP,QAApC,CAA7C;AACAY,EAAAA,CAAC,CAACyD,4BAAF;AACEtD,EAAAA,OADF;AAEED,EAAAA,MAFF;AAGE,IAAEwD,CAAC,EAAEzD,IAAI,GAAG,CAAZ,EAAe0D,CAAC,EAAE1D,IAAI,GAAG,CAAzB,EAHF;AAIE,IAAE2D,GAAG,EAAEC,2BAAP,EAJF;;AAMA;AACD,CA9IH","sourcesContent":["export const description = `Test culling and rasterization state.\n\nTest coverage:\nTest all culling combinations of GPUFrontFace and GPUCullMode show the correct output.\n\nUse 2 triangles with different winding orders:\n\n- Test that the counter-clock wise triangle has correct output for:\n  - All FrontFaces (ccw, cw)\n  - All CullModes (none, front, back)\n  - All depth stencil attachment types (none, depth24plus, depth32float, depth24plus-stencil8)\n  - Some primitive topologies (triangle-list, TODO: triangle-strip)\n\n- Test that the clock wise triangle has correct output for:\n  - All FrontFaces (ccw, cw)\n  - All CullModes (none, front, back)\n  - All depth stencil attachment types (none, depth24plus, depth32float, depth24plus-stencil8)\n  - Some primitive topologies (triangle-list, TODO: triangle-strip)\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { kTextureFormatInfo } from '../../../capability_info.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\nfunction faceIsCulled(face: 'cw' | 'ccw', frontFace: GPUFrontFace, cullMode: GPUCullMode): boolean {\n  return cullMode !== 'none' && (frontFace === face) === (cullMode === 'front');\n}\n\nfunction faceColor(face: 'cw' | 'ccw', frontFace: GPUFrontFace, cullMode: GPUCullMode): Uint8Array {\n  // front facing color is green, non front facing is red, background is blue\n  const isCulled = faceIsCulled(face, frontFace, cullMode);\n  if (!isCulled && face === frontFace) {\n    return new Uint8Array([0x00, 0xff, 0x00, 0xff]);\n  } else if (isCulled) {\n    return new Uint8Array([0x00, 0x00, 0xff, 0xff]);\n  } else {\n    return new Uint8Array([0xff, 0x00, 0x00, 0xff]);\n  }\n}\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('culling')\n  .desc(\n    `\nTODO: test triangle-strip as well [1]\nTODO: check the contents of the depth and stencil outputs [2]\n`\n  )\n  .params(\n    u =>\n      u\n        .combine('frontFace', ['ccw', 'cw'] as const)\n        .combine('cullMode', ['none', 'front', 'back'] as const)\n        .beginSubcases()\n        .combine('depthStencilFormat', [\n          null,\n          'depth24plus',\n          'depth32float',\n          'depth24plus-stencil8',\n        ] as const)\n        .combine('primitiveTopology', ['triangle-list'] as const) // [1]\n  )\n  .fn(t => {\n    const size = 4;\n    const format = 'rgba8unorm';\n\n    const texture = t.device.createTexture({\n      size: { width: size, height: size, depthOrArrayLayers: 1 },\n      format,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n    });\n\n    let depthTexture: GPUTexture | undefined = undefined;\n    let depthStencilAttachment: GPURenderPassDepthStencilAttachment | undefined = undefined;\n    if (t.params.depthStencilFormat) {\n      depthTexture = t.device.createTexture({\n        size: { width: size, height: size, depthOrArrayLayers: 1 },\n        format: t.params.depthStencilFormat,\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      });\n\n      depthStencilAttachment = {\n        view: depthTexture.createView(),\n        depthClearValue: 1.0,\n        depthLoadOp: 'clear',\n        depthStoreOp: 'store',\n      };\n\n      if (t.params.depthStencilFormat && kTextureFormatInfo[t.params.depthStencilFormat].stencil) {\n        depthStencilAttachment.stencilClearValue = 0;\n        depthStencilAttachment.stencilLoadOp = 'clear';\n        depthStencilAttachment.stencilStoreOp = 'store';\n      }\n    }\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: texture.createView(),\n          clearValue: { r: 0.0, g: 0.0, b: 1.0, a: 1.0 },\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n      depthStencilAttachment,\n    });\n\n    // Draw two triangles with different winding orders:\n    // 1. The top-left one is counterclockwise (CCW)\n    // 2. The bottom-right one is clockwise (CW)\n    pass.setPipeline(\n      t.device.createRenderPipeline({\n        layout: 'auto',\n        vertex: {\n          module: t.device.createShaderModule({\n            code: `\n              @vertex fn main(\n                @builtin(vertex_index) VertexIndex : u32\n                ) -> @builtin(position) vec4<f32> {\n                var pos : array<vec2<f32>, 6> = array<vec2<f32>, 6>(\n                    vec2<f32>(-1.0,  1.0),\n                    vec2<f32>(-1.0,  0.0),\n                    vec2<f32>( 0.0,  1.0),\n                    vec2<f32>( 0.0, -1.0),\n                    vec2<f32>( 1.0,  0.0),\n                    vec2<f32>( 1.0, -1.0));\n                return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n              }`,\n          }),\n          entryPoint: 'main',\n        },\n        fragment: {\n          module: t.device.createShaderModule({\n            code: `\n              @fragment fn main(\n                @builtin(front_facing) FrontFacing : bool\n                ) -> @location(0) vec4<f32> {\n                var color : vec4<f32>;\n                if (FrontFacing) {\n                  color = vec4<f32>(0.0, 1.0, 0.0, 1.0);\n                } else {\n                  color = vec4<f32>(1.0, 0.0, 0.0, 1.0);\n                }\n                return color;\n              }`,\n          }),\n          entryPoint: 'main',\n          targets: [{ format }],\n        },\n        primitive: {\n          topology: t.params.primitiveTopology,\n          frontFace: t.params.frontFace,\n          cullMode: t.params.cullMode,\n        },\n        depthStencil: depthTexture\n          ? { format: t.params.depthStencilFormat as GPUTextureFormat }\n          : undefined,\n      })\n    );\n\n    pass.draw(6, 1, 0, 0);\n    pass.end();\n\n    t.device.queue.submit([encoder.finish()]);\n\n    // front facing color is green, non front facing is red, background is blue\n    const kCCWTriangleTopLeftColor = faceColor('ccw', t.params.frontFace, t.params.cullMode);\n    t.expectSinglePixelIn2DTexture(\n      texture,\n      format,\n      { x: 0, y: 0 },\n      { exp: kCCWTriangleTopLeftColor }\n    );\n\n    const kCWTriangleBottomRightColor = faceColor('cw', t.params.frontFace, t.params.cullMode);\n    t.expectSinglePixelIn2DTexture(\n      texture,\n      format,\n      { x: size - 1, y: size - 1 },\n      { exp: kCWTriangleBottomRightColor }\n    );\n    // [2]: check the contents of the depth and stencil outputs\n  });\n"],"file":"culling_tests.spec.js"}