{"version":3,"file":"culling_tests.spec.js","names":["description","makeTestGroup","kTextureFormatInfo","GPUTest","faceIsCulled","face","frontFace","cullMode","faceColor","isCulled","Uint8Array","g","test","desc","params","u","combine","beginSubcases","fn","t","size","format","texture","device","createTexture","width","height","depthOrArrayLayers","usage","GPUTextureUsage","RENDER_ATTACHMENT","COPY_SRC","depthTexture","undefined","depthStencilAttachment","depthStencilFormat","view","createView","depthClearValue","depthLoadOp","depthStoreOp","stencil","stencilClearValue","stencilLoadOp","stencilStoreOp","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","clearValue","r","b","a","loadOp","storeOp","setPipeline","createRenderPipeline","layout","vertex","module","createShaderModule","code","entryPoint","fragment","targets","primitive","topology","primitiveTopology","depthStencil","draw","end","queue","submit","finish","kCCWTriangleTopLeftColor","expectSinglePixelIn2DTexture","x","y","exp","kCWTriangleBottomRightColor"],"sources":["../../../../../src/webgpu/api/operation/render_pipeline/culling_tests.spec.ts"],"sourcesContent":["export const description = `Test culling and rasterization state.\n\nTest coverage:\nTest all culling combinations of GPUFrontFace and GPUCullMode show the correct output.\n\nUse 2 triangles with different winding orders:\n\n- Test that the counter-clock wise triangle has correct output for:\n  - All FrontFaces (ccw, cw)\n  - All CullModes (none, front, back)\n  - All depth stencil attachment types (none, depth24plus, depth32float, depth24plus-stencil8)\n  - Some primitive topologies (triangle-list, TODO: triangle-strip)\n\n- Test that the clock wise triangle has correct output for:\n  - All FrontFaces (ccw, cw)\n  - All CullModes (none, front, back)\n  - All depth stencil attachment types (none, depth24plus, depth32float, depth24plus-stencil8)\n  - Some primitive topologies (triangle-list, TODO: triangle-strip)\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { kTextureFormatInfo } from '../../../capability_info.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\nfunction faceIsCulled(face: 'cw' | 'ccw', frontFace: GPUFrontFace, cullMode: GPUCullMode): boolean {\n  return cullMode !== 'none' && (frontFace === face) === (cullMode === 'front');\n}\n\nfunction faceColor(face: 'cw' | 'ccw', frontFace: GPUFrontFace, cullMode: GPUCullMode): Uint8Array {\n  // front facing color is green, non front facing is red, background is blue\n  const isCulled = faceIsCulled(face, frontFace, cullMode);\n  if (!isCulled && face === frontFace) {\n    return new Uint8Array([0x00, 0xff, 0x00, 0xff]);\n  } else if (isCulled) {\n    return new Uint8Array([0x00, 0x00, 0xff, 0xff]);\n  } else {\n    return new Uint8Array([0xff, 0x00, 0x00, 0xff]);\n  }\n}\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('culling')\n  .desc(\n    `\nTODO: test triangle-strip as well [1]\nTODO: check the contents of the depth and stencil outputs [2]\n`\n  )\n  .params(\n    u =>\n      u\n        .combine('frontFace', ['ccw', 'cw'] as const)\n        .combine('cullMode', ['none', 'front', 'back'] as const)\n        .beginSubcases()\n        .combine('depthStencilFormat', [\n          null,\n          'depth24plus',\n          'depth32float',\n          'depth24plus-stencil8',\n        ] as const)\n        .combine('primitiveTopology', ['triangle-list'] as const) // [1]\n  )\n  .fn(t => {\n    const size = 4;\n    const format = 'rgba8unorm';\n\n    const texture = t.device.createTexture({\n      size: { width: size, height: size, depthOrArrayLayers: 1 },\n      format,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n    });\n\n    let depthTexture: GPUTexture | undefined = undefined;\n    let depthStencilAttachment: GPURenderPassDepthStencilAttachment | undefined = undefined;\n    if (t.params.depthStencilFormat) {\n      depthTexture = t.device.createTexture({\n        size: { width: size, height: size, depthOrArrayLayers: 1 },\n        format: t.params.depthStencilFormat,\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      });\n\n      depthStencilAttachment = {\n        view: depthTexture.createView(),\n        depthClearValue: 1.0,\n        depthLoadOp: 'clear',\n        depthStoreOp: 'store',\n      };\n\n      if (t.params.depthStencilFormat && kTextureFormatInfo[t.params.depthStencilFormat].stencil) {\n        depthStencilAttachment.stencilClearValue = 0;\n        depthStencilAttachment.stencilLoadOp = 'clear';\n        depthStencilAttachment.stencilStoreOp = 'store';\n      }\n    }\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: texture.createView(),\n          clearValue: { r: 0.0, g: 0.0, b: 1.0, a: 1.0 },\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n      depthStencilAttachment,\n    });\n\n    // Draw two triangles with different winding orders:\n    // 1. The top-left one is counterclockwise (CCW)\n    // 2. The bottom-right one is clockwise (CW)\n    pass.setPipeline(\n      t.device.createRenderPipeline({\n        layout: 'auto',\n        vertex: {\n          module: t.device.createShaderModule({\n            code: `\n              @vertex fn main(\n                @builtin(vertex_index) VertexIndex : u32\n                ) -> @builtin(position) vec4<f32> {\n                var pos : array<vec2<f32>, 6> = array<vec2<f32>, 6>(\n                    vec2<f32>(-1.0,  1.0),\n                    vec2<f32>(-1.0,  0.0),\n                    vec2<f32>( 0.0,  1.0),\n                    vec2<f32>( 0.0, -1.0),\n                    vec2<f32>( 1.0,  0.0),\n                    vec2<f32>( 1.0, -1.0));\n                return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n              }`,\n          }),\n          entryPoint: 'main',\n        },\n        fragment: {\n          module: t.device.createShaderModule({\n            code: `\n              @fragment fn main(\n                @builtin(front_facing) FrontFacing : bool\n                ) -> @location(0) vec4<f32> {\n                var color : vec4<f32>;\n                if (FrontFacing) {\n                  color = vec4<f32>(0.0, 1.0, 0.0, 1.0);\n                } else {\n                  color = vec4<f32>(1.0, 0.0, 0.0, 1.0);\n                }\n                return color;\n              }`,\n          }),\n          entryPoint: 'main',\n          targets: [{ format }],\n        },\n        primitive: {\n          topology: t.params.primitiveTopology,\n          frontFace: t.params.frontFace,\n          cullMode: t.params.cullMode,\n        },\n        depthStencil: depthTexture\n          ? { format: t.params.depthStencilFormat as GPUTextureFormat }\n          : undefined,\n      })\n    );\n\n    pass.draw(6, 1, 0, 0);\n    pass.end();\n\n    t.device.queue.submit([encoder.finish()]);\n\n    // front facing color is green, non front facing is red, background is blue\n    const kCCWTriangleTopLeftColor = faceColor('ccw', t.params.frontFace, t.params.cullMode);\n    t.expectSinglePixelIn2DTexture(\n      texture,\n      format,\n      { x: 0, y: 0 },\n      { exp: kCCWTriangleTopLeftColor }\n    );\n\n    const kCWTriangleBottomRightColor = faceColor('cw', t.params.frontFace, t.params.cullMode);\n    t.expectSinglePixelIn2DTexture(\n      texture,\n      format,\n      { x: size - 1, y: size - 1 },\n      { exp: kCWTriangleBottomRightColor }\n    );\n    // [2]: check the contents of the depth and stencil outputs\n  });\n"],"mappings":"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"}