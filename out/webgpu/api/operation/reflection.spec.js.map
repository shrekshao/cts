{"version":3,"sources":["../../../../src/webgpu/api/operation/reflection.spec.ts"],"names":["description","makeTestGroup","GPUConst","GPUTest","g","test","desc","paramsSubcasesOnly","u","combine","size","usage","BufferUsage","VERTEX","STORAGE","COPY_SRC","UNIFORM","MAP_READ","COPY_DST","MAP_WRITE","invalid","fn","t","descriptor","params","expectValidationError","buffer","device","createBuffer","expect","width","height","format","TextureUsage","TEXTURE_BINDING","depthOrArrayLayers","RENDER_ATTACHMENT","mipLevelCount","dimension","sampleCount","Array","isArray","texture","createTexture","type","count","querySet","createQuerySet"],"mappings":"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","sourcesContent":["export const description = `\nTests that object attributes which reflect the object's creation properties are properly set.\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { GPUConst } from '../../constants.js';\nimport { GPUTest } from '../../gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('buffer_reflection_attributes')\n  .desc(`For every buffer attribute, the corresponding descriptor value is carried over.`)\n  .paramsSubcasesOnly(u =>\n    u.combine('descriptor', [\n      { size: 4, usage: GPUConst.BufferUsage.VERTEX },\n      {\n        size: 16,\n        usage:\n          GPUConst.BufferUsage.STORAGE |\n          GPUConst.BufferUsage.COPY_SRC |\n          GPUConst.BufferUsage.UNIFORM,\n      },\n      { size: 32, usage: GPUConst.BufferUsage.MAP_READ | GPUConst.BufferUsage.COPY_DST },\n      {\n        size: 32,\n        usage: GPUConst.BufferUsage.MAP_READ | GPUConst.BufferUsage.MAP_WRITE,\n        invalid: true,\n      },\n    ] as const)\n  )\n  .fn(async t => {\n    const { descriptor } = t.params;\n\n    t.expectValidationError(() => {\n      const buffer = t.device.createBuffer(descriptor);\n\n      t.expect(buffer.size === descriptor.size);\n      t.expect(buffer.usage === descriptor.usage);\n    }, descriptor.invalid === true);\n  });\n\ng.test('texture_reflection_attributes')\n  .desc(`For every texture attribute, the corresponding descriptor value is carried over.`)\n  .paramsSubcasesOnly(u =>\n    u.combine('descriptor', [\n      {\n        size: { width: 4, height: 4 },\n        format: 'rgba8unorm',\n        usage: GPUConst.TextureUsage.TEXTURE_BINDING,\n      },\n      {\n        size: { width: 8, height: 8, depthOrArrayLayers: 8 },\n        format: 'bgra8unorm',\n        usage: GPUConst.TextureUsage.RENDER_ATTACHMENT | GPUConst.TextureUsage.COPY_SRC,\n      },\n      {\n        size: [4, 4],\n        format: 'rgba8unorm',\n        usage: GPUConst.TextureUsage.TEXTURE_BINDING,\n        mipLevelCount: 2,\n      },\n      {\n        size: [16, 16, 16],\n        format: 'rgba8unorm',\n        usage: GPUConst.TextureUsage.TEXTURE_BINDING,\n        dimension: '3d',\n      },\n      {\n        size: [32],\n        format: 'rgba8unorm',\n        usage: GPUConst.TextureUsage.TEXTURE_BINDING,\n        dimension: '1d',\n      },\n      {\n        size: { width: 4, height: 4 },\n        format: 'rgba8unorm',\n        usage: GPUConst.TextureUsage.RENDER_ATTACHMENT,\n        sampleCount: 4,\n      },\n      {\n        size: { width: 4, height: 4 },\n        format: 'rgba8unorm',\n        usage: GPUConst.TextureUsage.TEXTURE_BINDING,\n        sampleCount: 4,\n        invalid: true,\n      },\n    ] as const)\n  )\n  .fn(async t => {\n    const { descriptor } = t.params;\n\n    let width: number;\n    let height: number;\n    let depthOrArrayLayers: number;\n    if (Array.isArray(descriptor.size)) {\n      width = descriptor.size[0];\n      height = descriptor.size[1] || 1;\n      depthOrArrayLayers = descriptor.size[2] || 1;\n    } else {\n      width = (descriptor.size as GPUExtent3DDict).width;\n      height = (descriptor.size as GPUExtent3DDict).height || 1;\n      depthOrArrayLayers = (descriptor.size as GPUExtent3DDict).depthOrArrayLayers || 1;\n    }\n\n    t.expectValidationError(() => {\n      const texture = t.device.createTexture(descriptor);\n\n      t.expect(texture.width === width);\n      t.expect(texture.height === height);\n      t.expect(texture.depthOrArrayLayers === depthOrArrayLayers);\n      t.expect(texture.format === descriptor.format);\n      t.expect(texture.usage === descriptor.usage);\n      t.expect(texture.dimension === (descriptor.dimension || '2d'));\n      t.expect(texture.mipLevelCount === (descriptor.mipLevelCount || 1));\n      t.expect(texture.sampleCount === (descriptor.sampleCount || 1));\n    }, descriptor.invalid === true);\n  });\n\ng.test('query_set_reflection_attributes')\n  .desc(`For every queue attribute, the corresponding descriptor value is carried over.`)\n  .paramsSubcasesOnly(u =>\n    u.combine('descriptor', [\n      { type: 'occlusion', count: 4 },\n      { type: 'occlusion', count: 16 },\n      { type: 'occlusion', count: 8193, invalid: true },\n    ] as const)\n  )\n  .fn(async t => {\n    const { descriptor } = t.params;\n\n    t.expectValidationError(() => {\n      const querySet = t.device.createQuerySet(descriptor);\n\n      t.expect(querySet.type === descriptor.type);\n      t.expect(querySet.count === descriptor.count);\n    }, descriptor.invalid === true);\n  });\n"],"file":"reflection.spec.js"}