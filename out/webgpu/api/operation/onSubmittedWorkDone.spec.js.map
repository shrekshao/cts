{"version":3,"sources":["../../../../src/webgpu/api/operation/onSubmittedWorkDone.spec.ts"],"names":["description","makeTestGroup","range","GPUTest","g","test","desc","fn","t","queue","onSubmittedWorkDone","buffer","device","createBuffer","size","usage","GPUBufferUsage","COPY_DST","writeBuffer","Uint8Array","i","promises","Promise","all","lastResolved","push","then","expect"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA,CAJO,CAMP,SAASC,aAAT,QAA8B,yCAA9B;AACA,SAASC,KAAT,QAAsB,8BAAtB;AACA,SAASC,OAAT,QAAwB,mBAAxB;;AAEA,OAAO,MAAMC,CAAC,GAAGH,aAAa,CAACE,OAAD,CAAvB;;AAEPC,CAAC,CAACC,IAAF,CAAO,cAAP;AACGC,IADH,CACS,mEADT;AAEGC,EAFH,CAEM,OAAMC,CAAN,KAAW;AACb,QAAMA,CAAC,CAACC,KAAF,CAAQC,mBAAR,EAAN;AACD,CAJH;;AAMAN,CAAC,CAACC,IAAF,CAAO,WAAP;AACGC,IADH,CACS,0EADT;AAEGC,EAFH,CAEM,OAAMC,CAAN,KAAW;AACb,QAAMG,MAAM,GAAGH,CAAC,CAACI,MAAF,CAASC,YAAT,CAAsB,EAAEC,IAAI,EAAE,CAAR,EAAWC,KAAK,EAAEC,cAAc,CAACC,QAAjC,EAAtB,CAAf;AACAT,EAAAA,CAAC,CAACC,KAAF,CAAQS,WAAR,CAAoBP,MAApB,EAA4B,CAA5B,EAA+B,IAAIQ,UAAJ,CAAe,CAAf,CAA/B;AACA,QAAMX,CAAC,CAACC,KAAF,CAAQC,mBAAR,EAAN;AACD,CANH;;AAQAN,CAAC,CAACC,IAAF,CAAO,aAAP;AACGC,IADH,CACS,iDADT;AAEGC,EAFH,CAEM,OAAMC,CAAN,KAAW;AACb,OAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,IAApB,EAA0B,EAAEA,CAA5B,EAA+B;AAC7B,UAAMZ,CAAC,CAACC,KAAF,CAAQC,mBAAR,EAAN;AACD;AACF,CANH;;AAQAN,CAAC,CAACC,IAAF,CAAO,eAAP;AACGC,IADH,CACS,sEADT;AAEGC,EAFH,CAEM,OAAMC,CAAN,KAAW;AACb,QAAMa,QAAQ,GAAGnB,KAAK,CAAC,IAAD,EAAO,MAAMM,CAAC,CAACC,KAAF,CAAQC,mBAAR,EAAb,CAAtB;AACA,QAAMY,OAAO,CAACC,GAAR,CAAYF,QAAZ,CAAN;AACD,CALH;;AAOAjB,CAAC,CAACC,IAAF,CAAO,qBAAP;AACGC,IADH,CACS,oFADT;AAEGC,EAFH,CAEM,OAAMC,CAAN,KAAW;AACb,QAAMa,QAAQ,GAAG,EAAjB;AACA,MAAIG,YAAY,GAAG,CAAC,CAApB;AACA,OAAK,MAAMJ,CAAX,IAAgBlB,KAAK,CAAC,GAAD,EAAM,CAAAkB,CAAC,KAAIA,CAAX,CAArB,EAAoC;AAClCC,IAAAA,QAAQ,CAACI,IAAT;AACEjB,IAAAA,CAAC,CAACC,KAAF,CAAQC,mBAAR,GAA8BgB,IAA9B,CAAmC,MAAM;AACvClB,MAAAA,CAAC,CAACmB,MAAF,CAASP,CAAC,KAAKI,YAAY,GAAG,CAA9B;AACAA,MAAAA,YAAY;AACb,KAHD,CADF;;AAMD;AACD,QAAMF,OAAO,CAACC,GAAR,CAAYF,QAAZ,CAAN;AACD,CAdH","sourcesContent":["export const description = `\nTests for the behavior of GPUQueue.onSubmittedWorkDone().\n\nNote that any promise timeouts will be detected by the framework.\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { range } from '../../../common/util/util.js';\nimport { GPUTest } from '../../gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('without_work')\n  .desc(`Await onSubmittedWorkDone once without having submitted any work.`)\n  .fn(async t => {\n    await t.queue.onSubmittedWorkDone();\n  });\n\ng.test('with_work')\n  .desc(`Await onSubmittedWorkDone once after submitting some work (writeBuffer).`)\n  .fn(async t => {\n    const buffer = t.device.createBuffer({ size: 4, usage: GPUBufferUsage.COPY_DST });\n    t.queue.writeBuffer(buffer, 0, new Uint8Array(4));\n    await t.queue.onSubmittedWorkDone();\n  });\n\ng.test('many,serial')\n  .desc(`Await 1000 onSubmittedWorkDone calls in serial.`)\n  .fn(async t => {\n    for (let i = 0; i < 1000; ++i) {\n      await t.queue.onSubmittedWorkDone();\n    }\n  });\n\ng.test('many,parallel')\n  .desc(`Await 1000 onSubmittedWorkDone calls in parallel with Promise.all().`)\n  .fn(async t => {\n    const promises = range(1000, () => t.queue.onSubmittedWorkDone());\n    await Promise.all(promises);\n  });\n\ng.test('many,parallel_order')\n  .desc(`Issue 200 onSubmittedWorkDone calls and make sure they resolve in the right order.`)\n  .fn(async t => {\n    const promises = [];\n    let lastResolved = -1;\n    for (const i of range(200, i => i)) {\n      promises.push(\n        t.queue.onSubmittedWorkDone().then(() => {\n          t.expect(i === lastResolved + 1);\n          lastResolved++;\n        })\n      );\n    }\n    await Promise.all(promises);\n  });\n"],"file":"onSubmittedWorkDone.spec.js"}