{"version":3,"sources":["../../../../../src/webgpu/api/operation/resource_init/texture_zero.spec.ts"],"names":["description","kUnitCaseParamsBuilder","makeTestGroup","assert","unreachable","kTextureFormatInfo","kTextureAspects","kUncompressedTextureFormats","textureDimensionAndFormatCompatible","kTextureDimensions","GPUConst","GPUTest","virtualMipSize","createTextureUploadBuffer","SubresourceRange","kTexelRepresentationInfo","UninitializeMethod","kUninitializeMethods","Object","keys","ReadMethod","kMipLevelCounts","kUninitializedMipRangesToTest","begin","end","kSampleCounts","kUninitializedLayerRangesToTest","InitializedState","initializedStateAsFloat","Zero","Canary","initializedStateAsUint","initializedStateAsSint","initializedStateAsColor","state","format","value","indexOf","initializedStateAsDepth","initializedStateAsStencil","getRequiredTextureUsage","sampleCount","uninitializeMethod","readMethod","usage","TextureUsage","COPY_DST","Creation","StoreOpClear","RENDER_ATTACHMENT","CopyToBuffer","CopyToTexture","COPY_SRC","Sample","TEXTURE_BINDING","Storage","STORAGE_BINDING","DepthTest","StencilTest","ColorBlending","copyDst","renderable","TextureZeroInitTest","constructor","sharedState","rec","params","p","stateToTexelComponents","R","G","B","A","Depth","Stencil","textureWidth","width","mipLevelCount","nonPowerOfTwo","textureHeight","dimension","height","textureDepth","textureDepthOrArrayLayers","layerCount","iterateUninitializedSubresources","mipRange","layerRange","iterateInitializedSubresources","uninitialized","Array","level","length","subresources","layer","each","count","generateTextureViewDescriptorsForRendering","aspect","subresourceRange","viewDescriptor","undefined","baseMipLevel","baseArrayLayer","arrayLayerCount","initializeWithStoreOp","texture","commandEncoder","device","createCommandEncoder","pushDebugGroup","color","beginRenderPass","colorAttachments","view","createView","storeOp","clearValue","loadOp","depthStencilAttachment","depth","depthClearValue","depthLoadOp","depthStoreOp","stencil","stencilClearValue","stencilLoadOp","stencilStoreOp","popDebugGroup","queue","submit","finish","initializeWithCopy","firstSubresource","next","largestWidth","largestHeight","largestDepth","rep","texelData","Uint8Array","pack","encode","buffer","bytesPerRow","rowsPerImage","copyBufferToTexture","mipLevel","origin","x","y","z","depthOrArrayLayers","destroy","initializeTexture","discardTexture","desc","kTestParams","combine","filter","beginSubcases","unless","info","formatInfo","expandWithParams","storage","multisample","canaryOnCreation","canInitialize","checkContentsByBufferCopy","checkContentsByTextureCopy","checkContentsByDepthTest","checkContentsByStencilTest","checkContentsBySampling","checkContentsImpl","t","skip","g","test","beforeAllSubcases","selectDeviceOrSkipTestCase","feature","fn","createTexture","size"],"mappings":"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","sourcesContent":["export const description = `\nTest uninitialized textures are initialized to zero when read.\n\nTODO:\n- test by sampling depth/stencil [1]\n- test by copying out of stencil [2]\n- test compressed texture formats [3]\n`;\n\n// MAINTENANCE_TODO: This is a test file, it probably shouldn't export anything.\n// Everything that's exported should be moved to another file.\n\nimport { TestCaseRecorder, TestParams } from '../../../../common/framework/fixture.js';\nimport {\n  kUnitCaseParamsBuilder,\n  ParamTypeOf,\n} from '../../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert, unreachable } from '../../../../common/util/util.js';\nimport {\n  kTextureFormatInfo,\n  kTextureAspects,\n  kUncompressedTextureFormats,\n  EncodableTextureFormat,\n  UncompressedTextureFormat,\n  textureDimensionAndFormatCompatible,\n  kTextureDimensions,\n} from '../../../capability_info.js';\nimport { GPUConst } from '../../../constants.js';\nimport { GPUTest, GPUTestSubcaseBatchState } from '../../../gpu_test.js';\nimport { virtualMipSize } from '../../../util/texture/base.js';\nimport { createTextureUploadBuffer } from '../../../util/texture/layout.js';\nimport { BeginEndRange, SubresourceRange } from '../../../util/texture/subresource.js';\nimport { PerTexelComponent, kTexelRepresentationInfo } from '../../../util/texture/texel_data.js';\n\nexport enum UninitializeMethod {\n  Creation = 'Creation', // The texture was just created. It is uninitialized.\n  StoreOpClear = 'StoreOpClear', // The texture was rendered to with GPUStoreOp \"clear\"\n}\nconst kUninitializeMethods = Object.keys(UninitializeMethod) as UninitializeMethod[];\n\nexport const enum ReadMethod {\n  Sample = 'Sample', // The texture is sampled from\n  CopyToBuffer = 'CopyToBuffer', // The texture is copied to a buffer\n  CopyToTexture = 'CopyToTexture', // The texture is copied to another texture\n  DepthTest = 'DepthTest', // The texture is read as a depth buffer\n  StencilTest = 'StencilTest', // The texture is read as a stencil buffer\n  ColorBlending = 'ColorBlending', // Read the texture by blending as a color attachment\n  Storage = 'Storage', // Read the texture as a storage texture\n}\n\n// Test with these mip level counts\ntype MipLevels = 1 | 5;\nconst kMipLevelCounts: MipLevels[] = [1, 5];\n\n// For each mip level count, define the mip ranges to leave uninitialized.\nconst kUninitializedMipRangesToTest: { [k in MipLevels]: BeginEndRange[] } = {\n  1: [{ begin: 0, end: 1 }], // Test the only mip\n  5: [\n    { begin: 0, end: 2 },\n    { begin: 3, end: 4 },\n  ], // Test a range and a single mip\n};\n\n// Test with these sample counts.\nconst kSampleCounts: number[] = [1, 4];\n\n// Test with these layer counts.\ntype LayerCounts = 1 | 7;\n\n// For each layer count, define the layers to leave uninitialized.\nconst kUninitializedLayerRangesToTest: { [k in LayerCounts]: BeginEndRange[] } = {\n  1: [{ begin: 0, end: 1 }], // Test the only layer\n  7: [\n    { begin: 2, end: 4 },\n    { begin: 6, end: 7 },\n  ], // Test a range and a single layer\n};\n\n// Enums to abstract over color / depth / stencil values in textures. Depending on the texture format,\n// the data for each value may have a different representation. These enums are converted to a\n// representation such that their values can be compared. ex.) An integer is needed to upload to an\n// unsigned normalized format, but its value is read as a float in the shader.\nexport const enum InitializedState {\n  Canary, // Set on initialized subresources. It should stay the same. On discarded resources, we should observe zero.\n  Zero, // We check that uninitialized subresources are in this state when read back.\n}\n\nconst initializedStateAsFloat = {\n  [InitializedState.Zero]: 0,\n  [InitializedState.Canary]: 1,\n};\n\nconst initializedStateAsUint = {\n  [InitializedState.Zero]: 0,\n  [InitializedState.Canary]: 1,\n};\n\nconst initializedStateAsSint = {\n  [InitializedState.Zero]: 0,\n  [InitializedState.Canary]: -1,\n};\n\nfunction initializedStateAsColor(\n  state: InitializedState,\n  format: GPUTextureFormat\n): [number, number, number, number] {\n  let value;\n  if (format.indexOf('uint') !== -1) {\n    value = initializedStateAsUint[state];\n  } else if (format.indexOf('sint') !== -1) {\n    value = initializedStateAsSint[state];\n  } else {\n    value = initializedStateAsFloat[state];\n  }\n  return [value, value, value, value];\n}\n\nconst initializedStateAsDepth = {\n  [InitializedState.Zero]: 0,\n  [InitializedState.Canary]: 0.8,\n};\n\nconst initializedStateAsStencil = {\n  [InitializedState.Zero]: 0,\n  [InitializedState.Canary]: 42,\n};\n\nfunction getRequiredTextureUsage(\n  format: UncompressedTextureFormat,\n  sampleCount: number,\n  uninitializeMethod: UninitializeMethod,\n  readMethod: ReadMethod\n): GPUTextureUsageFlags {\n  let usage: GPUTextureUsageFlags = GPUConst.TextureUsage.COPY_DST;\n\n  switch (uninitializeMethod) {\n    case UninitializeMethod.Creation:\n      break;\n    case UninitializeMethod.StoreOpClear:\n      usage |= GPUConst.TextureUsage.RENDER_ATTACHMENT;\n      break;\n    default:\n      unreachable();\n  }\n\n  switch (readMethod) {\n    case ReadMethod.CopyToBuffer:\n    case ReadMethod.CopyToTexture:\n      usage |= GPUConst.TextureUsage.COPY_SRC;\n      break;\n    case ReadMethod.Sample:\n      usage |= GPUConst.TextureUsage.TEXTURE_BINDING;\n      break;\n    case ReadMethod.Storage:\n      usage |= GPUConst.TextureUsage.STORAGE_BINDING;\n      break;\n    case ReadMethod.DepthTest:\n    case ReadMethod.StencilTest:\n    case ReadMethod.ColorBlending:\n      usage |= GPUConst.TextureUsage.RENDER_ATTACHMENT;\n      break;\n    default:\n      unreachable();\n  }\n\n  if (sampleCount > 1) {\n    // Copies to multisampled textures are not allowed. We need OutputAttachment to initialize\n    // canary data in multisampled textures.\n    usage |= GPUConst.TextureUsage.RENDER_ATTACHMENT;\n  }\n\n  if (!kTextureFormatInfo[format].copyDst) {\n    // Copies are not possible. We need OutputAttachment to initialize\n    // canary data.\n    assert(kTextureFormatInfo[format].renderable);\n    usage |= GPUConst.TextureUsage.RENDER_ATTACHMENT;\n  }\n\n  return usage;\n}\n\nexport class TextureZeroInitTest extends GPUTest {\n  readonly stateToTexelComponents: { [k in InitializedState]: PerTexelComponent<number> };\n\n  private p: TextureZeroParams;\n  constructor(sharedState: GPUTestSubcaseBatchState, rec: TestCaseRecorder, params: TestParams) {\n    super(sharedState, rec, params);\n    this.p = params as TextureZeroParams;\n\n    const stateToTexelComponents = (state: InitializedState) => {\n      const [R, G, B, A] = initializedStateAsColor(state, this.p.format);\n      return {\n        R,\n        G,\n        B,\n        A,\n        Depth: initializedStateAsDepth[state],\n        Stencil: initializedStateAsStencil[state],\n      };\n    };\n\n    this.stateToTexelComponents = {\n      [InitializedState.Zero]: stateToTexelComponents(InitializedState.Zero),\n      [InitializedState.Canary]: stateToTexelComponents(InitializedState.Canary),\n    };\n  }\n\n  get textureWidth(): number {\n    let width = 1 << this.p.mipLevelCount;\n    if (this.p.nonPowerOfTwo) {\n      width = 2 * width - 1;\n    }\n    return width;\n  }\n\n  get textureHeight(): number {\n    if (this.p.dimension === '1d') {\n      return 1;\n    }\n\n    let height = 1 << this.p.mipLevelCount;\n    if (this.p.nonPowerOfTwo) {\n      height = 2 * height - 1;\n    }\n    return height;\n  }\n\n  get textureDepth(): number {\n    return this.p.dimension === '3d' ? 11 : 1;\n  }\n\n  get textureDepthOrArrayLayers(): number {\n    return this.p.dimension === '2d' ? this.p.layerCount : this.textureDepth;\n  }\n\n  // Used to iterate subresources and check that their uninitialized contents are zero when accessed\n  *iterateUninitializedSubresources(): Generator<SubresourceRange> {\n    for (const mipRange of kUninitializedMipRangesToTest[this.p.mipLevelCount]) {\n      for (const layerRange of kUninitializedLayerRangesToTest[this.p.layerCount]) {\n        yield new SubresourceRange({ mipRange, layerRange });\n      }\n    }\n  }\n\n  // Used to iterate and initialize other subresources not checked for zero-initialization.\n  // Zero-initialization of uninitialized subresources should not have side effects on already\n  // initialized subresources.\n  *iterateInitializedSubresources(): Generator<SubresourceRange> {\n    const uninitialized: boolean[][] = new Array(this.p.mipLevelCount);\n    for (let level = 0; level < uninitialized.length; ++level) {\n      uninitialized[level] = new Array(this.p.layerCount);\n    }\n    for (const subresources of this.iterateUninitializedSubresources()) {\n      for (const { level, layer } of subresources.each()) {\n        uninitialized[level][layer] = true;\n      }\n    }\n    for (let level = 0; level < uninitialized.length; ++level) {\n      for (let layer = 0; layer < uninitialized[level].length; ++layer) {\n        if (!uninitialized[level][layer]) {\n          yield new SubresourceRange({\n            mipRange: { begin: level, count: 1 },\n            layerRange: { begin: layer, count: 1 },\n          });\n        }\n      }\n    }\n  }\n\n  *generateTextureViewDescriptorsForRendering(\n    aspect: GPUTextureAspect,\n    subresourceRange?: SubresourceRange\n  ): Generator<GPUTextureViewDescriptor> {\n    const viewDescriptor: GPUTextureViewDescriptor = {\n      dimension: '2d',\n      aspect,\n    };\n\n    if (subresourceRange === undefined) {\n      return viewDescriptor;\n    }\n\n    for (const { level, layer } of subresourceRange.each()) {\n      yield {\n        ...viewDescriptor,\n        baseMipLevel: level,\n        mipLevelCount: 1,\n        baseArrayLayer: layer,\n        arrayLayerCount: 1,\n      };\n    }\n  }\n\n  private initializeWithStoreOp(\n    state: InitializedState,\n    texture: GPUTexture,\n    subresourceRange?: SubresourceRange\n  ): void {\n    const commandEncoder = this.device.createCommandEncoder();\n    commandEncoder.pushDebugGroup('initializeWithStoreOp');\n\n    for (const viewDescriptor of this.generateTextureViewDescriptorsForRendering(\n      'all',\n      subresourceRange\n    )) {\n      if (kTextureFormatInfo[this.p.format].color) {\n        commandEncoder\n          .beginRenderPass({\n            colorAttachments: [\n              {\n                view: texture.createView(viewDescriptor),\n                storeOp: 'store',\n                clearValue: initializedStateAsColor(state, this.p.format),\n                loadOp: 'clear',\n              },\n            ],\n          })\n          .end();\n      } else {\n        const depthStencilAttachment: GPURenderPassDepthStencilAttachment = {\n          view: texture.createView(viewDescriptor),\n        };\n        if (kTextureFormatInfo[this.p.format].depth) {\n          depthStencilAttachment.depthClearValue = initializedStateAsDepth[state];\n          depthStencilAttachment.depthLoadOp = 'clear';\n          depthStencilAttachment.depthStoreOp = 'store';\n        }\n        if (kTextureFormatInfo[this.p.format].stencil) {\n          depthStencilAttachment.stencilClearValue = initializedStateAsStencil[state];\n          depthStencilAttachment.stencilLoadOp = 'clear';\n          depthStencilAttachment.stencilStoreOp = 'store';\n        }\n        commandEncoder\n          .beginRenderPass({\n            colorAttachments: [],\n            depthStencilAttachment,\n          })\n          .end();\n      }\n    }\n\n    commandEncoder.popDebugGroup();\n    this.queue.submit([commandEncoder.finish()]);\n  }\n\n  private initializeWithCopy(\n    texture: GPUTexture,\n    state: InitializedState,\n    subresourceRange: SubresourceRange\n  ): void {\n    assert(this.p.format in kTextureFormatInfo);\n    const format = this.p.format as EncodableTextureFormat;\n\n    const firstSubresource = subresourceRange.each().next().value;\n    assert(typeof firstSubresource !== 'undefined');\n\n    const [largestWidth, largestHeight, largestDepth] = virtualMipSize(\n      this.p.dimension,\n      [this.textureWidth, this.textureHeight, this.textureDepth],\n      firstSubresource.level\n    );\n\n    const rep = kTexelRepresentationInfo[format];\n    const texelData = new Uint8Array(rep.pack(rep.encode(this.stateToTexelComponents[state])));\n    const { buffer, bytesPerRow, rowsPerImage } = createTextureUploadBuffer(\n      texelData,\n      this.device,\n      format,\n      this.p.dimension,\n      [largestWidth, largestHeight, largestDepth]\n    );\n\n    const commandEncoder = this.device.createCommandEncoder();\n\n    for (const { level, layer } of subresourceRange.each()) {\n      const [width, height, depth] = virtualMipSize(\n        this.p.dimension,\n        [this.textureWidth, this.textureHeight, this.textureDepth],\n        level\n      );\n\n      commandEncoder.copyBufferToTexture(\n        {\n          buffer,\n          bytesPerRow,\n          rowsPerImage,\n        },\n        { texture, mipLevel: level, origin: { x: 0, y: 0, z: layer } },\n        { width, height, depthOrArrayLayers: depth }\n      );\n    }\n    this.queue.submit([commandEncoder.finish()]);\n    buffer.destroy();\n  }\n\n  initializeTexture(\n    texture: GPUTexture,\n    state: InitializedState,\n    subresourceRange: SubresourceRange\n  ): void {\n    if (this.p.sampleCount > 1 || !kTextureFormatInfo[this.p.format].copyDst) {\n      // Copies to multisampled textures not yet specified.\n      // Use a storeOp for now.\n      assert(kTextureFormatInfo[this.p.format].renderable);\n      this.initializeWithStoreOp(state, texture, subresourceRange);\n    } else {\n      this.initializeWithCopy(texture, state, subresourceRange);\n    }\n  }\n\n  discardTexture(texture: GPUTexture, subresourceRange: SubresourceRange): void {\n    const commandEncoder = this.device.createCommandEncoder();\n    commandEncoder.pushDebugGroup('discardTexture');\n\n    for (const desc of this.generateTextureViewDescriptorsForRendering('all', subresourceRange)) {\n      if (kTextureFormatInfo[this.p.format].color) {\n        commandEncoder\n          .beginRenderPass({\n            colorAttachments: [\n              {\n                view: texture.createView(desc),\n                storeOp: 'discard',\n                loadOp: 'load',\n              },\n            ],\n          })\n          .end();\n      } else {\n        const depthStencilAttachment: GPURenderPassDepthStencilAttachment = {\n          view: texture.createView(desc),\n        };\n        if (kTextureFormatInfo[this.p.format].depth) {\n          depthStencilAttachment.depthLoadOp = 'load';\n          depthStencilAttachment.depthStoreOp = 'discard';\n        }\n        if (kTextureFormatInfo[this.p.format].stencil) {\n          depthStencilAttachment.stencilLoadOp = 'load';\n          depthStencilAttachment.stencilStoreOp = 'discard';\n        }\n        commandEncoder\n          .beginRenderPass({\n            colorAttachments: [],\n            depthStencilAttachment,\n          })\n          .end();\n      }\n    }\n\n    commandEncoder.popDebugGroup();\n    this.queue.submit([commandEncoder.finish()]);\n  }\n}\n\nconst kTestParams = kUnitCaseParamsBuilder\n  .combine('dimension', kTextureDimensions)\n  .combine('readMethod', [\n    ReadMethod.CopyToBuffer,\n    ReadMethod.CopyToTexture,\n    ReadMethod.Sample,\n    ReadMethod.DepthTest,\n    ReadMethod.StencilTest,\n  ])\n  // [3] compressed formats\n  .combine('format', kUncompressedTextureFormats)\n  .filter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format))\n  .beginSubcases()\n  .combine('aspect', kTextureAspects)\n  .unless(({ readMethod, format, aspect }) => {\n    const info = kTextureFormatInfo[format];\n    return (\n      (readMethod === ReadMethod.DepthTest && (!info.depth || aspect === 'stencil-only')) ||\n      (readMethod === ReadMethod.StencilTest && (!info.stencil || aspect === 'depth-only')) ||\n      (readMethod === ReadMethod.ColorBlending && !info.color) ||\n      // [1]: Test with depth/stencil sampling\n      (readMethod === ReadMethod.Sample && (info.depth || info.stencil)) ||\n      (aspect === 'depth-only' && !info.depth) ||\n      (aspect === 'stencil-only' && !info.stencil) ||\n      (aspect === 'all' && info.depth && info.stencil) ||\n      // Cannot copy from a packed depth format.\n      // [2]: Test copying out of the stencil aspect.\n      ((readMethod === ReadMethod.CopyToBuffer || readMethod === ReadMethod.CopyToTexture) &&\n        (format === 'depth24plus' || format === 'depth24plus-stencil8'))\n    );\n  })\n  .combine('mipLevelCount', kMipLevelCounts)\n  // 1D texture can only have a single mip level\n  .unless(p => p.dimension === '1d' && p.mipLevelCount !== 1)\n  .combine('sampleCount', kSampleCounts)\n  .unless(\n    ({ readMethod, sampleCount }) =>\n      // We can only read from multisampled textures by sampling.\n      sampleCount > 1 &&\n      (readMethod === ReadMethod.CopyToBuffer || readMethod === ReadMethod.CopyToTexture)\n  )\n  // Multisampled textures may only have one mip\n  .unless(({ sampleCount, mipLevelCount }) => sampleCount > 1 && mipLevelCount > 1)\n  .combine('uninitializeMethod', kUninitializeMethods)\n  .unless(({ dimension, readMethod, uninitializeMethod, format, sampleCount }) => {\n    const formatInfo = kTextureFormatInfo[format];\n    return (\n      dimension !== '2d' &&\n      (sampleCount > 1 ||\n        formatInfo.depth ||\n        formatInfo.stencil ||\n        readMethod === ReadMethod.DepthTest ||\n        readMethod === ReadMethod.StencilTest ||\n        readMethod === ReadMethod.ColorBlending ||\n        uninitializeMethod === UninitializeMethod.StoreOpClear)\n    );\n  })\n  .expandWithParams(function* ({ dimension }) {\n    switch (dimension) {\n      case '2d':\n        yield { layerCount: 1 as LayerCounts };\n        yield { layerCount: 7 as LayerCounts };\n        break;\n      case '1d':\n      case '3d':\n        yield { layerCount: 1 as LayerCounts };\n        break;\n    }\n  })\n  // Multisampled 3D / 2D array textures not supported.\n  .unless(({ sampleCount, layerCount }) => sampleCount > 1 && layerCount > 1)\n  .unless(({ format, sampleCount, uninitializeMethod, readMethod }) => {\n    const usage = getRequiredTextureUsage(format, sampleCount, uninitializeMethod, readMethod);\n    const info = kTextureFormatInfo[format];\n\n    return (\n      ((usage & GPUConst.TextureUsage.RENDER_ATTACHMENT) !== 0 && !info.renderable) ||\n      ((usage & GPUConst.TextureUsage.STORAGE_BINDING) !== 0 && !info.storage) ||\n      (sampleCount > 1 && !info.multisample)\n    );\n  })\n  .combine('nonPowerOfTwo', [false, true])\n  .combine('canaryOnCreation', [false, true])\n  .filter(({ canaryOnCreation, format }) => {\n    // We can only initialize the texture if it's encodable or renderable.\n    const canInitialize = format in kTextureFormatInfo || kTextureFormatInfo[format].renderable;\n\n    // Filter out cases where we want canary values but can't initialize.\n    return !canaryOnCreation || canInitialize;\n  });\n\ntype TextureZeroParams = ParamTypeOf<typeof kTestParams>;\n\nexport type CheckContents = (\n  t: TextureZeroInitTest,\n  params: TextureZeroParams,\n  texture: GPUTexture,\n  state: InitializedState,\n  subresourceRange: SubresourceRange\n) => void;\n\nimport { checkContentsByBufferCopy, checkContentsByTextureCopy } from './check_texture/by_copy.js';\nimport {\n  checkContentsByDepthTest,\n  checkContentsByStencilTest,\n} from './check_texture/by_ds_test.js';\nimport { checkContentsBySampling } from './check_texture/by_sampling.js';\n\nconst checkContentsImpl: { [k in ReadMethod]: CheckContents } = {\n  Sample: checkContentsBySampling,\n  CopyToBuffer: checkContentsByBufferCopy,\n  CopyToTexture: checkContentsByTextureCopy,\n  DepthTest: checkContentsByDepthTest,\n  StencilTest: checkContentsByStencilTest,\n  ColorBlending: t => t.skip('Not implemented'),\n  Storage: t => t.skip('Not implemented'),\n};\n\nexport const g = makeTestGroup(TextureZeroInitTest);\n\ng.test('uninitialized_texture_is_zero')\n  .params(kTestParams)\n  .beforeAllSubcases(t => {\n    t.selectDeviceOrSkipTestCase(kTextureFormatInfo[t.params.format].feature);\n  })\n  .fn(async t => {\n    const usage = getRequiredTextureUsage(\n      t.params.format,\n      t.params.sampleCount,\n      t.params.uninitializeMethod,\n      t.params.readMethod\n    );\n\n    const texture = t.device.createTexture({\n      size: [t.textureWidth, t.textureHeight, t.textureDepthOrArrayLayers],\n      format: t.params.format,\n      dimension: t.params.dimension,\n      usage,\n      mipLevelCount: t.params.mipLevelCount,\n      sampleCount: t.params.sampleCount,\n    });\n\n    if (t.params.canaryOnCreation) {\n      // Initialize some subresources with canary values\n      for (const subresourceRange of t.iterateInitializedSubresources()) {\n        t.initializeTexture(texture, InitializedState.Canary, subresourceRange);\n      }\n    }\n\n    switch (t.params.uninitializeMethod) {\n      case UninitializeMethod.Creation:\n        break;\n      case UninitializeMethod.StoreOpClear:\n        // Initialize the rest of the resources.\n        for (const subresourceRange of t.iterateUninitializedSubresources()) {\n          t.initializeTexture(texture, InitializedState.Canary, subresourceRange);\n        }\n        // Then use a store op to discard their contents.\n        for (const subresourceRange of t.iterateUninitializedSubresources()) {\n          t.discardTexture(texture, subresourceRange);\n        }\n        break;\n      default:\n        unreachable();\n    }\n\n    // Check that all uninitialized resources are zero.\n    for (const subresourceRange of t.iterateUninitializedSubresources()) {\n      checkContentsImpl[t.params.readMethod](\n        t,\n        t.params,\n        texture,\n        InitializedState.Zero,\n        subresourceRange\n      );\n    }\n\n    if (t.params.canaryOnCreation) {\n      // Check the all other resources are unchanged.\n      for (const subresourceRange of t.iterateInitializedSubresources()) {\n        checkContentsImpl[t.params.readMethod](\n          t,\n          t.params,\n          texture,\n          InitializedState.Canary,\n          subresourceRange\n        );\n      }\n    }\n  });\n"],"file":"texture_zero.spec.js"}