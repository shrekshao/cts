{"version":3,"sources":["../../../../../../src/webgpu/api/operation/resource_init/check_texture/by_sampling.ts"],"names":["assert","unreachable","kTextureFormatInfo","virtualMipSize","kTexelRepresentationInfo","getSingleDataType","getComponentReadbackTraits","checkContentsBySampling","t","params","texture","state","subresourceRange","format","rep","level","layers","mipLevels","width","height","depth","dimension","textureWidth","textureHeight","textureDepth","ReadbackTypedArray","shaderType","componentOrder","componentCount","length","indexExpression","toLowerCase","map","c","join","_xd","_multisampled","sampleCount","texelIndexExpression","computePipeline","device","createComputePipeline","compute","entryPoint","module","createShaderModule","code","layer","ubo","createBuffer","mappedAtCreation","size","usage","GPUBufferUsage","UNIFORM","COPY_DST","Int32Array","getMappedRange","unmap","byteLength","BYTES_PER_ELEMENT","resultBuffer","STORAGE","COPY_SRC","trackForCleanup","bindGroup","createBindGroup","layout","getBindGroupLayout","entries","binding","resource","buffer","createView","baseArrayLayer","arrayLayerCount","commandEncoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatch","endPass","queue","submit","finish","destroy","expectedValues","ArrayBuffer","expectedState","stateToTexelComponents","i","d","h","w","value","undefined","expectGPUBufferValuesEqual"],"mappings":"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","sourcesContent":["import { assert, unreachable } from '../../../../../common/util/util.js';\nimport { EncodableTextureFormat, kTextureFormatInfo } from '../../../../capability_info.js';\nimport { virtualMipSize } from '../../../../util/texture/base.js';\nimport {\n  kTexelRepresentationInfo,\n  getSingleDataType,\n  getComponentReadbackTraits,\n} from '../../../../util/texture/texel_data.js';\nimport { CheckContents } from '../texture_zero.spec.js';\n\nexport const checkContentsBySampling: CheckContents = (\n  t,\n  params,\n  texture,\n  state,\n  subresourceRange\n) => {\n  assert(params.format in kTextureFormatInfo);\n  const format = params.format as EncodableTextureFormat;\n  const rep = kTexelRepresentationInfo[format];\n\n  for (const { level, layers } of subresourceRange.mipLevels()) {\n    const [width, height, depth] = virtualMipSize(\n      params.dimension,\n      [t.textureWidth, t.textureHeight, t.textureDepth],\n      level\n    );\n\n    const { ReadbackTypedArray, shaderType } = getComponentReadbackTraits(\n      getSingleDataType(format)\n    );\n\n    const componentOrder = rep.componentOrder;\n    const componentCount = componentOrder.length;\n\n    // For single-component textures, generates .r\n    // For multi-component textures, generates ex.)\n    //  .rgba[i], .bgra[i], .rgb[i]\n    const indexExpression =\n      componentCount === 1\n        ? componentOrder[0].toLowerCase()\n        : componentOrder.map(c => c.toLowerCase()).join('') + '[i]';\n\n    const _xd = '_' + params.dimension;\n    const _multisampled = params.sampleCount > 1 ? '_multisampled' : '';\n    const texelIndexExpression =\n      params.dimension === '2d'\n        ? 'vec2<i32>(GlobalInvocationID.xy)'\n        : params.dimension === '3d'\n        ? 'vec3<i32>(GlobalInvocationID.xyz)'\n        : params.dimension === '1d'\n        ? 'i32(GlobalInvocationID.x)'\n        : unreachable();\n    const computePipeline = t.device.createComputePipeline({\n      compute: {\n        entryPoint: 'main',\n        module: t.device.createShaderModule({\n          code: `\n            struct Constants {\n              level : i32;\n            };\n\n            @group(0) @binding(0) var<uniform> constants : Constants;\n            @group(0) @binding(1) var myTexture : texture${_multisampled}${_xd}<${shaderType}>;\n\n            struct Result {\n              values : @stride(4) array<${shaderType}>;\n            };\n            @group(0) @binding(3) var<storage, read_write> result : Result;\n\n            @stage(compute) @workgroup_size(1)\n            fn main(@builtin(global_invocation_id) GlobalInvocationID : vec3<u32>) {\n              let flatIndex : u32 = ${componentCount}u * (\n                ${width}u * ${height}u * GlobalInvocationID.z +\n                ${width}u * GlobalInvocationID.y +\n                GlobalInvocationID.x\n              );\n              let texel : vec4<${shaderType}> = textureLoad(\n                myTexture, ${texelIndexExpression}, constants.level);\n\n              for (var i : u32 = 0u; i < ${componentCount}u; i = i + 1u) {\n                result.values[flatIndex + i] = texel.${indexExpression};\n              }\n            }`,\n        }),\n      },\n    });\n\n    for (const layer of layers) {\n      const ubo = t.device.createBuffer({\n        mappedAtCreation: true,\n        size: 4,\n        usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n      });\n      new Int32Array(ubo.getMappedRange(), 0, 1)[0] = level;\n      ubo.unmap();\n\n      const byteLength =\n        width * height * depth * ReadbackTypedArray.BYTES_PER_ELEMENT * rep.componentOrder.length;\n      const resultBuffer = t.device.createBuffer({\n        size: byteLength,\n        usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n      });\n      t.trackForCleanup(resultBuffer);\n\n      const bindGroup = t.device.createBindGroup({\n        layout: computePipeline.getBindGroupLayout(0),\n        entries: [\n          {\n            binding: 0,\n            resource: { buffer: ubo },\n          },\n          {\n            binding: 1,\n            resource: texture.createView({\n              baseArrayLayer: layer,\n              arrayLayerCount: 1,\n            }),\n          },\n          {\n            binding: 3,\n            resource: {\n              buffer: resultBuffer,\n            },\n          },\n        ],\n      });\n\n      const commandEncoder = t.device.createCommandEncoder();\n      const pass = commandEncoder.beginComputePass();\n      pass.setPipeline(computePipeline);\n      pass.setBindGroup(0, bindGroup);\n      pass.dispatch(width, height, depth);\n      pass.endPass();\n      t.queue.submit([commandEncoder.finish()]);\n      ubo.destroy();\n\n      const expectedValues = new ReadbackTypedArray(new ArrayBuffer(byteLength));\n      const expectedState = t.stateToTexelComponents[state];\n      let i = 0;\n      for (let d = 0; d < depth; ++d) {\n        for (let h = 0; h < height; ++h) {\n          for (let w = 0; w < width; ++w) {\n            for (const c of rep.componentOrder) {\n              const value = expectedState[c];\n              assert(value !== undefined);\n              expectedValues[i++] = value;\n            }\n          }\n        }\n      }\n      t.expectGPUBufferValuesEqual(resultBuffer, expectedValues);\n    }\n  }\n};\n"],"file":"by_sampling.js"}