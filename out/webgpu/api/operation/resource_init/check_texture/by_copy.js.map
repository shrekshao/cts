{"version":3,"sources":["../../../../../../src/webgpu/api/operation/resource_init/check_texture/by_copy.ts"],"names":["assert","kTextureFormatInfo","virtualMipSize","checkContentsByBufferCopy","t","params","texture","state","subresourceRange","level","mipLevel","layer","each","format","expectSingleColor","size","textureWidth","textureHeight","textureDepth","dimension","slice","layout","exp","stateToTexelComponents","checkContentsByTextureCopy","width","height","depth","dst","device","createTexture","usage","GPUTextureUsage","COPY_DST","COPY_SRC","commandEncoder","createCommandEncoder","copyTextureToTexture","origin","x","y","z","depthOrArrayLayers","queue","submit","finish"],"mappings":"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","sourcesContent":["import { assert } from '../../../../../common/util/util.js';\nimport { EncodableTextureFormat, kTextureFormatInfo } from '../../../../capability_info.js';\nimport { virtualMipSize } from '../../../../util/texture/base.js';\nimport { CheckContents } from '../texture_zero.spec.js';\n\nexport const checkContentsByBufferCopy: CheckContents = (\n  t,\n  params,\n  texture,\n  state,\n  subresourceRange\n) => {\n  for (const { level: mipLevel, layer } of subresourceRange.each()) {\n    assert(params.format in kTextureFormatInfo);\n    const format = params.format as EncodableTextureFormat;\n\n    t.expectSingleColor(texture, format, {\n      size: [t.textureWidth, t.textureHeight, t.textureDepth],\n      dimension: params.dimension,\n      slice: layer,\n      layout: { mipLevel },\n      exp: t.stateToTexelComponents[state],\n    });\n  }\n};\n\nexport const checkContentsByTextureCopy: CheckContents = (\n  t,\n  params,\n  texture,\n  state,\n  subresourceRange\n) => {\n  for (const { level, layer } of subresourceRange.each()) {\n    assert(params.format in kTextureFormatInfo);\n    const format = params.format as EncodableTextureFormat;\n\n    const [width, height, depth] = virtualMipSize(\n      params.dimension,\n      [t.textureWidth, t.textureHeight, t.textureDepth],\n      level\n    );\n\n    const dst = t.device.createTexture({\n      dimension: params.dimension,\n      size: [width, height, depth],\n      format: params.format,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC,\n    });\n\n    const commandEncoder = t.device.createCommandEncoder();\n    commandEncoder.copyTextureToTexture(\n      { texture, mipLevel: level, origin: { x: 0, y: 0, z: layer } },\n      { texture: dst, mipLevel: 0 },\n      { width, height, depthOrArrayLayers: depth }\n    );\n    t.queue.submit([commandEncoder.finish()]);\n\n    t.expectSingleColor(dst, format, {\n      size: [width, height, depth],\n      exp: t.stateToTexelComponents[state],\n    });\n  }\n};\n"],"file":"by_copy.js"}