{"version":3,"sources":["../../../../../src/webgpu/api/operation/vertex_state/index_format.spec.ts"],"names":["description","makeTestGroup","GPUTest","getTextureCopyLayout","kHeight","kWidth","kTextureFormat","kBottomLeftTriangle","kSquare","kNothing","byteLength","bytesPerRow","rowsPerImage","IndexFormatTest","MakeRenderPipeline","topology","stripIndexFormat","vertexModule","device","createShaderModule","code","fragmentModule","createRenderPipeline","layout","createPipelineLayout","bindGroupLayouts","vertex","module","entryPoint","fragment","targets","format","primitive","CreateIndexBuffer","indices","indexFormat","typedArrayConstructor","uint16","Uint16Array","uint32","Uint32Array","makeBufferWithContents","GPUBufferUsage","INDEX","run","indexBuffer","indexCount","indexOffset","primitiveTopology","pipeline","colorAttachment","createTexture","size","width","height","depthOrArrayLayers","usage","GPUTextureUsage","COPY_SRC","RENDER_ATTACHMENT","result","createBuffer","COPY_DST","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","view","createView","clearValue","loadOp","storeOp","setPipeline","setIndexBuffer","drawIndexed","end","copyTextureToBuffer","texture","buffer","queue","submit","finish","CreateExpectedUint8Array","renderShape","arrayBuffer","Uint8Array","row","length","col","texel","kBytesPerTexel","byteOffset","g","test","desc","paramsSubcasesOnly","_indexCount","_expectedShape","fn","t","params","expectedTextureValues","expectGPUBufferValuesEqual","u","combine","combineWithParams","_indices"],"mappings":"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","sourcesContent":["export const description = `\nTest indexing, index format and primitive restart.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { getTextureCopyLayout } from '../../../util/texture/layout.js';\n\nconst kHeight = 4;\nconst kWidth = 8;\nconst kTextureFormat = 'r8uint' as const;\n\n/** 4x4 grid of r8uint values (each 0 or 1). */\ntype Raster8x4 = readonly [\n  readonly [0 | 1, 0 | 1, 0 | 1, 0 | 1, 0 | 1, 0 | 1, 0 | 1, 0 | 1],\n  readonly [0 | 1, 0 | 1, 0 | 1, 0 | 1, 0 | 1, 0 | 1, 0 | 1, 0 | 1],\n  readonly [0 | 1, 0 | 1, 0 | 1, 0 | 1, 0 | 1, 0 | 1, 0 | 1, 0 | 1],\n  readonly [0 | 1, 0 | 1, 0 | 1, 0 | 1, 0 | 1, 0 | 1, 0 | 1, 0 | 1]\n];\n\n/** Expected 4x4 rasterization of a bottom-left triangle. */\nconst kBottomLeftTriangle: Raster8x4 = [\n  [0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 1, 0, 0, 0],\n  [0, 0, 0, 0, 1, 1, 0, 0],\n  [0, 0, 0, 0, 1, 1, 1, 0],\n];\n\n/** Expected 4x4 rasterization filling the whole quad. */\nconst kSquare: Raster8x4 = [\n  [0, 0, 0, 0, 1, 1, 1, 1],\n  [0, 0, 0, 0, 1, 1, 1, 1],\n  [0, 0, 0, 0, 1, 1, 1, 1],\n  [0, 0, 0, 0, 1, 1, 1, 1],\n];\n\n/** Expected 4x4 rasterization with no pixels. */\nconst kNothing: Raster8x4 = [\n  [0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0],\n];\n\nconst { byteLength, bytesPerRow, rowsPerImage } = getTextureCopyLayout(kTextureFormat, '2d', [\n  kWidth,\n  kHeight,\n  1,\n]);\n\nclass IndexFormatTest extends GPUTest {\n  MakeRenderPipeline(\n    topology: GPUPrimitiveTopology,\n    stripIndexFormat?: GPUIndexFormat\n  ): GPURenderPipeline {\n    const vertexModule = this.device.createShaderModule({\n      // NOTE: These positions will create triangles that cut right through pixel centers. If this\n      // results in different rasterization results on different hardware, tweak to avoid this.\n      code: `\n        @vertex\n        fn main(@builtin(vertex_index) VertexIndex : u32)\n             -> @builtin(position) vec4<f32> {\n          var pos = array<vec2<f32>, 4>(\n            vec2<f32>(0.01,  0.98),\n            vec2<f32>(0.99, -0.98),\n            vec2<f32>(0.99,  0.98),\n            vec2<f32>(0.01, -0.98));\n\n          if (VertexIndex == 0xFFFFu || VertexIndex == 0xFFFFFFFFu) {\n            return vec4<f32>(-0.99, -0.98, 0.0, 1.0);\n          }\n          return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n        }\n      `,\n    });\n\n    const fragmentModule = this.device.createShaderModule({\n      code: `\n        @fragment\n        fn main() -> @location(0) u32 {\n          return 1u;\n        }\n      `,\n    });\n\n    return this.device.createRenderPipeline({\n      layout: this.device.createPipelineLayout({ bindGroupLayouts: [] }),\n      vertex: { module: vertexModule, entryPoint: 'main' },\n      fragment: {\n        module: fragmentModule,\n        entryPoint: 'main',\n        targets: [{ format: kTextureFormat }],\n      },\n      primitive: {\n        topology,\n        stripIndexFormat,\n      },\n    });\n  }\n\n  CreateIndexBuffer(indices: readonly number[], indexFormat: GPUIndexFormat): GPUBuffer {\n    const typedArrayConstructor = { uint16: Uint16Array, uint32: Uint32Array }[indexFormat];\n    return this.makeBufferWithContents(new typedArrayConstructor(indices), GPUBufferUsage.INDEX);\n  }\n\n  run(\n    indexBuffer: GPUBuffer,\n    indexCount: number,\n    indexFormat: GPUIndexFormat,\n    indexOffset: number = 0,\n    primitiveTopology: GPUPrimitiveTopology = 'triangle-list'\n  ): GPUBuffer {\n    let pipeline: GPURenderPipeline;\n    // The indexFormat must be set in render pipeline descriptor that specifies a strip primitive\n    // topology for primitive restart testing\n    if (primitiveTopology === 'line-strip' || primitiveTopology === 'triangle-strip') {\n      pipeline = this.MakeRenderPipeline(primitiveTopology, indexFormat);\n    } else {\n      pipeline = this.MakeRenderPipeline(primitiveTopology);\n    }\n\n    const colorAttachment = this.device.createTexture({\n      format: kTextureFormat,\n      size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const result = this.device.createBuffer({\n      size: byteLength,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n\n    const encoder = this.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: colorAttachment.createView(),\n          clearValue: [0, 0, 0, 0],\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n    pass.setPipeline(pipeline);\n    pass.setIndexBuffer(indexBuffer, indexFormat, indexOffset);\n    pass.drawIndexed(indexCount);\n    pass.end();\n    encoder.copyTextureToBuffer(\n      { texture: colorAttachment },\n      { buffer: result, bytesPerRow, rowsPerImage },\n      [kWidth, kHeight]\n    );\n    this.device.queue.submit([encoder.finish()]);\n\n    return result;\n  }\n\n  CreateExpectedUint8Array(renderShape: Raster8x4): Uint8Array {\n    const arrayBuffer = new Uint8Array(byteLength);\n    for (let row = 0; row < renderShape.length; row++) {\n      for (let col = 0; col < renderShape[row].length; col++) {\n        const texel: 0 | 1 = renderShape[row][col];\n\n        const kBytesPerTexel = 1; // r8uint\n        const byteOffset = row * bytesPerRow + col * kBytesPerTexel;\n        arrayBuffer[byteOffset] = texel;\n      }\n    }\n    return arrayBuffer;\n  }\n}\n\nexport const g = makeTestGroup(IndexFormatTest);\n\ng.test('index_format,uint16')\n  .desc('Test rendering result of indexed draw with index format of uint16.')\n  .paramsSubcasesOnly([\n    { indexOffset: 0, _indexCount: 10, _expectedShape: kSquare },\n    { indexOffset: 6, _indexCount: 6, _expectedShape: kBottomLeftTriangle },\n    { indexOffset: 18, _indexCount: 0, _expectedShape: kNothing },\n  ])\n  .fn(t => {\n    const { indexOffset, _indexCount, _expectedShape } = t.params;\n\n    // If this is written as uint16 but interpreted as uint32, it will have index 1 and 2 be both 0\n    // and render nothing.\n    // And the index buffer size - offset must be not less than the size required by triangle\n    // list, otherwise it also render nothing.\n    const indices: number[] = [1, 2, 0, 0, 0, 0, 0, 1, 3, 0];\n    const indexBuffer = t.CreateIndexBuffer(indices, 'uint16');\n    const result = t.run(indexBuffer, _indexCount, 'uint16', indexOffset);\n\n    const expectedTextureValues = t.CreateExpectedUint8Array(_expectedShape);\n    t.expectGPUBufferValuesEqual(result, expectedTextureValues);\n  });\n\ng.test('index_format,uint32')\n  .desc('Test rendering result of indexed draw with index format of uint32.')\n  .paramsSubcasesOnly([\n    { indexOffset: 0, _indexCount: 10, _expectedShape: kSquare },\n    { indexOffset: 12, _indexCount: 7, _expectedShape: kBottomLeftTriangle },\n    { indexOffset: 36, _indexCount: 0, _expectedShape: kNothing },\n  ])\n  .fn(t => {\n    const { indexOffset, _indexCount, _expectedShape } = t.params;\n\n    // If this is interpreted as uint16, then it would be 0, 1, 0, ... and would draw nothing.\n    // And the index buffer size - offset must be not less than the size required by triangle\n    // list, otherwise it also render nothing.\n    const indices: number[] = [1, 2, 0, 0, 0, 0, 0, 1, 3, 0];\n    const indexBuffer = t.CreateIndexBuffer(indices, 'uint32');\n    const result = t.run(indexBuffer, _indexCount, 'uint32', indexOffset);\n\n    const expectedTextureValues = t.CreateExpectedUint8Array(_expectedShape);\n    t.expectGPUBufferValuesEqual(result, expectedTextureValues);\n  });\n\ng.test('primitive_restart')\n  .desc(\n    `\nTest primitive restart with each primitive topology.\n\nPrimitive restart should be always active with strip primitive topologies\n('line-strip' or 'triangle-strip') and never active for other topologies, where\nthe primitive restart value isn't special and should be treated as a regular index value.\n\nThe value -1 gets uploaded as 0xFFFF or 0xFFFF_FFFF according to the format.\n\nThe positions of these points are embedded in the shader above, and look like this:\n  |   0  2|\n  |       |\n  -1  3  1|\n\nBelow are the indices lists used for each test, and the expected rendering result of each\n(approximately, in the case of incorrect results). This shows the expected result (marked '->')\nis different from what you would get if the topology were incorrect.\n\n- primitiveTopology: triangle-list\n  indices: [0, 1, 3, -1, 2, 1, 0, 0],\n   -> triangle-list:              (0, 1, 3), (-1, 2, 1)\n        |    #  #|\n        |    ####|\n        |   #####|\n        | #######|\n      triangle-list with restart: (0, 1, 3), (2, 1, 0)\n      triangle-strip:             (0, 1, 3), (2, 1, 0), (1, 0, 0)\n        |    ####|\n        |    ####|\n        |    ####|\n        |    ####|\n      triangle-strip w/o restart: (0, 1, 3), (1, 3, -1), (3, -1, 2), (-1, 2, 1), (2, 1, 0), (1, 0, 0)\n        |    ####|\n        |    ####|\n        |   #####|\n        | #######|\n\n- primitiveTopology: triangle-strip\n  indices: [3, 1, 0, -1, 2, 2, 1, 3],\n   -> triangle-strip:             (3, 1, 0), (2, 2, 1), (2, 1, 3)\n        |    #  #|\n        |    ####|\n        |    ####|\n        |    ####|\n      triangle-strip w/o restart: (3, 1, 0), (1, 0, -1), (0, -1, 2), (2, 2, 1), (2, 3, 1)\n        |    ####|\n        |   #####|\n        |  ######|\n        | #######|\n      triangle-list:              (3, 1, 0), (-1, 2, 2)\n      triangle-list with restart: (3, 1, 0), (2, 2, 1)\n        |        |\n        |    #   |\n        |    ##  |\n        |    ### |\n\n- primitiveTopology: point, line-list, line-strip:\n  indices: [0, 1, -1, 2, -1, 2, 3, 0],\n   -> point-list:             (0), (1), (-1), (2), (3), (0)\n        |    #  #|\n        |        |\n        |        |\n        |#   #  #|\n      point-list with restart (0), (1), (2), (3), (0)\n        |    #  #|\n        |        |\n        |        |\n        |    #  #|\n   -> line-list:              (0, 1), (-1, 2), (3, 0)\n        |    # ##|\n        |    ##  |\n        |  ### # |\n        |##  #  #|\n      line-list with restart: (0, 1), (2, 3)\n        |    #  #|\n        |     ## |\n        |     ## |\n        |    #  #|\n   -> line-strip:             (0, 1), (2, 3), (3, 0)\n        |    #  #|\n        |    ### |\n        |    ### |\n        |    #  #|\n      line-strip w/o restart: (0, 1), (1, -1), (-1, 2), (2, 3), (3, 3)\n        |    # ##|\n        |    ### |\n        |  ## ## |\n        |########|\n`\n  )\n  .params(u =>\n    u //\n      .combine('indexFormat', ['uint16', 'uint32'] as const)\n      .combineWithParams([\n        {\n          primitiveTopology: 'point-list',\n          _indices: [0, 1, -1, 2, 3, 0],\n          _expectedShape: [\n            [0, 0, 0, 0, 1, 0, 0, 1],\n            [0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0],\n            [1, 0, 0, 0, 1, 0, 0, 1],\n          ],\n        },\n        {\n          primitiveTopology: 'line-list',\n          _indices: [0, 1, -1, 2, 3, 0],\n          _expectedShape: [\n            [0, 0, 0, 0, 1, 0, 1, 1],\n            [0, 0, 0, 0, 1, 1, 0, 0],\n            [0, 0, 1, 1, 1, 0, 1, 0],\n            [1, 1, 0, 0, 1, 0, 0, 1],\n          ],\n        },\n        {\n          primitiveTopology: 'line-strip',\n          _indices: [0, 1, -1, 2, 3, 0],\n          _expectedShape: [\n            [0, 0, 0, 0, 1, 0, 0, 1],\n            [0, 0, 0, 0, 1, 1, 1, 0],\n            [0, 0, 0, 0, 1, 1, 1, 0],\n            [0, 0, 0, 0, 1, 0, 0, 1],\n          ],\n        },\n        {\n          primitiveTopology: 'triangle-list',\n          _indices: [0, 1, 3, -1, 2, 1, 0, 0],\n          _expectedShape: [\n            [0, 0, 0, 0, 0, 0, 0, 1],\n            [0, 0, 0, 0, 1, 1, 1, 1],\n            [0, 0, 0, 1, 1, 1, 1, 1],\n            [0, 1, 1, 1, 1, 1, 1, 1],\n          ],\n        },\n        {\n          primitiveTopology: 'triangle-strip',\n          _indices: [3, 1, 0, -1, 2, 2, 1, 3],\n          _expectedShape: [\n            [0, 0, 0, 0, 0, 0, 0, 1],\n            [0, 0, 0, 0, 1, 0, 1, 1],\n            [0, 0, 0, 0, 1, 1, 1, 1],\n            [0, 0, 0, 0, 1, 1, 1, 1],\n          ],\n        },\n      ] as const)\n  )\n  .fn(t => {\n    const { indexFormat, primitiveTopology, _indices, _expectedShape } = t.params;\n\n    const indexBuffer = t.CreateIndexBuffer(_indices, indexFormat);\n    const result = t.run(indexBuffer, _indices.length, indexFormat, 0, primitiveTopology);\n\n    const expectedTextureValues = t.CreateExpectedUint8Array(_expectedShape);\n    t.expectGPUBufferValuesEqual(result, expectedTextureValues);\n  });\n"],"file":"index_format.spec.js"}