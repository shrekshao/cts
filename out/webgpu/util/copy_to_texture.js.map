{"version":3,"file":"copy_to_texture.js","names":["assert","memcpy","GPUTest","makeInPlaceColorConversion","TexelView","textureContentIsOKByT2B","CopyToTextureUtils","doFlipY","sourcePixels","width","height","bytesPerPixel","dstPixels","Uint8ClampedArray","i","j","srcPixelPos","dstPixelPos","src","start","length","dst","getExpectedPixels","format","isFlipY","conversion","applyConversion","divide","fromTexelsAsColors","coords","x","y","z","pixelPos","rgba","R","G","B","A","clampToFormatRange","doTestAndCheckResult","imageCopyExternalImage","dstTextureCopyView","expTexelView","copySize","texelCompareOptions","device","queue","copyExternalImageToTexture","resultPromise","texture","eventualExpectOK","trackForCleanup"],"sources":["../../../src/webgpu/util/copy_to_texture.ts"],"sourcesContent":["import { assert, memcpy } from '../../common/util/util.js';\nimport { RegularTextureFormat } from '../capability_info.js';\nimport { GPUTest } from '../gpu_test.js';\n\nimport { makeInPlaceColorConversion } from './color_space_conversion.js';\nimport { TexelView } from './texture/texel_view.js';\nimport { TexelCompareOptions, textureContentIsOKByT2B } from './texture/texture_ok.js';\n\nexport class CopyToTextureUtils extends GPUTest {\n  doFlipY(\n    sourcePixels: Uint8ClampedArray,\n    width: number,\n    height: number,\n    bytesPerPixel: number\n  ): Uint8ClampedArray {\n    const dstPixels = new Uint8ClampedArray(width * height * bytesPerPixel);\n    for (let i = 0; i < height; ++i) {\n      for (let j = 0; j < width; ++j) {\n        const srcPixelPos = i * width + j;\n        // WebGL readPixel returns pixels from bottom-left origin. Using CopyExternalImageToTexture\n        // to copy from WebGL Canvas keeps top-left origin. So the expectation from webgl.readPixel should\n        // be flipped.\n        const dstPixelPos = (height - i - 1) * width + j;\n\n        memcpy(\n          { src: sourcePixels, start: srcPixelPos * bytesPerPixel, length: bytesPerPixel },\n          { dst: dstPixels, start: dstPixelPos * bytesPerPixel }\n        );\n      }\n    }\n\n    return dstPixels;\n  }\n\n  getExpectedPixels(\n    sourcePixels: Uint8ClampedArray,\n    width: number,\n    height: number,\n    format: RegularTextureFormat,\n    isFlipY: boolean,\n    conversion: {\n      srcPremultiplied: boolean;\n      dstPremultiplied: boolean;\n      srcColorSpace?: PredefinedColorSpace;\n      dstColorSpace?: PredefinedColorSpace;\n    }\n  ): TexelView {\n    const applyConversion = makeInPlaceColorConversion(conversion);\n\n    const divide = 255.0;\n    return TexelView.fromTexelsAsColors(\n      format,\n      coords => {\n        assert(coords.x < width && coords.y < height && coords.z === 0, 'out of bounds');\n        const y = isFlipY ? height - coords.y - 1 : coords.y;\n        const pixelPos = y * width + coords.x;\n\n        const rgba = {\n          R: sourcePixels[pixelPos * 4] / divide,\n          G: sourcePixels[pixelPos * 4 + 1] / divide,\n          B: sourcePixels[pixelPos * 4 + 2] / divide,\n          A: sourcePixels[pixelPos * 4 + 3] / divide,\n        };\n        applyConversion(rgba);\n        return rgba;\n      },\n      { clampToFormatRange: true }\n    );\n  }\n\n  doTestAndCheckResult(\n    imageCopyExternalImage: GPUImageCopyExternalImage,\n    dstTextureCopyView: GPUImageCopyTextureTagged,\n    expTexelView: TexelView,\n    copySize: Required<GPUExtent3DDict>,\n    texelCompareOptions: TexelCompareOptions\n  ): void {\n    this.device.queue.copyExternalImageToTexture(\n      imageCopyExternalImage,\n      dstTextureCopyView,\n      copySize\n    );\n\n    const resultPromise = textureContentIsOKByT2B(\n      this,\n      { texture: dstTextureCopyView.texture },\n      copySize,\n      { expTexelView },\n      texelCompareOptions\n    );\n    this.eventualExpectOK(resultPromise);\n    this.trackForCleanup(dstTextureCopyView.texture);\n  }\n}\n"],"mappings":"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"}