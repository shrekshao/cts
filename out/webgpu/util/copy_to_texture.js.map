{"version":3,"sources":["../../../src/webgpu/util/copy_to_texture.ts"],"names":["assert","memcpy","GPUTest","makeInPlaceColorConversion","TexelView","textureContentIsOKByT2B","CopyToTextureUtils","doFlipY","sourcePixels","width","height","bytesPerPixel","dstPixels","Uint8ClampedArray","i","j","srcPixelPos","dstPixelPos","src","start","length","dst","getExpectedPixels","format","isFlipY","conversion","applyConversion","divide","fromTexelsAsColors","coords","x","y","z","pixelPos","rgba","R","G","B","A","clampToFormatRange","doTestAndCheckResult","imageCopyExternalImage","dstTextureCopyView","expTexelView","copySize","texelCompareOptions","device","queue","copyExternalImageToTexture","resultPromise","texture","eventualExpectOK"],"mappings":"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","sourcesContent":["import { assert, memcpy } from '../../common/util/util.js';\nimport { RegularTextureFormat } from '../capability_info.js';\nimport { GPUTest } from '../gpu_test.js';\n\nimport { makeInPlaceColorConversion } from './color_space_conversion.js';\nimport { TexelView } from './texture/texel_view.js';\nimport { TexelCompareOptions, textureContentIsOKByT2B } from './texture/texture_ok.js';\n\nexport class CopyToTextureUtils extends GPUTest {\n  doFlipY(\n    sourcePixels: Uint8ClampedArray,\n    width: number,\n    height: number,\n    bytesPerPixel: number\n  ): Uint8ClampedArray {\n    const dstPixels = new Uint8ClampedArray(width * height * bytesPerPixel);\n    for (let i = 0; i < height; ++i) {\n      for (let j = 0; j < width; ++j) {\n        const srcPixelPos = i * width + j;\n        // WebGL readPixel returns pixels from bottom-left origin. Using CopyExternalImageToTexture\n        // to copy from WebGL Canvas keeps top-left origin. So the expectation from webgl.readPixel should\n        // be flipped.\n        const dstPixelPos = (height - i - 1) * width + j;\n\n        memcpy(\n          { src: sourcePixels, start: srcPixelPos * bytesPerPixel, length: bytesPerPixel },\n          { dst: dstPixels, start: dstPixelPos * bytesPerPixel }\n        );\n      }\n    }\n\n    return dstPixels;\n  }\n\n  getExpectedPixels(\n    sourcePixels: Uint8ClampedArray,\n    width: number,\n    height: number,\n    format: RegularTextureFormat,\n    isFlipY: boolean,\n    conversion: {\n      srcPremultiplied: boolean;\n      dstPremultiplied: boolean;\n      srcColorSpace?: PredefinedColorSpace;\n      dstColorSpace?: GPUPredefinedColorSpace;\n    }\n  ): TexelView {\n    const applyConversion = makeInPlaceColorConversion(conversion);\n\n    const divide = 255.0;\n    return TexelView.fromTexelsAsColors(\n      format,\n      coords => {\n        assert(coords.x < width && coords.y < height && coords.z === 0, 'out of bounds');\n        const y = isFlipY ? height - coords.y - 1 : coords.y;\n        const pixelPos = y * width + coords.x;\n\n        const rgba = {\n          R: sourcePixels[pixelPos * 4] / divide,\n          G: sourcePixels[pixelPos * 4 + 1] / divide,\n          B: sourcePixels[pixelPos * 4 + 2] / divide,\n          A: sourcePixels[pixelPos * 4 + 3] / divide,\n        };\n        applyConversion(rgba);\n        return rgba;\n      },\n      { clampToFormatRange: true }\n    );\n  }\n\n  doTestAndCheckResult(\n    imageCopyExternalImage: GPUImageCopyExternalImage,\n    dstTextureCopyView: GPUImageCopyTextureTagged,\n    expTexelView: TexelView,\n    copySize: Required<GPUExtent3DDict>,\n    texelCompareOptions: TexelCompareOptions\n  ): void {\n    this.device.queue.copyExternalImageToTexture(\n      imageCopyExternalImage,\n      dstTextureCopyView,\n      copySize\n    );\n\n    const resultPromise = textureContentIsOKByT2B(\n      this,\n      { texture: dstTextureCopyView.texture },\n      copySize,\n      { expTexelView },\n      texelCompareOptions\n    );\n    this.eventualExpectOK(resultPromise);\n  }\n}\n"],"file":"copy_to_texture.js"}