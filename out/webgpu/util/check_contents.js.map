{"version":3,"file":"check_contents.js","names":["assert","ErrorWithExtra","iterRange","range","float16BitsToFloat32","generatePrettyTable","checkElementsEqual","actual","expected","constructor","length","checkElementsEqualGenerated","i","checkElementsBetween","error","checkElementsPassPredicate","index","value","Math","min","max","predicatePrinter","leftHeader","getValueForCell","undefined","checkElementsFloat16Between","BYTES_PER_ELEMENT","actualF32","Float32Array","forEach","v","expectedF32","checkElementsEqualEither","generator","predicate","size","ctor","printAsFloat","Float64Array","failedElementsFirstMaybe","failedElements","failedElementsFirst","failedElementsLast","printElementsStart","printElementsEnd","printElementsCount","numberToString","n","toPrecision","intToPaddedHex","byteLength","numberPrefix","printActual","subarray","printExpected","cell","push","printFailedValueMarkers","opts","fillToWidth","msg","slice","number","Number","isInteger","s","abs","toString","padStart"],"sources":["../../../src/webgpu/util/check_contents.ts"],"sourcesContent":["// MAINTENANCE_TODO: The \"checkThingTrue\" naming is confusing; these must be used with `expectOK`\n// or the result is dropped on the floor. Rename these to things like `typedArrayIsOK`(??) to\n// make it clearer.\n// MAINTENANCE_TODO: Also, audit to make sure we aren't dropping any on the floor. Consider a\n// no-ignored-return lint check if we can find one that we can use.\n\nimport {\n  assert,\n  ErrorWithExtra,\n  iterRange,\n  range,\n  TypedArrayBufferView,\n  TypedArrayBufferViewConstructor,\n} from '../../common/util/util.js';\n\nimport { float16BitsToFloat32 } from './conversion.js';\nimport { generatePrettyTable } from './pretty_diff_tables.js';\n\n/** Generate an expected value at `index`, to test for equality with the actual value. */\nexport type CheckElementsGenerator = (index: number) => number;\n/** Check whether the actual `value` at `index` is as expected. */\nexport type CheckElementsPredicate = (index: number, value: number) => boolean;\n/**\n * Provides a pretty-printing implementation for a particular CheckElementsPredicate.\n * This is an array; each element provides info to print an additional row in the error message.\n */\nexport type CheckElementsSupplementalTableRows = Array<{\n  /** Row header. */\n  leftHeader: string;\n  /**\n   * Get the value for a cell in the table with element index `index`.\n   * May be a string or a number; a number will be formatted according to the TypedArray type used.\n   */\n  getValueForCell: (index: number) => number | string;\n}>;\n\n/**\n * Check whether two `TypedArray`s have equal contents.\n * Returns `undefined` if the check passes, or an `Error` if not.\n */\nexport function checkElementsEqual(\n  actual: TypedArrayBufferView,\n  expected: TypedArrayBufferView\n): ErrorWithExtra | undefined {\n  assert(actual.constructor === expected.constructor, 'TypedArray type mismatch');\n  assert(actual.length === expected.length, 'size mismatch');\n  return checkElementsEqualGenerated(actual, i => expected[i]);\n}\n\n/**\n * Check whether each value in a `TypedArray` is between the two corresponding \"expected\" values\n * (either `a(i) <= actual[i] <= b(i)` or `a(i) >= actual[i] => b(i)`).\n */\nexport function checkElementsBetween(\n  actual: TypedArrayBufferView,\n  expected: readonly [CheckElementsGenerator, CheckElementsGenerator]\n): ErrorWithExtra | undefined {\n  const error = checkElementsPassPredicate(\n    actual,\n    (index, value) =>\n      value >= Math.min(expected[0](index), expected[1](index)) &&\n      value <= Math.max(expected[0](index), expected[1](index)),\n    {\n      predicatePrinter: [\n        { leftHeader: 'between', getValueForCell: index => expected[0](index) },\n        { leftHeader: 'and', getValueForCell: index => expected[1](index) },\n      ],\n    }\n  );\n  // If there was an error, extend it with additional extras.\n  return error ? new ErrorWithExtra(error, () => ({ expected })) : undefined;\n}\n\n/**\n * Equivalent to {@link checkElementsBetween} but interpret values as float16 and convert to JS number before comparison.\n */\nexport function checkElementsFloat16Between(\n  actual: TypedArrayBufferView,\n  expected: readonly [TypedArrayBufferView, TypedArrayBufferView]\n): ErrorWithExtra | undefined {\n  assert(actual.BYTES_PER_ELEMENT === 2, 'bytes per element need to be 2 (16bit)');\n  const actualF32 = new Float32Array(actual.length);\n  actual.forEach((v: number, i: number) => {\n    actualF32[i] = float16BitsToFloat32(v);\n  });\n  const expectedF32 = [new Float32Array(expected[0].length), new Float32Array(expected[1].length)];\n  expected[0].forEach((v: number, i: number) => {\n    expectedF32[0][i] = float16BitsToFloat32(v);\n  });\n  expected[1].forEach((v: number, i: number) => {\n    expectedF32[1][i] = float16BitsToFloat32(v);\n  });\n\n  const error = checkElementsPassPredicate(\n    actualF32,\n    (index, value) =>\n      value >= Math.min(expectedF32[0][index], expectedF32[1][index]) &&\n      value <= Math.max(expectedF32[0][index], expectedF32[1][index]),\n    {\n      predicatePrinter: [\n        { leftHeader: 'between', getValueForCell: index => expectedF32[0][index] },\n        { leftHeader: 'and', getValueForCell: index => expectedF32[1][index] },\n      ],\n    }\n  );\n  // If there was an error, extend it with additional extras.\n  return error ? new ErrorWithExtra(error, () => ({ expectedF32 })) : undefined;\n}\n\n/**\n * Check whether each value in a `TypedArray` is equal to one of the two corresponding \"expected\"\n * values (either `actual[i] === a[i]` or `actual[i] === b[i]`)\n */\nexport function checkElementsEqualEither(\n  actual: TypedArrayBufferView,\n  expected: readonly [TypedArrayBufferView, TypedArrayBufferView]\n): ErrorWithExtra | undefined {\n  const error = checkElementsPassPredicate(\n    actual,\n    (index, value) => value === expected[0][index] || value === expected[1][index],\n    {\n      predicatePrinter: [\n        { leftHeader: 'either', getValueForCell: index => expected[0][index] },\n        { leftHeader: 'or', getValueForCell: index => expected[1][index] },\n      ],\n    }\n  );\n  // If there was an error, extend it with additional extras.\n  return error ? new ErrorWithExtra(error, () => ({ expected })) : undefined;\n}\n\n/**\n * Check whether a `TypedArray`'s contents equal the values produced by a generator function.\n * Returns `undefined` if the check passes, or an `Error` if not.\n *\n * ```text\n * Array had unexpected contents at indices 2 through 19.\n *  Starting at index 1:\n *    actual == 0x: 00 fe ff 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 00\n *    failed ->        xx xx    xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx\n *  expected ==     00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n * ```\n *\n * ```text\n * Array had unexpected contents at indices 2 through 29.\n *  Starting at index 1:\n *    actual ==  0.000 -2.000e+100 -1.000e+100 0.000 1.000e+100 2.000e+100 3.000e+100 4.000e+100 5.000e+100 6.000e+100 7.000e+100 ...\n *    failed ->                 xx          xx               xx         xx         xx         xx         xx         xx         xx ...\n *  expected ==  0.000       0.000       0.000 0.000      0.000      0.000      0.000      0.000      0.000      0.000      0.000 ...\n * ```\n */\nexport function checkElementsEqualGenerated(\n  actual: TypedArrayBufferView,\n  generator: CheckElementsGenerator\n): ErrorWithExtra | undefined {\n  const error = checkElementsPassPredicate(actual, (index, value) => value === generator(index), {\n    predicatePrinter: [{ leftHeader: 'expected ==', getValueForCell: index => generator(index) }],\n  });\n  // If there was an error, extend it with additional extras.\n  return error ? new ErrorWithExtra(error, () => ({ generator })) : undefined;\n}\n\n/**\n * Check whether a `TypedArray`'s values pass the provided predicate function.\n * Returns `undefined` if the check passes, or an `Error` if not.\n */\nexport function checkElementsPassPredicate(\n  actual: TypedArrayBufferView,\n  predicate: CheckElementsPredicate,\n  { predicatePrinter }: { predicatePrinter?: CheckElementsSupplementalTableRows }\n): ErrorWithExtra | undefined {\n  const size = actual.length;\n  const ctor = actual.constructor as TypedArrayBufferViewConstructor;\n  const printAsFloat = ctor === Float32Array || ctor === Float64Array;\n\n  let failedElementsFirstMaybe: number | undefined = undefined;\n  /** Sparse array with `true` for elements that failed. */\n  const failedElements: (true | undefined)[] = [];\n  for (let i = 0; i < size; ++i) {\n    if (!predicate(i, actual[i])) {\n      failedElementsFirstMaybe ??= i;\n      failedElements[i] = true;\n    }\n  }\n\n  if (failedElementsFirstMaybe === undefined) {\n    return undefined;\n  }\n  const failedElementsFirst = failedElementsFirstMaybe;\n  const failedElementsLast = failedElements.length - 1;\n\n  // Include one extra non-failed element at the beginning and end (if they exist), for context.\n  const printElementsStart = Math.max(0, failedElementsFirst - 1);\n  const printElementsEnd = Math.min(size, failedElementsLast + 2);\n  const printElementsCount = printElementsEnd - printElementsStart;\n\n  const numberToString = printAsFloat\n    ? (n: number) => n.toPrecision(4)\n    : (n: number) => intToPaddedHex(n, { byteLength: ctor.BYTES_PER_ELEMENT });\n  const numberPrefix = printAsFloat ? '' : '0x:';\n\n  const printActual = actual.subarray(printElementsStart, printElementsEnd);\n  const printExpected: Array<Iterable<string | number>> = [];\n  if (predicatePrinter) {\n    for (const { leftHeader, getValueForCell: cell } of predicatePrinter) {\n      printExpected.push(\n        (function* () {\n          yield* [leftHeader, ''];\n          yield* iterRange(printElementsCount, i => cell(printElementsStart + i));\n        })()\n      );\n    }\n  }\n\n  const printFailedValueMarkers = (function* () {\n    yield* ['failed ->', ''];\n    yield* range(printElementsCount, i => (failedElements[printElementsStart + i] ? 'xx' : ''));\n  })();\n\n  const opts = {\n    fillToWidth: 120,\n    numberToString,\n  };\n  const msg = `Array had unexpected contents at indices ${failedElementsFirst} through ${failedElementsLast}.\n Starting at index ${printElementsStart}:\n${generatePrettyTable(opts, [\n  ['actual ==', numberPrefix, ...printActual],\n  printFailedValueMarkers,\n  ...printExpected,\n])}`;\n  return new ErrorWithExtra(msg, () => ({\n    actual: actual.slice(),\n  }));\n}\n\n// Helper helpers\n\n/** Convert an integral `number` into a hex string, padded to the specified `byteLength`. */\nfunction intToPaddedHex(number: number, { byteLength }: { byteLength: number }) {\n  assert(Number.isInteger(number), 'number must be integer');\n  let s = Math.abs(number).toString(16);\n  if (byteLength) s = s.padStart(byteLength * 2, '0');\n  if (number < 0) s = '-' + s;\n  return s;\n}\n"],"mappings":"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"}