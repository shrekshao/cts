{"version":3,"sources":["../../../src/webgpu/util/compare.ts"],"names":["Colors","toComparator","isFloatValue","Scalar","Vector","F32Interval","compareValue","got","expected","gTy","type","eTy","bothFloatTypes","matched","red","toString","g","e","isFloat","kind","value","green","gLen","elements","length","eLen","gElements","Array","eElements","i","Math","max","cmp","compare","join","Error","compareInterval","contains","compareVector","elementType","results","map","_","idx","match","index","failures","filter","v","expected_string","anyOf","expectations","failed","Set","add"],"mappings":"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","sourcesContent":["import { Colors } from '../../common/util/colors.js';\nimport { Expectation, toComparator } from '../shader/execution/expression/expression.js';\n\nimport { isFloatValue, Scalar, Value, Vector } from './conversion.js';\nimport { F32Interval } from './f32_interval.js';\n\n/** Comparison describes the result of a Comparator function. */\nexport interface Comparison {\n  matched: boolean; // True if the two values were considered a match\n  got: string; // The string representation of the 'got' value (possibly with markup)\n  expected: string; // The string representation of the 'expected' value (possibly with markup)\n}\n\n/** Comparator is a function that compares whether the provided value matches an expectation. */\nexport interface Comparator {\n  (got: Value): Comparison;\n}\n\n/**\n * compares 'got' Value  to 'expected' Value, returning the Comparison information.\n * @param got the Value obtained from the test\n * @param expected the expected Value\n * @returns the comparison results\n */\nfunction compareValue(got: Value, expected: Value): Comparison {\n  {\n    // Check types\n    const gTy = got.type;\n    const eTy = expected.type;\n    const bothFloatTypes = isFloatValue(got) && isFloatValue(expected);\n    if (gTy !== eTy && !bothFloatTypes) {\n      return {\n        matched: false,\n        got: `${Colors.red(gTy.toString())}(${got})`,\n        expected: `${Colors.red(eTy.toString())}(${expected})`,\n      };\n    }\n  }\n\n  if (got instanceof Scalar) {\n    const g = got;\n    const e = expected as Scalar;\n    const isFloat = g.type.kind === 'f64' || g.type.kind === 'f32' || g.type.kind === 'f16';\n    const matched =\n      (isFloat && (g.value as number) === (e.value as number)) || (!isFloat && g.value === e.value);\n    return {\n      matched,\n      got: g.toString(),\n      expected: matched ? Colors.green(e.toString()) : Colors.red(e.toString()),\n    };\n  }\n\n  if (got instanceof Vector) {\n    const gLen = got.elements.length;\n    const eLen = (expected as Vector).elements.length;\n    let matched = gLen === eLen;\n    const gElements = new Array<string>(gLen);\n    const eElements = new Array<string>(eLen);\n    for (let i = 0; i < Math.max(gLen, eLen); i++) {\n      if (i < gLen && i < eLen) {\n        const g = got.elements[i];\n        const e = (expected as Vector).elements[i];\n        const cmp = compare(g, e);\n        matched = matched && cmp.matched;\n        gElements[i] = cmp.got;\n        eElements[i] = cmp.expected;\n        continue;\n      }\n      matched = false;\n      if (i < gLen) {\n        gElements[i] = got.elements[i].toString();\n      }\n      if (i < eLen) {\n        eElements[i] = (expected as Vector).elements[i].toString();\n      }\n    }\n    return {\n      matched,\n      got: `${got.type}(${gElements.join(', ')})`,\n      expected: `${expected.type}(${eElements.join(', ')})`,\n    };\n  }\n  throw new Error(`unhandled type '${typeof got}`);\n}\n\n/**\n * Tests it a 'got' Value is contained in 'expected' interval, returning the Comparison information.\n * @param got the Value obtained from the test\n * @param expected the expected F32Interval\n * @returns the comparison results\n */\nfunction compareInterval(got: Value, expected: F32Interval): Comparison {\n  {\n    // Check type\n    const gTy = got.type;\n    if (!isFloatValue(got)) {\n      return {\n        matched: false,\n        got: `${Colors.red(gTy.toString())}(${got})`,\n        expected: `floating point value`,\n      };\n    }\n  }\n\n  if (got instanceof Scalar) {\n    const g = got.value as number;\n    const matched = expected.contains(g);\n    return {\n      matched,\n      got: g.toString(),\n      expected: matched ? Colors.green(expected.toString()) : Colors.red(expected.toString()),\n    };\n  }\n\n  // Vector results are currently not handled\n  throw new Error(`unhandled type '${typeof got}`);\n}\n\n/**\n * Tests it a 'got' Value is contained in 'expected' vector, returning the Comparison information.\n * @param got the Value obtained from the test, is expected to be a Vector\n * @param expected the expected array of F32Intervals, one for each element of the vector\n * @returns the comparison results\n */\nfunction compareVector(got: Value, expected: F32Interval[]): Comparison {\n  // Check got type\n  if (!(got instanceof Vector)) {\n    return {\n      matched: false,\n      got: `${Colors.red((typeof got).toString())}(${got})`,\n      expected: `Vector`,\n    };\n  }\n\n  // Check element type\n  {\n    const gTy = got.type.elementType;\n    if (!isFloatValue(got.elements[0])) {\n      return {\n        matched: false,\n        got: `${Colors.red(gTy.toString())}(${got})`,\n        expected: `floating point elements`,\n      };\n    }\n  }\n\n  if (got.elements.length !== expected.length) {\n    return {\n      matched: false,\n      got: `Vector of ${got.elements.length} elements`,\n      expected: `${expected.length} elements`,\n    };\n  }\n\n  const results = got.elements.map((_, idx) => {\n    const g = got.elements[idx].value as number;\n    return { match: expected[idx].contains(g), index: idx };\n  });\n\n  const failures = results.filter(v => !v.match).map(v => v.index);\n  if (failures.length !== 0) {\n    const expected_string = expected.map((v, idx) =>\n      idx in failures ? Colors.red(`[${v}]`) : Colors.green(`[${v}]`)\n    );\n    return {\n      matched: false,\n      got: `[${got.elements}]`,\n      expected: `[${expected_string}]`,\n    };\n  }\n\n  return {\n    matched: true,\n    got: `[${got.elements}]`,\n    expected: `[${Colors.green(expected.toString())}]`,\n  };\n}\n\n/**\n * compare() compares 'got' to 'expected', returning the Comparison information.\n * @param got the result obtained from the test\n * @param expected the expected result\n * @returns the comparison results\n */\nexport function compare(got: Value, expected: Value | F32Interval | F32Interval[]): Comparison {\n  if (expected instanceof Array) {\n    return compareVector(got, expected);\n  }\n\n  if (expected instanceof F32Interval) {\n    return compareInterval(got, expected);\n  }\n\n  return compareValue(got, expected);\n}\n\n/** @returns a Comparator that checks whether a test value matches any of the provided options */\nexport function anyOf(...expectations: Expectation[]): Comparator {\n  return got => {\n    const failed = new Set<string>();\n    for (const e of expectations) {\n      const cmp = toComparator(e)(got);\n      if (cmp.matched) {\n        return cmp;\n      }\n      failed.add(cmp.expected);\n    }\n    return { matched: false, got: got.toString(), expected: [...failed].join(' or ') };\n  };\n}\n"],"file":"compare.js"}