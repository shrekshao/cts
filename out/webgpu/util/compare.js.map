{"version":3,"file":"compare.js","names":["getIsBuildingDataCache","Colors","assert","deserializeExpectation","serializeExpectation","toComparator","isFloatValue","Matrix","Scalar","Vector","F32Interval","compareValue","got","expected","gTy","type","eTy","bothFloatTypes","matched","red","toString","g","e","isFloat","kind","value","green","gLen","elements","length","eLen","every","_","i","compare","gCols","cols","eCols","gRows","rows","eRows","c","j","Error","compareInterval","contains","compareVector","elementType","results","map","idx","match","index","failures","filter","v","expected_string","convertArrayToString","m","join","compareMatrix","expected_strings","Array","forEach","r","anyOf","expectations","comparator","failed","Set","cmp","add","data","skipUndefined","expectation","undefined","deserializeComparator"],"sources":["../../../src/webgpu/util/compare.ts"],"sourcesContent":["import { getIsBuildingDataCache } from '../../common/framework/data_cache.js';\nimport { Colors } from '../../common/util/colors.js';\nimport { assert } from '../../common/util/util.js';\nimport {\n  deserializeExpectation,\n  SerializedExpectation,\n  serializeExpectation,\n} from '../shader/execution/expression/case_cache.js';\nimport { Expectation, toComparator } from '../shader/execution/expression/expression.js';\n\nimport { isFloatValue, Matrix, Scalar, Value, Vector } from './conversion.js';\nimport { F32Interval } from './f32_interval.js';\n\n/** Comparison describes the result of a Comparator function. */\nexport interface Comparison {\n  matched: boolean; // True if the two values were considered a match\n  got: string; // The string representation of the 'got' value (possibly with markup)\n  expected: string; // The string representation of the 'expected' value (possibly with markup)\n}\n\n/** Comparator is a function that compares whether the provided value matches an expectation. */\nexport interface Comparator {\n  (got: Value): Comparison;\n}\n\n/**\n * compares 'got' Value  to 'expected' Value, returning the Comparison information.\n * @param got the Value obtained from the test\n * @param expected the expected Value\n * @returns the comparison results\n */\n// NOTE: This function does not use objectEquals, since that does not handle FP\n// specific corners cases correctly, i.e. that f64/f32/f16 are all considered\n// the same type for this comparison.\nfunction compareValue(got: Value, expected: Value): Comparison {\n  {\n    // Check types\n    const gTy = got.type;\n    const eTy = expected.type;\n    const bothFloatTypes = isFloatValue(got) && isFloatValue(expected);\n    if (gTy !== eTy && !bothFloatTypes) {\n      return {\n        matched: false,\n        got: `${Colors.red(gTy.toString())}(${got})`,\n        expected: `${Colors.red(eTy.toString())}(${expected})`,\n      };\n    }\n  }\n\n  if (got instanceof Scalar) {\n    const g = got;\n    const e = expected as Scalar;\n    const isFloat = g.type.kind === 'f64' || g.type.kind === 'f32' || g.type.kind === 'f16';\n    const matched =\n      (isFloat && (g.value as number) === (e.value as number)) || (!isFloat && g.value === e.value);\n    return {\n      matched,\n      got: g.toString(),\n      expected: matched ? Colors.green(e.toString()) : Colors.red(e.toString()),\n    };\n  }\n\n  if (got instanceof Vector) {\n    const e = expected as Vector;\n    const gLen = got.elements.length;\n    const eLen = e.elements.length;\n    let matched = gLen === eLen;\n    if (matched) {\n      // Iterating and calling compare instead of just using objectEquals to use the FP specific logic from above\n      matched = got.elements.every((_, i) => {\n        return compare(got.elements[i], e.elements[i]).matched;\n      });\n    }\n\n    return {\n      matched,\n      got: `${got.toString()}`,\n      expected: matched ? Colors.green(e.toString()) : Colors.red(e.toString()),\n    };\n  }\n\n  if (got instanceof Matrix) {\n    const e = expected as Matrix;\n    const gCols = got.type.cols;\n    const eCols = e.type.cols;\n    const gRows = got.type.rows;\n    const eRows = e.type.rows;\n    let matched = gCols === eCols && gRows === eRows;\n    if (matched) {\n      // Iterating and calling compare instead of just using objectEquals to use the FP specific logic from above\n      matched = got.elements.every((c, i) => {\n        return c.every((_, j) => {\n          return compare(got.elements[i][j], e.elements[i][j]).matched;\n        });\n      });\n    }\n\n    return {\n      matched,\n      got: `${got.toString()}`,\n      expected: matched ? Colors.green(e.toString()) : Colors.red(e.toString()),\n    };\n  }\n\n  throw new Error(`unhandled type '${typeof got}`);\n}\n\n/**\n * Tests it a 'got' Value is contained in 'expected' interval, returning the Comparison information.\n * @param got the Value obtained from the test\n * @param expected the expected F32Interval\n * @returns the comparison results\n */\nfunction compareInterval(got: Value, expected: F32Interval): Comparison {\n  {\n    // Check type\n    const gTy = got.type;\n    if (!isFloatValue(got)) {\n      return {\n        matched: false,\n        got: `${Colors.red(gTy.toString())}(${got})`,\n        expected: `floating point value`,\n      };\n    }\n  }\n\n  if (got instanceof Scalar) {\n    const g = got.value as number;\n    const matched = expected.contains(g);\n    return {\n      matched,\n      got: g.toString(),\n      expected: matched ? Colors.green(expected.toString()) : Colors.red(expected.toString()),\n    };\n  }\n\n  // Vector results are currently not handled\n  throw new Error(`unhandled type '${typeof got}`);\n}\n\n/**\n * Tests it a 'got' Value is contained in 'expected' vector, returning the Comparison information.\n * @param got the Value obtained from the test, is expected to be a Vector\n * @param expected the expected array of F32Intervals, one for each element of the vector\n * @returns the comparison results\n */\nfunction compareVector(got: Value, expected: F32Interval[]): Comparison {\n  // Check got type\n  if (!(got instanceof Vector)) {\n    return {\n      matched: false,\n      got: `${Colors.red((typeof got).toString())}(${got})`,\n      expected: `Vector`,\n    };\n  }\n\n  // Check element type\n  {\n    const gTy = got.type.elementType;\n    if (!isFloatValue(got.elements[0])) {\n      return {\n        matched: false,\n        got: `${Colors.red(gTy.toString())}(${got})`,\n        expected: `floating point elements`,\n      };\n    }\n  }\n\n  if (got.elements.length !== expected.length) {\n    return {\n      matched: false,\n      got: `Vector of ${got.elements.length} elements`,\n      expected: `${expected.length} elements`,\n    };\n  }\n\n  const results = got.elements.map((_, idx) => {\n    const g = got.elements[idx].value as number;\n    return { match: expected[idx].contains(g), index: idx };\n  });\n\n  const failures = results.filter(v => !v.match).map(v => v.index);\n  if (failures.length !== 0) {\n    const expected_string = expected.map((v, idx) =>\n      idx in failures ? Colors.red(`[${v}]`) : Colors.green(`[${v}]`)\n    );\n    return {\n      matched: false,\n      got: `[${got.elements}]`,\n      expected: `[${expected_string}]`,\n    };\n  }\n\n  return {\n    matched: true,\n    got: `[${got.elements}]`,\n    expected: `[${Colors.green(expected.toString())}]`,\n  };\n}\n\n// Utility to get arround not being able to nest `` blocks\nfunction convertArrayToString<T>(m: T[]): string {\n  return `[${m.join(',')}]`;\n}\n\n/**\n * Tests it a 'got' Value is contained in 'expected' matrix, returning the Comparison information.\n * @param got the Value obtained from the test, is expected to be a Matrix\n * @param expected the expected array of array of F32Intervals, representing a column-major matrix\n * @returns the comparison results\n */\nfunction compareMatrix(got: Value, expected: F32Interval[][]): Comparison {\n  // Check got type\n  if (!(got instanceof Matrix)) {\n    return {\n      matched: false,\n      got: `${Colors.red((typeof got).toString())}(${got})`,\n      expected: `Matrix`,\n    };\n  }\n\n  // Check element type\n  {\n    const gTy = got.type.elementType;\n    if (!isFloatValue(got.elements[0][0])) {\n      return {\n        matched: false,\n        got: `${Colors.red(gTy.toString())}(${got})`,\n        expected: `floating point elements`,\n      };\n    }\n  }\n\n  // Check matrix dimensions\n  {\n    const gCols = got.elements.length;\n    const gRows = got.elements[0].length;\n    const eCols = expected.length;\n    const eRows = expected[0].length;\n\n    if (gCols !== eCols || gRows !== eRows) {\n      assert(false);\n      return {\n        matched: false,\n        got: `Matrix of ${gCols}x${gRows} elements`,\n        expected: `Matrix of ${eCols}x${eRows} elements`,\n      };\n    }\n  }\n\n  // Check that got values fall in expected intervals\n  let matched = true;\n  const expected_strings: string[][] = [...Array(got.elements.length)].map(_ => [\n    ...Array(got.elements[0].length),\n  ]);\n\n  got.elements.forEach((c, i) => {\n    c.forEach((r, j) => {\n      const g = r.value as number;\n      if (expected[i][j].contains(g)) {\n        expected_strings[i][j] = Colors.green(`[${expected[i][j]}]`);\n      } else {\n        matched = false;\n        expected_strings[i][j] = Colors.red(`[${expected[i][j]}]`);\n      }\n    });\n  });\n\n  return {\n    matched,\n    got: convertArrayToString(got.elements.map(convertArrayToString)),\n    expected: convertArrayToString(expected_strings.map(convertArrayToString)),\n  };\n}\n\n/**\n * compare() compares 'got' to 'expected', returning the Comparison information.\n * @param got the result obtained from the test\n * @param expected the expected result\n * @returns the comparison results\n */\nexport function compare(\n  got: Value,\n  expected: Value | F32Interval | F32Interval[] | F32Interval[][]\n): Comparison {\n  if (expected instanceof Array) {\n    if (expected[0] instanceof Array) {\n      expected = expected as F32Interval[][];\n      return compareMatrix(got, expected);\n    } else {\n      expected = expected as F32Interval[];\n      return compareVector(got, expected);\n    }\n  }\n\n  if (expected instanceof F32Interval) {\n    return compareInterval(got, expected);\n  }\n\n  return compareValue(got, expected);\n}\n\n/** @returns a Comparator that checks whether a test value matches any of the provided options */\nexport function anyOf(\n  ...expectations: Expectation[]\n): Comparator | (Comparator & SerializedComparator) {\n  const comparator = (got: Value) => {\n    const failed = new Set<string>();\n    for (const e of expectations) {\n      const cmp = toComparator(e)(got);\n      if (cmp.matched) {\n        return cmp;\n      }\n      failed.add(cmp.expected);\n    }\n    return { matched: false, got: got.toString(), expected: [...failed].join(' or ') };\n  };\n\n  if (getIsBuildingDataCache()) {\n    // If there's an active DataCache, and it supports storing, then append the\n    // comparator kind and serialized expectations to the comparator, so it can\n    // be serialized.\n    comparator.kind = 'anyOf';\n    comparator.data = expectations.map(e => serializeExpectation(e));\n  }\n  return comparator;\n}\n\n/** @returns a Comparator that skips the test if the expectation is undefined */\nexport function skipUndefined(\n  expectation: Expectation | undefined\n): Comparator | (Comparator & SerializedComparator) {\n  const comparator = (got: Value) => {\n    if (expectation !== undefined) {\n      return toComparator(expectation)(got);\n    }\n    return { matched: true, got: got.toString(), expected: `Treating 'undefined' as Any` };\n  };\n\n  if (getIsBuildingDataCache()) {\n    // If there's an active DataCache, and it supports storing, then append the\n    // comparator kind and serialized expectations to the comparator, so it can\n    // be serialized.\n    comparator.kind = 'skipUndefined';\n    if (expectation !== undefined) {\n      comparator.data = serializeExpectation(expectation);\n    }\n  }\n  return comparator;\n}\n\n/** SerializedComparatorAnyOf is the serialized type of an `anyOf` comparator. */\ntype SerializedComparatorAnyOf = {\n  kind: 'anyOf';\n  data: SerializedExpectation[];\n};\n\n/** SerializedComparatorSkipUndefined is the serialized type of an `skipUndefined` comparator. */\ntype SerializedComparatorSkipUndefined = {\n  kind: 'skipUndefined';\n  data?: SerializedExpectation;\n};\n\n/** SerializedComparator is a union of all the possible serialized comparator types. */\nexport type SerializedComparator = SerializedComparatorAnyOf | SerializedComparatorSkipUndefined;\n\n/**\n * Deserializes a comparator from a SerializedComparator.\n * @param data the SerializedComparator\n * @returns the deserialized Comparator.\n */\nexport function deserializeComparator(data: SerializedComparator): Comparator {\n  switch (data.kind) {\n    case 'anyOf': {\n      return anyOf(...data.data.map(e => deserializeExpectation(e)));\n    }\n    case 'skipUndefined': {\n      return skipUndefined(data.data !== undefined ? deserializeExpectation(data.data) : undefined);\n    }\n  }\n  throw `unhandled comparator kind`;\n}\n"],"mappings":"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"}