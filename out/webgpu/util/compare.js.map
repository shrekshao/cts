{"version":3,"sources":["../../../src/webgpu/util/compare.ts"],"names":["Colors","f32","Scalar","Vector","correctlyRounded","diffULP","absThreshold","diff","got","expected","Number","isFinite","Math","abs","ulpThreshold","ulp","correctlyRoundedThreshold","compare","cmpFloats","gTy","type","eTy","matched","red","toString","g","e","isFloat","kind","value","green","gLen","elements","length","eLen","gElements","Array","eElements","i","max","cmp","join","Error","anyOf","values","failed","push"],"mappings":"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","sourcesContent":["import { Colors } from '../../common/util/colors.js';\n\nimport { f32, Scalar, Value, Vector } from './conversion.js';\nimport { correctlyRounded, diffULP } from './math.js';\n\n/** Comparison describes the result of a Comparator function. */\nexport interface Comparison {\n  matched: boolean; // True if the two values were considered a match\n  got: string; // The string representation of the 'got' value (possibly with markup)\n  expected: string; // The string representation of the 'expected' value (possibly with markup)\n}\n\n/** FloatMatch is a function that compares whether the two floating point numbers match. */\nexport interface FloatMatch {\n  (got: number, expected: number): boolean;\n}\n\n/** Comparator is a function that compares whether the provided value matches an expectation. */\nexport interface Comparator {\n  (got: Value, cmpFloats: FloatMatch): Comparison;\n}\n\n/**\n * @returns a FloatMatch that returns true iff the two numbers are equal to, or\n * less than the specified absolute error threshold.\n */\nexport function absThreshold(diff: number): FloatMatch {\n  return (got, expected) => {\n    if (got === expected) {\n      return true;\n    }\n    if (!Number.isFinite(got) || !Number.isFinite(expected)) {\n      return false;\n    }\n    return Math.abs(got - expected) <= diff;\n  };\n}\n\n/**\n * @returns a FloatMatch that returns true iff the two numbers are within or\n * equal to the specified ULP threshold value.\n */\nexport function ulpThreshold(ulp: number): FloatMatch {\n  return (got, expected) => {\n    if (got === expected) {\n      return true;\n    }\n    return diffULP(got, expected) <= ulp;\n  };\n}\n\n/**\n * @returns a FloatMatch that returns true iff |expected| is a correctly round\n * to |got|.\n * |got| must be expressible as a float32.\n */\nexport function correctlyRoundedThreshold(): FloatMatch {\n  return (got, expected) => {\n    return correctlyRounded(f32(got), expected);\n  };\n}\n\n/**\n * compare() compares 'got' to 'expected', returning the Comparison information.\n * @param got the value obtained from the test\n * @param expected the expected value\n * @param cmpFloats the FloatMatch used to compare floating point values\n * @returns the comparison results\n */\nexport function compare(got: Value, expected: Value, cmpFloats: FloatMatch): Comparison {\n  {\n    // Check types\n    const gTy = got.type;\n    const eTy = expected.type;\n    if (gTy !== eTy) {\n      return {\n        matched: false,\n        got: `${Colors.red(gTy.toString())}(${got})`,\n        expected: `${Colors.red(eTy.toString())}(${expected})`,\n      };\n    }\n  }\n\n  if (got instanceof Scalar) {\n    const g = got;\n    const e = expected as Scalar;\n    const isFloat = g.type.kind === 'f32';\n    const matched =\n      (isFloat && cmpFloats(g.value as number, e.value as number)) ||\n      (!isFloat && g.value === e.value);\n    return {\n      matched,\n      got: g.toString(),\n      expected: matched ? Colors.green(e.toString()) : Colors.red(e.toString()),\n    };\n  }\n  if (got instanceof Vector) {\n    const gLen = got.elements.length;\n    const eLen = (expected as Vector).elements.length;\n    let matched = gLen === eLen;\n    const gElements = new Array<string>(gLen);\n    const eElements = new Array<string>(eLen);\n    for (let i = 0; i < Math.max(gLen, eLen); i++) {\n      if (i < gLen && i < eLen) {\n        const g = got.elements[i];\n        const e = (expected as Vector).elements[i];\n        const cmp = compare(g, e, cmpFloats);\n        matched = matched && cmp.matched;\n        gElements[i] = cmp.got;\n        eElements[i] = cmp.expected;\n        continue;\n      }\n      matched = false;\n      if (i < gLen) {\n        gElements[i] = got.elements[i].toString();\n      }\n      if (i < eLen) {\n        eElements[i] = (expected as Vector).elements[i].toString();\n      }\n    }\n    return {\n      matched,\n      got: `${got.type}(${gElements.join(', ')})`,\n      expected: `${expected.type}(${eElements.join(', ')})`,\n    };\n  }\n  throw new Error(`unhandled type '${typeof got}`);\n}\n\n/** @returns a Comparator that checks whether a test value matches any of the provided values */\nexport function anyOf(...values: Value[]): Comparator {\n  return (got, cmpFloats) => {\n    const failed: Array<string> = [];\n    for (const e of values) {\n      const cmp = compare(got, e, cmpFloats);\n      if (cmp.matched) {\n        return cmp;\n      }\n      failed.push(cmp.expected);\n    }\n    return { matched: false, got: got.toString(), expected: failed.join(' or ') };\n  };\n}\n"],"file":"compare.js"}