{"version":3,"sources":["../../../src/webgpu/util/color_space_conversion.ts"],"names":["assert","unreachable","multiplyMatrices","lin_sRGB","RGB","map","val","sign","abs","Math","pow","gam_sRGB","lin_sRGB_to_XYZ","rgb","M","XYZ_to_lin_sRGB","XYZ","lin_P3","gam_P3","lin_P3_to_XYZ","XYZ_to_lin_P3","displayP3ToSrgb","pixel","R","undefined","G","B","rgbVec","rgbMatrix","srgbToDisplayP3","makeInPlaceColorConversion","srcPremultiplied","dstPremultiplied","srcColorSpace","dstColorSpace","requireColorSpaceConversion","requireUnpremultiplyAlpha","requirePremultiplyAlpha","rgba","A"],"mappings":"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","sourcesContent":["import { assert, unreachable } from '../../common/util/util.js';\n\nimport { multiplyMatrices } from './math.js';\n\n// These color space conversion function definitions are copied directly from\n// CSS Color Module Level 4 Sample Code: https://drafts.csswg.org/css-color/#color-conversion-code\n// *EXCEPT* the conversion matrices are replaced with exact rational forms computed here:\n// https://github.com/kainino0x/exact_css_xyz_matrices\n//   using this Rust crate: https://crates.io/crates/rgb_derivation\n//   as described for sRGB on this page: https://mina86.com/2019/srgb-xyz-matrix/\n//   but using the numbers from the CSS spec: https://www.w3.org/TR/css-color-4/#predefined\n\n// Sample code for color conversions\n// Conversion can also be done using ICC profiles and a Color Management System\n// For clarity, a library is used for matrix multiplication (multiply-matrices.js)\n\n// sRGB-related functions\n\n/**\n * convert an array of sRGB values\n * where in-gamut values are in the range [0 - 1]\n * to linear light (un-companded) form.\n * https://en.wikipedia.org/wiki/SRGB\n * Extended transfer function:\n * for negative values,  linear portion is extended on reflection of axis,\n * then reflected power function is used.\n */\nfunction lin_sRGB(RGB: Array<number>) {\n  return RGB.map(val => {\n    const sign = val < 0 ? -1 : 1;\n    const abs = Math.abs(val);\n\n    if (abs < 0.04045) {\n      return val / 12.92;\n    }\n\n    return sign * Math.pow((abs + 0.055) / 1.055, 2.4);\n  });\n}\n\n/**\n * convert an array of linear-light sRGB values in the range 0.0-1.0\n * to gamma corrected form\n * https://en.wikipedia.org/wiki/SRGB\n * Extended transfer function:\n * For negative values, linear portion extends on reflection\n * of axis, then uses reflected pow below that\n */\nfunction gam_sRGB(RGB: Array<number>) {\n  return RGB.map(val => {\n    const sign = val < 0 ? -1 : 1;\n    const abs = Math.abs(val);\n\n    if (abs > 0.0031308) {\n      return sign * (1.055 * Math.pow(abs, 1 / 2.4) - 0.055);\n    }\n\n    return 12.92 * val;\n  });\n}\n\n/**\n * convert an array of linear-light sRGB values to CIE XYZ\n * using sRGB's own white, D65 (no chromatic adaptation)\n */\nfunction lin_sRGB_to_XYZ(rgb: Array<Array<number>>) {\n  const M = /* prettier-ignore */ [\n    [506752 / 1228815,  87881 / 245763,   12673 /   70218],\n    [ 87098 /  409605, 175762 / 245763,   12673 /  175545],\n    [  7918 /  409605,  87881 / 737289, 1001167 / 1053270],\n  ];\n  return multiplyMatrices(M, rgb);\n}\n\n/**\n * convert XYZ to linear-light sRGB\n * using sRGB's own white, D65 (no chromatic adaptation)\n */\nfunction XYZ_to_lin_sRGB(XYZ: Array<Array<number>>) {\n  const M = /* prettier-ignore */ [\n    [  12831 /   3959,    -329 /    214, -1974 /   3959],\n    [-851781 / 878810, 1648619 / 878810, 36519 / 878810],\n    [    705 /  12673,   -2585 /  12673,   705 /    667],\n  ];\n\n  return multiplyMatrices(M, XYZ);\n}\n\n//  display-p3-related functions\n\n/**\n * convert an array of display-p3 RGB values in the range 0.0 - 1.0\n * to linear light (un-companded) form.\n */\nfunction lin_P3(RGB: Array<number>) {\n  return lin_sRGB(RGB); // same as sRGB\n}\n\n/**\n * convert an array of linear-light display-p3 RGB  in the range 0.0-1.0\n * to gamma corrected form\n */\nfunction gam_P3(RGB: Array<number>) {\n  return gam_sRGB(RGB); // same as sRGB\n}\n\n/**\n * convert an array of linear-light display-p3 values to CIE XYZ\n * using display-p3's D65 (no chromatic adaptation)\n */\nfunction lin_P3_to_XYZ(rgb: Array<Array<number>>) {\n  const M = /* prettier-ignore */ [\n    [608311 / 1250200, 189793 / 714400,  198249 / 1000160],\n    [ 35783 /  156275, 247089 / 357200,  198249 / 2500400],\n    [     0 /       1,  32229 / 714400, 5220557 / 5000800],\n  ];\n\n  return multiplyMatrices(M, rgb);\n}\n\n/**\n * convert XYZ to linear-light P3\n * using display-p3's own white, D65 (no chromatic adaptation)\n */\nfunction XYZ_to_lin_P3(XYZ: Array<Array<number>>) {\n  const M = /* prettier-ignore */ [\n    [446124 / 178915, -333277 / 357830, -72051 / 178915],\n    [-14852 /  17905,   63121 /  35810,    423 /  17905],\n    [ 11844 / 330415,  -50337 / 660830, 316169 / 330415],\n  ];\n\n  return multiplyMatrices(M, XYZ);\n}\n\n/**\n * @returns the converted pixels in {R: number, G: number, B: number, A: number}.\n *\n * Follow conversion steps in CSS Color Module Level 4\n * https://drafts.csswg.org/css-color/#predefined-to-predefined\n * display-p3 and sRGB share the same white points.\n */\nexport function displayP3ToSrgb(pixel: {\n  R: number;\n  G: number;\n  B: number;\n  A: number;\n}): { R: number; G: number; B: number; A: number } {\n  assert(\n    pixel.R !== undefined && pixel.G !== undefined && pixel.B !== undefined,\n    'color space conversion requires all of R, G and B components'\n  );\n\n  let rgbVec = [pixel.R, pixel.G, pixel.B];\n  rgbVec = lin_P3(rgbVec);\n  let rgbMatrix = [[rgbVec[0]], [rgbVec[1]], [rgbVec[2]]];\n  rgbMatrix = XYZ_to_lin_sRGB(lin_P3_to_XYZ(rgbMatrix));\n  rgbVec = [rgbMatrix[0][0], rgbMatrix[1][0], rgbMatrix[2][0]];\n  rgbVec = gam_sRGB(rgbVec);\n\n  pixel.R = rgbVec[0];\n  pixel.G = rgbVec[1];\n  pixel.B = rgbVec[2];\n\n  return pixel;\n}\n/**\n * @returns the converted pixels in {R: number, G: number, B: number, A: number}.\n *\n * Follow conversion steps in CSS Color Module Level 4\n * https://drafts.csswg.org/css-color/#predefined-to-predefined\n * display-p3 and sRGB share the same white points.\n */\nexport function srgbToDisplayP3(pixel: {\n  R: number;\n  G: number;\n  B: number;\n  A: number;\n}): { R: number; G: number; B: number; A: number } {\n  assert(\n    pixel.R !== undefined && pixel.G !== undefined && pixel.B !== undefined,\n    'color space conversion requires all of R, G and B components'\n  );\n\n  let rgbVec = [pixel.R, pixel.G, pixel.B];\n  rgbVec = lin_sRGB(rgbVec);\n  let rgbMatrix = [[rgbVec[0]], [rgbVec[1]], [rgbVec[2]]];\n  rgbMatrix = XYZ_to_lin_P3(lin_sRGB_to_XYZ(rgbMatrix));\n  rgbVec = [rgbMatrix[0][0], rgbMatrix[1][0], rgbMatrix[2][0]];\n  rgbVec = gam_P3(rgbVec);\n\n  pixel.R = rgbVec[0];\n  pixel.G = rgbVec[1];\n  pixel.B = rgbVec[2];\n\n  return pixel;\n}\n\ntype InPlaceColorConversion = (rgba: {\n  R: number;\n  G: number;\n  B: number;\n  readonly A: number; // Alpha never changes during a conversion.\n}) => void;\n\n/**\n * Returns a function which applies the specified colorspace/premultiplication conversion.\n * Does not clamp, so may return values outside of the `dstColorSpace` gamut, due to either\n * color space conversion or alpha premultiplication.\n */\nexport function makeInPlaceColorConversion({\n  srcPremultiplied,\n  dstPremultiplied,\n  srcColorSpace = 'srgb',\n  dstColorSpace = 'srgb',\n}: {\n  srcPremultiplied: boolean;\n  dstPremultiplied: boolean;\n  srcColorSpace?: PredefinedColorSpace;\n  dstColorSpace?: GPUPredefinedColorSpace;\n}): InPlaceColorConversion {\n  const requireColorSpaceConversion = srcColorSpace !== dstColorSpace;\n  const requireUnpremultiplyAlpha =\n    srcPremultiplied && (requireColorSpaceConversion || srcPremultiplied !== dstPremultiplied);\n  const requirePremultiplyAlpha =\n    dstPremultiplied && (requireColorSpaceConversion || srcPremultiplied !== dstPremultiplied);\n\n  return rgba => {\n    assert(rgba.A >= 0.0 && rgba.A <= 1.0, 'rgba.A out of bounds');\n\n    if (requireUnpremultiplyAlpha) {\n      if (rgba.A !== 0.0) {\n        rgba.R /= rgba.A;\n        rgba.G /= rgba.A;\n        rgba.B /= rgba.A;\n      } else {\n        assert(\n          rgba.R === 0.0 && rgba.G === 0.0 && rgba.B === 0.0 && rgba.A === 0.0,\n          'Unpremultiply ops with alpha value 0.0 requires all channels equals to 0.0'\n        );\n      }\n    }\n    // It's possible RGB are now > 1.\n    // This technically represents colors outside the src gamut, so no clamping yet.\n\n    if (requireColorSpaceConversion) {\n      // WebGPU currently only supports dstColorSpace = 'srgb'.\n      if (srcColorSpace === 'display-p3' && dstColorSpace === 'srgb') {\n        rgba = displayP3ToSrgb(rgba);\n      } else {\n        unreachable();\n      }\n    }\n    // Now RGB may also be negative if the src gamut is larger than the dst gamut.\n\n    if (requirePremultiplyAlpha) {\n      rgba.R *= rgba.A;\n      rgba.G *= rgba.A;\n      rgba.B *= rgba.A;\n    }\n  };\n}\n"],"file":"color_space_conversion.js"}