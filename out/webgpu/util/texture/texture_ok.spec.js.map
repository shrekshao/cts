{"version":3,"sources":["../../../../src/webgpu/util/texture/texture_ok.spec.ts"],"names":["description","makeTestGroup","GPUTest","TexelView","textureContentIsOKByT2B","g","test","desc","params","u","combineWithParams","format","beginSubcases","data","opts","maxFractionalDiff","_ok","maxDiffULPsForFloatFormat","fn","t","size","texture","device","createTexture","usage","GPUTextureUsage","COPY_DST","COPY_SRC","trackForCleanup","queue","writeTexture","Float32Array","expColor","R","G","B","A","expTexelView","fromTexelsAsColors","coords","result","expect","undefined","combine","_maxValue","mode","Int8Array","fromTexelsAsBytes","Uint8Array","maxDiffULPsForNormFormat","message","exp","x","expectOK"],"mappings":"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","sourcesContent":["export const description = 'checkPixels helpers behave as expected against real textures';\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { GPUTest } from '../../gpu_test.js';\n\nimport { TexelView } from './texel_view.js';\nimport { textureContentIsOKByT2B } from './texture_ok.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('float32')\n  .desc(`Basic test that actual/expected must match, for float32.`)\n  .params(u =>\n    u\n      .combineWithParams([\n        { format: 'rgba32float' }, //\n        { format: 'rg32float' },\n      ] as const)\n      .beginSubcases()\n      .combineWithParams([\n        // Expected data is 0.6 in all channels\n        { data: 0.6, opts: { maxFractionalDiff: 0.0000001 }, _ok: true },\n        { data: 0.6, opts: { maxDiffULPsForFloatFormat: 1 }, _ok: true },\n\n        { data: 0.5999, opts: { maxFractionalDiff: 0 }, _ok: false },\n        { data: 0.5999, opts: { maxFractionalDiff: 0.0001001 }, _ok: true },\n\n        { data: 0.6001, opts: { maxFractionalDiff: 0 }, _ok: false },\n        { data: 0.6001, opts: { maxFractionalDiff: 0.0001001 }, _ok: true },\n\n        { data: 0.5999, opts: { maxDiffULPsForFloatFormat: 1677 }, _ok: false },\n        { data: 0.5999, opts: { maxDiffULPsForFloatFormat: 1678 }, _ok: true },\n\n        { data: 0.6001, opts: { maxDiffULPsForFloatFormat: 1676 }, _ok: false },\n        { data: 0.6001, opts: { maxDiffULPsForFloatFormat: 1677 }, _ok: true },\n      ])\n  )\n  .fn(async t => {\n    const { format, data, opts, _ok } = t.params;\n\n    const size = [1, 1];\n    const texture = t.device.createTexture({\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC,\n    });\n    t.trackForCleanup(texture);\n    t.device.queue.writeTexture({ texture }, new Float32Array([data, data, data, data]), {}, size);\n\n    const expColor = { R: 0.6, G: 0.6, B: 0.6, A: 0.6 };\n    const expTexelView = TexelView.fromTexelsAsColors(format, coords => expColor);\n\n    const result = await textureContentIsOKByT2B(t, { texture }, size, { expTexelView }, opts);\n    t.expect((result === undefined) === _ok, `expected ${_ok}, got ${result === undefined}`);\n  });\n\ng.test('norm')\n  .desc(`Basic test that actual/expected must match, for unorm/snorm.`)\n  .params(u =>\n    u\n      .combine('mode', ['bytes', 'colors'] as const)\n      .combineWithParams([\n        { format: 'r8unorm', _maxValue: 255 },\n        { format: 'r8snorm', _maxValue: 127 },\n      ] as const)\n      .beginSubcases()\n      .combineWithParams([\n        // Expected data is [10, 10]\n        { data: [10, 10], _ok: true },\n        { data: [10, 11], _ok: false },\n        { data: [11, 10], _ok: false },\n        { data: [11, 11], _ok: false },\n      ])\n  )\n  .fn(async t => {\n    const { mode, format, _maxValue, data, _ok } = t.params;\n\n    const size = [2, 1];\n    const texture = t.device.createTexture({\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC,\n    });\n    t.trackForCleanup(texture);\n    t.device.queue.writeTexture({ texture }, new Int8Array(data), {}, size);\n\n    let expTexelView;\n    switch (mode) {\n      case 'bytes':\n        expTexelView = TexelView.fromTexelsAsBytes(format, coords => new Uint8Array([10]));\n        break;\n      case 'colors':\n        expTexelView = TexelView.fromTexelsAsColors(format, coords => ({ R: 10 / _maxValue }));\n        break;\n    }\n\n    const result = await textureContentIsOKByT2B(\n      t,\n      { texture },\n      size,\n      { expTexelView },\n      { maxDiffULPsForNormFormat: 0 }\n    );\n    t.expect((result === undefined) === _ok, result?.message);\n  });\n\ng.test('snorm_min')\n  .desc(\n    `The minimum snorm value has two possible representations (e.g. -127 and -128). Ensure that\n    actual/expected can mismatch in both directions and pass the test.`\n  )\n  .params(u =>\n    u //\n      .combine('mode', ['bytes', 'colors'] as const)\n      .combineWithParams([\n        //\n        { format: 'r8snorm', _maxValue: 127 },\n      ] as const)\n  )\n  .fn(async t => {\n    const { mode, format, _maxValue } = t.params;\n\n    const data = [-_maxValue, -_maxValue - 1];\n\n    const size = [2, 1];\n    const texture = t.device.createTexture({\n      format,\n      size,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC,\n    });\n    t.trackForCleanup(texture);\n    t.device.queue.writeTexture({ texture }, new Int8Array(data), {}, size);\n\n    let expTexelView;\n    switch (mode) {\n      case 'bytes':\n        {\n          // Actual value should be [-127,-128], expected value is [-128,-127], both should pass.\n          const exp = [-_maxValue - 1, -_maxValue];\n          expTexelView = TexelView.fromTexelsAsBytes(\n            format,\n            coords => new Uint8Array([exp[coords.x]])\n          );\n        }\n        break;\n      case 'colors':\n        expTexelView = TexelView.fromTexelsAsColors(format, coords => ({ R: -1 }));\n        break;\n    }\n\n    const result = await textureContentIsOKByT2B(\n      t,\n      { texture },\n      size,\n      { expTexelView },\n      { maxDiffULPsForNormFormat: 0 }\n    );\n    t.expectOK(result);\n  });\n"],"file":"texture_ok.spec.js"}