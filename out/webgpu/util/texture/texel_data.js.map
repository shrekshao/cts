{"version":3,"sources":["../../../../src/webgpu/util/texture/texel_data.ts"],"names":["assert","unreachable","assertInIntegerRange","float32ToFloatBits","float32ToFloat16Bits","floatAsNormalizedInteger","gammaCompress","gammaDecompress","normalizedIntegerAsFloat","packRGB9E5UFloat","floatBitsToNumber","float16BitsToFloat32","floatBitsToNormalULPFromZero","kFloat32Format","kFloat16Format","numberToFloat32Bits","float32BitsToNumber","numberToFloatBits","clamp","signExtend","TexelComponent","makePerTexelComponent","components","value","values","c","applyEach","fn","Object","assign","undefined","encodeSRGB","R","G","B","kRGB","decodeSRGB","makeClampToRange","format","repr","kTexelRepresentationInfo","numericRange","x","componentOrder","packComponents","bitLengths","componentDataTypes","bitLengthMap","componentDataTypeMap","totalBitLength","entries","reduce","acc","data","ArrayBuffer","bitOffset","type","bitLength","byteOffset","Math","floor","byteLength","ceil","DataView","setUint8","setUint16","setUint32","view","currentValue","getUint32","mask","bitsToClearRight","bitsToClearLeft","newValue","setInt8","setInt16","setInt32","setFloat32","unpackComponentsBits","byteView","dataView","buffer","getUint8","getUint16","word","makeNormalizedInfo","opt","encodeNonSRGB","n","signed","decodeNonSRGB","numberToBitsNonSRGB","bitsToNumberNonSRGB","encode","decode","numberToBits","bitsToNumber","sRGB","bitsToULPFromZero","maxValue","max","dataType","componentInfo","pack","unpackBits","min","makeIntegerInfo","bitMask","v","makeFloatInfo","restrictedDepth","Float32Array","identity","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","kR","kRG","kRGBA","A","kBGRA","kFloat11Format","exponentBits","mantissaBits","bias","kFloat10Format","kFloat9e5Format","rgb10a2unorm","rg11b10ufloat","componentsBits","rgb9e5ufloat","Uint32Array","parts","depth32float","Depth","depth16unorm","depth24plus","stencil8","Stencil","getSingleDataType","infos","length","cur","getComponentReadbackTraits","ReadbackTypedArray","shaderType","Int32Array"],"mappings":"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","sourcesContent":["import { assert, unreachable } from '../../../common/util/util.js';\nimport { EncodableTextureFormat, UncompressedTextureFormat } from '../../capability_info.js';\nimport {\n  assertInIntegerRange,\n  float32ToFloatBits,\n  float32ToFloat16Bits,\n  floatAsNormalizedInteger,\n  gammaCompress,\n  gammaDecompress,\n  normalizedIntegerAsFloat,\n  packRGB9E5UFloat,\n  floatBitsToNumber,\n  float16BitsToFloat32,\n  floatBitsToNormalULPFromZero,\n  kFloat32Format,\n  kFloat16Format,\n  numberToFloat32Bits,\n  float32BitsToNumber,\n  numberToFloatBits,\n} from '../conversion.js';\nimport { clamp, signExtend } from '../math.js';\n\n/** A component of a texture format: R, G, B, A, Depth, or Stencil. */\nexport const enum TexelComponent {\n  R = 'R',\n  G = 'G',\n  B = 'B',\n  A = 'A',\n  Depth = 'Depth',\n  Stencil = 'Stencil',\n}\n\n/** Arbitrary data, per component of a texel format. */\nexport type PerTexelComponent<T> = { [c in TexelComponent]?: T };\n\n/** How a component is encoded in its bit range of a texel format. */\nexport type ComponentDataType = 'uint' | 'sint' | 'unorm' | 'snorm' | 'float' | 'ufloat' | null;\n\n/**\n * Maps component values to component values\n * @param {PerTexelComponent<number>} components - The input components.\n * @returns {PerTexelComponent<number>} The new output components.\n */\ntype ComponentMapFn = (components: PerTexelComponent<number>) => PerTexelComponent<number>;\n\n/**\n * Packs component values as an ArrayBuffer\n * @param {PerTexelComponent<number>} components - The input components.\n * @returns {ArrayBuffer} The packed data.\n */\ntype ComponentPackFn = (components: PerTexelComponent<number>) => ArrayBuffer;\n\n/** Unpacks component values from a Uint8Array */\ntype ComponentUnpackFn = (data: Uint8Array) => PerTexelComponent<number>;\n\n/**\n * Create a PerTexelComponent object filled with the same value for all components.\n * @param {TexelComponent[]} components - The component names.\n * @param {T} value - The value to assign to each component.\n * @returns {PerTexelComponent<T>}\n */\nfunction makePerTexelComponent<T>(components: TexelComponent[], value: T): PerTexelComponent<T> {\n  const values: PerTexelComponent<T> = {};\n  for (const c of components) {\n    values[c] = value;\n  }\n  return values;\n}\n\n/**\n * Create a function which applies clones a `PerTexelComponent<number>` and then applies the\n * function `fn` to each component of `components`.\n * @param {(value: number) => number} fn - The mapping function to apply to component values.\n * @param {TexelComponent[]} components - The component names.\n * @returns {ComponentMapFn} The map function which clones the input component values, and applies\n *                           `fn` to each of component of `components`.\n */\nfunction applyEach(fn: (value: number) => number, components: TexelComponent[]): ComponentMapFn {\n  return (values: PerTexelComponent<number>) => {\n    values = Object.assign({}, values);\n    for (const c of components) {\n      assert(values[c] !== undefined);\n      values[c] = fn(values[c]!);\n    }\n    return values;\n  };\n}\n\n/**\n * A `ComponentMapFn` for encoding sRGB.\n * @param {PerTexelComponent<number>} components - The input component values.\n * @returns {TexelComponent<number>} Gamma-compressed copy of `components`.\n */\nconst encodeSRGB: ComponentMapFn = components => {\n  assert(\n    components.R !== undefined && components.G !== undefined && components.B !== undefined,\n    'sRGB requires all of R, G, and B components'\n  );\n  return applyEach(gammaCompress, kRGB)(components);\n};\n\n/**\n * A `ComponentMapFn` for decoding sRGB.\n * @param {PerTexelComponent<number>} components - The input component values.\n * @returns {TexelComponent<number>} Gamma-decompressed copy of `components`.\n */\nconst decodeSRGB: ComponentMapFn = components => {\n  components = Object.assign({}, components);\n  assert(\n    components.R !== undefined && components.G !== undefined && components.B !== undefined,\n    'sRGB requires all of R, G, and B components'\n  );\n  return applyEach(gammaDecompress, kRGB)(components);\n};\n\n/**\n * Makes a `ComponentMapFn` for clamping values to the specified range.\n */\nexport function makeClampToRange(format: EncodableTextureFormat): ComponentMapFn {\n  const repr = kTexelRepresentationInfo[format];\n  assert(repr.numericRange !== null, 'Format has unknown numericRange');\n  return applyEach(x => clamp(x, repr.numericRange!), repr.componentOrder);\n}\n\n/**\n * Helper function to pack components as an ArrayBuffer.\n * @param {TexelComponent[]} componentOrder - The order of the component data.\n * @param {PerTexelComponent<number>} components - The input component values.\n * @param {number | PerTexelComponent<number>} bitLengths - The length in bits of each component.\n *   If a single number, all components are the same length, otherwise this is a dictionary of\n *   per-component bit lengths.\n * @param {ComponentDataType | PerTexelComponent<ComponentDataType>} componentDataTypes -\n *   The type of the data in `components`. If a single value, all components have the same value.\n *   Otherwise, this is a dictionary of per-component data types.\n * @returns {ArrayBuffer} The packed component data.\n */\nfunction packComponents(\n  componentOrder: TexelComponent[],\n  components: PerTexelComponent<number>,\n  bitLengths: number | PerTexelComponent<number>,\n  componentDataTypes: ComponentDataType | PerTexelComponent<ComponentDataType>\n): ArrayBuffer {\n  const bitLengthMap =\n    typeof bitLengths === 'number' ? makePerTexelComponent(componentOrder, bitLengths) : bitLengths;\n\n  const componentDataTypeMap =\n    typeof componentDataTypes === 'string' || componentDataTypes === null\n      ? makePerTexelComponent(componentOrder, componentDataTypes)\n      : componentDataTypes;\n\n  const totalBitLength = Object.entries(bitLengthMap).reduce((acc, [, value]) => {\n    assert(value !== undefined);\n    return acc + value;\n  }, 0);\n  assert(totalBitLength % 8 === 0);\n\n  const data = new ArrayBuffer(totalBitLength / 8);\n  let bitOffset = 0;\n  for (const c of componentOrder) {\n    const value = components[c];\n    const type = componentDataTypeMap[c];\n    const bitLength = bitLengthMap[c];\n    assert(value !== undefined);\n    assert(type !== undefined);\n    assert(bitLength !== undefined);\n\n    const byteOffset = Math.floor(bitOffset / 8);\n    const byteLength = Math.ceil(bitLength / 8);\n    switch (type) {\n      case 'uint':\n      case 'unorm':\n        if (byteOffset === bitOffset / 8 && byteLength === bitLength / 8) {\n          switch (byteLength) {\n            case 1:\n              new DataView(data, byteOffset, byteLength).setUint8(0, value);\n              break;\n            case 2:\n              new DataView(data, byteOffset, byteLength).setUint16(0, value, true);\n              break;\n            case 4:\n              new DataView(data, byteOffset, byteLength).setUint32(0, value, true);\n              break;\n            default:\n              unreachable();\n          }\n        } else {\n          // Packed representations are all 32-bit and use Uint as the data type.\n          // ex.) rg10b11float, rgb10a2unorm\n          const view = new DataView(data);\n          switch (view.byteLength) {\n            case 4: {\n              const currentValue = view.getUint32(0, true);\n\n              let mask = 0xffffffff;\n              const bitsToClearRight = bitOffset;\n              const bitsToClearLeft = 32 - (bitLength + bitOffset);\n\n              mask = (mask >>> bitsToClearRight) << bitsToClearRight;\n              mask = (mask << bitsToClearLeft) >>> bitsToClearLeft;\n\n              const newValue = (currentValue & ~mask) | (value << bitOffset);\n\n              view.setUint32(0, newValue, true);\n              break;\n            }\n            default:\n              unreachable();\n          }\n        }\n        break;\n      case 'sint':\n      case 'snorm':\n        assert(byteOffset === bitOffset / 8 && byteLength === bitLength / 8);\n        switch (byteLength) {\n          case 1:\n            new DataView(data, byteOffset, byteLength).setInt8(0, value);\n            break;\n          case 2:\n            new DataView(data, byteOffset, byteLength).setInt16(0, value, true);\n            break;\n          case 4:\n            new DataView(data, byteOffset, byteLength).setInt32(0, value, true);\n            break;\n          default:\n            unreachable();\n        }\n        break;\n      case 'float':\n        assert(byteOffset === bitOffset / 8 && byteLength === bitLength / 8);\n        switch (byteLength) {\n          case 4:\n            new DataView(data, byteOffset, byteLength).setFloat32(0, value, true);\n            break;\n          default:\n            unreachable();\n        }\n        break;\n      case 'ufloat':\n      case null:\n        unreachable();\n    }\n\n    bitOffset += bitLength;\n  }\n\n  return data;\n}\n\n/**\n * Unpack substrings of bits from a Uint8Array, e.g. [8,8,8,8] or [9,9,9,5].\n *\n * MAINTENANCE_TODO: Pretty slow. Could significantly optimize when `bitLengths` is 8, 16, or 32.\n */\nfunction unpackComponentsBits(\n  componentOrder: TexelComponent[],\n  byteView: Uint8Array,\n  bitLengths: number | PerTexelComponent<number>\n): PerTexelComponent<number> {\n  const bitLengthMap =\n    typeof bitLengths === 'number' ? makePerTexelComponent(componentOrder, bitLengths) : bitLengths;\n\n  const totalBitLength = Object.entries(bitLengthMap).reduce((acc, [, value]) => {\n    assert(value !== undefined);\n    return acc + value;\n  }, 0);\n  assert(totalBitLength % 8 === 0);\n\n  const components = makePerTexelComponent(componentOrder, 0);\n  let bitOffset = 0;\n  for (const c of componentOrder) {\n    const bitLength = bitLengthMap[c];\n    assert(bitLength !== undefined);\n\n    let value: number;\n\n    const byteOffset = Math.floor(bitOffset / 8);\n    const byteLength = Math.ceil(bitLength / 8);\n    if (byteOffset === bitOffset / 8 && byteLength === bitLength / 8) {\n      const dataView = new DataView(byteView.buffer, byteView.byteOffset + byteOffset, byteLength);\n      switch (byteLength) {\n        case 1:\n          value = dataView.getUint8(0);\n          break;\n        case 2:\n          value = dataView.getUint16(0, true);\n          break;\n        case 4:\n          value = dataView.getUint32(0, true);\n          break;\n        default:\n          unreachable();\n      }\n    } else {\n      // Packed representations are all 32-bit and use Uint as the data type.\n      // ex.) rg10b11float, rgb10a2unorm\n      const view = new DataView(byteView.buffer, byteView.byteOffset, byteView.byteLength);\n      assert(view.byteLength === 4);\n      const word = view.getUint32(0, true);\n      value = (word >>> bitOffset) & ((1 << bitLength) - 1);\n    }\n\n    bitOffset += bitLength;\n    components[c] = value;\n  }\n\n  return components;\n}\n\n/**\n * Create an entry in `kTexelRepresentationInfo` for normalized integer texel data with constant\n * bitlength.\n * @param {TexelComponent[]} componentOrder - The order of the component data.\n * @param {number} bitLength - The number of bits in each component.\n * @param {{signed: boolean; sRGB: boolean}} opt - Boolean flags for `signed` and `sRGB`.\n */\nfunction makeNormalizedInfo(\n  componentOrder: TexelComponent[],\n  bitLength: number,\n  opt: { signed: boolean; sRGB: boolean }\n): TexelRepresentationInfo {\n  const encodeNonSRGB = applyEach(\n    (n: number) => floatAsNormalizedInteger(n, bitLength, opt.signed),\n    componentOrder\n  );\n  const decodeNonSRGB = applyEach(\n    (n: number) => normalizedIntegerAsFloat(n, bitLength, opt.signed),\n    componentOrder\n  );\n\n  const numberToBitsNonSRGB = applyEach(\n    n => floatAsNormalizedInteger(n, bitLength, opt.signed),\n    componentOrder\n  );\n  let bitsToNumberNonSRGB: ComponentMapFn;\n  if (opt.signed) {\n    bitsToNumberNonSRGB = applyEach(\n      n => normalizedIntegerAsFloat(signExtend(n, bitLength), bitLength, opt.signed),\n      componentOrder\n    );\n  } else {\n    bitsToNumberNonSRGB = applyEach(\n      n => normalizedIntegerAsFloat(n, bitLength, opt.signed),\n      componentOrder\n    );\n  }\n\n  let encode: ComponentMapFn;\n  let decode: ComponentMapFn;\n  let numberToBits: ComponentMapFn;\n  let bitsToNumber: ComponentMapFn;\n  if (opt.sRGB) {\n    encode = components => encodeNonSRGB(encodeSRGB(components));\n    decode = components => decodeSRGB(decodeNonSRGB(components));\n    numberToBits = components => numberToBitsNonSRGB(encodeSRGB(components));\n    bitsToNumber = components => decodeSRGB(bitsToNumberNonSRGB(components));\n  } else {\n    encode = encodeNonSRGB;\n    decode = decodeNonSRGB;\n    numberToBits = numberToBitsNonSRGB;\n    bitsToNumber = bitsToNumberNonSRGB;\n  }\n\n  let bitsToULPFromZero: ComponentMapFn;\n  if (opt.signed) {\n    const maxValue = (1 << (bitLength - 1)) - 1; // e.g. 127 for snorm8\n    bitsToULPFromZero = applyEach(\n      n => Math.max(-maxValue, signExtend(n, bitLength)),\n      componentOrder\n    );\n  } else {\n    bitsToULPFromZero = components => components;\n  }\n\n  const dataType: ComponentDataType = opt.signed ? 'snorm' : 'unorm';\n  return {\n    componentOrder,\n    componentInfo: makePerTexelComponent(componentOrder, {\n      dataType,\n      bitLength,\n    }),\n    encode,\n    decode,\n    pack: (components: PerTexelComponent<number>) =>\n      packComponents(componentOrder, components, bitLength, dataType),\n    unpackBits: (data: Uint8Array) => unpackComponentsBits(componentOrder, data, bitLength),\n    numberToBits,\n    bitsToNumber,\n    bitsToULPFromZero,\n    numericRange: { min: opt.signed ? -1 : 0, max: 1 },\n  };\n}\n\n/**\n * Create an entry in `kTexelRepresentationInfo` for integer texel data with constant bitlength.\n * @param {TexelComponent[]} componentOrder - The order of the component data.\n * @param {number} bitLength - The number of bits in each component.\n * @param {{signed: boolean}} opt - Boolean flag for `signed`.\n */\nfunction makeIntegerInfo(\n  componentOrder: TexelComponent[],\n  bitLength: number,\n  opt: { signed: boolean }\n): TexelRepresentationInfo {\n  assert(bitLength <= 32);\n  const encode = applyEach(\n    (n: number) => (assertInIntegerRange(n, bitLength, opt.signed), n),\n    componentOrder\n  );\n  const decode = applyEach(\n    (n: number) => (assertInIntegerRange(n, bitLength, opt.signed), n),\n    componentOrder\n  );\n\n  let bitsToULPFromZero: ComponentMapFn;\n  if (opt.signed) {\n    bitsToULPFromZero = applyEach(n => signExtend(n, bitLength), componentOrder);\n  } else {\n    bitsToULPFromZero = components => components;\n  }\n\n  const dataType: ComponentDataType = opt.signed ? 'sint' : 'uint';\n  const bitMask = (1 << bitLength) - 1;\n  return {\n    componentOrder,\n    componentInfo: makePerTexelComponent(componentOrder, {\n      dataType,\n      bitLength,\n    }),\n    encode,\n    decode,\n    pack: (components: PerTexelComponent<number>) =>\n      packComponents(componentOrder, components, bitLength, dataType),\n    unpackBits: (data: Uint8Array) => unpackComponentsBits(componentOrder, data, bitLength),\n    numberToBits: applyEach(v => v & bitMask, componentOrder),\n    bitsToNumber: decode,\n    bitsToULPFromZero,\n    numericRange: opt.signed\n      ? { min: -(2 ** (bitLength - 1)), max: 2 ** (bitLength - 1) - 1 }\n      : { min: 0, max: 2 ** bitLength - 1 },\n  };\n}\n\n/**\n * Create an entry in `kTexelRepresentationInfo` for floating point texel data with constant\n * bitlength.\n * @param {TexelComponent[]} componentOrder - The order of the component data.\n * @param {number} bitLength - The number of bits in each component.\n */\nfunction makeFloatInfo(\n  componentOrder: TexelComponent[],\n  bitLength: number,\n  { restrictedDepth = false }: { restrictedDepth?: boolean } = {}\n): TexelRepresentationInfo {\n  let encode: ComponentMapFn;\n  let numberToBits;\n  let bitsToNumber;\n  let bitsToULPFromZero;\n  switch (bitLength) {\n    case 32:\n      if (restrictedDepth) {\n        encode = applyEach(v => {\n          assert(v >= 0.0 && v <= 1.0, 'depth out of range');\n          return new Float32Array([v])[0];\n        }, componentOrder);\n      } else {\n        encode = applyEach(v => new Float32Array([v])[0], componentOrder);\n      }\n      numberToBits = applyEach(numberToFloat32Bits, componentOrder);\n      bitsToNumber = applyEach(float32BitsToNumber, componentOrder);\n      bitsToULPFromZero = applyEach(\n        v => floatBitsToNormalULPFromZero(v, kFloat32Format),\n        componentOrder\n      );\n      break;\n    case 16:\n      if (restrictedDepth) {\n        encode = applyEach(v => {\n          assert(v >= 0.0 && v <= 1.0, 'depth out of range');\n          return float16BitsToFloat32(float32ToFloat16Bits(v));\n        }, componentOrder);\n      } else {\n        encode = applyEach(v => float16BitsToFloat32(float32ToFloat16Bits(v)), componentOrder);\n      }\n      numberToBits = applyEach(float32ToFloat16Bits, componentOrder);\n      bitsToNumber = applyEach(float16BitsToFloat32, componentOrder);\n      bitsToULPFromZero = applyEach(\n        v => floatBitsToNormalULPFromZero(v, kFloat16Format),\n        componentOrder\n      );\n      break;\n    default:\n      unreachable();\n  }\n  const decode = applyEach(identity, componentOrder);\n\n  return {\n    componentOrder,\n    componentInfo: makePerTexelComponent(componentOrder, {\n      dataType: 'float' as const,\n      bitLength,\n    }),\n    encode,\n    decode,\n    pack: (components: PerTexelComponent<number>) => {\n      switch (bitLength) {\n        case 16:\n          components = applyEach(float32ToFloat16Bits, componentOrder)(components);\n          return packComponents(componentOrder, components, 16, 'uint');\n        case 32:\n          return packComponents(componentOrder, components, bitLength, 'float');\n        default:\n          unreachable();\n      }\n    },\n    unpackBits: (data: Uint8Array) => unpackComponentsBits(componentOrder, data, bitLength),\n    numberToBits,\n    bitsToNumber,\n    bitsToULPFromZero,\n    numericRange: restrictedDepth\n      ? { min: 0, max: 1 }\n      : { min: Number.NEGATIVE_INFINITY, max: Number.POSITIVE_INFINITY },\n  };\n}\n\nconst kR = [TexelComponent.R];\nconst kRG = [TexelComponent.R, TexelComponent.G];\nconst kRGB = [TexelComponent.R, TexelComponent.G, TexelComponent.B];\nconst kRGBA = [TexelComponent.R, TexelComponent.G, TexelComponent.B, TexelComponent.A];\nconst kBGRA = [TexelComponent.B, TexelComponent.G, TexelComponent.R, TexelComponent.A];\n\nconst identity = (n: number) => n;\n\nconst kFloat11Format = { signed: 0, exponentBits: 5, mantissaBits: 6, bias: 15 } as const;\nconst kFloat10Format = { signed: 0, exponentBits: 5, mantissaBits: 5, bias: 15 } as const;\nconst kFloat9e5Format = { signed: 0, exponentBits: 5, mantissaBits: 9, bias: 15 } as const;\n\nexport type TexelRepresentationInfo = {\n  /** Order of components in the packed representation. */\n  readonly componentOrder: TexelComponent[];\n  /** Data type and bit length of each component in the format. */\n  readonly componentInfo: PerTexelComponent<{\n    dataType: ComponentDataType;\n    bitLength: number;\n  }>;\n  /** Encode shader values into their data representation. ex.) float 1.0 -> unorm8 255 */\n  // MAINTENANCE_TODO: Replace with numberToBits?\n  readonly encode: ComponentMapFn;\n  /** Decode the data representation into the shader values. ex.) unorm8 255 -> float 1.0 */\n  // MAINTENANCE_TODO: Replace with bitsToNumber?\n  readonly decode: ComponentMapFn;\n  /** Pack texel component values into an ArrayBuffer. ex.) rg8unorm {r: 0, g: 255} -> 0xFF00 */\n  // MAINTENANCE_TODO: Replace with packBits?\n  readonly pack: ComponentPackFn;\n\n  /** Convert integer bit representations into numeric values, e.g. unorm8 255 -> numeric 1.0 */\n  readonly bitsToNumber: ComponentMapFn;\n  /** Convert numeric values into integer bit representations, e.g. numeric 1.0 -> unorm8 255 */\n  readonly numberToBits: ComponentMapFn;\n  /** Unpack integer bit representations from an ArrayBuffer, e.g. 0xFF00 -> rg8unorm [0,255] */\n  readonly unpackBits: ComponentUnpackFn;\n  /** Convert integer bit representations into ULPs-from-zero, e.g. unorm8 255 -> 255 ULPs */\n  readonly bitsToULPFromZero: ComponentMapFn;\n  /** The valid range of numeric \"color\" values, e.g. [0, Infinity] for ufloat. */\n  readonly numericRange: null | { min: number; max: number };\n\n  // Add fields as needed\n};\nexport const kTexelRepresentationInfo: {\n  readonly [k in UncompressedTextureFormat]: TexelRepresentationInfo;\n} = {\n  .../* prettier-ignore */ {\n    'r8unorm':               makeNormalizedInfo(   kR,  8, { signed: false, sRGB: false }),\n    'r8snorm':               makeNormalizedInfo(   kR,  8, { signed:  true, sRGB: false }),\n    'r8uint':                makeIntegerInfo(      kR,  8, { signed: false }),\n    'r8sint':                makeIntegerInfo(      kR,  8, { signed:  true }),\n    'r16uint':               makeIntegerInfo(      kR, 16, { signed: false }),\n    'r16sint':               makeIntegerInfo(      kR, 16, { signed:  true }),\n    'r16float':              makeFloatInfo(        kR, 16),\n    'rg8unorm':              makeNormalizedInfo(  kRG,  8, { signed: false, sRGB: false }),\n    'rg8snorm':              makeNormalizedInfo(  kRG,  8, { signed:  true, sRGB: false }),\n    'rg8uint':               makeIntegerInfo(     kRG,  8, { signed: false }),\n    'rg8sint':               makeIntegerInfo(     kRG,  8, { signed:  true }),\n    'r32uint':               makeIntegerInfo(      kR, 32, { signed: false }),\n    'r32sint':               makeIntegerInfo(      kR, 32, { signed:  true }),\n    'r32float':              makeFloatInfo(        kR, 32),\n    'rg16uint':              makeIntegerInfo(     kRG, 16, { signed: false }),\n    'rg16sint':              makeIntegerInfo(     kRG, 16, { signed:  true }),\n    'rg16float':             makeFloatInfo(       kRG, 16),\n    'rgba8unorm':            makeNormalizedInfo(kRGBA,  8, { signed: false, sRGB: false }),\n    'rgba8unorm-srgb':       makeNormalizedInfo(kRGBA,  8, { signed: false, sRGB:  true }),\n    'rgba8snorm':            makeNormalizedInfo(kRGBA,  8, { signed:  true, sRGB: false }),\n    'rgba8uint':             makeIntegerInfo(   kRGBA,  8, { signed: false }),\n    'rgba8sint':             makeIntegerInfo(   kRGBA,  8, { signed:  true }),\n    'bgra8unorm':            makeNormalizedInfo(kBGRA,  8, { signed: false, sRGB: false }),\n    'bgra8unorm-srgb':       makeNormalizedInfo(kBGRA,  8, { signed: false, sRGB:  true }),\n    'rg32uint':              makeIntegerInfo(     kRG, 32, { signed: false }),\n    'rg32sint':              makeIntegerInfo(     kRG, 32, { signed:  true }),\n    'rg32float':             makeFloatInfo(       kRG, 32),\n    'rgba16uint':            makeIntegerInfo(   kRGBA, 16, { signed: false }),\n    'rgba16sint':            makeIntegerInfo(   kRGBA, 16, { signed:  true }),\n    'rgba16float':           makeFloatInfo(     kRGBA, 16),\n    'rgba32uint':            makeIntegerInfo(   kRGBA, 32, { signed: false }),\n    'rgba32sint':            makeIntegerInfo(   kRGBA, 32, { signed:  true }),\n    'rgba32float':           makeFloatInfo(     kRGBA, 32),\n  },\n  ...{\n    rgb10a2unorm: {\n      componentOrder: kRGBA,\n      componentInfo: {\n        R: { dataType: 'unorm', bitLength: 10 },\n        G: { dataType: 'unorm', bitLength: 10 },\n        B: { dataType: 'unorm', bitLength: 10 },\n        A: { dataType: 'unorm', bitLength: 2 },\n      },\n      encode: components => {\n        return {\n          R: floatAsNormalizedInteger(components.R ?? unreachable(), 10, false),\n          G: floatAsNormalizedInteger(components.G ?? unreachable(), 10, false),\n          B: floatAsNormalizedInteger(components.B ?? unreachable(), 10, false),\n          A: floatAsNormalizedInteger(components.A ?? unreachable(), 2, false),\n        };\n      },\n      decode: components => {\n        return {\n          R: normalizedIntegerAsFloat(components.R ?? unreachable(), 10, false),\n          G: normalizedIntegerAsFloat(components.G ?? unreachable(), 10, false),\n          B: normalizedIntegerAsFloat(components.B ?? unreachable(), 10, false),\n          A: normalizedIntegerAsFloat(components.A ?? unreachable(), 2, false),\n        };\n      },\n      pack: components =>\n        packComponents(\n          kRGBA,\n          components,\n          {\n            R: 10,\n            G: 10,\n            B: 10,\n            A: 2,\n          },\n          'uint'\n        ),\n      unpackBits: (data: Uint8Array) =>\n        unpackComponentsBits(kRGBA, data, { R: 10, G: 10, B: 10, A: 2 }),\n      numberToBits: components => ({\n        R: floatAsNormalizedInteger(components.R ?? unreachable(), 10, false),\n        G: floatAsNormalizedInteger(components.G ?? unreachable(), 10, false),\n        B: floatAsNormalizedInteger(components.B ?? unreachable(), 10, false),\n        A: floatAsNormalizedInteger(components.A ?? unreachable(), 2, false),\n      }),\n      bitsToNumber: components => ({\n        R: normalizedIntegerAsFloat(components.R!, 10, false),\n        G: normalizedIntegerAsFloat(components.G!, 10, false),\n        B: normalizedIntegerAsFloat(components.B!, 10, false),\n        A: normalizedIntegerAsFloat(components.A!, 2, false),\n      }),\n      bitsToULPFromZero: components => components,\n      numericRange: { min: 0, max: 1 },\n    },\n    rg11b10ufloat: {\n      componentOrder: kRGB,\n      encode: applyEach(identity, kRGB),\n      decode: applyEach(identity, kRGB),\n      componentInfo: {\n        R: { dataType: 'ufloat', bitLength: 11 },\n        G: { dataType: 'ufloat', bitLength: 11 },\n        B: { dataType: 'ufloat', bitLength: 10 },\n      },\n      pack: components => {\n        const componentsBits = {\n          R: float32ToFloatBits(components.R ?? unreachable(), 0, 5, 6, 15),\n          G: float32ToFloatBits(components.G ?? unreachable(), 0, 5, 6, 15),\n          B: float32ToFloatBits(components.B ?? unreachable(), 0, 5, 5, 15),\n        };\n        return packComponents(\n          kRGB,\n          componentsBits,\n          {\n            R: 11,\n            G: 11,\n            B: 10,\n          },\n          'uint'\n        );\n      },\n      unpackBits: (data: Uint8Array) => unpackComponentsBits(kRGB, data, { R: 11, G: 11, B: 10 }),\n      numberToBits: components => ({\n        R: numberToFloatBits(components.R ?? unreachable(), kFloat11Format),\n        G: numberToFloatBits(components.G ?? unreachable(), kFloat11Format),\n        B: numberToFloatBits(components.B ?? unreachable(), kFloat10Format),\n      }),\n      bitsToNumber: components => ({\n        R: floatBitsToNumber(components.R!, kFloat11Format),\n        G: floatBitsToNumber(components.G!, kFloat11Format),\n        B: floatBitsToNumber(components.B!, kFloat10Format),\n      }),\n      bitsToULPFromZero: components => ({\n        R: floatBitsToNormalULPFromZero(components.R!, kFloat11Format),\n        G: floatBitsToNormalULPFromZero(components.G!, kFloat11Format),\n        B: floatBitsToNormalULPFromZero(components.B!, kFloat10Format),\n      }),\n      numericRange: { min: 0, max: Number.POSITIVE_INFINITY },\n    },\n    rgb9e5ufloat: {\n      componentOrder: kRGB,\n      componentInfo: makePerTexelComponent(kRGB, {\n        dataType: 'ufloat',\n        bitLength: -1, // Components don't really have a bitLength since the format is packed.\n      }),\n      encode: applyEach(identity, kRGB),\n      decode: applyEach(identity, kRGB),\n      pack: components =>\n        new Uint32Array([\n          packRGB9E5UFloat(\n            components.R ?? unreachable(),\n            components.G ?? unreachable(),\n            components.B ?? unreachable()\n          ),\n        ]).buffer,\n      // For the purpose of unpacking, expand into three \"ufloat14\" values.\n      unpackBits: (data: Uint8Array) => {\n        // Pretend the exponent part is A so we can use unpackComponentsBits.\n        const parts = unpackComponentsBits(kRGBA, data, { R: 9, G: 9, B: 9, A: 5 });\n        return {\n          R: (parts.A! << 9) | parts.R!,\n          G: (parts.A! << 9) | parts.G!,\n          B: (parts.A! << 9) | parts.B!,\n        };\n      },\n      numberToBits: components => ({\n        R: float32ToFloatBits(components.R ?? unreachable(), 0, 5, 9, 15),\n        G: float32ToFloatBits(components.G ?? unreachable(), 0, 5, 9, 15),\n        B: float32ToFloatBits(components.B ?? unreachable(), 0, 5, 9, 15),\n      }),\n      bitsToNumber: components => ({\n        R: floatBitsToNumber(components.R!, kFloat9e5Format),\n        G: floatBitsToNumber(components.G!, kFloat9e5Format),\n        B: floatBitsToNumber(components.B!, kFloat9e5Format),\n      }),\n      bitsToULPFromZero: components => ({\n        R: floatBitsToNormalULPFromZero(components.R!, kFloat9e5Format),\n        G: floatBitsToNormalULPFromZero(components.G!, kFloat9e5Format),\n        B: floatBitsToNormalULPFromZero(components.B!, kFloat9e5Format),\n      }),\n      numericRange: { min: 0, max: Number.POSITIVE_INFINITY },\n    },\n    depth32float: makeFloatInfo([TexelComponent.Depth], 32, { restrictedDepth: true }),\n    depth16unorm: makeNormalizedInfo([TexelComponent.Depth], 16, { signed: false, sRGB: false }),\n    depth24plus: {\n      componentOrder: [TexelComponent.Depth],\n      componentInfo: { Depth: { dataType: null, bitLength: 24 } },\n      encode: applyEach(() => unreachable('depth24plus cannot be encoded'), [TexelComponent.Depth]),\n      decode: applyEach(() => unreachable('depth24plus cannot be decoded'), [TexelComponent.Depth]),\n      pack: () => unreachable('depth24plus data cannot be packed'),\n      unpackBits: () => unreachable('depth24plus data cannot be unpacked'),\n      numberToBits: () => unreachable('depth24plus has no representation'),\n      bitsToNumber: () => unreachable('depth24plus has no representation'),\n      bitsToULPFromZero: () => unreachable('depth24plus has no representation'),\n      numericRange: { min: 0, max: 1 },\n    },\n    stencil8: makeIntegerInfo([TexelComponent.Stencil], 8, { signed: false }),\n    'depth24unorm-stencil8': {\n      componentOrder: [TexelComponent.Depth, TexelComponent.Stencil],\n      componentInfo: {\n        Depth: {\n          dataType: 'unorm',\n          bitLength: 24,\n        },\n        Stencil: {\n          dataType: 'uint',\n          bitLength: 8,\n        },\n      },\n      encode: components => {\n        assert(components.Stencil !== undefined);\n        assertInIntegerRange(components.Stencil, 8, false);\n        return {\n          Depth: floatAsNormalizedInteger(components.Depth ?? unreachable(), 24, false),\n          Stencil: components.Stencil,\n        };\n      },\n      decode: components => {\n        assert(components.Stencil !== undefined);\n        assertInIntegerRange(components.Stencil, 8, false);\n        return {\n          Depth: normalizedIntegerAsFloat(components.Depth ?? unreachable(), 24, false),\n          Stencil: components.Stencil,\n        };\n      },\n      pack: () => unreachable('depth24unorm-stencil8 data cannot be packed'),\n      unpackBits: () => unreachable('depth24unorm-stencil8 data cannot be unpacked'),\n      numberToBits: () => unreachable('not implemented'),\n      bitsToNumber: () => unreachable('not implemented'),\n      bitsToULPFromZero: () => unreachable('not implemented'),\n      numericRange: null,\n    },\n    'depth32float-stencil8': {\n      componentOrder: [TexelComponent.Depth, TexelComponent.Stencil],\n      componentInfo: {\n        Depth: {\n          dataType: 'float',\n          bitLength: 32,\n        },\n        Stencil: {\n          dataType: 'uint',\n          bitLength: 8,\n        },\n      },\n      encode: components => {\n        assert(components.Stencil !== undefined);\n        assertInIntegerRange(components.Stencil, 8, false);\n        return components;\n      },\n      decode: components => {\n        assert(components.Stencil !== undefined);\n        assertInIntegerRange(components.Stencil, 8, false);\n        return components;\n      },\n      pack: () => unreachable('depth32float-stencil8 data cannot be packed'),\n      unpackBits: () => unreachable('depth32float-stencil8 data cannot be unpacked'),\n      numberToBits: () => unreachable('not implemented'),\n      bitsToNumber: () => unreachable('not implemented'),\n      bitsToULPFromZero: () => unreachable('not implemented'),\n      numericRange: null,\n    },\n    'depth24plus-stencil8': {\n      componentOrder: [TexelComponent.Depth, TexelComponent.Stencil],\n      componentInfo: {\n        Depth: {\n          dataType: null,\n          bitLength: 24,\n        },\n        Stencil: {\n          dataType: 'uint',\n          bitLength: 8,\n        },\n      },\n      encode: components => {\n        assert(components.Depth === undefined, 'depth24plus cannot be encoded');\n        assert(components.Stencil !== undefined);\n        assertInIntegerRange(components.Stencil, 8, false);\n        return components;\n      },\n      decode: components => {\n        assert(components.Depth === undefined, 'depth24plus cannot be decoded');\n        assert(components.Stencil !== undefined);\n        assertInIntegerRange(components.Stencil, 8, false);\n        return components;\n      },\n      pack: () => unreachable('depth24plus-stencil8 data cannot be packed'),\n      unpackBits: () => unreachable('depth24plus-stencil8 data cannot be unpacked'),\n      numberToBits: () => unreachable('depth24plus-stencil8 has no representation'),\n      bitsToNumber: () => unreachable('depth24plus-stencil8 has no representation'),\n      bitsToULPFromZero: () => unreachable('depth24plus-stencil8 has no representation'),\n      numericRange: null,\n    },\n  },\n};\n\n/**\n * Get the `ComponentDataType` for a format. All components must have the same type.\n * @param {UncompressedTextureFormat} format - The input format.\n * @returns {ComponentDataType} The data of the components.\n */\nexport function getSingleDataType(format: UncompressedTextureFormat): ComponentDataType {\n  const infos = Object.values(kTexelRepresentationInfo[format].componentInfo);\n  assert(infos.length > 0);\n  return infos.reduce((acc, cur) => {\n    assert(cur !== undefined);\n    assert(acc === undefined || acc === cur.dataType);\n    return cur.dataType;\n  }, infos[0]!.dataType);\n}\n\n/**\n *  Get traits for generating code to readback data from a component.\n * @param {ComponentDataType} dataType - The input component data type.\n * @returns A dictionary containing the respective `ReadbackTypedArray` and `shaderType`.\n */\nexport function getComponentReadbackTraits(dataType: ComponentDataType) {\n  switch (dataType) {\n    case 'ufloat':\n    case 'float':\n    case 'unorm':\n    case 'snorm':\n      return {\n        ReadbackTypedArray: Float32Array,\n        shaderType: 'f32' as const,\n      };\n    case 'uint':\n      return {\n        ReadbackTypedArray: Uint32Array,\n        shaderType: 'u32' as const,\n      };\n    case 'sint':\n      return {\n        ReadbackTypedArray: Int32Array,\n        shaderType: 'i32' as const,\n      };\n    default:\n      unreachable();\n  }\n}\n"],"file":"texel_data.js"}