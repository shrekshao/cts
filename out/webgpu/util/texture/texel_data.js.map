{"version":3,"sources":["../../../../src/webgpu/util/texture/texel_data.ts"],"names":["assert","unreachable","assertInIntegerRange","float32ToFloatBits","float32ToFloat16Bits","floatAsNormalizedInteger","gammaCompress","gammaDecompress","normalizedIntegerAsFloat","packRGB9E5UFloat","TexelComponent","makePerTexelComponent","components","value","values","c","applyEach","fn","Object","assign","undefined","encodeSRGB","R","G","B","kRGB","decodeSRGB","packComponents","componentOrder","bitLengths","componentDataTypes","bitLengthMap","componentDataTypeMap","totalBitLength","entries","reduce","acc","data","ArrayBuffer","bitOffset","type","bitLength","byteOffset","Math","floor","byteLength","ceil","DataView","setUint8","setUint16","setUint32","view","currentValue","getUint32","mask","bitsToClearRight","bitsToClearLeft","newValue","setInt8","setInt16","setInt32","setFloat32","makeNormalizedInfo","opt","encodeNonSRGB","n","signed","decodeNonSRGB","encode","decode","sRGB","dataType","componentInfo","pack","makeIntegerInfo","makeFloatInfo","identity","kR","kRG","kRGBA","A","kBGRA","kTexelRepresentationInfo","rgb10a2unorm","rg11b10ufloat","rgb9e5ufloat","Uint32Array","buffer","depth32float","Depth","depth16unorm","depth24plus","stencil8","Stencil","getSingleDataType","format","infos","length","cur","getComponentReadbackTraits","ReadbackTypedArray","Float32Array","shaderType","Int32Array"],"mappings":"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","sourcesContent":["import { assert, unreachable } from '../../../common/util/util.js';\nimport { UncompressedTextureFormat } from '../../capability_info.js';\nimport {\n  assertInIntegerRange,\n  float32ToFloatBits,\n  float32ToFloat16Bits,\n  floatAsNormalizedInteger,\n  gammaCompress,\n  gammaDecompress,\n  normalizedIntegerAsFloat,\n  packRGB9E5UFloat,\n} from '../conversion.js';\n\n/** A component of a texture format: R, G, B, A, Depth, or Stencil. */\nexport const enum TexelComponent {\n  R = 'R',\n  G = 'G',\n  B = 'B',\n  A = 'A',\n  Depth = 'Depth',\n  Stencil = 'Stencil',\n}\n\n/** Arbitrary data, per component of a texel format. */\nexport type PerTexelComponent<T> = { [c in TexelComponent]?: T };\n\n/** How a component is encoded in its bit range of a texel format. */\nexport type ComponentDataType = 'uint' | 'sint' | 'unorm' | 'snorm' | 'float' | 'ufloat' | null;\n\n/**\n * Maps component values to component values\n * @param {PerTexelComponent<number>} components - The input components.\n * @returns {PerTexelComponent<number>} The new output components.\n */\ntype ComponentMapFn = (components: PerTexelComponent<number>) => PerTexelComponent<number>;\n\n/**\n * Packs component values as an ArrayBuffer\n * @param {PerTexelComponent<number>} components - The input components.\n * @returns {ArrayBuffer} The packed data.\n */\ntype ComponentPackFn = (components: PerTexelComponent<number>) => ArrayBuffer;\n\n/**\n * Create a PerTexelComponent object filled with the same value for all components.\n * @param {TexelComponent[]} components - The component names.\n * @param {T} value - The value to assign to each component.\n * @returns {PerTexelComponent<T>}\n */\nfunction makePerTexelComponent<T>(components: TexelComponent[], value: T): PerTexelComponent<T> {\n  const values: PerTexelComponent<T> = {};\n  for (const c of components) {\n    values[c] = value;\n  }\n  return values;\n}\n\n/**\n * Create a function which applies clones a `PerTexelComponent<number>` and then applies the\n * function `fn` to each component of `components`.\n * @param {(value: number) => number} fn - The mapping function to apply to component values.\n * @param {TexelComponent[]} components - The component names.\n * @returns {ComponentMapFn} The map function which clones the input component values, and applies\n *                           `fn` to each of component of `components`.\n */\nfunction applyEach(fn: (value: number) => number, components: TexelComponent[]): ComponentMapFn {\n  return (values: PerTexelComponent<number>) => {\n    values = Object.assign({}, values);\n    for (const c of components) {\n      assert(values[c] !== undefined);\n      values[c] = fn(values[c]!);\n    }\n    return values;\n  };\n}\n\n/**\n * A `ComponentMapFn` for encoding sRGB.\n * @param {PerTexelComponent<number>} components - The input component values.\n * @returns {TexelComponent<number>} Gamma-compressed copy of `components`.\n */\nconst encodeSRGB: ComponentMapFn = components => {\n  assert(\n    components.R !== undefined && components.G !== undefined && components.B !== undefined,\n    'sRGB requires all of R, G, and B components'\n  );\n  return applyEach(gammaCompress, kRGB)(components);\n};\n\n/**\n * A `ComponentMapFn` for decoding sRGB.\n * @param {PerTexelComponent<number>} components - The input component values.\n * @returns {TexelComponent<number>} Gamma-decompressed copy of `components`.\n */\nconst decodeSRGB: ComponentMapFn = components => {\n  components = Object.assign({}, components);\n  assert(\n    components.R !== undefined && components.G !== undefined && components.B !== undefined,\n    'sRGB requires all of R, G, and B components'\n  );\n  return applyEach(gammaDecompress, kRGB)(components);\n};\n\n/**\n * Helper function to pack components as an ArrayBuffer.\n * @param {TexelComponent[]} componentOrder - The order of the component data.\n * @param {PerTexelComponent<number>} components - The input component values.\n * @param {number | PerTexelComponent<number>} bitLengths - The length in bits of each component.\n *   If a single number, all components are the same length, otherwise this is a dictionary of\n *   per-component bit lengths.\n * @param {ComponentDataType | PerTexelComponent<ComponentDataType>} componentDataTypes -\n *   The type of the data in `components`. If a single value, all components have the same value.\n *   Otherwise, this is a dictionary of per-component data types.\n * @returns {ArrayBuffer} The packed component data.\n */\nfunction packComponents(\n  componentOrder: TexelComponent[],\n  components: PerTexelComponent<number>,\n  bitLengths: number | PerTexelComponent<number>,\n  componentDataTypes: ComponentDataType | PerTexelComponent<ComponentDataType>\n): ArrayBuffer {\n  const bitLengthMap =\n    typeof bitLengths === 'number' ? makePerTexelComponent(componentOrder, bitLengths) : bitLengths;\n\n  const componentDataTypeMap =\n    typeof componentDataTypes === 'string' || componentDataTypes === null\n      ? makePerTexelComponent(componentOrder, componentDataTypes)\n      : componentDataTypes;\n\n  const totalBitLength = Object.entries(bitLengthMap).reduce((acc, [, value]) => {\n    assert(value !== undefined);\n    return acc + value;\n  }, 0);\n  assert(totalBitLength % 8 === 0);\n\n  const data = new ArrayBuffer(totalBitLength / 8);\n  let bitOffset = 0;\n  for (const c of componentOrder) {\n    const value = components[c];\n    const type = componentDataTypeMap[c];\n    const bitLength = bitLengthMap[c];\n    assert(value !== undefined);\n    assert(type !== undefined);\n    assert(bitLength !== undefined);\n\n    const byteOffset = Math.floor(bitOffset / 8);\n    const byteLength = Math.ceil(bitLength / 8);\n    switch (type) {\n      case 'uint':\n      case 'unorm':\n        if (byteOffset === bitOffset / 8 && byteLength === bitLength / 8) {\n          switch (byteLength) {\n            case 1:\n              new DataView(data, byteOffset, byteLength).setUint8(0, value);\n              break;\n            case 2:\n              new DataView(data, byteOffset, byteLength).setUint16(0, value, true);\n              break;\n            case 4:\n              new DataView(data, byteOffset, byteLength).setUint32(0, value, true);\n              break;\n            default:\n              unreachable();\n          }\n        } else {\n          // Packed representations are all 32-bit and use Uint as the data type.\n          // ex.) rg10b11float, rgb10a2unorm\n          const view = new DataView(data);\n          switch (view.byteLength) {\n            case 4: {\n              const currentValue = view.getUint32(0, true);\n\n              let mask = 0xffffffff;\n              const bitsToClearRight = bitOffset;\n              const bitsToClearLeft = 32 - (bitLength + bitOffset);\n\n              mask = (mask >>> bitsToClearRight) << bitsToClearRight;\n              mask = (mask << bitsToClearLeft) >>> bitsToClearLeft;\n\n              const newValue = (currentValue & ~mask) | (value << bitOffset);\n\n              view.setUint32(0, newValue, true);\n              break;\n            }\n            default:\n              unreachable();\n          }\n        }\n        break;\n      case 'sint':\n      case 'snorm':\n        assert(byteOffset === bitOffset / 8 && byteLength === bitLength / 8);\n        switch (byteLength) {\n          case 1:\n            new DataView(data, byteOffset, byteLength).setInt8(0, value);\n            break;\n          case 2:\n            new DataView(data, byteOffset, byteLength).setInt16(0, value, true);\n            break;\n          case 4:\n            new DataView(data, byteOffset, byteLength).setInt32(0, value, true);\n            break;\n          default:\n            unreachable();\n        }\n        break;\n      case 'float':\n        assert(byteOffset === bitOffset / 8 && byteLength === bitLength / 8);\n        switch (byteLength) {\n          case 4:\n            new DataView(data, byteOffset, byteLength).setFloat32(0, value, true);\n            break;\n          default:\n            unreachable();\n        }\n        break;\n      case 'ufloat':\n      case null:\n        unreachable();\n    }\n\n    bitOffset += bitLength;\n  }\n\n  return data;\n}\n\n/**\n * Create an entry in `kTexelRepresentationInfo` for normalized integer texel data with constant\n * bitlength.\n * @param {TexelComponent[]} componentOrder - The order of the component data.\n * @param {number} bitLength - The number of bits in each component.\n * @param {{signed: boolean; sRGB: boolean}} opt - Boolean flags for `signed` and `sRGB`.\n */\nfunction makeNormalizedInfo(\n  componentOrder: TexelComponent[],\n  bitLength: number,\n  opt: { signed: boolean; sRGB: boolean }\n) {\n  const encodeNonSRGB = applyEach(\n    (n: number) => floatAsNormalizedInteger(n, bitLength, opt.signed),\n    componentOrder\n  );\n  const decodeNonSRGB = applyEach(\n    (n: number) => normalizedIntegerAsFloat(n, bitLength, opt.signed),\n    componentOrder\n  );\n\n  let encode: ComponentMapFn;\n  let decode: ComponentMapFn;\n  if (opt.sRGB) {\n    encode = components => encodeNonSRGB(encodeSRGB(components));\n    decode = components => decodeSRGB(decodeNonSRGB(components));\n  } else {\n    encode = encodeNonSRGB;\n    decode = decodeNonSRGB;\n  }\n\n  const dataType = opt.signed ? 'snorm' : ('unorm' as ComponentDataType);\n  return {\n    componentOrder,\n    componentInfo: makePerTexelComponent(componentOrder, {\n      dataType,\n      bitLength,\n    }),\n    encode,\n    decode,\n    pack: (components: PerTexelComponent<number>) =>\n      packComponents(componentOrder, components, bitLength, dataType),\n  };\n}\n\n/**\n * Create an entry in `kTexelRepresentationInfo` for integer texel data with constant bitlength.\n * @param {TexelComponent[]} componentOrder - The order of the component data.\n * @param {number} bitLength - The number of bits in each component.\n * @param {{signed: boolean}} opt - Boolean flag for `signed`.\n */\nfunction makeIntegerInfo(\n  componentOrder: TexelComponent[],\n  bitLength: number,\n  opt: { signed: boolean }\n) {\n  const encode = applyEach(\n    (n: number) => (assertInIntegerRange(n, bitLength, opt.signed), n),\n    componentOrder\n  );\n  const decode = applyEach(\n    (n: number) => (assertInIntegerRange(n, bitLength, opt.signed), n),\n    componentOrder\n  );\n\n  const dataType = opt.signed ? 'sint' : ('uint' as ComponentDataType);\n  return {\n    componentOrder,\n    componentInfo: makePerTexelComponent(componentOrder, {\n      dataType,\n      bitLength,\n    }),\n    encode,\n    decode,\n    pack: (components: PerTexelComponent<number>) =>\n      packComponents(componentOrder, components, bitLength, dataType),\n  };\n}\n\n/**\n * Create an entry in `kTexelRepresentationInfo` for floating point texel data with constant\n * bitlength.\n * @param {TexelComponent[]} componentOrder - The order of the component data.\n * @param {number} bitLength - The number of bits in each component.\n */\nfunction makeFloatInfo(componentOrder: TexelComponent[], bitLength: number) {\n  // TODO: Use |bitLength| to round float values based on precision.\n  const encode = applyEach(identity, componentOrder);\n  const decode = applyEach(identity, componentOrder);\n\n  return {\n    componentOrder,\n    componentInfo: makePerTexelComponent(componentOrder, {\n      dataType: 'float' as ComponentDataType,\n      bitLength,\n    }),\n    encode,\n    decode,\n    pack: (components: PerTexelComponent<number>) => {\n      switch (bitLength) {\n        case 16:\n          components = applyEach(\n            (n: number) => float32ToFloat16Bits(n),\n            componentOrder\n          )(components);\n          return packComponents(componentOrder, components, 16, 'uint');\n        case 32:\n          return packComponents(componentOrder, components, bitLength, 'float');\n        default:\n          unreachable();\n      }\n    },\n  };\n}\n\nconst kR = [TexelComponent.R];\nconst kRG = [TexelComponent.R, TexelComponent.G];\nconst kRGB = [TexelComponent.R, TexelComponent.G, TexelComponent.B];\nconst kRGBA = [TexelComponent.R, TexelComponent.G, TexelComponent.B, TexelComponent.A];\nconst kBGRA = [TexelComponent.B, TexelComponent.G, TexelComponent.R, TexelComponent.A];\n\nconst identity = (n: number) => n;\n\nexport type TexelRepresentationInfo = {\n  /** Order of components in the packed representation. */\n  readonly componentOrder: TexelComponent[];\n  /** Data type and bit length of each component in the format. */\n  readonly componentInfo: PerTexelComponent<{\n    dataType: ComponentDataType;\n    bitLength: number;\n  }>;\n  /** Encode shader values into their data representation. ex.) float 1.0 -> unorm8 255 */\n  readonly encode: ComponentMapFn;\n  /** Decode the data representation into the shader values. ex.) unorm8 255 -> float 1.0 */\n  readonly decode: ComponentMapFn;\n  /** Pack texel component values into an ArrayBuffer. ex.) rg8unorm {r: 0, g:255} -> 0xFF00 */\n  readonly pack: ComponentPackFn;\n  // Add fields as needed\n};\nexport const kTexelRepresentationInfo: {\n  readonly [k in UncompressedTextureFormat]: TexelRepresentationInfo;\n} = {\n  .../* prettier-ignore */ {\n    'r8unorm':               makeNormalizedInfo(   kR,  8, { signed: false, sRGB: false }),\n    'r8snorm':               makeNormalizedInfo(   kR,  8, { signed:  true, sRGB: false }),\n    'r8uint':                makeIntegerInfo(      kR,  8, { signed: false }),\n    'r8sint':                makeIntegerInfo(      kR,  8, { signed:  true }),\n    'r16uint':               makeIntegerInfo(      kR, 16, { signed: false }),\n    'r16sint':               makeIntegerInfo(      kR, 16, { signed:  true }),\n    'r16float':              makeFloatInfo(        kR, 16),\n    'rg8unorm':              makeNormalizedInfo(  kRG,  8, { signed: false, sRGB: false }),\n    'rg8snorm':              makeNormalizedInfo(  kRG,  8, { signed:  true, sRGB: false }),\n    'rg8uint':               makeIntegerInfo(     kRG,  8, { signed: false }),\n    'rg8sint':               makeIntegerInfo(     kRG,  8, { signed:  true }),\n    'r32uint':               makeIntegerInfo(      kR, 32, { signed: false }),\n    'r32sint':               makeIntegerInfo(      kR, 32, { signed:  true }),\n    'r32float':              makeFloatInfo(        kR, 32),\n    'rg16uint':              makeIntegerInfo(     kRG, 16, { signed: false }),\n    'rg16sint':              makeIntegerInfo(     kRG, 16, { signed:  true }),\n    'rg16float':             makeFloatInfo(       kRG, 16),\n    'rgba8unorm':            makeNormalizedInfo(kRGBA,  8, { signed: false, sRGB: false }),\n    'rgba8unorm-srgb':       makeNormalizedInfo(kRGBA,  8, { signed: false, sRGB:  true }),\n    'rgba8snorm':            makeNormalizedInfo(kRGBA,  8, { signed:  true, sRGB: false }),\n    'rgba8uint':             makeIntegerInfo(   kRGBA,  8, { signed: false }),\n    'rgba8sint':             makeIntegerInfo(   kRGBA,  8, { signed:  true }),\n    'bgra8unorm':            makeNormalizedInfo(kBGRA,  8, { signed: false, sRGB: false }),\n    'bgra8unorm-srgb':       makeNormalizedInfo(kBGRA,  8, { signed: false, sRGB:  true }),\n    'rg32uint':              makeIntegerInfo(     kRG, 32, { signed: false }),\n    'rg32sint':              makeIntegerInfo(     kRG, 32, { signed:  true }),\n    'rg32float':             makeFloatInfo(       kRG, 32),\n    'rgba16uint':            makeIntegerInfo(   kRGBA, 16, { signed: false }),\n    'rgba16sint':            makeIntegerInfo(   kRGBA, 16, { signed:  true }),\n    'rgba16float':           makeFloatInfo(     kRGBA, 16),\n    'rgba32uint':            makeIntegerInfo(   kRGBA, 32, { signed: false }),\n    'rgba32sint':            makeIntegerInfo(   kRGBA, 32, { signed:  true }),\n    'rgba32float':           makeFloatInfo(     kRGBA, 32),\n  },\n  ...{\n    rgb10a2unorm: {\n      componentOrder: kRGBA,\n      componentInfo: {\n        R: { dataType: 'unorm', bitLength: 10 },\n        G: { dataType: 'unorm', bitLength: 10 },\n        B: { dataType: 'unorm', bitLength: 10 },\n        A: { dataType: 'unorm', bitLength: 2 },\n      },\n      encode: components => {\n        return {\n          R: floatAsNormalizedInteger(components.R ?? unreachable(), 10, false),\n          G: floatAsNormalizedInteger(components.G ?? unreachable(), 10, false),\n          B: floatAsNormalizedInteger(components.B ?? unreachable(), 10, false),\n          A: floatAsNormalizedInteger(components.A ?? unreachable(), 2, false),\n        };\n      },\n      decode: components => {\n        return {\n          R: normalizedIntegerAsFloat(components.R ?? unreachable(), 10, false),\n          G: normalizedIntegerAsFloat(components.G ?? unreachable(), 10, false),\n          B: normalizedIntegerAsFloat(components.B ?? unreachable(), 10, false),\n          A: normalizedIntegerAsFloat(components.A ?? unreachable(), 2, false),\n        };\n      },\n      pack: components =>\n        packComponents(\n          kRGBA,\n          components,\n          {\n            R: 10,\n            G: 10,\n            B: 10,\n            A: 2,\n          },\n          'uint'\n        ),\n    },\n    rg11b10ufloat: {\n      componentOrder: kRGB,\n      encode: applyEach(identity, kRGB),\n      decode: applyEach(identity, kRGB),\n      componentInfo: {\n        R: { dataType: 'ufloat', bitLength: 11 },\n        G: { dataType: 'ufloat', bitLength: 11 },\n        B: { dataType: 'ufloat', bitLength: 10 },\n      },\n      pack: components => {\n        components = {\n          R: float32ToFloatBits(components.R ?? unreachable(), 0, 5, 6, 15),\n          G: float32ToFloatBits(components.G ?? unreachable(), 0, 5, 6, 15),\n          B: float32ToFloatBits(components.B ?? unreachable(), 0, 5, 5, 15),\n        };\n        return packComponents(\n          kRGB,\n          components,\n          {\n            R: 11,\n            G: 11,\n            B: 10,\n          },\n          'uint'\n        );\n      },\n    },\n    rgb9e5ufloat: {\n      componentOrder: kRGB,\n      componentInfo: makePerTexelComponent(kRGB, {\n        dataType: 'ufloat',\n        bitLength: -1, // Components don't really have a bitLength since the format is packed.\n      }),\n      encode: applyEach(identity, kRGB),\n      decode: applyEach(identity, kRGB),\n      pack: components =>\n        new Uint32Array([\n          packRGB9E5UFloat(\n            components.R ?? unreachable(),\n            components.G ?? unreachable(),\n            components.B ?? unreachable()\n          ),\n        ]).buffer,\n    },\n    depth32float: {\n      componentOrder: [TexelComponent.Depth],\n      encode: applyEach((n: number) => (assert(n >= 0 && n <= 1.0), n), [TexelComponent.Depth]),\n      decode: applyEach((n: number) => (assert(n >= 0 && n <= 1.0), n), [TexelComponent.Depth]),\n      componentInfo: { Depth: { dataType: 'float', bitLength: 32 } },\n      pack: components => packComponents([TexelComponent.Depth], components, 32, 'float'),\n    },\n    depth16unorm: makeNormalizedInfo([TexelComponent.Depth], 16, { signed: false, sRGB: false }),\n    depth24plus: {\n      componentOrder: [TexelComponent.Depth],\n      componentInfo: { Depth: { dataType: null, bitLength: 24 } },\n      encode: applyEach(() => unreachable('depth24plus cannot be encoded'), [TexelComponent.Depth]),\n      decode: applyEach(() => unreachable('depth24plus cannot be decoded'), [TexelComponent.Depth]),\n      pack: () => unreachable('depth24plus data cannot be packed'),\n    },\n    stencil8: {\n      componentOrder: [TexelComponent.Stencil],\n      componentInfo: { Stencil: { dataType: 'uint', bitLength: 8 } },\n      encode: components => {\n        assert(components.Stencil !== undefined);\n        assertInIntegerRange(components.Stencil, 8, false);\n        return components;\n      },\n      decode: components => {\n        assert(components.Stencil !== undefined);\n        assertInIntegerRange(components.Stencil, 8, false);\n        return components;\n      },\n      pack: components => packComponents([TexelComponent.Stencil], components, 8, 'uint'),\n    },\n    'depth24unorm-stencil8': {\n      componentOrder: [TexelComponent.Depth, TexelComponent.Stencil],\n      componentInfo: {\n        Depth: {\n          dataType: 'unorm',\n          bitLength: 24,\n        },\n        Stencil: {\n          dataType: 'uint',\n          bitLength: 8,\n        },\n      },\n      encode: components => {\n        assert(components.Stencil !== undefined);\n        assertInIntegerRange(components.Stencil, 8, false);\n        return {\n          Depth: floatAsNormalizedInteger(components.Depth ?? unreachable(), 24, false),\n          Stencil: components.Stencil,\n        };\n      },\n      decode: components => {\n        assert(components.Stencil !== undefined);\n        assertInIntegerRange(components.Stencil, 8, false);\n        return {\n          Depth: normalizedIntegerAsFloat(components.Depth ?? unreachable(), 24, false),\n          Stencil: components.Stencil,\n        };\n      },\n      pack: () => unreachable('depth24unorm-stencil8 data cannot be packed'),\n    },\n    'depth32float-stencil8': {\n      componentOrder: [TexelComponent.Depth, TexelComponent.Stencil],\n      componentInfo: {\n        Depth: {\n          dataType: 'float',\n          bitLength: 32,\n        },\n        Stencil: {\n          dataType: 'uint',\n          bitLength: 8,\n        },\n      },\n      encode: components => {\n        assert(components.Stencil !== undefined);\n        assertInIntegerRange(components.Stencil, 8, false);\n        return components;\n      },\n      decode: components => {\n        assert(components.Stencil !== undefined);\n        assertInIntegerRange(components.Stencil, 8, false);\n        return components;\n      },\n      pack: () => unreachable('depth32float-stencil8 data cannot be packed'),\n    },\n    'depth24plus-stencil8': {\n      componentOrder: [TexelComponent.Depth, TexelComponent.Stencil],\n      componentInfo: {\n        Depth: {\n          dataType: null,\n          bitLength: 24,\n        },\n        Stencil: {\n          dataType: 'uint',\n          bitLength: 8,\n        },\n      },\n      encode: components => {\n        assert(components.Depth === undefined, 'depth24plus cannot be encoded');\n        assert(components.Stencil !== undefined);\n        assertInIntegerRange(components.Stencil, 8, false);\n        return components;\n      },\n      decode: components => {\n        assert(components.Depth === undefined, 'depth24plus cannot be decoded');\n        assert(components.Stencil !== undefined);\n        assertInIntegerRange(components.Stencil, 8, false);\n        return components;\n      },\n      pack: () => unreachable('depth24plus-stencil8 data cannot be packed'),\n    },\n  },\n};\n\n/**\n * Get the `ComponentDataType` for a format. All components must have the same type.\n * @param {UncompressedTextureFormat} format - The input format.\n * @returns {ComponentDataType} The data of the components.\n */\nexport function getSingleDataType(format: UncompressedTextureFormat): ComponentDataType {\n  const infos = Object.values(kTexelRepresentationInfo[format].componentInfo);\n  assert(infos.length > 0);\n  return infos.reduce((acc, cur) => {\n    assert(cur !== undefined);\n    assert(acc === undefined || acc === cur.dataType);\n    return cur.dataType;\n  }, infos[0]!.dataType);\n}\n\n/**\n *  Get traits for generating code to readback data from a component.\n * @param {ComponentDataType} dataType - The input component data type.\n * @returns A dictionary containing the respective `ReadbackTypedArray` and `shaderType`.\n */\nexport function getComponentReadbackTraits(dataType: ComponentDataType) {\n  switch (dataType) {\n    case 'ufloat':\n    case 'float':\n    case 'unorm':\n    case 'snorm':\n      return {\n        ReadbackTypedArray: Float32Array,\n        shaderType: 'f32' as const,\n      };\n    case 'uint':\n      return {\n        ReadbackTypedArray: Uint32Array,\n        shaderType: 'u32' as const,\n      };\n    case 'sint':\n      return {\n        ReadbackTypedArray: Int32Array,\n        shaderType: 'i32' as const,\n      };\n    default:\n      unreachable();\n  }\n}\n"],"file":"texel_data.js"}