{"version":3,"sources":["../../../../src/webgpu/util/texture/texture_ok.ts"],"names":["assert","ErrorWithExtra","unreachable","kTextureFormatInfo","generatePrettyTable","reifyExtent3D","reifyOrigin3D","getTextureSubCopyLayout","kTexelRepresentationInfo","TexelView","makeTexelViewComparer","format","actTexelView","expTexelView","opts","maxIntDiff","maxFractionalDiff","maxDiffULPsForNormFormat","maxDiffULPsForFloatFormat","undefined","fmtIsInt","includes","fmtIsNorm","fmtIsFloat","tvc","predicate","coords","comparePerComponent","color","ulpFromZero","repr","tableRows","failedCoords","act","exp","componentOrder","map","ch","join","toleranceULPs","toPrecision","actual","expected","maxDiff","Object","keys","every","key","k","Math","abs","createTextureCopyForMapRead","t","source","copySize","byteLength","bytesPerRow","rowsPerImage","aspect","buffer","device","createBuffer","usage","GPUBufferUsage","COPY_DST","MAP_READ","size","trackForCleanup","cmd","createCommandEncoder","copyTextureToBuffer","queue","submit","finish","findFailedPixels","subrectOrigin","subrectSize","texelCompareOptions","comparer","lowerCorner","width","height","depthOrArrayLayers","upperCorner","failedPixels","z","y","x","push","min","max","length","info","integerSampleType","sampleType","numberToString","n","toFixed","componentOrderStr","printCoords","printActualBytes","Array","from","bytes","b","toString","padStart","printActualColors","pixel","printExpectedColors","printActualULPs","printExpectedULPs","fillToWidth","textureContentIsOKByT2B","copySize_","origin","mapAsync","GPUMapMode","READ","data","Uint8Array","getMappedRange","texelViewConfig","fromTextureDataByReference","failedPixelsMessage","msg","slice"],"mappings":"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","sourcesContent":["import { assert, ErrorWithExtra, unreachable } from '../../../common/util/util.js';\nimport { EncodableTextureFormat, kTextureFormatInfo } from '../../capability_info.js';\nimport { GPUTest } from '../../gpu_test.js';\nimport { generatePrettyTable } from '../pretty_diff_tables.js';\nimport { reifyExtent3D, reifyOrigin3D } from '../unions.js';\n\nimport { getTextureSubCopyLayout } from './layout.js';\nimport { kTexelRepresentationInfo, PerTexelComponent, TexelComponent } from './texel_data.js';\nimport { TexelView } from './texel_view.js';\n\ntype PerPixelAtLevel<T> = (coords: Required<GPUOrigin3DDict>) => T;\n\n/** Threshold options for comparing texels of different formats (norm/float/int). */\nexport type TexelCompareOptions = {\n  /** Threshold for integer texture formats. Defaults to 0. */\n  maxIntDiff?: number;\n  /** Threshold for non-integer (norm/float) texture formats, if not overridden. */\n  maxFractionalDiff?: number;\n  /** Threshold in ULPs for unorm/snorm texture formats. Overrides `maxFractionalDiff`. */\n  maxDiffULPsForNormFormat?: number;\n  /** Threshold in ULPs for float/ufloat texture formats. Overrides `maxFractionalDiff`. */\n  maxDiffULPsForFloatFormat?: number;\n};\n\ntype TexelViewComparer = {\n  /** Given coords, returns whether the two texel views are considered matching at that point. */\n  predicate: PerPixelAtLevel<boolean>;\n  /**\n   * Given a list of failed coords, returns table rows for `generatePrettyTable` that\n   * display the actual/expected values and diffs for debugging.\n   */\n  tableRows: (failedCoords: readonly Required<GPUOrigin3DDict>[]) => Iterable<string>[];\n};\n\nfunction makeTexelViewComparer(\n  format: EncodableTextureFormat,\n  { actTexelView, expTexelView }: { actTexelView: TexelView; expTexelView: TexelView },\n  opts: TexelCompareOptions\n): TexelViewComparer {\n  const {\n    maxIntDiff = 0,\n    maxFractionalDiff,\n    maxDiffULPsForNormFormat,\n    maxDiffULPsForFloatFormat,\n  } = opts;\n\n  assert(maxIntDiff >= 0, 'threshold must be non-negative');\n  if (maxFractionalDiff !== undefined) {\n    assert(maxFractionalDiff >= 0, 'threshold must be non-negative');\n  }\n  if (maxDiffULPsForFloatFormat !== undefined) {\n    assert(maxDiffULPsForFloatFormat >= 0, 'threshold must be non-negative');\n  }\n  if (maxDiffULPsForNormFormat !== undefined) {\n    assert(maxDiffULPsForNormFormat >= 0, 'threshold must be non-negative');\n  }\n\n  const fmtIsInt = format.includes('int');\n  const fmtIsNorm = format.includes('norm');\n  const fmtIsFloat = format.includes('float');\n\n  const tvc = {} as TexelViewComparer;\n  if (fmtIsInt) {\n    tvc.predicate = coords =>\n      comparePerComponent(actTexelView.color(coords), expTexelView.color(coords), maxIntDiff);\n  } else if (fmtIsNorm && maxDiffULPsForNormFormat !== undefined) {\n    tvc.predicate = coords =>\n      comparePerComponent(\n        actTexelView.ulpFromZero(coords),\n        expTexelView.ulpFromZero(coords),\n        maxDiffULPsForNormFormat\n      );\n  } else if (fmtIsFloat && maxDiffULPsForFloatFormat !== undefined) {\n    tvc.predicate = coords =>\n      comparePerComponent(\n        actTexelView.ulpFromZero(coords),\n        expTexelView.ulpFromZero(coords),\n        maxDiffULPsForFloatFormat\n      );\n  } else if (maxFractionalDiff !== undefined) {\n    tvc.predicate = coords =>\n      comparePerComponent(\n        actTexelView.color(coords),\n        expTexelView.color(coords),\n        maxFractionalDiff\n      );\n  } else {\n    if (fmtIsNorm) {\n      unreachable('need maxFractionalDiff or maxDiffULPsForNormFormat to compare norm textures');\n    } else if (fmtIsFloat) {\n      unreachable('need maxFractionalDiff or maxDiffULPsForFloatFormat to compare float textures');\n    } else {\n      unreachable();\n    }\n  }\n\n  const repr = kTexelRepresentationInfo[format];\n  if (fmtIsInt) {\n    tvc.tableRows = failedCoords => [\n      [`tolerance ± ${maxIntDiff}`],\n      (function* () {\n        yield* [` diff (act - exp)`, '==', ''];\n        for (const coords of failedCoords) {\n          const act = actTexelView.color(coords);\n          const exp = expTexelView.color(coords);\n          yield repr.componentOrder.map(ch => act[ch]! - exp[ch]!).join(',');\n        }\n      })(),\n    ];\n  } else if (\n    (fmtIsNorm && maxDiffULPsForNormFormat !== undefined) ||\n    (fmtIsFloat && maxDiffULPsForFloatFormat !== undefined)\n  ) {\n    const toleranceULPs = fmtIsNorm ? maxDiffULPsForNormFormat! : maxDiffULPsForFloatFormat!;\n    tvc.tableRows = failedCoords => [\n      [`tolerance ± ${toleranceULPs} normal-ULPs`],\n      (function* () {\n        yield* [` diff (act - exp) in normal-ULPs`, '==', ''];\n        for (const coords of failedCoords) {\n          const act = actTexelView.ulpFromZero(coords);\n          const exp = expTexelView.ulpFromZero(coords);\n          yield repr.componentOrder.map(ch => act[ch]! - exp[ch]!).join(',');\n        }\n      })(),\n    ];\n  } else {\n    assert(maxFractionalDiff !== undefined);\n    tvc.tableRows = failedCoords => [\n      [`tolerance ± ${maxFractionalDiff}`],\n      (function* () {\n        yield* [` diff (act - exp)`, '==', ''];\n        for (const coords of failedCoords) {\n          const act = actTexelView.color(coords);\n          const exp = expTexelView.color(coords);\n          yield repr.componentOrder.map(ch => (act[ch]! - exp[ch]!).toPrecision(4)).join(',');\n        }\n      })(),\n    ];\n  }\n\n  return tvc;\n}\n\nfunction comparePerComponent(\n  actual: PerTexelComponent<number>,\n  expected: PerTexelComponent<number>,\n  maxDiff: number\n) {\n  return Object.keys(actual).every(key => {\n    const k = key as TexelComponent;\n    const act = actual[k]!;\n    const exp = expected[k];\n    if (exp === undefined) return false;\n    return Math.abs(act - exp) <= maxDiff;\n  });\n}\n\n/** Create a new mappable GPUBuffer, and copy a subrectangle of GPUTexture data into it. */\nfunction createTextureCopyForMapRead(\n  t: GPUTest,\n  source: GPUImageCopyTexture,\n  copySize: GPUExtent3D,\n  { format }: { format: EncodableTextureFormat }\n): { buffer: GPUBuffer; bytesPerRow: number; rowsPerImage: number } {\n  const { byteLength, bytesPerRow, rowsPerImage } = getTextureSubCopyLayout(format, copySize, {\n    aspect: source.aspect,\n  });\n\n  const buffer = t.device.createBuffer({\n    usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\n    size: byteLength,\n  });\n  t.trackForCleanup(buffer);\n\n  const cmd = t.device.createCommandEncoder();\n  cmd.copyTextureToBuffer(source, { buffer, bytesPerRow, rowsPerImage }, copySize);\n  t.device.queue.submit([cmd.finish()]);\n\n  return { buffer, bytesPerRow, rowsPerImage };\n}\n\nfunction findFailedPixels(\n  format: EncodableTextureFormat,\n  subrectOrigin: Required<GPUOrigin3DDict>,\n  subrectSize: Required<GPUExtent3DDict>,\n  { actTexelView, expTexelView }: { actTexelView: TexelView; expTexelView: TexelView },\n  texelCompareOptions: TexelCompareOptions\n) {\n  const comparer = makeTexelViewComparer(\n    format,\n    { actTexelView, expTexelView },\n    texelCompareOptions\n  );\n\n  const lowerCorner = [subrectSize.width, subrectSize.height, subrectSize.depthOrArrayLayers];\n  const upperCorner = [0, 0, 0];\n  const failedPixels: Required<GPUOrigin3DDict>[] = [];\n  for (let z = subrectOrigin.z; z < subrectOrigin.z + subrectSize.depthOrArrayLayers; ++z) {\n    for (let y = subrectOrigin.y; y < subrectOrigin.y + subrectSize.height; ++y) {\n      for (let x = subrectOrigin.x; x < subrectOrigin.x + subrectSize.width; ++x) {\n        const coords = { x, y, z };\n\n        if (!comparer.predicate(coords)) {\n          failedPixels.push(coords);\n          lowerCorner[0] = Math.min(lowerCorner[0], x);\n          lowerCorner[1] = Math.min(lowerCorner[1], y);\n          lowerCorner[2] = Math.min(lowerCorner[2], z);\n          upperCorner[0] = Math.max(upperCorner[0], x);\n          upperCorner[1] = Math.max(upperCorner[1], y);\n          upperCorner[2] = Math.max(upperCorner[2], z);\n        }\n      }\n    }\n  }\n  if (failedPixels.length === 0) {\n    return undefined;\n  }\n\n  const info = kTextureFormatInfo[format];\n  const repr = kTexelRepresentationInfo[format];\n\n  const integerSampleType = info.sampleType === 'uint' || info.sampleType === 'sint';\n  const numberToString = integerSampleType\n    ? (n: number) => n.toFixed()\n    : (n: number) => n.toPrecision(6);\n\n  const componentOrderStr = repr.componentOrder.join(',') + ':';\n\n  const printCoords = (function* () {\n    yield* [' coords', '==', 'X,Y,Z:'];\n    for (const coords of failedPixels) yield `${coords.x},${coords.y},${coords.z}`;\n  })();\n  const printActualBytes = (function* () {\n    yield* [' act. texel bytes (little-endian)', '==', '0x:'];\n    for (const coords of failedPixels) {\n      yield Array.from(actTexelView.bytes(coords), b => b.toString(16).padStart(2, '0')).join(' ');\n    }\n  })();\n  const printActualColors = (function* () {\n    yield* [' act. colors', '==', componentOrderStr];\n    for (const coords of failedPixels) {\n      const pixel = actTexelView.color(coords);\n      yield `${repr.componentOrder.map(ch => numberToString(pixel[ch]!)).join(',')}`;\n    }\n  })();\n  const printExpectedColors = (function* () {\n    yield* [' exp. colors', '==', componentOrderStr];\n    for (const coords of failedPixels) {\n      const pixel = expTexelView.color(coords);\n      yield `${repr.componentOrder.map(ch => numberToString(pixel[ch]!)).join(',')}`;\n    }\n  })();\n  const printActualULPs = (function* () {\n    yield* [' act. normal-ULPs-from-zero', '==', componentOrderStr];\n    for (const coords of failedPixels) {\n      const pixel = actTexelView.ulpFromZero(coords);\n      yield `${repr.componentOrder.map(ch => pixel[ch]).join(',')}`;\n    }\n  })();\n  const printExpectedULPs = (function* () {\n    yield* [` exp. normal-ULPs-from-zero`, '==', componentOrderStr];\n    for (const coords of failedPixels) {\n      const pixel = expTexelView.ulpFromZero(coords);\n      yield `${repr.componentOrder.map(ch => pixel[ch]).join(',')}`;\n    }\n  })();\n\n  const opts = {\n    fillToWidth: 120,\n    numberToString,\n  };\n  return `\\\n between ${lowerCorner} and ${upperCorner} inclusive:\n${generatePrettyTable(opts, [\n  printCoords,\n  printActualBytes,\n  printActualColors,\n  printExpectedColors,\n  printActualULPs,\n  printExpectedULPs,\n  ...comparer.tableRows(failedPixels),\n])}`;\n}\n\n/**\n * Check the contents of a GPUTexture by reading it back (with copyTextureToBuffer+mapAsync), then\n * comparing the data with the data in `expTexelView`.\n *\n * The actual and expected texture data are both converted to the \"NormalULPFromZero\" format,\n * which is a signed number representing how far the number is from zero, in ULPs, skipping\n * subnormal numbers (where ULP is defined for float, normalized, and integer formats).\n */\nexport async function textureContentIsOKByT2B(\n  t: GPUTest,\n  source: GPUImageCopyTexture,\n  copySize_: GPUExtent3D,\n  { expTexelView }: { expTexelView: TexelView },\n  texelCompareOptions: TexelCompareOptions\n): Promise<ErrorWithExtra | undefined> {\n  const subrectOrigin = reifyOrigin3D(source.origin ?? [0, 0, 0]);\n  const subrectSize = reifyExtent3D(copySize_);\n  const format = expTexelView.format;\n\n  const { buffer, bytesPerRow, rowsPerImage } = createTextureCopyForMapRead(\n    t,\n    source,\n    subrectSize,\n    { format }\n  );\n\n  await buffer.mapAsync(GPUMapMode.READ);\n  const data = new Uint8Array(buffer.getMappedRange());\n\n  const texelViewConfig = {\n    bytesPerRow,\n    rowsPerImage,\n    subrectOrigin,\n    subrectSize,\n  } as const;\n\n  const actTexelView = TexelView.fromTextureDataByReference(format, data, texelViewConfig);\n\n  const failedPixelsMessage = findFailedPixels(\n    format,\n    subrectOrigin,\n    subrectSize,\n    { actTexelView, expTexelView },\n    texelCompareOptions\n  );\n\n  if (failedPixelsMessage === undefined) {\n    return undefined;\n  }\n\n  const msg = 'Texture level had unexpected contents:\\n' + failedPixelsMessage;\n  return new ErrorWithExtra(msg, () => ({\n    expTexelView,\n    // Make a new TexelView with a copy of the data so we can unmap the buffer (debug mode only).\n    actTexelView: TexelView.fromTextureDataByReference(format, data.slice(), texelViewConfig),\n  }));\n}\n"],"file":"texture_ok.js"}