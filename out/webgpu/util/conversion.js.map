{"version":3,"sources":["../../../src/webgpu/util/conversion.ts"],"names":["assert","clamp","floatAsNormalizedInteger","float","bits","signed","max","Math","pow","round","normalizedIntegerAsFloat","integer","Number","isInteger","float32ToFloatBits","n","signBits","exponentBits","mantissaBits","bias","isFinite","buf","DataView","ArrayBuffer","Float32Array","BYTES_PER_ELEMENT","setFloat32","getUint32","mantissaBitsToDiscard","sign","exp","newBiasedExp","newMantissa","float32ToFloat16Bits","float16BitsToFloat32","float16Bits","setUint32","getFloat32","packRGB9E5UFloat","r","g","b","v","extractMantissaAndExponent","biasedExponent","mantissa","rExp","rOrigMantissa","gExp","gOrigMantissa","bExp","bOrigMantissa","rMantissa","gMantissa","bMantissa","biasedExp","assertInIntegerRange","min","gammaCompress","gammaDecompress"],"mappings":"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","sourcesContent":["import { assert } from '../../common/util/util.js';\n\nimport { clamp } from './math.js';\n\n/**\n * Encodes a JS `number` into a \"normalized\" (unorm/snorm) integer representation with `bits` bits.\n * Input must be between -1 and 1 if signed, or 0 and 1 if unsigned.\n */\nexport function floatAsNormalizedInteger(float: number, bits: number, signed: boolean): number {\n  if (signed) {\n    assert(float >= -1 && float <= 1);\n    const max = Math.pow(2, bits - 1) - 1;\n    return Math.round(float * max);\n  } else {\n    assert(float >= 0 && float <= 1);\n    const max = Math.pow(2, bits) - 1;\n    return Math.round(float * max);\n  }\n}\n\n/**\n * Decodes a JS `number` from a \"normalized\" (unorm/snorm) integer representation with `bits` bits.\n * Input must be an integer in the range of the specified unorm/snorm type.\n */\nexport function normalizedIntegerAsFloat(integer: number, bits: number, signed: boolean): number {\n  assert(Number.isInteger(integer));\n  if (signed) {\n    const max = Math.pow(2, bits - 1) - 1;\n    assert(integer >= -max - 1 && integer <= max);\n    if (integer === -max - 1) {\n      integer = -max;\n    }\n    return integer / max;\n  } else {\n    const max = Math.pow(2, bits) - 1;\n    assert(integer >= 0 && integer <= max);\n    return integer / max;\n  }\n}\n\n/**\n * Encodes a JS `number` into an IEEE754 floating point number with the specified number of\n * sign, exponent, mantissa bits, and exponent bias.\n * Returns the result as an integer-valued JS `number`.\n *\n * Does not handle clamping, underflow, overflow, or denormalized numbers.\n */\nexport function float32ToFloatBits(\n  n: number,\n  signBits: 0 | 1,\n  exponentBits: number,\n  mantissaBits: number,\n  bias: number\n): number {\n  assert(exponentBits <= 8);\n  assert(mantissaBits <= 23);\n  assert(Number.isFinite(n));\n\n  if (n === 0) {\n    return 0;\n  }\n\n  if (signBits === 0) {\n    assert(n >= 0);\n  }\n\n  const buf = new DataView(new ArrayBuffer(Float32Array.BYTES_PER_ELEMENT));\n  buf.setFloat32(0, n, true);\n  const bits = buf.getUint32(0, true);\n  // bits (32): seeeeeeeefffffffffffffffffffffff\n\n  const mantissaBitsToDiscard = 23 - mantissaBits;\n\n  // 0 or 1\n  const sign = (bits >> 31) & signBits;\n\n  // >> to remove mantissa, & to remove sign, - 127 to remove bias.\n  const exp = ((bits >> 23) & 0xff) - 127;\n\n  // Convert to the new biased exponent.\n  const newBiasedExp = bias + exp;\n  assert(newBiasedExp >= 0 && newBiasedExp < 1 << exponentBits);\n\n  // Mask only the mantissa, and discard the lower bits.\n  const newMantissa = (bits & 0x7fffff) >> mantissaBitsToDiscard;\n  return (sign << (exponentBits + mantissaBits)) | (newBiasedExp << mantissaBits) | newMantissa;\n}\n\n/**\n * Encodes a JS `number` into an IEEE754 16 bit floating point number.\n * Returns the result as an integer-valued JS `number`.\n *\n * Does not handle clamping, underflow, overflow, or denormalized numbers.\n */\nexport function float32ToFloat16Bits(n: number) {\n  return float32ToFloatBits(n, 1, 5, 10, 15);\n}\n\n/**\n * Decodes an IEEE754 16 bit floating point number into a JS `number` and returns.\n */\nexport function float16BitsToFloat32(float16Bits: number): number {\n  const buf = new DataView(new ArrayBuffer(Float32Array.BYTES_PER_ELEMENT));\n  // shift exponent and mantissa bits and fill with 0 on right, shift sign bit\n  buf.setUint32(0, ((float16Bits & 0x7fff) << 13) | ((float16Bits & 0x8000) << 16), true);\n  // shifting for bias different: f16 uses a bias of 15, f32 uses a bias of 127\n  return buf.getFloat32(0, true) * 2 ** (127 - 15);\n}\n\n/**\n * Encodes three JS `number` values into RGB9E5, returned as an integer-valued JS `number`.\n *\n * RGB9E5 represents three partial-precision floating-point numbers encoded into a single 32-bit\n * value all sharing the same 5-bit exponent.\n * There is no sign bit, and there is a shared 5-bit biased (15) exponent and a 9-bit\n * mantissa for each channel. The mantissa does NOT have an implicit leading \"1.\",\n * and instead has an implicit leading \"0.\".\n */\nexport function packRGB9E5UFloat(r: number, g: number, b: number): number {\n  for (const v of [r, g, b]) {\n    assert(v >= 0 && v < Math.pow(2, 16));\n  }\n\n  const buf = new DataView(new ArrayBuffer(Float32Array.BYTES_PER_ELEMENT));\n  const extractMantissaAndExponent = (n: number) => {\n    const mantissaBits = 9;\n    buf.setFloat32(0, n, true);\n    const bits = buf.getUint32(0, true);\n    // >> to remove mantissa, & to remove sign\n    let biasedExponent = (bits >> 23) & 0xff;\n    const mantissaBitsToDiscard = 23 - mantissaBits;\n    let mantissa = (bits & 0x7fffff) >> mantissaBitsToDiscard;\n\n    // RGB9E5UFloat has an implicit leading 0. instead of a leading 1.,\n    // so we need to move the 1. into the mantissa and bump the exponent.\n    // For float32 encoding, the leading 1 is only present if the biased\n    // exponent is non-zero.\n    if (biasedExponent !== 0) {\n      mantissa = (mantissa >> 1) | 0b100000000;\n      biasedExponent += 1;\n    }\n    return { biasedExponent, mantissa };\n  };\n\n  const { biasedExponent: rExp, mantissa: rOrigMantissa } = extractMantissaAndExponent(r);\n  const { biasedExponent: gExp, mantissa: gOrigMantissa } = extractMantissaAndExponent(g);\n  const { biasedExponent: bExp, mantissa: bOrigMantissa } = extractMantissaAndExponent(b);\n\n  // Use the largest exponent, and shift the mantissa accordingly\n  const exp = Math.max(rExp, gExp, bExp);\n  const rMantissa = rOrigMantissa >> (exp - rExp);\n  const gMantissa = gOrigMantissa >> (exp - gExp);\n  const bMantissa = bOrigMantissa >> (exp - bExp);\n\n  const bias = 15;\n  const biasedExp = exp === 0 ? 0 : exp - 127 + bias;\n  assert(biasedExp >= 0 && biasedExp <= 31);\n  return rMantissa | (gMantissa << 9) | (bMantissa << 18) | (biasedExp << 27);\n}\n\n/**\n * Asserts that a number is within the representable (inclusive) of the integer type with the\n * specified number of bits and signedness.\n *\n * TODO: Assert isInteger? Then this function \"asserts that a number is representable\" by the type\n */\nexport function assertInIntegerRange(n: number, bits: number, signed: boolean): void {\n  if (signed) {\n    const min = -Math.pow(2, bits - 1);\n    const max = Math.pow(2, bits - 1) - 1;\n    assert(n >= min && n <= max);\n  } else {\n    const max = Math.pow(2, bits) - 1;\n    assert(n >= 0 && n <= max);\n  }\n}\n\n/**\n * Converts a linear value into a \"gamma\"-encoded value using the sRGB-clamped transfer function.\n */\nexport function gammaCompress(n: number): number {\n  n = n <= 0.0031308 ? (323 * n) / 25 : (211 * Math.pow(n, 5 / 12) - 11) / 200;\n  return clamp(n, { min: 0, max: 1 });\n}\n\n/**\n * Converts a \"gamma\"-encoded value into a linear value using the sRGB-clamped transfer function.\n */\nexport function gammaDecompress(n: number): number {\n  n = n <= 0.04045 ? (n * 25) / 323 : Math.pow((200 * n + 11) / 211, 12 / 5);\n  return clamp(n, { min: 0, max: 1 });\n}\n"],"file":"conversion.js"}