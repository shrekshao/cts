{"version":3,"sources":["../../../src/webgpu/util/conversion.ts"],"names":["Colors","assert","clamp","floatAsNormalizedInteger","float","bits","signed","max","Math","pow","round","normalizedIntegerAsFloat","integer","Number","isInteger","float32ToFloatBits","n","signBits","exponentBits","mantissaBits","bias","isFinite","buf","DataView","ArrayBuffer","Float32Array","BYTES_PER_ELEMENT","setFloat32","getUint32","mantissaBitsToDiscard","sign","exp","newBiasedExp","newMantissa","float32ToFloat16Bits","float16BitsToFloat32","float16Bits","setUint32","getFloat32","packRGB9E5UFloat","r","g","b","v","extractMantissaAndExponent","biasedExponent","mantissa","rExp","rOrigMantissa","gExp","gOrigMantissa","bExp","bOrigMantissa","rMantissa","gMantissa","bMantissa","biasedExp","assertInIntegerRange","min","gammaCompress","gammaDecompress","float32ToUint32","f32","f32Arr","u32Arr","Uint32Array","buffer","uint32ToFloat32","u32","float32ToInt32","i32Arr","Int32Array","uint32ToInt32","ScalarType","constructor","kind","size","read","toString","VectorType","width","elementType","offset","elements","i","Vector","vectorTypes","Map","TypeVec","key","ty","get","undefined","set","TypeI32","i32","TypeU32","TypeF32","TypeI16","i16","Int16Array","TypeU16","u16","Uint16Array","TypeF16","f16Bits","TypeI8","i8","Int8Array","TypeU8","u8","Uint8Array","TypeBool","bool","numElementsOf","Error","scalarTypeOf","Scalar","type","value","copyTo","length","bold","Infinity","arr","f32Bits","i32Bits","i16Bits","i8Bits","u32Bits","u16Bits","u8Bits","True","False","a","element","map","e","join","x","y","z","w","vec2","vec3","vec4"],"mappings":"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","sourcesContent":["import { Colors } from '../../common/util/colors.js';\nimport { assert, TypedArrayBufferView } from '../../common/util/util.js';\n\nimport { clamp } from './math.js';\n\n/**\n * Encodes a JS `number` into a \"normalized\" (unorm/snorm) integer representation with `bits` bits.\n * Input must be between -1 and 1 if signed, or 0 and 1 if unsigned.\n */\nexport function floatAsNormalizedInteger(float: number, bits: number, signed: boolean): number {\n  if (signed) {\n    assert(float >= -1 && float <= 1);\n    const max = Math.pow(2, bits - 1) - 1;\n    return Math.round(float * max);\n  } else {\n    assert(float >= 0 && float <= 1);\n    const max = Math.pow(2, bits) - 1;\n    return Math.round(float * max);\n  }\n}\n\n/**\n * Decodes a JS `number` from a \"normalized\" (unorm/snorm) integer representation with `bits` bits.\n * Input must be an integer in the range of the specified unorm/snorm type.\n */\nexport function normalizedIntegerAsFloat(integer: number, bits: number, signed: boolean): number {\n  assert(Number.isInteger(integer));\n  if (signed) {\n    const max = Math.pow(2, bits - 1) - 1;\n    assert(integer >= -max - 1 && integer <= max);\n    if (integer === -max - 1) {\n      integer = -max;\n    }\n    return integer / max;\n  } else {\n    const max = Math.pow(2, bits) - 1;\n    assert(integer >= 0 && integer <= max);\n    return integer / max;\n  }\n}\n\n/**\n * Encodes a JS `number` into an IEEE754 floating point number with the specified number of\n * sign, exponent, mantissa bits, and exponent bias.\n * Returns the result as an integer-valued JS `number`.\n *\n * Does not handle clamping, underflow, overflow, or denormalized numbers.\n */\nexport function float32ToFloatBits(\n  n: number,\n  signBits: 0 | 1,\n  exponentBits: number,\n  mantissaBits: number,\n  bias: number\n): number {\n  assert(exponentBits <= 8);\n  assert(mantissaBits <= 23);\n  assert(Number.isFinite(n));\n\n  if (n === 0) {\n    return 0;\n  }\n\n  if (signBits === 0) {\n    assert(n >= 0);\n  }\n\n  const buf = new DataView(new ArrayBuffer(Float32Array.BYTES_PER_ELEMENT));\n  buf.setFloat32(0, n, true);\n  const bits = buf.getUint32(0, true);\n  // bits (32): seeeeeeeefffffffffffffffffffffff\n\n  const mantissaBitsToDiscard = 23 - mantissaBits;\n\n  // 0 or 1\n  const sign = (bits >> 31) & signBits;\n\n  // >> to remove mantissa, & to remove sign, - 127 to remove bias.\n  const exp = ((bits >> 23) & 0xff) - 127;\n\n  // Convert to the new biased exponent.\n  const newBiasedExp = bias + exp;\n  assert(newBiasedExp >= 0 && newBiasedExp < 1 << exponentBits);\n\n  // Mask only the mantissa, and discard the lower bits.\n  const newMantissa = (bits & 0x7fffff) >> mantissaBitsToDiscard;\n  return (sign << (exponentBits + mantissaBits)) | (newBiasedExp << mantissaBits) | newMantissa;\n}\n\n/**\n * Encodes a JS `number` into an IEEE754 16 bit floating point number.\n * Returns the result as an integer-valued JS `number`.\n *\n * Does not handle clamping, underflow, overflow, or denormalized numbers.\n */\nexport function float32ToFloat16Bits(n: number) {\n  return float32ToFloatBits(n, 1, 5, 10, 15);\n}\n\n/**\n * Decodes an IEEE754 16 bit floating point number into a JS `number` and returns.\n */\nexport function float16BitsToFloat32(float16Bits: number): number {\n  const buf = new DataView(new ArrayBuffer(Float32Array.BYTES_PER_ELEMENT));\n  // shift exponent and mantissa bits and fill with 0 on right, shift sign bit\n  buf.setUint32(0, ((float16Bits & 0x7fff) << 13) | ((float16Bits & 0x8000) << 16), true);\n  // shifting for bias different: f16 uses a bias of 15, f32 uses a bias of 127\n  return buf.getFloat32(0, true) * 2 ** (127 - 15);\n}\n\n/**\n * Encodes three JS `number` values into RGB9E5, returned as an integer-valued JS `number`.\n *\n * RGB9E5 represents three partial-precision floating-point numbers encoded into a single 32-bit\n * value all sharing the same 5-bit exponent.\n * There is no sign bit, and there is a shared 5-bit biased (15) exponent and a 9-bit\n * mantissa for each channel. The mantissa does NOT have an implicit leading \"1.\",\n * and instead has an implicit leading \"0.\".\n */\nexport function packRGB9E5UFloat(r: number, g: number, b: number): number {\n  for (const v of [r, g, b]) {\n    assert(v >= 0 && v < Math.pow(2, 16));\n  }\n\n  const buf = new DataView(new ArrayBuffer(Float32Array.BYTES_PER_ELEMENT));\n  const extractMantissaAndExponent = (n: number) => {\n    const mantissaBits = 9;\n    buf.setFloat32(0, n, true);\n    const bits = buf.getUint32(0, true);\n    // >> to remove mantissa, & to remove sign\n    let biasedExponent = (bits >> 23) & 0xff;\n    const mantissaBitsToDiscard = 23 - mantissaBits;\n    let mantissa = (bits & 0x7fffff) >> mantissaBitsToDiscard;\n\n    // RGB9E5UFloat has an implicit leading 0. instead of a leading 1.,\n    // so we need to move the 1. into the mantissa and bump the exponent.\n    // For float32 encoding, the leading 1 is only present if the biased\n    // exponent is non-zero.\n    if (biasedExponent !== 0) {\n      mantissa = (mantissa >> 1) | 0b100000000;\n      biasedExponent += 1;\n    }\n    return { biasedExponent, mantissa };\n  };\n\n  const { biasedExponent: rExp, mantissa: rOrigMantissa } = extractMantissaAndExponent(r);\n  const { biasedExponent: gExp, mantissa: gOrigMantissa } = extractMantissaAndExponent(g);\n  const { biasedExponent: bExp, mantissa: bOrigMantissa } = extractMantissaAndExponent(b);\n\n  // Use the largest exponent, and shift the mantissa accordingly\n  const exp = Math.max(rExp, gExp, bExp);\n  const rMantissa = rOrigMantissa >> (exp - rExp);\n  const gMantissa = gOrigMantissa >> (exp - gExp);\n  const bMantissa = bOrigMantissa >> (exp - bExp);\n\n  const bias = 15;\n  const biasedExp = exp === 0 ? 0 : exp - 127 + bias;\n  assert(biasedExp >= 0 && biasedExp <= 31);\n  return rMantissa | (gMantissa << 9) | (bMantissa << 18) | (biasedExp << 27);\n}\n\n/**\n * Asserts that a number is within the representable (inclusive) of the integer type with the\n * specified number of bits and signedness.\n *\n * MAINTENANCE_TODO: Assert isInteger? Then this function \"asserts that a number is representable\"\n * by the type.\n */\nexport function assertInIntegerRange(n: number, bits: number, signed: boolean): void {\n  if (signed) {\n    const min = -Math.pow(2, bits - 1);\n    const max = Math.pow(2, bits - 1) - 1;\n    assert(n >= min && n <= max);\n  } else {\n    const max = Math.pow(2, bits) - 1;\n    assert(n >= 0 && n <= max);\n  }\n}\n\n/**\n * Converts a linear value into a \"gamma\"-encoded value using the sRGB-clamped transfer function.\n */\nexport function gammaCompress(n: number): number {\n  n = n <= 0.0031308 ? (323 * n) / 25 : (211 * Math.pow(n, 5 / 12) - 11) / 200;\n  return clamp(n, { min: 0, max: 1 });\n}\n\n/**\n * Converts a \"gamma\"-encoded value into a linear value using the sRGB-clamped transfer function.\n */\nexport function gammaDecompress(n: number): number {\n  n = n <= 0.04045 ? (n * 25) / 323 : Math.pow((200 * n + 11) / 211, 12 / 5);\n  return clamp(n, { min: 0, max: 1 });\n}\n\n/** Converts a 32-bit float value to a 32-bit unsigned integer value */\nexport function float32ToUint32(f32: number): number {\n  const f32Arr = new Float32Array(1);\n  f32Arr[0] = f32;\n  const u32Arr = new Uint32Array(f32Arr.buffer);\n  return u32Arr[0];\n}\n\n/** Converts a 32-bit unsigned integer value to a 32-bit float value */\nexport function uint32ToFloat32(u32: number): number {\n  const u32Arr = new Uint32Array(1);\n  u32Arr[0] = u32;\n  const f32Arr = new Float32Array(u32Arr.buffer);\n  return f32Arr[0];\n}\n\n/** Converts a 32-bit float value to a 32-bit signed integer value */\nexport function float32ToInt32(f32: number): number {\n  const f32Arr = new Float32Array(1);\n  f32Arr[0] = f32;\n  const i32Arr = new Int32Array(f32Arr.buffer);\n  return i32Arr[0];\n}\n\n/** Converts a 32-bit unsigned integer value to a 32-bit signed integer value */\nexport function uint32ToInt32(u32: number): number {\n  const u32Arr = new Uint32Array(1);\n  u32Arr[0] = u32;\n  const i32Arr = new Int32Array(u32Arr.buffer);\n  return i32Arr[0];\n}\n\n/** A type of number representable by Scalar. */\nexport type ScalarKind = 'f32' | 'f16' | 'u32' | 'u16' | 'u8' | 'i32' | 'i16' | 'i8' | 'bool';\n\n/** ScalarType describes the type of WGSL Scalar. */\nexport class ScalarType {\n  readonly kind: ScalarKind; // The named type\n  readonly size: number; // In bytes\n  readonly read: (buf: Uint8Array, offset: number) => Scalar; // reads a scalar from a buffer\n\n  constructor(kind: ScalarKind, size: number, read: (buf: Uint8Array, offset: number) => Scalar) {\n    this.kind = kind;\n    this.size = size;\n    this.read = read;\n  }\n\n  public toString(): string {\n    return this.kind;\n  }\n}\n\n/** ScalarType describes the type of WGSL Vector. */\nexport class VectorType {\n  readonly width: number; // Number of elements in the vector\n  readonly elementType: ScalarType; // Element type\n\n  constructor(width: number, elementType: ScalarType) {\n    this.width = width;\n    this.elementType = elementType;\n  }\n\n  /**\n   * @returns a vector constructed from the values read from the buffer at the\n   * given byte offset\n   */\n  public read(buf: Uint8Array, offset: number): Vector {\n    const elements: Array<Scalar> = [];\n    for (let i = 0; i < this.width; i++) {\n      elements[i] = this.elementType.read(buf, offset);\n      offset += this.elementType.size;\n    }\n    return new Vector(elements);\n  }\n\n  public toString(): string {\n    return `vec${this.width}<${this.elementType}>`;\n  }\n}\n\n// Maps a string representation of a vector type to vector type.\nconst vectorTypes = new Map<string, VectorType>();\n\nexport function TypeVec(width: number, elementType: ScalarType): VectorType {\n  const key = `${elementType.toString()} ${width}}`;\n  let ty = vectorTypes.get(key);\n  if (ty !== undefined) {\n    return ty;\n  }\n  ty = new VectorType(width, elementType);\n  vectorTypes.set(key, ty);\n  return ty;\n}\n\n/** Type is a ScalarType or VectorType. */\nexport type Type = ScalarType | VectorType;\n\nexport const TypeI32 = new ScalarType('i32', 4, (buf: Uint8Array, offset: number) =>\n  i32(new Int32Array(buf.buffer, offset)[0])\n);\nexport const TypeU32 = new ScalarType('u32', 4, (buf: Uint8Array, offset: number) =>\n  u32(new Uint32Array(buf.buffer, offset)[0])\n);\nexport const TypeF32 = new ScalarType('f32', 4, (buf: Uint8Array, offset: number) =>\n  f32(new Float32Array(buf.buffer, offset)[0])\n);\nexport const TypeI16 = new ScalarType('i16', 2, (buf: Uint8Array, offset: number) =>\n  i16(new Int16Array(buf.buffer, offset)[0])\n);\nexport const TypeU16 = new ScalarType('u16', 2, (buf: Uint8Array, offset: number) =>\n  u16(new Uint16Array(buf.buffer, offset)[0])\n);\nexport const TypeF16 = new ScalarType('f16', 2, (buf: Uint8Array, offset: number) =>\n  f16Bits(new Uint16Array(buf.buffer, offset)[0])\n);\nexport const TypeI8 = new ScalarType('i8', 1, (buf: Uint8Array, offset: number) =>\n  i8(new Int8Array(buf.buffer, offset)[0])\n);\nexport const TypeU8 = new ScalarType('u8', 1, (buf: Uint8Array, offset: number) =>\n  u8(new Uint8Array(buf.buffer, offset)[0])\n);\nexport const TypeBool = new ScalarType('bool', 4, (buf: Uint8Array, offset: number) =>\n  bool(new Uint32Array(buf.buffer, offset)[0] !== 0)\n);\n\n/** @returns the number of scalar (element) types of the given Type */\nexport function numElementsOf(ty: Type): number {\n  if (ty instanceof ScalarType) {\n    return 1;\n  }\n  if (ty instanceof VectorType) {\n    return ty.width;\n  }\n  throw new Error(`unhandled type ${ty}`);\n}\n\n/** @returns the scalar (element) type of the given Type */\nexport function scalarTypeOf(ty: Type): ScalarType {\n  if (ty instanceof ScalarType) {\n    return ty;\n  }\n  if (ty instanceof VectorType) {\n    return ty.elementType;\n  }\n  throw new Error(`unhandled type ${ty}`);\n}\n\n/** ScalarValue is the JS type that can be held by a Scalar */\ntype ScalarValue = Boolean | Number;\n\n/** Class that encapsulates a single scalar value of various types. */\nexport class Scalar {\n  readonly value: ScalarValue; // The scalar value\n  readonly type: ScalarType; // The type of the scalar\n  readonly bits: Uint8Array; // The scalar value packed in a Uint8Array\n\n  public constructor(type: ScalarType, value: ScalarValue, bits: TypedArrayBufferView) {\n    this.value = value;\n    this.type = type;\n    this.bits = new Uint8Array(bits.buffer);\n  }\n\n  /**\n   * Copies the scalar value to the Uint8Array buffer at the provided byte offset.\n   * @param buffer the destination buffer\n   * @param offset the byte offset within buffer\n   */\n  public copyTo(buffer: Uint8Array, offset: number) {\n    for (let i = 0; i < this.bits.length; i++) {\n      buffer[offset + i] = this.bits[i];\n    }\n  }\n\n  public toString(): string {\n    if (this.type.kind === 'bool') {\n      return Colors.bold(this.value.toString());\n    }\n    switch (this.value) {\n      case 0:\n      case Infinity:\n      case -Infinity:\n        return Colors.bold(this.value.toString());\n      default:\n        return Colors.bold(this.value.toString()) + ' (0x' + this.value.toString(16) + ')';\n    }\n  }\n}\n\n/** Create an f32 from a numeric value, a JS `number`. */\nexport function f32(value: number): Scalar {\n  const arr = new Float32Array([value]);\n  return new Scalar(TypeF32, arr[0], arr);\n}\n/** Create an f32 from a bit representation, a uint32 represented as a JS `number`. */\nexport function f32Bits(bits: number): Scalar {\n  const arr = new Uint32Array([bits]);\n  return new Scalar(TypeF32, new Float32Array(arr.buffer)[0], arr);\n}\n/** Create an f16 from a bit representation, a uint16 represented as a JS `number`. */\nexport function f16Bits(bits: number): Scalar {\n  const arr = new Uint16Array([bits]);\n  return new Scalar(TypeF16, float16BitsToFloat32(bits), arr);\n}\n\n/** Create an i32 from a numeric value, a JS `number`. */\nexport function i32(value: number): Scalar {\n  const arr = new Int32Array([value]);\n  return new Scalar(TypeI32, arr[0], arr);\n}\n/** Create an i16 from a numeric value, a JS `number`. */\nexport function i16(value: number): Scalar {\n  const arr = new Int16Array([value]);\n  return new Scalar(TypeI16, arr[0], arr);\n}\n/** Create an i8 from a numeric value, a JS `number`. */\nexport function i8(value: number): Scalar {\n  const arr = new Int8Array([value]);\n  return new Scalar(TypeI8, arr[0], arr);\n}\n\n/** Create an i32 from a bit representation, a uint32 represented as a JS `number`. */\nexport function i32Bits(bits: number): Scalar {\n  const arr = new Uint32Array([bits]);\n  return new Scalar(TypeI32, new Int32Array(arr.buffer)[0], arr);\n}\n/** Create an i16 from a bit representation, a uint16 represented as a JS `number`. */\nexport function i16Bits(bits: number): Scalar {\n  const arr = new Uint16Array([bits]);\n  return new Scalar(TypeI16, new Int16Array(arr.buffer)[0], arr);\n}\n/** Create an i8 from a bit representation, a uint8 represented as a JS `number`. */\nexport function i8Bits(bits: number): Scalar {\n  const arr = new Uint8Array([bits]);\n  return new Scalar(TypeI8, new Int8Array(arr.buffer)[0], arr);\n}\n\n/** Create a u32 from a numeric value, a JS `number`. */\nexport function u32(value: number): Scalar {\n  const arr = new Uint32Array([value]);\n  return new Scalar(TypeU32, arr[0], arr);\n}\n/** Create a u16 from a numeric value, a JS `number`. */\nexport function u16(value: number): Scalar {\n  const arr = new Uint16Array([value]);\n  return new Scalar(TypeU16, arr[0], arr);\n}\n/** Create a u8 from a numeric value, a JS `number`. */\nexport function u8(value: number): Scalar {\n  const arr = new Uint8Array([value]);\n  return new Scalar(TypeU8, arr[0], arr);\n}\n\n/** Create an u32 from a bit representation, a uint32 represented as a JS `number`. */\nexport function u32Bits(bits: number): Scalar {\n  const arr = new Uint32Array([bits]);\n  return new Scalar(TypeU32, bits, arr);\n}\n/** Create an u16 from a bit representation, a uint16 represented as a JS `number`. */\nexport function u16Bits(bits: number): Scalar {\n  const arr = new Uint16Array([bits]);\n  return new Scalar(TypeU16, bits, arr);\n}\n/** Create an u8 from a bit representation, a uint8 represented as a JS `number`. */\nexport function u8Bits(bits: number): Scalar {\n  const arr = new Uint8Array([bits]);\n  return new Scalar(TypeU8, bits, arr);\n}\n\n/** Create a boolean value. */\nexport function bool(value: boolean): Scalar {\n  // WGSL does not support using 'bool' types directly in storage / uniform\n  // buffers, so instead we pack booleans in a u32, where 'false' is zero and\n  // 'true' is any non-zero value.\n  const arr = new Uint32Array([value ? 1 : 0]);\n  return new Scalar(TypeBool, value, arr);\n}\n\n/** A 'true' literal value */\nexport const True = bool(true);\n\n/** A 'false' literal value */\nexport const False = bool(false);\n\n/**\n * Class that encapsulates a vector value.\n */\nexport class Vector {\n  readonly elements: Array<Scalar>;\n  readonly type: VectorType;\n\n  public constructor(elements: Array<Scalar>) {\n    if (elements.length < 2 || elements.length > 4) {\n      throw new Error(`vector element count must be between 2 and 4, got ${elements.length}`);\n    }\n    for (let i = 1; i < elements.length; i++) {\n      const a = elements[0].type;\n      const b = elements[i].type;\n      if (a !== b) {\n        throw new Error(\n          `cannot mix vector element types. Found elements with types '${a}' and '${b}'`\n        );\n      }\n    }\n    this.elements = elements;\n    this.type = TypeVec(elements.length, elements[0].type);\n  }\n\n  /**\n   * Copies the vector value to the Uint8Array buffer at the provided byte offset.\n   * @param buffer the destination buffer\n   * @param offset the byte offset within buffer\n   */\n  public copyTo(buffer: Uint8Array, offset: number) {\n    for (const element of this.elements) {\n      element.copyTo(buffer, offset);\n      offset += this.type.elementType.size;\n    }\n  }\n\n  public toString(): string {\n    return `${this.type}(${this.elements.map(e => e.toString()).join(', ')})`;\n  }\n\n  public get x() {\n    assert(0 < this.elements.length);\n    return this.elements[0];\n  }\n\n  public get y() {\n    assert(1 < this.elements.length);\n    return this.elements[1];\n  }\n\n  public get z() {\n    assert(2 < this.elements.length);\n    return this.elements[2];\n  }\n\n  public get w() {\n    assert(3 < this.elements.length);\n    return this.elements[3];\n  }\n}\n\n/** Helper for constructing a new two-element vector with the provided values */\nexport function vec2(x: Scalar, y: Scalar) {\n  return new Vector([x, y]);\n}\n\n/** Helper for constructing a new three-element vector with the provided values */\nexport function vec3(x: Scalar, y: Scalar, z: Scalar) {\n  return new Vector([x, y, z]);\n}\n\n/** Helper for constructing a new four-element vector with the provided values */\nexport function vec4(x: Scalar, y: Scalar, z: Scalar, w: Scalar) {\n  return new Vector([x, y, z, w]);\n}\n\n/** Value is a Scalar or Vector value. */\nexport type Value = Scalar | Vector;\n"],"file":"conversion.js"}