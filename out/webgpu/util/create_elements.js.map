{"version":3,"sources":["../../../src/webgpu/util/create_elements.ts"],"names":["unreachable","allCanvasTypes","createCanvas","test","canvasType","width","height","canvas","document","createOnscreenCanvas","skip","createOffscreenCanvas","createElement","OffscreenCanvas"],"mappings":";AAAA;AACA,YAASA,WAAT,QAA4B,2BAA5B;AAEA,OAAO,MAAMC,cAAc,GAAG,CAAC,UAAD,EAAa,WAAb,CAAvB;;;AAGP;AACA,OAAO,SAASC,YAAT;AACLC,IADK;AAELC,UAFK;AAGLC,KAHK;AAILC,MAJK;AAKgC;AACrC,MAAIC,MAAJ;AACA,MAAIH,UAAU,KAAK,UAAnB,EAA+B;AAC7B,QAAI,OAAOI,QAAP,KAAoB,WAAxB,EAAqC;AACnCD,MAAAA,MAAM,GAAGE,oBAAoB,CAACN,IAAD,EAAOE,KAAP,EAAcC,MAAd,CAA7B;AACD,KAFD,MAEO;AACLH,MAAAA,IAAI,CAACO,IAAL,CAAU,iCAAV;AACD;AACF,GAND,MAMO,IAAIN,UAAU,KAAK,WAAnB,EAAgC;AACrCG,IAAAA,MAAM,GAAGI,qBAAqB,CAACR,IAAD,EAAOE,KAAP,EAAcC,MAAd,CAA9B;AACD,GAFM,MAEA;AACLN,IAAAA,WAAW;AACZ;;AAED,SAAOO,MAAP;AACD;;AAED;AACA,OAAO,SAASE,oBAAT;AACLN,IADK;AAELE,KAFK;AAGLC,MAHK;AAIc;AACnB,MAAIC,MAAJ;AACA,MAAI,OAAOC,QAAP,KAAoB,WAAxB,EAAqC;AACnCD,IAAAA,MAAM,GAAGC,QAAQ,CAACI,aAAT,CAAuB,QAAvB,CAAT;AACAL,IAAAA,MAAM,CAACF,KAAP,GAAeA,KAAf;AACAE,IAAAA,MAAM,CAACD,MAAP,GAAgBA,MAAhB;AACD,GAJD,MAIO;AACLH,IAAAA,IAAI,CAACO,IAAL,CAAU,iCAAV;AACD;AACD,SAAOH,MAAP;AACD;;AAED;AACA,OAAO,SAASI,qBAAT;AACLR,IADK;AAELE,KAFK;AAGLC,MAHK;AAIY;AACjB,MAAI,OAAOO,eAAP,KAA2B,WAA/B,EAA4C;AAC1CV,IAAAA,IAAI,CAACO,IAAL,CAAU,kCAAV;AACD;;AAED,SAAO,IAAIG,eAAJ,CAAoBR,KAApB,EAA2BC,MAA3B,CAAP;AACD","sourcesContent":["import { Fixture } from '../../common/framework/fixture.js';\nimport { unreachable } from '../../common/util/util.js';\n\nexport const allCanvasTypes = ['onscreen', 'offscreen'] as const;\nexport type canvasTypes = 'onscreen' | 'offscreen';\n\n/** Create HTMLCanvas/OffscreenCanvas. */\nexport function createCanvas(\n  test: Fixture,\n  canvasType: 'onscreen' | 'offscreen',\n  width: number,\n  height: number\n): HTMLCanvasElement | OffscreenCanvas {\n  let canvas: HTMLCanvasElement | OffscreenCanvas;\n  if (canvasType === 'onscreen') {\n    if (typeof document !== 'undefined') {\n      canvas = createOnscreenCanvas(test, width, height);\n    } else {\n      test.skip('Cannot create HTMLCanvasElement');\n    }\n  } else if (canvasType === 'offscreen') {\n    canvas = createOffscreenCanvas(test, width, height);\n  } else {\n    unreachable();\n  }\n\n  return canvas;\n}\n\n/** Create HTMLCanvasElement. */\nexport function createOnscreenCanvas(\n  test: Fixture,\n  width: number,\n  height: number\n): HTMLCanvasElement {\n  let canvas: HTMLCanvasElement;\n  if (typeof document !== 'undefined') {\n    canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n  } else {\n    test.skip('Cannot create HTMLCanvasElement');\n  }\n  return canvas;\n}\n\n/** Create OffscreenCanvas. */\nexport function createOffscreenCanvas(\n  test: Fixture,\n  width: number,\n  height: number\n): OffscreenCanvas {\n  if (typeof OffscreenCanvas === 'undefined') {\n    test.skip('OffscreenCanvas is not supported');\n  }\n\n  return new OffscreenCanvas(width, height);\n}\n"],"file":"create_elements.js"}