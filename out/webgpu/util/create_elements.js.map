{"version":3,"sources":["../../../src/webgpu/util/create_elements.ts"],"names":["unreachable","kAllCanvasTypes","kValidCanvasContextIds","canCopyFromCanvasContext","contextName","createCanvas","test","canvasType","width","height","document","createOnscreenCanvas","skip","OffscreenCanvas","createOffscreenCanvas","canvas","createElement"],"mappings":";AAAA;AACA,YAASA,WAAT,QAA4B,2BAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAG,CAAC,UAAD,EAAa,WAAb,CAAxB;;;;;;;;AAQP;AACA;AACA;AACA,OAAO,MAAMC,sBAAsB,GAAG;AACpC,IADoC;AAEpC,gBAFoC;AAGpC,OAHoC;AAIpC,QAJoC;AAKpC,QALoC,CAA/B;;;;AASP;AACA,OAAO,SAASC,wBAAT,CAAkCC,WAAlC,EAA8D;AACnE,UAAQA,WAAR;AACE,SAAK,IAAL;AACA,SAAK,OAAL;AACA,SAAK,QAAL;AACA,SAAK,QAAL;AACE,aAAO,IAAP;AACF;AACE,aAAO,KAAP,CAPJ;;AASD;;AAED;AACA,OAAO,SAASC,YAAT;AACLC,IADK;AAELC,UAFK;AAGLC,KAHK;AAILC,MAJK;AAKmB;AACxB,MAAIF,UAAU,KAAK,UAAnB,EAA+B;AAC7B,QAAI,OAAOG,QAAP,KAAoB,WAAxB,EAAqC;AACnC,aAAOC,oBAAoB,CAACL,IAAD,EAAOE,KAAP,EAAcC,MAAd,CAA3B;AACD,KAFD,MAEO;AACLH,MAAAA,IAAI,CAACM,IAAL,CAAU,iCAAV;AACD;AACF,GAND,MAMO,IAAIL,UAAU,KAAK,WAAnB,EAAgC;AACrC,QAAI,OAAOM,eAAP,KAA2B,WAA/B,EAA4C;AAC1C,aAAOC,qBAAqB,CAACR,IAAD,EAAOE,KAAP,EAAcC,MAAd,CAA5B;AACD,KAFD,MAEO;AACLH,MAAAA,IAAI,CAACM,IAAL,CAAU,kCAAV;AACD;AACF,GANM,MAMA;AACLZ,IAAAA,WAAW;AACZ;AACF;;AAED;AACA,OAAO,SAASW,oBAAT;AACLL,IADK;AAELE,KAFK;AAGLC,MAHK;AAIc;AACnB,MAAIM,MAAJ;AACA,MAAI,OAAOL,QAAP,KAAoB,WAAxB,EAAqC;AACnCK,IAAAA,MAAM,GAAGL,QAAQ,CAACM,aAAT,CAAuB,QAAvB,CAAT;AACAD,IAAAA,MAAM,CAACP,KAAP,GAAeA,KAAf;AACAO,IAAAA,MAAM,CAACN,MAAP,GAAgBA,MAAhB;AACD,GAJD,MAIO;AACLH,IAAAA,IAAI,CAACM,IAAL,CAAU,iCAAV;AACD;AACD,SAAOG,MAAP;AACD;;AAED;AACA,OAAO,SAASD,qBAAT;AACLR,IADK;AAELE,KAFK;AAGLC,MAHK;AAIY;AACjB,MAAI,OAAOI,eAAP,KAA2B,WAA/B,EAA4C;AAC1CP,IAAAA,IAAI,CAACM,IAAL,CAAU,kCAAV;AACD;;AAED,SAAO,IAAIC,eAAJ,CAAoBL,KAApB,EAA2BC,MAA3B,CAAP;AACD","sourcesContent":["import { Fixture } from '../../common/framework/fixture.js';\nimport { unreachable } from '../../common/util/util.js';\n\n// TESTING_TODO: This should expand to more canvas types (which will enhance a bunch of tests):\n// - canvas element not in dom\n// - canvas element in dom\n// - offscreen canvas from transferControlToOffscreen from canvas not in dom\n// - offscreen canvas from transferControlToOffscreen from canvas in dom\n// - offscreen canvas from new OffscreenCanvas\nexport const kAllCanvasTypes = ['onscreen', 'offscreen'] as const;\nexport type CanvasType = typeof kAllCanvasTypes[number];\n\ntype CanvasForCanvasType<T extends CanvasType> = {\n  onscreen: HTMLCanvasElement;\n  offscreen: OffscreenCanvas;\n}[T];\n\n/** Valid contextId for HTMLCanvasElement/OffscreenCanvas,\n *  spec: https://html.spec.whatwg.org/multipage/canvas.html#dom-canvas-getcontext\n */\nexport const kValidCanvasContextIds = [\n  '2d',\n  'bitmaprenderer',\n  'webgl',\n  'webgl2',\n  'webgpu',\n] as const;\nexport type CanvasContext = typeof kValidCanvasContextIds[number];\n\n/** Helper(s) to determine if context is copyable. */\nexport function canCopyFromCanvasContext(contextName: CanvasContext) {\n  switch (contextName) {\n    case '2d':\n    case 'webgl':\n    case 'webgl2':\n    case 'webgpu':\n      return true;\n    default:\n      return false;\n  }\n}\n\n/** Create HTMLCanvas/OffscreenCanvas. */\nexport function createCanvas<T extends CanvasType>(\n  test: Fixture,\n  canvasType: T,\n  width: number,\n  height: number\n): CanvasForCanvasType<T> {\n  if (canvasType === 'onscreen') {\n    if (typeof document !== 'undefined') {\n      return createOnscreenCanvas(test, width, height) as CanvasForCanvasType<T>;\n    } else {\n      test.skip('Cannot create HTMLCanvasElement');\n    }\n  } else if (canvasType === 'offscreen') {\n    if (typeof OffscreenCanvas !== 'undefined') {\n      return createOffscreenCanvas(test, width, height) as CanvasForCanvasType<T>;\n    } else {\n      test.skip('Cannot create an OffscreenCanvas');\n    }\n  } else {\n    unreachable();\n  }\n}\n\n/** Create HTMLCanvasElement. */\nexport function createOnscreenCanvas(\n  test: Fixture,\n  width: number,\n  height: number\n): HTMLCanvasElement {\n  let canvas: HTMLCanvasElement;\n  if (typeof document !== 'undefined') {\n    canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n  } else {\n    test.skip('Cannot create HTMLCanvasElement');\n  }\n  return canvas;\n}\n\n/** Create OffscreenCanvas. */\nexport function createOffscreenCanvas(\n  test: Fixture,\n  width: number,\n  height: number\n): OffscreenCanvas {\n  if (typeof OffscreenCanvas === 'undefined') {\n    test.skip('OffscreenCanvas is not supported');\n  }\n\n  return new OffscreenCanvas(width, height);\n}\n"],"file":"create_elements.js"}