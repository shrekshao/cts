{"version":3,"sources":["../../../src/webgpu/util/memory.ts"],"names":["exhaustVramUntilUnder64MB","device","allocateUntilOom","size","buffers","pushErrorScope","buffer","createBuffer","usage","GPUBufferUsage","STORAGE","popErrorScope","push","kLargeChunkSize","kSmallChunkSize","forEach","destroy"],"mappings":";AAAA;AACA,G,CADA;AACA;AACA;AACA,OACA,OAAO,eAAeA,yBAAf,CAAyCC,MAAzC,EAA4D,CACjE,MAAMC,gBAAgB,GAAG,OAAOD,MAAP,EAA0BE,IAA1B,KAA2C;AAClE,UAAMC,OAAO,GAAG,EAAhB;AACA,aAAS;AACPH,MAAAA,MAAM,CAACI,cAAP,CAAsB,eAAtB;AACA,YAAMC,MAAM,GAAGL,MAAM,CAACM,YAAP,CAAoB,EAAEJ,IAAF,EAAQK,KAAK,EAAEC,cAAc,CAACC,OAA9B,EAApB,CAAf;AACA,UAAI,MAAMT,MAAM,CAACU,aAAP,EAAV,EAAkC;AAChC,eAAOP,OAAP;AACD;AACDA,MAAAA,OAAO,CAACQ,IAAR,CAAaN,MAAb;AACD;AACF,GAVD;;AAYA,QAAMO,eAAe,GAAG,MAAM,IAAN,GAAa,IAArC;AACA,QAAMC,eAAe,GAAG,KAAK,IAAL,GAAY,IAApC;AACA,QAAMV,OAAO,GAAG,MAAMF,gBAAgB,CAACD,MAAD,EAASY,eAAT,CAAtC;AACAT,EAAAA,OAAO,CAACQ,IAAR,CAAa,IAAI,MAAMV,gBAAgB,CAACD,MAAD,EAASa,eAAT,CAA1B,CAAb;AACA,SAAO,MAAM;AACXV,IAAAA,OAAO,CAACW,OAAR,CAAgBT,MAAM,IAAIA,MAAM,CAACU,OAAP,EAA1B;AACD,GAFD;AAGD","sourcesContent":["/**\n * Helper to exhaust VRAM until there is less than 64 MB of capacity. Returns\n * an opaque closure which can be called to free the allocated resources later.\n */\nexport async function exhaustVramUntilUnder64MB(device: GPUDevice) {\n  const allocateUntilOom = async (device: GPUDevice, size: number) => {\n    const buffers = [];\n    for (;;) {\n      device.pushErrorScope('out-of-memory');\n      const buffer = device.createBuffer({ size, usage: GPUBufferUsage.STORAGE });\n      if (await device.popErrorScope()) {\n        return buffers;\n      }\n      buffers.push(buffer);\n    }\n  };\n\n  const kLargeChunkSize = 512 * 1024 * 1024;\n  const kSmallChunkSize = 64 * 1024 * 1024;\n  const buffers = await allocateUntilOom(device, kLargeChunkSize);\n  buffers.push(...(await allocateUntilOom(device, kSmallChunkSize)));\n  return () => {\n    buffers.forEach(buffer => buffer.destroy());\n  };\n}\n"],"file":"memory.js"}