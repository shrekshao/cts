{"version":3,"sources":["../../../src/webgpu/util/texture.ts"],"names":["assert","kTextureFormatInfo","align","reifyExtent3D","makeTextureWithContents","device","texelView","desc","width","height","depthOrArrayLayers","size","bytesPerBlock","blockWidth","format","bytesPerRow","stagingBuffer","createBuffer","mappedAtCreation","usage","GPUBufferUsage","COPY_SRC","writeTextureData","Uint8Array","getMappedRange","rowsPerImage","subrectOrigin","subrectSize","unmap","texture","createTexture","GPUTextureUsage","COPY_DST","commandEncoder","createCommandEncoder","copyBufferToTexture","buffer","queue","submit","finish","destroy"],"mappings":";AAAA;AACA,GADA,SAASA,MAAT,QAAuB,2BAAvB,CACA,SAASC,kBAAT,QAAmC,uBAAnC;AAEA,SAASC,KAAT,QAAsB,WAAtB;;AAEA,SAASC,aAAT,QAA8B,aAA9B;;AAEA;AACA;AACA;AACA,OAAO,SAASC,uBAAT;AACLC,MADK;AAELC,SAFK;AAGLC,IAHK;AAIO;AACZ,QAAM,EAAEC,KAAF,EAASC,MAAT,EAAiBC,kBAAjB,KAAwCP,aAAa,CAACI,IAAI,CAACI,IAAN,CAA3D;;AAEA,QAAM,EAAEC,aAAF,EAAiBC,UAAjB,KAAgCZ,kBAAkB,CAACK,SAAS,CAACQ,MAAX,CAAxD;AACA;AACAd,EAAAA,MAAM,CAACa,UAAU,KAAK,CAAhB,CAAN;;AAEA;AACA,QAAME,WAAW,GAAGb,KAAK,CAACU,aAAa,GAAGJ,KAAjB,EAAwB,GAAxB,CAAzB;;AAEA;AACA,QAAMQ,aAAa,GAAGX,MAAM,CAACY,YAAP,CAAoB;AACxCC,IAAAA,gBAAgB,EAAE,IADsB;AAExCP,IAAAA,IAAI,EAAEI,WAAW,GAAGN,MAAd,GAAuBC,kBAFW;AAGxCS,IAAAA,KAAK,EAAEC,cAAc,CAACC,QAHkB,EAApB,CAAtB;;;AAMA;AACAf,EAAAA,SAAS,CAACgB,gBAAV,CAA2B,IAAIC,UAAJ,CAAeP,aAAa,CAACQ,cAAd,EAAf,CAA3B,EAA2E;AACzET,IAAAA,WADyE;AAEzEU,IAAAA,YAAY,EAAEhB,MAF2D;AAGzEiB,IAAAA,aAAa,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAH0D;AAIzEC,IAAAA,WAAW,EAAE,CAACnB,KAAD,EAAQC,MAAR,EAAgBC,kBAAhB,CAJ4D,EAA3E;;AAMAM,EAAAA,aAAa,CAACY,KAAd;;AAEA;AACA,QAAMC,OAAO,GAAGxB,MAAM,CAACyB,aAAP,CAAqB;AACnC,OAAGvB,IADgC;AAEnCO,IAAAA,MAAM,EAAER,SAAS,CAACQ,MAFiB;AAGnCK,IAAAA,KAAK,EAAEZ,IAAI,CAACY,KAAL,GAAaY,eAAe,CAACC,QAHD,EAArB,CAAhB;;;AAMA;AACA,QAAMC,cAAc,GAAG5B,MAAM,CAAC6B,oBAAP,EAAvB;AACAD,EAAAA,cAAc,CAACE,mBAAf;AACE,IAAEC,MAAM,EAAEpB,aAAV,EAAyBD,WAAzB,EADF;AAEE,IAAEc,OAAF,EAFF;AAGEtB,EAAAA,IAAI,CAACI,IAHP;;AAKAN,EAAAA,MAAM,CAACgC,KAAP,CAAaC,MAAb,CAAoB,CAACL,cAAc,CAACM,MAAf,EAAD,CAApB;;AAEA;AACAvB,EAAAA,aAAa,CAACwB,OAAd;;AAEA,SAAOX,OAAP;AACD","sourcesContent":["import { assert } from '../../common/util/util.js';\nimport { kTextureFormatInfo } from '../capability_info.js';\n\nimport { align } from './math.js';\nimport { TexelView } from './texture/texel_view.js';\nimport { reifyExtent3D } from './unions.js';\n\n/**\n * Creates a texture with the contents of a TexelView.\n */\nexport function makeTextureWithContents(\n  device: GPUDevice,\n  texelView: TexelView,\n  desc: Omit<GPUTextureDescriptor, 'format'>\n): GPUTexture {\n  const { width, height, depthOrArrayLayers } = reifyExtent3D(desc.size);\n\n  const { bytesPerBlock, blockWidth } = kTextureFormatInfo[texelView.format];\n  // Currently unimplemented for compressed textures.\n  assert(blockWidth === 1);\n\n  // Compute bytes per row.\n  const bytesPerRow = align(bytesPerBlock * width, 256);\n\n  // Create a staging buffer to upload the texture contents.\n  const stagingBuffer = device.createBuffer({\n    mappedAtCreation: true,\n    size: bytesPerRow * height * depthOrArrayLayers,\n    usage: GPUBufferUsage.COPY_SRC,\n  });\n\n  // Write the texels into the staging buffer.\n  texelView.writeTextureData(new Uint8Array(stagingBuffer.getMappedRange()), {\n    bytesPerRow,\n    rowsPerImage: height,\n    subrectOrigin: [0, 0, 0],\n    subrectSize: [width, height, depthOrArrayLayers],\n  });\n  stagingBuffer.unmap();\n\n  // Create the texture.\n  const texture = device.createTexture({\n    ...desc,\n    format: texelView.format,\n    usage: desc.usage | GPUTextureUsage.COPY_DST,\n  });\n\n  // Copy from the staging buffer into the texture.\n  const commandEncoder = device.createCommandEncoder();\n  commandEncoder.copyBufferToTexture(\n    { buffer: stagingBuffer, bytesPerRow },\n    { texture },\n    desc.size\n  );\n  device.queue.submit([commandEncoder.finish()]);\n\n  // Clean up the staging buffer.\n  stagingBuffer.destroy();\n\n  return texture;\n}\n"],"file":"texture.js"}