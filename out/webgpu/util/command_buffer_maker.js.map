{"version":3,"sources":["../../../src/webgpu/util/command_buffer_maker.ts"],"names":["kRenderEncodeTypes","kProgrammableEncoderTypes","kEncoderTypes","CommandBufferMaker","constructor","t","encoder","finish","validateFinish","validateFinishAndSubmit","shouldBeValid","submitShouldSucceedIfValid","commandBuffer","expectValidationError","queue","submit","validateFinishAndSubmitGivenState","resourceState"],"mappings":";AAAA;AACA,GACA,OAAO,MAAMA,kBAAkB,GAAG,CAAC,aAAD,EAAgB,eAAhB,CAA3B;;AAEP,OAAO,MAAMC,yBAAyB,GAAG,CAAC,cAAD,EAAiB,GAAGD,kBAApB,CAAlC;;AAEP,OAAO,MAAME,aAAa,GAAG,CAAC,UAAD,EAAa,GAAGD,yBAAhB,CAAtB;;;;;;;;;;;AAWP;AACA;AACA,OAAO,MAAME,kBAAN,CAAgD;AACrD;AACA;;;AAGA;AACF;AACA;AACA;;;AAGE;AACF;AACA;AACA;;;;;;AAME;AACF;AACA;AACA;AACA;;;AAGEC,EAAAA,WAAW;AACTC,EAAAA,CADS;AAETC,EAAAA,OAFS;AAGTC,EAAAA,MAHS;AAIT;AACA;AACA,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAKE,cAAL,GAAsBD,MAAtB;;AAEA;AACA;;AAEA,SAAKE,uBAAL,GAA+B;AAC7BC,IAAAA,aAD6B;AAE7BC,IAAAA,0BAF6B;AAG1B;AACH,YAAMC,aAAa,GAAGL,MAAM,CAACG,aAAD,CAA5B;AACA,UAAIA,aAAJ,EAAmB;AACjBL,QAAAA,CAAC,CAACQ,qBAAF,CAAwB,MAAMR,CAAC,CAACS,KAAF,CAAQC,MAAR,CAAe,CAACH,aAAD,CAAf,CAA9B,EAA+D,CAACD,0BAAhE;AACD;AACF,KARD;;AAUA,SAAKK,iCAAL,GAA0CC,aAAD,IAAkC;AACzE,WAAKR,uBAAL,CAA6BQ,aAAa,KAAK,SAA/C,EAA0DA,aAAa,KAAK,WAA5E;AACD,KAFD;AAGD,GApDoD","sourcesContent":["import { ResourceState, GPUTest } from '../gpu_test.js';\n\nexport const kRenderEncodeTypes = ['render pass', 'render bundle'] as const;\nexport type RenderEncodeType = typeof kRenderEncodeTypes[number];\nexport const kProgrammableEncoderTypes = ['compute pass', ...kRenderEncodeTypes] as const;\nexport type ProgrammableEncoderType = typeof kProgrammableEncoderTypes[number];\nexport const kEncoderTypes = ['non-pass', ...kProgrammableEncoderTypes] as const;\nexport type EncoderType = typeof kEncoderTypes[number];\n\n// Look up the type of the encoder based on `T`. If `T` is a union, this will be too!\ntype EncoderByEncoderType<T extends EncoderType> = {\n  'non-pass': GPUCommandEncoder;\n  'compute pass': GPUComputePassEncoder;\n  'render pass': GPURenderPassEncoder;\n  'render bundle': GPURenderBundleEncoder;\n}[T];\n\n/** See {@link webgpu/api/validation/validation_test.ValidationTest.createEncoder |\n * GPUTest.createEncoder()}. */\nexport class CommandBufferMaker<T extends EncoderType> {\n  /** `GPU___Encoder` for recording commands into. */\n  // Look up the type of the encoder based on `T`. If `T` is a union, this will be too!\n  readonly encoder: EncoderByEncoderType<T>;\n\n  /**\n   * Finish any passes, finish and record any bundles, and finish/return the command buffer.\n   * Checks for validation errors in (only) the appropriate finish call.\n   */\n  readonly validateFinish: (shouldSucceed: boolean) => GPUCommandBuffer;\n\n  /**\n   * Finish the command buffer and submit it. Checks for validation errors in either the submit or\n   * the appropriate finish call, depending on the state of a resource used in the encoding.\n   */\n  readonly validateFinishAndSubmit: (\n    shouldBeValid: boolean,\n    submitShouldSucceedIfValid: boolean\n  ) => void;\n\n  /**\n   * `validateFinishAndSubmit()` based on the state of a resource in the command encoder.\n   * - `finish()` should fail if the resource is 'invalid'.\n   * - Only `submit()` should fail if the resource is 'destroyed'.\n   */\n  readonly validateFinishAndSubmitGivenState: (resourceState: ResourceState) => void;\n\n  constructor(\n    t: GPUTest,\n    encoder: EncoderByEncoderType<EncoderType>,\n    finish: (shouldSucceed: boolean) => GPUCommandBuffer\n  ) {\n    // TypeScript introduces an intersection type here where we don't want one.\n    this.encoder = encoder as EncoderByEncoderType<T>;\n    this.validateFinish = finish;\n\n    // Define extra methods like this, otherwise they get unbound when destructured, e.g.:\n    // const { encoder, validateFinishAndSubmit } = t.createEncoder(type);\n\n    this.validateFinishAndSubmit = (\n      shouldBeValid: boolean,\n      submitShouldSucceedIfValid: boolean\n    ) => {\n      const commandBuffer = finish(shouldBeValid);\n      if (shouldBeValid) {\n        t.expectValidationError(() => t.queue.submit([commandBuffer]), !submitShouldSucceedIfValid);\n      }\n    };\n\n    this.validateFinishAndSubmitGivenState = (resourceState: ResourceState) => {\n      this.validateFinishAndSubmit(resourceState !== 'invalid', resourceState !== 'destroyed');\n    };\n  }\n}\n"],"file":"command_buffer_maker.js"}