{"version":3,"file":"f32_interval.js","names":["FP","toF32Interval","n","f32","toInterval","isF32Vector","v","isVector","toF32Vector","toVector","spanF32Intervals","intervals","spanIntervals","isF32Matrix","m","isMatrix","toF32Matrix","toMatrix","correctlyRoundedInterval","correctlyRoundedMatrix","absoluteErrorInterval","error_range","ulpInterval","numULP","additionMatrixInterval","x","y","determinantInterval","faceForwardIntervals","z","modfInterval","multiplicationMatrixScalarInterval","mat","scalar","multiplicationScalarMatrixInterval","multiplicationMatrixMatrixInterval","mat_x","mat_y","multiplicationMatrixVectorInterval","multiplicationVectorMatrixInterval","refractInterval","i","s","r","subtractionMatrixInterval","transposeInterval"],"sources":["../../../src/webgpu/util/f32_interval.ts"],"sourcesContent":["// This is a shim file with all the old/deprecated f32 API calls.\n// They currently just pass-through to the refactored FPContext implementation.\n// As CTS migrates over to directly calling the new API, these will be removed.\n\nimport { FPInterval, FPMatrix, FPVector, IntervalBounds, FP } from './floating_point.js';\n\n// Interfaces\n\nexport interface MatrixToScalar {\n  (m: number[][]): FPInterval;\n}\n\nexport interface MatrixToMatrix {\n  (m: number[][]): FPMatrix;\n}\n\nexport interface MatrixPairToMatrix {\n  (x: number[][], y: number[][]): FPMatrix;\n}\n\nexport interface MatrixScalarToMatrix {\n  (x: number[][], y: number): FPMatrix;\n}\n\nexport interface ScalarMatrixToMatrix {\n  (x: number, y: number[][]): FPMatrix;\n}\n\nexport interface MatrixVectorToVector {\n  (x: number[][], y: number[]): FPVector;\n}\n\nexport interface VectorMatrixToVector {\n  (x: number[], y: number[][]): FPVector;\n}\n\n// Containers\n\nexport type F32Vector = FPVector;\n\n// Utilities\n\nexport function toF32Interval(n: number | IntervalBounds | FPInterval): FPInterval {\n  return FP.f32.toInterval(n);\n}\n\nexport function isF32Vector(v: (number | IntervalBounds | FPInterval)[]): v is FPVector {\n  return FP.f32.isVector(v);\n}\n\nexport function toF32Vector(v: (number | IntervalBounds | FPInterval)[]): FPVector {\n  return FP.f32.toVector(v);\n}\n\nexport function spanF32Intervals(...intervals: FPInterval[]): FPInterval {\n  return FP.f32.spanIntervals(...intervals);\n}\n\nexport function isF32Matrix(\n  m: (number | IntervalBounds | FPInterval)[][] | FPVector[]\n): m is FPMatrix {\n  return FP.f32.isMatrix(m);\n}\n\nexport function toF32Matrix(m: (number | IntervalBounds | FPInterval)[][] | FPVector[]): FPMatrix {\n  return FP.f32.toMatrix(m);\n}\n\n// Accuracy Interval\n\nexport function correctlyRoundedInterval(n: number | FPInterval): FPInterval {\n  return FP.f32.correctlyRoundedInterval(n);\n}\n\nexport function correctlyRoundedMatrix(m: number[][]): FPMatrix {\n  return FP.f32.correctlyRoundedMatrix(m);\n}\n\nexport function absoluteErrorInterval(n: number, error_range: number): FPInterval {\n  return FP.f32.absoluteErrorInterval(n, error_range);\n}\n\nexport function ulpInterval(n: number, numULP: number): FPInterval {\n  return FP.f32.ulpInterval(n, numULP);\n}\n\nexport function additionMatrixInterval(x: number[][], y: number[][]): FPMatrix {\n  return FP.f32.additionMatrixInterval(x, y);\n}\n\nexport function determinantInterval(m: number[][]): FPInterval {\n  return FP.f32.determinantInterval(m);\n}\n\nexport function faceForwardIntervals(\n  x: number[],\n  y: number[],\n  z: number[]\n): (FPVector | undefined)[] {\n  return FP.f32.faceForwardIntervals(x, y, z);\n}\n\nexport function modfInterval(n: number): { fract: FPInterval; whole: FPInterval } {\n  return FP.f32.modfInterval(n);\n}\n\nexport function multiplicationMatrixScalarInterval(mat: number[][], scalar: number): FPMatrix {\n  return FP.f32.multiplicationMatrixScalarInterval(mat, scalar);\n}\n\nexport function multiplicationScalarMatrixInterval(scalar: number, mat: number[][]): FPMatrix {\n  return FP.f32.multiplicationScalarMatrixInterval(scalar, mat);\n}\n\nexport function multiplicationMatrixMatrixInterval(mat_x: number[][], mat_y: number[][]): FPMatrix {\n  return FP.f32.multiplicationMatrixMatrixInterval(mat_x, mat_y);\n}\n\nexport function multiplicationMatrixVectorInterval(x: number[][], y: number[]): FPVector {\n  return FP.f32.multiplicationMatrixVectorInterval(x, y);\n}\n\nexport function multiplicationVectorMatrixInterval(x: number[], y: number[][]): FPVector {\n  return FP.f32.multiplicationVectorMatrixInterval(x, y);\n}\n\nexport function refractInterval(i: number[], s: number[], r: number): FPVector {\n  return FP.f32.refractInterval(i, s, r);\n}\n\nexport function subtractionMatrixInterval(x: number[][], y: number[][]): FPMatrix {\n  return FP.f32.subtractionMatrixInterval(x, y);\n}\n\nexport function transposeInterval(m: number[][]): FPMatrix {\n  return FP.f32.transposeInterval(m);\n}\n"],"mappings":"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"}