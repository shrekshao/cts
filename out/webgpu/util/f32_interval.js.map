{"version":3,"file":"f32_interval.js","names":["assert","unreachable","Float16Array","kValue","reinterpretF32AsU32","reinterpretU32AsF32","cartesianProduct","correctlyRoundedF16","correctlyRoundedF32","flushSubnormalNumberF32","isFiniteF16","isFiniteF32","isSubnormalNumberF16","isSubnormalNumberF32","oneULP","F32Interval","constructor","bounds","begin","end","length","Number","isNaN","isPoint","contains","n","NEGATIVE_INFINITY","POSITIVE_INFINITY","i","toF32Interval","containsZeroOrSubnormals","f32","subnormal","negative","min","positive","max","isFinite","span","intervals","forEach","Math","toString","any","_any","undefined","serializeF32Interval","deserializeF32Interval","data","Array","kNegPiToPiInterval","pi","whole","kGreaterThanZeroInterval","isF32Vector","v","toF32Vector","f","map","kZeroVector","kAnyVector","spanF32Vector","vectors","vector_length","every","e","_","idx","multiplyVectorByScalar","c","x","multiplicationInterval","addFlushedIfNeededF32","values","some","concat","addFlushedIfNeededF16","limitPointToIntervalDomain","domain","impl","limitBinaryToIntervalDomain","y","d","roundAndFlushPointToInterval","op","inputs","results","Set","roundAndFlushBinaryToInterval","x_values","y_values","x_inputs","y_inputs","inner_x","inner_y","add","roundAndFlushTernaryToInterval","z","z_values","z_inputs","inner_z","roundAndFlushVectorToInterval","x_rounded","x_flushed","roundAndFlushVectorPairToInterval","y_rounded","y_flushed","roundAndFlushVectorToVector","interval_vectors","roundAndFlushVectorPairToVector","runPointToIntervalOp","extrema","result","b","runBinaryToIntervalOp","outputs","runTernaryToIntervalOp","runVectorToIntervalOp","runVectorPairToIntervalOp","runVectorToVectorOp","runPointToIntervalOpComponentWise","runVectorPairToVectorOp","runBinaryToIntervalOpComponentWise","CorrectlyRoundedIntervalOp","correctlyRoundedInterval","AbsoluteErrorIntervalOp","error_range","absoluteErrorInterval","abs","ULPIntervalOp","numULP","ulp","ulpInterval","AbsIntervalOp","absInterval","AcosIntervalOp","sqrtInterval","subtractionInterval","atan2Interval","acosInterval","acoshIntervals","acoshAlternativeInterval","acoshPrimaryInterval","AcoshAlternativeIntervalOp","inner_value","additionInterval","sqrt_value","logInterval","AcoshPrimaryIntervalOp","AdditionIntervalOp","AsinIntervalOp","asinInterval","AsinhIntervalOp","asinhInterval","AtanIntervalOp","atan","atanInterval","Atan2IntervalOp","atan_yx","divisionInterval","AtanhIntervalOp","numerator","denominator","log_interval","atanhInterval","CeilIntervalOp","ceil","ceilInterval","ClampMedianIntervalOp","sort","a","clampIntervals","clampMinMaxInterval","clampMedianInterval","ClampMinMaxIntervalOp","low","high","CosIntervalOp","cos","cosInterval","CoshIntervalOp","minus_n","negationInterval","expInterval","coshInterval","CrossIntervalOp","r0","r1","r2","crossInterval","DegreesIntervalOp","degreesInterval","DistanceIntervalScalarOp","lengthInterval","DistanceIntervalVectorOp","SubtractionIntervalOp","distanceInterval","DivisionIntervalOp","DotIntervalOp","multiplications","MultiplicationIntervalOp","reduce","previous","current","dotInterval","ExpIntervalOp","exp","Exp2IntervalOp","pow","exp2Interval","faceForwardIntervals","x_vec","positive_x","negative_x","NegationIntervalOp","dot_interval","push","r","FloorIntervalOp","floor","floorInterval","FmaIntervalOp","fmaInterval","FractIntervalOp","less_than_one","fractInterval","InverseSqrtIntervalOp","sqrt","inverseSqrtInterval","LdexpIntervalOp","e1","e2","ldexpInterval","LengthIntervalScalarOp","LengthIntervalVectorOp","LogIntervalOp","log","Log2IntervalOp","log2","log2Interval","MaxIntervalOp","maxInterval","MinIntervalOp","minInterval","MixImpreciseIntervalOp","t","mixIntervals","mixImpreciseInterval","mixPreciseInterval","MixPreciseIntervalOp","s","modfInterval","fract","MultiplicationInnerOp","NormalizeIntervalOp","normalizeInterval","PowIntervalOp","powInterval","QuantizeToF16IntervalOp","rounded","flushed","quantizeToF16Interval","RadiansIntervalOp","radiansInterval","ReflectIntervalOp","rhs","reflectInterval","refractInterval","r_squared","dot","dot_squared","one_minus_dot_squared","k","dot_times_r","k_sqrt","RemainderIntervalOp","truncInterval","remainderInterval","RoundIntervalOp","diff_before","diff_after","roundInterval","saturateInterval","SignIntervalOp","signInterval","SinIntervalOp","sin","sinInterval","SinhIntervalOp","sinhInterval","SmoothStepOp","smoothStepInterval","SqrtIntervalOp","StepIntervalOp","edge","stepInterval","TanIntervalOp","tanInterval","TanhIntervalOp","tanhInterval","TruncIntervalOp","trunc","unpackData","ArrayBuffer","unpackDataU32","Uint32Array","unpackDataU16","Uint16Array","unpackDataU8","Uint8Array","unpackDataI16","Int16Array","unpackDataI8","Int8Array","unpackDataF16","unpack2x16floatInterval","u32","Unpack2x16snormIntervalOp","unpack2x16snormInterval","Unpack2x16unormIntervalOp","unpack2x16unormInterval","Unpack4x8snormIntervalOp","unpack4x8snormInterval","Unpack4x8unormIntervalOp","unpack4x8unormInterval"],"sources":["../../../src/webgpu/util/f32_interval.ts"],"sourcesContent":["import { assert, unreachable } from '../../common/util/util.js';\nimport { Float16Array } from '../../external/petamoriken/float16/float16.js';\n\nimport { kValue } from './constants.js';\nimport { reinterpretF32AsU32, reinterpretU32AsF32 } from './conversion.js';\nimport {\n  cartesianProduct,\n  correctlyRoundedF16,\n  correctlyRoundedF32,\n  flushSubnormalNumberF32,\n  isFiniteF16,\n  isFiniteF32,\n  isSubnormalNumberF16,\n  isSubnormalNumberF32,\n  oneULP,\n} from './math.js';\n\n/**\n * Representation of bounds for an interval as an array with either one or two\n * elements. Single element indicates that the interval is a single point. For\n * two elements, the first is the lower bound of the interval and the second is\n * the upper bound.\n */\nexport type IntervalBounds = [number] | [number, number];\n\n/** Represents a closed interval in the f32 range */\nexport class F32Interval {\n  public readonly begin: number;\n  public readonly end: number;\n  private static _any: F32Interval;\n\n  /** Constructor\n   *\n   * `toF32Interval` is the preferred way to create F32Intervals\n   *\n   * @param bounds either a pair of numbers indicating the beginning then the\n   *               end of the interval, or a single element array indicating the\n   *               interval is a point\n   */\n  public constructor(...bounds: IntervalBounds) {\n    const [begin, end] = bounds.length === 2 ? bounds : [bounds[0], bounds[0]];\n    assert(!Number.isNaN(begin) && !Number.isNaN(end), `bounds need to be non-NaN`);\n    assert(begin <= end, `bounds[0] (${begin}) must be less than or equal to bounds[1]  (${end})`);\n\n    this.begin = begin;\n    this.end = end;\n  }\n\n  /** @returns begin and end if non-point interval, otherwise just begin */\n  public bounds(): IntervalBounds {\n    return this.isPoint() ? [this.begin] : [this.begin, this.end];\n  }\n\n  /** @returns if a point or interval is completely contained by this interval */\n  public contains(n: number | F32Interval): boolean {\n    if (Number.isNaN(n)) {\n      // Being the any interval indicates that accuracy is not defined for this\n      // test, so the test is just checking that this input doesn't cause the\n      // implementation to misbehave, so NaN is accepted.\n      return this.begin === Number.NEGATIVE_INFINITY && this.end === Number.POSITIVE_INFINITY;\n    }\n    const i = toF32Interval(n);\n    return this.begin <= i.begin && this.end >= i.end;\n  }\n\n  /** @returns if any values in the interval may be flushed to zero, this\n   *           includes any subnormals and zero itself.\n   */\n  public containsZeroOrSubnormals(): boolean {\n    return !(\n      this.end < kValue.f32.subnormal.negative.min || this.begin > kValue.f32.subnormal.positive.max\n    );\n  }\n\n  /** @returns if this interval contains a single point */\n  public isPoint(): boolean {\n    return this.begin === this.end;\n  }\n\n  /** @returns if this interval only contains f32 finite values */\n  public isFinite(): boolean {\n    return isFiniteF32(this.begin) && isFiniteF32(this.end);\n  }\n\n  /** @returns an interval with the tightest bounds that includes all provided intervals */\n  static span(...intervals: F32Interval[]): F32Interval {\n    assert(intervals.length > 0, `span of an empty list of F32Intervals is not allowed`);\n    let begin = Number.POSITIVE_INFINITY;\n    let end = Number.NEGATIVE_INFINITY;\n    intervals.forEach(i => {\n      begin = Math.min(i.begin, begin);\n      end = Math.max(i.end, end);\n    });\n    return new F32Interval(begin, end);\n  }\n\n  /** @returns a string representation for logging purposes */\n  public toString(): string {\n    return `[${this.bounds()}]`;\n  }\n\n  /** @returns a singleton for interval of all possible values\n   * This interval is used in situations where accuracy is not defined, so any\n   * result is valid.\n   */\n  public static any(): F32Interval {\n    if (this._any === undefined) {\n      this._any = new F32Interval(Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY);\n    }\n    return this._any;\n  }\n}\n\n/**\n * SerializedF32Interval holds the serialized form of a F32Interval.\n * This form can be safely encoded to JSON.\n */\nexport type SerializedF32Interval = { begin: number; end: number } | 'any';\n\n/** serializeF32Interval() converts a F32Interval to a SerializedF32Interval */\nexport function serializeF32Interval(i: F32Interval): SerializedF32Interval {\n  return i === F32Interval.any()\n    ? 'any'\n    : { begin: reinterpretF32AsU32(i.begin), end: reinterpretF32AsU32(i.end) };\n}\n\n/** serializeF32Interval() converts a SerializedF32Interval to a F32Interval */\nexport function deserializeF32Interval(data: SerializedF32Interval): F32Interval {\n  return data === 'any'\n    ? F32Interval.any()\n    : toF32Interval([reinterpretU32AsF32(data.begin), reinterpretU32AsF32(data.end)]);\n}\n\n/** @returns an interval containing the point or the original interval */\nexport function toF32Interval(n: number | IntervalBounds | F32Interval): F32Interval {\n  if (n instanceof F32Interval) {\n    return n;\n  }\n\n  if (n instanceof Array) {\n    return new F32Interval(...n);\n  }\n\n  return new F32Interval(n, n);\n}\n\n/** F32Interval of [-π, π] */\nconst kNegPiToPiInterval = toF32Interval([\n  kValue.f32.negative.pi.whole,\n  kValue.f32.positive.pi.whole,\n]);\n\n/** F32Interval of values greater than 0 and less than or equal to f32 max */\nconst kGreaterThanZeroInterval = toF32Interval([\n  kValue.f32.subnormal.positive.min,\n  kValue.f32.positive.max,\n]);\n\n/** Representation of a vec2/3/4 of floating point intervals as an array of F32Intervals */\nexport type F32Vector =\n  | [F32Interval, F32Interval]\n  | [F32Interval, F32Interval, F32Interval]\n  | [F32Interval, F32Interval, F32Interval, F32Interval];\n\n/** Coerce F32Interval[] to F32Vector if possible */\nfunction isF32Vector(v: number[] | IntervalBounds[] | F32Interval[] | F32Vector): v is F32Vector {\n  if (v[0] instanceof F32Interval) {\n    return v.length === 2 || v.length === 3 || v.length === 4;\n  }\n  return false;\n}\n\n/** @returns an F32Vector representation of an array fo F32Intervals if possible */\nexport function toF32Vector(v: number[] | IntervalBounds[] | F32Interval[] | F32Vector): F32Vector {\n  if (isF32Vector(v)) {\n    return v;\n  }\n\n  const f = v.map(toF32Interval);\n  if (isF32Vector(f)) {\n    return f;\n  }\n  unreachable(`Cannot convert [${v}] to F32Vector`);\n}\n\n/** F32Vector with all zero elements */\nconst kZeroVector = {\n  2: toF32Vector([0, 0]),\n  3: toF32Vector([0, 0, 0]),\n  4: toF32Vector([0, 0, 0, 0]),\n};\n\n/** F32Vector with all F32Interval.any() elements */\nconst kAnyVector = {\n  2: toF32Vector([F32Interval.any(), F32Interval.any()]),\n  3: toF32Vector([F32Interval.any(), F32Interval.any(), F32Interval.any()]),\n  4: toF32Vector([F32Interval.any(), F32Interval.any(), F32Interval.any(), F32Interval.any()]),\n};\n\n/**\n * @returns a F32Vector where each element is the span for corresponding\n *          elements at the same index in the input vectors\n */\nfunction spanF32Vector(...vectors: F32Vector[]): F32Vector {\n  const vector_length = vectors[0].length;\n  assert(\n    vectors.every(e => e.length === vector_length),\n    `Vector span is not defined for vectors of differing lengths`\n  );\n\n  // The outer map is doing the walk across a single F32Vector to get the indices to use.\n  // The inner map is doing the walk across the of the vector array, collecting the value of each vector at the\n  // index, then spanning them down to a single F32Interval.\n  // The toF32Vector coerces things at the end to be a F32Vector, because the outer .map() will actually return a\n  // F32Interval[]\n  return toF32Vector(\n    vectors[0].map((_, idx) => {\n      return F32Interval.span(...vectors.map(v => v[idx]));\n    })\n  );\n}\n\n/**\n * @retuns the vector result of multiplying the given vector by the given scalar\n */\nfunction multiplyVectorByScalar(v: number[], c: number | F32Interval): F32Vector {\n  return toF32Vector(v.map(x => multiplicationInterval(x, c)));\n}\n\n/**\n * @returns the input plus zero if any of the entries are f32 subnormal,\n * otherwise returns the input.\n */\nfunction addFlushedIfNeededF32(values: number[]): number[] {\n  return values.some(v => v !== 0 && isSubnormalNumberF32(v)) ? values.concat(0) : values;\n}\n\n/**\n * @returns the input plus zero if any of the entries are f16 subnormal,\n * otherwise returns the input\n */\nfunction addFlushedIfNeededF16(values: number[]): number[] {\n  return values.some(v => v !== 0 && isSubnormalNumberF16(v)) ? values.concat(0) : values;\n}\n\n/**\n * A function that converts a point to an acceptance interval.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface PointToInterval {\n  (x: number): F32Interval;\n}\n\n/** Operation used to implement a PointToInterval */\nexport interface PointToIntervalOp {\n  /** @returns acceptance interval for a function at point x */\n  impl: PointToInterval;\n\n  /**\n   * Calculates where in the domain defined by x the min/max extrema of impl\n   * occur and returns a span of those points to be used as the domain instead.\n   *\n   * Used by runPointToIntervalOp before invoking impl.\n   * If not defined, the bounds of the existing domain are assumed to be the\n   * extrema.\n   *\n   * This is only implemented for operations that meet all of the following\n   * criteria:\n   *   a) non-monotonic\n   *   b) used in inherited accuracy calculations\n   *   c) need to take in an interval for b)\n   *      i.e. fooInterval takes in x: number | F32Interval, not x: number\n   */\n  extrema?: (x: F32Interval) => F32Interval;\n}\n\n/**\n * Restrict the inputs to an PointToInterval operation\n *\n * Only used for operations that have tighter domain requirements than 'must be\n * f32 finite'.\n *\n * @param domain interval to restrict inputs to\n * @param impl operation implementation to run if input is within the required domain\n * @returns a PointToInterval that calls impl if domain contains the input,\n *          otherwise it returns the any() interval */\nfunction limitPointToIntervalDomain(domain: F32Interval, impl: PointToInterval): PointToInterval {\n  return (n: number): F32Interval => {\n    return domain.contains(n) ? impl(n) : F32Interval.any();\n  };\n}\n\n/**\n * A function that converts a pair of points to an acceptance interval.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface BinaryToInterval {\n  (x: number, y: number): F32Interval;\n}\n\n/** Operation used to implement a BinaryToInterval */\ninterface BinaryToIntervalOp {\n  /** @returns acceptance interval for a function at point (x, y) */\n  impl: BinaryToInterval;\n  /**\n   * Calculates where in domain defined by x & y the min/max extrema of impl\n   * occur and returns spans of those points to be used as the domain instead.\n   *\n   * Used by runBinaryToIntervalOp before invoking impl.\n   * If not defined, the bounds of the existing domain are assumed to be the\n   * extrema.\n   *\n   * This is only implemented for functions that meet all of the following\n   * criteria:\n   *   a) non-monotonic\n   *   b) used in inherited accuracy calculations\n   *   c) need to take in an interval for b)\n   */\n  extrema?: (x: F32Interval, y: F32Interval) => [F32Interval, F32Interval];\n}\n\n/** Domain for a BinaryToInterval implementation */\ninterface BinaryToIntervalDomain {\n  x: F32Interval;\n  // y is an array to support handling domains composed of discrete intervals\n  y: F32Interval[];\n}\n\n/**\n * Restrict the inputs to a BinaryToInterval\n *\n * Only used for operations that have tighter domain requirements than 'must be\n * f32 finite'.\n *\n * @param domain set of intervals to restrict inputs to\n * @param impl operation implementation to run if input is within the required domain\n * @returns a BinaryToInterval that calls impl if domain contains the input,\n *          otherwise it returns the any() interval */\nfunction limitBinaryToIntervalDomain(\n  domain: BinaryToIntervalDomain,\n  impl: BinaryToInterval\n): BinaryToInterval {\n  return (x: number, y: number): F32Interval => {\n    if (!domain.x.contains(x)) {\n      return F32Interval.any();\n    }\n\n    if (!domain.y.some(d => d.contains(y))) {\n      return F32Interval.any();\n    }\n\n    return impl(x, y);\n  };\n}\n\n/**\n * A function that converts a triplet of points to an acceptance interval.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface TernaryToInterval {\n  (x: number, y: number, z: number): F32Interval;\n}\n\n/** Operation used to implement a TernaryToInterval */\ninterface TernaryToIntervalOp {\n  // Re-using the *Op interface pattern for symmetry with the other operations.\n  /** @returns acceptance interval for a function at point (x, y, z) */\n  impl: TernaryToInterval;\n}\n\n// Currently PointToVector is not integrated with the rest of the floating point\n// framework, because the only builtins that use it are actually\n// u32 -> [f32, f32, f32, f32] functions, so the whole rounding and interval\n// process doesn't get applied to the inputs.\n// They do use the framework internally by invoking divisionInterval on segments\n// of the input.\n/**\n * A function that converts a point to a vector of acceptance intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface PointToVector {\n  (n: number): F32Vector;\n}\n\n/**\n * A function that converts a vector to an acceptance interval.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface VectorToInterval {\n  (x: number[]): F32Interval;\n}\n\n/** Operation used to implement a VectorToInterval */\ninterface VectorToIntervalOp {\n  // Re-using the *Op interface pattern for symmetry with the other operations.\n  /** @returns acceptance interval for a function on vector x */\n  impl: VectorToInterval;\n}\n\n/**\n * A function that converts a pair of vectors to an acceptance interval.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface VectorPairToInterval {\n  (x: number[], y: number[]): F32Interval;\n}\n\n/** Operation used to implement a VectorPairToInterval */\ninterface VectorPairToIntervalOp {\n  // Re-using the *Op interface pattern for symmetry with the other operations.\n  /** @returns acceptance interval for a function on vectors (x, y) */\n  impl: VectorPairToInterval;\n}\n\n/**\n * A function that converts a vector to a vector of acceptance intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface VectorToVector {\n  (x: number[]): F32Vector;\n}\n\n/** Operation used to implement a VectorToVector */\ninterface VectorToVectorOp {\n  // Re-using the *Op interface pattern for symmetry with the other operations.\n  /** @returns a vector of acceptance intervals for a function on vector x */\n  impl: VectorToVector;\n}\n\n/**\n * A function that converts a pair of vectors to a vector of acceptance\n * intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\nexport interface VectorPairToVector {\n  (x: number[], y: number[]): F32Vector;\n}\n\n/** Operation used to implement a VectorPairToVector */\ninterface VectorPairToVectorOp {\n  // Re-using the *Op interface pattern for symmetry with the other operations.\n  /** @returns a vector of acceptance intervals for a function on vectors (x, y) */\n  impl: VectorPairToVector;\n}\n\n/** Converts a point to an acceptance interval, using a specific function\n *\n * This handles correctly rounding and flushing inputs as needed.\n * Duplicate inputs are pruned before invoking op.impl.\n * op.extrema is invoked before this point in the call stack.\n * op.domain is tested before this point in the call stack.\n *\n * @param n value to flush & round then invoke op.impl on\n * @param op operation defining the function being run\n * @returns a span over all of the outputs of op.impl\n */\nfunction roundAndFlushPointToInterval(n: number, op: PointToIntervalOp) {\n  assert(!Number.isNaN(n), `flush not defined for NaN`);\n  const values = correctlyRoundedF32(n);\n  const inputs = addFlushedIfNeededF32(values);\n  const results = new Set<F32Interval>(inputs.map(op.impl));\n  return F32Interval.span(...results);\n}\n\n/** Converts a pair to an acceptance interval, using a specific function\n *\n * This handles correctly rounding and flushing inputs as needed.\n * Duplicate inputs are pruned before invoking op.impl.\n * All unique combinations of x & y are run.\n * op.extrema is invoked before this point in the call stack.\n * op.domain is tested before this point in the call stack.\n *\n * @param x first param to flush & round then invoke op.impl on\n * @param y second param to flush & round then invoke op.impl on\n * @param op operation defining the function being run\n * @returns a span over all of the outputs of op.impl\n */\nfunction roundAndFlushBinaryToInterval(x: number, y: number, op: BinaryToIntervalOp): F32Interval {\n  assert(!Number.isNaN(x), `flush not defined for NaN`);\n  assert(!Number.isNaN(y), `flush not defined for NaN`);\n  const x_values = correctlyRoundedF32(x);\n  const y_values = correctlyRoundedF32(y);\n  const x_inputs = addFlushedIfNeededF32(x_values);\n  const y_inputs = addFlushedIfNeededF32(y_values);\n  const intervals = new Set<F32Interval>();\n  x_inputs.forEach(inner_x => {\n    y_inputs.forEach(inner_y => {\n      intervals.add(op.impl(inner_x, inner_y));\n    });\n  });\n  return F32Interval.span(...intervals);\n}\n\n/** Converts a triplet to an acceptance interval, using a specific function\n *\n * This handles correctly rounding and flushing inputs as needed.\n * Duplicate inputs are pruned before invoking op.impl.\n * All unique combinations of x, y & z are run.\n *\n * @param x first param to flush & round then invoke op.impl on\n * @param y second param to flush & round then invoke op.impl on\n * @param z third param to flush & round then invoke op.impl on\n * @param op operation defining the function being run\n * @returns a span over all of the outputs of op.impl\n */\nfunction roundAndFlushTernaryToInterval(\n  x: number,\n  y: number,\n  z: number,\n  op: TernaryToIntervalOp\n): F32Interval {\n  assert(!Number.isNaN(x), `flush not defined for NaN`);\n  assert(!Number.isNaN(y), `flush not defined for NaN`);\n  assert(!Number.isNaN(z), `flush not defined for NaN`);\n  const x_values = correctlyRoundedF32(x);\n  const y_values = correctlyRoundedF32(y);\n  const z_values = correctlyRoundedF32(z);\n  const x_inputs = addFlushedIfNeededF32(x_values);\n  const y_inputs = addFlushedIfNeededF32(y_values);\n  const z_inputs = addFlushedIfNeededF32(z_values);\n  const intervals = new Set<F32Interval>();\n  // prettier-ignore\n  x_inputs.forEach(inner_x => {\n    y_inputs.forEach(inner_y => {\n      z_inputs.forEach(inner_z => {\n        intervals.add(op.impl(inner_x, inner_y, inner_z));\n      });\n    });\n  });\n\n  return F32Interval.span(...intervals);\n}\n\n/** Converts a vector to an acceptance interval using a specific function\n *\n * This handles correctly rounding and flushing inputs as needed.\n * Duplicate inputs are pruned before invoking op.impl.\n *\n * @param x param to flush & round then invoke op.impl on\n * @param op operation defining the function being run\n * @returns a span over all of the outputs of op.impl\n */\nfunction roundAndFlushVectorToInterval(x: number[], op: VectorToIntervalOp): F32Interval {\n  assert(\n    x.every(e => !Number.isNaN(e)),\n    `flush not defined for NaN`\n  );\n\n  const x_rounded: number[][] = x.map(correctlyRoundedF32);\n  const x_flushed: number[][] = x_rounded.map(addFlushedIfNeededF32);\n  const x_inputs = cartesianProduct<number>(...x_flushed);\n\n  const intervals = new Set<F32Interval>();\n  x_inputs.forEach(inner_x => {\n    intervals.add(op.impl(inner_x));\n  });\n  return F32Interval.span(...intervals);\n}\n\n/** Converts a pair of vectors to an acceptance interval using a specific function\n *\n * This handles correctly rounding and flushing inputs as needed.\n * Duplicate inputs are pruned before invoking op.impl.\n * All unique combinations of x & y are run.\n *\n * @param x first param to flush & round then invoke op.impl on\n * @param y second param to flush & round then invoke op.impl on\n * @param op operation defining the function being run\n * @returns a span over all of the outputs of op.impl\n */\nfunction roundAndFlushVectorPairToInterval(\n  x: number[],\n  y: number[],\n  op: VectorPairToIntervalOp\n): F32Interval {\n  assert(\n    x.every(e => !Number.isNaN(e)),\n    `flush not defined for NaN`\n  );\n  assert(\n    y.every(e => !Number.isNaN(e)),\n    `flush not defined for NaN`\n  );\n\n  const x_rounded: number[][] = x.map(correctlyRoundedF32);\n  const y_rounded: number[][] = y.map(correctlyRoundedF32);\n  const x_flushed: number[][] = x_rounded.map(addFlushedIfNeededF32);\n  const y_flushed: number[][] = y_rounded.map(addFlushedIfNeededF32);\n  const x_inputs = cartesianProduct<number>(...x_flushed);\n  const y_inputs = cartesianProduct<number>(...y_flushed);\n\n  const intervals = new Set<F32Interval>();\n  x_inputs.forEach(inner_x => {\n    y_inputs.forEach(inner_y => {\n      intervals.add(op.impl(inner_x, inner_y));\n    });\n  });\n  return F32Interval.span(...intervals);\n}\n\n/** Converts a vector to a vector of acceptance intervals using a specific\n * function\n *\n * This handles correctly rounding and flushing inputs as needed.\n * Duplicate inputs are pruned before invoking op.impl.\n *\n * @param x param to flush & round then invoke op.impl on\n * @param op operation defining the function being run\n * @returns a vector of spans for each outputs of op.impl\n */\nfunction roundAndFlushVectorToVector(x: number[], op: VectorToVectorOp): F32Vector {\n  assert(\n    x.every(e => !Number.isNaN(e)),\n    `flush not defined for NaN`\n  );\n\n  const x_rounded: number[][] = x.map(correctlyRoundedF32);\n  const x_flushed: number[][] = x_rounded.map(addFlushedIfNeededF32);\n  const x_inputs = cartesianProduct<number>(...x_flushed);\n\n  const interval_vectors = new Set<F32Vector>();\n  x_inputs.forEach(inner_x => {\n    interval_vectors.add(op.impl(inner_x));\n  });\n\n  return spanF32Vector(...interval_vectors);\n}\n\n/**\n * Converts a pair of vectors to a vector of acceptance intervals using a\n * specific function\n *\n * This handles correctly rounding and flushing inputs as needed.\n * Duplicate inputs are pruned before invoking op.impl.\n *\n * @param x first param to flush & round then invoke op.impl on\n * @param x second param to flush & round then invoke op.impl on\n * @param op operation defining the function being run\n * @returns a vector of spans for each output of op.impl\n */\nfunction roundAndFlushVectorPairToVector(\n  x: number[],\n  y: number[],\n  op: VectorPairToVectorOp\n): F32Vector {\n  assert(\n    x.every(e => !Number.isNaN(e)),\n    `flush not defined for NaN`\n  );\n  assert(\n    y.every(e => !Number.isNaN(e)),\n    `flush not defined for NaN`\n  );\n\n  const x_rounded: number[][] = x.map(correctlyRoundedF32);\n  const y_rounded: number[][] = y.map(correctlyRoundedF32);\n  const x_flushed: number[][] = x_rounded.map(addFlushedIfNeededF32);\n  const y_flushed: number[][] = y_rounded.map(addFlushedIfNeededF32);\n  const x_inputs = cartesianProduct<number>(...x_flushed);\n  const y_inputs = cartesianProduct<number>(...y_flushed);\n\n  const interval_vectors = new Set<F32Vector>();\n  x_inputs.forEach(inner_x => {\n    y_inputs.forEach(inner_y => {\n      interval_vectors.add(op.impl(inner_x, inner_y));\n    });\n  });\n\n  return spanF32Vector(...interval_vectors);\n}\n\n/** Calculate the acceptance interval for a unary function over an interval\n *\n * If the interval is actually a point, this just decays to\n * roundAndFlushPointToInterval.\n *\n * The provided domain interval may be adjusted if the operation defines an\n * extrema function.\n *\n * @param x input domain interval\n * @param op operation defining the function being run\n * @returns a span over all of the outputs of op.impl\n */\nfunction runPointToIntervalOp(x: F32Interval, op: PointToIntervalOp): F32Interval {\n  if (!x.isFinite()) {\n    return F32Interval.any();\n  }\n\n  if (op.extrema !== undefined) {\n    x = op.extrema(x);\n  }\n\n  const result = F32Interval.span(...x.bounds().map(b => roundAndFlushPointToInterval(b, op)));\n  return result.isFinite() ? result : F32Interval.any();\n}\n\n/** Calculate the acceptance interval for a binary function over an interval\n *\n * The provided domain intervals may be adjusted if the operation defines an\n * extrema function.\n *\n * @param x first input domain interval\n * @param y second input domain interval\n * @param op operation defining the function being run\n * @returns a span over all of the outputs of op.impl\n */\nfunction runBinaryToIntervalOp(\n  x: F32Interval,\n  y: F32Interval,\n  op: BinaryToIntervalOp\n): F32Interval {\n  if (!x.isFinite() || !y.isFinite()) {\n    return F32Interval.any();\n  }\n\n  if (op.extrema !== undefined) {\n    [x, y] = op.extrema(x, y);\n  }\n\n  const outputs = new Set<F32Interval>();\n  x.bounds().forEach(inner_x => {\n    y.bounds().forEach(inner_y => {\n      outputs.add(roundAndFlushBinaryToInterval(inner_x, inner_y, op));\n    });\n  });\n\n  const result = F32Interval.span(...outputs);\n  return result.isFinite() ? result : F32Interval.any();\n}\n\n/** Calculate the acceptance interval for a ternary function over an interval\n *\n * @param x first input domain interval\n * @param y second input domain interval\n * @param z third input domain interval\n * @param op operation defining the function being run\n * @returns a span over all of the outputs of op.impl\n */\nfunction runTernaryToIntervalOp(\n  x: F32Interval,\n  y: F32Interval,\n  z: F32Interval,\n  op: TernaryToIntervalOp\n): F32Interval {\n  if (!x.isFinite() || !y.isFinite() || !z.isFinite()) {\n    return F32Interval.any();\n  }\n\n  const outputs = new Set<F32Interval>();\n  x.bounds().forEach(inner_x => {\n    y.bounds().forEach(inner_y => {\n      z.bounds().forEach(inner_z => {\n        outputs.add(roundAndFlushTernaryToInterval(inner_x, inner_y, inner_z, op));\n      });\n    });\n  });\n\n  const result = F32Interval.span(...outputs);\n  return result.isFinite() ? result : F32Interval.any();\n}\n\n/** Calculate the acceptance interval for a vector function over given intervals\n *\n * @param x input domain intervals vector\n * @param op operation defining the function being run\n * @returns a span over all of the outputs of op.impl\n */\nfunction runVectorToIntervalOp(x: F32Vector, op: VectorToIntervalOp): F32Interval {\n  if (x.some(e => !e.isFinite())) {\n    return F32Interval.any();\n  }\n\n  const x_values = cartesianProduct<number>(...x.map(e => e.bounds()));\n\n  const outputs = new Set<F32Interval>();\n  x_values.forEach(inner_x => {\n    outputs.add(roundAndFlushVectorToInterval(inner_x, op));\n  });\n\n  const result = F32Interval.span(...outputs);\n  return result.isFinite() ? result : F32Interval.any();\n}\n\n/** Calculate the acceptance interval for a vector pair function over given intervals\n *\n * @param x first input domain intervals vector\n * @param y second input domain intervals vector\n * @param op operation defining the function being run\n * @returns a span over all of the outputs of op.impl\n */\nfunction runVectorPairToIntervalOp(\n  x: F32Vector,\n  y: F32Vector,\n  op: VectorPairToIntervalOp\n): F32Interval {\n  if (x.some(e => !e.isFinite()) || y.some(e => !e.isFinite())) {\n    return F32Interval.any();\n  }\n\n  const x_values = cartesianProduct<number>(...x.map(e => e.bounds()));\n  const y_values = cartesianProduct<number>(...y.map(e => e.bounds()));\n\n  const outputs = new Set<F32Interval>();\n  x_values.forEach(inner_x => {\n    y_values.forEach(inner_y => {\n      outputs.add(roundAndFlushVectorPairToInterval(inner_x, inner_y, op));\n    });\n  });\n\n  const result = F32Interval.span(...outputs);\n  return result.isFinite() ? result : F32Interval.any();\n}\n\n/** Calculate the vector of acceptance intervals for a pair of vector function over\n * given intervals\n *\n * @param x input domain intervals vector\n * @param x input domain intervals vector\n * @param op operation defining the function being run\n * @returns a vector of spans over all of the outputs of op.impl\n */\nfunction runVectorToVectorOp(x: F32Vector, op: VectorToVectorOp): F32Vector {\n  if (x.some(e => !e.isFinite())) {\n    return kAnyVector[x.length];\n  }\n\n  const x_values = cartesianProduct<number>(...x.map(e => e.bounds()));\n\n  const outputs = new Set<F32Vector>();\n  x_values.forEach(inner_x => {\n    outputs.add(roundAndFlushVectorToVector(inner_x, op));\n  });\n\n  const result = spanF32Vector(...outputs);\n  return result.every(e => e.isFinite()) ? result : toF32Vector(x.map(_ => F32Interval.any()));\n}\n\n/**\n * Calculate the vector of acceptance intervals by running a scalar operation\n * component-wise over a vector.\n *\n * This is used for situations where a component-wise operation, like vector\n * negation, is needed as part of a inherited accuracy, but the top-level\n * operation test don't require an explicit vector definition of the function,\n * due to the generated vectorize tests being sufficient.\n *\n * @param x input domain intervals vector\n * @param op scalar operation to be run component-wise\n * @returns a vector of intervals with the outputs of op.impl\n */\nfunction runPointToIntervalOpComponentWise(x: F32Vector, op: PointToIntervalOp): F32Vector {\n  return toF32Vector(\n    x.map(i => {\n      return runPointToIntervalOp(i, op);\n    })\n  );\n}\n\n/** Calculate the vector of acceptance intervals for a vector function over\n * given intervals\n *\n * @param x first input domain intervals vector\n * @param y second input domain intervals vector\n * @param op operation defining the function being run\n * @returns a vector of spans over all of the outputs of op.impl\n */\nfunction runVectorPairToVectorOp(x: F32Vector, y: F32Vector, op: VectorPairToVectorOp): F32Vector {\n  if (x.some(e => !e.isFinite()) || y.some(e => !e.isFinite())) {\n    return kAnyVector[x.length];\n  }\n\n  const x_values = cartesianProduct<number>(...x.map(e => e.bounds()));\n  const y_values = cartesianProduct<number>(...y.map(e => e.bounds()));\n\n  const outputs = new Set<F32Vector>();\n  x_values.forEach(inner_x => {\n    y_values.forEach(inner_y => {\n      outputs.add(roundAndFlushVectorPairToVector(inner_x, inner_y, op));\n    });\n  });\n\n  const result = spanF32Vector(...outputs);\n  return result.every(e => e.isFinite()) ? result : toF32Vector(x.map(_ => F32Interval.any()));\n}\n\n/**\n * Calculate the vector of acceptance intervals by running a scalar operation\n * component-wise over a pair vectors.\n *\n * This is used for situations where a component-wise operation, like vector\n * subtraction, is needed as part of a inherited accuracy, but the top-level\n * operation test don't require an explicit vector definition of the function,\n * due to the generated vectorize tests being sufficient.\n *\n * @param x first input domain intervals vector\n * @param y second input domain intervals vector\n * @param op scalar operation to be run component-wise\n * @returns a vector of intervals with the outputs of op.impl\n */\nfunction runBinaryToIntervalOpComponentWise(\n  x: F32Vector,\n  y: F32Vector,\n  op: BinaryToIntervalOp\n): F32Vector {\n  assert(\n    x.length === y.length,\n    `runBinaryToIntervalOpComponentWise requires vectors of the same length`\n  );\n  return toF32Vector(\n    x.map((i, idx) => {\n      return runBinaryToIntervalOp(i, y[idx], op);\n    })\n  );\n}\n\n/** Defines a PointToIntervalOp for an interval of the correctly rounded values around the point */\nconst CorrectlyRoundedIntervalOp: PointToIntervalOp = {\n  impl: (n: number) => {\n    assert(!Number.isNaN(n), `absolute not defined for NaN`);\n    return toF32Interval(n);\n  },\n};\n\n/** @returns an interval of the correctly rounded values around the point */\nexport function correctlyRoundedInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), CorrectlyRoundedIntervalOp);\n}\n\n/** @returns a PointToIntervalOp for [n - error_range, n + error_range] */\nfunction AbsoluteErrorIntervalOp(error_range: number): PointToIntervalOp {\n  const op: PointToIntervalOp = {\n    impl: (_: number) => {\n      return F32Interval.any();\n    },\n  };\n\n  if (isFiniteF32(error_range)) {\n    op.impl = (n: number) => {\n      assert(!Number.isNaN(n), `absolute error not defined for NaN`);\n      return toF32Interval([n - error_range, n + error_range]);\n    };\n  }\n\n  return op;\n}\n\n/** @returns an interval of the absolute error around the point */\nexport function absoluteErrorInterval(n: number, error_range: number): F32Interval {\n  error_range = Math.abs(error_range);\n  return runPointToIntervalOp(toF32Interval(n), AbsoluteErrorIntervalOp(error_range));\n}\n\n/** @returns a PointToIntervalOp for [n - numULP * ULP(n), n + numULP * ULP(n)] */\nfunction ULPIntervalOp(numULP: number): PointToIntervalOp {\n  const op: PointToIntervalOp = {\n    impl: (_: number) => {\n      return F32Interval.any();\n    },\n  };\n\n  if (isFiniteF32(numULP)) {\n    op.impl = (n: number) => {\n      assert(!Number.isNaN(n), `ULP error not defined for NaN`);\n\n      const ulp = oneULP(n);\n      const begin = n - numULP * ulp;\n      const end = n + numULP * ulp;\n\n      return toF32Interval([\n        Math.min(begin, flushSubnormalNumberF32(begin)),\n        Math.max(end, flushSubnormalNumberF32(end)),\n      ]);\n    };\n  }\n\n  return op;\n}\n\n/** @returns an interval of N * ULP around the point */\nexport function ulpInterval(n: number, numULP: number): F32Interval {\n  numULP = Math.abs(numULP);\n  return runPointToIntervalOp(toF32Interval(n), ULPIntervalOp(numULP));\n}\n\nconst AbsIntervalOp: PointToIntervalOp = {\n  impl: (n: number) => {\n    return correctlyRoundedInterval(Math.abs(n));\n  },\n};\n\n/** Calculate an acceptance interval for abs(n) */\nexport function absInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), AbsIntervalOp);\n}\n\nconst AcosIntervalOp: PointToIntervalOp = {\n  impl: limitPointToIntervalDomain(toF32Interval([-1.0, 1.0]), (n: number) => {\n    // acos(n) = atan2(sqrt(1.0 - n * n), n)\n    const y = sqrtInterval(subtractionInterval(1, multiplicationInterval(n, n)));\n    return atan2Interval(y, n);\n  }),\n};\n\n/** Calculate an acceptance interval for acos(n) */\nexport function acosInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), AcosIntervalOp);\n}\n\n/** All acceptance interval functions for acosh(x) */\nexport const acoshIntervals: PointToInterval[] = [acoshAlternativeInterval, acoshPrimaryInterval];\n\nconst AcoshAlternativeIntervalOp: PointToIntervalOp = {\n  impl: (x: number): F32Interval => {\n    // acosh(x) = log(x + sqrt((x + 1.0f) * (x - 1.0)))\n    const inner_value = multiplicationInterval(\n      additionInterval(x, 1.0),\n      subtractionInterval(x, 1.0)\n    );\n    const sqrt_value = sqrtInterval(inner_value);\n    return logInterval(additionInterval(x, sqrt_value));\n  },\n};\n\n/** Calculate an acceptance interval of acosh(x) using log(x + sqrt((x + 1.0f) * (x - 1.0))) */\nexport function acoshAlternativeInterval(x: number | F32Interval): F32Interval {\n  return runPointToIntervalOp(toF32Interval(x), AcoshAlternativeIntervalOp);\n}\n\nconst AcoshPrimaryIntervalOp: PointToIntervalOp = {\n  impl: (x: number): F32Interval => {\n    // acosh(x) = log(x + sqrt(x * x - 1.0))\n    const inner_value = subtractionInterval(multiplicationInterval(x, x), 1.0);\n    const sqrt_value = sqrtInterval(inner_value);\n    return logInterval(additionInterval(x, sqrt_value));\n  },\n};\n\n/** Calculate an acceptance interval of acosh(x) using log(x + sqrt(x * x - 1.0)) */\nexport function acoshPrimaryInterval(x: number | F32Interval): F32Interval {\n  return runPointToIntervalOp(toF32Interval(x), AcoshPrimaryIntervalOp);\n}\n\nconst AdditionIntervalOp: BinaryToIntervalOp = {\n  impl: (x: number, y: number): F32Interval => {\n    return correctlyRoundedInterval(x + y);\n  },\n};\n\n/** Calculate an acceptance interval of x + y */\nexport function additionInterval(x: number | F32Interval, y: number | F32Interval): F32Interval {\n  return runBinaryToIntervalOp(toF32Interval(x), toF32Interval(y), AdditionIntervalOp);\n}\n\nconst AsinIntervalOp: PointToIntervalOp = {\n  impl: limitPointToIntervalDomain(toF32Interval([-1.0, 1.0]), (n: number) => {\n    // asin(n) = atan2(n, sqrt(1.0 - n * n))\n    const x = sqrtInterval(subtractionInterval(1, multiplicationInterval(n, n)));\n    return atan2Interval(n, x);\n  }),\n};\n\n/** Calculate an acceptance interval for asin(n) */\nexport function asinInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), AsinIntervalOp);\n}\n\nconst AsinhIntervalOp: PointToIntervalOp = {\n  impl: (x: number): F32Interval => {\n    // asinh(x) = log(x + sqrt(x * x + 1.0))\n    const inner_value = additionInterval(multiplicationInterval(x, x), 1.0);\n    const sqrt_value = sqrtInterval(inner_value);\n    return logInterval(additionInterval(x, sqrt_value));\n  },\n};\n\n/** Calculate an acceptance interval of asinh(x) */\nexport function asinhInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), AsinhIntervalOp);\n}\n\nconst AtanIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return ulpInterval(Math.atan(n), 4096);\n  },\n};\n\n/** Calculate an acceptance interval of atan(x) */\nexport function atanInterval(n: number | F32Interval): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), AtanIntervalOp);\n}\n\nconst Atan2IntervalOp: BinaryToIntervalOp = {\n  impl: (y: number, x: number): F32Interval => {\n    // y/x is not defined meaningfully here\n    if (x === 0) {\n      return F32Interval.any();\n    }\n\n    // atan2's accuracy is only defined if y is normal\n    if (isSubnormalNumberF32(y)) {\n      return F32Interval.any();\n    }\n\n    const atan_yx = atanInterval(divisionInterval(y, x));\n    // x > 0, atan(y/x)\n    if (x > 0) {\n      return atan_yx;\n    }\n\n    // x < 0, y > 0, atan(y/x) + π\n    if (y > 0) {\n      return additionInterval(atan_yx, kValue.f32.positive.pi.whole);\n    }\n\n    // x < 0, y < 0, atan(y/x) - π\n    return subtractionInterval(atan_yx, kValue.f32.positive.pi.whole);\n  },\n  extrema: (y: F32Interval, x: F32Interval): [F32Interval, F32Interval] => {\n    // There is discontinuity + undefined behaviour at y/x = 0 that will dominate the accuracy\n    if (y.contains(0)) {\n      if (x.contains(0)) {\n        return [toF32Interval(0), toF32Interval(0)];\n      }\n      return [toF32Interval(0), x];\n    }\n    return [y, x];\n  },\n};\n\n/** Calculate an acceptance interval of atan2(y, x) */\nexport function atan2Interval(y: number | F32Interval, x: number | F32Interval): F32Interval {\n  return runBinaryToIntervalOp(toF32Interval(y), toF32Interval(x), Atan2IntervalOp);\n}\n\nconst AtanhIntervalOp: PointToIntervalOp = {\n  impl: (n: number) => {\n    // atanh(x) = log((1.0 + x) / (1.0 - x)) * 0.5\n    const numerator = additionInterval(1.0, n);\n    const denominator = subtractionInterval(1.0, n);\n    const log_interval = logInterval(divisionInterval(numerator, denominator));\n    return multiplicationInterval(log_interval, 0.5);\n  },\n};\n\n/** Calculate an acceptance interval of atanh(x) */\nexport function atanhInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), AtanhIntervalOp);\n}\n\nconst CeilIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return correctlyRoundedInterval(Math.ceil(n));\n  },\n};\n\n/** Calculate an acceptance interval of ceil(x) */\nexport function ceilInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), CeilIntervalOp);\n}\n\nconst ClampMedianIntervalOp: TernaryToIntervalOp = {\n  impl: (x: number, y: number, z: number): F32Interval => {\n    return correctlyRoundedInterval(\n      // Default sort is string sort, so have to implement numeric comparison.\n      // Cannot use the b-a one liner, because that assumes no infinities.\n      [x, y, z].sort((a, b) => {\n        if (a < b) {\n          return -1;\n        }\n        if (a > b) {\n          return 1;\n        }\n        return 0;\n      })[1]\n    );\n  },\n};\n\n/** All acceptance interval functions for clamp(x, y, z) */\nexport const clampIntervals: TernaryToInterval[] = [clampMinMaxInterval, clampMedianInterval];\n\n/** Calculate an acceptance interval of clamp(x, y, z) via median(x, y, z) */\nexport function clampMedianInterval(\n  x: number | F32Interval,\n  y: number | F32Interval,\n  z: number | F32Interval\n): F32Interval {\n  return runTernaryToIntervalOp(\n    toF32Interval(x),\n    toF32Interval(y),\n    toF32Interval(z),\n    ClampMedianIntervalOp\n  );\n}\n\nconst ClampMinMaxIntervalOp: TernaryToIntervalOp = {\n  impl: (x: number, low: number, high: number): F32Interval => {\n    return correctlyRoundedInterval(Math.min(Math.max(x, low), high));\n  },\n};\n\n/** Calculate an acceptance interval of clamp(x, high, low) via min(max(x, low), high) */\nexport function clampMinMaxInterval(\n  x: number | F32Interval,\n  low: number | F32Interval,\n  high: number | F32Interval\n): F32Interval {\n  return runTernaryToIntervalOp(\n    toF32Interval(x),\n    toF32Interval(low),\n    toF32Interval(high),\n    ClampMinMaxIntervalOp\n  );\n}\n\nconst CosIntervalOp: PointToIntervalOp = {\n  impl: limitPointToIntervalDomain(\n    kNegPiToPiInterval,\n    (n: number): F32Interval => {\n      return absoluteErrorInterval(Math.cos(n), 2 ** -11);\n    }\n  ),\n};\n\n/** Calculate an acceptance interval of cos(x) */\nexport function cosInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), CosIntervalOp);\n}\n\nconst CoshIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    // cosh(x) = (exp(x) + exp(-x)) * 0.5\n    const minus_n = negationInterval(n);\n    return multiplicationInterval(additionInterval(expInterval(n), expInterval(minus_n)), 0.5);\n  },\n};\n\n/** Calculate an acceptance interval of cosh(x) */\nexport function coshInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), CoshIntervalOp);\n}\n\nconst CrossIntervalOp: VectorPairToVectorOp = {\n  impl: (x: number[], y: number[]): F32Vector => {\n    assert(x.length === 3, `CrossIntervalOp received x with ${x.length} instead of 3`);\n    assert(y.length === 3, `CrossIntervalOp received y with ${y.length} instead of 3`);\n\n    // cross(x, y) = r, where\n    //   r[0] = x[1] * y[2] - x[2] * y[1]\n    //   r[1] = x[2] * y[0] - x[0] * y[2]\n    //   r[2] = x[0] * y[1] - x[1] * y[0]\n\n    const r0 = subtractionInterval(\n      multiplicationInterval(x[1], y[2]),\n      multiplicationInterval(x[2], y[1])\n    );\n    const r1 = subtractionInterval(\n      multiplicationInterval(x[2], y[0]),\n      multiplicationInterval(x[0], y[2])\n    );\n    const r2 = subtractionInterval(\n      multiplicationInterval(x[0], y[1]),\n      multiplicationInterval(x[1], y[0])\n    );\n    return [r0, r1, r2];\n  },\n};\n\nexport function crossInterval(x: number[], y: number[]): F32Vector {\n  assert(x.length === 3, `Cross is only defined for vec3`);\n  assert(y.length === 3, `Cross is only defined for vec3`);\n  return runVectorPairToVectorOp(toF32Vector(x), toF32Vector(y), CrossIntervalOp);\n}\n\nconst DegreesIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return multiplicationInterval(n, 57.295779513082322865);\n  },\n};\n\n/** Calculate an acceptance interval of degrees(x) */\nexport function degreesInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), DegreesIntervalOp);\n}\n\nconst DistanceIntervalScalarOp: BinaryToIntervalOp = {\n  impl: (x: number, y: number): F32Interval => {\n    return lengthInterval(subtractionInterval(x, y));\n  },\n};\n\nconst DistanceIntervalVectorOp: VectorPairToIntervalOp = {\n  impl: (x: number[], y: number[]): F32Interval => {\n    return lengthInterval(\n      runBinaryToIntervalOpComponentWise(toF32Vector(x), toF32Vector(y), SubtractionIntervalOp)\n    );\n  },\n};\n\n/** Calculate an acceptance interval of distance(x, y) */\nexport function distanceInterval(x: number | number[], y: number | number[]): F32Interval {\n  if (x instanceof Array && y instanceof Array) {\n    assert(\n      x.length === y.length,\n      `distanceInterval requires both params to have the same number of elements`\n    );\n    return runVectorPairToIntervalOp(toF32Vector(x), toF32Vector(y), DistanceIntervalVectorOp);\n  } else if (!(x instanceof Array) && !(y instanceof Array)) {\n    return runBinaryToIntervalOp(toF32Interval(x), toF32Interval(y), DistanceIntervalScalarOp);\n  }\n  unreachable(\n    `distanceInterval requires both params to both the same type, either scalars or vectors`\n  );\n}\n\nconst DivisionIntervalOp: BinaryToIntervalOp = {\n  impl: limitBinaryToIntervalDomain(\n    {\n      x: toF32Interval([kValue.f32.negative.min, kValue.f32.positive.max]),\n      y: [toF32Interval([-(2 ** 126), -(2 ** -126)]), toF32Interval([2 ** -126, 2 ** 126])],\n    },\n    (x: number, y: number): F32Interval => {\n      if (y === 0) {\n        return F32Interval.any();\n      }\n      return ulpInterval(x / y, 2.5);\n    }\n  ),\n  extrema: (x: F32Interval, y: F32Interval): [F32Interval, F32Interval] => {\n    // division has a discontinuity at y = 0.\n    if (y.contains(0)) {\n      y = toF32Interval(0);\n    }\n    return [x, y];\n  },\n};\n\n/** Calculate an acceptance interval of x / y */\nexport function divisionInterval(x: number | F32Interval, y: number | F32Interval): F32Interval {\n  return runBinaryToIntervalOp(toF32Interval(x), toF32Interval(y), DivisionIntervalOp);\n}\n\nconst DotIntervalOp: VectorPairToIntervalOp = {\n  impl: (x: number[], y: number[]): F32Interval => {\n    // dot(x, y) = sum of x[i] * y[i]\n    const multiplications = runBinaryToIntervalOpComponentWise(\n      toF32Vector(x),\n      toF32Vector(y),\n      MultiplicationIntervalOp\n    );\n    return multiplications.reduce((previous, current) => additionInterval(previous, current));\n  },\n};\n\nexport function dotInterval(x: number[], y: number[]): F32Interval {\n  assert(x.length === y.length, `dot not defined for vectors with different lengths`);\n  return runVectorPairToIntervalOp(toF32Vector(x), toF32Vector(y), DotIntervalOp);\n}\n\nconst ExpIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return ulpInterval(Math.exp(n), 3 + 2 * Math.abs(n));\n  },\n};\n\n/** Calculate an acceptance interval for exp(x) */\nexport function expInterval(x: number | F32Interval): F32Interval {\n  return runPointToIntervalOp(toF32Interval(x), ExpIntervalOp);\n}\n\nconst Exp2IntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return ulpInterval(Math.pow(2, n), 3 + 2 * Math.abs(n));\n  },\n};\n\n/** Calculate an acceptance interval for exp2(x) */\nexport function exp2Interval(x: number | F32Interval): F32Interval {\n  return runPointToIntervalOp(toF32Interval(x), Exp2IntervalOp);\n}\n\n/**\n * Calculate the acceptance intervals for faceForward(x, y, z)\n *\n * faceForward(x, y, z) = select(-x, x, dot(z, y) < 0.0)\n *\n * This builtin selects from two discrete results (delta rounding/flushing), so\n * the majority of the framework code is not appropriate, since the framework\n * attempts to span results.\n *\n * Thus a bespoke implementation is used instead of\n * defining a Op and running that through the framework.\n */\nexport function faceForwardIntervals(\n  x: number[],\n  y: number[],\n  z: number[]\n): (F32Vector | undefined)[] {\n  const x_vec = toF32Vector(x);\n  // Running vector through runPointToIntervalOpComponentWise to make sure that flushing/rounding is handled, since\n  // toF32Vector does not perform those operations.\n  const positive_x = runPointToIntervalOpComponentWise(x_vec, { impl: toF32Interval });\n  const negative_x = runPointToIntervalOpComponentWise(x_vec, NegationIntervalOp);\n\n  const dot_interval = dotInterval(z, y);\n\n  const results: (F32Vector | undefined)[] = [];\n\n  if (!dot_interval.isFinite()) {\n    // dot calculation went out of bounds\n    // Inserting undefine in the result, so that the test running framework is aware\n    // of this potential OOB.\n    // For const-eval tests, it means that the test case should be skipped,\n    // since the shader will fail to compile.\n    // For non-const-eval the undefined should be stripped out of the possible\n    // results.\n\n    results.push(undefined);\n  }\n\n  // Because the result of dot can be an interval, it might span across 0, thus\n  // it is possible that both -x and x are valid responses.\n  if (dot_interval.begin < 0 || dot_interval.end < 0) {\n    results.push(positive_x);\n  }\n\n  if (dot_interval.begin >= 0 || dot_interval.end >= 0) {\n    results.push(negative_x);\n  }\n\n  assert(\n    results.length > 0 || results.every(r => r === undefined),\n    `faceForwardInterval selected neither positive x or negative x for the result, this shouldn't be possible`\n  );\n  return results;\n}\n\nconst FloorIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return correctlyRoundedInterval(Math.floor(n));\n  },\n};\n\n/** Calculate an acceptance interval of floor(x) */\nexport function floorInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), FloorIntervalOp);\n}\n\nconst FmaIntervalOp: TernaryToIntervalOp = {\n  impl: (x: number, y: number, z: number): F32Interval => {\n    return additionInterval(multiplicationInterval(x, y), z);\n  },\n};\n\n/** Calculate an acceptance interval for fma(x, y, z) */\nexport function fmaInterval(x: number, y: number, z: number): F32Interval {\n  return runTernaryToIntervalOp(\n    toF32Interval(x),\n    toF32Interval(y),\n    toF32Interval(z),\n    FmaIntervalOp\n  );\n}\n\nconst FractIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    // fract(x) = x - floor(x) is defined in the spec.\n    // For people coming from a non-graphics background this will cause some unintuitive results. For example,\n    // fract(-1.1) is not 0.1 or -0.1, but instead 0.9.\n    // This is how other shading languages operate and allows for a desirable wrap around in graphics programming.\n    const result = subtractionInterval(n, floorInterval(n));\n    if (result.contains(1)) {\n      // Very small negative numbers can lead to catastrophic cancellation, thus calculating a fract of 1.0, which is\n      // technically not a fractional part, so some implementations clamp the result to next nearest number.\n      return F32Interval.span(result, toF32Interval(kValue.f32.positive.less_than_one));\n    }\n    return result;\n  },\n};\n\n/** Calculate an acceptance interval of fract(x) */\nexport function fractInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), FractIntervalOp);\n}\n\nconst InverseSqrtIntervalOp: PointToIntervalOp = {\n  impl: limitPointToIntervalDomain(\n    kGreaterThanZeroInterval,\n    (n: number): F32Interval => {\n      return ulpInterval(1 / Math.sqrt(n), 2);\n    }\n  ),\n};\n\n/** Calculate an acceptance interval of inverseSqrt(x) */\nexport function inverseSqrtInterval(n: number | F32Interval): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), InverseSqrtIntervalOp);\n}\n\nconst LdexpIntervalOp: BinaryToIntervalOp = {\n  impl: limitBinaryToIntervalDomain(\n    // Implementing SPIR-V's more restrictive domain until\n    // https://github.com/gpuweb/gpuweb/issues/3134 is resolved\n    {\n      x: toF32Interval([kValue.f32.negative.min, kValue.f32.positive.max]),\n      y: [toF32Interval([-126, 128])],\n    },\n    (e1: number, e2: number): F32Interval => {\n      // Though the spec says the result of ldexp(e1, e2) = e1 * 2 ^ e2, the\n      // accuracy is listed as correctly rounded to the true value, so the\n      // inheritance framework does not need to be invoked to determine bounds.\n      // Instead the value at a higher precision is calculated and passed to\n      // correctlyRoundedInterval.\n      const result = e1 * 2 ** e2;\n      if (Number.isNaN(result)) {\n        // Overflowed TS's number type, so definitely out of bounds for f32\n        return F32Interval.any();\n      }\n      return correctlyRoundedInterval(result);\n    }\n  ),\n};\n\n/** Calculate an acceptance interval of ldexp(e1, e2) */\nexport function ldexpInterval(e1: number, e2: number): F32Interval {\n  return roundAndFlushBinaryToInterval(e1, e2, LdexpIntervalOp);\n}\n\nconst LengthIntervalScalarOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return sqrtInterval(multiplicationInterval(n, n));\n  },\n};\n\nconst LengthIntervalVectorOp: VectorToIntervalOp = {\n  impl: (n: number[]): F32Interval => {\n    return sqrtInterval(dotInterval(n, n));\n  },\n};\n\n/** Calculate an acceptance interval of length(x) */\nexport function lengthInterval(n: number | F32Interval | number[] | F32Vector): F32Interval {\n  if (n instanceof Array) {\n    return runVectorToIntervalOp(toF32Vector(n), LengthIntervalVectorOp);\n  } else {\n    return runPointToIntervalOp(toF32Interval(n), LengthIntervalScalarOp);\n  }\n}\n\nconst LogIntervalOp: PointToIntervalOp = {\n  impl: limitPointToIntervalDomain(\n    kGreaterThanZeroInterval,\n    (n: number): F32Interval => {\n      if (n >= 0.5 && n <= 2.0) {\n        return absoluteErrorInterval(Math.log(n), 2 ** -21);\n      }\n      return ulpInterval(Math.log(n), 3);\n    }\n  ),\n};\n\n/** Calculate an acceptance interval of log(x) */\nexport function logInterval(x: number | F32Interval): F32Interval {\n  return runPointToIntervalOp(toF32Interval(x), LogIntervalOp);\n}\n\nconst Log2IntervalOp: PointToIntervalOp = {\n  impl: limitPointToIntervalDomain(\n    kGreaterThanZeroInterval,\n    (n: number): F32Interval => {\n      if (n >= 0.5 && n <= 2.0) {\n        return absoluteErrorInterval(Math.log2(n), 2 ** -21);\n      }\n      return ulpInterval(Math.log2(n), 3);\n    }\n  ),\n};\n\n/** Calculate an acceptance interval of log2(x) */\nexport function log2Interval(x: number | F32Interval): F32Interval {\n  return runPointToIntervalOp(toF32Interval(x), Log2IntervalOp);\n}\n\nconst MaxIntervalOp: BinaryToIntervalOp = {\n  impl: (x: number, y: number): F32Interval => {\n    return correctlyRoundedInterval(Math.max(x, y));\n  },\n};\n\n/** Calculate an acceptance interval of max(x, y) */\nexport function maxInterval(x: number | F32Interval, y: number | F32Interval): F32Interval {\n  return runBinaryToIntervalOp(toF32Interval(x), toF32Interval(y), MaxIntervalOp);\n}\n\nconst MinIntervalOp: BinaryToIntervalOp = {\n  impl: (x: number, y: number): F32Interval => {\n    return correctlyRoundedInterval(Math.min(x, y));\n  },\n};\n\n/** Calculate an acceptance interval of min(x, y) */\nexport function minInterval(x: number | F32Interval, y: number | F32Interval): F32Interval {\n  return runBinaryToIntervalOp(toF32Interval(x), toF32Interval(y), MinIntervalOp);\n}\n\nconst MixImpreciseIntervalOp: TernaryToIntervalOp = {\n  impl: (x: number, y: number, z: number): F32Interval => {\n    // x + (y - x) * z =\n    //  x + t, where t = (y - x) * z\n    const t = multiplicationInterval(subtractionInterval(y, x), z);\n    return additionInterval(x, t);\n  },\n};\n\n/** All acceptance interval functions for mix(x, y, z) */\nexport const mixIntervals: TernaryToInterval[] = [mixImpreciseInterval, mixPreciseInterval];\n\n/** Calculate an acceptance interval of mix(x, y, z) using x + (y - x) * z */\nexport function mixImpreciseInterval(x: number, y: number, z: number): F32Interval {\n  return runTernaryToIntervalOp(\n    toF32Interval(x),\n    toF32Interval(y),\n    toF32Interval(z),\n    MixImpreciseIntervalOp\n  );\n}\n\nconst MixPreciseIntervalOp: TernaryToIntervalOp = {\n  impl: (x: number, y: number, z: number): F32Interval => {\n    // x * (1.0 - z) + y * z =\n    //   t + s, where t = x * (1.0 - z), s = y * z\n    const t = multiplicationInterval(x, subtractionInterval(1.0, z));\n    const s = multiplicationInterval(y, z);\n    return additionInterval(t, s);\n  },\n};\n\n/** Calculate an acceptance interval of mix(x, y, z) using x * (1.0 - z) + y * z */\nexport function mixPreciseInterval(x: number, y: number, z: number): F32Interval {\n  return runTernaryToIntervalOp(\n    toF32Interval(x),\n    toF32Interval(y),\n    toF32Interval(z),\n    MixPreciseIntervalOp\n  );\n}\n\n/** Calculate an acceptance interval of modf(x) */\nexport function modfInterval(n: number): { fract: F32Interval; whole: F32Interval } {\n  const fract = correctlyRoundedInterval(n % 1.0);\n  const whole = correctlyRoundedInterval(n - (n % 1.0));\n  return { fract, whole };\n}\n\nconst MultiplicationInnerOp = {\n  impl: (x: number, y: number): F32Interval => {\n    return correctlyRoundedInterval(x * y);\n  },\n};\n\nconst MultiplicationIntervalOp: BinaryToIntervalOp = {\n  impl: (x: number, y: number): F32Interval => {\n    return roundAndFlushBinaryToInterval(x, y, MultiplicationInnerOp);\n  },\n};\n\n/** Calculate an acceptance interval of x * y */\nexport function multiplicationInterval(\n  x: number | F32Interval,\n  y: number | F32Interval\n): F32Interval {\n  return runBinaryToIntervalOp(toF32Interval(x), toF32Interval(y), MultiplicationIntervalOp);\n}\n\nconst NegationIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return correctlyRoundedInterval(-n);\n  },\n};\n\n/** Calculate an acceptance interval of -x */\nexport function negationInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), NegationIntervalOp);\n}\n\nconst NormalizeIntervalOp: VectorToVectorOp = {\n  impl: (n: number[]): F32Vector => {\n    const length = lengthInterval(n);\n    return toF32Vector(n.map(e => divisionInterval(e, length)));\n  },\n};\n\n/** Calculate an acceptance interval of normalize(x) */\nexport function normalizeInterval(n: number[]): F32Vector {\n  return runVectorToVectorOp(toF32Vector(n), NormalizeIntervalOp);\n}\n\nconst PowIntervalOp: BinaryToIntervalOp = {\n  // pow(x, y) has no explicit domain restrictions, but inherits the x <= 0\n  // domain restriction from log2(x). Invoking log2Interval(x) in impl will\n  // enforce this, so there is no need to wrap the impl call here.\n  impl: (x: number, y: number): F32Interval => {\n    return exp2Interval(multiplicationInterval(y, log2Interval(x)));\n  },\n};\n\n/** Calculate an acceptance interval of pow(x, y) */\nexport function powInterval(x: number | F32Interval, y: number | F32Interval): F32Interval {\n  return runBinaryToIntervalOp(toF32Interval(x), toF32Interval(y), PowIntervalOp);\n}\n\n// Once a full implementation of F16Interval exists, the correctlyRounded for\n// that can potentially be used instead of having a bespoke operation\n// implementation.\nconst QuantizeToF16IntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    const rounded = correctlyRoundedF16(n);\n    const flushed = addFlushedIfNeededF16(rounded);\n    return F32Interval.span(...flushed.map(toF32Interval));\n  },\n};\n\n/** Calculate an acceptance interval of quanitizeToF16(x) */\nexport function quantizeToF16Interval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), QuantizeToF16IntervalOp);\n}\n\nconst RadiansIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return multiplicationInterval(n, 0.017453292519943295474);\n  },\n};\n\n/** Calculate an acceptance interval of radians(x) */\nexport function radiansInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), RadiansIntervalOp);\n}\n\nconst ReflectIntervalOp: VectorPairToVectorOp = {\n  impl: (x: number[], y: number[]): F32Vector => {\n    assert(\n      x.length === y.length,\n      `ReflectIntervalOp received x (${x}) and y (${y}) with different numbers of elements`\n    );\n\n    // reflect(x, y) = x - 2.0 * dot(x, y) * y\n    //               = x - t * y, t = 2.0 * dot(x, y)\n    // x = incident vector\n    // y = normal of reflecting surface\n    const t = multiplicationInterval(2.0, dotInterval(x, y));\n    const rhs = multiplyVectorByScalar(y, t);\n    return runBinaryToIntervalOpComponentWise(toF32Vector(x), rhs, SubtractionIntervalOp);\n  },\n};\n\n/** Calculate an acceptance interval of reflect(x, y) */\nexport function reflectInterval(x: number[], y: number[]): F32Vector {\n  assert(\n    x.length === y.length,\n    `reflect is only defined for vectors with the same number of elements`\n  );\n  return runVectorPairToVectorOp(toF32Vector(x), toF32Vector(y), ReflectIntervalOp);\n}\n\n/**\n * Calculate acceptance interval vectors of reflect(i, s, r)\n *\n * refract is a singular function in the sense that it is the only builtin that\n * takes in (F32Vector, F32Vector, F32) and returns F32Vector and is basically\n * defined in terms of other functions.\n *\n * Instead of implementing all of the framework code to integrate it with its\n * own operation type/etc, it instead has a bespoke implementation that is a\n * composition of other builtin functions that use the framework.\n */\nexport function refractInterval(i: number[], s: number[], r: number): F32Vector {\n  assert(\n    i.length === s.length,\n    `refract is only defined for vectors with the same number of elements`\n  );\n\n  const r_squared = multiplicationInterval(r, r);\n  const dot = dotInterval(s, i);\n  const dot_squared = multiplicationInterval(dot, dot);\n  const one_minus_dot_squared = subtractionInterval(1, dot_squared);\n  const k = subtractionInterval(1.0, multiplicationInterval(r_squared, one_minus_dot_squared));\n\n  if (k.containsZeroOrSubnormals()) {\n    // There is a discontinuity at k == 0, due to sqrt(k) being calculated, so exiting early\n    return kAnyVector[toF32Vector(i).length];\n  }\n\n  if (k.end < 0.0) {\n    // if k is negative, then the zero vector is the valid response\n    return kZeroVector[toF32Vector(i).length];\n  }\n\n  const dot_times_r = multiplicationInterval(dot, r);\n  const k_sqrt = sqrtInterval(k);\n  const t = additionInterval(dot_times_r, k_sqrt); // t = r * dot(i, s) + sqrt(k)\n\n  const result = runBinaryToIntervalOpComponentWise(\n    multiplyVectorByScalar(i, r),\n    multiplyVectorByScalar(s, t),\n    SubtractionIntervalOp\n  ); // (i * r) - (s * t)\n  return result;\n}\n\nconst RemainderIntervalOp: BinaryToIntervalOp = {\n  impl: (x: number, y: number): F32Interval => {\n    // x % y = x - y * trunc(x/y)\n    return subtractionInterval(x, multiplicationInterval(y, truncInterval(divisionInterval(x, y))));\n  },\n};\n\n/** Calculate an acceptance interval for x % y */\nexport function remainderInterval(x: number, y: number): F32Interval {\n  return runBinaryToIntervalOp(toF32Interval(x), toF32Interval(y), RemainderIntervalOp);\n}\n\nconst RoundIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    const k = Math.floor(n);\n    const diff_before = n - k;\n    const diff_after = k + 1 - n;\n    if (diff_before < diff_after) {\n      return correctlyRoundedInterval(k);\n    } else if (diff_before > diff_after) {\n      return correctlyRoundedInterval(k + 1);\n    }\n\n    // n is in the middle of two integers.\n    // The tie breaking rule is 'k if k is even, k + 1 if k is odd'\n    if (k % 2 === 0) {\n      return correctlyRoundedInterval(k);\n    }\n    return correctlyRoundedInterval(k + 1);\n  },\n};\n\n/** Calculate an acceptance interval of round(x) */\nexport function roundInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), RoundIntervalOp);\n}\n\n/**\n * Calculate an acceptance interval of saturate(n) as clamp(n, 0.0, 1.0)\n *\n * The definition of saturate is such that both possible implementations of\n * clamp will return the same value, so arbitrarily picking the minmax version\n * to use.\n */\nexport function saturateInterval(n: number): F32Interval {\n  return runTernaryToIntervalOp(\n    toF32Interval(n),\n    toF32Interval(0.0),\n    toF32Interval(1.0),\n    ClampMinMaxIntervalOp\n  );\n}\n\nconst SignIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    if (n > 0.0) {\n      return correctlyRoundedInterval(1.0);\n    }\n    if (n < 0.0) {\n      return correctlyRoundedInterval(-1.0);\n    }\n\n    return correctlyRoundedInterval(0.0);\n  },\n};\n\n/** Calculate an acceptance interval of sin(x) */\nexport function signInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), SignIntervalOp);\n}\n\nconst SinIntervalOp: PointToIntervalOp = {\n  impl: limitPointToIntervalDomain(\n    kNegPiToPiInterval,\n    (n: number): F32Interval => {\n      return absoluteErrorInterval(Math.sin(n), 2 ** -11);\n    }\n  ),\n};\n\n/** Calculate an acceptance interval of sin(x) */\nexport function sinInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), SinIntervalOp);\n}\n\nconst SinhIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    // sinh(x) = (exp(x) - exp(-x)) * 0.5\n    const minus_n = negationInterval(n);\n    return multiplicationInterval(subtractionInterval(expInterval(n), expInterval(minus_n)), 0.5);\n  },\n};\n\n/** Calculate an acceptance interval of sinh(x) */\nexport function sinhInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), SinhIntervalOp);\n}\n\nconst SmoothStepOp: TernaryToIntervalOp = {\n  impl: (low: number, high: number, x: number): F32Interval => {\n    // For clamp(foo, 0.0, 1.0) the different implementations of clamp provide\n    // the same value, so arbitrarily picking the minmax version to use.\n    // t = clamp((x - low) / (high - low), 0.0, 1.0)\n    // prettier-ignore\n    const t = clampMedianInterval(\n      divisionInterval(\n        subtractionInterval(x, low),\n        subtractionInterval(high, low)),\n      0.0,\n      1.0);\n    // Inherited from t * t * (3.0 - 2.0 * t)\n    // prettier-ignore\n    return multiplicationInterval(\n      t,\n      multiplicationInterval(t,\n        subtractionInterval(3.0,\n          multiplicationInterval(2.0, t))));\n  },\n};\n\n/** Calculate an acceptance interval of smoothStep(low, high, x) */\nexport function smoothStepInterval(low: number, high: number, x: number): F32Interval {\n  return runTernaryToIntervalOp(\n    toF32Interval(low),\n    toF32Interval(high),\n    toF32Interval(x),\n    SmoothStepOp\n  );\n}\n\nconst SqrtIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return divisionInterval(1.0, inverseSqrtInterval(n));\n  },\n};\n\n/** Calculate an acceptance interval of sqrt(x) */\nexport function sqrtInterval(n: number | F32Interval): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), SqrtIntervalOp);\n}\n\nconst StepIntervalOp: BinaryToIntervalOp = {\n  impl: (edge: number, x: number): F32Interval => {\n    if (edge <= x) {\n      return correctlyRoundedInterval(1.0);\n    }\n    return correctlyRoundedInterval(0.0);\n  },\n};\n\n/** Calculate an acceptance 'interval' for step(edge, x)\n *\n * step only returns two possible values, so its interval requires special\n * interpretation in CTS tests.\n * This interval will be one of four values: [0, 0], [0, 1], [1, 1] & [-∞, +∞].\n * [0, 0] and [1, 1] indicate that the correct answer in point they encapsulate.\n * [0, 1] should not be treated as a span, i.e. 0.1 is acceptable, but instead\n * indicate either 0.0 or 1.0 are acceptable answers.\n * [-∞, +∞] is treated as the any interval, since an undefined or infinite value was passed in.\n */\nexport function stepInterval(edge: number, x: number): F32Interval {\n  return runBinaryToIntervalOp(toF32Interval(edge), toF32Interval(x), StepIntervalOp);\n}\n\nconst SubtractionIntervalOp: BinaryToIntervalOp = {\n  impl: (x: number, y: number): F32Interval => {\n    return correctlyRoundedInterval(x - y);\n  },\n};\n\n/** Calculate an acceptance interval of x - y */\nexport function subtractionInterval(x: number | F32Interval, y: number | F32Interval): F32Interval {\n  return runBinaryToIntervalOp(toF32Interval(x), toF32Interval(y), SubtractionIntervalOp);\n}\n\nconst TanIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return divisionInterval(sinInterval(n), cosInterval(n));\n  },\n};\n\n/** Calculate an acceptance interval of tan(x) */\nexport function tanInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), TanIntervalOp);\n}\n\nconst TanhIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return divisionInterval(sinhInterval(n), coshInterval(n));\n  },\n};\n\n/** Calculate an acceptance interval of tanh(x) */\nexport function tanhInterval(n: number): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), TanhIntervalOp);\n}\n\nconst TruncIntervalOp: PointToIntervalOp = {\n  impl: (n: number): F32Interval => {\n    return correctlyRoundedInterval(Math.trunc(n));\n  },\n};\n\n/** Calculate an acceptance interval of trunc(x) */\nexport function truncInterval(n: number | F32Interval): F32Interval {\n  return runPointToIntervalOp(toF32Interval(n), TruncIntervalOp);\n}\n\n/**\n * Once-allocated ArrayBuffer/views to avoid overhead of allocation when converting between numeric formats\n *\n * unpackData* is shared between all of the unpack*Interval functions, so to avoid re-entrancy problems, they should\n * not call each other or themselves directly or indirectly.\n */\nconst unpackData = new ArrayBuffer(4);\nconst unpackDataU32 = new Uint32Array(unpackData);\nconst unpackDataU16 = new Uint16Array(unpackData);\nconst unpackDataU8 = new Uint8Array(unpackData);\nconst unpackDataI16 = new Int16Array(unpackData);\nconst unpackDataI8 = new Int8Array(unpackData);\nconst unpackDataF16 = new Float16Array(unpackData);\n\n/** Calculate an acceptance interval vector for unpack2x16float(x) */\nexport function unpack2x16floatInterval(n: number): F32Vector {\n  assert(\n    n >= kValue.u32.min && n <= kValue.u32.max,\n    'unpack2x16floatInterval only accepts values on the bounds of u32'\n  );\n  unpackDataU32[0] = n;\n  if (unpackDataF16.some(f => !isFiniteF16(f))) {\n    return [F32Interval.any(), F32Interval.any()];\n  }\n\n  const result: F32Vector = [\n    quantizeToF16Interval(unpackDataF16[0]),\n    quantizeToF16Interval(unpackDataF16[1]),\n  ];\n\n  if (result.some(r => !r.isFinite())) {\n    return [F32Interval.any(), F32Interval.any()];\n  }\n  return result;\n}\n\nconst Unpack2x16snormIntervalOp = (n: number): F32Interval => {\n  return maxInterval(divisionInterval(n, 32767), -1);\n};\n\n/** Calculate an acceptance interval vector for unpack2x16snorm(x) */\nexport function unpack2x16snormInterval(n: number): F32Vector {\n  assert(\n    n >= kValue.u32.min && n <= kValue.u32.max,\n    'unpack2x16snormInterval only accepts values on the bounds of u32'\n  );\n  unpackDataU32[0] = n;\n  return [Unpack2x16snormIntervalOp(unpackDataI16[0]), Unpack2x16snormIntervalOp(unpackDataI16[1])];\n}\n\nconst Unpack2x16unormIntervalOp = (n: number): F32Interval => {\n  return divisionInterval(n, 65535);\n};\n\n/** Calculate an acceptance interval vector for unpack2x16unorm(x) */\nexport function unpack2x16unormInterval(n: number): F32Vector {\n  assert(\n    n >= kValue.u32.min && n <= kValue.u32.max,\n    'unpack2x16unormInterval only accepts values on the bounds of u32'\n  );\n  unpackDataU32[0] = n;\n  return [Unpack2x16unormIntervalOp(unpackDataU16[0]), Unpack2x16unormIntervalOp(unpackDataU16[1])];\n}\n\nconst Unpack4x8snormIntervalOp = (n: number): F32Interval => {\n  return maxInterval(divisionInterval(n, 127), -1);\n};\n\n/** Calculate an acceptance interval vector for unpack4x8snorm(x) */\nexport function unpack4x8snormInterval(n: number): F32Vector {\n  assert(\n    n >= kValue.u32.min && n <= kValue.u32.max,\n    'unpack4x8snormInterval only accepts values on the bounds of u32'\n  );\n  unpackDataU32[0] = n;\n  return [\n    Unpack4x8snormIntervalOp(unpackDataI8[0]),\n    Unpack4x8snormIntervalOp(unpackDataI8[1]),\n    Unpack4x8snormIntervalOp(unpackDataI8[2]),\n    Unpack4x8snormIntervalOp(unpackDataI8[3]),\n  ];\n}\n\nconst Unpack4x8unormIntervalOp = (n: number): F32Interval => {\n  return divisionInterval(n, 255);\n};\n\n/** Calculate an acceptance interval vector for unpack4x8unorm(x) */\nexport function unpack4x8unormInterval(n: number): F32Vector {\n  assert(\n    n >= kValue.u32.min && n <= kValue.u32.max,\n    'unpack4x8unormInterval only accepts values on the bounds of u32'\n  );\n  unpackDataU32[0] = n;\n  return [\n    Unpack4x8unormIntervalOp(unpackDataU8[0]),\n    Unpack4x8unormIntervalOp(unpackDataU8[1]),\n    Unpack4x8unormIntervalOp(unpackDataU8[2]),\n    Unpack4x8unormIntervalOp(unpackDataU8[3]),\n  ];\n}\n"],"mappings":"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"}