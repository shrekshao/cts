{"version":3,"sources":["../../../src/webgpu/util/pretty_diff_tables.ts"],"names":["range","generatePrettyTable","fillToWidth","numberToString","rows","rowStrings","length","totalTableWidth","iters","map","row","Symbol","iterator","cellsForColumn","iter","r","next","done","undefined","value","every","cell","colWidth","Math","max","c","padStart","join"],"mappings":";AAAA;AACA,GADA,SAASA,KAAT,QAAsB,2BAAtB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,mBAAT;AACL,EAAEC,WAAF,EAAeC,cAAf,EADK;AAELC,IAFK;AAGG;AACR,QAAMC,UAAU,GAAGL,KAAK,CAACI,IAAI,CAACE,MAAN,EAAc,MAAM,EAApB,CAAxB;AACA,MAAIC,eAAe,GAAG,CAAtB;AACA,QAAMC,KAAK,GAAGJ,IAAI,CAACK,GAAL,CAAS,CAAAC,GAAG,KAAIA,GAAG,CAACC,MAAM,CAACC,QAAR,CAAH,EAAhB,CAAd;;AAEA;AACA,WAAS;AACP,UAAMC,cAAc,GAAGL,KAAK,CAACC,GAAN,CAAU,CAAAK,IAAI,KAAI;AACvC,YAAMC,CAAC,GAAGD,IAAI,CAACE,IAAL,EAAV,CADuC,CAChB;AACvB,aAAOD,CAAC,CAACE,IAAF,GAASC,SAAT,GAAqB,OAAOH,CAAC,CAACI,KAAT,KAAmB,QAAnB,GAA8BhB,cAAc,CAACY,CAAC,CAACI,KAAH,CAA5C,GAAwDJ,CAAC,CAACI,KAAtF;AACD,KAHsB,CAAvB;AAIA,QAAIN,cAAc,CAACO,KAAf,CAAqB,CAAAC,IAAI,KAAIA,IAAI,KAAKH,SAAtC,CAAJ,EAAsD;;AAEtD;AACA;AACA,UAAMI,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAAS,GAAGX,cAAc,CAACJ,GAAf,CAAmB,CAAAgB,CAAC,KAAKA,CAAC,KAAKP,SAAN,GAAkB,CAAlB,GAAsBO,CAAC,CAACnB,MAAjD,CAAZ,IAAyE,CAA1F;AACA,SAAK,IAAII,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGL,UAAU,CAACC,MAAnC,EAA2C,EAAEI,GAA7C,EAAkD;AAChD,YAAMW,IAAI,GAAGR,cAAc,CAACH,GAAD,CAA3B;AACA,UAAIW,IAAI,KAAKH,SAAb,EAAwB;AACtBb,QAAAA,UAAU,CAACK,GAAD,CAAV,IAAmBW,IAAI,CAACK,QAAL,CAAcJ,QAAd,CAAnB;AACD;AACF;;AAEDf,IAAAA,eAAe,IAAIe,QAAnB;AACA,QAAIf,eAAe,IAAIL,WAAvB,EAAoC;AAClC,WAAK,IAAIQ,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGL,UAAU,CAACC,MAAnC,EAA2C,EAAEI,GAA7C,EAAkD;AAChD,YAAIG,cAAc,CAACH,GAAD,CAAd,KAAwBQ,SAA5B,EAAuC;AACrCb,UAAAA,UAAU,CAACK,GAAD,CAAV,IAAmB,MAAnB;AACD;AACF;AACD;AACD;AACF;AACD,SAAOL,UAAU,CAACsB,IAAX,CAAgB,IAAhB,CAAP;AACD","sourcesContent":["import { range } from '../../common/util/util.js';\n\n/**\n * Pretty-prints a \"table\" of cell values (each being `number | string`), right-aligned.\n * Each row may be any iterator, including lazily-generated (potentially infinite) rows.\n *\n * The first argument is the printing options:\n *  - fillToWidth: Keep printing columns (as long as there is data) until this width is passed.\n *    If there is more data, \"...\" is appended.\n *  - numberToString: if a cell value is a number, this is used to stringify it.\n *\n * Each remaining argument provides one row for the table.\n */\nexport function generatePrettyTable(\n  { fillToWidth, numberToString }: { fillToWidth: number; numberToString: (n: number) => string },\n  rows: ReadonlyArray<Iterable<string | number>>\n): string {\n  const rowStrings = range(rows.length, () => '');\n  let totalTableWidth = 0;\n  const iters = rows.map(row => row[Symbol.iterator]());\n\n  // Loop over columns\n  for (;;) {\n    const cellsForColumn = iters.map(iter => {\n      const r = iter.next(); // Advance the iterator for each row, in lock-step.\n      return r.done ? undefined : typeof r.value === 'number' ? numberToString(r.value) : r.value;\n    });\n    if (cellsForColumn.every(cell => cell === undefined)) break;\n\n    // Maximum width of any cell in this column, plus one for space between columns\n    // (also inserts a space at the left of the first column).\n    const colWidth = Math.max(...cellsForColumn.map(c => (c === undefined ? 0 : c.length))) + 1;\n    for (let row = 0; row < rowStrings.length; ++row) {\n      const cell = cellsForColumn[row];\n      if (cell !== undefined) {\n        rowStrings[row] += cell.padStart(colWidth);\n      }\n    }\n\n    totalTableWidth += colWidth;\n    if (totalTableWidth >= fillToWidth) {\n      for (let row = 0; row < rowStrings.length; ++row) {\n        if (cellsForColumn[row] !== undefined) {\n          rowStrings[row] += ' ...';\n        }\n      }\n      break;\n    }\n  }\n  return rowStrings.join('\\n');\n}\n"],"file":"pretty_diff_tables.js"}