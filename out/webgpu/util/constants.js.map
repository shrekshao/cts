{"version":3,"sources":["../../../src/webgpu/util/constants.ts"],"names":["kBit","i32","positive","min","max","negative","u32","f32","zero","subnormal","nan","s","q","infinity","powTwo","toMinus1","toMinus2","toMinus3","toMinus4","toMinus5","toMinus6","toMinus7","toMinus8","toMinus9","toMinus10","toMinus11","toMinus12","toMinus13","toMinus14","toMinus15","toMinus16","toMinus17","toMinus18","toMinus19","toMinus20","toMinus21","toMinus22","toMinus23","toMinus24","toMinus25","toMinus26","toMinus27","toMinus28","toMinus29","toMinus30","toMinus31","to0","to1","to2","to3","to4","to5","to6","to7","to8","to9","to10","to11","to12","to13","to14","to15","to16","to17","to18","to19","to20","to21","to22","to23","to24","to25","to26","to27","to28","to29","to30","to31","negPowTwo","hexToF32","hex","Float32Array","Uint32Array","buffer","kValue","Math","pow","to32","toMinus32"],"mappings":"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","sourcesContent":["// MAINTENANCE_TODO(sarahM0): Perhaps instead of kBit and kValue tables we could have one table\n// where every value is a Scalar instead of either bits or value?\n// Then tests wouldn't need most of the Scalar.fromX calls,\n// and you would probably need fewer table entries in total\n// (since each Scalar has both bits and value).\nexport const kBit = {\n  // Limits of int32\n  i32: {\n    positive: {\n      min: 0x0000_0000, // 0\n      max: 0x7fff_ffff, // 2147483647\n    },\n    negative: {\n      min: 0x8000_0000, // -2147483648\n      max: 0x0000_0000, // 0\n    },\n  },\n\n  // Limits of uint32\n  u32: {\n    min: 0x0000_0000,\n    max: 0xffff_ffff,\n  },\n\n  // Limits of f32\n  f32: {\n    positive: {\n      min: 0x0080_0000,\n      max: 0x7f7f_ffff,\n      zero: 0x0000_0000,\n    },\n    negative: {\n      max: 0x8080_0000,\n      min: 0xff7f_ffff,\n      zero: 0x8000_0000,\n    },\n    subnormal: {\n      positive: {\n        min: 0x0000_0001,\n        max: 0x007f_ffff,\n      },\n      negative: {\n        max: 0x8000_0001,\n        min: 0x807f_ffff,\n      },\n    },\n    nan: {\n      negative: {\n        s: 0xff80_0001,\n        q: 0xffc0_0001,\n      },\n      positive: {\n        s: 0x7f80_0001,\n        q: 0x7fc0_0001,\n      },\n    },\n    infinity: {\n      positive: 0x7f80_0000,\n      negative: 0xff80_0000,\n    },\n  },\n\n  // 32-bit representation of power(2, n) n = {-31, ..., 31}\n  // A uint32 representation as a JS `number`\n  // {toMinus31, ..., to31} ie. {-31, ..., 31}\n  powTwo: {\n    toMinus1: 0x3f00_0000,\n    toMinus2: 0x3e80_0000,\n    toMinus3: 0x3e00_0000,\n    toMinus4: 0x3d80_0000,\n    toMinus5: 0x3d00_0000,\n    toMinus6: 0x3c80_0000,\n    toMinus7: 0x3c00_0000,\n    toMinus8: 0x3b80_0000,\n    toMinus9: 0x3b00_0000,\n    toMinus10: 0x3a80_0000,\n    toMinus11: 0x3a00_0000,\n    toMinus12: 0x3980_0000,\n    toMinus13: 0x3900_0000,\n    toMinus14: 0x3880_0000,\n    toMinus15: 0x3800_0000,\n    toMinus16: 0x3780_0000,\n    toMinus17: 0x3700_0000,\n    toMinus18: 0x3680_0000,\n    toMinus19: 0x3600_0000,\n    toMinus20: 0x3580_0000,\n    toMinus21: 0x3500_0000,\n    toMinus22: 0x3480_0000,\n    toMinus23: 0x3400_0000,\n    toMinus24: 0x3380_0000,\n    toMinus25: 0x3300_0000,\n    toMinus26: 0x3280_0000,\n    toMinus27: 0x3200_0000,\n    toMinus28: 0x3180_0000,\n    toMinus29: 0x3100_0000,\n    toMinus30: 0x3080_0000,\n    toMinus31: 0x3000_0000,\n\n    to0: 0x0000_0001,\n    to1: 0x0000_0002,\n    to2: 0x0000_0004,\n    to3: 0x0000_0008,\n    to4: 0x0000_0010,\n    to5: 0x0000_0020,\n    to6: 0x0000_0040,\n    to7: 0x0000_0080,\n    to8: 0x0000_0100,\n    to9: 0x0000_0200,\n    to10: 0x0000_0400,\n    to11: 0x0000_0800,\n    to12: 0x0000_1000,\n    to13: 0x0000_2000,\n    to14: 0x0000_4000,\n    to15: 0x0000_8000,\n    to16: 0x0001_0000,\n    to17: 0x0002_0000,\n    to18: 0x0004_0000,\n    to19: 0x0008_0000,\n    to20: 0x0010_0000,\n    to21: 0x0020_0000,\n    to22: 0x0040_0000,\n    to23: 0x0080_0000,\n    to24: 0x0100_0000,\n    to25: 0x0200_0000,\n    to26: 0x0400_0000,\n    to27: 0x0800_0000,\n    to28: 0x1000_0000,\n    to29: 0x2000_0000,\n    to30: 0x4000_0000,\n    to31: 0x8000_0000,\n  },\n\n  // 32-bit representation of  of -1 * power(2, n) n = {-31, ..., 31}\n  // An int32 represented as a JS `number`\n  // {toMinus31, ..., to31} ie. {-31, ..., 31}\n  negPowTwo: {\n    toMinus1: 0xbf00_0000,\n    toMinus2: 0xbe80_0000,\n    toMinus3: 0xbe00_0000,\n    toMinus4: 0xbd80_0000,\n    toMinus5: 0xbd00_0000,\n    toMinus6: 0xbc80_0000,\n    toMinus7: 0xbc00_0000,\n    toMinus8: 0xbb80_0000,\n    toMinus9: 0xbb00_0000,\n    toMinus10: 0xba80_0000,\n    toMinus11: 0xba00_0000,\n    toMinus12: 0xb980_0000,\n    toMinus13: 0xb900_0000,\n    toMinus14: 0xb880_0000,\n    toMinus15: 0xb800_0000,\n    toMinus16: 0xb780_0000,\n    toMinus17: 0xb700_0000,\n    toMinus18: 0xb680_0000,\n    toMinus19: 0xb600_0000,\n    toMinus20: 0xb580_0000,\n    toMinus21: 0xb500_0000,\n    toMinus22: 0xb480_0000,\n    toMinus23: 0xb400_0000,\n    toMinus24: 0xb380_0000,\n    toMinus25: 0xb300_0000,\n    toMinus26: 0xb280_0000,\n    toMinus27: 0xb200_0000,\n    toMinus28: 0xb180_0000,\n    toMinus29: 0xb100_0000,\n    toMinus30: 0xb080_0000,\n    toMinus31: 0xb000_0000,\n\n    to0: 0xffff_ffff,\n    to1: 0xffff_fffe,\n    to2: 0xffff_fffc,\n    to3: 0xffff_fff8,\n    to4: 0xffff_fff0,\n    to5: 0xffff_ffe0,\n    to6: 0xffff_ffc0,\n    to7: 0xffff_ff80,\n    to8: 0xffff_ff00,\n    to9: 0xffff_fe00,\n    to10: 0xffff_fc00,\n    to11: 0xffff_f800,\n    to12: 0xffff_f000,\n    to13: 0xffff_e000,\n    to14: 0xffff_c000,\n    to15: 0xffff_8000,\n    to16: 0xffff_0000,\n    to17: 0xfffe_0000,\n    to18: 0xfffc_0000,\n    to19: 0xfff8_0000,\n    to20: 0xfff0_0000,\n    to21: 0xffe0_0000,\n    to22: 0xffc0_0000,\n    to23: 0xff80_0000,\n    to24: 0xff00_0000,\n    to25: 0xfe00_0000,\n    to26: 0xfc00_0000,\n    to27: 0xf800_0000,\n    to28: 0xf000_0000,\n    to29: 0xe000_0000,\n    to30: 0xc000_0000,\n    to31: 0x8000_0000,\n  },\n} as const;\n\n/**\n * Converts a 32-bit hex value to a 32-bit float value\n *\n * Using a locally defined function here, instead of uint32ToFloat32 or f32Bits\n * functions, to avoid compile time dependency issues.\n * */\nfunction hexToF32(hex: number): number {\n  return new Float32Array(new Uint32Array([hex]).buffer)[0];\n}\n\nexport const kValue = {\n  // Limits of i32\n  i32: {\n    positive: {\n      min: 0,\n      max: 2147483647,\n    },\n    negative: {\n      min: -2147483648,\n      max: 0,\n    },\n  },\n\n  // Limits of uint32\n  u32: {\n    min: 0,\n    max: 4294967295,\n  },\n\n  // Limits of f32\n  f32: {\n    positive: {\n      min: hexToF32(kBit.f32.positive.min),\n      max: hexToF32(kBit.f32.positive.max),\n    },\n    negative: {\n      max: hexToF32(kBit.f32.negative.max),\n      min: hexToF32(kBit.f32.negative.min),\n    },\n    subnormal: {\n      positive: {\n        min: hexToF32(kBit.f32.subnormal.positive.min),\n        max: hexToF32(kBit.f32.subnormal.positive.max),\n      },\n      negative: {\n        max: hexToF32(kBit.f32.subnormal.negative.max),\n        min: hexToF32(kBit.f32.subnormal.negative.min),\n      },\n    },\n  },\n\n  powTwo: {\n    to0: Math.pow(2, 0),\n    to1: Math.pow(2, 1),\n    to2: Math.pow(2, 2),\n    to3: Math.pow(2, 3),\n    to4: Math.pow(2, 4),\n    to5: Math.pow(2, 5),\n    to6: Math.pow(2, 6),\n    to7: Math.pow(2, 7),\n    to8: Math.pow(2, 8),\n    to9: Math.pow(2, 9),\n    to10: Math.pow(2, 10),\n    to11: Math.pow(2, 11),\n    to12: Math.pow(2, 12),\n    to13: Math.pow(2, 13),\n    to14: Math.pow(2, 14),\n    to15: Math.pow(2, 15),\n    to16: Math.pow(2, 16),\n    to17: Math.pow(2, 17),\n    to18: Math.pow(2, 18),\n    to19: Math.pow(2, 19),\n    to20: Math.pow(2, 20),\n    to21: Math.pow(2, 21),\n    to22: Math.pow(2, 22),\n    to23: Math.pow(2, 23),\n    to24: Math.pow(2, 24),\n    to25: Math.pow(2, 25),\n    to26: Math.pow(2, 26),\n    to27: Math.pow(2, 27),\n    to28: Math.pow(2, 28),\n    to29: Math.pow(2, 29),\n    to30: Math.pow(2, 30),\n    to31: Math.pow(2, 31),\n    to32: Math.pow(2, 32),\n\n    toMinus1: Math.pow(2, -1),\n    toMinus2: Math.pow(2, -2),\n    toMinus3: Math.pow(2, -3),\n    toMinus4: Math.pow(2, -4),\n    toMinus5: Math.pow(2, -5),\n    toMinus6: Math.pow(2, -6),\n    toMinus7: Math.pow(2, -7),\n    toMinus8: Math.pow(2, -8),\n    toMinus9: Math.pow(2, -9),\n    toMinus10: Math.pow(2, -10),\n    toMinus11: Math.pow(2, -11),\n    toMinus12: Math.pow(2, -12),\n    toMinus13: Math.pow(2, -13),\n    toMinus14: Math.pow(2, -14),\n    toMinus15: Math.pow(2, -15),\n    toMinus16: Math.pow(2, -16),\n    toMinus17: Math.pow(2, -17),\n    toMinus18: Math.pow(2, -18),\n    toMinus19: Math.pow(2, -19),\n    toMinus20: Math.pow(2, -20),\n    toMinus21: Math.pow(2, -21),\n    toMinus22: Math.pow(2, -22),\n    toMinus23: Math.pow(2, -23),\n    toMinus24: Math.pow(2, -24),\n    toMinus25: Math.pow(2, -25),\n    toMinus26: Math.pow(2, -26),\n    toMinus27: Math.pow(2, -27),\n    toMinus28: Math.pow(2, -28),\n    toMinus29: Math.pow(2, -29),\n    toMinus30: Math.pow(2, -30),\n    toMinus31: Math.pow(2, -31),\n    toMinus32: Math.pow(2, -32),\n  },\n  negPowTwo: {\n    to0: -Math.pow(2, 0),\n    to1: -Math.pow(2, 1),\n    to2: -Math.pow(2, 2),\n    to3: -Math.pow(2, 3),\n    to4: -Math.pow(2, 4),\n    to5: -Math.pow(2, 5),\n    to6: -Math.pow(2, 6),\n    to7: -Math.pow(2, 7),\n    to8: -Math.pow(2, 8),\n    to9: -Math.pow(2, 9),\n    to10: -Math.pow(2, 10),\n    to11: -Math.pow(2, 11),\n    to12: -Math.pow(2, 12),\n    to13: -Math.pow(2, 13),\n    to14: -Math.pow(2, 14),\n    to15: -Math.pow(2, 15),\n    to16: -Math.pow(2, 16),\n    to17: -Math.pow(2, 17),\n    to18: -Math.pow(2, 18),\n    to19: -Math.pow(2, 19),\n    to20: -Math.pow(2, 20),\n    to21: -Math.pow(2, 21),\n    to22: -Math.pow(2, 22),\n    to23: -Math.pow(2, 23),\n    to24: -Math.pow(2, 24),\n    to25: -Math.pow(2, 25),\n    to26: -Math.pow(2, 26),\n    to27: -Math.pow(2, 27),\n    to28: -Math.pow(2, 28),\n    to29: -Math.pow(2, 29),\n    to30: -Math.pow(2, 30),\n    to31: -Math.pow(2, 31),\n    to32: -Math.pow(2, 32),\n\n    toMinus1: -Math.pow(2, -1),\n    toMinus2: -Math.pow(2, -2),\n    toMinus3: -Math.pow(2, -3),\n    toMinus4: -Math.pow(2, -4),\n    toMinus5: -Math.pow(2, -5),\n    toMinus6: -Math.pow(2, -6),\n    toMinus7: -Math.pow(2, -7),\n    toMinus8: -Math.pow(2, -8),\n    toMinus9: -Math.pow(2, -9),\n    toMinus10: -Math.pow(2, -10),\n    toMinus11: -Math.pow(2, -11),\n    toMinus12: -Math.pow(2, -12),\n    toMinus13: -Math.pow(2, -13),\n    toMinus14: -Math.pow(2, -14),\n    toMinus15: -Math.pow(2, -15),\n    toMinus16: -Math.pow(2, -16),\n    toMinus17: -Math.pow(2, -17),\n    toMinus18: -Math.pow(2, -18),\n    toMinus19: -Math.pow(2, -19),\n    toMinus20: -Math.pow(2, -20),\n    toMinus21: -Math.pow(2, -21),\n    toMinus22: -Math.pow(2, -22),\n    toMinus23: -Math.pow(2, -23),\n    toMinus24: -Math.pow(2, -24),\n    toMinus25: -Math.pow(2, -25),\n    toMinus26: -Math.pow(2, -26),\n    toMinus27: -Math.pow(2, -27),\n    toMinus28: -Math.pow(2, -28),\n    toMinus29: -Math.pow(2, -29),\n    toMinus30: -Math.pow(2, -30),\n    toMinus31: -Math.pow(2, -31),\n    toMinus32: -Math.pow(2, -32),\n  },\n} as const;\n"],"file":"constants.js"}