{"version":3,"file":"constants.js","names":["Float16Array","kBit","i32","positive","min","max","negative","u32","f32","zero","nearest_max","less_than_one","pi","whole","three_quarters","half","third","quarter","sixth","e","nearest_min","subnormal","nan","s","q","infinity","f16","powTwo","toMinus1","toMinus2","toMinus3","toMinus4","toMinus5","toMinus6","toMinus7","toMinus8","toMinus9","toMinus10","toMinus11","toMinus12","toMinus13","toMinus14","toMinus15","toMinus16","toMinus17","toMinus18","toMinus19","toMinus20","toMinus21","toMinus22","toMinus23","toMinus24","toMinus25","toMinus26","toMinus27","toMinus28","toMinus29","toMinus30","toMinus31","to0","to1","to2","to3","to4","to5","to6","to7","to8","to9","to10","to11","to12","to13","to14","to15","to16","to17","to18","to19","to20","to21","to22","to23","to24","to25","to26","to27","to28","to29","to30","to31","negPowTwo","hexToF64","hex","Float64Array","BigInt64Array","buffer","f64ToHex","number","BigUint64Array","hexToF32","Float32Array","Uint32Array","hexToF16","Uint16Array","kValue","first_f64_not_castable","last_f64_castable","BigInt","i16","u16","Math","pow","to32","toMinus32","i8","u8"],"sources":["../../../src/webgpu/util/constants.ts"],"sourcesContent":["import { Float16Array } from '../../external/petamoriken/float16/float16.js';\n\n// MAINTENANCE_TODO(sarahM0): Perhaps instead of kBit and kValue tables we could have one table\n// where every value is a Scalar instead of either bits or value?\n// Then tests wouldn't need most of the Scalar.fromX calls,\n// and you would probably need fewer table entries in total\n// (since each Scalar has both bits and value).\nexport const kBit = {\n  // Limits of int32\n  i32: {\n    positive: {\n      min: 0x0000_0000, // 0\n      max: 0x7fff_ffff, // 2147483647\n    },\n    negative: {\n      min: 0x8000_0000, // -2147483648\n      max: 0x0000_0000, // 0\n    },\n  },\n\n  // Limits of uint32\n  u32: {\n    min: 0x0000_0000,\n    max: 0xffff_ffff,\n  },\n\n  // Limits of f32\n  f32: {\n    positive: {\n      min: 0x0080_0000,\n      max: 0x7f7f_ffff,\n      zero: 0x0000_0000,\n      nearest_max: 0x7f7f_fffe,\n      less_than_one: 0x3f7f_ffff,\n      pi: {\n        whole: 0x404_90fdb,\n        three_quarters: 0x4016_cbe4,\n        half: 0x3fc9_0fdb,\n        third: 0x3f86_0a92,\n        quarter: 0x3f49_0fdb,\n        sixth: 0x3f06_0a92,\n      },\n      e: 0x402d_f854,\n    },\n    negative: {\n      max: 0x8080_0000,\n      min: 0xff7f_ffff,\n      zero: 0x8000_0000,\n      nearest_min: 0xff7f_fffe,\n      less_than_one: 0xbf7f_ffff,\n      pi: {\n        whole: 0xc04_90fdb,\n        three_quarters: 0xc016_cbe4,\n        half: 0xbfc90fdb,\n        third: 0xbf860a92,\n        quarter: 0xbf49_0fdb,\n        sixth: 0xbf06_0a92,\n      },\n    },\n    subnormal: {\n      positive: {\n        min: 0x0000_0001,\n        max: 0x007f_ffff,\n      },\n      negative: {\n        max: 0x8000_0001,\n        min: 0x807f_ffff,\n      },\n    },\n    nan: {\n      negative: {\n        s: 0xff80_0001,\n        q: 0xffc0_0001,\n      },\n      positive: {\n        s: 0x7f80_0001,\n        q: 0x7fc0_0001,\n      },\n    },\n    infinity: {\n      positive: 0x7f80_0000,\n      negative: 0xff80_0000,\n    },\n  },\n\n  // Limits of f16\n  f16: {\n    positive: {\n      min: 0x0400,\n      max: 0x7bff,\n      zero: 0x0000,\n    },\n    negative: {\n      max: 0x8400,\n      min: 0xfbff,\n      zero: 0x8000,\n    },\n    subnormal: {\n      positive: {\n        min: 0x0001,\n        max: 0x03ff,\n      },\n      negative: {\n        max: 0x8001,\n        min: 0x83ff,\n      },\n    },\n    nan: {\n      negative: {\n        s: 0xfc01,\n        q: 0xfe01,\n      },\n      positive: {\n        s: 0x7c01,\n        q: 0x7e01,\n      },\n    },\n    infinity: {\n      positive: 0x7c00,\n      negative: 0xfc00,\n    },\n  },\n\n  // 32-bit representation of power(2, n) n = {-31, ..., 31}\n  // A uint32 representation as a JS `number`\n  // {toMinus31, ..., to31} ie. {-31, ..., 31}\n  powTwo: {\n    toMinus1: 0x3f00_0000,\n    toMinus2: 0x3e80_0000,\n    toMinus3: 0x3e00_0000,\n    toMinus4: 0x3d80_0000,\n    toMinus5: 0x3d00_0000,\n    toMinus6: 0x3c80_0000,\n    toMinus7: 0x3c00_0000,\n    toMinus8: 0x3b80_0000,\n    toMinus9: 0x3b00_0000,\n    toMinus10: 0x3a80_0000,\n    toMinus11: 0x3a00_0000,\n    toMinus12: 0x3980_0000,\n    toMinus13: 0x3900_0000,\n    toMinus14: 0x3880_0000,\n    toMinus15: 0x3800_0000,\n    toMinus16: 0x3780_0000,\n    toMinus17: 0x3700_0000,\n    toMinus18: 0x3680_0000,\n    toMinus19: 0x3600_0000,\n    toMinus20: 0x3580_0000,\n    toMinus21: 0x3500_0000,\n    toMinus22: 0x3480_0000,\n    toMinus23: 0x3400_0000,\n    toMinus24: 0x3380_0000,\n    toMinus25: 0x3300_0000,\n    toMinus26: 0x3280_0000,\n    toMinus27: 0x3200_0000,\n    toMinus28: 0x3180_0000,\n    toMinus29: 0x3100_0000,\n    toMinus30: 0x3080_0000,\n    toMinus31: 0x3000_0000,\n\n    to0: 0x0000_0001,\n    to1: 0x0000_0002,\n    to2: 0x0000_0004,\n    to3: 0x0000_0008,\n    to4: 0x0000_0010,\n    to5: 0x0000_0020,\n    to6: 0x0000_0040,\n    to7: 0x0000_0080,\n    to8: 0x0000_0100,\n    to9: 0x0000_0200,\n    to10: 0x0000_0400,\n    to11: 0x0000_0800,\n    to12: 0x0000_1000,\n    to13: 0x0000_2000,\n    to14: 0x0000_4000,\n    to15: 0x0000_8000,\n    to16: 0x0001_0000,\n    to17: 0x0002_0000,\n    to18: 0x0004_0000,\n    to19: 0x0008_0000,\n    to20: 0x0010_0000,\n    to21: 0x0020_0000,\n    to22: 0x0040_0000,\n    to23: 0x0080_0000,\n    to24: 0x0100_0000,\n    to25: 0x0200_0000,\n    to26: 0x0400_0000,\n    to27: 0x0800_0000,\n    to28: 0x1000_0000,\n    to29: 0x2000_0000,\n    to30: 0x4000_0000,\n    to31: 0x8000_0000,\n  },\n\n  // 32-bit representation of  of -1 * power(2, n) n = {-31, ..., 31}\n  // An int32 represented as a JS `number`\n  // {toMinus31, ..., to31} ie. {-31, ..., 31}\n  negPowTwo: {\n    toMinus1: 0xbf00_0000,\n    toMinus2: 0xbe80_0000,\n    toMinus3: 0xbe00_0000,\n    toMinus4: 0xbd80_0000,\n    toMinus5: 0xbd00_0000,\n    toMinus6: 0xbc80_0000,\n    toMinus7: 0xbc00_0000,\n    toMinus8: 0xbb80_0000,\n    toMinus9: 0xbb00_0000,\n    toMinus10: 0xba80_0000,\n    toMinus11: 0xba00_0000,\n    toMinus12: 0xb980_0000,\n    toMinus13: 0xb900_0000,\n    toMinus14: 0xb880_0000,\n    toMinus15: 0xb800_0000,\n    toMinus16: 0xb780_0000,\n    toMinus17: 0xb700_0000,\n    toMinus18: 0xb680_0000,\n    toMinus19: 0xb600_0000,\n    toMinus20: 0xb580_0000,\n    toMinus21: 0xb500_0000,\n    toMinus22: 0xb480_0000,\n    toMinus23: 0xb400_0000,\n    toMinus24: 0xb380_0000,\n    toMinus25: 0xb300_0000,\n    toMinus26: 0xb280_0000,\n    toMinus27: 0xb200_0000,\n    toMinus28: 0xb180_0000,\n    toMinus29: 0xb100_0000,\n    toMinus30: 0xb080_0000,\n    toMinus31: 0xb000_0000,\n\n    to0: 0xffff_ffff,\n    to1: 0xffff_fffe,\n    to2: 0xffff_fffc,\n    to3: 0xffff_fff8,\n    to4: 0xffff_fff0,\n    to5: 0xffff_ffe0,\n    to6: 0xffff_ffc0,\n    to7: 0xffff_ff80,\n    to8: 0xffff_ff00,\n    to9: 0xffff_fe00,\n    to10: 0xffff_fc00,\n    to11: 0xffff_f800,\n    to12: 0xffff_f000,\n    to13: 0xffff_e000,\n    to14: 0xffff_c000,\n    to15: 0xffff_8000,\n    to16: 0xffff_0000,\n    to17: 0xfffe_0000,\n    to18: 0xfffc_0000,\n    to19: 0xfff8_0000,\n    to20: 0xfff0_0000,\n    to21: 0xffe0_0000,\n    to22: 0xffc0_0000,\n    to23: 0xff80_0000,\n    to24: 0xff00_0000,\n    to25: 0xfe00_0000,\n    to26: 0xfc00_0000,\n    to27: 0xf800_0000,\n    to28: 0xf000_0000,\n    to29: 0xe000_0000,\n    to30: 0xc000_0000,\n    to31: 0x8000_0000,\n  },\n} as const;\n\n/**\n * Converts a 64-bit hex value to a 64-bit float value\n *\n * Using a locally defined function here to avoid compile time dependency\n * issues.\n * */\nfunction hexToF64(hex: bigint): number {\n  return new Float64Array(new BigInt64Array([hex]).buffer)[0];\n}\n\n/**\n * Converts a 64-bit float value to a 64-bit hex value\n *\n * Using a locally defined function here to avoid compile time dependency\n * issues.\n * */\nfunction f64ToHex(number: number): bigint {\n  return new BigUint64Array(new Float64Array([number]).buffer)[0];\n}\n\n/**\n * Converts a 32-bit hex value to a 32-bit float value\n *\n * Using a locally defined function here to avoid compile time dependency\n * issues.\n * */\nfunction hexToF32(hex: number): number {\n  return new Float32Array(new Uint32Array([hex]).buffer)[0];\n}\n\n/**\n * Converts a 16-bit hex value to a 16-bit float value\n *\n * Using a locally defined function here to avoid compile time dependency\n * issues.\n * */\nfunction hexToF16(hex: number): number {\n  return new Float16Array(new Uint16Array([hex]).buffer)[0];\n}\n\nexport const kValue = {\n  // Limits of i32\n  i32: {\n    positive: {\n      min: 0,\n      max: 2147483647,\n    },\n    negative: {\n      min: -2147483648,\n      max: 0,\n    },\n  },\n\n  // Limits of u32\n  u32: {\n    min: 0,\n    max: 4294967295,\n  },\n\n  // Limits of f32\n  f32: {\n    positive: {\n      min: hexToF32(kBit.f32.positive.min),\n      max: hexToF32(kBit.f32.positive.max),\n      nearest_max: hexToF32(kBit.f32.positive.nearest_max),\n      less_than_one: hexToF32(kBit.f32.positive.less_than_one),\n      pi: {\n        whole: hexToF32(kBit.f32.positive.pi.whole),\n        three_quarters: hexToF32(kBit.f32.positive.pi.three_quarters),\n        half: hexToF32(kBit.f32.positive.pi.half),\n        third: hexToF32(kBit.f32.positive.pi.third),\n        quarter: hexToF32(kBit.f32.positive.pi.quarter),\n        sixth: hexToF32(kBit.f32.positive.pi.sixth),\n      },\n      e: hexToF32(kBit.f32.positive.e),\n      first_f64_not_castable: hexToF32(kBit.f32.positive.max) / 2 + 2 ** 127, // mid point of 2**128 and largest f32\n      last_f64_castable: hexToF64(\n        f64ToHex(hexToF32(kBit.f32.positive.max) / 2 + 2 ** 127) - BigInt(1)\n      ), // first_f64_not_castable minus one fraction bit of the 64 bit float representation\n    },\n    negative: {\n      max: hexToF32(kBit.f32.negative.max),\n      min: hexToF32(kBit.f32.negative.min),\n      nearest_min: hexToF32(kBit.f32.negative.nearest_min),\n      less_than_one: hexToF32(kBit.f32.negative.less_than_one), // -0.999999940395\n      pi: {\n        whole: hexToF32(kBit.f32.negative.pi.whole),\n        three_quarters: hexToF32(kBit.f32.negative.pi.three_quarters),\n        half: hexToF32(kBit.f32.negative.pi.half),\n        third: hexToF32(kBit.f32.negative.pi.third),\n        quarter: hexToF32(kBit.f32.negative.pi.quarter),\n        sixth: hexToF32(kBit.f32.negative.pi.sixth),\n      },\n      first_f64_not_castable: -(hexToF32(kBit.f32.positive.max) / 2 + 2 ** 127), // mid point of -2**128 and largest f32\n      last_f64_castable: -hexToF64(\n        f64ToHex(hexToF32(kBit.f32.positive.max) / 2 + 2 ** 127) - BigInt(1)\n      ), // first_f64_not_castable minus one fraction bit of the 64 bit float representation\n    },\n    subnormal: {\n      positive: {\n        min: hexToF32(kBit.f32.subnormal.positive.min),\n        max: hexToF32(kBit.f32.subnormal.positive.max),\n      },\n      negative: {\n        max: hexToF32(kBit.f32.subnormal.negative.max),\n        min: hexToF32(kBit.f32.subnormal.negative.min),\n      },\n    },\n    infinity: {\n      positive: hexToF32(kBit.f32.infinity.positive),\n      negative: hexToF32(kBit.f32.infinity.negative),\n    },\n  },\n\n  // Limits of i16\n  i16: {\n    positive: {\n      min: 0,\n      max: 32767,\n    },\n    negative: {\n      min: -32768,\n      max: 0,\n    },\n  },\n\n  // Limits of u16\n  u16: {\n    min: 0,\n    max: 65535,\n  },\n\n  // Limits of f16\n  f16: {\n    positive: {\n      min: hexToF16(kBit.f16.positive.min),\n      max: hexToF16(kBit.f16.positive.max),\n      zero: hexToF16(kBit.f16.positive.zero),\n      first_f64_not_castable: hexToF16(kBit.f16.positive.max) / 2 + 2 ** 16, // mid point of 2**16 and largest f16\n      last_f64_castable: hexToF64(\n        f64ToHex(hexToF16(kBit.f16.positive.max) / 2 + 2 ** 16) - BigInt(1)\n      ), // first_f64_not_castable minus one fraction bit of the 64 bit float representation\n    },\n    negative: {\n      max: hexToF16(kBit.f16.negative.max),\n      min: hexToF16(kBit.f16.negative.min),\n      zero: hexToF16(kBit.f16.negative.zero),\n      first_f64_not_castable: -(hexToF16(kBit.f16.positive.max) / 2 + 2 ** 16), // mid point of -2**16 and largest f16\n      last_f64_castable: -hexToF64(\n        f64ToHex(hexToF16(kBit.f16.positive.max) / 2 + 2 ** 16) - BigInt(1)\n      ), // first_f64_not_castable minus one fraction bit of the 64 bit float representation\n    },\n    subnormal: {\n      positive: {\n        min: hexToF16(kBit.f16.subnormal.positive.min),\n        max: hexToF16(kBit.f16.subnormal.positive.max),\n      },\n      negative: {\n        max: hexToF16(kBit.f16.subnormal.negative.max),\n        min: hexToF16(kBit.f16.subnormal.negative.min),\n      },\n    },\n    infinity: {\n      positive: hexToF16(kBit.f16.infinity.positive),\n      negative: hexToF16(kBit.f16.infinity.negative),\n    },\n  },\n\n  powTwo: {\n    to0: Math.pow(2, 0),\n    to1: Math.pow(2, 1),\n    to2: Math.pow(2, 2),\n    to3: Math.pow(2, 3),\n    to4: Math.pow(2, 4),\n    to5: Math.pow(2, 5),\n    to6: Math.pow(2, 6),\n    to7: Math.pow(2, 7),\n    to8: Math.pow(2, 8),\n    to9: Math.pow(2, 9),\n    to10: Math.pow(2, 10),\n    to11: Math.pow(2, 11),\n    to12: Math.pow(2, 12),\n    to13: Math.pow(2, 13),\n    to14: Math.pow(2, 14),\n    to15: Math.pow(2, 15),\n    to16: Math.pow(2, 16),\n    to17: Math.pow(2, 17),\n    to18: Math.pow(2, 18),\n    to19: Math.pow(2, 19),\n    to20: Math.pow(2, 20),\n    to21: Math.pow(2, 21),\n    to22: Math.pow(2, 22),\n    to23: Math.pow(2, 23),\n    to24: Math.pow(2, 24),\n    to25: Math.pow(2, 25),\n    to26: Math.pow(2, 26),\n    to27: Math.pow(2, 27),\n    to28: Math.pow(2, 28),\n    to29: Math.pow(2, 29),\n    to30: Math.pow(2, 30),\n    to31: Math.pow(2, 31),\n    to32: Math.pow(2, 32),\n\n    toMinus1: Math.pow(2, -1),\n    toMinus2: Math.pow(2, -2),\n    toMinus3: Math.pow(2, -3),\n    toMinus4: Math.pow(2, -4),\n    toMinus5: Math.pow(2, -5),\n    toMinus6: Math.pow(2, -6),\n    toMinus7: Math.pow(2, -7),\n    toMinus8: Math.pow(2, -8),\n    toMinus9: Math.pow(2, -9),\n    toMinus10: Math.pow(2, -10),\n    toMinus11: Math.pow(2, -11),\n    toMinus12: Math.pow(2, -12),\n    toMinus13: Math.pow(2, -13),\n    toMinus14: Math.pow(2, -14),\n    toMinus15: Math.pow(2, -15),\n    toMinus16: Math.pow(2, -16),\n    toMinus17: Math.pow(2, -17),\n    toMinus18: Math.pow(2, -18),\n    toMinus19: Math.pow(2, -19),\n    toMinus20: Math.pow(2, -20),\n    toMinus21: Math.pow(2, -21),\n    toMinus22: Math.pow(2, -22),\n    toMinus23: Math.pow(2, -23),\n    toMinus24: Math.pow(2, -24),\n    toMinus25: Math.pow(2, -25),\n    toMinus26: Math.pow(2, -26),\n    toMinus27: Math.pow(2, -27),\n    toMinus28: Math.pow(2, -28),\n    toMinus29: Math.pow(2, -29),\n    toMinus30: Math.pow(2, -30),\n    toMinus31: Math.pow(2, -31),\n    toMinus32: Math.pow(2, -32),\n  },\n  negPowTwo: {\n    to0: -Math.pow(2, 0),\n    to1: -Math.pow(2, 1),\n    to2: -Math.pow(2, 2),\n    to3: -Math.pow(2, 3),\n    to4: -Math.pow(2, 4),\n    to5: -Math.pow(2, 5),\n    to6: -Math.pow(2, 6),\n    to7: -Math.pow(2, 7),\n    to8: -Math.pow(2, 8),\n    to9: -Math.pow(2, 9),\n    to10: -Math.pow(2, 10),\n    to11: -Math.pow(2, 11),\n    to12: -Math.pow(2, 12),\n    to13: -Math.pow(2, 13),\n    to14: -Math.pow(2, 14),\n    to15: -Math.pow(2, 15),\n    to16: -Math.pow(2, 16),\n    to17: -Math.pow(2, 17),\n    to18: -Math.pow(2, 18),\n    to19: -Math.pow(2, 19),\n    to20: -Math.pow(2, 20),\n    to21: -Math.pow(2, 21),\n    to22: -Math.pow(2, 22),\n    to23: -Math.pow(2, 23),\n    to24: -Math.pow(2, 24),\n    to25: -Math.pow(2, 25),\n    to26: -Math.pow(2, 26),\n    to27: -Math.pow(2, 27),\n    to28: -Math.pow(2, 28),\n    to29: -Math.pow(2, 29),\n    to30: -Math.pow(2, 30),\n    to31: -Math.pow(2, 31),\n    to32: -Math.pow(2, 32),\n\n    toMinus1: -Math.pow(2, -1),\n    toMinus2: -Math.pow(2, -2),\n    toMinus3: -Math.pow(2, -3),\n    toMinus4: -Math.pow(2, -4),\n    toMinus5: -Math.pow(2, -5),\n    toMinus6: -Math.pow(2, -6),\n    toMinus7: -Math.pow(2, -7),\n    toMinus8: -Math.pow(2, -8),\n    toMinus9: -Math.pow(2, -9),\n    toMinus10: -Math.pow(2, -10),\n    toMinus11: -Math.pow(2, -11),\n    toMinus12: -Math.pow(2, -12),\n    toMinus13: -Math.pow(2, -13),\n    toMinus14: -Math.pow(2, -14),\n    toMinus15: -Math.pow(2, -15),\n    toMinus16: -Math.pow(2, -16),\n    toMinus17: -Math.pow(2, -17),\n    toMinus18: -Math.pow(2, -18),\n    toMinus19: -Math.pow(2, -19),\n    toMinus20: -Math.pow(2, -20),\n    toMinus21: -Math.pow(2, -21),\n    toMinus22: -Math.pow(2, -22),\n    toMinus23: -Math.pow(2, -23),\n    toMinus24: -Math.pow(2, -24),\n    toMinus25: -Math.pow(2, -25),\n    toMinus26: -Math.pow(2, -26),\n    toMinus27: -Math.pow(2, -27),\n    toMinus28: -Math.pow(2, -28),\n    toMinus29: -Math.pow(2, -29),\n    toMinus30: -Math.pow(2, -30),\n    toMinus31: -Math.pow(2, -31),\n    toMinus32: -Math.pow(2, -32),\n  },\n\n  // Limits of i8\n  i8: {\n    positive: {\n      min: 0,\n      max: 127,\n    },\n    negative: {\n      min: -128,\n      max: 0,\n    },\n  },\n\n  // Limits of u8\n  u8: {\n    min: 0,\n    max: 255,\n  },\n} as const;\n"],"mappings":"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"}