{"version":3,"sources":["../../../src/webgpu/util/math.ts"],"names":["assert","kBit","f32","f32Bits","i32","kMaxSafeMultipleOf8","Number","MAX_SAFE_INTEGER","align","n","alignment","isInteger","Math","ceil","roundDown","floor","clamp","min","max","diffULP","a","b","isFinite","Infinity","arr","Uint32Array","Float32Array","buffer","u32_a","u32_b","sign_a","sign_b","masked_a","masked_b","subnormal_or_zero_a","subnormal_or_zero_b","bits_a","bits_b","flushSubnormalNumber","val","u32_val","flushSubnormalBits","flushSubnormalScalar","isSubnormalScalar","type","kind","value","valueOf","nextAfter","dir","flush","isNaN","nan","positive","s","POSITIVE_INFINITY","infinity","NEGATIVE_INFINITY","negative","subnormal","converted","is_positive","result","correctlyRounded","test_value","target","accept_to_zero","accept_no_flush","correctlyRoundedImpl","target32","after_target","before_target","lerp","t","NaN","x","linearRange","num_steps","Array","from","keys","map","i","biasedRange","c","pow","multiplyMatrices","A","B","length","product","fill","m","p","signExtend","bits","shift","quantizeToF32","num","quantizeToI32"],"mappings":"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","sourcesContent":["import { assert } from '../../common/util/util.js';\n\nimport { kBit } from './constants.js';\nimport { f32, f32Bits, i32, Scalar } from './conversion.js';\n\n/**\n * A multiple of 8 guaranteed to be way too large to allocate (just under 8 pebibytes).\n * This is a \"safe\" integer (ULP <= 1.0) very close to MAX_SAFE_INTEGER.\n *\n * Note: allocations of this size are likely to exceed limitations other than just the system's\n * physical memory, so test cases are also needed to try to trigger \"true\" OOM.\n */\nexport const kMaxSafeMultipleOf8 = Number.MAX_SAFE_INTEGER - 7;\n\n/** Round `n` up to the next multiple of `alignment` (inclusive). */\n// MAINTENANCE_TODO: Rename to `roundUp`\nexport function align(n: number, alignment: number): number {\n  assert(Number.isInteger(n) && n >= 0, 'n must be a non-negative integer');\n  assert(Number.isInteger(alignment) && alignment > 0, 'alignment must be a positive integer');\n  return Math.ceil(n / alignment) * alignment;\n}\n\n/** Round `n` down to the next multiple of `alignment` (inclusive). */\nexport function roundDown(n: number, alignment: number): number {\n  assert(Number.isInteger(n) && n >= 0, 'n must be a non-negative integer');\n  assert(Number.isInteger(alignment) && alignment > 0, 'alignment must be a positive integer');\n  return Math.floor(n / alignment) * alignment;\n}\n\n/** Clamp a number to the provided range. */\nexport function clamp(n: number, { min, max }: { min: number; max: number }): number {\n  assert(max >= min);\n  return Math.min(Math.max(n, min), max);\n}\n\n/**\n * @returns the (absolute) Units of Last Place difference between the float32 numbers a and b, taken\n * as JS doubles. If either `a` or `b` are not finite numbers, then diffULP() returns Infinity.\n *\n * Subnormal numbers are skipped, so 0 is one ULP from the minimum normal number.\n * Subnormal values are rounded to 0.\n */\nexport function diffULP(a: number, b: number): number {\n  if (!Number.isFinite(a) || !Number.isFinite(b)) {\n    return Infinity;\n  }\n\n  const arr = new Uint32Array(new Float32Array([a, b]).buffer);\n  const u32_a = arr[0];\n  const u32_b = arr[1];\n\n  const sign_a = (u32_a & 0x80000000) !== 0;\n  const sign_b = (u32_b & 0x80000000) !== 0;\n  const masked_a = u32_a & 0x7fffffff;\n  const masked_b = u32_b & 0x7fffffff;\n  const subnormal_or_zero_a = (u32_a & 0x7f800000) === 0;\n  const subnormal_or_zero_b = (u32_b & 0x7f800000) === 0;\n\n  // If the number is subnormal, then reduce it to 0 for ULP comparison.\n  // If the number is normal then reduce its bits-representation so to that we\n  // can pretend that the subnormal numbers don't exist, for the purposes of\n  // counting ULP steps from zero (or any subnormal) to any of the normal numbers.\n  const bits_a = subnormal_or_zero_a ? 0 : masked_a - 0x7fffff;\n  const bits_b = subnormal_or_zero_b ? 0 : masked_b - 0x7fffff;\n\n  if (sign_a === sign_b) {\n    return Math.max(bits_a, bits_b) - Math.min(bits_a, bits_b);\n  }\n  return bits_a + bits_b;\n}\n\n/**\n * @returns 0 if |val| is a subnormal f32 number, otherwise returns |val|\n */\nfunction flushSubnormalNumber(val: number): number {\n  const u32_val = new Uint32Array(new Float32Array([val]).buffer)[0];\n  return (u32_val & 0x7f800000) === 0 ? 0 : val;\n}\n\n/**\n * @returns 0 if |val| is a bit field for a subnormal f32 number, otherwise\n * returns |val|\n * |val| is assumed to be a u32 value representing a f32\n */\nfunction flushSubnormalBits(val: number): number {\n  return (val & 0x7f800000) === 0 ? 0 : val;\n}\n\n/**\n * @returns 0 if |val| is a subnormal f32 number, otherwise returns |val|\n */\nexport function flushSubnormalScalar(val: Scalar): Scalar {\n  return isSubnormalScalar(val) ? f32(0) : val;\n}\n\n/**\n * @returns true if |val| is a subnormal f32 number, otherwise returns false\n * 0 is considered a non-subnormal number by this function.\n */\nexport function isSubnormalScalar(val: Scalar): boolean {\n  if (val.type.kind !== 'f32') {\n    return false;\n  }\n\n  if (val === f32(0)) {\n    return false;\n  }\n\n  const u32_val = new Uint32Array(new Float32Array([val.value.valueOf() as number]).buffer)[0];\n  return (u32_val & 0x7f800000) === 0;\n}\n\n/**\n * @returns the next single precision floating point value after |val|,\n * towards +inf if |dir| is true, otherwise towards -inf.\n * If |flush| is true, all subnormal values will be flushed to 0,\n * before processing.\n * If |flush| is false, the next subnormal will be calculated when appropriate,\n * and for -/+0 the nextAfter will be the closest subnormal in the correct\n * direction.\n * |val| must be expressible as a f32.\n */\nexport function nextAfter(val: number, dir: boolean = true, flush: boolean): Scalar {\n  if (Number.isNaN(val)) {\n    return f32Bits(kBit.f32.nan.positive.s);\n  }\n\n  if (val === Number.POSITIVE_INFINITY) {\n    return f32Bits(kBit.f32.infinity.positive);\n  }\n\n  if (val === Number.NEGATIVE_INFINITY) {\n    return f32Bits(kBit.f32.infinity.negative);\n  }\n\n  val = flush ? flushSubnormalNumber(val) : val;\n\n  // -/+0 === 0 returns true\n  if (val === 0) {\n    if (dir) {\n      return flush ? f32Bits(kBit.f32.positive.min) : f32Bits(kBit.f32.subnormal.positive.min);\n    } else {\n      return flush ? f32Bits(kBit.f32.negative.max) : f32Bits(kBit.f32.subnormal.negative.max);\n    }\n  }\n\n  // number is float64 internally, so need to test if value is expressible as a float32.\n  const converted: number = new Float32Array([val])[0];\n  assert(val === converted, `${val} is not expressible as a f32.`);\n\n  const u32_val = new Uint32Array(new Float32Array([val]).buffer)[0];\n  const is_positive = (u32_val & 0x80000000) === 0;\n  let result = u32_val;\n  if (dir === is_positive) {\n    result += 1;\n  } else {\n    result -= 1;\n  }\n  result = flush ? flushSubnormalBits(result) : result;\n\n  // Checking for overflow\n  if ((result & 0x7f800000) === 0x7f800000) {\n    if (dir) {\n      return f32Bits(kBit.f32.infinity.positive);\n    } else {\n      return f32Bits(kBit.f32.infinity.negative);\n    }\n  }\n  return f32Bits(result);\n}\n\n/**\n * @returns if a test value is correctly rounded to an target value. Only\n * defined for |test_values| being a float32. target values may be any number.\n *\n * Correctly rounded means that if the target value is precisely expressible\n * as a float32, then |test_value| === |target|.\n * Otherwise |test_value| needs to be either the closest expressible number\n * greater or less than |target|.\n *\n * By default internally tests with both subnormals being flushed to 0 and not\n * being flushed, but |accept_to_zero| and |accept_no_flush| can be used to\n * control that behaviour. At least one accept flag must be true.\n */\nexport function correctlyRounded(\n  test_value: Scalar,\n  target: number,\n  accept_to_zero: boolean = true,\n  accept_no_flush: boolean = true\n): boolean {\n  assert(\n    accept_to_zero || accept_no_flush,\n    `At least one of |accept_to_zero| & |accept_no_flush| must be true`\n  );\n\n  let result: boolean = false;\n  if (accept_to_zero) {\n    result = result || correctlyRoundedImpl(test_value, target, true);\n  }\n  if (accept_no_flush) {\n    result = result || correctlyRoundedImpl(test_value, target, false);\n  }\n  return result;\n}\n\nfunction correctlyRoundedImpl(test_value: Scalar, target: number, flush: boolean): boolean {\n  assert(test_value.type.kind === 'f32', `${test_value} is expected to be a 'f32'`);\n\n  if (Number.isNaN(target)) {\n    return Number.isNaN(test_value.value.valueOf() as number);\n  }\n\n  if (target === Number.POSITIVE_INFINITY) {\n    return test_value.value === f32Bits(kBit.f32.infinity.positive).value;\n  }\n\n  if (target === Number.NEGATIVE_INFINITY) {\n    return test_value.value === f32Bits(kBit.f32.infinity.negative).value;\n  }\n\n  test_value = flush ? flushSubnormalScalar(test_value) : test_value;\n  target = flush ? flushSubnormalNumber(target) : target;\n\n  const target32 = new Float32Array([target])[0];\n  const converted: number = target32;\n  if (target === converted) {\n    // expected is precisely expressible in float32\n    return test_value.value === f32(target32).value;\n  }\n\n  let after_target: Scalar;\n  let before_target: Scalar;\n\n  if (converted > target) {\n    // target32 is rounded towards +inf, so is after_target\n    after_target = f32(target32);\n    before_target = nextAfter(target32, false, flush);\n  } else {\n    // target32 is rounded towards -inf, so is before_target\n    after_target = nextAfter(target32, true, flush);\n    before_target = f32(target32);\n  }\n\n  return test_value.value === before_target.value || test_value.value === after_target.value;\n}\n\n/**\n * Calculates the linear interpolation between two values of a given fractional.\n *\n * If |t| is 0, |a| is returned, if |t| is 1, |b| is returned, otherwise\n * interpolation/extrapolation equivalent to a + t(b - a) is performed.\n *\n * Numerical stable version is adapted from http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0811r2.html\n */\nexport function lerp(a: number, b: number, t: number): number {\n  if (!Number.isFinite(a) || !Number.isFinite(b)) {\n    return Number.NaN;\n  }\n\n  if ((a <= 0.0 && b >= 0.0) || (a >= 0.0 && b <= 0.0)) {\n    return t * b + (1 - t) * a;\n  }\n\n  if (t === 1.0) {\n    return b;\n  }\n\n  const x = a + t * (b - a);\n  return t > 1.0 === b > a ? Math.max(b, x) : Math.min(b, x);\n}\n\n/** @returns a linear increasing range of numbers. */\nexport function linearRange(a: number, b: number, num_steps: number): Array<number> {\n  assert(num_steps > 0, '|num_steps| must be greater than 0');\n\n  return Array.from(Array(num_steps).keys()).map(i => lerp(a, b, i / (num_steps - 1)));\n}\n\n/**\n * @returns a non-linear increasing range of numbers, with a bias towards the beginning.\n *\n * Generates a linear range on [0,1] with |num_steps|, then squares all the values to make the curve be quadratic,\n * thus biasing towards 0, but remaining on the [0, 1] range.\n * This biased range is then scaled to the desired range using lerp.\n * Different curves could be generated by changing c, where greater values of c will bias more towards 0.\n * */\nexport function biasedRange(a: number, b: number, num_steps: number): Array<number> {\n  const c = 2;\n  assert(num_steps > 0, '|num_steps| must be greater than 0');\n\n  return Array.from(Array(num_steps).keys()).map(i =>\n    lerp(a, b, Math.pow(lerp(0, 1, i / (num_steps - 1)), c))\n  );\n}\n\n/**\n * @returns the result matrix in Array<Array<number>> type.\n *\n * Matrix multiplication. A is m x n and B is n x p. Returns\n * m x p result.\n */\n// A is m x n. B is n x p. product is m x p.\nexport function multiplyMatrices(\n  A: Array<Array<number>>,\n  B: Array<Array<number>>\n): Array<Array<number>> {\n  assert(A.length > 0 && B.length > 0 && B[0].length > 0 && A[0].length === B.length);\n  const product = new Array<Array<number>>(A.length);\n  for (let i = 0; i < product.length; ++i) {\n    product[i] = new Array<number>(B[0].length).fill(0);\n  }\n\n  for (let m = 0; m < A.length; ++m) {\n    for (let p = 0; p < B[0].length; ++p) {\n      for (let n = 0; n < B.length; ++n) {\n        product[m][p] += A[m][n] * B[n][p];\n      }\n    }\n  }\n\n  return product;\n}\n\n/** Sign-extend the `bits`-bit number `n` to a 32-bit signed integer. */\nexport function signExtend(n: number, bits: number): number {\n  const shift = 32 - bits;\n  return (n << shift) >> shift;\n}\n\n/** @returns the closest 32-bit floating point value to the input */\nexport function quantizeToF32(num: number): number {\n  return f32(num).value as number;\n}\n\n/** @returns the closest 32-bit signed integer value to the input */\nexport function quantizeToI32(num: number): number {\n  return i32(num).value as number;\n}\n"],"file":"math.js"}