{"version":3,"sources":["../../../src/webgpu/util/math.ts"],"names":["assert","kMaxSafeMultipleOf8","Number","MAX_SAFE_INTEGER","align","n","alignment","isInteger","Math","ceil","roundDown","floor","clamp","min","max","diffULP","a","b","isFinite","Infinity","arr","Uint32Array","Float32Array","buffer","u32_a","u32_b","sign_a","sign_b","masked_a","masked_b","subnormal_or_zero_a","subnormal_or_zero_b","bits_a","bits_b"],"mappings":";AAAA;AACA,GADA,SAASA,MAAT,QAAuB,2BAAvB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,mBAAmB,GAAGC,MAAM,CAACC,gBAAP,GAA0B,CAAtD;;AAEP;AACA;AACA,OAAO,SAASC,KAAT,CAAeC,CAAf,EAA0BC,SAA1B,EAAqD;AAC1DN,EAAAA,MAAM,CAACE,MAAM,CAACK,SAAP,CAAiBF,CAAjB,KAAuBA,CAAC,IAAI,CAA7B,EAAgC,kCAAhC,CAAN;AACAL,EAAAA,MAAM,CAACE,MAAM,CAACK,SAAP,CAAiBD,SAAjB,KAA+BA,SAAS,GAAG,CAA5C,EAA+C,sCAA/C,CAAN;AACA,SAAOE,IAAI,CAACC,IAAL,CAAUJ,CAAC,GAAGC,SAAd,IAA2BA,SAAlC;AACD;;AAED;AACA,OAAO,SAASI,SAAT,CAAmBL,CAAnB,EAA8BC,SAA9B,EAAyD;AAC9DN,EAAAA,MAAM,CAACE,MAAM,CAACK,SAAP,CAAiBF,CAAjB,KAAuBA,CAAC,IAAI,CAA7B,EAAgC,kCAAhC,CAAN;AACAL,EAAAA,MAAM,CAACE,MAAM,CAACK,SAAP,CAAiBD,SAAjB,KAA+BA,SAAS,GAAG,CAA5C,EAA+C,sCAA/C,CAAN;AACA,SAAOE,IAAI,CAACG,KAAL,CAAWN,CAAC,GAAGC,SAAf,IAA4BA,SAAnC;AACD;;AAED;AACA,OAAO,SAASM,KAAT,CAAeP,CAAf,EAA0B,EAAEQ,GAAF,EAAOC,GAAP,EAA1B,EAA8E;AACnFd,EAAAA,MAAM,CAACc,GAAG,IAAID,GAAR,CAAN;AACA,SAAOL,IAAI,CAACK,GAAL,CAASL,IAAI,CAACM,GAAL,CAAST,CAAT,EAAYQ,GAAZ,CAAT,EAA2BC,GAA3B,CAAP;AACD;;AAED;AACA;AACA;AACA;AACA,OAAO,SAASC,OAAT,CAAiBC,CAAjB,EAA4BC,CAA5B,EAA+C;AACpD,MAAI,CAACf,MAAM,CAACgB,QAAP,CAAgBF,CAAhB,CAAD,IAAuB,CAACd,MAAM,CAACgB,QAAP,CAAgBD,CAAhB,CAA5B,EAAgD;AAC9C,WAAOE,QAAP;AACD;;AAED,QAAMC,GAAG,GAAG,IAAIC,WAAJ,CAAgB,IAAIC,YAAJ,CAAiB,CAACN,CAAD,EAAIC,CAAJ,CAAjB,EAAyBM,MAAzC,CAAZ;AACA,QAAMC,KAAK,GAAGJ,GAAG,CAAC,CAAD,CAAjB;AACA,QAAMK,KAAK,GAAGL,GAAG,CAAC,CAAD,CAAjB;;AAEA,QAAMM,MAAM,GAAG,CAACF,KAAK,GAAG,UAAT,MAAyB,CAAxC;AACA,QAAMG,MAAM,GAAG,CAACF,KAAK,GAAG,UAAT,MAAyB,CAAxC;AACA,QAAMG,QAAQ,GAAGJ,KAAK,GAAG,UAAzB;AACA,QAAMK,QAAQ,GAAGJ,KAAK,GAAG,UAAzB;AACA,QAAMK,mBAAmB,GAAG,CAACN,KAAK,GAAG,UAAT,MAAyB,CAArD;AACA,QAAMO,mBAAmB,GAAG,CAACN,KAAK,GAAG,UAAT,MAAyB,CAArD;;AAEA;AACA;AACA;AACA;AACA,QAAMO,MAAM,GAAGF,mBAAmB,GAAG,CAAH,GAAOF,QAAQ,GAAG,QAApD;AACA,QAAMK,MAAM,GAAGF,mBAAmB,GAAG,CAAH,GAAOF,QAAQ,GAAG,QAApD;;AAEA,MAAIH,MAAM,KAAKC,MAAf,EAAuB;AACrB,WAAOnB,IAAI,CAACM,GAAL,CAASkB,MAAT,EAAiBC,MAAjB,IAA2BzB,IAAI,CAACK,GAAL,CAASmB,MAAT,EAAiBC,MAAjB,CAAlC;AACD;AACD,SAAOD,MAAM,GAAGC,MAAhB;AACD","sourcesContent":["import { assert } from '../../common/util/util.js';\n\n/**\n * A multiple of 8 guaranteed to be way too large to allocate (just under 8 pebibytes).\n * This is a \"safe\" integer (ULP <= 1.0) very close to MAX_SAFE_INTEGER.\n *\n * Note: allocations of this size are likely to exceed limitations other than just the system's\n * physical memory, so test cases are also needed to try to trigger \"true\" OOM.\n */\nexport const kMaxSafeMultipleOf8 = Number.MAX_SAFE_INTEGER - 7;\n\n/** Round `n` up to the next multiple of `alignment` (inclusive). */\n// TODO: Rename to `roundUp`\nexport function align(n: number, alignment: number): number {\n  assert(Number.isInteger(n) && n >= 0, 'n must be a non-negative integer');\n  assert(Number.isInteger(alignment) && alignment > 0, 'alignment must be a positive integer');\n  return Math.ceil(n / alignment) * alignment;\n}\n\n/** Round `n` down to the next multiple of `alignment` (inclusive). */\nexport function roundDown(n: number, alignment: number): number {\n  assert(Number.isInteger(n) && n >= 0, 'n must be a non-negative integer');\n  assert(Number.isInteger(alignment) && alignment > 0, 'alignment must be a positive integer');\n  return Math.floor(n / alignment) * alignment;\n}\n\n/** Clamp a number to the provided range. */\nexport function clamp(n: number, { min, max }: { min: number; max: number }): number {\n  assert(max >= min);\n  return Math.min(Math.max(n, min), max);\n}\n\n/**\n * @returns the Units of Last Place difference between the numbers a and b.\n * If either `a` or `b` are not finite numbers, then diffULP() returns Infinity.\n */\nexport function diffULP(a: number, b: number): number {\n  if (!Number.isFinite(a) || !Number.isFinite(b)) {\n    return Infinity;\n  }\n\n  const arr = new Uint32Array(new Float32Array([a, b]).buffer);\n  const u32_a = arr[0];\n  const u32_b = arr[1];\n\n  const sign_a = (u32_a & 0x80000000) !== 0;\n  const sign_b = (u32_b & 0x80000000) !== 0;\n  const masked_a = u32_a & 0x7fffffff;\n  const masked_b = u32_b & 0x7fffffff;\n  const subnormal_or_zero_a = (u32_a & 0x7f800000) === 0;\n  const subnormal_or_zero_b = (u32_b & 0x7f800000) === 0;\n\n  // If the number is subnormal, then reduce it to 0 for ULP comparison.\n  // If the number is normal then reduce its bits-representation so to that we\n  // can pretend that the subnormal numbers don't exist, for the purposes of\n  // counting ULP steps from zero (or any subnormal) to any of the normal numbers.\n  const bits_a = subnormal_or_zero_a ? 0 : masked_a - 0x7fffff;\n  const bits_b = subnormal_or_zero_b ? 0 : masked_b - 0x7fffff;\n\n  if (sign_a === sign_b) {\n    return Math.max(bits_a, bits_b) - Math.min(bits_a, bits_b);\n  }\n  return bits_a + bits_b;\n}\n"],"file":"math.js"}