{"version":3,"sources":["../../../src/webgpu/util/device_pool.ts"],"names":["SkipTestCase","getGPU","assert","raceWithRejectOnTimeout","assertReject","DefaultLimits","TestFailedButDeviceReusable","Error","FeaturesNotSupported","TestOOMedShouldAttemptGC","DevicePool","defaultHolder","nonDefaultHolders","DescriptorToHolderMap","reserve","descriptor","DeviceHolder","create","undefined","ex","holder","getOrCreate","state","release","ensureRelease","lostInfo","deleteByDevice","device","destroy","unsupported","Set","holders","Map","k","v","delete","uncanonicalizedDescriptor","key","canonicalizeDescriptor","has","JSON","stringify","value","get","set","add","message","insertAndCleanUp","kMaxEntries","size","desc","featuresCanonicalized","requiredFeatures","Array","from","sort","limitsCanonicalized","requiredLimits","defaultValue","Object","entries","requestedValue","descriptorCanonicalized","supportsFeature","adapter","feature","features","gpu","requestAdapter","requestDevice","constructor","lost","then","ev","acquire","pushErrorScope","kPopErrorScopeTimeoutMS","gpuValidationError","gpuOutOfMemoryError","popErrorScope","GPUValidationError","GPUOutOfMemoryError"],"mappings":";AAAA;AACA,GADA,SAASA,YAAT,QAA6B,mCAA7B,CACA,SAASC,MAAT,QAAuB,oCAAvB,CACA,SAASC,MAAT,EAAiBC,uBAAjB,EAA0CC,YAA1C,QAA8D,2BAA9D;AACA,SAASC,aAAT,QAA8B,iBAA9B;;;;;;AAMA,MAAMC,2BAAN,SAA0CC,KAA1C,CAAgD;AAChD,MAAMC,oBAAN,SAAmCD,KAAnC,CAAyC;AACzC,OAAO,MAAME,wBAAN,SAAuCF,KAAvC,CAA6C;;AAEpD,OAAO,MAAMG,UAAN,CAAiB;AACtB;AACQC,EAAAA,aAAR,GAAmE,eAAnE;AACA;AACQC,EAAAA,iBAAR,GAA4B,IAAIC,qBAAJ,EAA5B;;AAEA;AACA,QAAMC,OAAN,CAAcC,UAAd,EAAqF;AACnF;AACA,QAAI,KAAKJ,aAAL,KAAuB,eAA3B,EAA4C;AAC1C,UAAI;AACF,aAAKA,aAAL,GAAqB,MAAMK,YAAY,CAACC,MAAb,CAAoBC,SAApB,CAA3B;AACD,OAFD,CAEE,OAAOC,EAAP,EAAW;AACX,aAAKR,aAAL,GAAqB,QAArB;AACD;AACF;AACDT,IAAAA,MAAM,CAAC,KAAKS,aAAL,KAAuB,QAAxB,EAAkC,kDAAlC,CAAN;;AAEA,QAAIS,MAAJ;AACA,QAAIL,UAAU,KAAKG,SAAnB,EAA8B;AAC5BE,MAAAA,MAAM,GAAG,KAAKT,aAAd;AACD,KAFD,MAEO;AACLS,MAAAA,MAAM,GAAG,MAAM,KAAKR,iBAAL,CAAuBS,WAAvB,CAAmCN,UAAnC,CAAf;AACD;;AAEDb,IAAAA,MAAM,CAACkB,MAAM,CAACE,KAAP,KAAiB,MAAlB,EAA0B,yCAA1B,CAAN;AACAF,IAAAA,MAAM,CAACE,KAAP,GAAe,UAAf;AACA,WAAOF,MAAP;AACD;;AAED;AACA;AACA,QAAMG,OAAN,CAAcH,MAAd,EAAqD;AACnDlB,IAAAA,MAAM,CAAC,KAAKS,aAAL,YAA8BK,YAA/B,CAAN;AACAd,IAAAA,MAAM,CAACkB,MAAM,YAAYJ,YAAnB,CAAN;;AAEAd,IAAAA,MAAM,CAACkB,MAAM,CAACE,KAAP,KAAiB,MAAlB,EAA0B,mDAA1B,CAAN;;AAEA,QAAI;AACF,YAAMF,MAAM,CAACI,aAAP,EAAN;;AAEA;AACA;AACA;AACAtB,MAAAA,MAAM,CAACkB,MAAM,CAACK,QAAP,KAAoBP,SAArB,EAAiC,iCAAgCE,MAAM,CAACK,QAAS,EAAjF,CAAN;AACD,KAPD,CAOE,OAAON,EAAP,EAAW;AACX;AACA;AACA,UAAI,EAAEA,EAAE,YAAYb,2BAAhB,CAAJ,EAAkD;AAChD,YAAIc,MAAM,KAAK,KAAKT,aAApB,EAAmC;AACjC,eAAKA,aAAL,GAAqB,eAArB;AACD,SAFD,MAEO;AACL,eAAKC,iBAAL,CAAuBc,cAAvB,CAAsCN,MAAM,CAACO,MAA7C;AACD;AACD,YAAI,aAAaP,MAAM,CAACO,MAAxB,EAAgC;AAC9BP,UAAAA,MAAM,CAACO,MAAP,CAAcC,OAAd;AACD;AACF;AACD,YAAMT,EAAN;AACD,KArBD,SAqBU;AACR;AACA;AACAC,MAAAA,MAAM,CAACE,KAAP,GAAe,MAAf;AACD;AACF,GAhEqB;;;AAmExB;AACA;AACA;AACA,MAAMT,qBAAN,CAA4B;AAClBgB,EAAAA,WAAR,GAAmC,IAAIC,GAAJ,EAAnC;AACQC,EAAAA,OAAR,GAA6C,IAAIC,GAAJ,EAA7C;;AAEA;AACAN,EAAAA,cAAc,CAACC,MAAD,EAA0B;AACtC,SAAK,MAAM,CAACM,CAAD,EAAIC,CAAJ,CAAX,IAAqB,KAAKH,OAA1B,EAAmC;AACjC,UAAIG,CAAC,CAACP,MAAF,KAAaA,MAAjB,EAAyB;AACvB,aAAKI,OAAL,CAAaI,MAAb,CAAoBF,CAApB;AACA;AACD;AACF;AACF;;AAED;AACF;AACA;AACA;AACA;AACA;AACE,QAAMZ,WAAN;AACEe,EAAAA,yBADF;AAEyB;AACvB,UAAM,CAACrB,UAAD,EAAasB,GAAb,IAAoBC,sBAAsB,CAACF,yBAAD,CAAhD;AACA;AACA,QAAI,KAAKP,WAAL,CAAiBU,GAAjB,CAAqBF,GAArB,CAAJ,EAA+B;AAC7B,YAAM,IAAIrC,YAAJ;AACH,gDAAyCwC,IAAI,CAACC,SAAL,CAAe1B,UAAf,CAA2B,EADjE,CAAN;;AAGD;;AAED;AACA;AACE,YAAM2B,KAAK,GAAG,KAAKX,OAAL,CAAaY,GAAb,CAAiBN,GAAjB,CAAd;AACA,UAAIK,KAAJ,EAAW;AACT;AACA,aAAKX,OAAL,CAAaI,MAAb,CAAoBE,GAApB;AACA,aAAKN,OAAL,CAAaa,GAAb,CAAiBP,GAAjB,EAAsBK,KAAtB;AACA,eAAOA,KAAP;AACD;AACF;;AAED;AACA,QAAIA,KAAJ;AACA,QAAI;AACFA,MAAAA,KAAK,GAAG,MAAM1B,YAAY,CAACC,MAAb,CAAoBF,UAApB,CAAd;AACD,KAFD,CAEE,OAAOI,EAAP,EAAW;AACX,UAAIA,EAAE,YAAYX,oBAAlB,EAAwC;AACtC,aAAKqB,WAAL,CAAiBgB,GAAjB,CAAqBR,GAArB;AACA,cAAM,IAAIrC,YAAJ;AACH,8CAAqCwC,IAAI,CAACC,SAAL,CAAe1B,UAAf,CAA2B,KAAII,EAAE,EAAE2B,OAAJ,IAAe,EAAG,EADnF,CAAN;;AAGD;;AAED,YAAM3B,EAAN;AACD;AACD,SAAK4B,gBAAL,CAAsBV,GAAtB,EAA2BK,KAA3B;AACA,WAAOA,KAAP;AACD;;AAED;AACQK,EAAAA,gBAAR,CAAyBV,GAAzB,EAAsCK,KAAtC,EAA2D;AACzD,SAAKX,OAAL,CAAaa,GAAb,CAAiBP,GAAjB,EAAsBK,KAAtB;;AAEA,UAAMM,WAAW,GAAG,CAApB;AACA,QAAI,KAAKjB,OAAL,CAAakB,IAAb,GAAoBD,WAAxB,EAAqC;AACnC;AACA,WAAK,MAAM,CAACX,GAAD,CAAX,IAAoB,KAAKN,OAAzB,EAAkC;AAChC,aAAKA,OAAL,CAAaI,MAAb,CAAoBE,GAApB;AACA;AACD;AACF;AACF,GAxEyB;;;;;;;;;;;;;;;;;;;AA2F5B;AACA;AACA;AACA;AACA;AACA,SAASC,sBAAT;AACEY,IADF;AAEuC;AACrC,QAAMC,qBAAqB,GAAGD,IAAI,CAACE,gBAAL;AAC1BC,EAAAA,KAAK,CAACC,IAAN,CAAW,IAAIxB,GAAJ,CAAQoB,IAAI,CAACE,gBAAb,CAAX,EAA2CG,IAA3C,EAD0B;AAE1B,IAFJ;;AAIA;AACF;AACE,QAAMC,mBAA2C,GAAG,EAApD;AACA,MAAIN,IAAI,CAACO,cAAT,EAAyB;AACvB,SAAK,MAAM,CAACxB,CAAD,EAAIyB,YAAJ,CAAX,IAAgCC,MAAM,CAACC,OAAP,CAAevD,aAAf,CAAhC,EAA+D;AAC7D,YAAMwD,cAAc,GAAGX,IAAI,CAACO,cAAL,CAAoBxB,CAApB,CAAvB;AACA;AACA,UAAI4B,cAAc,KAAK3C,SAAnB,IAAgC2C,cAAc,KAAKH,YAAvD,EAAqE;AACnEF,QAAAA,mBAAmB,CAACvB,CAAD,CAAnB,GAAyB4B,cAAzB;AACD;AACF;AACF;;AAED;AACA,QAAMC,uBAAkD,GAAG;AACzDV,IAAAA,gBAAgB,EAAED,qBADuC;AAEzDM,IAAAA,cAAc,EAAED,mBAFyC,EAA3D;;AAIA,SAAO,CAACM,uBAAD,EAA0BtB,IAAI,CAACC,SAAL,CAAeqB,uBAAf,CAA1B,CAAP;AACD;;AAED,SAASC,eAAT;AACEC,OADF;AAEEjD,UAFF;AAGW;AACT,MAAIA,UAAU,KAAKG,SAAnB,EAA8B;AAC5B,WAAO,IAAP;AACD;;AAED,OAAK,MAAM+C,OAAX,IAAsBlD,UAAU,CAACqC,gBAAjC,EAAmD;AACjD,QAAI,CAACY,OAAO,CAACE,QAAR,CAAiB3B,GAAjB,CAAqB0B,OAArB,CAAL,EAAoC;AAClC,aAAO,KAAP;AACD;AACF;;AAED,SAAO,IAAP;AACD;;AAED;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,MAAMjD,YAAN,CAA6C;;AAE3CM,EAAAA,KAAK,GAAsB,MAAtB;AACL;;;AAGA;AACA;AACA,eAAaL,MAAb,CAAoBF,UAApB,EAA8F;AAC5F,UAAMoD,GAAG,GAAGlE,MAAM,EAAlB;AACA,UAAM+D,OAAO,GAAG,MAAMG,GAAG,CAACC,cAAJ,EAAtB;AACAlE,IAAAA,MAAM,CAAC8D,OAAO,KAAK,IAAb,EAAmB,8BAAnB,CAAN;AACA,QAAI,CAACD,eAAe,CAACC,OAAD,EAAUjD,UAAV,CAApB,EAA2C;AACzC,YAAM,IAAIP,oBAAJ,CAAyB,wCAAzB,CAAN;AACD;AACD,UAAMmB,MAAM,GAAG,MAAMqC,OAAO,CAACK,aAAR,CAAsBtD,UAAtB,CAArB;AACAb,IAAAA,MAAM,CAACyB,MAAM,KAAK,IAAZ,EAAkB,6BAAlB,CAAN;;AAEA,WAAO,IAAIX,YAAJ,CAAiBW,MAAjB,CAAP;AACD;;AAEO2C,EAAAA,WAAR,CAAoB3C,MAApB,EAAuC;AACrC,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKA,MAAL,CAAY4C,IAAZ,CAAiBC,IAAjB,CAAsBC,EAAE,IAAI;AAC1B,WAAKhD,QAAL,GAAgBgD,EAAhB;AACD,KAFD;AAGD;;AAEDC,EAAAA,OAAO,GAAc;AACnBxE,IAAAA,MAAM,CAAC,KAAKoB,KAAL,KAAe,UAAhB,CAAN;AACA,SAAKA,KAAL,GAAa,UAAb;AACA,SAAKK,MAAL,CAAYgD,cAAZ,CAA2B,eAA3B;AACA,SAAKhD,MAAL,CAAYgD,cAAZ,CAA2B,YAA3B;AACA,WAAO,KAAKhD,MAAZ;AACD;;AAED,QAAMH,aAAN,GAAqC;AACnC,UAAMoD,uBAAuB,GAAG,IAAhC;;AAEA1E,IAAAA,MAAM,CAAC,KAAKoB,KAAL,KAAe,MAAhB,CAAN;AACA,QAAI;AACF,UAAI,KAAKA,KAAL,KAAe,UAAnB,EAA+B;AAC7B;AACA;AACA,cAAMnB,uBAAuB;AAC3B,aAAKoB,OAAL,EAD2B;AAE3BqD,QAAAA,uBAF2B;AAG3B,8CAH2B,CAA7B;;AAKD;AACF,KAVD,SAUU;AACR,WAAKtD,KAAL,GAAa,MAAb;AACD;AACF;;AAED,QAAcC,OAAd,GAAuC;AACrC;AACA;AACA,QAAIsD,kBAAJ;AACA,QAAIC,mBAAJ;;AAEA,QAAI;AACF;AACAD,MAAAA,kBAAkB,GAAG,MAAM,KAAKlD,MAAL,CAAYoD,aAAZ,EAA3B;AACAD,MAAAA,mBAAmB,GAAG,MAAM,KAAKnD,MAAL,CAAYoD,aAAZ,EAA5B;AACD,KAJD,CAIE,OAAO5D,EAAP,EAAW;AACXjB,MAAAA,MAAM;AACJ,WAAKuB,QAAL,KAAkBP,SADd;AAEJ,wEAFI,CAAN;;AAIA,YAAMC,EAAN;AACD;;AAED,UAAMf,YAAY;AAChB,SAAKuB,MAAL,CAAYoD,aAAZ,EADgB;AAEhB,8DAFgB,CAAlB;;;AAKA,QAAIF,kBAAkB,KAAK,IAA3B,EAAiC;AAC/B3E,MAAAA,MAAM,CAAC2E,kBAAkB,YAAYG,kBAA/B,CAAN;AACA;AACA,YAAM,IAAI1E,2BAAJ;AACH,+CAAwCuE,kBAAkB,CAAC/B,OAAQ,EADhE,CAAN;;AAGD;AACD,QAAIgC,mBAAmB,KAAK,IAA5B,EAAkC;AAChC5E,MAAAA,MAAM,CAAC4E,mBAAmB,YAAYG,mBAAhC,CAAN;AACA;AACA,YAAM,IAAIxE,wBAAJ,CAA6B,yCAA7B,CAAN;AACD;AACF,GA1F0C","sourcesContent":["import { SkipTestCase } from '../../common/framework/fixture.js';\nimport { getGPU } from '../../common/util/navigator_gpu.js';\nimport { assert, raceWithRejectOnTimeout, assertReject } from '../../common/util/util.js';\nimport { DefaultLimits } from '../constants.js';\n\nexport interface DeviceProvider {\n  acquire(): GPUDevice;\n}\n\nclass TestFailedButDeviceReusable extends Error {}\nclass FeaturesNotSupported extends Error {}\nexport class TestOOMedShouldAttemptGC extends Error {}\n\nexport class DevicePool {\n  /** Device with no descriptor. */\n  private defaultHolder: DeviceHolder | 'uninitialized' | 'failed' = 'uninitialized';\n  /** Devices with descriptors. */\n  private nonDefaultHolders = new DescriptorToHolderMap();\n\n  /** Request a device from the pool. */\n  async reserve(descriptor?: UncanonicalizedDeviceDescriptor): Promise<DeviceProvider> {\n    // Always attempt to initialize default device, to see if it succeeds.\n    if (this.defaultHolder === 'uninitialized') {\n      try {\n        this.defaultHolder = await DeviceHolder.create(undefined);\n      } catch (ex) {\n        this.defaultHolder = 'failed';\n      }\n    }\n    assert(this.defaultHolder !== 'failed', 'WebGPU device failed to initialize; not retrying');\n\n    let holder;\n    if (descriptor === undefined) {\n      holder = this.defaultHolder;\n    } else {\n      holder = await this.nonDefaultHolders.getOrCreate(descriptor);\n    }\n\n    assert(holder.state === 'free', 'Device was in use on DevicePool.acquire');\n    holder.state = 'reserved';\n    return holder;\n  }\n\n  // When a test is done using a device, it's released back into the pool.\n  // This waits for error scopes, checks their results, and checks for various error conditions.\n  async release(holder: DeviceProvider): Promise<void> {\n    assert(this.defaultHolder instanceof DeviceHolder);\n    assert(holder instanceof DeviceHolder);\n\n    assert(holder.state !== 'free', 'trying to release a device while already released');\n\n    try {\n      await holder.ensureRelease();\n\n      // (Hopefully if the device was lost, it has been reported by the time endErrorScopes()\n      // has finished (or timed out). If not, it could cause a finite number of extra test\n      // failures following this one (but should recover eventually).)\n      assert(holder.lostInfo === undefined, `Device was unexpectedly lost: ${holder.lostInfo}`);\n    } catch (ex) {\n      // Any error that isn't explicitly TestFailedButDeviceReusable forces a new device to be\n      // created for the next test.\n      if (!(ex instanceof TestFailedButDeviceReusable)) {\n        if (holder === this.defaultHolder) {\n          this.defaultHolder = 'uninitialized';\n        } else {\n          this.nonDefaultHolders.deleteByDevice(holder.device);\n        }\n        if ('destroy' in holder.device) {\n          holder.device.destroy();\n        }\n      }\n      throw ex;\n    } finally {\n      // Mark the holder as free. (This only has an effect if the pool still has the holder.)\n      // This could be done at the top but is done here to guard against async-races during release.\n      holder.state = 'free';\n    }\n  }\n}\n\n/**\n * Map from GPUDeviceDescriptor to DeviceHolder.\n */\nclass DescriptorToHolderMap {\n  private unsupported: Set<string> = new Set();\n  private holders: Map<string, DeviceHolder> = new Map();\n\n  /** Deletes an item from the map by GPUDevice value. */\n  deleteByDevice(device: GPUDevice): void {\n    for (const [k, v] of this.holders) {\n      if (v.device === device) {\n        this.holders.delete(k);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Gets a DeviceHolder from the map if it exists; otherwise, calls create() to create one,\n   * inserts it, and returns it.\n   *\n   * Throws SkipTestCase if devices with this descriptor are unsupported.\n   */\n  async getOrCreate(\n    uncanonicalizedDescriptor: UncanonicalizedDeviceDescriptor\n  ): Promise<DeviceHolder> {\n    const [descriptor, key] = canonicalizeDescriptor(uncanonicalizedDescriptor);\n    // Never retry unsupported configurations.\n    if (this.unsupported.has(key)) {\n      throw new SkipTestCase(\n        `GPUDeviceDescriptor previously failed: ${JSON.stringify(descriptor)}`\n      );\n    }\n\n    // Search for an existing device with the same descriptor.\n    {\n      const value = this.holders.get(key);\n      if (value) {\n        // Move it to the end of the Map (most-recently-used).\n        this.holders.delete(key);\n        this.holders.set(key, value);\n        return value;\n      }\n    }\n\n    // No existing item was found; add a new one.\n    let value;\n    try {\n      value = await DeviceHolder.create(descriptor);\n    } catch (ex) {\n      if (ex instanceof FeaturesNotSupported) {\n        this.unsupported.add(key);\n        throw new SkipTestCase(\n          `GPUDeviceDescriptor not supported: ${JSON.stringify(descriptor)}\\n${ex?.message ?? ''}`\n        );\n      }\n\n      throw ex;\n    }\n    this.insertAndCleanUp(key, value);\n    return value;\n  }\n\n  /** Insert an entry, then remove the least-recently-used items if there are too many. */\n  private insertAndCleanUp(key: string, value: DeviceHolder) {\n    this.holders.set(key, value);\n\n    const kMaxEntries = 5;\n    if (this.holders.size > kMaxEntries) {\n      // Delete the first (least recently used) item in the set.\n      for (const [key] of this.holders) {\n        this.holders.delete(key);\n        return;\n      }\n    }\n  }\n}\n\nexport type UncanonicalizedDeviceDescriptor = {\n  requiredFeatures?: Iterable<GPUFeatureName>;\n  requiredLimits?: Record<string, GPUSize32>;\n  /** @deprecated this field cannot be used */\n  nonGuaranteedFeatures?: undefined;\n  /** @deprecated this field cannot be used */\n  nonGuaranteedLimits?: undefined;\n  /** @deprecated this field cannot be used */\n  extensions?: undefined;\n  /** @deprecated this field cannot be used */\n  features?: undefined;\n};\ntype CanonicalDeviceDescriptor = Omit<\n  Required<GPUDeviceDescriptor>,\n  'label' | 'nonGuaranteedFeatures' | 'nonGuaranteedLimits'\n>;\n/**\n * Make a stringified map-key from a GPUDeviceDescriptor.\n * Tries to make sure all defaults are resolved, first - but it's okay if some are missed\n * (it just means some GPUDevice objects won't get deduplicated).\n */\nfunction canonicalizeDescriptor(\n  desc: UncanonicalizedDeviceDescriptor\n): [CanonicalDeviceDescriptor, string] {\n  const featuresCanonicalized = desc.requiredFeatures\n    ? Array.from(new Set(desc.requiredFeatures)).sort()\n    : [];\n\n  /** Canonicalized version of the requested limits: in canonical order, with only values which are\n   * specified _and_ non-default. */\n  const limitsCanonicalized: Record<string, number> = {};\n  if (desc.requiredLimits) {\n    for (const [k, defaultValue] of Object.entries(DefaultLimits)) {\n      const requestedValue = desc.requiredLimits[k];\n      // Skip adding a limit to limitsCanonicalized if it is the same as the default.\n      if (requestedValue !== undefined && requestedValue !== defaultValue) {\n        limitsCanonicalized[k] = requestedValue;\n      }\n    }\n  }\n\n  // Type ensures every field is carried through.\n  const descriptorCanonicalized: CanonicalDeviceDescriptor = {\n    requiredFeatures: featuresCanonicalized,\n    requiredLimits: limitsCanonicalized,\n  };\n  return [descriptorCanonicalized, JSON.stringify(descriptorCanonicalized)];\n}\n\nfunction supportsFeature(\n  adapter: GPUAdapter,\n  descriptor: CanonicalDeviceDescriptor | undefined\n): boolean {\n  if (descriptor === undefined) {\n    return true;\n  }\n\n  for (const feature of descriptor.requiredFeatures) {\n    if (!adapter.features.has(feature)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * DeviceHolder has three states:\n * - 'free': Free to be used for a new test.\n * - 'reserved': Reserved by a running test, but has not had error scopes created yet.\n * - 'acquired': Reserved by a running test, and has had error scopes created.\n */\ntype DeviceHolderState = 'free' | 'reserved' | 'acquired';\n\n/**\n * Holds a GPUDevice and tracks its state (free/reserved/acquired) and handles device loss.\n */\nclass DeviceHolder implements DeviceProvider {\n  readonly device: GPUDevice;\n  state: DeviceHolderState = 'free';\n  // initially undefined; becomes set when the device is lost\n  lostInfo?: GPUDeviceLostInfo;\n\n  // Gets a device and creates a DeviceHolder.\n  // If the device is lost, DeviceHolder.lost gets set.\n  static async create(descriptor: CanonicalDeviceDescriptor | undefined): Promise<DeviceHolder> {\n    const gpu = getGPU();\n    const adapter = await gpu.requestAdapter();\n    assert(adapter !== null, 'requestAdapter returned null');\n    if (!supportsFeature(adapter, descriptor)) {\n      throw new FeaturesNotSupported('One or more features are not supported');\n    }\n    const device = await adapter.requestDevice(descriptor);\n    assert(device !== null, 'requestDevice returned null');\n\n    return new DeviceHolder(device);\n  }\n\n  private constructor(device: GPUDevice) {\n    this.device = device;\n    this.device.lost.then(ev => {\n      this.lostInfo = ev;\n    });\n  }\n\n  acquire(): GPUDevice {\n    assert(this.state === 'reserved');\n    this.state = 'acquired';\n    this.device.pushErrorScope('out-of-memory');\n    this.device.pushErrorScope('validation');\n    return this.device;\n  }\n\n  async ensureRelease(): Promise<void> {\n    const kPopErrorScopeTimeoutMS = 5000;\n\n    assert(this.state !== 'free');\n    try {\n      if (this.state === 'acquired') {\n        // Time out if popErrorScope never completes. This could happen due to a browser bug - e.g.,\n        // as of this writing, on Chrome GPU process crash, popErrorScope just hangs.\n        await raceWithRejectOnTimeout(\n          this.release(),\n          kPopErrorScopeTimeoutMS,\n          'finalization popErrorScope timed out'\n        );\n      }\n    } finally {\n      this.state = 'free';\n    }\n  }\n\n  private async release(): Promise<void> {\n    // End the whole-test error scopes. Check that there are no extra error scopes, and that no\n    // otherwise-uncaptured errors occurred during the test.\n    let gpuValidationError: GPUValidationError | GPUOutOfMemoryError | null;\n    let gpuOutOfMemoryError: GPUValidationError | GPUOutOfMemoryError | null;\n\n    try {\n      // May reject if the device was lost.\n      gpuValidationError = await this.device.popErrorScope();\n      gpuOutOfMemoryError = await this.device.popErrorScope();\n    } catch (ex) {\n      assert(\n        this.lostInfo !== undefined,\n        'popErrorScope failed; should only happen if device has been lost'\n      );\n      throw ex;\n    }\n\n    await assertReject(\n      this.device.popErrorScope(),\n      'There was an extra error scope on the stack after a test'\n    );\n\n    if (gpuValidationError !== null) {\n      assert(gpuValidationError instanceof GPUValidationError);\n      // Allow the device to be reused.\n      throw new TestFailedButDeviceReusable(\n        `Unexpected validation error occurred: ${gpuValidationError.message}`\n      );\n    }\n    if (gpuOutOfMemoryError !== null) {\n      assert(gpuOutOfMemoryError instanceof GPUOutOfMemoryError);\n      // Don't allow the device to be reused; unexpected OOM could break the device.\n      throw new TestOOMedShouldAttemptGC('Unexpected out-of-memory error occurred');\n    }\n  }\n}\n"],"file":"device_pool.js"}