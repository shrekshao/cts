{"version":3,"file":"getCurrentTexture.spec.js","names":["description","SkipTestCase","makeTestGroup","assert","unreachable","GPUTest","kAllCanvasTypes","createCanvas","GPUContextTest","initCanvasContext","canvasType","canvas","ctx","getContext","GPUCanvasContext","configure","device","format","usage","GPUTextureUsage","RENDER_ATTACHMENT","COPY_SRC","g","test","desc","params","u","combine","fn","t","shouldThrow","getCurrentTexture","prevTexture","currentTexture","expect","unconfigure","frameTexture","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","view","createView","clearValue","loadOp","storeOp","end","queue","submit","finish","expectSingleColor","size","width","height","exp","R","G","B","A","destroy","beginSubcases","beforeAllSubcases","OffscreenCanvas","prototype","clearTexture","Promise","resolve","frameCount","frameCheck","requestAnimationFrame","transferToImageBitmap"],"sources":["../../../../src/webgpu/web_platform/canvas/getCurrentTexture.spec.ts"],"sourcesContent":["export const description = `\nTests for GPUCanvasContext.getCurrentTexture.\n`;\n\nimport { SkipTestCase } from '../../../common/framework/fixture.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { assert, unreachable } from '../../../common/util/util.js';\nimport { GPUTest } from '../../gpu_test.js';\nimport { kAllCanvasTypes, createCanvas, CanvasType } from '../../util/create_elements.js';\n\nclass GPUContextTest extends GPUTest {\n  initCanvasContext(canvasType: CanvasType = 'onscreen'): GPUCanvasContext {\n    const canvas = createCanvas(this, canvasType, 2, 2);\n    const ctx = canvas.getContext('webgpu');\n    assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n    ctx.configure({\n      device: this.device,\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n    });\n\n    return ctx;\n  }\n}\n\nexport const g = makeTestGroup(GPUContextTest);\n\ng.test('configured')\n  .desc(\n    `Checks that calling getCurrentTexture requires the context to be configured first, and\n  that each call to configure causes getCurrentTexture to return a new texture.`\n  )\n  .params(u =>\n    u //\n      .combine('canvasType', kAllCanvasTypes)\n  )\n  .fn(t => {\n    const canvas = createCanvas(t, t.params.canvasType, 2, 2);\n    const ctx = canvas.getContext('webgpu');\n    assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n    // Calling getCurrentTexture prior to configuration should throw an exception.\n    t.shouldThrow(true, () => {\n      ctx.getCurrentTexture();\n    });\n\n    // Once the context has been configured getCurrentTexture can be called.\n    ctx.configure({\n      device: t.device,\n      format: 'rgba8unorm',\n    });\n\n    let prevTexture = ctx.getCurrentTexture();\n\n    // Calling configure again with different values will change the texture returned.\n    ctx.configure({\n      device: t.device,\n      format: 'bgra8unorm',\n    });\n\n    let currentTexture = ctx.getCurrentTexture();\n    t.expect(prevTexture !== currentTexture);\n    prevTexture = currentTexture;\n\n    // Calling configure again with the same values will still change the texture returned.\n    ctx.configure({\n      device: t.device,\n      format: 'bgra8unorm',\n    });\n\n    currentTexture = ctx.getCurrentTexture();\n    t.expect(prevTexture !== currentTexture);\n    prevTexture = currentTexture;\n\n    // Calling getCurrentTexture after calling unconfigure should throw an exception.\n    ctx.unconfigure();\n\n    t.shouldThrow(true, () => {\n      ctx.getCurrentTexture();\n    });\n  });\n\ng.test('single_frames')\n  .desc(`Checks that the value of getCurrentTexture is consistent within a single frame.`)\n  .params(u =>\n    u //\n      .combine('canvasType', kAllCanvasTypes)\n  )\n  .fn(t => {\n    const ctx = t.initCanvasContext(t.params.canvasType);\n    const frameTexture = ctx.getCurrentTexture();\n\n    // Calling getCurrentTexture a second time returns the same texture.\n    t.expect(frameTexture === ctx.getCurrentTexture());\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: frameTexture.createView(),\n          clearValue: [1.0, 0.0, 0.0, 1.0],\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n    pass.end();\n    t.device.queue.submit([encoder.finish()]);\n\n    // Calling getCurrentTexture after performing some work on the texture returns the same texture.\n    t.expect(frameTexture === ctx.getCurrentTexture());\n\n    // Ensure that getCurrentTexture does not clear the texture.\n    t.expectSingleColor(frameTexture, frameTexture.format, {\n      size: [frameTexture.width, frameTexture.height, 1],\n      exp: { R: 1, G: 0, B: 0, A: 1 },\n    });\n\n    frameTexture.destroy();\n\n    // Calling getCurrentTexture after destroying the texture still returns the same texture.\n    t.expect(frameTexture === ctx.getCurrentTexture());\n  });\n\ng.test('multiple_frames')\n  .desc(`Checks that the value of getCurrentTexture differs across multiple frames.`)\n  .params(u =>\n    u //\n      .combine('canvasType', kAllCanvasTypes)\n      .beginSubcases()\n      .combine('clearTexture', [true, false])\n  )\n  .beforeAllSubcases(t => {\n    const { canvasType } = t.params;\n    if (canvasType === 'offscreen' && !('transferToImageBitmap' in OffscreenCanvas.prototype)) {\n      throw new SkipTestCase('transferToImageBitmap not supported');\n    }\n  })\n  .fn(t => {\n    const { canvasType, clearTexture } = t.params;\n\n    return new Promise(resolve => {\n      const ctx = t.initCanvasContext(canvasType);\n      let prevTexture: GPUTexture | undefined;\n      let frameCount = 0;\n\n      function frameCheck() {\n        const currentTexture = ctx.getCurrentTexture();\n\n        if (prevTexture) {\n          // Ensure that each frame a new texture object is returned.\n          t.expect(currentTexture !== prevTexture);\n\n          // Ensure that texture contents are transparent black.\n          t.expectSingleColor(currentTexture, currentTexture.format, {\n            size: [currentTexture.width, currentTexture.height, 1],\n            exp: { R: 0, G: 0, B: 0, A: 0 },\n          });\n        }\n\n        if (clearTexture) {\n          // Clear the texture to test that texture contents don't carry over from frame to frame.\n          const encoder = t.device.createCommandEncoder();\n          const pass = encoder.beginRenderPass({\n            colorAttachments: [\n              {\n                view: currentTexture.createView(),\n                clearValue: [1.0, 0.0, 0.0, 1.0],\n                loadOp: 'clear',\n                storeOp: 'store',\n              },\n            ],\n          });\n          pass.end();\n          t.device.queue.submit([encoder.finish()]);\n        }\n\n        prevTexture = currentTexture;\n\n        if (frameCount++ < 5) {\n          // Which method will be used to begin a new \"frame\"?\n          switch (canvasType) {\n            case 'onscreen':\n              requestAnimationFrame(frameCheck);\n              break;\n            case 'offscreen': {\n              (ctx.canvas as OffscreenCanvas).transferToImageBitmap();\n              // The beginning of frameCheck runs immediately (in the same task), so this\n              // verifies the state has changed synchronously.\n              void frameCheck();\n              break;\n            }\n            default:\n              unreachable();\n          }\n        } else {\n          resolve();\n        }\n      }\n\n      void frameCheck();\n    });\n  });\n\ng.test('resize')\n  .desc(`Checks the value of getCurrentTexture differs when the canvas is resized.`)\n  .params(u =>\n    u //\n      .combine('canvasType', kAllCanvasTypes)\n  )\n  .fn(t => {\n    const ctx = t.initCanvasContext(t.params.canvasType);\n    let prevTexture = ctx.getCurrentTexture();\n\n    // Trigger a resize by changing the width.\n    ctx.canvas.width = 4;\n\n    // When the canvas resizes the texture returned by getCurrentTexture should immediately begin\n    // returning a new texture matching the update dimensions.\n    let currentTexture = ctx.getCurrentTexture();\n    t.expect(prevTexture !== currentTexture);\n    t.expect(currentTexture.width === ctx.canvas.width);\n    t.expect(currentTexture.height === ctx.canvas.height);\n\n    // The width and height of the previous texture should remain unchanged.\n    t.expect(prevTexture.width === 2);\n    t.expect(prevTexture.height === 2);\n    prevTexture = currentTexture;\n\n    // Ensure that texture contents are transparent black.\n    t.expectSingleColor(currentTexture, currentTexture.format, {\n      size: [currentTexture.width, currentTexture.height, 1],\n      exp: { R: 0, G: 0, B: 0, A: 0 },\n    });\n\n    // Trigger a resize by changing the height.\n    ctx.canvas.height = 4;\n\n    // Check to ensure the texture is resized again.\n    currentTexture = ctx.getCurrentTexture();\n    t.expect(prevTexture !== currentTexture);\n    t.expect(currentTexture.width === ctx.canvas.width);\n    t.expect(currentTexture.height === ctx.canvas.height);\n    t.expect(prevTexture.width === 4);\n    t.expect(prevTexture.height === 2);\n    prevTexture = currentTexture;\n\n    // Ensure that texture contents are transparent black.\n    t.expectSingleColor(currentTexture, currentTexture.format, {\n      size: [currentTexture.width, currentTexture.height, 1],\n      exp: { R: 0, G: 0, B: 0, A: 0 },\n    });\n\n    // Simply setting the canvas width and height values to their current values should not trigger\n    // a change in the texture.\n    ctx.canvas.width = 4;\n    ctx.canvas.height = 4;\n\n    currentTexture = ctx.getCurrentTexture();\n    t.expect(prevTexture === currentTexture);\n  });\n"],"mappings":"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"}