{"version":3,"sources":["../../../../src/webgpu/web_platform/canvas/readbackFromWebGPUCanvas.spec.ts"],"names":["description","makeTestGroup","assert","raceWithRejectOnTimeout","unreachable","kCanvasTextureFormats","GPUTest","checkElementsEqual","kAllCanvasTypes","createCanvas","createOnscreenCanvas","g","expect","Uint8ClampedArray","webglExpect","initCanvasContent","t","format","canvasType","canvas","ctx","getContext","configure","device","usage","GPUTextureUsage","COPY_SRC","COPY_DST","canvasTexture","getCurrentTexture","tempTexture","createTexture","size","width","height","depthOrArrayLayers","RENDER_ATTACHMENT","tempTextureView","createView","encoder","createCommandEncoder","clearOnePixel","origin","color","pass","beginRenderPass","colorAttachments","view","clearValue","loadOp","storeOp","end","copyTextureToTexture","texture","queue","submit","finish","destroy","onSubmittedWorkDone","checkImageResult","image","drawImage","readPixelsFrom2DCanvasAndCompare","actual","getImageData","data","expectOK","test","desc","params","u","combine","fn","snapshot","snapshotType","url","toDataURL","img","Image","src","decode","blobFromCanvas","Promise","resolve","toBlob","blob","URL","createObjectURL","createImageBitmap","offscreenCanvas","convertToBlob","undefined","skip","transferToImageBitmap","webgl","upload","expectCanvas","gl","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texSubImage2D","fb","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","pixels","Uint8Array","readPixels","webgpuCanvasType","canvas2DType"],"mappings":"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","sourcesContent":["export const description = `\nTests for readback from WebGPU Canvas.\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { assert, raceWithRejectOnTimeout, unreachable } from '../../../common/util/util.js';\nimport { kCanvasTextureFormats } from '../../capability_info.js';\nimport { GPUTest } from '../../gpu_test.js';\nimport { checkElementsEqual } from '../../util/check_contents.js';\nimport {\n  kAllCanvasTypes,\n  CanvasType,\n  createCanvas,\n  createOnscreenCanvas,\n} from '../../util/create_elements.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n// Use four pixels rectangle for the test:\n// blue: top-left;\n// green: top-right;\n// red: bottom-left;\n// yellow: bottom-right;\nconst expect = /* prettier-ignore */ new Uint8ClampedArray([\n  0x00, 0x00, 0xff, 0xff, // blue\n  0x00, 0xff, 0x00, 0xff, // green\n  0xff, 0x00, 0x00, 0xff, // red\n  0xff, 0xff, 0x00, 0xff, // yellow\n]);\n\n// WebGL has opposite Y direction so we need to\n// flipY to get correct expects.\nconst webglExpect = /* prettier-ignore */ new Uint8ClampedArray([\n  0xff, 0x00, 0x00, 0xff, // red\n  0xff, 0xff, 0x00, 0xff, // yellow\n  0x00, 0x00, 0xff, 0xff, // blue\n  0x00, 0xff, 0x00, 0xff, // green\n]);\n\nasync function initCanvasContent(\n  t: GPUTest,\n  format: GPUTextureFormat,\n  canvasType: CanvasType\n): Promise<HTMLCanvasElement | OffscreenCanvas> {\n  const canvas = createCanvas(t, canvasType, 2, 2);\n  const ctx = canvas.getContext('webgpu' as const);\n  assert(ctx !== null, 'Failed to get WebGPU context from canvas');\n\n  ctx.configure({\n    device: t.device,\n    format,\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n  });\n\n  const canvasTexture = ctx.getCurrentTexture();\n  const tempTexture = t.device.createTexture({\n    size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n    format,\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n  const tempTextureView = tempTexture.createView();\n  const encoder = t.device.createCommandEncoder();\n\n  const clearOnePixel = (origin: GPUOrigin3D, color: GPUColor) => {\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        { view: tempTextureView, clearValue: color, loadOp: 'clear', storeOp: 'store' },\n      ],\n    });\n    pass.end();\n    encoder.copyTextureToTexture(\n      { texture: tempTexture },\n      { texture: canvasTexture, origin },\n      { width: 1, height: 1 }\n    );\n  };\n\n  clearOnePixel([0, 0], [0, 0, 1, 1]);\n  clearOnePixel([1, 0], [0, 1, 0, 1]);\n  clearOnePixel([0, 1], [1, 0, 0, 1]);\n  clearOnePixel([1, 1], [1, 1, 0, 1]);\n\n  t.device.queue.submit([encoder.finish()]);\n  tempTexture.destroy();\n\n  await t.device.queue.onSubmittedWorkDone();\n\n  return canvas;\n}\n\nfunction checkImageResult(t: GPUTest, image: CanvasImageSource, expect: Uint8ClampedArray) {\n  const canvas: HTMLCanvasElement = createOnscreenCanvas(t, 2, 2);\n  const ctx = canvas.getContext('2d');\n  assert(ctx !== null);\n  ctx.drawImage(image, 0, 0);\n  readPixelsFrom2DCanvasAndCompare(t, ctx, expect);\n}\n\nfunction readPixelsFrom2DCanvasAndCompare(\n  t: GPUTest,\n  ctx: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D,\n  expect: Uint8ClampedArray\n) {\n  const actual = ctx.getImageData(0, 0, 2, 2).data;\n\n  t.expectOK(checkElementsEqual(actual, expect));\n}\n\ng.test('onscreenCanvas,snapshot')\n  .desc(\n    `\n    Ensure snapshot of canvas with WebGPU context is correct\n\n    TODO: Snapshot canvas to jpeg, webp and other mime type and\n          different quality. Maybe we should test them in reftest.\n    `\n  )\n  .params(u =>\n    u //\n      .combine('format', kCanvasTextureFormats)\n      .combine('snapshotType', ['toDataURL', 'toBlob', 'imageBitmap'])\n  )\n  .fn(async t => {\n    const canvas = (await initCanvasContent(t, t.params.format, 'onscreen')) as HTMLCanvasElement;\n\n    let snapshot: HTMLImageElement | ImageBitmap;\n    switch (t.params.snapshotType) {\n      case 'toDataURL': {\n        const url = canvas.toDataURL();\n        const img = new Image(canvas.width, canvas.height);\n        img.src = url;\n        await raceWithRejectOnTimeout(img.decode(), 5000, 'load image timeout');\n        snapshot = img;\n        break;\n      }\n      case 'toBlob': {\n        const blobFromCanvas = new Promise(resolve => {\n          canvas.toBlob(blob => resolve(blob));\n        });\n        const blob = (await blobFromCanvas) as Blob;\n        const url = URL.createObjectURL(blob);\n        const img = new Image(canvas.width, canvas.height);\n        img.src = url;\n        await raceWithRejectOnTimeout(img.decode(), 5000, 'load image timeout');\n        snapshot = img;\n        break;\n      }\n      case 'imageBitmap': {\n        snapshot = await createImageBitmap(canvas);\n        break;\n      }\n      default:\n        unreachable();\n    }\n\n    checkImageResult(t, snapshot, expect);\n  });\n\ng.test('offscreenCanvas,snapshot')\n  .desc(\n    `\n    Ensure snapshot of offscreenCanvas with WebGPU context is correct\n\n    TODO: Snapshot offscreenCanvas to jpeg, webp and other mime type and\n          different quality. Maybe we should test them in reftest.\n    `\n  )\n  .params(u =>\n    u //\n      .combine('format', kCanvasTextureFormats)\n      .combine('snapshotType', ['convertToBlob', 'transferToImageBitmap', 'imageBitmap'])\n  )\n  .fn(async t => {\n    const offscreenCanvas = (await initCanvasContent(\n      t,\n      t.params.format,\n      'offscreen'\n    )) as OffscreenCanvas;\n\n    let snapshot: HTMLImageElement | ImageBitmap;\n    switch (t.params.snapshotType) {\n      case 'convertToBlob': {\n        if (typeof offscreenCanvas.convertToBlob === undefined) {\n          t.skip(\"Browser doesn't support OffscreenCanvas.convertToBlob\");\n          return;\n        }\n        const blob = await offscreenCanvas.convertToBlob();\n        const url = URL.createObjectURL(blob);\n        const img = new Image(offscreenCanvas.width, offscreenCanvas.height);\n        img.src = url;\n        await raceWithRejectOnTimeout(img.decode(), 5000, 'load image timeout');\n        snapshot = img;\n        break;\n      }\n      case 'transferToImageBitmap': {\n        if (typeof offscreenCanvas.transferToImageBitmap === undefined) {\n          t.skip(\"Browser doesn't support OffscreenCanvas.transferToImageBitmap\");\n          return;\n        }\n        snapshot = offscreenCanvas.transferToImageBitmap();\n        break;\n      }\n      case 'imageBitmap': {\n        snapshot = await createImageBitmap(offscreenCanvas);\n        break;\n      }\n      default:\n        unreachable();\n    }\n\n    checkImageResult(t, snapshot, expect);\n  });\n\ng.test('onscreenCanvas,uploadToWebGL')\n  .desc(\n    `\n    Ensure upload WebGPU context canvas to webgl texture is correct.\n    `\n  )\n  .params(u =>\n    u //\n      .combine('format', kCanvasTextureFormats)\n      .combine('webgl', ['webgl', 'webgl2'])\n      .combine('upload', ['texImage2D', 'texSubImage2D'])\n  )\n  .fn(async t => {\n    const { format, webgl, upload } = t.params;\n    const canvas = (await initCanvasContent(t, format, 'onscreen')) as HTMLCanvasElement;\n\n    const expectCanvas: HTMLCanvasElement = createOnscreenCanvas(t, canvas.width, canvas.height);\n    const gl = expectCanvas.getContext(webgl) as WebGLRenderingContext | WebGL2RenderingContext;\n    if (gl === null) {\n      return;\n    }\n\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    switch (upload) {\n      case 'texImage2D': {\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, canvas);\n        break;\n      }\n      case 'texSubImage2D': {\n        gl.texImage2D(\n          gl.TEXTURE_2D,\n          0,\n          gl.RGBA,\n          canvas.width,\n          canvas.height,\n          0,\n          gl.RGBA,\n          gl.UNSIGNED_BYTE,\n          null\n        );\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, canvas);\n        break;\n      }\n      default:\n        unreachable();\n    }\n\n    const fb = gl.createFramebuffer();\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n    const pixels = new Uint8Array(canvas.width * canvas.height * 4);\n    gl.readPixels(0, 0, 2, 2, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n    const actual = new Uint8ClampedArray(pixels);\n\n    t.expectOK(checkElementsEqual(actual, webglExpect));\n  });\n\ng.test('drawTo2DCanvas')\n  .desc(\n    `\n    Ensure draw WebGPU context canvas to 2d context canvas/offscreenCanvas is correct.\n    `\n  )\n  .params(u =>\n    u //\n      .combine('format', kCanvasTextureFormats)\n      .combine('webgpuCanvasType', kAllCanvasTypes)\n      .combine('canvas2DType', kAllCanvasTypes)\n  )\n  .fn(async t => {\n    const { format, webgpuCanvasType, canvas2DType } = t.params;\n\n    const canvas = await initCanvasContent(t, format, webgpuCanvasType);\n\n    const expectCanvas = createCanvas(t, canvas2DType, canvas.width, canvas.height);\n    const ctx = expectCanvas.getContext('2d');\n    if (ctx === null) {\n      t.skip(canvas2DType + ' canvas cannot get 2d context');\n      return;\n    }\n    ctx.drawImage(canvas, 0, 0);\n\n    readPixelsFrom2DCanvasAndCompare(t, ctx, expect);\n  });\n"],"file":"readbackFromWebGPUCanvas.spec.js"}