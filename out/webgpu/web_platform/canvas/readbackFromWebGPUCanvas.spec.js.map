{"version":3,"file":"readbackFromWebGPUCanvas.spec.js","names":["description","makeTestGroup","assert","raceWithRejectOnTimeout","unreachable","kCanvasAlphaModes","kCanvasTextureFormats","GPUTest","checkElementsEqual","kAllCanvasTypes","createCanvas","createOnscreenCanvas","g","kPixelValue","kPixelValueFloat","expect","Uint8ClampedArray","initCanvasContent","t","format","alphaMode","canvasType","canvas","ctx","getContext","GPUCanvasContext","configure","device","usage","GPUTextureUsage","COPY_SRC","COPY_DST","canvasTexture","getCurrentTexture","tempTexture","createTexture","size","width","height","depthOrArrayLayers","RENDER_ATTACHMENT","tempTextureView","createView","encoder","createCommandEncoder","clearOnePixel","origin","color","pass","beginRenderPass","colorAttachments","view","clearValue","loadOp","storeOp","end","copyTextureToTexture","texture","queue","submit","finish","destroy","onSubmittedWorkDone","checkImageResult","image","drawImage","readPixelsFrom2DCanvasAndCompare","actual","getImageData","data","expectOK","test","desc","params","u","combine","fn","snapshot","snapshotType","url","toDataURL","img","Image","src","decode","blobFromCanvas","Promise","resolve","toBlob","blob","URL","createObjectURL","createImageBitmap","offscreenCanvas","convertToBlob","undefined","skip","transferToImageBitmap","webgl","upload","expectCanvas","gl","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texSubImage2D","fb","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","pixels","Uint8Array","readPixels","webgpuCanvasType","canvas2DType"],"sources":["../../../../src/webgpu/web_platform/canvas/readbackFromWebGPUCanvas.spec.ts"],"sourcesContent":["export const description = `\nTests for readback from WebGPU Canvas.\n\nTODO: implement all canvas types, see TODO on kCanvasTypes.\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { assert, raceWithRejectOnTimeout, unreachable } from '../../../common/util/util.js';\nimport { kCanvasAlphaModes, kCanvasTextureFormats } from '../../capability_info.js';\nimport { GPUTest } from '../../gpu_test.js';\nimport { checkElementsEqual } from '../../util/check_contents.js';\nimport {\n  kAllCanvasTypes,\n  CanvasType,\n  createCanvas,\n  createOnscreenCanvas,\n} from '../../util/create_elements.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n// We choose 0x66 as the value for each color and alpha channel\n// 0x66 / 0xff = 0.4\n// Given a pixel value of RGBA = (0x66, 0, 0, 0x66) in the source WebGPU canvas,\n// For alphaMode = opaque, the copy output should be RGBA = (0x66, 0, 0, 0xff)\n// For alphaMode = premultiplied, the copy output should be RGBA = (0xff, 0, 0, 0x66)\nconst kPixelValue = 0x66;\nconst kPixelValueFloat = 0x66 / 0xff; // 0.4\n\n// Use four pixels rectangle for the test:\n// blue: top-left;\n// green: top-right;\n// red: bottom-left;\n// yellow: bottom-right;\nconst expect = {\n  /* prettier-ignore */\n  'opaque': new Uint8ClampedArray([\n    0, 0, kPixelValue, 0xff, // blue\n    0, kPixelValue, 0, 0xff, // green\n    kPixelValue, 0, 0, 0xff, // red\n    kPixelValue, kPixelValue, 0, 0xff, // yellow\n  ]),\n  /* prettier-ignore */\n  'premultiplied': new Uint8ClampedArray([\n    0, 0, 0xff, kPixelValue, // blue\n    0, 0xff, 0, kPixelValue, // green\n    0xff, 0, 0, kPixelValue, // red\n    0xff, 0xff, 0, kPixelValue, // yellow\n  ]),\n};\n\nasync function initCanvasContent<T extends CanvasType>(\n  t: GPUTest,\n  format: GPUTextureFormat,\n  alphaMode: GPUCanvasAlphaMode,\n  canvasType: T\n) {\n  const canvas = createCanvas(t, canvasType, 2, 2);\n  const ctx = canvas.getContext('webgpu');\n  assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n  ctx.configure({\n    device: t.device,\n    format,\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n    alphaMode,\n  });\n\n  const canvasTexture = ctx.getCurrentTexture();\n  const tempTexture = t.device.createTexture({\n    size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n    format,\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n  });\n  const tempTextureView = tempTexture.createView();\n  const encoder = t.device.createCommandEncoder();\n\n  const clearOnePixel = (origin: GPUOrigin3D, color: GPUColor) => {\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        { view: tempTextureView, clearValue: color, loadOp: 'clear', storeOp: 'store' },\n      ],\n    });\n    pass.end();\n    encoder.copyTextureToTexture(\n      { texture: tempTexture },\n      { texture: canvasTexture, origin },\n      { width: 1, height: 1 }\n    );\n  };\n\n  clearOnePixel([0, 0], [0, 0, kPixelValueFloat, kPixelValueFloat]);\n  clearOnePixel([1, 0], [0, kPixelValueFloat, 0, kPixelValueFloat]);\n  clearOnePixel([0, 1], [kPixelValueFloat, 0, 0, kPixelValueFloat]);\n  clearOnePixel([1, 1], [kPixelValueFloat, kPixelValueFloat, 0, kPixelValueFloat]);\n\n  t.device.queue.submit([encoder.finish()]);\n  tempTexture.destroy();\n\n  await t.device.queue.onSubmittedWorkDone();\n\n  return canvas;\n}\n\nfunction checkImageResult(t: GPUTest, image: CanvasImageSource, expect: Uint8ClampedArray) {\n  const canvas: HTMLCanvasElement = createOnscreenCanvas(t, 2, 2);\n  const ctx = canvas.getContext('2d');\n  assert(ctx !== null);\n  ctx.drawImage(image, 0, 0);\n  readPixelsFrom2DCanvasAndCompare(t, ctx, expect);\n}\n\nfunction readPixelsFrom2DCanvasAndCompare(\n  t: GPUTest,\n  ctx: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D,\n  expect: Uint8ClampedArray\n) {\n  const actual = ctx.getImageData(0, 0, 2, 2).data;\n\n  t.expectOK(checkElementsEqual(actual, expect));\n}\n\ng.test('onscreenCanvas,snapshot')\n  .desc(\n    `\n    Ensure snapshot of canvas with WebGPU context is correct with\n    - various WebGPU canvas texture formats\n    - WebGPU canvas alpha mode = {\"opaque\", \"premultiplied\"}\n    - snapshot methods = {convertToBlob, transferToImageBitmap, createImageBitmap}\n\n    TODO: Snapshot canvas to jpeg, webp and other mime type and\n          different quality. Maybe we should test them in reftest.\n    `\n  )\n  .params(u =>\n    u //\n      .combine('format', kCanvasTextureFormats)\n      .combine('alphaMode', kCanvasAlphaModes)\n      .combine('snapshotType', ['toDataURL', 'toBlob', 'imageBitmap'])\n  )\n  .fn(async t => {\n    const canvas = await initCanvasContent(t, t.params.format, t.params.alphaMode, 'onscreen');\n\n    let snapshot: HTMLImageElement | ImageBitmap;\n    switch (t.params.snapshotType) {\n      case 'toDataURL': {\n        const url = canvas.toDataURL();\n        const img = new Image(canvas.width, canvas.height);\n        img.src = url;\n        await raceWithRejectOnTimeout(img.decode(), 5000, 'load image timeout');\n        snapshot = img;\n        break;\n      }\n      case 'toBlob': {\n        const blobFromCanvas = new Promise(resolve => {\n          canvas.toBlob(blob => resolve(blob));\n        });\n        const blob = (await blobFromCanvas) as Blob;\n        const url = URL.createObjectURL(blob);\n        const img = new Image(canvas.width, canvas.height);\n        img.src = url;\n        await raceWithRejectOnTimeout(img.decode(), 5000, 'load image timeout');\n        snapshot = img;\n        break;\n      }\n      case 'imageBitmap': {\n        snapshot = await createImageBitmap(canvas);\n        break;\n      }\n      default:\n        unreachable();\n    }\n\n    checkImageResult(t, snapshot, expect[t.params.alphaMode]);\n  });\n\ng.test('offscreenCanvas,snapshot')\n  .desc(\n    `\n    Ensure snapshot of offscreenCanvas with WebGPU context is correct with\n    - various WebGPU canvas texture formats\n    - WebGPU canvas alpha mode = {\"opaque\", \"premultiplied\"}\n    - snapshot methods = {convertToBlob, transferToImageBitmap, createImageBitmap}\n\n    TODO: Snapshot offscreenCanvas to jpeg, webp and other mime type and\n          different quality. Maybe we should test them in reftest.\n    `\n  )\n  .params(u =>\n    u //\n      .combine('format', kCanvasTextureFormats)\n      .combine('alphaMode', kCanvasAlphaModes)\n      .combine('snapshotType', ['convertToBlob', 'transferToImageBitmap', 'imageBitmap'])\n  )\n  .fn(async t => {\n    const offscreenCanvas = await initCanvasContent(\n      t,\n      t.params.format,\n      t.params.alphaMode,\n      'offscreen'\n    );\n\n    let snapshot: HTMLImageElement | ImageBitmap;\n    switch (t.params.snapshotType) {\n      case 'convertToBlob': {\n        if (typeof offscreenCanvas.convertToBlob === undefined) {\n          t.skip(\"Browser doesn't support OffscreenCanvas.convertToBlob\");\n          return;\n        }\n        const blob = await offscreenCanvas.convertToBlob();\n        const url = URL.createObjectURL(blob);\n        const img = new Image(offscreenCanvas.width, offscreenCanvas.height);\n        img.src = url;\n        await raceWithRejectOnTimeout(img.decode(), 5000, 'load image timeout');\n        snapshot = img;\n        break;\n      }\n      case 'transferToImageBitmap': {\n        if (typeof offscreenCanvas.transferToImageBitmap === undefined) {\n          t.skip(\"Browser doesn't support OffscreenCanvas.transferToImageBitmap\");\n          return;\n        }\n        snapshot = offscreenCanvas.transferToImageBitmap();\n        break;\n      }\n      case 'imageBitmap': {\n        snapshot = await createImageBitmap(offscreenCanvas);\n        break;\n      }\n      default:\n        unreachable();\n    }\n\n    checkImageResult(t, snapshot, expect[t.params.alphaMode]);\n  });\n\ng.test('onscreenCanvas,uploadToWebGL')\n  .desc(\n    `\n    Ensure upload WebGPU context canvas to webgl texture is correct with\n    - various WebGPU canvas texture formats\n    - WebGPU canvas alpha mode = {\"opaque\", \"premultiplied\"}\n    - upload methods = {texImage2D, texSubImage2D}\n    `\n  )\n  .params(u =>\n    u //\n      .combine('format', kCanvasTextureFormats)\n      .combine('alphaMode', kCanvasAlphaModes)\n      .combine('webgl', ['webgl', 'webgl2'])\n      .combine('upload', ['texImage2D', 'texSubImage2D'])\n  )\n  .fn(async t => {\n    const { format, webgl, upload } = t.params;\n    const canvas = await initCanvasContent(t, format, t.params.alphaMode, 'onscreen');\n\n    const expectCanvas: HTMLCanvasElement = createOnscreenCanvas(t, canvas.width, canvas.height);\n    const gl = expectCanvas.getContext(webgl) as WebGLRenderingContext | WebGL2RenderingContext;\n    if (gl === null) {\n      return;\n    }\n\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    switch (upload) {\n      case 'texImage2D': {\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, canvas);\n        break;\n      }\n      case 'texSubImage2D': {\n        gl.texImage2D(\n          gl.TEXTURE_2D,\n          0,\n          gl.RGBA,\n          canvas.width,\n          canvas.height,\n          0,\n          gl.RGBA,\n          gl.UNSIGNED_BYTE,\n          null\n        );\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, canvas);\n        break;\n      }\n      default:\n        unreachable();\n    }\n\n    const fb = gl.createFramebuffer();\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n    const pixels = new Uint8Array(canvas.width * canvas.height * 4);\n    gl.readPixels(0, 0, 2, 2, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n    const actual = new Uint8ClampedArray(pixels);\n\n    t.expectOK(checkElementsEqual(actual, expect[t.params.alphaMode]));\n  });\n\ng.test('drawTo2DCanvas')\n  .desc(\n    `\n    Ensure draw WebGPU context canvas to 2d context canvas/offscreenCanvas is correct with\n    - various WebGPU canvas texture formats\n    - WebGPU canvas alpha mode = {\"opaque\", \"premultiplied\"}\n    - WebGPU canvas type = {\"onscreen\", \"offscreen\"}\n    - 2d canvas type = {\"onscreen\", \"offscreen\"}\n    `\n  )\n  .params(u =>\n    u //\n      .combine('format', kCanvasTextureFormats)\n      .combine('alphaMode', kCanvasAlphaModes)\n      .combine('webgpuCanvasType', kAllCanvasTypes)\n      .combine('canvas2DType', kAllCanvasTypes)\n  )\n  .fn(async t => {\n    const { format, webgpuCanvasType, alphaMode, canvas2DType } = t.params;\n\n    const canvas = await initCanvasContent(t, format, alphaMode, webgpuCanvasType);\n\n    const expectCanvas = createCanvas(t, canvas2DType, canvas.width, canvas.height);\n    const ctx = expectCanvas.getContext('2d');\n    if (ctx === null) {\n      t.skip(canvas2DType + ' canvas cannot get 2d context');\n      return;\n    }\n    ctx.drawImage(canvas, 0, 0);\n\n    readPixelsFrom2DCanvasAndCompare(t, ctx, expect[t.params.alphaMode]);\n  });\n"],"mappings":"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"}