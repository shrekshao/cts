{"version":3,"sources":["../../../../src/webgpu/web_platform/canvas/readbackFromWebGPUCanvas.spec.ts"],"names":["description","makeTestGroup","assert","raceWithRejectOnTimeout","unreachable","GPUTest","checkElementsEqual","allCanvasTypes","createCanvas","createOnscreenCanvas","g","expect","Uint8ClampedArray","webglExpect","initCanvasContent","t","canvasType","canvas","ctx","getContext","configure","device","format","usage","GPUTextureUsage","COPY_DST","COPY_SRC","rows","bytesPerRow","buffer","createBuffer","mappedAtCreation","size","GPUBufferUsage","mapping","getMappedRange","data","Uint8Array","set","unmap","texture","getCurrentTexture","encoder","createCommandEncoder","copyBufferToTexture","queue","submit","finish","onSubmittedWorkDone","checkImageResult","image","drawImage","readPixelsFrom2DCanvasAndCompare","actual","getImageData","expectOK","test","desc","params","u","combine","fn","snapshot","snapshotType","url","toDataURL","img","Image","width","height","src","decode","blobFromCanvs","Promise","resolve","toBlob","blob","URL","createObjectURL","createImageBitmap","offscreenCanvas","convertToBlob","undefined","skip","transferToImageBitmap","webgl","upload","expectCanvas","gl","createTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texSubImage2D","fb","createFramebuffer","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","pixels","readPixels","webgpuCanvasType","canvas2DType"],"mappings":"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","sourcesContent":["export const description = `\nTests for readback from WebGPU Canvas.\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { assert, raceWithRejectOnTimeout, unreachable } from '../../../common/util/util.js';\nimport { GPUTest } from '../../gpu_test.js';\nimport { checkElementsEqual } from '../../util/check_contents.js';\nimport {\n  allCanvasTypes,\n  canvasTypes,\n  createCanvas,\n  createOnscreenCanvas,\n} from '../../util/create_elements.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n// Use four pixels rectangle for the test:\n// blue: top-left;\n// green: top-right;\n// red: bottom-left;\n// yellow: bottom-right;\nconst expect = new Uint8ClampedArray([\n  0x00,\n  0x00,\n  0xff,\n  0xff, // blue\n  0x00,\n  0xff,\n  0x00,\n  0xff, // green\n  0xff,\n  0x00,\n  0x00,\n  0xff, // red\n  0xff,\n  0xff,\n  0x00,\n  0xff, // yellow\n]);\n\n// WebGL has opposite Y direction so we need to\n// flipY to get correct expects.\nconst webglExpect = new Uint8ClampedArray([\n  0xff,\n  0x00,\n  0x00,\n  0xff, // red\n  0xff,\n  0xff,\n  0x00,\n  0xff, // yellow\n  0x00,\n  0x00,\n  0xff,\n  0xff, // blue\n  0x00,\n  0xff,\n  0x00,\n  0xff, // green\n]);\n\nasync function initCanvasContent(\n  t: GPUTest,\n  canvasType: canvasTypes\n): Promise<HTMLCanvasElement | OffscreenCanvas> {\n  const canvas = createCanvas(t, canvasType, 2, 2);\n  const ctx = canvas.getContext('webgpu');\n  assert(ctx !== null, 'Failed to get WebGPU context from canvas');\n\n  ctx.configure({\n    device: t.device,\n    format: 'bgra8unorm',\n    usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC,\n  });\n\n  const rows = 2;\n  const bytesPerRow = 256;\n  const buffer = t.device.createBuffer({\n    mappedAtCreation: true,\n    size: rows * bytesPerRow,\n    usage: GPUBufferUsage.COPY_SRC,\n  });\n  const mapping = buffer.getMappedRange();\n  const data = new Uint8Array(mapping);\n  data.set(new Uint8Array([0xff, 0x00, 0x00, 0xff]), 0); // blue\n  data.set(new Uint8Array([0x00, 0xff, 0x00, 0xff]), 4); // green\n  data.set(new Uint8Array([0x00, 0x00, 0xff, 0xff]), 256 + 0); // red\n  data.set(new Uint8Array([0x00, 0xff, 0xff, 0xff]), 256 + 4); // yellow\n  buffer.unmap();\n\n  const texture = ctx.getCurrentTexture();\n  const encoder = t.device.createCommandEncoder();\n  encoder.copyBufferToTexture({ buffer, bytesPerRow }, { texture }, [2, 2, 1]);\n  t.device.queue.submit([encoder.finish()]);\n  await t.device.queue.onSubmittedWorkDone();\n\n  return canvas;\n}\n\nfunction checkImageResult(t: GPUTest, image: CanvasImageSource, expect: Uint8ClampedArray) {\n  const canvas: HTMLCanvasElement = createOnscreenCanvas(t, 2, 2);\n  const ctx = canvas.getContext('2d');\n  assert(ctx !== null);\n  ctx.drawImage(image, 0, 0);\n  readPixelsFrom2DCanvasAndCompare(t, ctx, expect);\n}\n\nfunction readPixelsFrom2DCanvasAndCompare(\n  t: GPUTest,\n  ctx: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D,\n  expect: Uint8ClampedArray\n) {\n  const actual = ctx.getImageData(0, 0, 2, 2).data;\n\n  t.expectOK(checkElementsEqual(actual, expect));\n}\n\ng.test('onscreenCanvas,snapshot')\n  .desc(\n    `\n    Ensure snapshot of canvas with WebGPU context is correct\n     \n    TODO: Snapshot canvas to jpeg, webp and other mime type and\n          different quality. Maybe we should test them in reftest.\n    `\n  )\n  .params(u =>\n    u //\n      .combine('snapshotType', ['toDataURL', 'toBlob', 'imageBitmap'])\n  )\n  .fn(async t => {\n    const canvas = (await initCanvasContent(t, 'onscreen')) as HTMLCanvasElement;\n\n    let snapshot: HTMLImageElement | ImageBitmap;\n    switch (t.params.snapshotType) {\n      case 'toDataURL': {\n        const url = canvas.toDataURL();\n        const img = new Image(canvas.width, canvas.height);\n        img.src = url;\n        await raceWithRejectOnTimeout(img.decode(), 5000, 'load image timeout');\n        snapshot = img;\n        break;\n      }\n      case 'toBlob': {\n        const blobFromCanvs = new Promise(resolve => {\n          canvas.toBlob(blob => resolve(blob));\n        });\n        const blob = (await blobFromCanvs) as Blob;\n        const url = URL.createObjectURL(blob);\n        const img = new Image(canvas.width, canvas.height);\n        img.src = url;\n        await raceWithRejectOnTimeout(img.decode(), 5000, 'load image timeout');\n        snapshot = img;\n        break;\n      }\n      case 'imageBitmap': {\n        snapshot = await createImageBitmap(canvas);\n        break;\n      }\n      default:\n        unreachable();\n    }\n\n    checkImageResult(t, snapshot, expect);\n  });\n\ng.test('offscreenCanvas,snapshot')\n  .desc(\n    `\n    Ensure snapshot of offscreenCanvas with WebGPU context is correct\n     \n    TODO: Snapshot offscreenCanvas to jpeg, webp and other mime type and\n          different quality. Maybe we should test them in reftest.\n    `\n  )\n  .params(u =>\n    u //\n      .combine('snapshotType', ['convertToBlob', 'transferToImageBitmap', 'imageBitmap'])\n  )\n  .fn(async t => {\n    const offscreenCanvas = (await initCanvasContent(t, 'offscreen')) as OffscreenCanvas;\n\n    let snapshot: HTMLImageElement | ImageBitmap;\n    switch (t.params.snapshotType) {\n      case 'convertToBlob': {\n        if (typeof offscreenCanvas.convertToBlob === undefined) {\n          t.skip(\"Browser doesn't support OffscreenCanvas.convertToBlob\");\n          return;\n        }\n        const blob = await offscreenCanvas.convertToBlob();\n        const url = URL.createObjectURL(blob);\n        const img = new Image(offscreenCanvas.width, offscreenCanvas.height);\n        img.src = url;\n        await raceWithRejectOnTimeout(img.decode(), 5000, 'load image timeout');\n        snapshot = img;\n        break;\n      }\n      case 'transferToImageBitmap': {\n        if (typeof offscreenCanvas.transferToImageBitmap === undefined) {\n          t.skip(\"Browser doesn't support OffscreenCanvas.transferToImageBitmap\");\n          return;\n        }\n        snapshot = offscreenCanvas.transferToImageBitmap();\n        break;\n      }\n      case 'imageBitmap': {\n        snapshot = await createImageBitmap(offscreenCanvas);\n        break;\n      }\n      default:\n        unreachable();\n    }\n\n    checkImageResult(t, snapshot, expect);\n  });\n\ng.test('onscreenCanvas,uploadToWebGL')\n  .desc(\n    `\n    Ensure upload WebGPU context canvas to webgl texture is correct.\n    `\n  )\n  .params(u =>\n    u //\n      .combine('webgl', ['webgl', 'webgl2'])\n      .combine('upload', ['texImage2D', 'texSubImage2D'])\n  )\n  .fn(async t => {\n    const { webgl, upload } = t.params;\n    const canvas = (await initCanvasContent(t, 'onscreen')) as HTMLCanvasElement;\n\n    const expectCanvas: HTMLCanvasElement = createOnscreenCanvas(t, canvas.width, canvas.height);\n    const gl = expectCanvas.getContext(webgl) as WebGLRenderingContext | WebGL2RenderingContext;\n    if (gl === null) {\n      return;\n    }\n\n    const texture = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, texture);\n    switch (upload) {\n      case 'texImage2D': {\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, canvas);\n        break;\n      }\n      case 'texSubImage2D': {\n        gl.texImage2D(\n          gl.TEXTURE_2D,\n          0,\n          gl.RGBA,\n          canvas.width,\n          canvas.height,\n          0,\n          gl.RGBA,\n          gl.UNSIGNED_BYTE,\n          null\n        );\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, canvas);\n        break;\n      }\n      default:\n        unreachable();\n    }\n\n    const fb = gl.createFramebuffer();\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n\n    const pixels = new Uint8Array(canvas.width * canvas.height * 4);\n    gl.readPixels(0, 0, 2, 2, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n    const actual = new Uint8ClampedArray(pixels);\n\n    t.expectOK(checkElementsEqual(actual, webglExpect));\n  });\n\ng.test('drawTo2DCanvas')\n  .desc(\n    `\n    Ensure draw WebGPU context canvas to 2d context canvas/offscreenCanvas is correct.\n    `\n  )\n  .params(u =>\n    u //\n      .combine('webgpuCanvasType', allCanvasTypes)\n      .combine('canvas2DType', allCanvasTypes)\n  )\n  .fn(async t => {\n    const { webgpuCanvasType, canvas2DType } = t.params;\n\n    const canvas = await initCanvasContent(t, webgpuCanvasType);\n\n    const expectCanvas = createCanvas(t, canvas2DType, canvas.width, canvas.height);\n    const ctx = expectCanvas.getContext('2d');\n    if (ctx === null) {\n      t.skip(canvas2DType + ' canvas cannot get 2d context');\n      return;\n    }\n    ctx.drawImage(canvas, 0, 0);\n\n    readPixelsFrom2DCanvasAndCompare(t, ctx, expect);\n  });\n"],"file":"readbackFromWebGPUCanvas.spec.js"}