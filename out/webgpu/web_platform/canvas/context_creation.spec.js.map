{"version":3,"sources":["../../../../src/webgpu/web_platform/canvas/context_creation.spec.ts"],"names":["description","Fixture","makeTestGroup","g","test","desc","params","u","combine","beginSubcases","undefined","fn","t","canvas","offscreen","OffscreenCanvas","skip","document","createElement","attributes","width","height","ctx","getContext","expect","GPUCanvasContext"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA,CALO,CAOP,SAASC,OAAT,QAAwB,sCAAxB;AACA,SAASC,aAAT,QAA8B,yCAA9B;;AAEA,OAAO,MAAMC,CAAC,GAAGD,aAAa,CAACD,OAAD,CAAvB;;AAEPE,CAAC,CAACC,IAAF,CAAO,aAAP;AACGC,IADH;AAEK;AACL;AACA,qEAJA;;AAMGC,MANH,CAMU,CAAAC,CAAC;AACPA,CAAC,CAAC;AAAD,CACEC,OADH,CACW,WADX,EACwB,CAAC,KAAD,EAAQ,IAAR,CADxB;AAEGC,aAFH;AAGGD,OAHH,CAGW,YAHX,EAGyB,CAACE,SAAD,EAAY,EAAZ,CAHzB,CAPJ;;AAYGC,EAZH,CAYM,OAAMC,CAAN,KAAW;AACb,MAAIC,MAAJ;AACA,MAAID,CAAC,CAACN,MAAF,CAASQ,SAAb,EAAwB;AACtB,QAAI,OAAOC,eAAP,KAA2B,WAA/B,EAA4C;AAC1C;AACAH,MAAAA,CAAC,CAACI,IAAF,CAAO,kDAAP;AACD;;AAEDH,IAAAA,MAAM,GAAG,IAAIE,eAAJ,CAAoB,EAApB,EAAwB,EAAxB,CAAT;AACD,GAPD,MAOO;AACL,QAAI,OAAOE,QAAP,KAAoB,WAAxB,EAAqC;AACnC;AACAL,MAAAA,CAAC,CAACI,IAAF,CAAO,+CAAP;AACD;;AAEDH,IAAAA,MAAM,GAAGI,QAAQ,CAACC,aAAT,CAAuB,QAAvB,EAAiCN,CAAC,CAACN,MAAF,CAASa,UAA1C,CAAT;AACAN,IAAAA,MAAM,CAACO,KAAP,GAAe,EAAf;AACAP,IAAAA,MAAM,CAACQ,MAAP,GAAgB,EAAhB;AACD;;AAED,QAAMC,GAAG,GAAGT,MAAM,CAACU,UAAP,CAAkB,QAAlB,CAAZ;AACAX,EAAAA,CAAC,CAACY,MAAF,CAASF,GAAG,YAAYG,gBAAxB;AACD,CAlCH","sourcesContent":["export const description = `\nTests for canvas context creation.\n\nNote there are no context creation attributes for WebGPU (as of this writing).\nOptions are configured in configure() instead.\n`;\n\nimport { Fixture } from '../../../common/framework/fixture.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\n\nexport const g = makeTestGroup(Fixture);\n\ng.test('return_type')\n  .desc(\n    `Test the return type of getContext for WebGPU.\n\n    TODO: Test OffscreenCanvas made from transferControlToOffscreen.`\n  )\n  .params(u =>\n    u //\n      .combine('offscreen', [false, true])\n      .beginSubcases()\n      .combine('attributes', [undefined, {}])\n  )\n  .fn(async t => {\n    let canvas: HTMLCanvasElement | OffscreenCanvas;\n    if (t.params.offscreen) {\n      if (typeof OffscreenCanvas === 'undefined') {\n        // Skip if the current context doesn't have OffscreenCanvas (e.g. Node).\n        t.skip('OffscreenCanvas is not available in this context');\n      }\n\n      canvas = new OffscreenCanvas(10, 10);\n    } else {\n      if (typeof document === 'undefined') {\n        // Skip if there is no document (Workers, Node)\n        t.skip('DOM is not available to create canvas element');\n      }\n\n      canvas = document.createElement('canvas', t.params.attributes);\n      canvas.width = 10;\n      canvas.height = 10;\n    }\n\n    const ctx = canvas.getContext('webgpu');\n    t.expect(ctx instanceof GPUCanvasContext);\n  });\n"],"file":"context_creation.spec.js"}