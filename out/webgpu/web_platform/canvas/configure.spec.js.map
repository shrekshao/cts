{"version":3,"sources":["../../../../src/webgpu/web_platform/canvas/configure.spec.ts"],"names":["description","makeTestGroup","assert","kAllTextureFormats","kCanvasTextureFormats","kTextureUsages","GPUConst","GPUTest","kAllCanvasTypes","createCanvas","g","test","desc","params","u","combine","fn","t","canvasType","canvas","ctx","getContext","GPUCanvasContext","configure","device","format","currentTexture","getCurrentTexture","expect","usage","GPUTextureUsage","RENDER_ATTACHMENT","dimension","width","height","depthOrArrayLayers","mipLevelCount","sampleCount","shouldThrow","unconfigure","beforeAllSubcases","selectDeviceForTextureFormatOrSkipTestCase","validFormat","canvasFormat","expectValidationError","GPUTexture","beginSubcases","expand","p","usageSet","Set","usage0","usage1","add","TextureUsage","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","view","createView","clearValue","loadOp","storeOp","end","queue","submit","finish","TEXTURE_BINDING","bgl","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","FRAGMENT","texture","createBindGroup","layout","resource","STORAGE_BINDING","storageTexture","access","COPY_DST","rgbaData","Uint8Array","writeTexture","COPY_SRC","size","dstTexture","createTexture","copyTextureToTexture","alphaMode"],"mappings":"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","sourcesContent":["export const description = `\nTests for GPUCanvasContext.configure.\n\nTODO:\n- Test colorSpace\n- Test viewFormats\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { assert } from '../../../common/util/util.js';\nimport {\n  kAllTextureFormats,\n  kCanvasTextureFormats,\n  kTextureUsages,\n} from '../../capability_info.js';\nimport { GPUConst } from '../../constants.js';\nimport { GPUTest } from '../../gpu_test.js';\nimport { kAllCanvasTypes, createCanvas } from '../../util/create_elements.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('defaults')\n  .desc(\n    `\n    Ensure that the defaults for GPUCanvasConfiguration are correct.\n    `\n  )\n  .params(u =>\n    u //\n      .combine('canvasType', kAllCanvasTypes)\n  )\n  .fn(async t => {\n    const { canvasType } = t.params;\n    const canvas = createCanvas(t, canvasType, 2, 2);\n    const ctx = canvas.getContext('webgpu');\n    assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n    ctx.configure({\n      device: t.device,\n      format: 'rgba8unorm',\n    });\n\n    const currentTexture = ctx.getCurrentTexture();\n    t.expect(currentTexture.format === 'rgba8unorm');\n    t.expect(currentTexture.usage === GPUTextureUsage.RENDER_ATTACHMENT);\n    t.expect(currentTexture.dimension === '2d');\n    t.expect(currentTexture.width === canvas.width);\n    t.expect(currentTexture.height === canvas.height);\n    t.expect(currentTexture.depthOrArrayLayers === 1);\n    t.expect(currentTexture.mipLevelCount === 1);\n    t.expect(currentTexture.sampleCount === 1);\n  });\n\ng.test('device')\n  .desc(\n    `\n    Ensure that configure reacts appropriately to various device states.\n    `\n  )\n  .params(u =>\n    u //\n      .combine('canvasType', kAllCanvasTypes)\n  )\n  .fn(async t => {\n    const { canvasType } = t.params;\n    const canvas = createCanvas(t, canvasType, 2, 2);\n    const ctx = canvas.getContext('webgpu');\n    assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n    // Calling configure without a device should throw.\n    t.shouldThrow(true, () => {\n      ctx.configure({\n        format: 'rgba8unorm',\n      } as GPUCanvasConfiguration);\n    });\n\n    // Device is not configured, so getCurrentTexture will throw.\n    t.shouldThrow(true, () => {\n      ctx.getCurrentTexture();\n    });\n\n    // Calling configure with a device should succeed.\n    ctx.configure({\n      device: t.device,\n      format: 'rgba8unorm',\n    });\n\n    // getCurrentTexture will succeed with a valid device.\n    ctx.getCurrentTexture();\n\n    // Unconfiguring should cause the device to be cleared.\n    ctx.unconfigure();\n    t.shouldThrow(true, () => {\n      ctx.getCurrentTexture();\n    });\n\n    // Should be able to successfully configure again after unconfiguring.\n    ctx.configure({\n      device: t.device,\n      format: 'rgba8unorm',\n    });\n    ctx.getCurrentTexture();\n  });\n\ng.test('format')\n  .desc(\n    `\n    Ensure that only valid texture formats are allowed when calling configure.\n    `\n  )\n  .params(u =>\n    u //\n      .combine('canvasType', kAllCanvasTypes)\n      .combine('format', kAllTextureFormats)\n  )\n  .beforeAllSubcases(t => {\n    t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n  })\n  .fn(async t => {\n    const { canvasType, format } = t.params;\n    const canvas = createCanvas(t, canvasType, 2, 2);\n    const ctx = canvas.getContext('webgpu');\n    assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n    // Would prefer to use kCanvasTextureFormats.includes(format), but that's giving TS errors.\n    let validFormat = false;\n    for (const canvasFormat of kCanvasTextureFormats) {\n      if (format === canvasFormat) {\n        validFormat = true;\n        break;\n      }\n    }\n\n    t.expectValidationError(() => {\n      ctx.configure({\n        device: t.device,\n        format,\n      });\n    }, !validFormat);\n\n    t.expectValidationError(() => {\n      // Should always return a texture, whether the configured format was valid or not.\n      const currentTexture = ctx.getCurrentTexture();\n      t.expect(currentTexture instanceof GPUTexture);\n    }, !validFormat);\n  });\n\ng.test('usage')\n  .desc(\n    `\n    Ensure that getCurrentTexture returns a texture with the configured usages.\n    `\n  )\n  .params(u =>\n    u //\n      .combine('canvasType', kAllCanvasTypes)\n      .beginSubcases()\n      .expand('usage', p => {\n        const usageSet = new Set<number>();\n        for (const usage0 of kTextureUsages) {\n          for (const usage1 of kTextureUsages) {\n            usageSet.add(usage0 | usage1);\n          }\n        }\n        return usageSet;\n      })\n  )\n  .fn(async t => {\n    const { canvasType, usage } = t.params;\n    const canvas = createCanvas(t, canvasType, 2, 2);\n    const ctx = canvas.getContext('webgpu');\n    assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n    ctx.configure({\n      device: t.device,\n      format: 'rgba8unorm',\n      usage,\n    });\n\n    const currentTexture = ctx.getCurrentTexture();\n    t.expect(currentTexture instanceof GPUTexture);\n    t.expect(currentTexture.usage === usage);\n\n    // Try to use the texture with the given usage\n\n    if (usage & GPUConst.TextureUsage.RENDER_ATTACHMENT) {\n      const encoder = t.device.createCommandEncoder();\n      const pass = encoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: currentTexture.createView(),\n            clearValue: [1.0, 0.0, 0.0, 1.0],\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n      });\n      pass.end();\n      t.device.queue.submit([encoder.finish()]);\n    }\n\n    if (usage & GPUConst.TextureUsage.TEXTURE_BINDING) {\n      const bgl = t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: GPUShaderStage.FRAGMENT,\n            texture: {},\n          },\n        ],\n      });\n\n      t.device.createBindGroup({\n        layout: bgl,\n        entries: [\n          {\n            binding: 0,\n            resource: currentTexture.createView(),\n          },\n        ],\n      });\n    }\n\n    if (usage & GPUConst.TextureUsage.STORAGE_BINDING) {\n      const bgl = t.device.createBindGroupLayout({\n        entries: [\n          {\n            binding: 0,\n            visibility: GPUShaderStage.FRAGMENT,\n            storageTexture: { access: 'write-only', format: currentTexture.format },\n          },\n        ],\n      });\n\n      t.device.createBindGroup({\n        layout: bgl,\n        entries: [\n          {\n            binding: 0,\n            resource: currentTexture.createView(),\n          },\n        ],\n      });\n    }\n\n    if (usage & GPUConst.TextureUsage.COPY_DST) {\n      const rgbaData = new Uint8Array([255, 0, 0, 255]);\n\n      t.device.queue.writeTexture({ texture: currentTexture }, rgbaData, {}, [1, 1, 1]);\n    }\n\n    if (usage & GPUConst.TextureUsage.COPY_SRC) {\n      const size = [currentTexture.width, currentTexture.height, 1];\n      const dstTexture = t.device.createTexture({\n        format: currentTexture.format,\n        usage: GPUTextureUsage.COPY_DST,\n        size,\n      });\n\n      const encoder = t.device.createCommandEncoder();\n      encoder.copyTextureToTexture({ texture: currentTexture }, { texture: dstTexture }, size);\n      t.device.queue.submit([encoder.finish()]);\n    }\n  });\n\ng.test('alpha_mode')\n  .desc(\n    `\n    Ensure that all valid alphaMode values are allowed when calling configure.\n    `\n  )\n  .params(u =>\n    u //\n      .combine('canvasType', kAllCanvasTypes)\n      .beginSubcases()\n      .combine('alphaMode', ['opaque', 'premultiplied'] as const)\n  )\n  .fn(async t => {\n    const { canvasType, alphaMode } = t.params;\n    const canvas = createCanvas(t, canvasType, 2, 2);\n    const ctx = canvas.getContext('webgpu');\n    assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n    ctx.configure({\n      device: t.device,\n      format: 'rgba8unorm',\n      alphaMode,\n    });\n\n    const currentTexture = ctx.getCurrentTexture();\n    t.expect(currentTexture instanceof GPUTexture);\n  });\n"],"file":"configure.spec.js"}