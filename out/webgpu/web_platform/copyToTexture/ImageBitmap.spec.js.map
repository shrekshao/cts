{"version":3,"sources":["../../../../src/webgpu/web_platform/copyToTexture/ImageBitmap.spec.ts"],"names":["description","makeTestGroup","unreachable","kTextureFormatInfo","kValidTextureFormatsForCopyIB2T","GPUTest","kTexelRepresentationInfo","calculateRowPitch","width","bytesPerPixel","bytesPerRow","Color","generatedPixelCache","Map","F","checkCopyImageBitmapResult","src","expected","height","exp","Uint8Array","buffer","byteOffset","byteLength","rowPitch","readbackPromise","readGPUBufferRangeTyped","type","typedLength","eventualAsyncExpectation","niceStack","readback","check","checkBufferWithRowPitch","data","undefined","message","rec","expectationFailed","cleanup","actual","failedByteIndices","failedByteExpectedValues","failedByteActualValues","iLoop","i","j","indexExp","indexActual","length","push","toString","join","doTestAndCheckResult","imageBitmapCopyView","dstTextureCopyView","copySize","expectedData","device","queue","copyImageBitmapToTexture","imageBitmap","dstTexture","texture","testBuffer","createBuffer","size","usage","GPUBufferUsage","COPY_SRC","COPY_DST","encoder","createCommandEncoder","copyTextureToBuffer","mipLevel","origin","x","y","z","depthOrArrayLayers","submit","finish","generatePixel","color","format","transparentOp","formatEntry","get","set","colorEntry","has","rep","rgba","Red","R","G","B","A","Green","Blue","White","OpaqueBlack","TransparentBlack","pixels","pack","encode","getImagePixels","orientationOp","bytesPerBlock","imagePixels","Uint8ClampedArray","testColors","pixelPos","currentColorIndex","currentPixel","pixelData","g","test","desc","params","u","combine","beginSubcases","fn","t","alpha","orientation","dstColorFormat","imageData","ImageData","createImageBitmap","premultiplyAlpha","imageOrientation","dst","createTexture","GPUTextureUsage","RENDER_ATTACHMENT","dstBytesPerPixel","expectedPixels","imageCanvas","document","createElement","OffscreenCanvas","skip","imageCanvasContext","getContext","putImageData"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAVO,CAYP,SAASC,aAAT,QAA8B,yCAA9B;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA;;AAEEC,kBAFF;AAGEC,+BAHF;AAIO,0BAJP;AAKA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,wBAAT,QAAyC,kCAAzC;;AAEA,SAASC,iBAAT,CAA2BC,KAA3B,EAA0CC,aAA1C,EAAyE;AACvE,QAAMC,WAAW,GAAGF,KAAK,GAAGC,aAA5B;AACA;AACA,SAAQ,CAAEC,WAAW,GAAG,CAAf,IAAqB,CAAtB,IAA2B,CAA5B,IAAkC,CAAzC;AACD,C;;AAEIC,K;;;;;;;;;AASL;WATKA,K,GAAAA,K,CAAAA,K,qBAAAA,K,CAAAA,K,yBAAAA,K,CAAAA,K,uBAAAA,K,CAAAA,K,yBAAAA,K,CAAAA,K,qCAAAA,K,CAAAA,K,kDAAAA,K,KAAAA,K;;;AAaL;AACA,MAAMC,mBAGL;;;AAAG,IAAIC,GAAJ,EAHJ;;AAKA,MAAMC,CAAN,SAAgBT,OAAhB,CAAwB;AACtB;AACAU,EAAAA,0BAA0B;AACxBC,EAAAA,GADwB;AAExBC,EAAAA,QAFwB;AAGxBT,EAAAA,KAHwB;AAIxBU,EAAAA,MAJwB;AAKxBT,EAAAA,aALwB;AAMlB;AACN,UAAMU,GAAG,GAAG,IAAIC,UAAJ,CAAeH,QAAQ,CAACI,MAAxB,EAAgCJ,QAAQ,CAACK,UAAzC,EAAqDL,QAAQ,CAACM,UAA9D,CAAZ;AACA,UAAMC,QAAQ,GAAGjB,iBAAiB,CAACC,KAAD,EAAQC,aAAR,CAAlC;;AAEA,UAAMgB,eAAe,GAAG,KAAKC,uBAAL,CAA6BV,GAA7B,EAAkC;AACxDW,MAAAA,IAAI,EAAEP,UADkD;AAExDQ,MAAAA,WAAW,EAAEJ,QAAQ,GAAGN,MAFgC,EAAlC,CAAxB;;;AAKA,SAAKW,wBAAL,CAA8B,MAAMC,SAAN,IAAmB;AAC/C,YAAMC,QAAQ,GAAG,MAAMN,eAAvB;AACA,YAAMO,KAAK,GAAG,KAAKC,uBAAL;AACZF,MAAAA,QAAQ,CAACG,IADG;AAEZf,MAAAA,GAFY;AAGZX,MAAAA,KAHY;AAIZU,MAAAA,MAJY;AAKZM,MAAAA,QALY;AAMZf,MAAAA,aANY,CAAd;;AAQA,UAAIuB,KAAK,KAAKG,SAAd,EAAyB;AACvBL,QAAAA,SAAS,CAACM,OAAV,GAAoBJ,KAApB;AACA,aAAKK,GAAL,CAASC,iBAAT,CAA2BR,SAA3B;AACD;AACDC,MAAAA,QAAQ,CAACQ,OAAT;AACD,KAfD;AAgBD;;AAED;AACAN,EAAAA,uBAAuB;AACrBO,EAAAA,MADqB;AAErBrB,EAAAA,GAFqB;AAGrBX,EAAAA,KAHqB;AAIrBU,EAAAA,MAJqB;AAKrBM,EAAAA,QALqB;AAMrBf,EAAAA,aANqB;AAOD;AACpB,UAAMgC,iBAA2B,GAAG,EAApC;AACA,UAAMC,wBAAkC,GAAG,EAA3C;AACA,UAAMC,sBAAgC,GAAG,EAAzC;AACAC,IAAAA,KAAK,EAAE,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG3B,MAApB,EAA4B,EAAE2B,CAA9B,EAAiC;AACtC,YAAMnC,WAAW,GAAGF,KAAK,GAAGC,aAA5B;AACA,WAAK,IAAIqC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpC,WAApB,EAAiC,EAAEoC,CAAnC,EAAsC;AACpC,cAAMC,QAAQ,GAAGD,CAAC,GAAGD,CAAC,GAAGnC,WAAzB;AACA,cAAMsC,WAAW,GAAGF,CAAC,GAAGtB,QAAQ,GAAGqB,CAAnC;AACA,YAAIL,MAAM,CAACQ,WAAD,CAAN,KAAwB7B,GAAG,CAAC4B,QAAD,CAA/B,EAA2C;AACzC,cAAIN,iBAAiB,CAACQ,MAAlB,IAA4B,CAAhC,EAAmC;AACjCR,YAAAA,iBAAiB,CAACS,IAAlB,CAAuB,KAAvB;AACAR,YAAAA,wBAAwB,CAACQ,IAAzB,CAA8B,KAA9B;AACAP,YAAAA,sBAAsB,CAACO,IAAvB,CAA4B,KAA5B;AACA,kBAAMN,KAAN;AACD;AACDH,UAAAA,iBAAiB,CAACS,IAAlB,CAAwB,IAAGL,CAAE,IAAGC,CAAE,GAAlC;AACAJ,UAAAA,wBAAwB,CAACQ,IAAzB,CAA8B/B,GAAG,CAAC4B,QAAD,CAAH,CAAcI,QAAd,EAA9B;AACAR,UAAAA,sBAAsB,CAACO,IAAvB,CAA4BV,MAAM,CAACQ,WAAD,CAAN,CAAoBG,QAApB,EAA5B;AACD;AACF;AACF;AACD,QAAIV,iBAAiB,CAACQ,MAAlB,GAA2B,CAA/B,EAAkC;AAChC,aAAQ,OAAMR,iBAAiB,CAACW,IAAlB,CAAuB,IAAvB,CAA6B;AACjD,YAAYV,wBAAwB,CAACU,IAAzB,CAA8B,IAA9B,CAAoC;AAChD,OAAOT,sBAAsB,CAACS,IAAvB,CAA4B,IAA5B,CAAkC,GAFnC;AAGD;AACD,WAAOjB,SAAP;AACD;;AAEDkB,EAAAA,oBAAoB;AAClBC,EAAAA,mBADkB;AAElBC,EAAAA,kBAFkB;AAGlBC,EAAAA,QAHkB;AAIlB/C,EAAAA,aAJkB;AAKlBgD,EAAAA,YALkB;AAMZ;AACN,SAAKC,MAAL,CAAYC,KAAZ,CAAkBC,wBAAlB,CAA2CN,mBAA3C,EAAgEC,kBAAhE,EAAoFC,QAApF;;AAEA,UAAMK,WAAW,GAAGP,mBAAmB,CAACO,WAAxC;AACA,UAAMC,UAAU,GAAGP,kBAAkB,CAACQ,OAAtC;;AAEA,UAAMrD,WAAW,GAAGH,iBAAiB,CAACsD,WAAW,CAACrD,KAAb,EAAoBC,aAApB,CAArC;AACA,UAAMuD,UAAU,GAAG,KAAKN,MAAL,CAAYO,YAAZ,CAAyB;AAC1CC,MAAAA,IAAI,EAAExD,WAAW,GAAGmD,WAAW,CAAC3C,MADU;AAE1CiD,MAAAA,KAAK,EAAEC,cAAc,CAACC,QAAf,GAA0BD,cAAc,CAACE,QAFN,EAAzB,CAAnB;;;AAKA,UAAMC,OAAO,GAAG,KAAKb,MAAL,CAAYc,oBAAZ,EAAhB;;AAEAD,IAAAA,OAAO,CAACE,mBAAR;AACE,MAAEV,OAAO,EAAED,UAAX,EAAuBY,QAAQ,EAAE,CAAjC,EAAoCC,MAAM,EAAE,EAAEC,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,CAAC,EAAE,CAAjB,EAA5C,EADF;AAEE,MAAEzD,MAAM,EAAE2C,UAAV,EAAsBtD,WAAtB,EAFF;AAGE,MAAEF,KAAK,EAAEqD,WAAW,CAACrD,KAArB,EAA4BU,MAAM,EAAE2C,WAAW,CAAC3C,MAAhD,EAAwD6D,kBAAkB,EAAE,CAA5E,EAHF;;AAKA,SAAKrB,MAAL,CAAYC,KAAZ,CAAkBqB,MAAlB,CAAyB,CAACT,OAAO,CAACU,MAAR,EAAD,CAAzB;;AAEA,SAAKlE,0BAAL;AACEiD,IAAAA,UADF;AAEEP,IAAAA,YAFF;AAGEI,IAAAA,WAAW,CAACrD,KAHd;AAIEqD,IAAAA,WAAW,CAAC3C,MAJd;AAKET,IAAAA,aALF;;AAOD;;AAEDyE,EAAAA,aAAa;AACXC,EAAAA,KADW;AAEXC,EAAAA,MAFW;AAGXC,EAAAA,aAHW;AAIC;AACZ,QAAIC,WAAW,GAAG1E,mBAAmB,CAAC2E,GAApB,CAAwBH,MAAxB,CAAlB;AACA,QAAIE,WAAW,KAAKnD,SAApB,EAA+B;AAC7BmD,MAAAA,WAAW,GAAG,IAAIzE,GAAJ,EAAd;AACAD,MAAAA,mBAAmB,CAAC4E,GAApB,CAAwBJ,MAAxB,EAAgCE,WAAhC;AACD;;AAED,QAAIG,UAAU,GAAGH,WAAW,CAACC,GAAZ,CAAgBJ,KAAhB,CAAjB;AACA,QAAIM,UAAU,KAAKtD,SAAnB,EAA8B;AAC5BsD,MAAAA,UAAU,GAAG,IAAI5E,GAAJ,EAAb;AACAyE,MAAAA,WAAW,CAACE,GAAZ,CAAgBL,KAAhB,EAAuBM,UAAvB;AACD;;AAED;AACA,QAAI,CAACA,UAAU,CAACC,GAAX,CAAeL,aAAf,CAAL,EAAoC;AAClC,YAAMM,GAAG,GAAGrF,wBAAwB,CAAC8E,MAAD,CAApC;AACA,UAAIQ,IAAJ;AACA,cAAQT,KAAR;AACE,aAAKxE,KAAK,CAACkF,GAAX;AACED,UAAAA,IAAI,GAAG,EAAEE,CAAC,EAAE,GAAL,EAAUC,CAAC,EAAE,GAAb,EAAkBC,CAAC,EAAE,GAArB,EAA0BC,CAAC,EAAE,GAA7B,EAAP;AACA;AACF,aAAKtF,KAAK,CAACuF,KAAX;AACEN,UAAAA,IAAI,GAAG,EAAEE,CAAC,EAAE,GAAL,EAAUC,CAAC,EAAE,GAAb,EAAkBC,CAAC,EAAE,GAArB,EAA0BC,CAAC,EAAE,GAA7B,EAAP;AACA;AACF,aAAKtF,KAAK,CAACwF,IAAX;AACEP,UAAAA,IAAI,GAAG,EAAEE,CAAC,EAAE,GAAL,EAAUC,CAAC,EAAE,GAAb,EAAkBC,CAAC,EAAE,GAArB,EAA0BC,CAAC,EAAE,GAA7B,EAAP;AACA;AACF,aAAKtF,KAAK,CAACyF,KAAX;AACER,UAAAA,IAAI,GAAG,EAAEE,CAAC,EAAE,GAAL,EAAUC,CAAC,EAAE,GAAb,EAAkBC,CAAC,EAAE,GAArB,EAA0BC,CAAC,EAAE,GAA7B,EAAP;AACA;AACF,aAAKtF,KAAK,CAAC0F,WAAX;AACET,UAAAA,IAAI,GAAG,EAAEE,CAAC,EAAE,GAAL,EAAUC,CAAC,EAAE,GAAb,EAAkBC,CAAC,EAAE,GAArB,EAA0BC,CAAC,EAAE,GAA7B,EAAP;AACA;AACF,aAAKtF,KAAK,CAAC2F,gBAAX;AACEV,UAAAA,IAAI,GAAG,EAAEE,CAAC,EAAE,GAAL,EAAUC,CAAC,EAAE,GAAb,EAAkBC,CAAC,EAAE,GAArB,EAA0BC,CAAC,EAAE,GAA7B,EAAP;AACA;AACF;AACE/F,UAAAA,WAAW,GApBf;;;AAuBA,UAAImF,aAAa,KAAK,aAAtB,EAAqC;AACnCO,QAAAA,IAAI,CAACE,CAAL,IAAUF,IAAI,CAACK,CAAf;AACAL,QAAAA,IAAI,CAACG,CAAL,IAAUH,IAAI,CAACK,CAAf;AACAL,QAAAA,IAAI,CAACI,CAAL,IAAUJ,IAAI,CAACK,CAAf;AACD;;AAED,YAAMM,MAAM,GAAG,IAAInF,UAAJ,CAAeuE,GAAG,CAACa,IAAJ,CAASb,GAAG,CAACc,MAAJ,CAAWb,IAAX,CAAT,CAAf,CAAf;AACAH,MAAAA,UAAU,CAACD,GAAX,CAAeH,aAAf,EAA8BkB,MAA9B;AACD;;AAED,WAAOd,UAAU,CAACF,GAAX,CAAeF,aAAf,CAAP;AACD;;AAED;AACAqB,EAAAA,cAAc,CAAC;AACbtB,IAAAA,MADa;AAEb5E,IAAAA,KAFa;AAGbU,IAAAA,MAHa;AAIbmE,IAAAA,aAJa;AAKbsB,IAAAA,aALa,EAAD;;;;;;;AAYQ;AACpB,UAAMlG,aAAa,GAAGN,kBAAkB,CAACiF,MAAD,CAAlB,CAA2BwB,aAAjD;;AAEA;AACA,UAAMC,WAAW,GAAG,IAAIC,iBAAJ,CAAsBrG,aAAa,GAAGD,KAAhB,GAAwBU,MAA9C,CAApB;AACA,UAAM6F,UAAU,GAAG,CAACpG,KAAK,CAACkF,GAAP,EAAYlF,KAAK,CAACuF,KAAlB,EAAyBvF,KAAK,CAACwF,IAA/B,EAAqCxF,KAAK,CAACyF,KAA3C,EAAkDzF,KAAK,CAAC0F,WAAxD,CAAnB;AACA,QAAIhB,aAAa,KAAK,iBAAtB,EAAyC0B,UAAU,CAAC7D,IAAX,CAAgBvC,KAAK,CAAC2F,gBAAtB;;AAEzC,SAAK,IAAIzD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG3B,MAApB,EAA4B,EAAE2B,CAA9B,EAAiC;AAC/B,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtC,KAApB,EAA2B,EAAEsC,CAA7B,EAAgC;AAC9B,cAAMkE,QAAQ,GAAGnE,CAAC,GAAGrC,KAAJ,GAAYsC,CAA7B;AACA,cAAMmE,iBAAiB;AACrBN,QAAAA,aAAa,KAAK,OAAlB,GAA4B,CAACzF,MAAM,GAAG2B,CAAT,GAAa,CAAd,IAAmBrC,KAAnB,GAA2BsC,CAAvD,GAA2DkE,QAD7D;AAEA,cAAME,YAAY,GAAGH,UAAU,CAACE,iBAAiB,GAAGF,UAAU,CAAC9D,MAAhC,CAA/B;AACA,cAAMkE,SAAS,GAAG,KAAKjC,aAAL,CAAmBgC,YAAnB,EAAiC9B,MAAjC,EAAyCC,aAAzC,CAAlB;AACAwB,QAAAA,WAAW,CAACrB,GAAZ,CAAgB2B,SAAhB,EAA2BH,QAAQ,GAAGvG,aAAtC;AACD;AACF;;AAED,WAAOoG,WAAP;AACD,GAvMqB;;;AA0MxB,OAAO,MAAMO,CAAC,GAAGnH,aAAa,CAACa,CAAD,CAAvB;;AAEPsG,CAAC,CAACC,IAAF,CAAO,gBAAP;AACGC,IADH;AAEK;AACL;AACA;AACA;AACA,GANA;;AAQGC,MARH,CAQU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,OADX,EACoB,CAAC,MAAD,EAAS,aAAT,CADpB;AAEGA,OAFH,CAEW,aAFX,EAE0B,CAAC,MAAD,EAAS,OAAT,CAF1B;AAGGA,OAHH,CAGW,gBAHX,EAG6BrH,+BAH7B;AAIGsH,aAJH;AAKGD,OALH,CAKW,OALX,EAKoB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,EAAV,EAAc,GAAd,EAAmB,GAAnB,CALpB;AAMGA,OANH,CAMW,QANX,EAMqB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,EAAV,EAAc,GAAd,EAAmB,GAAnB,CANrB,CATJ;;AAiBGE,EAjBH,CAiBM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEpH,KAAF,EAASU,MAAT,EAAiB2G,KAAjB,EAAwBC,WAAxB,EAAqCC,cAArC,KAAwDH,CAAC,CAACL,MAAhE;;AAEA;AACA,QAAMV,WAAW,GAAGe,CAAC,CAAClB,cAAF,CAAiB;AACnCtB,IAAAA,MAAM,EAAE,YAD2B;AAEnC5E,IAAAA,KAFmC;AAGnCU,IAAAA,MAHmC;AAInCmE,IAAAA,aAAa,EAAE,MAJoB;AAKnCsB,IAAAA,aAAa,EAAE,MALoB,EAAjB,CAApB;;;AAQA;AACA,QAAMqB,SAAS,GAAG,IAAIC,SAAJ,CAAcpB,WAAd,EAA2BrG,KAA3B,EAAkCU,MAAlC,CAAlB;AACA,QAAM2C,WAAW,GAAG,MAAMqE,iBAAiB,CAACF,SAAD,EAAY;AACrDG,IAAAA,gBAAgB,EAAEN,KADmC;AAErDO,IAAAA,gBAAgB,EAAEN,WAFmC,EAAZ,CAA3C;;;AAKA,QAAMO,GAAG,GAAGT,CAAC,CAAClE,MAAF,CAAS4E,aAAT,CAAuB;AACjCpE,IAAAA,IAAI,EAAE;AACJ1D,MAAAA,KAAK,EAAEqD,WAAW,CAACrD,KADf;AAEJU,MAAAA,MAAM,EAAE2C,WAAW,CAAC3C,MAFhB;AAGJ6D,MAAAA,kBAAkB,EAAE,CAHhB,EAD2B;;AAMjCK,IAAAA,MAAM,EAAE2C,cANyB;AAOjC5D,IAAAA,KAAK;AACHoE,IAAAA,eAAe,CAACjE,QAAhB,GAA2BiE,eAAe,CAAClE,QAA3C,GAAsDkE,eAAe,CAACC,iBARvC,EAAvB,CAAZ;;;AAWA;AACA,QAAMC,gBAAgB,GAAGtI,kBAAkB,CAAC4H,cAAD,CAAlB,CAAmCnB,aAA5D;AACA,QAAM8B,cAAc,GAAGd,CAAC,CAAClB,cAAF,CAAiB;AACtCtB,IAAAA,MAAM,EAAE2C,cAD8B;AAEtCvH,IAAAA,KAFsC;AAGtCU,IAAAA,MAHsC;AAItCmE,IAAAA,aAAa,EAAEwC,KAJuB;AAKtClB,IAAAA,aAAa,EAAEmB,WALuB,EAAjB,CAAvB;;;AAQAF,EAAAA,CAAC,CAACvE,oBAAF;AACE,IAAEQ,WAAF,EAAec,MAAM,EAAE,EAAEC,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAvB,EADF;AAEE,IAAEd,OAAO,EAAEsE,GAAX,EAFF;AAGE,IAAE7H,KAAK,EAAEqD,WAAW,CAACrD,KAArB,EAA4BU,MAAM,EAAE2C,WAAW,CAAC3C,MAAhD,EAAwD6D,kBAAkB,EAAE,CAA5E,EAHF;AAIE0D,EAAAA,gBAJF;AAKEC,EAAAA,cALF;;AAOD,CAhEH;;AAkEAtB,CAAC,CAACC,IAAF,CAAO,aAAP;AACGC,IADH;AAEK;AACL;AACA;AACA,GALA;;AAOGC,MAPH,CAOU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,aADX,EAC0B,CAAC,MAAD,EAAS,OAAT,CAD1B;AAEGA,OAFH,CAEW,gBAFX,EAE6BrH,+BAF7B;AAGGsH,aAHH;AAIGD,OAJH,CAIW,OAJX,EAIoB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,EAAV,EAAc,GAAd,EAAmB,GAAnB,CAJpB;AAKGA,OALH,CAKW,QALX,EAKqB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,EAAV,EAAc,GAAd,EAAmB,GAAnB,CALrB,CARJ;;AAeGE,EAfH,CAeM,MAAMC,CAAN,IAAW;AACb,QAAM,EAAEpH,KAAF,EAASU,MAAT,EAAiB4G,WAAjB,EAA8BC,cAA9B,KAAiDH,CAAC,CAACL,MAAzD;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAIoB,WAAJ;AACA,MAAI,OAAOC,QAAP,KAAoB,WAAxB,EAAqC;AACnCD,IAAAA,WAAW,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAd;AACAF,IAAAA,WAAW,CAACnI,KAAZ,GAAoBA,KAApB;AACAmI,IAAAA,WAAW,CAACzH,MAAZ,GAAqBA,MAArB;AACD,GAJD,MAIO,IAAI,OAAO4H,eAAP,KAA2B,WAA/B,EAA4C;AACjDlB,IAAAA,CAAC,CAACmB,IAAF,CAAO,kCAAP;AACA;AACD,GAHM,MAGA;AACLJ,IAAAA,WAAW,GAAG,IAAIG,eAAJ,CAAoBtI,KAApB,EAA2BU,MAA3B,CAAd;AACD;AACD,QAAM8H,kBAAkB,GAAGL,WAAW,CAACM,UAAZ,CAAuB,IAAvB,CAA3B;AACA,MAAID,kBAAkB,KAAK,IAA3B,EAAiC;AAC/BpB,IAAAA,CAAC,CAACmB,IAAF,CAAO,4CAAP;AACA;AACD;;AAED;AACA;AACA;AACA,QAAMlC,WAAW,GAAGe,CAAC,CAAClB,cAAF,CAAiB;AACnCtB,IAAAA,MAAM,EAAE,YAD2B;AAEnC5E,IAAAA,KAFmC;AAGnCU,IAAAA,MAHmC;AAInCmE,IAAAA,aAAa,EAAE,iBAJoB;AAKnCsB,IAAAA,aAAa,EAAE,MALoB,EAAjB,CAApB;;;AAQA,QAAMqB,SAAS,GAAG,IAAIC,SAAJ,CAAcpB,WAAd,EAA2BrG,KAA3B,EAAkCU,MAAlC,CAAlB;;AAEA;AACA8H,EAAAA,kBAAkB,CAACE,YAAnB,CAAgClB,SAAhC,EAA2C,CAA3C,EAA8C,CAA9C;;AAEA,QAAMnE,WAAW,GAAG,MAAMqE,iBAAiB,CAACS,WAAD,EAAc;AACvDR,IAAAA,gBAAgB,EAAE,aADqC;AAEvDC,IAAAA,gBAAgB,EAAEN,WAFqC,EAAd,CAA3C;;;AAKA,QAAMO,GAAG,GAAGT,CAAC,CAAClE,MAAF,CAAS4E,aAAT,CAAuB;AACjCpE,IAAAA,IAAI,EAAE;AACJ1D,MAAAA,KAAK,EAAEqD,WAAW,CAACrD,KADf;AAEJU,MAAAA,MAAM,EAAE2C,WAAW,CAAC3C,MAFhB;AAGJ6D,MAAAA,kBAAkB,EAAE,CAHhB,EAD2B;;AAMjCK,IAAAA,MAAM,EAAE2C,cANyB;AAOjC5D,IAAAA,KAAK;AACHoE,IAAAA,eAAe,CAACjE,QAAhB,GAA2BiE,eAAe,CAAClE,QAA3C,GAAsDkE,eAAe,CAACC,iBARvC,EAAvB,CAAZ;;;AAWA,QAAMC,gBAAgB,GAAGtI,kBAAkB,CAAC4H,cAAD,CAAlB,CAAmCnB,aAA5D;AACA,QAAMnD,YAAY,GAAGmE,CAAC,CAAClB,cAAF,CAAiB;AACpCtB,IAAAA,MAAM,EAAE2C,cAD4B;AAEpCvH,IAAAA,KAFoC;AAGpCU,IAAAA,MAHoC;AAIpCmE,IAAAA,aAAa,EAAE,iBAJqB;AAKpCsB,IAAAA,aAAa,EAAEmB,WALqB,EAAjB,CAArB;;;AAQAF,EAAAA,CAAC,CAACvE,oBAAF;AACE,IAAEQ,WAAF,EAAec,MAAM,EAAE,EAAEC,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAvB,EADF;AAEE,IAAEd,OAAO,EAAEsE,GAAX,EAFF;AAGE,IAAE7H,KAAK,EAAEqD,WAAW,CAACrD,KAArB,EAA4BU,MAAM,EAAE2C,WAAW,CAAC3C,MAAhD,EAAwD6D,kBAAkB,EAAE,CAA5E,EAHF;AAIE0D,EAAAA,gBAJF;AAKEhF,EAAAA,YALF;;AAOD,CAxFH","sourcesContent":["export const description = `\ncopyImageBitmapToTexture from ImageBitmaps created from various sources.\n\nTODO: Test ImageBitmap generated from all possible ImageBitmapSource, relevant ImageBitmapOptions\n    (https://html.spec.whatwg.org/multipage/imagebitmap-and-animations.html#images-2)\n    and various source filetypes and metadata (weird dimensions, EXIF orientations, video rotations\n    and visible/crop rectangles, etc. (In theory these things are handled inside createImageBitmap,\n    but in theory could affect the internal representation of the ImageBitmap.)\n\nTODO: Test zero-sized copies from all sources (just make sure params cover it) (e.g. 0x0, 0x4, 4x0).\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { unreachable } from '../../../common/util/util.js';\nimport {\n  RegularTextureFormat,\n  kTextureFormatInfo,\n  kValidTextureFormatsForCopyIB2T,\n} from '../../capability_info.js';\nimport { GPUTest } from '../../gpu_test.js';\nimport { kTexelRepresentationInfo } from '../../util/texture/texel_data.js';\n\nfunction calculateRowPitch(width: number, bytesPerPixel: number): number {\n  const bytesPerRow = width * bytesPerPixel;\n  // Rounds up to a multiple of 256 according to WebGPU requirements.\n  return (((bytesPerRow - 1) >> 8) + 1) << 8;\n}\n\nenum Color {\n  Red,\n  Green,\n  Blue,\n  White,\n  OpaqueBlack,\n  TransparentBlack,\n}\n\n// These two types correspond to |premultiplyAlpha| and |imageOrientation| in |ImageBitmapOptions|.\ntype TransparentOp = 'premultiply' | 'none' | 'non-transparent';\ntype OrientationOp = 'flipY' | 'none';\n\n// Cache for generated pixels.\nconst generatedPixelCache: Map<\n  RegularTextureFormat,\n  Map<Color, Map<TransparentOp, Uint8Array>>\n> = new Map();\n\nclass F extends GPUTest {\n  // TODO(crbug.com/dawn/868): Should be possible to consolidate this along with texture checking\n  checkCopyImageBitmapResult(\n    src: GPUBuffer,\n    expected: ArrayBufferView,\n    width: number,\n    height: number,\n    bytesPerPixel: number\n  ): void {\n    const exp = new Uint8Array(expected.buffer, expected.byteOffset, expected.byteLength);\n    const rowPitch = calculateRowPitch(width, bytesPerPixel);\n\n    const readbackPromise = this.readGPUBufferRangeTyped(src, {\n      type: Uint8Array,\n      typedLength: rowPitch * height,\n    });\n\n    this.eventualAsyncExpectation(async niceStack => {\n      const readback = await readbackPromise;\n      const check = this.checkBufferWithRowPitch(\n        readback.data,\n        exp,\n        width,\n        height,\n        rowPitch,\n        bytesPerPixel\n      );\n      if (check !== undefined) {\n        niceStack.message = check;\n        this.rec.expectationFailed(niceStack);\n      }\n      readback.cleanup();\n    });\n  }\n\n  // TODO(crbug.com/dawn/868): Should be possible to consolidate this along with texture checking\n  checkBufferWithRowPitch(\n    actual: Uint8Array,\n    exp: Uint8Array,\n    width: number,\n    height: number,\n    rowPitch: number,\n    bytesPerPixel: number\n  ): string | undefined {\n    const failedByteIndices: string[] = [];\n    const failedByteExpectedValues: string[] = [];\n    const failedByteActualValues: string[] = [];\n    iLoop: for (let i = 0; i < height; ++i) {\n      const bytesPerRow = width * bytesPerPixel;\n      for (let j = 0; j < bytesPerRow; ++j) {\n        const indexExp = j + i * bytesPerRow;\n        const indexActual = j + rowPitch * i;\n        if (actual[indexActual] !== exp[indexExp]) {\n          if (failedByteIndices.length >= 4) {\n            failedByteIndices.push('...');\n            failedByteExpectedValues.push('...');\n            failedByteActualValues.push('...');\n            break iLoop;\n          }\n          failedByteIndices.push(`(${i},${j})`);\n          failedByteExpectedValues.push(exp[indexExp].toString());\n          failedByteActualValues.push(actual[indexActual].toString());\n        }\n      }\n    }\n    if (failedByteIndices.length > 0) {\n      return `at [${failedByteIndices.join(', ')}], \\\nexpected [${failedByteExpectedValues.join(', ')}], \\\ngot [${failedByteActualValues.join(', ')}]`;\n    }\n    return undefined;\n  }\n\n  doTestAndCheckResult(\n    imageBitmapCopyView: GPUImageCopyImageBitmap,\n    dstTextureCopyView: GPUImageCopyTexture,\n    copySize: GPUExtent3DDict,\n    bytesPerPixel: number,\n    expectedData: Uint8ClampedArray\n  ): void {\n    this.device.queue.copyImageBitmapToTexture(imageBitmapCopyView, dstTextureCopyView, copySize);\n\n    const imageBitmap = imageBitmapCopyView.imageBitmap;\n    const dstTexture = dstTextureCopyView.texture;\n\n    const bytesPerRow = calculateRowPitch(imageBitmap.width, bytesPerPixel);\n    const testBuffer = this.device.createBuffer({\n      size: bytesPerRow * imageBitmap.height,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n\n    const encoder = this.device.createCommandEncoder();\n\n    encoder.copyTextureToBuffer(\n      { texture: dstTexture, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n      { buffer: testBuffer, bytesPerRow },\n      { width: imageBitmap.width, height: imageBitmap.height, depthOrArrayLayers: 1 }\n    );\n    this.device.queue.submit([encoder.finish()]);\n\n    this.checkCopyImageBitmapResult(\n      testBuffer,\n      expectedData,\n      imageBitmap.width,\n      imageBitmap.height,\n      bytesPerPixel\n    );\n  }\n\n  generatePixel(\n    color: Color,\n    format: RegularTextureFormat,\n    transparentOp: TransparentOp\n  ): Uint8Array {\n    let formatEntry = generatedPixelCache.get(format);\n    if (formatEntry === undefined) {\n      formatEntry = new Map();\n      generatedPixelCache.set(format, formatEntry);\n    }\n\n    let colorEntry = formatEntry.get(color);\n    if (colorEntry === undefined) {\n      colorEntry = new Map();\n      formatEntry.set(color, colorEntry);\n    }\n\n    // None of the dst texture format is 'uint' or 'sint', so we can always use float value.\n    if (!colorEntry.has(transparentOp)) {\n      const rep = kTexelRepresentationInfo[format];\n      let rgba: { R: number; G: number; B: number; A: number };\n      switch (color) {\n        case Color.Red:\n          rgba = { R: 1.0, G: 0.0, B: 0.0, A: 1.0 };\n          break;\n        case Color.Green:\n          rgba = { R: 0.0, G: 1.0, B: 0.0, A: 1.0 };\n          break;\n        case Color.Blue:\n          rgba = { R: 0.0, G: 0.0, B: 1.0, A: 1.0 };\n          break;\n        case Color.White:\n          rgba = { R: 0.0, G: 0.0, B: 0.0, A: 1.0 };\n          break;\n        case Color.OpaqueBlack:\n          rgba = { R: 1.0, G: 1.0, B: 1.0, A: 1.0 };\n          break;\n        case Color.TransparentBlack:\n          rgba = { R: 1.0, G: 1.0, B: 1.0, A: 0.0 };\n          break;\n        default:\n          unreachable();\n      }\n\n      if (transparentOp === 'premultiply') {\n        rgba.R *= rgba.A;\n        rgba.G *= rgba.A;\n        rgba.B *= rgba.A;\n      }\n\n      const pixels = new Uint8Array(rep.pack(rep.encode(rgba)));\n      colorEntry.set(transparentOp, pixels);\n    }\n\n    return colorEntry.get(transparentOp)!;\n  }\n\n  // Helper functions to generate imagePixels based input configs.\n  getImagePixels({\n    format,\n    width,\n    height,\n    transparentOp,\n    orientationOp,\n  }: {\n    format: RegularTextureFormat;\n    width: number;\n    height: number;\n    transparentOp: TransparentOp;\n    orientationOp: OrientationOp;\n  }): Uint8ClampedArray {\n    const bytesPerPixel = kTextureFormatInfo[format].bytesPerBlock;\n\n    // Generate input contents by iterating 'Color' enum\n    const imagePixels = new Uint8ClampedArray(bytesPerPixel * width * height);\n    const testColors = [Color.Red, Color.Green, Color.Blue, Color.White, Color.OpaqueBlack];\n    if (transparentOp !== 'non-transparent') testColors.push(Color.TransparentBlack);\n\n    for (let i = 0; i < height; ++i) {\n      for (let j = 0; j < width; ++j) {\n        const pixelPos = i * width + j;\n        const currentColorIndex =\n          orientationOp === 'flipY' ? (height - i - 1) * width + j : pixelPos;\n        const currentPixel = testColors[currentColorIndex % testColors.length];\n        const pixelData = this.generatePixel(currentPixel, format, transparentOp);\n        imagePixels.set(pixelData, pixelPos * bytesPerPixel);\n      }\n    }\n\n    return imagePixels;\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('from_ImageData')\n  .desc(\n    `\n  Test ImageBitmap generated from ImageData can be copied to WebGPU\n  texture correctly. These imageBitmaps are highly possible living\n  in CPU back resource.\n  `\n  )\n  .params(u =>\n    u\n      .combine('alpha', ['none', 'premultiply'] as const)\n      .combine('orientation', ['none', 'flipY'] as const)\n      .combine('dstColorFormat', kValidTextureFormatsForCopyIB2T)\n      .beginSubcases()\n      .combine('width', [1, 2, 4, 15, 255, 256])\n      .combine('height', [1, 2, 4, 15, 255, 256])\n  )\n  .fn(async t => {\n    const { width, height, alpha, orientation, dstColorFormat } = t.params;\n\n    // Generate input contents by iterating 'Color' enum\n    const imagePixels = t.getImagePixels({\n      format: 'rgba8unorm',\n      width,\n      height,\n      transparentOp: 'none',\n      orientationOp: 'none',\n    });\n\n    // Generate correct expected values\n    const imageData = new ImageData(imagePixels, width, height);\n    const imageBitmap = await createImageBitmap(imageData, {\n      premultiplyAlpha: alpha,\n      imageOrientation: orientation,\n    });\n\n    const dst = t.device.createTexture({\n      size: {\n        width: imageBitmap.width,\n        height: imageBitmap.height,\n        depthOrArrayLayers: 1,\n      },\n      format: dstColorFormat,\n      usage:\n        GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    // Construct expected value for different dst color format\n    const dstBytesPerPixel = kTextureFormatInfo[dstColorFormat].bytesPerBlock;\n    const expectedPixels = t.getImagePixels({\n      format: dstColorFormat,\n      width,\n      height,\n      transparentOp: alpha,\n      orientationOp: orientation,\n    });\n\n    t.doTestAndCheckResult(\n      { imageBitmap, origin: { x: 0, y: 0 } },\n      { texture: dst },\n      { width: imageBitmap.width, height: imageBitmap.height, depthOrArrayLayers: 1 },\n      dstBytesPerPixel,\n      expectedPixels\n    );\n  });\n\ng.test('from_canvas')\n  .desc(\n    `\n  Test ImageBitmap generated from canvas/offscreenCanvas can be copied to WebGPU\n  texture correctly. These imageBitmaps are highly possible living in GPU back resource.\n  `\n  )\n  .params(u =>\n    u\n      .combine('orientation', ['none', 'flipY'] as const)\n      .combine('dstColorFormat', kValidTextureFormatsForCopyIB2T)\n      .beginSubcases()\n      .combine('width', [1, 2, 4, 15, 255, 256])\n      .combine('height', [1, 2, 4, 15, 255, 256])\n  )\n  .fn(async t => {\n    const { width, height, orientation, dstColorFormat } = t.params;\n\n    // CTS sometimes runs on worker threads, where document is not available.\n    // In this case, OffscreenCanvas can be used instead of <canvas>.\n    // But some browsers don't support OffscreenCanvas, and some don't\n    // support '2d' contexts on OffscreenCanvas.\n    // In this situation, the case will be skipped.\n    let imageCanvas;\n    if (typeof document !== 'undefined') {\n      imageCanvas = document.createElement('canvas');\n      imageCanvas.width = width;\n      imageCanvas.height = height;\n    } else if (typeof OffscreenCanvas === 'undefined') {\n      t.skip('OffscreenCanvas is not supported');\n      return;\n    } else {\n      imageCanvas = new OffscreenCanvas(width, height);\n    }\n    const imageCanvasContext = imageCanvas.getContext('2d');\n    if (imageCanvasContext === null) {\n      t.skip('OffscreenCanvas \"2d\" context not available');\n      return;\n    }\n\n    // Generate non-transparent pixel data to avoid canvas\n    // different opt behaviour on putImageData()\n    // from browsers.\n    const imagePixels = t.getImagePixels({\n      format: 'rgba8unorm',\n      width,\n      height,\n      transparentOp: 'non-transparent',\n      orientationOp: 'none',\n    });\n\n    const imageData = new ImageData(imagePixels, width, height);\n\n    // Use putImageData to prevent color space conversion.\n    imageCanvasContext.putImageData(imageData, 0, 0);\n\n    const imageBitmap = await createImageBitmap(imageCanvas, {\n      premultiplyAlpha: 'premultiply',\n      imageOrientation: orientation,\n    });\n\n    const dst = t.device.createTexture({\n      size: {\n        width: imageBitmap.width,\n        height: imageBitmap.height,\n        depthOrArrayLayers: 1,\n      },\n      format: dstColorFormat,\n      usage:\n        GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const dstBytesPerPixel = kTextureFormatInfo[dstColorFormat].bytesPerBlock;\n    const expectedData = t.getImagePixels({\n      format: dstColorFormat,\n      width,\n      height,\n      transparentOp: 'non-transparent',\n      orientationOp: orientation,\n    });\n\n    t.doTestAndCheckResult(\n      { imageBitmap, origin: { x: 0, y: 0 } },\n      { texture: dst },\n      { width: imageBitmap.width, height: imageBitmap.height, depthOrArrayLayers: 1 },\n      dstBytesPerPixel,\n      expectedData\n    );\n  });\n"],"file":"ImageBitmap.spec.js"}