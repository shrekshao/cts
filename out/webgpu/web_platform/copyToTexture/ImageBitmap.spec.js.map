{"version":3,"sources":["../../../../src/webgpu/web_platform/copyToTexture/ImageBitmap.spec.ts"],"names":["description","makeTestGroup","unreachable","kTextureFormatInfo","kValidTextureFormatsForCopyE2T","CopyToTextureUtils","isFp16Format","kTexelRepresentationInfo","Color","generatedPixelCache","Map","F","generatePixel","color","format","transparentOp","formatEntry","get","undefined","set","colorEntry","has","rep","rgba","Red","R","G","B","A","Green","Blue","White","OpaqueBlack","TransparentBlack","pixels","Uint8Array","pack","encode","getImagePixels","width","height","orientationOp","bytesPerPixel","bytesPerBlock","imagePixels","Uint8ClampedArray","testColors","push","i","j","pixelPos","currentColorIndex","currentPixel","length","pixelData","g","test","desc","params","u","combine","beginSubcases","fn","t","alpha","orientation","dstColorFormat","dstPremultiplied","imageData","ImageData","imageBitmap","createImageBitmap","premultiplyAlpha","imageOrientation","dst","device","createTexture","size","depthOrArrayLayers","usage","GPUTextureUsage","COPY_DST","COPY_SRC","RENDER_ATTACHMENT","dstBytesPerPixel","expectedTransparentOP","expectedPixels","doTestAndCheckResult","source","origin","x","y","texture","colorSpace","premultipliedAlpha","imageCanvas","document","createElement","OffscreenCanvas","skip","imageCanvasContext","getContext","putImageData"],"mappings":"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","sourcesContent":["export const description = `\ncopyImageBitmapToTexture from ImageBitmaps created from various sources.\n\nTODO: Test ImageBitmap generated from all possible ImageBitmapSource, relevant ImageBitmapOptions\n    (https://html.spec.whatwg.org/multipage/imagebitmap-and-animations.html#images-2)\n    and various source filetypes and metadata (weird dimensions, EXIF orientations, video rotations\n    and visible/crop rectangles, etc. (In theory these things are handled inside createImageBitmap,\n    but in theory could affect the internal representation of the ImageBitmap.)\n\nTODO: Test zero-sized copies from all sources (just make sure params cover it) (e.g. 0x0, 0x4, 4x0).\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { unreachable } from '../../../common/util/util.js';\nimport {\n  RegularTextureFormat,\n  kTextureFormatInfo,\n  kValidTextureFormatsForCopyE2T,\n} from '../../capability_info.js';\nimport { CopyToTextureUtils, isFp16Format } from '../../util/copy_to_texture.js';\nimport { kTexelRepresentationInfo } from '../../util/texture/texel_data.js';\n\nenum Color {\n  Red,\n  Green,\n  Blue,\n  White,\n  OpaqueBlack,\n  TransparentBlack,\n}\n\n// These two types correspond to |premultiplyAlpha| and |imageOrientation| in |ImageBitmapOptions|.\ntype TransparentOp = 'premultiply' | 'none' | 'non-transparent';\ntype OrientationOp = 'flipY' | 'none';\n\n// Cache for generated pixels.\nconst generatedPixelCache: Map<\n  RegularTextureFormat,\n  Map<Color, Map<TransparentOp, Uint8Array>>\n> = new Map();\n\nclass F extends CopyToTextureUtils {\n  generatePixel(\n    color: Color,\n    format: RegularTextureFormat,\n    transparentOp: TransparentOp\n  ): Uint8Array {\n    let formatEntry = generatedPixelCache.get(format);\n    if (formatEntry === undefined) {\n      formatEntry = new Map();\n      generatedPixelCache.set(format, formatEntry);\n    }\n\n    let colorEntry = formatEntry.get(color);\n    if (colorEntry === undefined) {\n      colorEntry = new Map();\n      formatEntry.set(color, colorEntry);\n    }\n\n    // None of the dst texture format is 'uint' or 'sint', so we can always use float value.\n    if (!colorEntry.has(transparentOp)) {\n      const rep = kTexelRepresentationInfo[format];\n      let rgba: { R: number; G: number; B: number; A: number };\n      switch (color) {\n        case Color.Red:\n          rgba = { R: 1.0, G: 0.0, B: 0.0, A: 1.0 };\n          break;\n        case Color.Green:\n          rgba = { R: 0.0, G: 1.0, B: 0.0, A: 1.0 };\n          break;\n        case Color.Blue:\n          rgba = { R: 0.0, G: 0.0, B: 1.0, A: 1.0 };\n          break;\n        case Color.White:\n          rgba = { R: 0.0, G: 0.0, B: 0.0, A: 1.0 };\n          break;\n        case Color.OpaqueBlack:\n          rgba = { R: 1.0, G: 1.0, B: 1.0, A: 1.0 };\n          break;\n        case Color.TransparentBlack:\n          rgba = { R: 1.0, G: 1.0, B: 1.0, A: 0.0 };\n          break;\n        default:\n          unreachable();\n      }\n\n      if (transparentOp === 'premultiply') {\n        rgba.R *= rgba.A;\n        rgba.G *= rgba.A;\n        rgba.B *= rgba.A;\n      }\n\n      const pixels = new Uint8Array(rep.pack(rep.encode(rgba)));\n      colorEntry.set(transparentOp, pixels);\n    }\n\n    return colorEntry.get(transparentOp)!;\n  }\n\n  // Helper functions to generate imagePixels based input configs.\n  getImagePixels({\n    format,\n    width,\n    height,\n    transparentOp,\n    orientationOp,\n  }: {\n    format: RegularTextureFormat;\n    width: number;\n    height: number;\n    transparentOp: TransparentOp;\n    orientationOp: OrientationOp;\n  }): Uint8ClampedArray {\n    const bytesPerPixel = kTextureFormatInfo[format].bytesPerBlock;\n\n    // Generate input contents by iterating 'Color' enum\n    const imagePixels = new Uint8ClampedArray(bytesPerPixel * width * height);\n    const testColors = [Color.Red, Color.Green, Color.Blue, Color.White, Color.OpaqueBlack];\n    if (transparentOp !== 'non-transparent') testColors.push(Color.TransparentBlack);\n\n    for (let i = 0; i < height; ++i) {\n      for (let j = 0; j < width; ++j) {\n        const pixelPos = i * width + j;\n        const currentColorIndex =\n          orientationOp === 'flipY' ? (height - i - 1) * width + j : pixelPos;\n        const currentPixel = testColors[currentColorIndex % testColors.length];\n        const pixelData = this.generatePixel(currentPixel, format, transparentOp);\n        imagePixels.set(pixelData, pixelPos * bytesPerPixel);\n      }\n    }\n\n    return imagePixels;\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('from_ImageData')\n  .desc(\n    `\n  Test ImageBitmap generated from ImageData can be copied to WebGPU\n  texture correctly. These imageBitmaps are highly possible living\n  in CPU back resource.\n  `\n  )\n  .params(u =>\n    u\n      .combine('alpha', ['none', 'premultiply'] as const)\n      .combine('orientation', ['none', 'flipY'] as const)\n      .combine('dstColorFormat', kValidTextureFormatsForCopyE2T)\n      .combine('dstPremultiplied', [true, false])\n      .beginSubcases()\n      .combine('width', [1, 2, 4, 15, 255, 256])\n      .combine('height', [1, 2, 4, 15, 255, 256])\n  )\n  .fn(async t => {\n    const { width, height, alpha, orientation, dstColorFormat, dstPremultiplied } = t.params;\n\n    // Generate input contents by iterating 'Color' enum\n    const imagePixels = t.getImagePixels({\n      format: 'rgba8unorm',\n      width,\n      height,\n      transparentOp: 'none',\n      orientationOp: 'none',\n    });\n\n    // Generate correct expected values\n    const imageData = new ImageData(imagePixels, width, height);\n    const imageBitmap = await createImageBitmap(imageData, {\n      premultiplyAlpha: alpha,\n      imageOrientation: orientation,\n    });\n\n    const dst = t.device.createTexture({\n      size: {\n        width: imageBitmap.width,\n        height: imageBitmap.height,\n        depthOrArrayLayers: 1,\n      },\n      format: dstColorFormat,\n      usage:\n        GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    // Construct expected value for different dst color format\n    const dstBytesPerPixel = kTextureFormatInfo[dstColorFormat].bytesPerBlock;\n    const expectedTransparentOP =\n      alpha === 'premultiply' || dstPremultiplied ? 'premultiply' : 'none';\n\n    const expectedPixels = t.getImagePixels({\n      format: dstColorFormat,\n      width,\n      height,\n      transparentOp: expectedTransparentOP,\n      orientationOp: orientation,\n    });\n\n    t.doTestAndCheckResult(\n      { source: imageBitmap, origin: { x: 0, y: 0 } },\n      {\n        texture: dst,\n        origin: { x: 0, y: 0 },\n        colorSpace: 'srgb',\n        premultipliedAlpha: dstPremultiplied,\n      },\n      { width: imageBitmap.width, height: imageBitmap.height, depthOrArrayLayers: 1 },\n      dstBytesPerPixel,\n      expectedPixels,\n      isFp16Format(dstColorFormat)\n    );\n  });\n\ng.test('from_canvas')\n  .desc(\n    `\n  Test ImageBitmap generated from canvas/offscreenCanvas can be copied to WebGPU\n  texture correctly. These imageBitmaps are highly possible living in GPU back resource.\n  `\n  )\n  .params(u =>\n    u\n      .combine('orientation', ['none', 'flipY'] as const)\n      .combine('dstColorFormat', kValidTextureFormatsForCopyE2T)\n      .combine('dstPremultiplied', [true, false])\n      .beginSubcases()\n      .combine('width', [1, 2, 4, 15, 255, 256])\n      .combine('height', [1, 2, 4, 15, 255, 256])\n  )\n  .fn(async t => {\n    const { width, height, orientation, dstColorFormat, dstPremultiplied } = t.params;\n\n    // CTS sometimes runs on worker threads, where document is not available.\n    // In this case, OffscreenCanvas can be used instead of <canvas>.\n    // But some browsers don't support OffscreenCanvas, and some don't\n    // support '2d' contexts on OffscreenCanvas.\n    // In this situation, the case will be skipped.\n    let imageCanvas;\n    if (typeof document !== 'undefined') {\n      imageCanvas = document.createElement('canvas');\n      imageCanvas.width = width;\n      imageCanvas.height = height;\n    } else if (typeof OffscreenCanvas === 'undefined') {\n      t.skip('OffscreenCanvas is not supported');\n      return;\n    } else {\n      imageCanvas = new OffscreenCanvas(width, height);\n    }\n    const imageCanvasContext = imageCanvas.getContext('2d');\n    if (imageCanvasContext === null) {\n      t.skip('OffscreenCanvas \"2d\" context not available');\n      return;\n    }\n\n    // Generate non-transparent pixel data to avoid canvas\n    // different opt behaviour on putImageData()\n    // from browsers.\n    const imagePixels = t.getImagePixels({\n      format: 'rgba8unorm',\n      width,\n      height,\n      transparentOp: 'non-transparent',\n      orientationOp: 'none',\n    });\n\n    const imageData = new ImageData(imagePixels, width, height);\n\n    // Use putImageData to prevent color space conversion.\n    imageCanvasContext.putImageData(imageData, 0, 0);\n\n    const imageBitmap = await createImageBitmap(imageCanvas, {\n      premultiplyAlpha: 'premultiply',\n      imageOrientation: orientation,\n    });\n\n    const dst = t.device.createTexture({\n      size: {\n        width: imageBitmap.width,\n        height: imageBitmap.height,\n        depthOrArrayLayers: 1,\n      },\n      format: dstColorFormat,\n      usage:\n        GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const dstBytesPerPixel = kTextureFormatInfo[dstColorFormat].bytesPerBlock;\n    const expectedPixels = t.getImagePixels({\n      format: dstColorFormat,\n      width,\n      height,\n      transparentOp: 'non-transparent',\n      orientationOp: orientation,\n    });\n\n    t.doTestAndCheckResult(\n      { source: imageBitmap, origin: { x: 0, y: 0 } },\n      {\n        texture: dst,\n        origin: { x: 0, y: 0 },\n        colorSpace: 'srgb',\n        premultipliedAlpha: dstPremultiplied,\n      },\n      { width: imageBitmap.width, height: imageBitmap.height, depthOrArrayLayers: 1 },\n      dstBytesPerPixel,\n      expectedPixels,\n      isFp16Format(dstColorFormat)\n    );\n  });\n"],"file":"ImageBitmap.spec.js"}