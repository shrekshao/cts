{"version":3,"sources":["../../../../src/webgpu/web_platform/copyToTexture/canvas.spec.ts"],"names":["description","makeTestGroup","kTextureFormatInfo","kValidTextureFormatsForCopyE2T","CopyToTextureUtils","kAllCanvasTypes","createCanvas","F","init2DCanvasContentWithColorSpace","width","height","colorSpace","canvas","canvasContext","getContext","skip","getContextAttributes","SOURCE_PIXEL_BYTES","imagePixels","Uint8ClampedArray","rectWidth","Math","floor","rectHeight","alphaValue","pixelStartPos","i","j","imageData","ImageData","ctx","putImageData","init2DCanvasContent","canvasType","paint2DCanvas","fillStyle","fillRect","initGLCanvasContent","contextName","premultiplied","gl","premultipliedAlpha","trackForCleanup","colorValue","enable","SCISSOR_TEST","scissor","clearColor","clear","COLOR_BUFFER_BIT","getInitGPUCanvasData","initialData","maxRectHeightIndex","pixelIndex","length","index","initGPUCanvasContent","device","gpuContext","alphaMode","configure","format","usage","GPUTextureUsage","COPY_DST","COPY_SRC","compositingAlphaMode","canvasTexture","getCurrentTexture","queue","writeTexture","texture","bytesPerRow","rowsPerImage","depthOrArrayLayers","getSourceCanvas2DContent","context","getImageData","data","getSourceCanvasGLContent","bytesPerPixel","sourcePixels","readPixels","RGBA","UNSIGNED_BYTE","doFlipY","calculateSourceContentOnCPU","rgbaPixels","pixelPos","r","g","test","desc","params","u","combine","beginSubcases","fn","t","dstColorFormat","dstPremultiplied","srcDoFlipYDuringCopy","dst","createTexture","size","RENDER_ATTACHMENT","info","expFormat","baseFormat","expTexelView","getExpectedPixels","srcPremultiplied","doTestAndCheckResult","source","origin","x","y","flipY","maxDiffULPsForNormFormat","maxDiffULPsForFloatFormat","srcAndDstInSameGPUDevice","selectMismatchedDeviceOrSkipTestCase","undefined","mismatchedDevice","srcColorSpace","dstColorSpace","texelCompareOptions","maxFractionalDiff"],"mappings":"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","sourcesContent":["export const description = `\ncopyToTexture with HTMLCanvasElement and OffscreenCanvas sources.\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { kTextureFormatInfo, kValidTextureFormatsForCopyE2T } from '../../capability_info.js';\nimport { CopyToTextureUtils } from '../../util/copy_to_texture.js';\nimport { CanvasType, kAllCanvasTypes, createCanvas } from '../../util/create_elements.js';\nimport { TexelCompareOptions } from '../../util/texture/texture_ok.js';\n\nclass F extends CopyToTextureUtils {\n  init2DCanvasContentWithColorSpace({\n    width,\n    height,\n    colorSpace,\n  }: {\n    width: number;\n    height: number;\n    colorSpace: 'srgb' | 'display-p3';\n  }): {\n    canvas: HTMLCanvasElement | OffscreenCanvas;\n    canvasContext: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D;\n  } {\n    const canvas = createCanvas(this, 'onscreen', width, height);\n\n    let canvasContext = null;\n    canvasContext = canvas.getContext('2d', { colorSpace }) as CanvasRenderingContext2D | null;\n\n    if (canvasContext === null) {\n      this.skip('onscreen canvas 2d context not available');\n    }\n\n    if (\n      typeof canvasContext.getContextAttributes === 'undefined' ||\n      typeof canvasContext.getContextAttributes().colorSpace === 'undefined'\n    ) {\n      this.skip('color space attr is not supported for canvas 2d context');\n    }\n\n    const SOURCE_PIXEL_BYTES = 4;\n    const imagePixels = new Uint8ClampedArray(SOURCE_PIXEL_BYTES * width * height);\n\n    const rectWidth = Math.floor(width / 2);\n    const rectHeight = Math.floor(height / 2);\n\n    const alphaValue = 153;\n\n    let pixelStartPos = 0;\n    // Red;\n    for (let i = 0; i < rectHeight; ++i) {\n      for (let j = 0; j < rectWidth; ++j) {\n        pixelStartPos = (i * width + j) * SOURCE_PIXEL_BYTES;\n        imagePixels[pixelStartPos] = 255;\n        imagePixels[pixelStartPos + 1] = 0;\n        imagePixels[pixelStartPos + 2] = 0;\n        imagePixels[pixelStartPos + 3] = alphaValue;\n      }\n    }\n\n    // Lime;\n    for (let i = 0; i < rectHeight; ++i) {\n      for (let j = rectWidth; j < width; ++j) {\n        pixelStartPos = (i * width + j) * SOURCE_PIXEL_BYTES;\n        imagePixels[pixelStartPos] = 0;\n        imagePixels[pixelStartPos + 1] = 255;\n        imagePixels[pixelStartPos + 2] = 0;\n        imagePixels[pixelStartPos + 3] = alphaValue;\n      }\n    }\n\n    // Blue\n    for (let i = rectHeight; i < height; ++i) {\n      for (let j = 0; j < rectWidth; ++j) {\n        pixelStartPos = (i * width + j) * SOURCE_PIXEL_BYTES;\n        imagePixels[pixelStartPos] = 0;\n        imagePixels[pixelStartPos + 1] = 0;\n        imagePixels[pixelStartPos + 2] = 255;\n        imagePixels[pixelStartPos + 3] = alphaValue;\n      }\n    }\n\n    // Fuchsia\n    for (let i = rectHeight; i < height; ++i) {\n      for (let j = rectWidth; j < width; ++j) {\n        pixelStartPos = (i * width + j) * SOURCE_PIXEL_BYTES;\n        imagePixels[pixelStartPos] = 255;\n        imagePixels[pixelStartPos + 1] = 0;\n        imagePixels[pixelStartPos + 2] = 255;\n        imagePixels[pixelStartPos + 3] = alphaValue;\n      }\n    }\n\n    const imageData = new ImageData(imagePixels, width, height, { colorSpace });\n    // MAINTENANCE_TODO: Remove as any when tsc support imageData.colorSpace\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    if (typeof (imageData as any).colorSpace === 'undefined') {\n      this.skip('color space attr is not supported for ImageData');\n    }\n\n    const ctx = canvasContext as CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D;\n    ctx.putImageData(imageData, 0, 0);\n\n    return { canvas, canvasContext };\n  }\n\n  // MAINTENANCE_TODO: Cache the generated canvas to avoid duplicated initialization.\n  init2DCanvasContent({\n    canvasType,\n    width,\n    height,\n  }: {\n    canvasType: CanvasType;\n    width: number;\n    height: number;\n  }): {\n    canvas: HTMLCanvasElement | OffscreenCanvas;\n    canvasContext: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D;\n  } {\n    const canvas = createCanvas(this, canvasType, width, height);\n\n    let canvasContext = null;\n    canvasContext = canvas.getContext('2d') as\n      | CanvasRenderingContext2D\n      | OffscreenCanvasRenderingContext2D\n      | null;\n\n    if (canvasContext === null) {\n      this.skip(canvasType + ' canvas 2d context not available');\n    }\n\n    const ctx = canvasContext as CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D;\n    this.paint2DCanvas(ctx, width, height, 0.6);\n\n    return { canvas, canvasContext };\n  }\n\n  paint2DCanvas(\n    ctx: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D,\n    width: number,\n    height: number,\n    alphaValue: number\n  ) {\n    const rectWidth = Math.floor(width / 2);\n    const rectHeight = Math.floor(height / 2);\n\n    // Red\n    ctx.fillStyle = `rgba(255, 0, 0, ${alphaValue})`;\n    ctx.fillRect(0, 0, rectWidth, rectHeight);\n    // Lime\n    ctx.fillStyle = `rgba(0, 255, 0, ${alphaValue})`;\n    ctx.fillRect(rectWidth, 0, width - rectWidth, rectHeight);\n    // Blue\n    ctx.fillStyle = `rgba(0, 0, 255, ${alphaValue})`;\n    ctx.fillRect(0, rectHeight, rectWidth, height - rectHeight);\n    // Fuchsia\n    ctx.fillStyle = `rgba(255, 0, 255, ${alphaValue})`;\n    ctx.fillRect(rectWidth, rectHeight, width - rectWidth, height - rectHeight);\n  }\n\n  // MAINTENANCE_TODO: Cache the generated canvas to avoid duplicated initialization.\n  initGLCanvasContent({\n    canvasType,\n    contextName,\n    width,\n    height,\n    premultiplied,\n  }: {\n    canvasType: CanvasType;\n    contextName: 'webgl' | 'webgl2';\n    width: number;\n    height: number;\n    premultiplied: boolean;\n  }): {\n    canvas: HTMLCanvasElement | OffscreenCanvas;\n    canvasContext: WebGLRenderingContext | WebGL2RenderingContext;\n  } {\n    const canvas = createCanvas(this, canvasType, width, height);\n\n    // MAINTENANCE_TODO: Workaround for @types/offscreencanvas missing an overload of\n    // `OffscreenCanvas.getContext` that takes `string` or a union of context types.\n    const gl = (canvas as HTMLCanvasElement).getContext(contextName, {\n      premultipliedAlpha: premultiplied,\n    }) as WebGLRenderingContext | WebGL2RenderingContext | null;\n\n    if (gl === null) {\n      this.skip(canvasType + ' canvas ' + contextName + ' context not available');\n    }\n    this.trackForCleanup(gl);\n\n    const rectWidth = Math.floor(width / 2);\n    const rectHeight = Math.floor(height / 2);\n\n    const alphaValue = 0.6;\n    const colorValue = premultiplied ? alphaValue : 1.0;\n\n    // For webgl/webgl2 context canvas, if the context created with premultipliedAlpha attributes,\n    // it means that the value in drawing buffer is premultiplied or not. So we should set\n    // premultipliedAlpha value for premultipliedAlpha true gl context and unpremultipliedAlpha value\n    // for the premultipliedAlpha false gl context.\n    gl.enable(gl.SCISSOR_TEST);\n    gl.scissor(0, 0, rectWidth, rectHeight);\n    gl.clearColor(colorValue, 0.0, 0.0, alphaValue);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    gl.scissor(rectWidth, 0, width - rectWidth, rectHeight);\n    gl.clearColor(0.0, colorValue, 0.0, alphaValue);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    gl.scissor(0, rectHeight, rectWidth, height - rectHeight);\n    gl.clearColor(0.0, 0.0, colorValue, alphaValue);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    gl.scissor(rectWidth, rectHeight, width - rectWidth, height - rectHeight);\n    gl.clearColor(colorValue, colorValue, colorValue, alphaValue);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    return { canvas, canvasContext: gl };\n  }\n\n  getInitGPUCanvasData(width: number, height: number, premultiplied: boolean): Uint8ClampedArray {\n    const rectWidth = Math.floor(width / 2);\n    const rectHeight = Math.floor(height / 2);\n\n    const alphaValue = 153;\n    const colorValue = premultiplied ? alphaValue : 255;\n\n    // BGRA8Unorm texture\n    const initialData = new Uint8ClampedArray(4 * width * height);\n    const maxRectHeightIndex = width * rectHeight;\n    for (let pixelIndex = 0; pixelIndex < initialData.length / 4; ++pixelIndex) {\n      const index = pixelIndex * 4;\n\n      // Top-half two rectangles\n      if (pixelIndex < maxRectHeightIndex) {\n        // top-left side rectangle\n        if (pixelIndex % width < rectWidth) {\n          // top-left side rectangle\n          initialData[index] = colorValue;\n          initialData[index + 1] = 0;\n          initialData[index + 2] = 0;\n          initialData[index + 3] = alphaValue;\n        } else {\n          // top-right side rectangle\n          initialData[index] = 0;\n          initialData[index + 1] = colorValue;\n          initialData[index + 2] = 0;\n          initialData[index + 3] = alphaValue;\n        }\n      } else {\n        // Bottom-half two rectangles\n        // bottom-left side rectangle\n        if (pixelIndex % width < rectWidth) {\n          initialData[index] = 0;\n          initialData[index + 1] = 0;\n          initialData[index + 2] = colorValue;\n          initialData[index + 3] = alphaValue;\n        } else {\n          // bottom-right side rectangle\n          initialData[index] = colorValue;\n          initialData[index + 1] = colorValue;\n          initialData[index + 2] = colorValue;\n          initialData[index + 3] = alphaValue;\n        }\n      }\n    }\n    return initialData;\n  }\n\n  initGPUCanvasContent({\n    device,\n    canvasType,\n    width,\n    height,\n    premultiplied,\n  }: {\n    device: GPUDevice;\n    canvasType: CanvasType;\n    width: number;\n    height: number;\n    premultiplied: boolean;\n  }): {\n    canvas: HTMLCanvasElement | OffscreenCanvas;\n  } {\n    const canvas = createCanvas(this, canvasType, width, height);\n\n    const gpuContext = canvas.getContext('webgpu') as GPUCanvasContext | null;\n\n    if (gpuContext === null) {\n      this.skip(canvasType + ' canvas webgpu context not available');\n    }\n\n    const alphaMode = premultiplied ? 'premultiplied' : 'opaque';\n\n    gpuContext.configure({\n      device,\n      format: 'bgra8unorm',\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC,\n      compositingAlphaMode: alphaMode,\n    });\n\n    // BGRA8Unorm texture\n    const initialData = this.getInitGPUCanvasData(width, height, premultiplied);\n    const canvasTexture = gpuContext.getCurrentTexture();\n    device.queue.writeTexture(\n      { texture: canvasTexture },\n      initialData,\n      {\n        bytesPerRow: width * 4,\n        rowsPerImage: height,\n      },\n      {\n        width,\n        height,\n        depthOrArrayLayers: 1,\n      }\n    );\n\n    return { canvas };\n  }\n\n  getSourceCanvas2DContent(\n    context: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D,\n    width: number,\n    height: number\n  ): Uint8ClampedArray {\n    // Always read back the raw data from canvas\n    return context.getImageData(0, 0, width, height).data;\n  }\n\n  getSourceCanvasGLContent(\n    gl: WebGLRenderingContext | WebGL2RenderingContext,\n    width: number,\n    height: number\n  ): Uint8ClampedArray {\n    const bytesPerPixel = 4;\n\n    const sourcePixels = new Uint8ClampedArray(width * height * bytesPerPixel);\n    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, sourcePixels);\n\n    return this.doFlipY(sourcePixels, width, height, bytesPerPixel);\n  }\n\n  calculateSourceContentOnCPU(\n    width: number,\n    height: number,\n    premultipliedAlpha: boolean\n  ): Uint8ClampedArray {\n    const bytesPerPixel = 4;\n\n    const rgbaPixels = this.getInitGPUCanvasData(width, height, premultipliedAlpha);\n\n    // The source canvas has bgra8unorm back resource. We\n    // swizzle the channels to align with 2d/webgl canvas and\n    // clear alpha to opaque when context compositingAlphaMode\n    // is set to opaque (follow webgpu spec).\n    for (let i = 0; i < height; ++i) {\n      for (let j = 0; j < width; ++j) {\n        const pixelPos = i * width + j;\n        const r = rgbaPixels[pixelPos * bytesPerPixel + 2];\n        if (!premultipliedAlpha) {\n          rgbaPixels[pixelPos * bytesPerPixel + 3] = 255;\n        }\n\n        rgbaPixels[pixelPos * bytesPerPixel + 2] = rgbaPixels[pixelPos * bytesPerPixel];\n        rgbaPixels[pixelPos * bytesPerPixel] = r;\n      }\n    }\n\n    return rgbaPixels;\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('copy_contents_from_2d_context_canvas')\n  .desc(\n    `\n  Test HTMLCanvasElement and OffscreenCanvas with 2d context\n  can be copied to WebGPU texture correctly.\n\n  It creates HTMLCanvasElement/OffscreenCanvas with '2d'.\n  Use fillRect(2d context) to render red rect for top-left,\n  green rect for top-right, blue rect for bottom-left and white for bottom-right.\n\n  Then call copyExternalImageToTexture() to do a full copy to the 0 mipLevel\n  of dst texture, and read the contents out to compare with the canvas contents.\n\n  Provide premultiplied input if 'premultipliedAlpha' in 'GPUImageCopyTextureTagged'\n  is set to 'true' and unpremultiplied input if it is set to 'false'.\n\n  If 'flipY' in 'GPUImageCopyExternalImage' is set to 'true', copy will ensure the result\n  is flipped.\n\n  The tests covers:\n  - Valid canvas type\n  - Valid 2d context type\n  - Valid dstColorFormat of copyExternalImageToTexture()\n  - Valid dest alphaMode\n  - Valid 'flipY' config in 'GPUImageCopyExternalImage' (named 'srcDoFlipYDuringCopy' in cases)\n  - TODO(#913): color space tests need to be added\n\n  And the expected results are all passed.\n  `\n  )\n  .params(u =>\n    u\n      .combine('canvasType', kAllCanvasTypes)\n      .combine('dstColorFormat', kValidTextureFormatsForCopyE2T)\n      .combine('dstPremultiplied', [true, false])\n      .combine('srcDoFlipYDuringCopy', [true, false])\n      .beginSubcases()\n      .combine('width', [1, 2, 4, 15, 255, 256])\n      .combine('height', [1, 2, 4, 15, 255, 256])\n  )\n  .fn(async t => {\n    const {\n      width,\n      height,\n      canvasType,\n      dstColorFormat,\n      dstPremultiplied,\n      srcDoFlipYDuringCopy,\n    } = t.params;\n\n    const { canvas, canvasContext } = t.init2DCanvasContent({\n      canvasType,\n      width,\n      height,\n    });\n\n    const dst = t.device.createTexture({\n      size: {\n        width,\n        height,\n        depthOrArrayLayers: 1,\n      },\n      format: dstColorFormat,\n      usage:\n        GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    // Construct expected value for different dst color format\n    const info = kTextureFormatInfo[dstColorFormat];\n    const expFormat = info.baseFormat ?? dstColorFormat;\n\n    // For 2d canvas, get expected pixels with getImageData(), which returns unpremultiplied\n    // values.\n    const sourcePixels = t.getSourceCanvas2DContent(canvasContext, width, height);\n    const expTexelView = t.getExpectedPixels(\n      sourcePixels,\n      width,\n      height,\n      expFormat,\n      srcDoFlipYDuringCopy,\n      {\n        srcPremultiplied: false,\n        dstPremultiplied,\n      }\n    );\n\n    t.doTestAndCheckResult(\n      { source: canvas, origin: { x: 0, y: 0 }, flipY: srcDoFlipYDuringCopy },\n      {\n        texture: dst,\n        origin: { x: 0, y: 0 },\n        colorSpace: 'srgb',\n        premultipliedAlpha: dstPremultiplied,\n      },\n      expTexelView,\n      { width, height, depthOrArrayLayers: 1 },\n      // 1.0 and 0.6 are representable precisely by all formats except rgb10a2unorm, but\n      // allow diffs of 1ULP since that's the generally-appropriate threshold.\n      { maxDiffULPsForNormFormat: 1, maxDiffULPsForFloatFormat: 1 }\n    );\n  });\n\ng.test('copy_contents_from_gl_context_canvas')\n  .desc(\n    `\n  Test HTMLCanvasElement and OffscreenCanvas with webgl/webgl2 context\n  can be copied to WebGPU texture correctly.\n\n  It creates HTMLCanvasElement/OffscreenCanvas with webgl'/'webgl2'.\n  Use scissor + clear to render red rect for top-left, green rect\n  for top-right, blue rect for bottom-left and white for bottom-right.\n  And do premultiply alpha in advance if the webgl/webgl2 context is created\n  with premultipliedAlpha : true.\n\n  Then call copyExternalImageToTexture() to do a full copy to the 0 mipLevel\n  of dst texture, and read the contents out to compare with the canvas contents.\n\n  Provide premultiplied input if 'premultipliedAlpha' in 'GPUImageCopyTextureTagged'\n  is set to 'true' and unpremultiplied input if it is set to 'false'.\n\n  If 'flipY' in 'GPUImageCopyExternalImage' is set to 'true', copy will ensure the result\n  is flipped.\n\n  The tests covers:\n  - Valid canvas type\n  - Valid webgl/webgl2 context type\n  - Valid dstColorFormat of copyExternalImageToTexture()\n  - Valid source image alphaMode\n  - Valid dest alphaMode\n  - Valid 'flipY' config in 'GPUImageCopyExternalImage'(named 'srcDoFlipYDuringCopy' in cases)\n  - TODO: color space tests need to be added\n\n  And the expected results are all passed.\n  `\n  )\n  .params(u =>\n    u\n      .combine('canvasType', kAllCanvasTypes)\n      .combine('contextName', ['webgl', 'webgl2'] as const)\n      .combine('dstColorFormat', kValidTextureFormatsForCopyE2T)\n      .combine('srcPremultiplied', [true, false])\n      .combine('dstPremultiplied', [true, false])\n      .combine('srcDoFlipYDuringCopy', [true, false])\n      .beginSubcases()\n      .combine('width', [1, 2, 4, 15, 255, 256])\n      .combine('height', [1, 2, 4, 15, 255, 256])\n  )\n  .fn(async t => {\n    const {\n      width,\n      height,\n      canvasType,\n      contextName,\n      dstColorFormat,\n      srcPremultiplied,\n      dstPremultiplied,\n      srcDoFlipYDuringCopy,\n    } = t.params;\n\n    const { canvas, canvasContext } = t.initGLCanvasContent({\n      canvasType,\n      contextName,\n      width,\n      height,\n      premultiplied: srcPremultiplied,\n    });\n\n    const dst = t.device.createTexture({\n      size: { width, height },\n      format: dstColorFormat,\n      usage:\n        GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    // Construct expected value for different dst color format\n    const info = kTextureFormatInfo[dstColorFormat];\n    const expFormat = info.baseFormat ?? dstColorFormat;\n    const sourcePixels = t.getSourceCanvasGLContent(canvasContext, width, height);\n    const expTexelView = t.getExpectedPixels(\n      sourcePixels,\n      width,\n      height,\n      expFormat,\n      srcDoFlipYDuringCopy,\n      {\n        srcPremultiplied,\n        dstPremultiplied,\n      }\n    );\n\n    t.doTestAndCheckResult(\n      { source: canvas, origin: { x: 0, y: 0 }, flipY: srcDoFlipYDuringCopy },\n      {\n        texture: dst,\n        origin: { x: 0, y: 0 },\n        colorSpace: 'srgb',\n        premultipliedAlpha: dstPremultiplied,\n      },\n      expTexelView,\n      { width, height, depthOrArrayLayers: 1 },\n      // 1.0 and 0.6 are representable precisely by all formats except rgb10a2unorm, but\n      // allow diffs of 1ULP since that's the generally-appropriate threshold.\n      { maxDiffULPsForNormFormat: 1, maxDiffULPsForFloatFormat: 1 }\n    );\n  });\n\ng.test('copy_contents_from_gpu_context_canvas')\n  .desc(\n    `\n  Test HTMLCanvasElement and OffscreenCanvas with webgpu context\n  can be copied to WebGPU texture correctly.\n\n  It creates HTMLCanvasElement/OffscreenCanvas with 'webgpu'.\n  Use writeTexture to copy pixels to back buffer. The results are:\n  red rect for top-left, green rect for top-right, blue rect for bottom-left\n  and white for bottom-right.\n\n  And do premultiply alpha in advance if the webgpu context is created\n  with compositingAlphaMode=\"premultiplied\".\n\n  Then call copyExternalImageToTexture() to do a full copy to the 0 mipLevel\n  of dst texture, and read the contents out to compare with the canvas contents.\n\n  Provide premultiplied input if 'premultipliedAlpha' in 'GPUImageCopyTextureTagged'\n  is set to 'true' and unpremultiplied input if it is set to 'false'.\n\n  If 'flipY' in 'GPUImageCopyExternalImage' is set to 'true', copy will ensure the result\n  is flipped.\n\n  The tests covers:\n  - Valid canvas type\n  - Source WebGPU Canvas lives in the same GPUDevice or different GPUDevice as test\n  - Valid dstColorFormat of copyExternalImageToTexture()\n  - Valid source image alphaMode\n  - Valid dest alphaMode\n  - Valid 'flipY' config in 'GPUImageCopyExternalImage'(named 'srcDoFlipYDuringCopy' in cases)\n  - TODO: color space tests need to be added\n\n  And the expected results are all passed.\n  `\n  )\n  .params(u =>\n    u\n      .combine('canvasType', kAllCanvasTypes)\n      .combine('srcAndDstInSameGPUDevice', [true, false])\n      .combine('dstColorFormat', kValidTextureFormatsForCopyE2T)\n      .combine('srcPremultiplied', [true])\n      .combine('dstPremultiplied', [true, false])\n      .combine('srcDoFlipYDuringCopy', [true, false])\n      .beginSubcases()\n      .combine('width', [1, 2, 4, 15, 255, 256])\n      .combine('height', [1, 2, 4, 15, 255, 256])\n  )\n  .fn(async t => {\n    const {\n      width,\n      height,\n      canvasType,\n      srcAndDstInSameGPUDevice,\n      dstColorFormat,\n      srcPremultiplied,\n      dstPremultiplied,\n      srcDoFlipYDuringCopy,\n    } = t.params;\n\n    let device: GPUDevice;\n\n    if (!srcAndDstInSameGPUDevice) {\n      await t.selectMismatchedDeviceOrSkipTestCase(undefined);\n      device = t.mismatchedDevice;\n    } else {\n      device = t.device;\n    }\n\n    const { canvas } = t.initGPUCanvasContent({\n      device,\n      canvasType,\n      width,\n      height,\n      premultiplied: srcPremultiplied,\n    });\n\n    const dst = t.device.createTexture({\n      size: {\n        width,\n        height,\n        depthOrArrayLayers: 1,\n      },\n      format: dstColorFormat,\n      usage:\n        GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    // Construct expected value for different dst color format\n    const info = kTextureFormatInfo[dstColorFormat];\n    const expFormat = info.baseFormat ?? dstColorFormat;\n    const sourcePixels = t.calculateSourceContentOnCPU(width, height, srcPremultiplied);\n    const expTexelView = t.getExpectedPixels(\n      sourcePixels,\n      width,\n      height,\n      expFormat,\n      srcDoFlipYDuringCopy,\n      {\n        srcPremultiplied,\n        dstPremultiplied,\n      }\n    );\n\n    t.doTestAndCheckResult(\n      { source: canvas, origin: { x: 0, y: 0 }, flipY: srcDoFlipYDuringCopy },\n      {\n        texture: dst,\n        origin: { x: 0, y: 0 },\n        colorSpace: 'srgb',\n        premultipliedAlpha: dstPremultiplied,\n      },\n      expTexelView,\n      { width: canvas.width, height: canvas.height, depthOrArrayLayers: 1 },\n      // 1.0 and 0.6 are representable precisely by all formats except rgb10a2unorm, but\n      // allow diffs of 1ULP since that's the generally-appropriate threshold.\n      { maxDiffULPsForNormFormat: 1, maxDiffULPsForFloatFormat: 1 }\n    );\n  });\n\ng.test('color_space_conversion')\n  .desc(\n    `\n    Test HTMLCanvasElement with 2d context can created with 'colorSpace' attribute.\n    Using CopyExternalImageToTexture to copy from such type of canvas needs\n    to do color space converting correctly.\n\n    It creates HTMLCanvasElement/OffscreenCanvas with '2d' and 'colorSpace' attributes.\n    Use fillRect(2d context) to render red rect for top-left,\n    green rect for top-right, blue rect for bottom-left and white for bottom-right.\n\n    Then call copyExternalImageToTexture() to do a full copy to the 0 mipLevel\n    of dst texture, and read the contents out to compare with the canvas contents.\n\n    Provide premultiplied input if 'premultipliedAlpha' in 'GPUImageCopyTextureTagged'\n    is set to 'true' and unpremultiplied input if it is set to 'false'.\n\n    If 'flipY' in 'GPUImageCopyExternalImage' is set to 'true', copy will ensure the result\n    is flipped.\n\n    If color space from source input and user defined dstTexture color space are different, the\n    result must convert the content to user defined color space\n\n    The tests covers:\n    - Valid dstColorFormat of copyExternalImageToTexture()\n    - Valid dest alphaMode\n    - Valid 'flipY' config in 'GPUImageCopyExternalImage' (named 'srcDoFlipYDuringCopy' in cases)\n    - Valid 'colorSpace' config in 'dstColorSpace'\n\n    And the expected results are all passed.\n\n    TODO: Enhance test data with colors that aren't always opaque and fully saturated.\n    TODO: Consider refactoring src data setup with TexelView.writeTextureData.\n  `\n  )\n  .params(u =>\n    u\n      .combine('srcColorSpace', ['srgb', 'display-p3'] as const)\n      .combine('dstColorSpace', ['srgb'] as const)\n      .combine('dstColorFormat', kValidTextureFormatsForCopyE2T)\n      .combine('dstPremultiplied', [true, false])\n      .combine('srcDoFlipYDuringCopy', [true, false])\n      .beginSubcases()\n      .combine('width', [1, 2, 4, 15, 255, 256])\n      .combine('height', [1, 2, 4, 15, 255, 256])\n  )\n  .fn(async t => {\n    const {\n      width,\n      height,\n      srcColorSpace,\n      dstColorSpace,\n      dstColorFormat,\n      dstPremultiplied,\n      srcDoFlipYDuringCopy,\n    } = t.params;\n    const { canvas, canvasContext } = t.init2DCanvasContentWithColorSpace({\n      width,\n      height,\n      colorSpace: srcColorSpace,\n    });\n\n    const dst = t.device.createTexture({\n      size: { width, height },\n      format: dstColorFormat,\n      usage:\n        GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    const sourcePixels = t.getSourceCanvas2DContent(canvasContext, width, height);\n\n    const expTexelView = t.getExpectedPixels(\n      sourcePixels,\n      width,\n      height,\n      // copyExternalImageToTexture does not perform gamma-encoding into `-srgb` formats.\n      kTextureFormatInfo[dstColorFormat].baseFormat ?? dstColorFormat,\n      srcDoFlipYDuringCopy,\n      {\n        srcPremultiplied: false,\n        dstPremultiplied,\n        srcColorSpace,\n        dstColorSpace,\n      }\n    );\n\n    const texelCompareOptions: TexelCompareOptions = {\n      maxFractionalDiff: 0,\n      maxDiffULPsForNormFormat: 1,\n    };\n    if (srcColorSpace !== dstColorSpace) {\n      // Color space conversion seems prone to errors up to about 0.0003 on f32, 0.0007 on f16.\n      texelCompareOptions.maxFractionalDiff = 0.001;\n    } else {\n      texelCompareOptions.maxDiffULPsForFloatFormat = 1;\n    }\n\n    t.doTestAndCheckResult(\n      { source: canvas, origin: { x: 0, y: 0 }, flipY: srcDoFlipYDuringCopy },\n      {\n        texture: dst,\n        origin: { x: 0, y: 0 },\n        colorSpace: dstColorSpace,\n        premultipliedAlpha: dstPremultiplied,\n      },\n      expTexelView,\n      { width, height, depthOrArrayLayers: 1 },\n      texelCompareOptions\n    );\n  });\n"],"file":"canvas.spec.js"}