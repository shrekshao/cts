{"version":3,"sources":["../../../../src/webgpu/web_platform/copyToTexture/canvas.spec.ts"],"names":["description","makeTestGroup","assert","memcpy","kTextureFormatInfo","kValidTextureFormatsForCopyE2T","CopyToTextureUtils","isFp16Format","allCanvasTypes","createCanvas","kTexelRepresentationInfo","formatForExpectedPixels","format","F","init2DCanvasContent","canvasType","width","height","paintOpaqueRects","canvas","canvasContext","getContext","skip","rectWidth","Math","floor","rectHeight","alphaValue","ctx","fillStyle","fillRect","initGLCanvasContent","contextName","premultiplied","gl","premultipliedAlpha","trackForCleanup","colorValue","enable","SCISSOR_TEST","scissor","clearColor","clear","COLOR_BUFFER_BIT","getInitGPUCanvasData","initialData","Uint8ClampedArray","maxRectHeightIndex","pixelIndex","length","index","initGPUCanvasContent","device","gpuContext","alphaMode","configure","usage","GPUTextureUsage","COPY_DST","COPY_SRC","compositingAlphaMode","canvasTexture","getCurrentTexture","queue","writeTexture","texture","bytesPerRow","rowsPerImage","depthOrArrayLayers","getSourceCanvas2DContent","context","getImageData","data","getSourceCanvasGLContent","bytesPerPixel","sourcePixels","readPixels","RGBA","UNSIGNED_BYTE","finalResult","i","j","pixelPos","dstPixelPos","src","start","dst","calculateSourceContentOnCPU","rgbaPixels","r","getExpectedPixels","srcPremultiplied","dstPremultiplied","bytesPerBlock","expectedPixels","rep","divide","rgba","R","G","B","A","pack","encode","g","test","desc","params","u","combine","beginSubcases","fn","t","dstColorFormat","createTexture","size","RENDER_ATTACHMENT","dstBytesPerPixel","doTestAndCheckResult","source","origin","x","y","colorSpace","srcAndDstInSameGPUDevice","selectMismatchedDeviceOrSkipTestCase","undefined","mismatchedDevice"],"mappings":"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","sourcesContent":["export const description = `\ncopyToTexture with HTMLCanvasElement and OffscreenCanvas sources.\n\nTODO: consider whether external_texture and copyToTexture video tests should be in the same file\nTODO: Add tests for flipY\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { assert, memcpy } from '../../../common/util/util.js';\nimport {\n  RegularTextureFormat,\n  kTextureFormatInfo,\n  kValidTextureFormatsForCopyE2T,\n} from '../../capability_info.js';\nimport { CopyToTextureUtils, isFp16Format } from '../../util/copy_to_texture.js';\nimport { canvasTypes, allCanvasTypes, createCanvas } from '../../util/create_elements.js';\nimport { kTexelRepresentationInfo } from '../../util/texture/texel_data.js';\n\n/**\n * If the destination format specifies a transfer function,\n * copyExternalImageToTexture (like B2T/T2T copies) should ignore it.\n */\nfunction formatForExpectedPixels(format: RegularTextureFormat): RegularTextureFormat {\n  return format === 'rgba8unorm-srgb'\n    ? 'rgba8unorm'\n    : format === 'bgra8unorm-srgb'\n    ? 'bgra8unorm'\n    : format;\n}\n\nclass F extends CopyToTextureUtils {\n  // MAINTENANCE_TODO: Cache the generated canvas to avoid duplicated initialization.\n  init2DCanvasContent({\n    canvasType,\n    width,\n    height,\n    paintOpaqueRects,\n  }: {\n    canvasType: canvasTypes;\n    width: number;\n    height: number;\n    paintOpaqueRects: boolean;\n  }): {\n    canvas: HTMLCanvasElement | OffscreenCanvas;\n    canvasContext: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D;\n  } {\n    const canvas = createCanvas(this, canvasType, width, height);\n\n    let canvasContext = null;\n    canvasContext = canvas.getContext('2d') as\n      | CanvasRenderingContext2D\n      | OffscreenCanvasRenderingContext2D\n      | null;\n\n    if (canvasContext === null) {\n      this.skip(canvasType + ' canvas 2d context not available');\n    }\n\n    const rectWidth = Math.floor(width / 2);\n    const rectHeight = Math.floor(height / 2);\n\n    // The rgb10a2unorm dst texture will have tiny errors when we compare actual and expectation.\n    // This is due to the convert from 8-bit to 10-bit combined with alpha value ops. So for\n    // rgb10a2unorm dst textures, we'll set alphaValue to 1.0 to test.\n    const alphaValue = paintOpaqueRects ? 1.0 : 0.6;\n    const ctx = canvasContext as CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D;\n    // Red\n    ctx.fillStyle = `rgba(255, 0, 0, ${alphaValue})`;\n    ctx.fillRect(0, 0, rectWidth, rectHeight);\n    // Lime\n    ctx.fillStyle = `rgba(0, 255, 0, ${alphaValue})`;\n    ctx.fillRect(rectWidth, 0, width - rectWidth, rectHeight);\n    // Blue\n    ctx.fillStyle = `rgba(0, 0, 255, ${alphaValue})`;\n    ctx.fillRect(0, rectHeight, rectWidth, height - rectHeight);\n    // White\n    ctx.fillStyle = `rgba(255, 255, 255, ${alphaValue})`;\n    ctx.fillRect(rectWidth, rectHeight, width - rectWidth, height - rectHeight);\n\n    return { canvas, canvasContext };\n  }\n\n  // MAINTENANCE_TODO: Cache the generated canvas to avoid duplicated initialization.\n  initGLCanvasContent({\n    canvasType,\n    contextName,\n    width,\n    height,\n    premultiplied,\n    paintOpaqueRects,\n  }: {\n    canvasType: canvasTypes;\n    contextName: 'webgl' | 'webgl2';\n    width: number;\n    height: number;\n    premultiplied: boolean;\n    paintOpaqueRects: boolean;\n  }): {\n    canvas: HTMLCanvasElement | OffscreenCanvas;\n    canvasContext: WebGLRenderingContext | WebGL2RenderingContext;\n  } {\n    const canvas = createCanvas(this, canvasType, width, height);\n\n    const gl = canvas.getContext(contextName, { premultipliedAlpha: premultiplied }) as\n      | WebGLRenderingContext\n      | WebGL2RenderingContext\n      | null;\n\n    if (gl === null) {\n      this.skip(canvasType + ' canvas ' + contextName + ' context not available');\n    }\n    this.trackForCleanup(gl);\n\n    const rectWidth = Math.floor(width / 2);\n    const rectHeight = Math.floor(height / 2);\n\n    const alphaValue = paintOpaqueRects ? 1.0 : 0.6;\n    const colorValue = premultiplied ? alphaValue : 1.0;\n\n    // For webgl/webgl2 context canvas, if the context created with premultipliedAlpha attributes,\n    // it means that the value in drawing buffer is premultiplied or not. So we should set\n    // premultipliedAlpha value for premultipliedAlpha true gl context and unpremultipliedAlpha value\n    // for the premulitpliedAlpha false gl context.\n    gl.enable(gl.SCISSOR_TEST);\n    gl.scissor(0, 0, rectWidth, rectHeight);\n    gl.clearColor(colorValue, 0.0, 0.0, alphaValue);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    gl.scissor(rectWidth, 0, width - rectWidth, rectHeight);\n    gl.clearColor(0.0, colorValue, 0.0, alphaValue);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    gl.scissor(0, rectHeight, rectWidth, height - rectHeight);\n    gl.clearColor(0.0, 0.0, colorValue, alphaValue);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    gl.scissor(rectWidth, rectHeight, width - rectWidth, height - rectHeight);\n    gl.clearColor(colorValue, colorValue, colorValue, alphaValue);\n    gl.clear(gl.COLOR_BUFFER_BIT);\n\n    return { canvas, canvasContext: gl };\n  }\n\n  getInitGPUCanvasData(\n    width: number,\n    height: number,\n    premultiplied: boolean,\n    paintOpaqueRects: boolean\n  ): Uint8ClampedArray {\n    const rectWidth = Math.floor(width / 2);\n    const rectHeight = Math.floor(height / 2);\n\n    const alphaValue = paintOpaqueRects ? 255 : 153;\n    const colorValue = premultiplied ? alphaValue : 255;\n\n    // BGRA8Unorm texture\n    const initialData = new Uint8ClampedArray(4 * width * height);\n    const maxRectHeightIndex = width * rectHeight;\n    for (let pixelIndex = 0; pixelIndex < initialData.length / 4; ++pixelIndex) {\n      const index = pixelIndex * 4;\n\n      // Top-half two rectangles\n      if (pixelIndex < maxRectHeightIndex) {\n        // top-left side rectangle\n        if (pixelIndex % width < rectWidth) {\n          // top-left side rectangle\n          initialData[index] = colorValue;\n          initialData[index + 1] = 0;\n          initialData[index + 2] = 0;\n          initialData[index + 3] = alphaValue;\n        } else {\n          // top-right side rectangle\n          initialData[index] = 0;\n          initialData[index + 1] = colorValue;\n          initialData[index + 2] = 0;\n          initialData[index + 3] = alphaValue;\n        }\n      } else {\n        // Bottom-half two rectangles\n        // bottom-left side rectangle\n        if (pixelIndex % width < rectWidth) {\n          initialData[index] = 0;\n          initialData[index + 1] = 0;\n          initialData[index + 2] = colorValue;\n          initialData[index + 3] = alphaValue;\n        } else {\n          // bottom-right side rectangle\n          initialData[index] = colorValue;\n          initialData[index + 1] = colorValue;\n          initialData[index + 2] = colorValue;\n          initialData[index + 3] = alphaValue;\n        }\n      }\n    }\n    return initialData;\n  }\n\n  initGPUCanvasContent({\n    device,\n    canvasType,\n    width,\n    height,\n    premultiplied,\n    paintOpaqueRects,\n  }: {\n    device: GPUDevice;\n    canvasType: canvasTypes;\n    width: number;\n    height: number;\n    premultiplied: boolean;\n    paintOpaqueRects: boolean;\n  }): {\n    canvas: HTMLCanvasElement | OffscreenCanvas;\n  } {\n    const canvas = createCanvas(this, canvasType, width, height);\n\n    const gpuContext = canvas.getContext('webgpu') as GPUCanvasContext | null;\n\n    if (gpuContext === null) {\n      this.skip(canvasType + ' canvas webgpu context not available');\n    }\n\n    const alphaMode = premultiplied ? 'premultiplied' : 'opaque';\n\n    gpuContext.configure({\n      device,\n      format: 'bgra8unorm',\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC,\n      compositingAlphaMode: alphaMode,\n    });\n\n    // BGRA8Unorm texture\n    const initialData = this.getInitGPUCanvasData(width, height, premultiplied, paintOpaqueRects);\n    const canvasTexture = gpuContext.getCurrentTexture();\n    device.queue.writeTexture(\n      { texture: canvasTexture },\n      initialData,\n      {\n        bytesPerRow: width * 4,\n        rowsPerImage: height,\n      },\n      {\n        width,\n        height,\n        depthOrArrayLayers: 1,\n      }\n    );\n\n    return { canvas };\n  }\n\n  getSourceCanvas2DContent(\n    context: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D,\n    width: number,\n    height: number\n  ): Uint8ClampedArray {\n    return context.getImageData(0, 0, width, height).data;\n  }\n\n  getSourceCanvasGLContent(\n    gl: WebGLRenderingContext | WebGL2RenderingContext,\n    width: number,\n    height: number\n  ): Uint8ClampedArray {\n    const bytesPerPixel = 4;\n\n    const sourcePixels = new Uint8ClampedArray(width * height * bytesPerPixel);\n    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, sourcePixels);\n\n    const finalResult = new Uint8ClampedArray(width * height * bytesPerPixel);\n    for (let i = 0; i < height; ++i) {\n      for (let j = 0; j < width; ++j) {\n        const pixelPos = i * width + j;\n        // WebGL readPixel returns pixels from bottom-left origin. Using CopyExternalImageToTexture\n        // to copy from WebGL Canvas keeps top-left origin. So the expectation from webgl.readPixel should\n        // be flipped.\n        const dstPixelPos = (height - i - 1) * width + j;\n\n        memcpy(\n          { src: sourcePixels, start: pixelPos * bytesPerPixel, length: bytesPerPixel },\n          { dst: finalResult, start: dstPixelPos * bytesPerPixel }\n        );\n      }\n    }\n\n    return finalResult;\n  }\n\n  calculateSourceContentOnCPU(\n    width: number,\n    height: number,\n    premultipliedAlpha: boolean,\n    paintOpaqueRects: boolean\n  ): Uint8ClampedArray {\n    const bytesPerPixel = 4;\n\n    const rgbaPixels = this.getInitGPUCanvasData(\n      width,\n      height,\n      premultipliedAlpha,\n      paintOpaqueRects\n    );\n\n    // The source canvas has bgra8unorm back resource. We\n    // swizzle the channels to align with 2d/webgl canvas and\n    // clear alpha to opaque when context compositingAlphaMode\n    // is set to opaque (follow webgpu spec).\n    for (let i = 0; i < height; ++i) {\n      for (let j = 0; j < width; ++j) {\n        const pixelPos = i * width + j;\n        const r = rgbaPixels[pixelPos * bytesPerPixel + 2];\n        if (!premultipliedAlpha) {\n          rgbaPixels[pixelPos * bytesPerPixel + 3] = 255;\n        }\n\n        rgbaPixels[pixelPos * bytesPerPixel + 2] = rgbaPixels[pixelPos * bytesPerPixel];\n        rgbaPixels[pixelPos * bytesPerPixel] = r;\n      }\n    }\n\n    return rgbaPixels;\n  }\n\n  getExpectedPixels(\n    sourcePixels: Uint8ClampedArray,\n    width: number,\n    height: number,\n    format: RegularTextureFormat,\n    srcPremultiplied: boolean,\n    dstPremultiplied: boolean\n  ): Uint8ClampedArray {\n    const bytesPerPixel = kTextureFormatInfo[format].bytesPerBlock;\n\n    const expectedPixels = new Uint8ClampedArray(bytesPerPixel * width * height);\n\n    // Generate expectedPixels\n    // Use getImageData and readPixels to get canvas contents.\n    const rep = kTexelRepresentationInfo[format];\n    const divide = 255.0;\n    let rgba: { R: number; G: number; B: number; A: number };\n    for (let i = 0; i < height; ++i) {\n      for (let j = 0; j < width; ++j) {\n        const pixelPos = i * width + j;\n\n        rgba = {\n          R: sourcePixels[pixelPos * 4] / divide,\n          G: sourcePixels[pixelPos * 4 + 1] / divide,\n          B: sourcePixels[pixelPos * 4 + 2] / divide,\n          A: sourcePixels[pixelPos * 4 + 3] / divide,\n        };\n\n        if (!srcPremultiplied && dstPremultiplied) {\n          rgba.R *= rgba.A;\n          rgba.G *= rgba.A;\n          rgba.B *= rgba.A;\n        }\n\n        if (srcPremultiplied && !dstPremultiplied) {\n          assert(rgba.A !== 0.0);\n          rgba.R /= rgba.A;\n          rgba.G /= rgba.A;\n          rgba.B /= rgba.A;\n        }\n\n        memcpy(\n          { src: rep.pack(rep.encode(rgba)) },\n          { dst: expectedPixels, start: pixelPos * bytesPerPixel }\n        );\n      }\n    }\n\n    return expectedPixels;\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('copy_contents_from_2d_context_canvas')\n  .desc(\n    `\n  Test HTMLCanvasElement and OffscreenCanvas with 2d context\n  can be copied to WebGPU texture correctly.\n\n  It creates HTMLCanvasElement/OffscreenCanvas with '2d'.\n  Use fillRect(2d context) to render red rect for top-left,\n  green rect for top-right, blue rect for bottom-left and white for bottom-right.\n\n  Then call copyExternalImageToTexture() to do a full copy to the 0 mipLevel\n  of dst texture, and read the contents out to compare with the canvas contents.\n\n  The tests covers:\n  - Valid canvas type\n  - Valid 2d context type\n  - Valid dstColorFormat of copyExternalImageToTexture()\n  - Valid dest alphaMode\n  - TODO: color space tests need to be added\n  - TODO: Add error tolerance for rgb10a2unorm dst texture format\n\n  And the expected results are all passed.\n  `\n  )\n  .params(u =>\n    u\n      .combine('canvasType', allCanvasTypes)\n      .combine('dstColorFormat', kValidTextureFormatsForCopyE2T)\n      .combine('dstPremultiplied', [true, false])\n      .beginSubcases()\n      .combine('width', [1, 2, 4, 15, 255, 256])\n      .combine('height', [1, 2, 4, 15, 255, 256])\n  )\n  .fn(async t => {\n    const { width, height, canvasType, dstColorFormat, dstPremultiplied } = t.params;\n\n    // When dst texture format is rgb10a2unorm, the generated expected value of the result\n    // may have tiny errors compared to the actual result when the channel value is\n    // not 1.0 or 0.0.\n    // For example, we init the pixel with r channel to 0.6. And the denormalized value for\n    // 10-bit channel is 613.8, which needs to call \"round\" or other function to get an integer.\n    // It is possible that gpu adopt different \"round\" as our cpu implementation(we use Math.round())\n    // and it will generate tiny errors.\n    // So the cases with rgb10a2unorm dst texture format are handled specially by painting opaque rects\n    // to ensure they will have stable result after alphaOps(should keep the same value).\n    const { canvas, canvasContext } = t.init2DCanvasContent({\n      canvasType,\n      width,\n      height,\n      paintOpaqueRects: dstColorFormat === 'rgb10a2unorm',\n    });\n\n    const dst = t.device.createTexture({\n      size: {\n        width,\n        height,\n        depthOrArrayLayers: 1,\n      },\n      format: dstColorFormat,\n      usage:\n        GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    // Construct expected value for different dst color format\n    const dstBytesPerPixel = kTextureFormatInfo[dstColorFormat].bytesPerBlock;\n    const format: RegularTextureFormat = formatForExpectedPixels(dstColorFormat);\n\n    // For 2d canvas, get expected pixels with getImageData(), which returns unpremultiplied\n    // values.\n    const sourcePixels = t.getSourceCanvas2DContent(canvasContext, width, height);\n    const expectedPixels = t.getExpectedPixels(\n      sourcePixels,\n      width,\n      height,\n      format,\n      false,\n      dstPremultiplied\n    );\n\n    t.doTestAndCheckResult(\n      { source: canvas, origin: { x: 0, y: 0 } },\n      {\n        texture: dst,\n        origin: { x: 0, y: 0 },\n        colorSpace: 'srgb',\n        premultipliedAlpha: dstPremultiplied,\n      },\n      { width: canvas.width, height: canvas.height, depthOrArrayLayers: 1 },\n      dstBytesPerPixel,\n      expectedPixels,\n      isFp16Format(dstColorFormat)\n    );\n  });\n\ng.test('copy_contents_from_gl_context_canvas')\n  .desc(\n    `\n  Test HTMLCanvasElement and OffscreenCanvas with webgl/webgl2 context\n  can be copied to WebGPU texture correctly.\n\n  It creates HTMLCanvasElement/OffscreenCanvas with webgl'/'webgl2'.\n  Use scissor + clear to render red rect for top-left, green rect\n  for top-right, blue rect for bottom-left and white for bottom-right.\n  And do premultiply alpha in advance if the webgl/webgl2 context is created\n  with premultipliedAlpha : true.\n\n  Then call copyExternalImageToTexture() to do a full copy to the 0 mipLevel\n  of dst texture, and read the contents out to compare with the canvas contents.\n\n  The tests covers:\n  - Valid canvas type\n  - Valid webgl/webgl2 context type\n  - Valid dstColorFormat of copyExternalImageToTexture()\n  - Valid source image alphaMode\n  - Valid dest alphaMode\n  - TODO: color space tests need to be added\n  - TODO: Add error tolerance for rgb10a2unorm dst texture format\n\n  And the expected results are all passed.\n  `\n  )\n  .params(u =>\n    u\n      .combine('canvasType', allCanvasTypes)\n      .combine('contextName', ['webgl', 'webgl2'] as const)\n      .combine('dstColorFormat', kValidTextureFormatsForCopyE2T)\n      .combine('srcPremultiplied', [true, false])\n      .combine('dstPremultiplied', [true, false])\n      .beginSubcases()\n      .combine('width', [1, 2, 4, 15, 255, 256])\n      .combine('height', [1, 2, 4, 15, 255, 256])\n  )\n  .fn(async t => {\n    const {\n      width,\n      height,\n      canvasType,\n      contextName,\n      dstColorFormat,\n      srcPremultiplied,\n      dstPremultiplied,\n    } = t.params;\n\n    // When dst texture format is rgb10a2unorm, the generated expected value of the result\n    // may have tiny errors compared to the actual result when the channel value is\n    // not 1.0 or 0.0.\n    // For example, we init the pixel with r channel to 0.6. And the denormalized value for\n    // 10-bit channel is 613.8, which needs to call \"round\" or other function to get an integer.\n    // It is possible that gpu adopt different \"round\" as our cpu implementation(we use Math.round())\n    // and it will generate tiny errors.\n    // So the cases with rgb10a2unorm dst texture format are handled specially by by painting opaque rects\n    // to ensure they will have stable result after alphaOps(should keep the same value).\n    const { canvas, canvasContext } = t.initGLCanvasContent({\n      canvasType,\n      contextName,\n      width,\n      height,\n      premultiplied: srcPremultiplied,\n      paintOpaqueRects: dstColorFormat === 'rgb10a2unorm',\n    });\n\n    const dst = t.device.createTexture({\n      size: {\n        width,\n        height,\n        depthOrArrayLayers: 1,\n      },\n      format: dstColorFormat,\n      usage:\n        GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    // Construct expected value for different dst color format\n    const dstBytesPerPixel = kTextureFormatInfo[dstColorFormat].bytesPerBlock;\n    const format: RegularTextureFormat = formatForExpectedPixels(dstColorFormat);\n    const sourcePixels = t.getSourceCanvasGLContent(canvasContext, width, height);\n    const expectedPixels = t.getExpectedPixels(\n      sourcePixels,\n      width,\n      height,\n      format,\n      srcPremultiplied,\n      dstPremultiplied\n    );\n\n    t.doTestAndCheckResult(\n      { source: canvas, origin: { x: 0, y: 0 } },\n      {\n        texture: dst,\n        origin: { x: 0, y: 0 },\n        colorSpace: 'srgb',\n        premultipliedAlpha: dstPremultiplied,\n      },\n      { width: canvas.width, height: canvas.height, depthOrArrayLayers: 1 },\n      dstBytesPerPixel,\n      expectedPixels,\n      isFp16Format(dstColorFormat)\n    );\n  });\n\ng.test('copy_contents_from_gpu_context_canvas')\n  .desc(\n    `\n  Test HTMLCanvasElement and OffscreenCanvas with webgpu context\n  can be copied to WebGPU texture correctly.\n\n  It creates HTMLCanvasElement/OffscreenCanvas with 'webgpu'.\n  Use writeTexture to copy pixels to back buffer. The results are:\n  red rect for top-left, green rect for top-right, blue rect for bottom-left\n  and white for bottom-right.\n  \n  And do premultiply alpha in advance if the webgpu context is created\n  with compositingAlphaMode=\"premultiplied\".\n\n  Then call copyExternalImageToTexture() to do a full copy to the 0 mipLevel\n  of dst texture, and read the contents out to compare with the canvas contents.\n\n  The tests covers:\n  - Valid canvas type\n  - Source WebGPU Canvas lives in the same GPUDevice or different GPUDevice as test\n  - Valid dstColorFormat of copyExternalImageToTexture()\n  - Valid source image alphaMode\n  - Valid dest alphaMode\n  - TODO: color space tests need to be added\n  - TODO: Add error tolerance for rgb10a2unorm dst texture format\n\n  And the expected results are all passed.\n  `\n  )\n  .params(u =>\n    u\n      .combine('canvasType', allCanvasTypes)\n      .combine('srcAndDstInSameGPUDevice', [true, false])\n      .combine('dstColorFormat', kValidTextureFormatsForCopyE2T)\n      .combine('srcPremultiplied', [true])\n      .combine('dstPremultiplied', [true, false])\n      .beginSubcases()\n      .combine('width', [1, 2, 4, 15, 255, 256])\n      .combine('height', [1, 2, 4, 15, 255, 256])\n  )\n  .fn(async t => {\n    const {\n      width,\n      height,\n      canvasType,\n      srcAndDstInSameGPUDevice,\n      dstColorFormat,\n      srcPremultiplied,\n      dstPremultiplied,\n    } = t.params;\n\n    let device: GPUDevice;\n\n    if (!srcAndDstInSameGPUDevice) {\n      await t.selectMismatchedDeviceOrSkipTestCase(undefined);\n      device = t.mismatchedDevice;\n    } else {\n      device = t.device;\n    }\n\n    // When dst texture format is rgb10a2unorm, the generated expected value of the result\n    // may have tiny errors compared to the actual result when the channel value is\n    // not 1.0 or 0.0.\n    // For example, we init the pixel with r channel to 0.6. And the denormalized value for\n    // 10-bit channel is 613.8, which needs to call \"round\" or other function to get an integer.\n    // It is possible that gpu adopt different \"round\" as our cpu implementation(we use Math.round())\n    // and it will generate tiny errors.\n    // So the cases with rgb10a2unorm dst texture format are handled specially by by painting opaque rects\n    // to ensure they will have stable result after alphaOps(should keep the same value).\n    const { canvas } = t.initGPUCanvasContent({\n      device,\n      canvasType,\n      width,\n      height,\n      premultiplied: srcPremultiplied,\n      paintOpaqueRects: dstColorFormat === 'rgb10a2unorm',\n    });\n\n    const dst = t.device.createTexture({\n      size: {\n        width,\n        height,\n        depthOrArrayLayers: 1,\n      },\n      format: dstColorFormat,\n      usage:\n        GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n\n    // Construct expected value for different dst color format\n    const dstBytesPerPixel = kTextureFormatInfo[dstColorFormat].bytesPerBlock;\n    const format: RegularTextureFormat = formatForExpectedPixels(dstColorFormat);\n    const sourcePixels = t.calculateSourceContentOnCPU(\n      width,\n      height,\n      srcPremultiplied,\n      dstColorFormat === 'rgb10a2unorm'\n    );\n    const expectedPixels = t.getExpectedPixels(\n      sourcePixels,\n      width,\n      height,\n      format,\n      srcPremultiplied,\n      dstPremultiplied\n    );\n\n    t.doTestAndCheckResult(\n      { source: canvas, origin: { x: 0, y: 0 } },\n      {\n        texture: dst,\n        origin: { x: 0, y: 0 },\n        colorSpace: 'srgb',\n        premultipliedAlpha: dstPremultiplied,\n      },\n      { width: canvas.width, height: canvas.height, depthOrArrayLayers: 1 },\n      dstBytesPerPixel,\n      expectedPixels,\n      isFp16Format(dstColorFormat)\n    );\n  });\n"],"file":"canvas.spec.js"}