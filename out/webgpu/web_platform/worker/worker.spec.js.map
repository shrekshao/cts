{"version":3,"sources":["../../../../src/webgpu/web_platform/worker/worker.spec.ts"],"names":["description","Fixture","makeTestGroup","assert","g","isNode","process","versions","node","undefined","test","desc","fn","t","skip","url","launchWorker","result","error"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA,CANO,CAQP,SAASC,OAAT,QAAwB,sCAAxB;AACA,SAASC,aAAT,QAA8B,yCAA9B;AACA,SAASC,MAAT,QAAuB,8BAAvB;;AAEA,OAAO,MAAMC,CAAC,GAAGF,aAAa,CAACD,OAAD,CAAvB;;AAEP,SAASI,MAAT,GAA2B;AACzB,SAAO,OAAOC,OAAP,KAAmB,WAAnB,IAAkCA,OAAO,EAAEC,QAAT,EAAmBC,IAAnB,KAA4BC,SAArE;AACD;;AAEDL,CAAC,CAACM,IAAF,CAAO,QAAP;AACGC,IADH,CACS,gFADT;AAEGC,EAFH,CAEM,OAAMC,CAAN,KAAW;AACb,MAAIR,MAAM,EAAV,EAAc;AACZQ,IAAAA,CAAC,CAACC,IAAF,CAAO,+CAAP;AACA;AACD;AACD;AACA;AACA;AACA;AACA;AACA,QAAMC,GAAG,GAAG,sBAAZ;AACA,QAAM,EAAEC,YAAF,KAAmB,MAAM,OAAOD,GAAP,CAA/B;AACA,QAAME,MAAM,GAAG,MAAMD,YAAY,EAAjC;AACAb,EAAAA,MAAM,CAACc,MAAM,CAACC,KAAP,KAAiBT,SAAlB,EAA8B,2CAA0CQ,MAAM,CAACC,KAAM,EAArF,CAAN;AACD,CAhBH","sourcesContent":["export const description = `\nTests WebGPU is available in a worker.\n\nNote: The CTS test can be run in a worker by passing in worker=1 as\na query parameter. This test is specifically to check that WebGPU\nis available in a worker.\n`;\n\nimport { Fixture } from '../../../common/framework/fixture.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { assert } from '../../../common/util/util.js';\n\nexport const g = makeTestGroup(Fixture);\n\nfunction isNode(): boolean {\n  return typeof process !== 'undefined' && process?.versions?.node !== undefined;\n}\n\ng.test('worker')\n  .desc(`test WebGPU is available in DedicatedWorkers and check for basic functionality`)\n  .fn(async t => {\n    if (isNode()) {\n      t.skip('node does not support 100% compatible workers');\n      return;\n    }\n    // Note: we load worker_launcher dynamically because ts-node support\n    // is using commonjs which doesn't support import.meta. Further,\n    // we need to put the url in a string add pass the string to import\n    // otherwise typescript tries to parse the file which again, fails.\n    // worker_launcher.js is excluded in node.tsconfig.json.\n    const url = './worker_launcher.js';\n    const { launchWorker } = await import(url);\n    const result = await launchWorker();\n    assert(result.error === undefined, `should be no error from worker but was: ${result.error}`);\n  });\n"],"file":"worker.spec.js"}