{"version":3,"sources":["../../../../src/webgpu/web_platform/worker/worker.ts"],"names":["getGPU","assert","objectEquals","iterRange","basicTest","adapter","requestAdapter","device","requestDevice","kOffset","pipeline","createComputePipeline","compute","module","createShaderModule","code","entryPoint","kNumElements","kBufferSize","buffer","createBuffer","size","usage","GPUBufferUsage","STORAGE","COPY_SRC","resultBuffer","MAP_READ","COPY_DST","bindGroup","createBindGroup","layout","getBindGroupLayout","entries","binding","resource","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatch","end","copyBufferToBuffer","queue","submit","finish","expected","Uint32Array","x","mapAsync","GPUMapMode","READ","actual","getMappedRange","destroy","self","onmessage","ev","error","undefined","err","toString","postMessage"],"mappings":"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","sourcesContent":["import { getGPU } from '../../../common/util/navigator_gpu.js';\nimport { assert, objectEquals, iterRange } from '../../../common/util/util.js';\n\nasync function basicTest() {\n  const adapter = await getGPU().requestAdapter();\n  assert(adapter !== null, 'Failed to get adapter.');\n\n  const device = await adapter.requestDevice();\n  assert(device !== null, 'Failed to get device.');\n\n  const kOffset = 1230000;\n  const pipeline = await device.createComputePipeline({\n    compute: {\n      module: device.createShaderModule({\n        code: `\n          struct Buffer { data: array<u32>; };\n\n          @group(0) @binding(0) var<storage, read_write> buffer: Buffer;\n          @stage(compute) @workgroup_size(1u) fn main(\n              @builtin(global_invocation_id) id: vec3<u32>) {\n            buffer.data[id.x] = id.x + ${kOffset}u;\n          }\n        `,\n      }),\n      entryPoint: 'main',\n    },\n  });\n\n  const kNumElements = 64;\n  const kBufferSize = kNumElements * 4;\n  const buffer = device.createBuffer({\n    size: kBufferSize,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n  });\n\n  const resultBuffer = device.createBuffer({\n    size: kBufferSize,\n    usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n  });\n\n  const bindGroup = device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [{ binding: 0, resource: { buffer } }],\n  });\n\n  const encoder = device.createCommandEncoder();\n\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bindGroup);\n  pass.dispatch(kNumElements);\n  pass.end();\n\n  encoder.copyBufferToBuffer(buffer, 0, resultBuffer, 0, kBufferSize);\n\n  device.queue.submit([encoder.finish()]);\n\n  const expected = new Uint32Array([...iterRange(kNumElements, x => x + kOffset)]);\n\n  await resultBuffer.mapAsync(GPUMapMode.READ);\n  const actual = new Uint32Array(resultBuffer.getMappedRange());\n\n  assert(objectEquals(actual, expected), 'compute pipeline ran');\n\n  resultBuffer.destroy();\n  buffer.destroy();\n  device.destroy();\n}\n\nself.onmessage = async (ev: MessageEvent) => {\n  let error = undefined;\n  try {\n    await basicTest();\n  } catch (err: unknown) {\n    error = (err as Error).toString();\n  }\n  self.postMessage({ error });\n};\n"],"file":"worker.js"}