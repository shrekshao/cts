{"version":3,"sources":["../../../../src/webgpu/web_platform/reftests/canvas_size_different_with_back_buffer_size.html.ts"],"names":["assert","runRefTest","run","t","red","Uint8Array","green","blue","yellow","pixelBytes","setRowColors","data","offset","colors","i","length","set","updateWebGPUBackBuffer","canvas","ctx","configureSize","pixels","backBufferSize","width","height","configure","device","format","usage","GPUTextureUsage","COPY_DST","size","rows","bytesPerRow","buffer","createBuffer","mappedAtCreation","GPUBufferUsage","COPY_SRC","mapping","getMappedRange","unmap","texture","getCurrentTexture","encoder","createCommandEncoder","copyBufferToTexture","queue","submit","finish","destroy","back_buffer_width","cvs_larger_than_back_buffer","back_buffer_height","getContext","cvs_same_as_back_buffer","undefined","cvs_smaller_than_back_buffer","cvs_change_size_after_configure","cvs_change_size_and_reconfigure","back_buffer_smaller_than_cvs_and_css","cvs_smaller_than_back_buffer_and_css"],"mappings":"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","sourcesContent":["import { assert } from '../../../common/util/util.js';\n\nimport { runRefTest } from './gpu_ref_test.js';\n\n// <canvas> element from html page\ndeclare const cvs_larger_than_back_buffer: HTMLCanvasElement;\ndeclare const cvs_same_as_back_buffer: HTMLCanvasElement;\ndeclare const cvs_smaller_than_back_buffer: HTMLCanvasElement;\ndeclare const cvs_change_size_after_configure: HTMLCanvasElement;\ndeclare const cvs_change_size_and_reconfigure: HTMLCanvasElement;\ndeclare const back_buffer_smaller_than_cvs_and_css: HTMLCanvasElement;\ndeclare const cvs_smaller_than_back_buffer_and_css: HTMLCanvasElement;\n\nexport function run() {\n  runRefTest(async t => {\n    const red = new Uint8Array([0x00, 0x00, 0xff, 0xff]);\n    const green = new Uint8Array([0x00, 0xff, 0x00, 0xff]);\n    const blue = new Uint8Array([0xff, 0x00, 0x00, 0xff]);\n    const yellow = new Uint8Array([0x00, 0xff, 0xff, 0xff]);\n    const pixelBytes = 4;\n\n    function setRowColors(data: Uint8Array, offset: number, colors: Array<Uint8Array>) {\n      for (let i = 0; i < colors.length; ++i) {\n        data.set(colors[i], offset + i * pixelBytes);\n      }\n    }\n\n    function updateWebGPUBackBuffer(\n      canvas: HTMLCanvasElement,\n      ctx: GPUCanvasContext,\n      configureSize: [number, number] | undefined,\n      pixels: Array<Array<Uint8Array>>\n    ) {\n      const backBufferSize = configureSize ?? [canvas.width, canvas.height];\n      ctx.configure({\n        device: t.device,\n        format: 'bgra8unorm',\n        usage: GPUTextureUsage.COPY_DST,\n        size: configureSize,\n      });\n\n      const rows = pixels.length;\n      const bytesPerRow = 256;\n      const buffer = t.device.createBuffer({\n        mappedAtCreation: true,\n        size: rows * bytesPerRow,\n        usage: GPUBufferUsage.COPY_SRC,\n      });\n      const mapping = buffer.getMappedRange();\n      const data = new Uint8Array(mapping);\n\n      for (let i = 0; i < pixels.length; ++i) {\n        setRowColors(data, bytesPerRow * i, pixels[i]);\n      }\n\n      buffer.unmap();\n      const texture = ctx.getCurrentTexture();\n\n      const encoder = t.device.createCommandEncoder();\n      encoder.copyBufferToTexture({ buffer, bytesPerRow }, { texture }, backBufferSize);\n      t.device.queue.submit([encoder.finish()]);\n      buffer.destroy();\n    }\n\n    // Test back buffer smaller than canvas size\n    {\n      const back_buffer_width = cvs_larger_than_back_buffer.width / 2;\n      const back_buffer_height = cvs_larger_than_back_buffer.height / 2;\n      const ctx = cvs_larger_than_back_buffer.getContext('webgpu');\n      assert(ctx !== null);\n\n      updateWebGPUBackBuffer(\n        cvs_larger_than_back_buffer,\n        ctx,\n        [back_buffer_width, back_buffer_height],\n        [\n          [red, red, green],\n          [red, red, green],\n          [blue, blue, yellow],\n          [blue, blue, yellow],\n        ]\n      );\n    }\n\n    // Test back buffer is same as canvas size\n    {\n      const ctx = cvs_same_as_back_buffer.getContext('webgpu');\n      assert(ctx !== null);\n\n      updateWebGPUBackBuffer(cvs_same_as_back_buffer, ctx, undefined, [\n        [red, red, green],\n        [red, red, green],\n        [blue, blue, yellow],\n        [blue, blue, yellow],\n      ]);\n    }\n\n    // Test back buffer is larger than canvas size.\n    {\n      const back_buffer_width = cvs_smaller_than_back_buffer.width * 2;\n      const back_buffer_height = cvs_smaller_than_back_buffer.height * 2;\n      const ctx = cvs_smaller_than_back_buffer.getContext('webgpu');\n      assert(ctx !== null);\n\n      updateWebGPUBackBuffer(\n        cvs_smaller_than_back_buffer,\n        ctx,\n        [back_buffer_width, back_buffer_height],\n        [\n          [red, red, red, red, green, green],\n          [red, red, red, red, green, green],\n          [red, red, red, red, green, green],\n          [red, red, red, red, green, green],\n          [blue, blue, blue, blue, yellow, yellow],\n          [blue, blue, blue, blue, yellow, yellow],\n          [blue, blue, blue, blue, yellow, yellow],\n          [blue, blue, blue, blue, yellow, yellow],\n        ]\n      );\n    }\n\n    // Test js change canvas size after back buffer has been configured\n    {\n      const back_buffer_width = cvs_change_size_after_configure.width;\n      const back_buffer_height = cvs_change_size_after_configure.height;\n      const ctx = cvs_change_size_after_configure.getContext('webgpu');\n      assert(ctx !== null);\n\n      updateWebGPUBackBuffer(\n        cvs_change_size_after_configure,\n        ctx,\n        [back_buffer_width, back_buffer_height],\n        [\n          [red, red, green],\n          [red, red, green],\n          [blue, blue, yellow],\n          [blue, blue, yellow],\n        ]\n      );\n\n      cvs_change_size_after_configure.width = 6;\n      cvs_change_size_after_configure.height = 8;\n    }\n\n    // Test js change canvas size after back buffer has been configured\n    // and back buffer configure again.\n    {\n      const ctx = cvs_change_size_and_reconfigure.getContext('webgpu');\n      assert(ctx !== null);\n\n      updateWebGPUBackBuffer(cvs_change_size_and_reconfigure, ctx, undefined, [\n        [red, red, green],\n        [red, red, green],\n        [blue, blue, yellow],\n        [blue, blue, yellow],\n      ]);\n\n      cvs_change_size_and_reconfigure.width = 6;\n      cvs_change_size_and_reconfigure.height = 8;\n\n      updateWebGPUBackBuffer(cvs_change_size_and_reconfigure, ctx, undefined, [\n        [red, red, red, red, green, green],\n        [red, red, red, red, green, green],\n        [red, red, red, red, green, green],\n        [red, red, red, red, green, green],\n        [blue, blue, blue, blue, yellow, yellow],\n        [blue, blue, blue, blue, yellow, yellow],\n        [blue, blue, blue, blue, yellow, yellow],\n        [blue, blue, blue, blue, yellow, yellow],\n      ]);\n    }\n\n    // Test back buffer size < canvas size < CSS size\n    {\n      const back_buffer_width = back_buffer_smaller_than_cvs_and_css.width / 2;\n      const back_buffer_height = back_buffer_smaller_than_cvs_and_css.height / 2;\n      const ctx = back_buffer_smaller_than_cvs_and_css.getContext('webgpu');\n      assert(ctx !== null);\n\n      updateWebGPUBackBuffer(\n        back_buffer_smaller_than_cvs_and_css,\n        ctx,\n        [back_buffer_width, back_buffer_height],\n        [\n          [red, red, green],\n          [red, red, green],\n          [blue, blue, yellow],\n          [blue, blue, yellow],\n        ]\n      );\n    }\n\n    // Test canvas size < back buffer size < CSS size\n    {\n      const back_buffer_width = cvs_smaller_than_back_buffer_and_css.width * 2;\n      const back_buffer_height = cvs_smaller_than_back_buffer_and_css.height * 2;\n      const ctx = cvs_smaller_than_back_buffer_and_css.getContext('webgpu');\n      assert(ctx !== null);\n\n      updateWebGPUBackBuffer(\n        cvs_smaller_than_back_buffer_and_css,\n        ctx,\n        [back_buffer_width, back_buffer_height],\n        [\n          [red, red, red, red, green, green],\n          [red, red, green, red, green, green],\n          [red, red, red, red, green, green],\n          [red, red, red, red, green, green],\n          [blue, blue, blue, blue, yellow, yellow],\n          [blue, blue, blue, blue, yellow, yellow],\n          [blue, blue, blue, blue, yellow, yellow],\n          [blue, blue, blue, blue, yellow, yellow],\n        ]\n      );\n    }\n  });\n}\n"],"file":"canvas_size_different_with_back_buffer_size.html.js"}