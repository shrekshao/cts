{"version":3,"sources":["../../../../src/webgpu/web_platform/reftests/canvas_complex.html.ts"],"names":["assert","unreachable","kTextureFormatInfo","gammaDecompress","float32ToFloat16Bits","align","runRefTest","run","format","targets","t","shaderValue","isOutputSrgb","shaderValueStr","toFixed","copyBufferToTexture","ctx","rows","canvas","height","bytesPerPixel","bytesPerBlock","undefined","bytesPerRow","width","componentsPerPixel","buffer","device","createBuffer","mappedAtCreation","size","usage","GPUBufferUsage","COPY_SRC","red","green","blue","yellow","mapping","getMappedRange","data","Uint8Array","Uint16Array","i","j","pixel","set","unmap","encoder","createCommandEncoder","texture","getCurrentTexture","queue","submit","finish","getImageBitmap","Uint8ClampedArray","offset","imageData","ImageData","createImageBitmap","setupSrcTexture","imageBitmap","srcWidth","srcHeight","srcTexture","createTexture","GPUTextureUsage","TEXTURE_BINDING","RENDER_ATTACHMENT","COPY_DST","copyExternalImageToTexture","source","copyTextureToTexture","mipLevel","origin","x","y","z","DrawTextureSample","pipeline","createRenderPipeline","vertex","module","createShaderModule","code","entryPoint","fragment","primitive","topology","sampler","createSampler","magFilter","minFilter","uniformBindGroup","createBindGroup","layout","getBindGroupLayout","entries","binding","resource","createView","renderPassDescriptor","colorAttachments","view","clearValue","r","g","b","a","loadOp","storeOp","commandEncoder","passEncoder","beginRenderPass","setPipeline","setBindGroup","draw","end","DrawVertexColor","DrawFragcoord","halfCanvasWidthStr","halfCanvasHeightStr","FragmentTextureStore","bg","outputTexture","loadValue","ComputeWorkgroup1x1TextureStore","createComputePipeline","compute","pass","beginComputePass","dispatch","ComputeWorkgroup16x16TextureStore","canvasWidthStr","canvasHeightStr","cvs","writeCanvasMethod","getContext","STORAGE_BINDING","configure"],"mappings":"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","sourcesContent":["import { assert, unreachable } from '../../../common/util/util.js';\nimport { kTextureFormatInfo } from '../../capability_info.js';\nimport { gammaDecompress, float32ToFloat16Bits } from '../../util/conversion.js';\nimport { align } from '../../util/math.js';\n\nimport { runRefTest } from './gpu_ref_test.js';\n\ntype WriteCanvasMethod =\n  | 'copyBufferToTexture'\n  | 'copyTextureToTexture'\n  | 'copyExternalImageToTexture'\n  | 'DrawTextureSample'\n  | 'DrawVertexColor'\n  | 'DrawFragcoord'\n  | 'FragmentTextureStore'\n  | 'ComputeWorkgroup1x1TextureStore'\n  | 'ComputeWorkgroup16x16TextureStore';\n\nexport function run(\n  format: GPUTextureFormat,\n  targets: { cvs: HTMLCanvasElement; writeCanvasMethod: WriteCanvasMethod }[]\n) {\n  runRefTest(async t => {\n    let shaderValue: number = 0x66 / 0xff;\n    let isOutputSrgb = false;\n    switch (format) {\n      case 'bgra8unorm':\n      case 'rgba8unorm':\n      case 'rgba16float':\n        break;\n      case 'bgra8unorm-srgb':\n      case 'rgba8unorm-srgb':\n        // NOTE: \"-srgb\" cases haven't been tested (there aren't any .html files that use them).\n\n        // Reverse gammaCompress to get same value shader output as non-srgb formats:\n        shaderValue = gammaDecompress(shaderValue);\n        isOutputSrgb = true;\n        break;\n      default:\n        unreachable();\n    }\n    const shaderValueStr = shaderValue.toFixed(5);\n\n    function copyBufferToTexture(ctx: GPUCanvasContext) {\n      const rows = ctx.canvas.height;\n      const bytesPerPixel = kTextureFormatInfo[format].bytesPerBlock;\n      if (bytesPerPixel === undefined) {\n        unreachable();\n      }\n      const bytesPerRow = align(bytesPerPixel * ctx.canvas.width, 256);\n      const componentsPerPixel = 4;\n\n      const buffer = t.device.createBuffer({\n        mappedAtCreation: true,\n        size: rows * bytesPerRow,\n        usage: GPUBufferUsage.COPY_SRC,\n      });\n      let red: Uint8Array | Uint16Array;\n      let green: Uint8Array | Uint16Array;\n      let blue: Uint8Array | Uint16Array;\n      let yellow: Uint8Array | Uint16Array;\n\n      const mapping = buffer.getMappedRange();\n      let data: Uint8Array | Uint16Array;\n      switch (format) {\n        case 'bgra8unorm':\n        case 'bgra8unorm-srgb':\n          {\n            data = new Uint8Array(mapping);\n            red = new Uint8Array([0x00, 0x00, 0x66, 0xff]);\n            green = new Uint8Array([0x00, 0x66, 0x00, 0xff]);\n            blue = new Uint8Array([0x66, 0x00, 0x00, 0xff]);\n            yellow = new Uint8Array([0x00, 0x66, 0x66, 0xff]);\n          }\n          break;\n        case 'rgba8unorm':\n        case 'rgba8unorm-srgb':\n          {\n            data = new Uint8Array(mapping);\n            red = new Uint8Array([0x66, 0x00, 0x00, 0xff]);\n            green = new Uint8Array([0x00, 0x66, 0x00, 0xff]);\n            blue = new Uint8Array([0x00, 0x00, 0x66, 0xff]);\n            yellow = new Uint8Array([0x66, 0x66, 0x00, 0xff]);\n          }\n          break;\n        case 'rgba16float':\n          {\n            data = new Uint16Array(mapping);\n            red = new Uint16Array([\n              float32ToFloat16Bits(0.4),\n              float32ToFloat16Bits(0.0),\n              float32ToFloat16Bits(0.0),\n              float32ToFloat16Bits(1.0),\n            ]);\n            green = new Uint16Array([\n              float32ToFloat16Bits(0.0),\n              float32ToFloat16Bits(0.4),\n              float32ToFloat16Bits(0.0),\n              float32ToFloat16Bits(1.0),\n            ]);\n            blue = new Uint16Array([\n              float32ToFloat16Bits(0.0),\n              float32ToFloat16Bits(0.0),\n              float32ToFloat16Bits(0.4),\n              float32ToFloat16Bits(1.0),\n            ]);\n            yellow = new Uint16Array([\n              float32ToFloat16Bits(0.4),\n              float32ToFloat16Bits(0.4),\n              float32ToFloat16Bits(0.0),\n              float32ToFloat16Bits(1.0),\n            ]);\n          }\n          break;\n        default:\n          unreachable();\n      }\n      for (let i = 0; i < ctx.canvas.width; ++i)\n        for (let j = 0; j < ctx.canvas.height; ++j) {\n          let pixel: Uint8Array | Uint16Array;\n          if (i < ctx.canvas.width / 2) {\n            if (j < ctx.canvas.height / 2) {\n              pixel = red;\n            } else {\n              pixel = blue;\n            }\n          } else {\n            if (j < ctx.canvas.height / 2) {\n              pixel = green;\n            } else {\n              pixel = yellow;\n            }\n          }\n          data.set(pixel, (i + j * (bytesPerRow / bytesPerPixel)) * componentsPerPixel);\n        }\n      buffer.unmap();\n\n      const encoder = t.device.createCommandEncoder();\n      encoder.copyBufferToTexture({ buffer, bytesPerRow }, { texture: ctx.getCurrentTexture() }, [\n        ctx.canvas.width,\n        ctx.canvas.height,\n        1,\n      ]);\n      t.device.queue.submit([encoder.finish()]);\n    }\n\n    function getImageBitmap(ctx: GPUCanvasContext): Promise<ImageBitmap> {\n      const data = new Uint8ClampedArray(ctx.canvas.width * ctx.canvas.height * 4);\n      for (let i = 0; i < ctx.canvas.width; ++i)\n        for (let j = 0; j < ctx.canvas.height; ++j) {\n          const offset = (i + j * ctx.canvas.width) * 4;\n          if (i < ctx.canvas.width / 2) {\n            if (j < ctx.canvas.height / 2) {\n              data.set([0x66, 0x00, 0x00, 0xff], offset);\n            } else {\n              data.set([0x00, 0x00, 0x66, 0xff], offset);\n            }\n          } else {\n            if (j < ctx.canvas.height / 2) {\n              data.set([0x00, 0x66, 0x00, 0xff], offset);\n            } else {\n              data.set([0x66, 0x66, 0x00, 0xff], offset);\n            }\n          }\n        }\n      const imageData = new ImageData(data, ctx.canvas.width, ctx.canvas.height);\n      return createImageBitmap(imageData);\n    }\n\n    function setupSrcTexture(imageBitmap: ImageBitmap): GPUTexture {\n      const [srcWidth, srcHeight] = [imageBitmap.width, imageBitmap.height];\n      const srcTexture = t.device.createTexture({\n        size: [srcWidth, srcHeight, 1],\n        format,\n        usage:\n          GPUTextureUsage.TEXTURE_BINDING |\n          GPUTextureUsage.RENDER_ATTACHMENT |\n          GPUTextureUsage.COPY_DST |\n          GPUTextureUsage.COPY_SRC,\n      });\n      t.device.queue.copyExternalImageToTexture({ source: imageBitmap }, { texture: srcTexture }, [\n        imageBitmap.width,\n        imageBitmap.height,\n      ]);\n      return srcTexture;\n    }\n\n    async function copyExternalImageToTexture(ctx: GPUCanvasContext) {\n      const imageBitmap = await getImageBitmap(ctx);\n      t.device.queue.copyExternalImageToTexture(\n        { source: imageBitmap },\n        { texture: ctx.getCurrentTexture() },\n        [imageBitmap.width, imageBitmap.height]\n      );\n    }\n\n    async function copyTextureToTexture(ctx: GPUCanvasContext) {\n      const imageBitmap = await getImageBitmap(ctx);\n      const srcTexture = setupSrcTexture(imageBitmap);\n\n      const encoder = t.device.createCommandEncoder();\n      encoder.copyTextureToTexture(\n        { texture: srcTexture, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n        { texture: ctx.getCurrentTexture(), mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n        [imageBitmap.width, imageBitmap.height, 1]\n      );\n      t.device.queue.submit([encoder.finish()]);\n    }\n\n    async function DrawTextureSample(ctx: GPUCanvasContext) {\n      const imageBitmap = await getImageBitmap(ctx);\n      const srcTexture = setupSrcTexture(imageBitmap);\n\n      const pipeline = t.device.createRenderPipeline({\n        vertex: {\n          module: t.device.createShaderModule({\n            code: `\nstruct VertexOutput {\n  @builtin(position) Position : vec4<f32>;\n  @location(0) fragUV : vec2<f32>;\n};\n\n@stage(vertex)\nfn main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n  var pos = array<vec2<f32>, 6>(\n      vec2<f32>( 1.0,  1.0),\n      vec2<f32>( 1.0, -1.0),\n      vec2<f32>(-1.0, -1.0),\n      vec2<f32>( 1.0,  1.0),\n      vec2<f32>(-1.0, -1.0),\n      vec2<f32>(-1.0,  1.0));\n\n  var uv = array<vec2<f32>, 6>(\n      vec2<f32>(1.0, 0.0),\n      vec2<f32>(1.0, 1.0),\n      vec2<f32>(0.0, 1.0),\n      vec2<f32>(1.0, 0.0),\n      vec2<f32>(0.0, 1.0),\n      vec2<f32>(0.0, 0.0));\n\n  var output : VertexOutput;\n  output.Position = vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n  output.fragUV = uv[VertexIndex];\n  return output;\n}\n            `,\n          }),\n          entryPoint: 'main',\n        },\n        fragment: {\n          module: t.device.createShaderModule({\n            // NOTE: \"-srgb\" cases haven't been tested (there aren't any .html files that use them).\n            code: `\n@group(0) @binding(0) var mySampler: sampler;\n@group(0) @binding(1) var myTexture: texture_2d<f32>;\n\nfn gammaDecompress(n: f32) -> f32 {\n  var r = n;\n  if (r <= 0.04045) {\n    r = r * 25.0 / 323.0;\n  } else {\n    r = pow((200.0 * r + 11.0) / 121.0, 12.0 / 5.0);\n  }\n  r = clamp(r, 0.0, 1.0);\n  return r;\n}\n\n@stage(fragment)\nfn srgbMain(@location(0) fragUV: vec2<f32>) -> @location(0) vec4<f32> {\n  var result = textureSample(myTexture, mySampler, fragUV);\n  result.r = gammaDecompress(result.r);\n  result.g = gammaDecompress(result.g);\n  result.b = gammaDecompress(result.b);\n  return result;\n}\n\n@stage(fragment)\nfn linearMain(@location(0) fragUV: vec2<f32>) -> @location(0) vec4<f32> {\n  return textureSample(myTexture, mySampler, fragUV);\n}\n            `,\n          }),\n          entryPoint: isOutputSrgb ? 'srgbMain' : 'linearMain',\n          targets: [{ format }],\n        },\n        primitive: {\n          topology: 'triangle-list',\n        },\n      });\n\n      const sampler = t.device.createSampler({\n        magFilter: 'nearest',\n        minFilter: 'nearest',\n      });\n\n      const uniformBindGroup = t.device.createBindGroup({\n        layout: pipeline.getBindGroupLayout(0),\n        entries: [\n          {\n            binding: 0,\n            resource: sampler,\n          },\n          {\n            binding: 1,\n            resource: srcTexture.createView(),\n          },\n        ],\n      });\n\n      const renderPassDescriptor: GPURenderPassDescriptor = {\n        colorAttachments: [\n          {\n            view: ctx.getCurrentTexture().createView(),\n\n            clearValue: { r: 0.5, g: 0.5, b: 0.5, a: 1.0 },\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n      };\n\n      const commandEncoder = t.device.createCommandEncoder();\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n      passEncoder.setPipeline(pipeline);\n      passEncoder.setBindGroup(0, uniformBindGroup);\n      passEncoder.draw(6, 1, 0, 0);\n      passEncoder.end();\n      t.device.queue.submit([commandEncoder.finish()]);\n    }\n\n    function DrawVertexColor(ctx: GPUCanvasContext) {\n      const pipeline = t.device.createRenderPipeline({\n        vertex: {\n          module: t.device.createShaderModule({\n            code: `\nstruct VertexOutput {\n  @builtin(position) Position : vec4<f32>;\n  @location(0) fragColor : vec4<f32>;\n};\n\n@stage(vertex)\nfn main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n  var pos = array<vec2<f32>, 6>(\n      vec2<f32>( 0.5,  0.5),\n      vec2<f32>( 0.5, -0.5),\n      vec2<f32>(-0.5, -0.5),\n      vec2<f32>( 0.5,  0.5),\n      vec2<f32>(-0.5, -0.5),\n      vec2<f32>(-0.5,  0.5));\n\n  var offset = array<vec2<f32>, 4>(\n    vec2<f32>( -0.5,  0.5),\n    vec2<f32>( 0.5, 0.5),\n    vec2<f32>(-0.5, -0.5),\n    vec2<f32>( 0.5,  -0.5));\n\n  var color = array<vec4<f32>, 4>(\n      vec4<f32>(${shaderValueStr}, 0.0, 0.0, 1.0),\n      vec4<f32>(0.0, ${shaderValueStr}, 0.0, 1.0),\n      vec4<f32>(0.0, 0.0, ${shaderValueStr}, 1.0),\n      vec4<f32>(${shaderValueStr}, ${shaderValueStr}, 0.0, 1.0));\n\n  var output : VertexOutput;\n  output.Position = vec4<f32>(pos[VertexIndex % 6u] + offset[VertexIndex / 6u], 0.0, 1.0);\n  output.fragColor = color[VertexIndex / 6u];\n  return output;\n}\n            `,\n          }),\n          entryPoint: 'main',\n        },\n        fragment: {\n          module: t.device.createShaderModule({\n            code: `\n@stage(fragment)\nfn main(@location(0) fragColor: vec4<f32>) -> @location(0) vec4<f32> {\n  return fragColor;\n}\n            `,\n          }),\n          entryPoint: 'main',\n          targets: [{ format }],\n        },\n        primitive: {\n          topology: 'triangle-list',\n        },\n      });\n\n      const renderPassDescriptor: GPURenderPassDescriptor = {\n        colorAttachments: [\n          {\n            view: ctx.getCurrentTexture().createView(),\n\n            clearValue: { r: 0.5, g: 0.5, b: 0.5, a: 1.0 },\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n      };\n\n      const commandEncoder = t.device.createCommandEncoder();\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n      passEncoder.setPipeline(pipeline);\n      passEncoder.draw(24, 1, 0, 0);\n      passEncoder.end();\n      t.device.queue.submit([commandEncoder.finish()]);\n    }\n\n    function DrawFragcoord(ctx: GPUCanvasContext) {\n      const halfCanvasWidthStr = (ctx.canvas.width / 2).toFixed();\n      const halfCanvasHeightStr = (ctx.canvas.height / 2).toFixed();\n      const pipeline = t.device.createRenderPipeline({\n        vertex: {\n          module: t.device.createShaderModule({\n            code: `\nstruct VertexOutput {\n  @builtin(position) Position : vec4<f32>;\n};\n\n@stage(vertex)\nfn main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n  var pos = array<vec2<f32>, 6>(\n      vec2<f32>( 1.0,  1.0),\n      vec2<f32>( 1.0, -1.0),\n      vec2<f32>(-1.0, -1.0),\n      vec2<f32>( 1.0,  1.0),\n      vec2<f32>(-1.0, -1.0),\n      vec2<f32>(-1.0,  1.0));\n\n  var output : VertexOutput;\n  output.Position = vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n  return output;\n}\n            `,\n          }),\n          entryPoint: 'main',\n        },\n        fragment: {\n          module: t.device.createShaderModule({\n            code: `\n@group(0) @binding(0) var mySampler: sampler;\n@group(0) @binding(1) var myTexture: texture_2d<f32>;\n\n@stage(fragment)\nfn main(@builtin(position) fragcoord: vec4<f32>) -> @location(0) vec4<f32> {\n  var coord = vec2<u32>(floor(fragcoord.xy));\n  var color = vec4<f32>(0.0, 0.0, 0.0, 1.0);\n  if (coord.x < ${halfCanvasWidthStr}u) {\n    if (coord.y < ${halfCanvasHeightStr}u) {\n      color.r = ${shaderValueStr};\n    } else {\n      color.b = ${shaderValueStr};\n    }\n  } else {\n    if (coord.y < ${halfCanvasHeightStr}u) {\n      color.g = ${shaderValueStr};\n    } else {\n      color.r = ${shaderValueStr};\n      color.g = ${shaderValueStr};\n    }\n  }\n  return color;\n}\n            `,\n          }),\n          entryPoint: 'main',\n          targets: [{ format }],\n        },\n        primitive: {\n          topology: 'triangle-list',\n        },\n      });\n\n      const renderPassDescriptor: GPURenderPassDescriptor = {\n        colorAttachments: [\n          {\n            view: ctx.getCurrentTexture().createView(),\n\n            clearValue: { r: 0.5, g: 0.5, b: 0.5, a: 1.0 },\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n      };\n\n      const commandEncoder = t.device.createCommandEncoder();\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n      passEncoder.setPipeline(pipeline);\n      passEncoder.draw(6, 1, 0, 0);\n      passEncoder.end();\n      t.device.queue.submit([commandEncoder.finish()]);\n    }\n\n    function FragmentTextureStore(ctx: GPUCanvasContext) {\n      const halfCanvasWidthStr = (ctx.canvas.width / 2).toFixed();\n      const halfCanvasHeightStr = (ctx.canvas.height / 2).toFixed();\n      const pipeline = t.device.createRenderPipeline({\n        vertex: {\n          module: t.device.createShaderModule({\n            code: `\nstruct VertexOutput {\n  @builtin(position) Position : vec4<f32>;\n};\n\n@stage(vertex)\nfn main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n  var pos = array<vec2<f32>, 6>(\n      vec2<f32>( 1.0,  1.0),\n      vec2<f32>( 1.0, -1.0),\n      vec2<f32>(-1.0, -1.0),\n      vec2<f32>( 1.0,  1.0),\n      vec2<f32>(-1.0, -1.0),\n      vec2<f32>(-1.0,  1.0));\n\n  var output : VertexOutput;\n  output.Position = vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n  return output;\n}\n            `,\n          }),\n          entryPoint: 'main',\n        },\n        fragment: {\n          module: t.device.createShaderModule({\n            code: `\n@group(0) @binding(0) var outImage : texture_storage_2d<${format}, write>;\n\n@stage(fragment)\nfn main(@builtin(position) fragcoord: vec4<f32>) -> @location(0) vec4<f32> {\n  var coord = vec2<u32>(floor(fragcoord.xy));\n  var color = vec4<f32>(0.0, 0.0, 0.0, 1.0);\n  if (coord.x < ${halfCanvasWidthStr}u) {\n    if (coord.y < ${halfCanvasHeightStr}u) {\n      color.r = ${shaderValueStr};\n    } else {\n      color.b = ${shaderValueStr};\n    }\n  } else {\n    if (coord.y < ${halfCanvasHeightStr}u) {\n      color.g = ${shaderValueStr};\n    } else {\n      color.r = ${shaderValueStr};\n      color.g = ${shaderValueStr};\n    }\n  }\n  textureStore(outImage, vec2<i32>(coord), color);\n  return color;\n}\n            `,\n          }),\n          entryPoint: 'main',\n          targets: [{ format }],\n        },\n        primitive: {\n          topology: 'triangle-list',\n        },\n      });\n\n      const bg = t.device.createBindGroup({\n        entries: [{ binding: 0, resource: ctx.getCurrentTexture().createView() }],\n        layout: pipeline.getBindGroupLayout(0),\n      });\n\n      const outputTexture = t.device.createTexture({\n        format,\n        size: [ctx.canvas.width, ctx.canvas.height, 1],\n        usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      });\n\n      const renderPassDescriptor: GPURenderPassDescriptor = {\n        colorAttachments: [\n          {\n            view: outputTexture.createView(),\n\n            loadValue: { r: 0.5, g: 0.5, b: 0.5, a: 1.0 },\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n      };\n\n      const commandEncoder = t.device.createCommandEncoder();\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n      passEncoder.setPipeline(pipeline);\n      passEncoder.setBindGroup(0, bg);\n      passEncoder.draw(6, 1, 0, 0);\n      passEncoder.end();\n      t.device.queue.submit([commandEncoder.finish()]);\n    }\n\n    function ComputeWorkgroup1x1TextureStore(ctx: GPUCanvasContext) {\n      const halfCanvasWidthStr = (ctx.canvas.width / 2).toFixed();\n      const halfCanvasHeightStr = (ctx.canvas.height / 2).toFixed();\n      const pipeline = t.device.createComputePipeline({\n        compute: {\n          module: t.device.createShaderModule({\n            code: `\n@group(0) @binding(0) var outImage : texture_storage_2d<${format}, write>;\n\n@stage(compute) @workgroup_size(1, 1, 1)\nfn main(@builtin(global_invocation_id) GlobalInvocationID : vec3<u32>) {\n  var color = vec4<f32>(0.0, 0.0, 0.0, 1.0);\n  if (GlobalInvocationID.x < ${halfCanvasWidthStr}u) {\n    if (GlobalInvocationID.y < ${halfCanvasHeightStr}u) {\n      color.r = ${shaderValueStr};\n    } else {\n      color.b = ${shaderValueStr};\n    }\n  } else {\n    if (GlobalInvocationID.y < ${halfCanvasHeightStr}u) {\n      color.g = ${shaderValueStr};\n    } else {\n      color.r = ${shaderValueStr};\n      color.g = ${shaderValueStr};\n    }\n  }\n  textureStore(outImage, vec2<i32>(GlobalInvocationID.xy), color);\n  return;\n}\n          `,\n          }),\n          entryPoint: 'main',\n        },\n      });\n\n      const bg = t.device.createBindGroup({\n        entries: [{ binding: 0, resource: ctx.getCurrentTexture().createView() }],\n        layout: pipeline.getBindGroupLayout(0),\n      });\n\n      const encoder = t.device.createCommandEncoder();\n      const pass = encoder.beginComputePass();\n      pass.setPipeline(pipeline);\n      pass.setBindGroup(0, bg);\n      pass.dispatch(ctx.canvas.width, ctx.canvas.height, 1);\n      pass.end();\n      t.device.queue.submit([encoder.finish()]);\n    }\n\n    function ComputeWorkgroup16x16TextureStore(ctx: GPUCanvasContext) {\n      const canvasWidthStr = ctx.canvas.width.toFixed();\n      const canvasHeightStr = ctx.canvas.height.toFixed();\n      const halfCanvasWidthStr = (ctx.canvas.width / 2).toFixed();\n      const halfCanvasHeightStr = (ctx.canvas.height / 2).toFixed();\n      const pipeline = t.device.createComputePipeline({\n        compute: {\n          module: t.device.createShaderModule({\n            code: `\n@group(0) @binding(0) var outImage : texture_storage_2d<${format}, write>;\n\n@stage(compute) @workgroup_size(16, 16, 1)\nfn main(@builtin(global_invocation_id) GlobalInvocationID : vec3<u32>) {\n  if (GlobalInvocationID.x >= ${canvasWidthStr}u ||\n      GlobalInvocationID.y >= ${canvasHeightStr}u) {\n        return;\n  }\n  var color = vec4<f32>(0.0, 0.0, 0.0, 1.0);\n  if (GlobalInvocationID.x < ${halfCanvasWidthStr}u) {\n    if (GlobalInvocationID.y < ${halfCanvasHeightStr}u) {\n      color.r = ${shaderValueStr};\n    } else {\n      color.b = ${shaderValueStr};\n    }\n  } else {\n    if (GlobalInvocationID.y < ${halfCanvasHeightStr}u) {\n      color.g = ${shaderValueStr};\n    } else {\n      color.r = ${shaderValueStr};\n      color.g = ${shaderValueStr};\n    }\n  }\n  textureStore(outImage, vec2<i32>(GlobalInvocationID.xy), color);\n  return;\n}\n            `,\n          }),\n          entryPoint: 'main',\n        },\n      });\n\n      const bg = t.device.createBindGroup({\n        entries: [{ binding: 0, resource: ctx.getCurrentTexture().createView() }],\n        layout: pipeline.getBindGroupLayout(0),\n      });\n\n      const encoder = t.device.createCommandEncoder();\n      const pass = encoder.beginComputePass();\n      pass.setPipeline(pipeline);\n      pass.setBindGroup(0, bg);\n      pass.dispatch(align(ctx.canvas.width, 16) / 16, align(ctx.canvas.height, 16) / 16, 1);\n      pass.end();\n      t.device.queue.submit([encoder.finish()]);\n    }\n\n    for (const { cvs, writeCanvasMethod } of targets) {\n      const ctx = cvs.getContext('webgpu');\n      assert(ctx !== null, 'Failed to get WebGPU context from canvas');\n\n      let usage: GPUTextureUsageFlags;\n      switch (writeCanvasMethod) {\n        case 'copyBufferToTexture':\n        case 'copyTextureToTexture':\n          usage = GPUTextureUsage.COPY_DST;\n          break;\n        case 'copyExternalImageToTexture':\n          usage = GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT;\n          break;\n        case 'DrawTextureSample':\n        case 'DrawVertexColor':\n        case 'DrawFragcoord':\n          usage = GPUTextureUsage.RENDER_ATTACHMENT;\n          break;\n        case 'FragmentTextureStore':\n        case 'ComputeWorkgroup1x1TextureStore':\n        case 'ComputeWorkgroup16x16TextureStore':\n          usage = GPUTextureUsage.STORAGE_BINDING;\n          break;\n        default:\n          unreachable();\n      }\n\n      ctx.configure({\n        device: t.device,\n        format,\n        usage,\n      });\n\n      switch (writeCanvasMethod) {\n        case 'copyBufferToTexture':\n          copyBufferToTexture(ctx);\n          break;\n        case 'copyExternalImageToTexture':\n          await copyExternalImageToTexture(ctx);\n          break;\n        case 'copyTextureToTexture':\n          await copyTextureToTexture(ctx);\n          break;\n        case 'DrawTextureSample':\n          await DrawTextureSample(ctx);\n          break;\n        case 'DrawVertexColor':\n          DrawVertexColor(ctx);\n          break;\n        case 'DrawFragcoord':\n          DrawFragcoord(ctx);\n          break;\n        case 'FragmentTextureStore':\n          FragmentTextureStore(ctx);\n          break;\n        case 'ComputeWorkgroup1x1TextureStore':\n          ComputeWorkgroup1x1TextureStore(ctx);\n          break;\n        case 'ComputeWorkgroup16x16TextureStore':\n          ComputeWorkgroup16x16TextureStore(ctx);\n          break;\n        default:\n          unreachable();\n      }\n    }\n  });\n}\n"],"file":"canvas_complex.html.js"}