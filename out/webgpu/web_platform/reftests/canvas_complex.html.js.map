{"version":3,"sources":["../../../../src/webgpu/web_platform/reftests/canvas_complex.html.ts"],"names":["assert","unreachable","gammaDecompress","runRefTest","run","format","targets","t","shaderValue","isOutputSrgb","shaderValueStr","toFixed","copyBufferToTexture","ctx","rows","bytesPerRow","buffer","device","createBuffer","mappedAtCreation","size","usage","GPUBufferUsage","COPY_SRC","mapping","getMappedRange","data","Uint8Array","set","unmap","encoder","createCommandEncoder","texture","getCurrentTexture","queue","submit","finish","getImageBitmap","imageData","ImageData","Uint8ClampedArray","createImageBitmap","setupSrcTexture","imageBitmap","srcWidth","srcHeight","width","height","srcTexture","createTexture","GPUTextureUsage","TEXTURE_BINDING","RENDER_ATTACHMENT","COPY_DST","copyExternalImageToTexture","source","copyTextureToTexture","mipLevel","origin","x","y","z","DrawTextureSample","pipeline","createRenderPipeline","vertex","module","createShaderModule","code","entryPoint","fragment","primitive","topology","sampler","createSampler","magFilter","minFilter","uniformBindGroup","createBindGroup","layout","getBindGroupLayout","entries","binding","resource","createView","renderPassDescriptor","colorAttachments","view","loadValue","r","g","b","a","storeOp","commandEncoder","passEncoder","beginRenderPass","setPipeline","setBindGroup","draw","endPass","DrawVertexColor","DrawFragcoord","cvs","writeCanvasMethod","getContext","configure"],"mappings":"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","sourcesContent":["import { assert, unreachable } from '../../../common/util/util.js';\nimport { gammaDecompress } from '../../util/conversion.js';\n\nimport { runRefTest } from './gpu_ref_test.js';\n\ntype WriteCanvasMethod =\n  | 'copyBufferToTexture'\n  | 'copyTextureToTexture'\n  | 'copyExternalImageToTexture'\n  | 'DrawTextureSample'\n  | 'DrawVertexColor'\n  | 'DrawFragcoord';\n\nexport function run(\n  format: GPUTextureFormat,\n  targets: { cvs: HTMLCanvasElement; writeCanvasMethod: WriteCanvasMethod }[]\n) {\n  runRefTest(async t => {\n    let shaderValue: number = 0x7f / 0xff;\n    let isOutputSrgb = false;\n    switch (format) {\n      case 'bgra8unorm':\n      case 'rgba8unorm':\n        break;\n      case 'bgra8unorm-srgb':\n      case 'rgba8unorm-srgb':\n        // NOTE: \"-srgb\" cases haven't been tested (there aren't any .html files that use them).\n\n        // Reverse gammaCompress to get same value shader output as non-srgb formats:\n        shaderValue = gammaDecompress(shaderValue);\n        isOutputSrgb = true;\n        break;\n      default:\n        unreachable();\n    }\n    const shaderValueStr = shaderValue.toFixed(5);\n\n    function copyBufferToTexture(ctx: GPUCanvasContext) {\n      const rows = 2;\n      const bytesPerRow = 256;\n      const buffer = t.device.createBuffer({\n        mappedAtCreation: true,\n        size: rows * bytesPerRow,\n        usage: GPUBufferUsage.COPY_SRC,\n      });\n      const mapping = buffer.getMappedRange();\n      switch (format) {\n        case 'bgra8unorm':\n        case 'bgra8unorm-srgb':\n          {\n            const data = new Uint8Array(mapping);\n            data.set(new Uint8Array([0x00, 0x00, 0x7f, 0xff]), 0); // red\n            data.set(new Uint8Array([0x00, 0x7f, 0x00, 0xff]), 4); // green\n            data.set(new Uint8Array([0x7f, 0x00, 0x00, 0xff]), 256 + 0); // blue\n            data.set(new Uint8Array([0x00, 0x7f, 0x7f, 0xff]), 256 + 4); // yellow\n          }\n          break;\n        case 'rgba8unorm':\n        case 'rgba8unorm-srgb':\n          {\n            const data = new Uint8Array(mapping);\n            data.set(new Uint8Array([0x7f, 0x00, 0x00, 0xff]), 0); // red\n            data.set(new Uint8Array([0x00, 0x7f, 0x00, 0xff]), 4); // green\n            data.set(new Uint8Array([0x00, 0x00, 0x7f, 0xff]), 256 + 0); // blue\n            data.set(new Uint8Array([0x7f, 0x7f, 0x00, 0xff]), 256 + 4); // yellow\n          }\n          break;\n      }\n      buffer.unmap();\n\n      const encoder = t.device.createCommandEncoder();\n      encoder.copyBufferToTexture({ buffer, bytesPerRow }, { texture: ctx.getCurrentTexture() }, [\n        2,\n        2,\n        1,\n      ]);\n      t.device.queue.submit([encoder.finish()]);\n    }\n\n    function getImageBitmap(): Promise<ImageBitmap> {\n      const imageData = new ImageData(\n        /* prettier-ignore */ new Uint8ClampedArray([\n          0x7f, 0x00, 0x00, 0xff,\n          0x00, 0x7f, 0x00, 0xff,\n          0x00, 0x00, 0x7f, 0xff,\n          0x7f, 0x7f, 0x00, 0xff,\n        ]),\n        2,\n        2\n      );\n      return createImageBitmap(imageData);\n    }\n\n    function setupSrcTexture(imageBitmap: ImageBitmap): GPUTexture {\n      const [srcWidth, srcHeight] = [imageBitmap.width, imageBitmap.height];\n      const srcTexture = t.device.createTexture({\n        size: [srcWidth, srcHeight, 1],\n        format,\n        usage:\n          GPUTextureUsage.TEXTURE_BINDING |\n          GPUTextureUsage.RENDER_ATTACHMENT |\n          GPUTextureUsage.COPY_DST |\n          GPUTextureUsage.COPY_SRC,\n      });\n      t.device.queue.copyExternalImageToTexture({ source: imageBitmap }, { texture: srcTexture }, [\n        imageBitmap.width,\n        imageBitmap.height,\n      ]);\n      return srcTexture;\n    }\n\n    async function copyExternalImageToTexture(ctx: GPUCanvasContext) {\n      const imageBitmap = await getImageBitmap();\n      t.device.queue.copyExternalImageToTexture(\n        { source: imageBitmap },\n        { texture: ctx.getCurrentTexture() },\n        [imageBitmap.width, imageBitmap.height]\n      );\n    }\n\n    async function copyTextureToTexture(ctx: GPUCanvasContext) {\n      const imageBitmap = await getImageBitmap();\n      const srcTexture = setupSrcTexture(imageBitmap);\n\n      const encoder = t.device.createCommandEncoder();\n      encoder.copyTextureToTexture(\n        { texture: srcTexture, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n        { texture: ctx.getCurrentTexture(), mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n        [imageBitmap.width, imageBitmap.height, 1]\n      );\n      t.device.queue.submit([encoder.finish()]);\n    }\n\n    async function DrawTextureSample(ctx: GPUCanvasContext) {\n      const imageBitmap = await getImageBitmap();\n      const srcTexture = setupSrcTexture(imageBitmap);\n\n      const pipeline = t.device.createRenderPipeline({\n        vertex: {\n          module: t.device.createShaderModule({\n            code: `\nstruct VertexOutput {\n  @builtin(position) Position : vec4<f32>;\n  @location(0) fragUV : vec2<f32>;\n};\n\n@stage(vertex)\nfn main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n  var pos = array<vec2<f32>, 6>(\n      vec2<f32>( 1.0,  1.0),\n      vec2<f32>( 1.0, -1.0),\n      vec2<f32>(-1.0, -1.0),\n      vec2<f32>( 1.0,  1.0),\n      vec2<f32>(-1.0, -1.0),\n      vec2<f32>(-1.0,  1.0));\n\n  var uv = array<vec2<f32>, 6>(\n      vec2<f32>(1.0, 0.0),\n      vec2<f32>(1.0, 1.0),\n      vec2<f32>(0.0, 1.0),\n      vec2<f32>(1.0, 0.0),\n      vec2<f32>(0.0, 1.0),\n      vec2<f32>(0.0, 0.0));\n\n  var output : VertexOutput;\n  output.Position = vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n  output.fragUV = uv[VertexIndex];\n  return output;\n}\n            `,\n          }),\n          entryPoint: 'main',\n        },\n        fragment: {\n          module: t.device.createShaderModule({\n            // NOTE: \"-srgb\" cases haven't been tested (there aren't any .html files that use them).\n            code: `\n@group(0) @binding(0) var mySampler: sampler;\n@group(0) @binding(1) var myTexture: texture_2d<f32>;\n\nfn gammaDecompress(n: f32) -> f32 {\n  var r = n;\n  if (r <= 0.04045) {\n    r = r * 25.0 / 323.0;\n  } else {\n    r = pow((200.0 * r + 11.0) / 121.0, 12.0 / 5.0);\n  }\n  r = clamp(r, 0.0, 1.0);\n  return r;\n}\n\n@stage(fragment)\nfn srgbMain(@location(0) fragUV: vec2<f32>) -> @location(0) vec4<f32> {\n  var result = textureSample(myTexture, mySampler, fragUV);\n  result.r = gammaDecompress(result.r);\n  result.g = gammaDecompress(result.g);\n  result.b = gammaDecompress(result.b);\n  return result;\n}\n\n@stage(fragment)\nfn linearMain(@location(0) fragUV: vec2<f32>) -> @location(0) vec4<f32> {\n  return textureSample(myTexture, mySampler, fragUV);\n}\n            `,\n          }),\n          entryPoint: isOutputSrgb ? 'srgbMain' : 'linearMain',\n          targets: [{ format }],\n        },\n        primitive: {\n          topology: 'triangle-list',\n        },\n      });\n\n      const sampler = t.device.createSampler({\n        magFilter: 'nearest',\n        minFilter: 'nearest',\n      });\n\n      const uniformBindGroup = t.device.createBindGroup({\n        layout: pipeline.getBindGroupLayout(0),\n        entries: [\n          {\n            binding: 0,\n            resource: sampler,\n          },\n          {\n            binding: 1,\n            resource: srcTexture.createView(),\n          },\n        ],\n      });\n\n      const renderPassDescriptor: GPURenderPassDescriptor = {\n        colorAttachments: [\n          {\n            view: ctx.getCurrentTexture().createView(),\n\n            loadValue: { r: 0.5, g: 0.5, b: 0.5, a: 1.0 },\n            storeOp: 'store',\n          },\n        ],\n      };\n\n      const commandEncoder = t.device.createCommandEncoder();\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n      passEncoder.setPipeline(pipeline);\n      passEncoder.setBindGroup(0, uniformBindGroup);\n      passEncoder.draw(6, 1, 0, 0);\n      passEncoder.endPass();\n      t.device.queue.submit([commandEncoder.finish()]);\n    }\n\n    function DrawVertexColor(ctx: GPUCanvasContext) {\n      const pipeline = t.device.createRenderPipeline({\n        vertex: {\n          module: t.device.createShaderModule({\n            code: `\nstruct VertexOutput {\n  @builtin(position) Position : vec4<f32>;\n  @location(0) fragColor : vec4<f32>;\n};\n\n@stage(vertex)\nfn main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n  var pos = array<vec2<f32>, 6>(\n      vec2<f32>( 0.5,  0.5),\n      vec2<f32>( 0.5, -0.5),\n      vec2<f32>(-0.5, -0.5),\n      vec2<f32>( 0.5,  0.5),\n      vec2<f32>(-0.5, -0.5),\n      vec2<f32>(-0.5,  0.5));\n\n  var offset = array<vec2<f32>, 4>(\n    vec2<f32>( -0.5,  0.5),\n    vec2<f32>( 0.5, 0.5),\n    vec2<f32>(-0.5, -0.5),\n    vec2<f32>( 0.5,  -0.5));\n\n  var color = array<vec4<f32>, 4>(\n      vec4<f32>(${shaderValueStr}, 0.0, 0.0, 1.0),\n      vec4<f32>(0.0, ${shaderValueStr}, 0.0, 1.0),\n      vec4<f32>(0.0, 0.0, ${shaderValueStr}, 1.0),\n      vec4<f32>(${shaderValueStr}, ${shaderValueStr}, 0.0, 1.0));\n\n  var output : VertexOutput;\n  output.Position = vec4<f32>(pos[VertexIndex % 6u] + offset[VertexIndex / 6u], 0.0, 1.0);\n  output.fragColor = color[VertexIndex / 6u];\n  return output;\n}\n            `,\n          }),\n          entryPoint: 'main',\n        },\n        fragment: {\n          module: t.device.createShaderModule({\n            code: `\n@stage(fragment)\nfn main(@location(0) fragColor: vec4<f32>) -> @location(0) vec4<f32> {\n  return fragColor;\n}\n            `,\n          }),\n          entryPoint: 'main',\n          targets: [{ format }],\n        },\n        primitive: {\n          topology: 'triangle-list',\n        },\n      });\n\n      const renderPassDescriptor: GPURenderPassDescriptor = {\n        colorAttachments: [\n          {\n            view: ctx.getCurrentTexture().createView(),\n\n            loadValue: { r: 0.5, g: 0.5, b: 0.5, a: 1.0 },\n            storeOp: 'store',\n          },\n        ],\n      };\n\n      const commandEncoder = t.device.createCommandEncoder();\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n      passEncoder.setPipeline(pipeline);\n      passEncoder.draw(24, 1, 0, 0);\n      passEncoder.endPass();\n      t.device.queue.submit([commandEncoder.finish()]);\n    }\n\n    function DrawFragcoord(ctx: GPUCanvasContext) {\n      const pipeline = t.device.createRenderPipeline({\n        vertex: {\n          module: t.device.createShaderModule({\n            code: `\nstruct VertexOutput {\n  @builtin(position) Position : vec4<f32>;\n};\n\n@stage(vertex)\nfn main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n  var pos = array<vec2<f32>, 6>(\n      vec2<f32>( 1.0,  1.0),\n      vec2<f32>( 1.0, -1.0),\n      vec2<f32>(-1.0, -1.0),\n      vec2<f32>( 1.0,  1.0),\n      vec2<f32>(-1.0, -1.0),\n      vec2<f32>(-1.0,  1.0));\n\n  var output : VertexOutput;\n  output.Position = vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n  return output;\n}\n            `,\n          }),\n          entryPoint: 'main',\n        },\n        fragment: {\n          module: t.device.createShaderModule({\n            code: `\n@group(0) @binding(0) var mySampler: sampler;\n@group(0) @binding(1) var myTexture: texture_2d<f32>;\n\n@stage(fragment)\nfn main(@builtin(position) fragcoord: vec4<f32>) -> @location(0) vec4<f32> {\n  var coord = vec2<u32>(floor(fragcoord.xy));\n  var color = vec4<f32>(0.0, 0.0, 0.0, 1.0);\n  if (coord.x == 0u) {\n    if (coord.y == 0u) {\n      color.r = ${shaderValueStr};\n    } else {\n      color.b = ${shaderValueStr};\n    }\n  } else {\n    if (coord.y == 0u) {\n      color.g = ${shaderValueStr};\n    } else {\n      color.r = ${shaderValueStr};\n      color.g = ${shaderValueStr};\n    }\n  }\n  return color;\n}\n            `,\n          }),\n          entryPoint: 'main',\n          targets: [{ format }],\n        },\n        primitive: {\n          topology: 'triangle-list',\n        },\n      });\n\n      const renderPassDescriptor: GPURenderPassDescriptor = {\n        colorAttachments: [\n          {\n            view: ctx.getCurrentTexture().createView(),\n\n            loadValue: { r: 0.5, g: 0.5, b: 0.5, a: 1.0 },\n            storeOp: 'store',\n          },\n        ],\n      };\n\n      const commandEncoder = t.device.createCommandEncoder();\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n      passEncoder.setPipeline(pipeline);\n      passEncoder.draw(6, 1, 0, 0);\n      passEncoder.endPass();\n      t.device.queue.submit([commandEncoder.finish()]);\n    }\n\n    for (const { cvs, writeCanvasMethod } of targets) {\n      const ctx = cvs.getContext('webgpu');\n      assert(ctx !== null, 'Failed to get WebGPU context from canvas');\n\n      ctx.configure({\n        device: t.device,\n        format,\n        usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n      });\n\n      switch (writeCanvasMethod) {\n        case 'copyBufferToTexture':\n          copyBufferToTexture(ctx);\n          break;\n        case 'copyExternalImageToTexture':\n          await copyExternalImageToTexture(ctx);\n          break;\n        case 'copyTextureToTexture':\n          await copyTextureToTexture(ctx);\n          break;\n        case 'DrawTextureSample':\n          await DrawTextureSample(ctx);\n          break;\n        case 'DrawVertexColor':\n          DrawVertexColor(ctx);\n          break;\n        case 'DrawFragcoord':\n          DrawFragcoord(ctx);\n          break;\n        default:\n          unreachable();\n      }\n    }\n  });\n}\n"],"file":"canvas_complex.html.js"}