{"version":3,"sources":["../../../../src/webgpu/web_platform/reftests/canvas_composite_alpha.html.ts"],"names":["assert","unreachable","runRefTest","run","format","compositingAlphaMode","t","ctx","cvs","getContext","a","toFixed","configure","device","usage","GPUTextureUsage","RENDER_ATTACHMENT","pipeline","createRenderPipeline","vertex","module","createShaderModule","code","entryPoint","fragment","targets","blend","undefined","color","srcFactor","dstFactor","operation","alpha","primitive","topology","renderPassDescriptor","colorAttachments","view","getCurrentTexture","createView","loadValue","r","g","b","storeOp","commandEncoder","createCommandEncoder","passEncoder","beginRenderPass","setPipeline","draw","endPass","queue","submit","finish"],"mappings":";AAAA;AACA,GADA,SAASA,MAAT,EAAiBC,WAAjB,QAAoC,8BAApC,CAEA,SAASC,UAAT,QAA2B,mBAA3B;;AAEA;;;AAGA,OAAO,SAASC,GAAT,CAAaC,MAAb,EAAuCC,oBAAvC,EAA4F;AACjGH,EAAAA,UAAU,CAAC,MAAMI,CAAN,IAAW;AACpB,UAAMC,GAAG,GAAGC,GAAG,CAACC,UAAJ,CAAe,QAAf,CAAZ;AACAT,IAAAA,MAAM,CAACO,GAAG,KAAK,IAAT,EAAe,0CAAf,CAAN;;AAEA,YAAQH,MAAR;AACE,WAAK,YAAL;AACA,WAAK,iBAAL;AACA,WAAK,YAAL;AACA,WAAK,iBAAL;AACE;AACF;AACEH,QAAAA,WAAW,GAPf;;;AAUA;AACA,UAAMS,CAAC,GAAGL,oBAAoB,KAAK,QAAzB,GAAqC,GAAD,CAAMM,OAAN,CAAc,CAAd,CAApC,GAAwD,GAAD,CAAMA,OAAN,CAAc,CAAd,CAAjE;;AAEAJ,IAAAA,GAAG,CAACK,SAAJ,CAAc;AACZC,MAAAA,MAAM,EAAEP,CAAC,CAACO,MADE;AAEZT,MAAAA,MAFY;AAGZU,MAAAA,KAAK,EAAEC,eAAe,CAACC,iBAHX;AAIZX,MAAAA,oBAJY,EAAd;;;AAOA,UAAMY,QAAQ,GAAGX,CAAC,CAACO,MAAF,CAASK,oBAAT,CAA8B;AAC7CC,MAAAA,MAAM,EAAE;AACNC,QAAAA,MAAM,EAAEd,CAAC,CAACO,MAAF,CAASQ,kBAAT,CAA4B;AAClCC,UAAAA,IAAI,EAAG;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmCZ,CAAE;AACrC,mCAAmCA,CAAE;AACrC,mCAAmCA,CAAE;AACrC,uCAAuCA,CAAE;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,SAlC4C,EAA5B,CADF;;AAqCNa,QAAAA,UAAU,EAAE,MArCN,EADqC;;AAwC7CC,MAAAA,QAAQ,EAAE;AACRJ,QAAAA,MAAM,EAAEd,CAAC,CAACO,MAAF,CAASQ,kBAAT,CAA4B;AAClCC,UAAAA,IAAI,EAAG;AACjB;AACA;AACA;AACA;AACA,SAN4C,EAA5B,CADA;;AASRC,QAAAA,UAAU,EAAE,MATJ;AAURE,QAAAA,OAAO,EAAE;AACP;AACErB,UAAAA,MADF;AAEEsB,UAAAA,KAAK;AACHrB,UAAAA,oBAAoB,KAAK,QAAzB;AACIsB,UAAAA,SADJ;AAEI;AACE;AACA;AACA;AACAC,YAAAA,KAAK,EAAE;AACLC,cAAAA,SAAS,EAAE,WADN;AAELC,cAAAA,SAAS,EAAE,qBAFN;AAGLC,cAAAA,SAAS,EAAE,KAHN,EAJT;;AASEC,YAAAA,KAAK,EAAE;AACLH,cAAAA,SAAS,EAAE,KADN;AAELC,cAAAA,SAAS,EAAE,qBAFN;AAGLC,cAAAA,SAAS,EAAE,KAHN,EATT,EALR,EADO,CAVD,EAxCmC;;;;;;AA0E7CE,MAAAA,SAAS,EAAE;AACTC,QAAAA,QAAQ,EAAE,eADD,EA1EkC,EAA9B,CAAjB;;;;AA+EA,UAAMC,oBAA6C,GAAG;AACpDC,MAAAA,gBAAgB,EAAE;AAChB;AACEC,QAAAA,IAAI,EAAE9B,GAAG,CAAC+B,iBAAJ,GAAwBC,UAAxB,EADR;;AAGEC,QAAAA,SAAS,EAAE,EAAEC,CAAC,EAAE,GAAL,EAAUC,CAAC,EAAE,GAAb,EAAkBC,CAAC,EAAE,GAArB,EAA0BjC,CAAC,EAAE,GAA7B,EAHb;AAIEkC,QAAAA,OAAO,EAAE,OAJX,EADgB,CADkC,EAAtD;;;;;AAWA,UAAMC,cAAc,GAAGvC,CAAC,CAACO,MAAF,CAASiC,oBAAT,EAAvB;AACA,UAAMC,WAAW,GAAGF,cAAc,CAACG,eAAf,CAA+Bb,oBAA/B,CAApB;AACAY,IAAAA,WAAW,CAACE,WAAZ,CAAwBhC,QAAxB;AACA8B,IAAAA,WAAW,CAACG,IAAZ,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B;AACAH,IAAAA,WAAW,CAACG,IAAZ,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B;AACAH,IAAAA,WAAW,CAACG,IAAZ,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,EAAvB,EAA2B,CAA3B;AACAH,IAAAA,WAAW,CAACG,IAAZ,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,EAAvB,EAA2B,CAA3B;AACAH,IAAAA,WAAW,CAACI,OAAZ;AACA7C,IAAAA,CAAC,CAACO,MAAF,CAASuC,KAAT,CAAeC,MAAf,CAAsB,CAACR,cAAc,CAACS,MAAf,EAAD,CAAtB;AACD,GA3HS,CAAV;AA4HD","sourcesContent":["import { assert, unreachable } from '../../../common/util/util.js';\n\nimport { runRefTest } from './gpu_ref_test.js';\n\n// <canvas> element from html page\ndeclare const cvs: HTMLCanvasElement;\n\nexport function run(format: GPUTextureFormat, compositingAlphaMode: GPUCanvasCompositingAlphaMode) {\n  runRefTest(async t => {\n    const ctx = cvs.getContext('webgpu');\n    assert(ctx !== null, 'Failed to get WebGPU context from canvas');\n\n    switch (format) {\n      case 'bgra8unorm':\n      case 'bgra8unorm-srgb':\n      case 'rgba8unorm':\n      case 'rgba8unorm-srgb':\n        break;\n      default:\n        unreachable();\n    }\n\n    // This is mimic globalAlpha in 2d context blending behavior\n    const a = compositingAlphaMode === 'opaque' ? (1.0).toFixed(1) : (0.5).toFixed(1);\n\n    ctx.configure({\n      device: t.device,\n      format,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      compositingAlphaMode,\n    });\n\n    const pipeline = t.device.createRenderPipeline({\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\nstruct VertexOutput {\n@builtin(position) Position : vec4<f32>;\n@location(0) fragColor : vec4<f32>;\n};\n\n@stage(vertex)\nfn main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\nvar pos = array<vec2<f32>, 6>(\n    vec2<f32>( 0.75,  0.75),\n    vec2<f32>( 0.75, -0.75),\n    vec2<f32>(-0.75, -0.75),\n    vec2<f32>( 0.75,  0.75),\n    vec2<f32>(-0.75, -0.75),\n    vec2<f32>(-0.75,  0.75));\n\nvar offset = array<vec2<f32>, 4>(\nvec2<f32>( -0.125,  0.125),\nvec2<f32>( 0.125, 0.125),\nvec2<f32>(-0.125, -0.125),\nvec2<f32>( 0.125,  -0.125));\n\nvar color = array<vec4<f32>, 4>(\n    vec4<f32>(0.49804, 0.0, 0.0, ${a}),\n    vec4<f32>(0.0, 0.49804, 0.0, ${a}),\n    vec4<f32>(0.0, 0.0, 0.49804, ${a}),\n    vec4<f32>(0.49804, 0.49804, 0.0, ${a})); // 0.49804 -> 0x7f\n\nvar output : VertexOutput;\noutput.Position = vec4<f32>(pos[VertexIndex % 6u] + offset[VertexIndex / 6u], 0.0, 1.0);\noutput.fragColor = color[VertexIndex / 6u];\nreturn output;\n}\n        `,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `\n@stage(fragment)\nfn main(@location(0) fragColor: vec4<f32>) -> @location(0) vec4<f32> {\nreturn fragColor;\n}\n        `,\n        }),\n        entryPoint: 'main',\n        targets: [\n          {\n            format,\n            blend:\n              compositingAlphaMode === 'opaque'\n                ? undefined\n                : {\n                    // The blending behavior here is to mimic 2d context blending behavior\n                    // of drawing rects in order\n                    // https://drafts.fxtf.org/compositing/#porterduffcompositingoperators_srcover\n                    color: {\n                      srcFactor: 'src-alpha',\n                      dstFactor: 'one-minus-src-alpha',\n                      operation: 'add',\n                    },\n                    alpha: {\n                      srcFactor: 'one',\n                      dstFactor: 'one-minus-src-alpha',\n                      operation: 'add',\n                    },\n                  },\n          },\n        ],\n      },\n      primitive: {\n        topology: 'triangle-list',\n      },\n    });\n\n    const renderPassDescriptor: GPURenderPassDescriptor = {\n      colorAttachments: [\n        {\n          view: ctx.getCurrentTexture().createView(),\n\n          loadValue: { r: 0.0, g: 0.0, b: 0.0, a: 0.0 },\n          storeOp: 'store',\n        },\n      ],\n    };\n\n    const commandEncoder = t.device.createCommandEncoder();\n    const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n    passEncoder.setPipeline(pipeline);\n    passEncoder.draw(6, 1, 0, 0);\n    passEncoder.draw(6, 1, 6, 0);\n    passEncoder.draw(6, 1, 12, 0);\n    passEncoder.draw(6, 1, 18, 0);\n    passEncoder.endPass();\n    t.device.queue.submit([commandEncoder.finish()]);\n  });\n}\n"],"file":"canvas_composite_alpha.html.js"}