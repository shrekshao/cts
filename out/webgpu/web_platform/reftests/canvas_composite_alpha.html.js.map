{"version":3,"file":"canvas_composite_alpha.html.js","names":["assert","unreachable","runRefTest","run","format","alphaMode","writeCanvasMethod","t","ctx","cvs","getContext","GPUCanvasContext","usage","GPUTextureUsage","RENDER_ATTACHMENT","COPY_DST","configure","device","kBlendStateSourceOver","color","srcFactor","dstFactor","operation","alpha","pipeline","createRenderPipeline","layout","vertex","module","createShaderModule","code","entryPoint","fragment","targets","blend","premultiplied","opaque","undefined","primitive","topology","renderTarget","getCurrentTexture","createTexture","size","canvas","width","height","COPY_SRC","renderPassDescriptor","colorAttachments","view","createView","clearValue","r","g","b","a","loadOp","storeOp","commandEncoder","createCommandEncoder","passEncoder","beginRenderPass","setPipeline","draw","end","copyTextureToTexture","texture","queue","submit","finish"],"sources":["../../../../src/webgpu/web_platform/reftests/canvas_composite_alpha.html.ts"],"sourcesContent":["import { assert, unreachable } from '../../../common/util/util.js';\n\nimport { runRefTest } from './gpu_ref_test.js';\n\n// <canvas> element from html page\ndeclare const cvs: HTMLCanvasElement;\n\ntype WriteCanvasMethod = 'draw' | 'copy';\n\nexport function run(\n  format: GPUTextureFormat,\n  alphaMode: GPUCanvasAlphaMode,\n  writeCanvasMethod: WriteCanvasMethod\n) {\n  runRefTest(async t => {\n    const ctx = cvs.getContext('webgpu');\n    assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n    switch (format) {\n      case 'bgra8unorm':\n      case 'bgra8unorm-srgb':\n      case 'rgba8unorm':\n      case 'rgba8unorm-srgb':\n      case 'rgba16float':\n        break;\n      default:\n        unreachable();\n    }\n\n    let usage = 0;\n    switch (writeCanvasMethod) {\n      case 'draw':\n        usage = GPUTextureUsage.RENDER_ATTACHMENT;\n        break;\n      case 'copy':\n        usage = GPUTextureUsage.COPY_DST;\n        break;\n    }\n    ctx.configure({\n      device: t.device,\n      format,\n      usage,\n      alphaMode,\n    });\n\n    // The blending behavior here is to mimic 2d context blending behavior\n    // of drawing rects in order\n    // https://drafts.fxtf.org/compositing/#porterduffcompositingoperators_srcover\n    const kBlendStateSourceOver = {\n      color: {\n        srcFactor: 'src-alpha',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n      },\n      alpha: {\n        srcFactor: 'one',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n      },\n    } as const;\n\n    const pipeline = t.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\nstruct VertexOutput {\n@builtin(position) Position : vec4<f32>,\n@location(0) fragColor : vec4<f32>,\n}\n\n@vertex\nfn main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\nvar pos = array<vec2<f32>, 6>(\n    vec2<f32>( 0.75,  0.75),\n    vec2<f32>( 0.75, -0.75),\n    vec2<f32>(-0.75, -0.75),\n    vec2<f32>( 0.75,  0.75),\n    vec2<f32>(-0.75, -0.75),\n    vec2<f32>(-0.75,  0.75));\n\nvar offset = array<vec2<f32>, 4>(\nvec2<f32>( -0.25,  0.25),\nvec2<f32>( 0.25, 0.25),\nvec2<f32>(-0.25, -0.25),\nvec2<f32>( 0.25,  -0.25));\n\n// Alpha channel value is set to 0.5 regardless of the canvas alpha mode.\n// For 'opaque' mode, it shouldn't affect the end result, as the alpha channel should always get cleared to 1.0.\nvar color = array<vec4<f32>, 4>(\n    vec4<f32>(0.4, 0.0, 0.0, 0.5),\n    vec4<f32>(0.0, 0.4, 0.0, 0.5),\n    vec4<f32>(0.0, 0.0, 0.4, 0.5),\n    vec4<f32>(0.4, 0.4, 0.0, 0.5)); // 0.4 -> 0x66\n\nvar output : VertexOutput;\noutput.Position = vec4<f32>(pos[VertexIndex % 6u] + offset[VertexIndex / 6u], 0.0, 1.0);\noutput.fragColor = color[VertexIndex / 6u];\nreturn output;\n}\n        `,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `\n@fragment\nfn main(@location(0) fragColor: vec4<f32>) -> @location(0) vec4<f32> {\nreturn fragColor;\n}\n        `,\n        }),\n        entryPoint: 'main',\n        targets: [\n          {\n            format,\n            blend: { premultiplied: kBlendStateSourceOver, opaque: undefined }[alphaMode],\n          },\n        ],\n      },\n      primitive: {\n        topology: 'triangle-list',\n      },\n    });\n\n    let renderTarget: GPUTexture;\n    switch (writeCanvasMethod) {\n      case 'draw':\n        renderTarget = ctx.getCurrentTexture();\n        break;\n      case 'copy':\n        renderTarget = t.device.createTexture({\n          size: [ctx.canvas.width, ctx.canvas.height],\n          format,\n          usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n        });\n        break;\n    }\n    const renderPassDescriptor: GPURenderPassDescriptor = {\n      colorAttachments: [\n        {\n          view: renderTarget.createView(),\n          clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 0.0 },\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    };\n\n    const commandEncoder = t.device.createCommandEncoder();\n    const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n    passEncoder.setPipeline(pipeline);\n    passEncoder.draw(6, 1, 0, 0);\n    passEncoder.draw(6, 1, 6, 0);\n    passEncoder.draw(6, 1, 12, 0);\n    passEncoder.draw(6, 1, 18, 0);\n    passEncoder.end();\n\n    switch (writeCanvasMethod) {\n      case 'draw':\n        break;\n      case 'copy':\n        commandEncoder.copyTextureToTexture(\n          {\n            texture: renderTarget,\n          },\n          {\n            texture: ctx.getCurrentTexture(),\n          },\n          [ctx.canvas.width, ctx.canvas.height]\n        );\n        break;\n    }\n\n    t.device.queue.submit([commandEncoder.finish()]);\n  });\n}\n"],"mappings":"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"}