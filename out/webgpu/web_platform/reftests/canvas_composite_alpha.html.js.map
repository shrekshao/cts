{"version":3,"sources":["../../../../src/webgpu/web_platform/reftests/canvas_composite_alpha.html.ts"],"names":["assert","unreachable","runRefTest","run","format","alphaMode","writeCanvasMethod","t","ctx","cvs","getContext","GPUCanvasContext","alphaFromShader","premultiplied","opaque","usage","GPUTextureUsage","RENDER_ATTACHMENT","COPY_DST","configure","device","kBlendStateSourceOver","color","srcFactor","dstFactor","operation","alpha","pipeline","createRenderPipeline","layout","vertex","module","createShaderModule","code","entryPoint","fragment","targets","blend","undefined","primitive","topology","renderTarget","getCurrentTexture","createTexture","size","canvas","width","height","COPY_SRC","renderPassDescriptor","colorAttachments","view","createView","clearValue","r","g","b","a","loadOp","storeOp","commandEncoder","createCommandEncoder","passEncoder","beginRenderPass","setPipeline","draw","end","copyTextureToTexture","texture","queue","submit","finish"],"mappings":"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","sourcesContent":["import { assert, unreachable } from '../../../common/util/util.js';\n\nimport { runRefTest } from './gpu_ref_test.js';\n\n// <canvas> element from html page\ndeclare const cvs: HTMLCanvasElement;\n\ntype WriteCanvasMethod = 'draw' | 'copy';\n\nexport function run(\n  format: GPUTextureFormat,\n  alphaMode: GPUCanvasAlphaMode,\n  writeCanvasMethod: WriteCanvasMethod\n) {\n  runRefTest(async t => {\n    const ctx = cvs.getContext('webgpu');\n    assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n    switch (format) {\n      case 'bgra8unorm':\n      case 'bgra8unorm-srgb':\n      case 'rgba8unorm':\n      case 'rgba8unorm-srgb':\n      case 'rgba16float':\n        break;\n      default:\n        unreachable();\n    }\n\n    // This is mimic globalAlpha in 2d context blending behavior\n    const alphaFromShader = { premultiplied: '0.5', opaque: '1.0' }[alphaMode];\n\n    let usage = 0;\n    switch (writeCanvasMethod) {\n      case 'draw':\n        usage = GPUTextureUsage.RENDER_ATTACHMENT;\n        break;\n      case 'copy':\n        usage = GPUTextureUsage.COPY_DST;\n        break;\n    }\n    ctx.configure({\n      device: t.device,\n      format,\n      usage,\n      alphaMode,\n    });\n\n    // The blending behavior here is to mimic 2d context blending behavior\n    // of drawing rects in order\n    // https://drafts.fxtf.org/compositing/#porterduffcompositingoperators_srcover\n    const kBlendStateSourceOver = {\n      color: {\n        srcFactor: 'src-alpha',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n      },\n      alpha: {\n        srcFactor: 'one',\n        dstFactor: 'one-minus-src-alpha',\n        operation: 'add',\n      },\n    } as const;\n\n    const pipeline = t.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module: t.device.createShaderModule({\n          code: `\nstruct VertexOutput {\n@builtin(position) Position : vec4<f32>,\n@location(0) fragColor : vec4<f32>,\n}\n\n@vertex\nfn main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\nvar pos = array<vec2<f32>, 6>(\n    vec2<f32>( 0.75,  0.75),\n    vec2<f32>( 0.75, -0.75),\n    vec2<f32>(-0.75, -0.75),\n    vec2<f32>( 0.75,  0.75),\n    vec2<f32>(-0.75, -0.75),\n    vec2<f32>(-0.75,  0.75));\n\nvar offset = array<vec2<f32>, 4>(\nvec2<f32>( -0.25,  0.25),\nvec2<f32>( 0.25, 0.25),\nvec2<f32>(-0.25, -0.25),\nvec2<f32>( 0.25,  -0.25));\n\nvar color = array<vec4<f32>, 4>(\n    vec4<f32>(0.4, 0.0, 0.0, ${alphaFromShader}),\n    vec4<f32>(0.0, 0.4, 0.0, ${alphaFromShader}),\n    vec4<f32>(0.0, 0.0, 0.4, ${alphaFromShader}),\n    vec4<f32>(0.4, 0.4, 0.0, ${alphaFromShader})); // 0.4 -> 0x66\n\nvar output : VertexOutput;\noutput.Position = vec4<f32>(pos[VertexIndex % 6u] + offset[VertexIndex / 6u], 0.0, 1.0);\noutput.fragColor = color[VertexIndex / 6u];\nreturn output;\n}\n        `,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: t.device.createShaderModule({\n          code: `\n@fragment\nfn main(@location(0) fragColor: vec4<f32>) -> @location(0) vec4<f32> {\nreturn fragColor;\n}\n        `,\n        }),\n        entryPoint: 'main',\n        targets: [\n          {\n            format,\n            blend: { premultiplied: kBlendStateSourceOver, opaque: undefined }[alphaMode],\n          },\n        ],\n      },\n      primitive: {\n        topology: 'triangle-list',\n      },\n    });\n\n    let renderTarget: GPUTexture;\n    switch (writeCanvasMethod) {\n      case 'draw':\n        renderTarget = ctx.getCurrentTexture();\n        break;\n      case 'copy':\n        renderTarget = t.device.createTexture({\n          size: [ctx.canvas.width, ctx.canvas.height],\n          format,\n          usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n        });\n        break;\n    }\n    const renderPassDescriptor: GPURenderPassDescriptor = {\n      colorAttachments: [\n        {\n          view: renderTarget.createView(),\n          clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 0.0 },\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    };\n\n    const commandEncoder = t.device.createCommandEncoder();\n    const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n    passEncoder.setPipeline(pipeline);\n    passEncoder.draw(6, 1, 0, 0);\n    passEncoder.draw(6, 1, 6, 0);\n    passEncoder.draw(6, 1, 12, 0);\n    passEncoder.draw(6, 1, 18, 0);\n    passEncoder.end();\n\n    switch (writeCanvasMethod) {\n      case 'draw':\n        break;\n      case 'copy':\n        commandEncoder.copyTextureToTexture(\n          {\n            texture: renderTarget,\n          },\n          {\n            texture: ctx.getCurrentTexture(),\n          },\n          [ctx.canvas.width, ctx.canvas.height]\n        );\n        break;\n    }\n\n    t.device.queue.submit([commandEncoder.finish()]);\n  });\n}\n"],"file":"canvas_composite_alpha.html.js"}