{"version":3,"sources":["../../../../src/webgpu/web_platform/reftests/canvas_clear.html.ts"],"names":["runRefTest","t","draw","canvasId","format","canvas","document","getElementById","ctx","getContext","configure","device","colorAttachment","getCurrentTexture","colorAttachmentView","createView","encoder","createCommandEncoder","pass","beginRenderPass","colorAttachments","view","clearValue","r","g","b","a","loadOp","storeOp","end","queue","submit","finish"],"mappings":";AAAA;AACA,GADA,SAASA,UAAT,QAA2B,mBAA3B,CAEAA,UAAU,CAAC,OAAMC,CAAN,KAAW;AACpB,WAASC,IAAT,CAAcC,QAAd,EAAgCC,MAAhC,EAA0D;AACxD,UAAMC,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwBJ,QAAxB,CAAf;;AAEA,UAAMK,GAAG,GAAIH,MAAM,CAACI,UAAP,CAAkB,QAAlB,CAAb;AACAD,IAAAA,GAAG,CAACE,SAAJ,CAAc;AACZC,MAAAA,MAAM,EAAEV,CAAC,CAACU,MADE;AAEZP,MAAAA,MAFY,EAAd;;;AAKA,UAAMQ,eAAe,GAAGJ,GAAG,CAACK,iBAAJ,EAAxB;AACA,UAAMC,mBAAmB,GAAGF,eAAe,CAACG,UAAhB,EAA5B;;AAEA,UAAMC,OAAO,GAAGf,CAAC,CAACU,MAAF,CAASM,oBAAT,EAAhB;AACA,UAAMC,IAAI,GAAGF,OAAO,CAACG,eAAR,CAAwB;AACnCC,MAAAA,gBAAgB,EAAE;AAChB;AACEC,QAAAA,IAAI,EAAEP,mBADR;AAEEQ,QAAAA,UAAU,EAAE,EAAEC,CAAC,EAAE,GAAL,EAAUC,CAAC,EAAE,GAAb,EAAkBC,CAAC,EAAE,GAArB,EAA0BC,CAAC,EAAE,GAA7B,EAFd;AAGEC,QAAAA,MAAM,EAAE,OAHV;AAIEC,QAAAA,OAAO,EAAE,OAJX,EADgB,CADiB,EAAxB,CAAb;;;;AAUAV,IAAAA,IAAI,CAACW,GAAL;AACA5B,IAAAA,CAAC,CAACU,MAAF,CAASmB,KAAT,CAAeC,MAAf,CAAsB,CAACf,OAAO,CAACgB,MAAR,EAAD,CAAtB;AACD;;AAED9B,EAAAA,IAAI,CAAC,MAAD,EAAS,YAAT,CAAJ;AACAA,EAAAA,IAAI,CAAC,MAAD,EAAS,YAAT,CAAJ;AACAA,EAAAA,IAAI,CAAC,MAAD,EAAS,aAAT,CAAJ;AACD,CA/BS,CAAV","sourcesContent":["import { runRefTest } from './gpu_ref_test.js';\n\nrunRefTest(async t => {\n  function draw(canvasId: string, format: GPUTextureFormat) {\n    const canvas = document.getElementById(canvasId) as HTMLCanvasElement;\n\n    const ctx = (canvas.getContext('webgpu') as unknown) as GPUCanvasContext;\n    ctx.configure({\n      device: t.device,\n      format,\n    });\n\n    const colorAttachment = ctx.getCurrentTexture();\n    const colorAttachmentView = colorAttachment.createView();\n\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: colorAttachmentView,\n          clearValue: { r: 0.4, g: 1.0, b: 0.0, a: 1.0 },\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    });\n    pass.end();\n    t.device.queue.submit([encoder.finish()]);\n  }\n\n  draw('cvs0', 'bgra8unorm');\n  draw('cvs1', 'rgba8unorm');\n  draw('cvs2', 'rgba16float');\n});\n"],"file":"canvas_clear.html.js"}