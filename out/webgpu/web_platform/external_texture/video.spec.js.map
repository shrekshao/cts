{"version":3,"file":"video.spec.js","names":["description","getResourcePath","makeTestGroup","makeTable","GPUTest","TextureTestMixin","startPlayingAndWaitForVideo","getVideoFrameFromVideoElement","waitForNextFrame","kHeight","kWidth","kFormat","kVideoInfo","undefined","kBt601Red","Uint8Array","kBt601Green","kBt601Blue","kBt601Yellow","kVideoExpectations","videoName","_redExpectation","_greenExpectation","_blueExpectation","_yellowExpectation","kVideoRotationExpectations","_topLeftExpectation","_topRightExpectation","_bottomLeftExpectation","_bottomRightExpectation","g","createExternalTextureSamplingTestPipeline","t","pipeline","device","createRenderPipeline","layout","vertex","module","createShaderModule","code","entryPoint","fragment","targets","format","primitive","topology","createExternalTextureSamplingTestBindGroup","source","linearSampler","createSampler","externalTexture","importExternalTexture","bindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","getVideoElement","sourceType","VideoFrame","skip","videoElement","document","createElement","videoInfo","canPlayType","mimeType","videoUrl","src","test","desc","params","u","combine","combineWithParams","fn","colorAttachment","createTexture","size","width","height","depthOrArrayLayers","usage","GPUTextureUsage","COPY_SRC","RENDER_ATTACHMENT","commandEncoder","createCommandEncoder","passEncoder","beginRenderPass","colorAttachments","view","createView","clearValue","r","b","a","loadOp","storeOp","setPipeline","setBindGroup","draw","end","queue","submit","finish","expectSinglePixelComparisonsAreOkInTexture","texture","coord","x","y","exp","close","passDescriptor","bindGroupLayout","createBindGroupLayout","visibility","GPUShaderStage","FRAGMENT","useExternalTexture","commandBuffer","expectGPUError","outputTexture","STORAGE_BINDING","createComputePipeline","compute","bg","encoder","pass","beginComputePass","dispatchWorkgroups"],"sources":["../../../../src/webgpu/web_platform/external_texture/video.spec.ts"],"sourcesContent":["export const description = `\nTests for external textures from HTMLVideoElement (and other video-type sources?).\n\n- videos with various encodings/formats (webm vp8, webm vp9, ogg theora, mp4), color spaces\n  (bt.601, bt.709, bt.2020)\n- TODO: enhance with more cases with crop, rotation, etc.\n\nTODO: consider whether external_texture and copyToTexture video tests should be in the same file\n`;\n\nimport { getResourcePath } from '../../../common/framework/resources.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { makeTable } from '../../../common/util/data_tables.js';\nimport { GPUTest, TextureTestMixin } from '../../gpu_test.js';\nimport {\n  startPlayingAndWaitForVideo,\n  getVideoFrameFromVideoElement,\n  waitForNextFrame,\n} from '../../web_platform/util.js';\n\nconst kHeight = 16;\nconst kWidth = 16;\nconst kFormat = 'rgba8unorm';\n\nconst kVideoInfo = /* prettier-ignore */ makeTable(\n                                ['mimeType'] as const,\n                                [undefined] as const, {\n  // All video names\n  'four-colors-vp8-bt601.webm'  : ['video/webm; codecs=vp8'],\n  'four-colors-theora-bt601.ogv': ['video/ogg; codecs=theora'],\n  'four-colors-h264-bt601.mp4'  : ['video/mp4; codecs=avc1.4d400c'],\n  'four-colors-vp9-bt601.webm'  : ['video/webm; codecs=vp9'],\n  'four-colors-vp9-bt709.webm'  : ['video/webm; codecs=vp9'],\n  'four-colors-vp9-bt2020.webm' : ['video/webm; codecs=vp9'],\n  'four-colors-h264-bt601-rotate-90.mp4'  : ['video/mp4; codecs=avc1.4d400c'],\n  'four-colors-h264-bt601-rotate-180.mp4'  : ['video/mp4; codecs=avc1.4d400c'],\n  'four-colors-h264-bt601-rotate-270.mp4'  : ['video/mp4; codecs=avc1.4d400c']\n} as const);\ntype VideoName = keyof typeof kVideoInfo;\n\n// The process to calculate these expected pixel values can be found:\n// https://github.com/gpuweb/cts/pull/2242#issuecomment-1430382811\nconst kBt601Red = new Uint8Array([248, 36, 0, 255]);\nconst kBt601Green = new Uint8Array([64, 252, 0, 255]);\nconst kBt601Blue = new Uint8Array([26, 35, 255, 255]);\nconst kBt601Yellow = new Uint8Array([254, 253, 0, 255]);\n\nconst kVideoExpectations = [\n  {\n    videoName: 'four-colors-vp8-bt601.webm',\n    _redExpectation: kBt601Red,\n    _greenExpectation: kBt601Green,\n    _blueExpectation: kBt601Blue,\n    _yellowExpectation: kBt601Yellow,\n  },\n  {\n    videoName: 'four-colors-theora-bt601.ogv',\n    _redExpectation: kBt601Red,\n    _greenExpectation: kBt601Green,\n    _blueExpectation: kBt601Blue,\n    _yellowExpectation: kBt601Yellow,\n  },\n  {\n    videoName: 'four-colors-h264-bt601.mp4',\n    _redExpectation: kBt601Red,\n    _greenExpectation: kBt601Green,\n    _blueExpectation: kBt601Blue,\n    _yellowExpectation: kBt601Yellow,\n  },\n  {\n    videoName: 'four-colors-vp9-bt601.webm',\n    _redExpectation: kBt601Red,\n    _greenExpectation: kBt601Green,\n    _blueExpectation: kBt601Blue,\n    _yellowExpectation: kBt601Yellow,\n  },\n  {\n    videoName: 'four-colors-vp9-bt709.webm',\n    _redExpectation: new Uint8Array([255, 0, 0, 255]),\n    _greenExpectation: new Uint8Array([0, 255, 0, 255]),\n    _blueExpectation: new Uint8Array([0, 0, 255, 255]),\n    _yellowExpectation: new Uint8Array([255, 255, 0, 255]),\n  },\n] as const;\n\nconst kVideoRotationExpectations = [\n  {\n    videoName: 'four-colors-h264-bt601-rotate-90.mp4',\n    _topLeftExpectation: kBt601Red,\n    _topRightExpectation: kBt601Green,\n    _bottomLeftExpectation: kBt601Yellow,\n    _bottomRightExpectation: kBt601Blue,\n  },\n  {\n    videoName: 'four-colors-h264-bt601-rotate-180.mp4',\n    _topLeftExpectation: kBt601Green,\n    _topRightExpectation: kBt601Blue,\n    _bottomLeftExpectation: kBt601Red,\n    _bottomRightExpectation: kBt601Yellow,\n  },\n  {\n    videoName: 'four-colors-h264-bt601-rotate-270.mp4',\n    _topLeftExpectation: kBt601Blue,\n    _topRightExpectation: kBt601Yellow,\n    _bottomLeftExpectation: kBt601Green,\n    _bottomRightExpectation: kBt601Red,\n  },\n] as const;\n\nexport const g = makeTestGroup(TextureTestMixin(GPUTest));\n\nfunction createExternalTextureSamplingTestPipeline(t: GPUTest): GPURenderPipeline {\n  const pipeline = t.device.createRenderPipeline({\n    layout: 'auto',\n    vertex: {\n      module: t.device.createShaderModule({\n        code: `\n        @vertex fn main(@builtin(vertex_index) VertexIndex : u32) -> @builtin(position) vec4<f32> {\n            var pos = array<vec4<f32>, 6>(\n              vec4<f32>( 1.0,  1.0, 0.0, 1.0),\n              vec4<f32>( 1.0, -1.0, 0.0, 1.0),\n              vec4<f32>(-1.0, -1.0, 0.0, 1.0),\n              vec4<f32>( 1.0,  1.0, 0.0, 1.0),\n              vec4<f32>(-1.0, -1.0, 0.0, 1.0),\n              vec4<f32>(-1.0,  1.0, 0.0, 1.0)\n            );\n            return pos[VertexIndex];\n        }\n        `,\n      }),\n      entryPoint: 'main',\n    },\n    fragment: {\n      module: t.device.createShaderModule({\n        code: `\n        @group(0) @binding(0) var s : sampler;\n        @group(0) @binding(1) var t : texture_external;\n\n        @fragment fn main(@builtin(position) FragCoord : vec4<f32>)\n                                 -> @location(0) vec4<f32> {\n            return textureSampleBaseClampToEdge(t, s, FragCoord.xy / vec2<f32>(16.0, 16.0));\n        }\n        `,\n      }),\n      entryPoint: 'main',\n      targets: [\n        {\n          format: kFormat,\n        },\n      ],\n    },\n    primitive: { topology: 'triangle-list' },\n  });\n\n  return pipeline;\n}\n\nfunction createExternalTextureSamplingTestBindGroup(\n  t: GPUTest,\n  source: HTMLVideoElement | VideoFrame,\n  pipeline: GPURenderPipeline\n): GPUBindGroup {\n  const linearSampler = t.device.createSampler();\n\n  const externalTexture = t.device.importExternalTexture({\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    source: source as any,\n  });\n\n  const bindGroup = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n      {\n        binding: 0,\n        resource: linearSampler,\n      },\n      {\n        binding: 1,\n        resource: externalTexture,\n      },\n    ],\n  });\n\n  return bindGroup;\n}\n\nfunction getVideoElement(\n  t: GPUTest,\n  sourceType: 'VideoElement' | 'VideoFrame',\n  videoName: VideoName\n): HTMLVideoElement {\n  if (sourceType === 'VideoFrame' && typeof VideoFrame === 'undefined') {\n    t.skip('WebCodec is not supported');\n  }\n\n  const videoElement = document.createElement('video');\n  const videoInfo = kVideoInfo[videoName];\n\n  if (videoElement.canPlayType(videoInfo.mimeType) === '') {\n    t.skip('Video codec is not supported');\n  }\n\n  const videoUrl = getResourcePath(videoName);\n  videoElement.src = videoUrl;\n\n  return videoElement;\n}\n\ng.test('importExternalTexture,sample')\n  .desc(\n    `\nTests that we can import an HTMLVideoElement/VideoFrame into a GPUExternalTexture, sample from it\nfor several combinations of video format and color space.\n`\n  )\n  .params(u =>\n    u //\n      .combine('sourceType', ['VideoElement', 'VideoFrame'] as const)\n      .combineWithParams(kVideoExpectations)\n  )\n  .fn(async t => {\n    const sourceType = t.params.sourceType;\n    const videoElement = getVideoElement(t, sourceType, t.params.videoName);\n\n    await startPlayingAndWaitForVideo(videoElement, async () => {\n      const source =\n        sourceType === 'VideoFrame'\n          ? await getVideoFrameFromVideoElement(t, videoElement)\n          : videoElement;\n\n      const colorAttachment = t.device.createTexture({\n        format: kFormat,\n        size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n        usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n      });\n\n      const pipeline = createExternalTextureSamplingTestPipeline(t);\n      const bindGroup = createExternalTextureSamplingTestBindGroup(t, source, pipeline);\n\n      const commandEncoder = t.device.createCommandEncoder();\n      const passEncoder = commandEncoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: colorAttachment.createView(),\n            clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n      });\n      passEncoder.setPipeline(pipeline);\n      passEncoder.setBindGroup(0, bindGroup);\n      passEncoder.draw(6);\n      passEncoder.end();\n      t.device.queue.submit([commandEncoder.finish()]);\n\n      // For validation, we sample a few pixels away from the edges to avoid compression\n      // artifacts.\n      t.expectSinglePixelComparisonsAreOkInTexture({ texture: colorAttachment }, [\n        // Top-left should be yellow.\n        { coord: { x: kWidth * 0.25, y: kHeight * 0.25 }, exp: t.params._yellowExpectation },\n        // Top-right should be red.\n        { coord: { x: kWidth * 0.75, y: kHeight * 0.25 }, exp: t.params._redExpectation },\n        // Bottom-left should be blue.\n        { coord: { x: kWidth * 0.25, y: kHeight * 0.75 }, exp: t.params._blueExpectation },\n        // Bottom-right should be green.\n        { coord: { x: kWidth * 0.75, y: kHeight * 0.75 }, exp: t.params._greenExpectation },\n      ]);\n\n      if (sourceType === 'VideoFrame') (source as VideoFrame).close();\n    });\n  });\n\ng.test('importExternalTexture,sampleWithRotationMetadata')\n  .desc(\n    `\nTests that when importing an HTMLVideoElement/VideoFrame into a GPUExternalTexture, sampling from\nit will honor rotation metadata.\n`\n  )\n  .params(u =>\n    u //\n      .combine('sourceType', ['VideoElement', 'VideoFrame'] as const)\n      .combineWithParams(kVideoRotationExpectations)\n  )\n  .fn(async t => {\n    const sourceType = t.params.sourceType;\n    const videoElement = getVideoElement(t, sourceType, t.params.videoName);\n\n    await startPlayingAndWaitForVideo(videoElement, async () => {\n      const source =\n        sourceType === 'VideoFrame'\n          ? await getVideoFrameFromVideoElement(t, videoElement)\n          : videoElement;\n\n      const colorAttachment = t.device.createTexture({\n        format: kFormat,\n        size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n        usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n      });\n\n      const pipeline = createExternalTextureSamplingTestPipeline(t);\n      const bindGroup = createExternalTextureSamplingTestBindGroup(t, source, pipeline);\n\n      const commandEncoder = t.device.createCommandEncoder();\n      const passEncoder = commandEncoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: colorAttachment.createView(),\n            clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n      });\n      passEncoder.setPipeline(pipeline);\n      passEncoder.setBindGroup(0, bindGroup);\n      passEncoder.draw(6);\n      passEncoder.end();\n      t.device.queue.submit([commandEncoder.finish()]);\n\n      // For validation, we sample a few pixels away from the edges to avoid compression\n      // artifacts.\n      t.expectSinglePixelComparisonsAreOkInTexture({ texture: colorAttachment }, [\n        { coord: { x: kWidth * 0.25, y: kHeight * 0.25 }, exp: t.params._topLeftExpectation },\n        { coord: { x: kWidth * 0.75, y: kHeight * 0.25 }, exp: t.params._topRightExpectation },\n        { coord: { x: kWidth * 0.25, y: kHeight * 0.75 }, exp: t.params._bottomLeftExpectation },\n        { coord: { x: kWidth * 0.75, y: kHeight * 0.75 }, exp: t.params._bottomRightExpectation },\n      ]);\n\n      if (sourceType === 'VideoFrame') (source as VideoFrame).close();\n    });\n  });\n\ng.test('importExternalTexture,expired')\n  .desc(\n    `\nTests that GPUExternalTexture.expired is false when HTMLVideoElement is not updated\nor VideoFrame(webcodec) is alive. And it will be changed to true when imported\nHTMLVideoElement is updated or imported VideoFrame is closed. Using expired\nGPUExternalTexture results in an error.\n\nTODO: Make this test work without requestVideoFrameCallback support (in waitForNextFrame).\n`\n  )\n  .params(u =>\n    u //\n      .combine('sourceType', ['VideoElement', 'VideoFrame'] as const)\n  )\n  .fn(async t => {\n    const sourceType = t.params.sourceType;\n    const videoElement = getVideoElement(t, sourceType, 'four-colors-vp9-bt601.webm');\n\n    if (!('requestVideoFrameCallback' in videoElement)) {\n      t.skip('HTMLVideoElement.requestVideoFrameCallback is not supported');\n    }\n\n    const colorAttachment = t.device.createTexture({\n      format: kFormat,\n      size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n    const passDescriptor = {\n      colorAttachments: [\n        {\n          view: colorAttachment.createView(),\n          clearValue: [0, 0, 0, 1],\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    } as const;\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [{ binding: 0, visibility: GPUShaderStage.FRAGMENT, externalTexture: {} }],\n    });\n\n    let bindGroup: GPUBindGroup;\n    const useExternalTexture = () => {\n      const commandEncoder = t.device.createCommandEncoder();\n      const passEncoder = commandEncoder.beginRenderPass(passDescriptor);\n      passEncoder.setBindGroup(0, bindGroup);\n      passEncoder.end();\n      return commandEncoder.finish();\n    };\n\n    let externalTexture: GPUExternalTexture;\n    await startPlayingAndWaitForVideo(videoElement, async () => {\n      const source =\n        sourceType === 'VideoFrame'\n          ? await getVideoFrameFromVideoElement(t, videoElement)\n          : videoElement;\n      externalTexture = t.device.importExternalTexture({\n        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n        source: source as any,\n      });\n      // Set `bindGroup` here, which will then be used in microtask1 and microtask3.\n      bindGroup = t.device.createBindGroup({\n        layout: bindGroupLayout,\n        entries: [{ binding: 0, resource: externalTexture }],\n      });\n\n      const commandBuffer = useExternalTexture();\n      t.expectGPUError('validation', () => t.device.queue.submit([commandBuffer]), false);\n\n      if (sourceType === 'VideoFrame') {\n        (source as VideoFrame).close();\n        const commandBuffer = useExternalTexture();\n        t.expectGPUError('validation', () => t.device.queue.submit([commandBuffer]), true);\n      }\n    });\n    if (sourceType === 'VideoElement') {\n      // Update new video frame.\n      await waitForNextFrame(videoElement, () => {\n        // VideoFrame is updated. GPUExternalTexture imported from HTMLVideoElement should be expired.\n        // Using the GPUExternalTexture should result in an error.\n        const commandBuffer = useExternalTexture();\n        t.expectGPUError('validation', () => t.device.queue.submit([commandBuffer]), true);\n      });\n    }\n  });\n\ng.test('importExternalTexture,compute')\n  .desc(\n    `\nTests that we can import an HTMLVideoElement/VideoFrame into a GPUExternalTexture and use it in a\ncompute shader, for several combinations of video format and color space.\n`\n  )\n  .params(u =>\n    u //\n      .combine('sourceType', ['VideoElement', 'VideoFrame'] as const)\n      .combineWithParams(kVideoExpectations)\n  )\n  .fn(async t => {\n    const sourceType = t.params.sourceType;\n    const videoElement = getVideoElement(t, sourceType, t.params.videoName);\n\n    await startPlayingAndWaitForVideo(videoElement, async () => {\n      const source =\n        sourceType === 'VideoFrame'\n          ? await getVideoFrameFromVideoElement(t, videoElement)\n          : videoElement;\n      const externalTexture = t.device.importExternalTexture({\n        /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n        source: source as any,\n      });\n\n      const outputTexture = t.device.createTexture({\n        format: 'rgba8unorm',\n        size: [2, 2, 1],\n        usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.STORAGE_BINDING,\n      });\n\n      const pipeline = t.device.createComputePipeline({\n        layout: 'auto',\n        compute: {\n          // Shader loads 4 pixels near each corner, and then store them in a storage texture.\n          module: t.device.createShaderModule({\n            code: `\n              @group(0) @binding(0) var t : texture_external;\n              @group(0) @binding(1) var outImage : texture_storage_2d<rgba8unorm, write>;\n\n              @compute @workgroup_size(1) fn main() {\n                var yellow : vec4<f32> = textureLoad(t, vec2<i32>(80, 60));\n                textureStore(outImage, vec2<i32>(0, 0), yellow);\n                var red : vec4<f32> = textureLoad(t, vec2<i32>(240, 60));\n                textureStore(outImage, vec2<i32>(0, 1), red);\n                var blue : vec4<f32> = textureLoad(t, vec2<i32>(80, 180));\n                textureStore(outImage, vec2<i32>(1, 0), blue);\n                var green : vec4<f32> = textureLoad(t, vec2<i32>(240, 180));\n                textureStore(outImage, vec2<i32>(1, 1), green);\n                return;\n              }\n            `,\n          }),\n          entryPoint: 'main',\n        },\n      });\n\n      const bg = t.device.createBindGroup({\n        entries: [\n          { binding: 0, resource: externalTexture },\n          { binding: 1, resource: outputTexture.createView() },\n        ],\n        layout: pipeline.getBindGroupLayout(0),\n      });\n\n      const encoder = t.device.createCommandEncoder();\n      const pass = encoder.beginComputePass();\n      pass.setPipeline(pipeline);\n      pass.setBindGroup(0, bg);\n      pass.dispatchWorkgroups(1);\n      pass.end();\n      t.device.queue.submit([encoder.finish()]);\n\n      t.expectSinglePixelComparisonsAreOkInTexture({ texture: outputTexture }, [\n        // Top-left should be yellow.\n        { coord: { x: 0, y: 0 }, exp: t.params._yellowExpectation },\n        // Top-right should be red.\n        { coord: { x: 0, y: 1 }, exp: t.params._redExpectation },\n        // Bottom-left should be blue.\n        { coord: { x: 1, y: 0 }, exp: t.params._blueExpectation },\n        // Bottom-right should be green.\n        { coord: { x: 1, y: 1 }, exp: t.params._greenExpectation },\n      ]);\n\n      if (sourceType === 'VideoFrame') (source as VideoFrame).close();\n    });\n  });\n"],"mappings":"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"}