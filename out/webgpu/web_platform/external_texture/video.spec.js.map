{"version":3,"sources":["../../../../src/webgpu/web_platform/external_texture/video.spec.ts"],"names":["description","getResourcePath","makeTestGroup","GPUTest","startPlayingAndWaitForVideo","kHeight","kWidth","kFormat","kVideoSources","g","createExternalTextureSamplingTestPipeline","t","pipeline","device","createRenderPipeline","vertex","module","createShaderModule","code","entryPoint","fragment","targets","format","primitive","topology","createExternalTextureSamplingTestBindGroup","video","linearSampler","createSampler","externalTextureDescriptor","source","externalTexture","importExternalTexture","bindGroup","createBindGroup","layout","getBindGroupLayout","entries","binding","resource","test","desc","params","u","combine","fn","videoUrl","videoSource","document","createElement","src","colorAttachment","createTexture","size","width","height","depthOrArrayLayers","usage","GPUTextureUsage","COPY_SRC","RENDER_ATTACHMENT","commandEncoder","createCommandEncoder","passEncoder","beginRenderPass","colorAttachments","view","createView","clearValue","r","b","a","loadOp","storeOp","setPipeline","setBindGroup","draw","end","queue","submit","finish","expectSinglePixelIn2DTexture","x","y","exp","Uint8Array","passDescriptor","bindGroupLayout","createBindGroupLayout","visibility","GPUShaderStage","FRAGMENT","useExternalTexture","microtask1","Promise","resolve","then","commandBuffer","expectGPUError","microtask3","outputTexture","STORAGE_BINDING","createComputePipeline","compute","bg","encoder","pass","beginComputePass","dispatch"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA,CANO,CAQP,SAASC,eAAT,QAAgC,wCAAhC;AACA,SAASC,aAAT,QAA8B,yCAA9B;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,2BAAT,QAA4C,4BAA5C;;AAEA,MAAMC,OAAO,GAAG,EAAhB;AACA,MAAMC,MAAM,GAAG,EAAf;AACA,MAAMC,OAAO,GAAG,YAAhB;AACA,MAAMC,aAAuB,GAAG;AAC9B,wBAD8B;AAE9B,0BAF8B;AAG9B,eAH8B;AAI9B,sBAJ8B,CAAhC;;;AAOA,OAAO,MAAMC,CAAC,GAAGP,aAAa,CAACC,OAAD,CAAvB;;AAEP,SAASO,yCAAT,CAAmDC,CAAnD,EAAkF;AAChF,QAAMC,QAAQ,GAAGD,CAAC,CAACE,MAAF,CAASC,oBAAT,CAA8B;AAC7CC,IAAAA,MAAM,EAAE;AACNC,MAAAA,MAAM,EAAEL,CAAC,CAACE,MAAF,CAASI,kBAAT,CAA4B;AAClCC,QAAAA,IAAI,EAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAb0C,EAA5B,CADF;;AAgBNC,MAAAA,UAAU,EAAE,MAhBN,EADqC;;AAmB7CC,IAAAA,QAAQ,EAAE;AACRJ,MAAAA,MAAM,EAAEL,CAAC,CAACE,MAAF,CAASI,kBAAT,CAA4B;AAClCC,QAAAA,IAAI,EAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAT0C,EAA5B,CADA;;AAYRC,MAAAA,UAAU,EAAE,MAZJ;AAaRE,MAAAA,OAAO,EAAE;AACP;AACEC,QAAAA,MAAM,EAAEf,OADV,EADO,CAbD,EAnBmC;;;;AAsC7CgB,IAAAA,SAAS,EAAE,EAAEC,QAAQ,EAAE,eAAZ,EAtCkC,EAA9B,CAAjB;;;AAyCA,SAAOZ,QAAP;AACD;;AAED,SAASa,0CAAT;AACEd,CADF;AAEEe,KAFF;AAGEd,QAHF;AAIgB;AACd,QAAMe,aAAa,GAAGhB,CAAC,CAACE,MAAF,CAASe,aAAT,EAAtB;;AAEA,QAAMC,yBAAyB,GAAG,EAAEC,MAAM,EAAEJ,KAAV,EAAlC;AACA,QAAMK,eAAe,GAAGpB,CAAC,CAACE,MAAF,CAASmB,qBAAT,CAA+BH,yBAA/B,CAAxB;;AAEA,QAAMI,SAAS,GAAGtB,CAAC,CAACE,MAAF,CAASqB,eAAT,CAAyB;AACzCC,IAAAA,MAAM,EAAEvB,QAAQ,CAACwB,kBAAT,CAA4B,CAA5B,CADiC;AAEzCC,IAAAA,OAAO,EAAE;AACP;AACEC,MAAAA,OAAO,EAAE,CADX;AAEEC,MAAAA,QAAQ,EAAEZ,aAFZ,EADO;;AAKP;AACEW,MAAAA,OAAO,EAAE,CADX;AAEEC,MAAAA,QAAQ,EAAER,eAFZ,EALO,CAFgC,EAAzB,CAAlB;;;;;AAcA,SAAOE,SAAP;AACD;;AAEDxB,CAAC,CAAC+B,IAAF,CAAO,8BAAP;AACGC,IADH;AAEK;AACL;AACA;AACA;AACA;AACA,CAPA;;AASGC,MATH,CASU,CAAAC,CAAC;AACPA,CAAC,CAAC;AAAD,CACEC,OADH,CACW,aADX,EAC0BpC,aAD1B,CAVJ;;AAaGqC,EAbH,CAaM,OAAMlC,CAAN,KAAW;AACb,QAAMmC,QAAQ,GAAG7C,eAAe,CAACU,CAAC,CAAC+B,MAAF,CAASK,WAAV,CAAhC;AACA,QAAMrB,KAAK,GAAGsB,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd;AACAvB,EAAAA,KAAK,CAACwB,GAAN,GAAYJ,QAAZ;;AAEA,QAAM1C,2BAA2B,CAACsB,KAAD,EAAQ,MAAM;AAC7C,UAAMyB,eAAe,GAAGxC,CAAC,CAACE,MAAF,CAASuC,aAAT,CAAuB;AAC7C9B,MAAAA,MAAM,EAAEf,OADqC;AAE7C8C,MAAAA,IAAI,EAAE,EAAEC,KAAK,EAAEhD,MAAT,EAAiBiD,MAAM,EAAElD,OAAzB,EAAkCmD,kBAAkB,EAAE,CAAtD,EAFuC;AAG7CC,MAAAA,KAAK,EAAEC,eAAe,CAACC,QAAhB,GAA2BD,eAAe,CAACE,iBAHL,EAAvB,CAAxB;;;AAMA,UAAMhD,QAAQ,GAAGF,yCAAyC,CAACC,CAAD,CAA1D;;AAEA,UAAMsB,SAAS,GAAGR,0CAA0C,CAACd,CAAD,EAAIe,KAAJ,EAAWd,QAAX,CAA5D;;AAEA,UAAMiD,cAAc,GAAGlD,CAAC,CAACE,MAAF,CAASiD,oBAAT,EAAvB;AACA,UAAMC,WAAW,GAAGF,cAAc,CAACG,eAAf,CAA+B;AACjDC,MAAAA,gBAAgB,EAAE;AAChB;AACEC,QAAAA,IAAI,EAAEf,eAAe,CAACgB,UAAhB,EADR;AAEEC,QAAAA,UAAU,EAAE,EAAEC,CAAC,EAAE,GAAL,EAAU5D,CAAC,EAAE,GAAb,EAAkB6D,CAAC,EAAE,GAArB,EAA0BC,CAAC,EAAE,GAA7B,EAFd;AAGEC,QAAAA,MAAM,EAAE,OAHV;AAIEC,QAAAA,OAAO,EAAE,OAJX,EADgB,CAD+B,EAA/B,CAApB;;;;AAUAV,IAAAA,WAAW,CAACW,WAAZ,CAAwB9D,QAAxB;AACAmD,IAAAA,WAAW,CAACY,YAAZ,CAAyB,CAAzB,EAA4B1C,SAA5B;AACA8B,IAAAA,WAAW,CAACa,IAAZ,CAAiB,CAAjB;AACAb,IAAAA,WAAW,CAACc,GAAZ;AACAlE,IAAAA,CAAC,CAACE,MAAF,CAASiE,KAAT,CAAeC,MAAf,CAAsB,CAAClB,cAAc,CAACmB,MAAf,EAAD,CAAtB;;AAEA;AACA;AACArE,IAAAA,CAAC,CAACsE,4BAAF;AACE9B,IAAAA,eADF;AAEE5C,IAAAA,OAFF;AAGE,MAAE2E,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAHF;AAIE;AACEC,MAAAA,GAAG,EAAE,IAAIC,UAAJ,CAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAAf,CADP,EAJF;;;;AASA;AACA;AACA1E,IAAAA,CAAC,CAACsE,4BAAF;AACE9B,IAAAA,eADF;AAEE5C,IAAAA,OAFF;AAGE,MAAE2E,CAAC,EAAE5E,MAAM,GAAG,CAAd,EAAiB6E,CAAC,EAAE9E,OAAO,GAAG,CAA9B,EAHF;AAIE;AACE+E,MAAAA,GAAG,EAAE,IAAIC,UAAJ,CAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAAf,CADP,EAJF;;;AAQD,GAjDgC,CAAjC;AAkDD,CApEH;;AAsEA5E,CAAC,CAAC+B,IAAF,CAAO,+BAAP;AACGC,IADH;AAEK;AACL;AACA;AACA,CALA;;AAOGI,EAPH,CAOM,OAAMlC,CAAN,KAAW;AACb,QAAMmC,QAAQ,GAAG7C,eAAe,CAAC,wBAAD,CAAhC;AACA,QAAMyB,KAAK,GAAGsB,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd;AACAvB,EAAAA,KAAK,CAACwB,GAAN,GAAYJ,QAAZ;;AAEA,QAAMK,eAAe,GAAGxC,CAAC,CAACE,MAAF,CAASuC,aAAT,CAAuB;AAC7C9B,IAAAA,MAAM,EAAEf,OADqC;AAE7C8C,IAAAA,IAAI,EAAE,EAAEC,KAAK,EAAEhD,MAAT,EAAiBiD,MAAM,EAAElD,OAAzB,EAAkCmD,kBAAkB,EAAE,CAAtD,EAFuC;AAG7CC,IAAAA,KAAK,EAAEC,eAAe,CAACC,QAAhB,GAA2BD,eAAe,CAACE,iBAHL,EAAvB,CAAxB;;AAKA,QAAM0B,cAAc,GAAG;AACrBrB,IAAAA,gBAAgB,EAAE;AAChB;AACEC,MAAAA,IAAI,EAAEf,eAAe,CAACgB,UAAhB,EADR;AAEEC,MAAAA,UAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAFd;AAGEI,MAAAA,MAAM,EAAE,OAHV;AAIEC,MAAAA,OAAO,EAAE,OAJX,EADgB,CADG,EAAvB;;;;;AAWA,QAAMc,eAAe,GAAG5E,CAAC,CAACE,MAAF,CAAS2E,qBAAT,CAA+B;AACrDnD,IAAAA,OAAO,EAAE,CAAC,EAAEC,OAAO,EAAE,CAAX,EAAcmD,UAAU,EAAEC,cAAc,CAACC,QAAzC,EAAmD5D,eAAe,EAAE,EAApE,EAAD,CAD4C,EAA/B,CAAxB;;;AAIA,MAAIE,SAAJ;AACA,QAAM2D,kBAAkB,GAAG,MAAM;AAC/B,UAAM/B,cAAc,GAAGlD,CAAC,CAACE,MAAF,CAASiD,oBAAT,EAAvB;AACA,UAAMC,WAAW,GAAGF,cAAc,CAACG,eAAf,CAA+BsB,cAA/B,CAApB;AACAvB,IAAAA,WAAW,CAACY,YAAZ,CAAyB,CAAzB,EAA4B1C,SAA5B;AACA8B,IAAAA,WAAW,CAACc,GAAZ;AACA,WAAOhB,cAAc,CAACmB,MAAf,EAAP;AACD,GAND;;AAQA,QAAM5E,2BAA2B,CAACsB,KAAD,EAAQ,YAAY;AACnD;AACA;AACA,UAAMmE,UAAU,GAAGC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,MAAM;AAC9C,YAAMC,aAAa,GAAGL,kBAAkB,EAAxC;AACAjF,MAAAA,CAAC,CAACuF,cAAF,CAAiB,YAAjB,EAA+B,MAAMvF,CAAC,CAACE,MAAF,CAASiE,KAAT,CAAeC,MAAf,CAAsB,CAACkB,aAAD,CAAtB,CAArC,EAA6E,KAA7E;AACD,KAHkB,CAAnB;;AAKA;AACA,UAAMlE,eAAe,GAAGpB,CAAC,CAACE,MAAF,CAASmB,qBAAT,CAA+B,EAAEF,MAAM,EAAEJ,KAAV,EAA/B,CAAxB;AACA;AACAO,IAAAA,SAAS,GAAGtB,CAAC,CAACE,MAAF,CAASqB,eAAT,CAAyB;AACnCC,MAAAA,MAAM,EAAEoD,eAD2B;AAEnClD,MAAAA,OAAO,EAAE,CAAC,EAAEC,OAAO,EAAE,CAAX,EAAcC,QAAQ,EAAER,eAAxB,EAAD,CAF0B,EAAzB,CAAZ;;;AAKA;AACA;AACA,UAAMoE,UAAU,GAAGL,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,MAAM;AAC9C,YAAMC,aAAa,GAAGL,kBAAkB,EAAxC;AACAjF,MAAAA,CAAC,CAACuF,cAAF,CAAiB,YAAjB,EAA+B,MAAMvF,CAAC,CAACE,MAAF,CAASiE,KAAT,CAAeC,MAAf,CAAsB,CAACkB,aAAD,CAAtB,CAArC,EAA6E,IAA7E;AACD,KAHkB,CAAnB;;AAKA;AACA,UAAMJ,UAAN;AACA,UAAMM,UAAN;AACD,GA1BgC,CAAjC;AA2BD,CApEH;;AAsEA1F,CAAC,CAAC+B,IAAF,CAAO,+BAAP;AACGC,IADH;AAEK;AACL;AACA,CAJA;;AAMGI,EANH,CAMM,OAAMlC,CAAN,KAAW;AACb,QAAMmC,QAAQ,GAAG7C,eAAe,CAAC,wBAAD,CAAhC;AACA,QAAMyB,KAAK,GAAGsB,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd;AACAvB,EAAAA,KAAK,CAACwB,GAAN,GAAYJ,QAAZ;;AAEA,QAAM1C,2BAA2B,CAACsB,KAAD,EAAQ,MAAM;AAC7C,UAAMG,yBAAyB,GAAG,EAAEC,MAAM,EAAEJ,KAAV,EAAlC;AACA,UAAMK,eAAe,GAAGpB,CAAC,CAACE,MAAF,CAASmB,qBAAT,CAA+BH,yBAA/B,CAAxB;;AAEA,UAAMuE,aAAa,GAAGzF,CAAC,CAACE,MAAF,CAASuC,aAAT,CAAuB;AAC3C9B,MAAAA,MAAM,EAAE,YADmC;AAE3C+B,MAAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFqC;AAG3CI,MAAAA,KAAK,EAAEC,eAAe,CAACC,QAAhB,GAA2BD,eAAe,CAAC2C,eAHP,EAAvB,CAAtB;;;AAMA,UAAMzF,QAAQ,GAAGD,CAAC,CAACE,MAAF,CAASyF,qBAAT,CAA+B;AAC9CC,MAAAA,OAAO,EAAE;AACP;AACA;AACAvF,QAAAA,MAAM,EAAEL,CAAC,CAACE,MAAF,CAASI,kBAAT,CAA4B;AAClCC,UAAAA,IAAI,EAAG;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAZ8C,EAA5B,CAHD;;AAiBPC,QAAAA,UAAU,EAAE,MAjBL,EADqC,EAA/B,CAAjB;;;;AAsBA,UAAMqF,EAAE,GAAG7F,CAAC,CAACE,MAAF,CAASqB,eAAT,CAAyB;AAClCG,MAAAA,OAAO,EAAE;AACP,QAAEC,OAAO,EAAE,CAAX,EAAcC,QAAQ,EAAER,eAAxB,EADO;AAEP,QAAEO,OAAO,EAAE,CAAX,EAAcC,QAAQ,EAAE6D,aAAa,CAACjC,UAAd,EAAxB,EAFO,CADyB;;AAKlChC,MAAAA,MAAM,EAAEvB,QAAQ,CAACwB,kBAAT,CAA4B,CAA5B,CAL0B,EAAzB,CAAX;;;AAQA,UAAMqE,OAAO,GAAG9F,CAAC,CAACE,MAAF,CAASiD,oBAAT,EAAhB;AACA,UAAM4C,IAAI,GAAGD,OAAO,CAACE,gBAAR,EAAb;AACAD,IAAAA,IAAI,CAAChC,WAAL,CAAiB9D,QAAjB;AACA8F,IAAAA,IAAI,CAAC/B,YAAL,CAAkB,CAAlB,EAAqB6B,EAArB;AACAE,IAAAA,IAAI,CAACE,QAAL,CAAc,CAAd;AACAF,IAAAA,IAAI,CAAC7B,GAAL;AACAlE,IAAAA,CAAC,CAACE,MAAF,CAASiE,KAAT,CAAeC,MAAf,CAAsB,CAAC0B,OAAO,CAACzB,MAAR,EAAD,CAAtB;;AAEA;AACArE,IAAAA,CAAC,CAACsE,4BAAF;AACEmB,IAAAA,aADF;AAEE7F,IAAAA,OAFF;AAGE,MAAE2E,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAHF;AAIE;AACEC,MAAAA,GAAG,EAAE,IAAIC,UAAJ,CAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAAf,CADP,EAJF;;;;AASA;AACA1E,IAAAA,CAAC,CAACsE,4BAAF;AACEmB,IAAAA,aADF;AAEE7F,IAAAA,OAFF;AAGE,MAAE2E,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAHF;AAIE;AACEC,MAAAA,GAAG,EAAE,IAAIC,UAAJ,CAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,CAAf,CADP,EAJF;;;AAQD,GAnEgC,CAAjC;AAoED,CA/EH","sourcesContent":["export const description = `\nTests for external textures from HTMLVideoElement (and other video-type sources?).\n\n- videos with various encodings, color spaces, metadata\n\nTODO: consider whether external_texture and copyToTexture video tests should be in the same file\n`;\n\nimport { getResourcePath } from '../../../common/framework/resources.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { GPUTest } from '../../gpu_test.js';\nimport { startPlayingAndWaitForVideo } from '../../web_platform/util.js';\n\nconst kHeight = 16;\nconst kWidth = 16;\nconst kFormat = 'rgba8unorm';\nconst kVideoSources: string[] = [\n  'red-green.webmvp8.webm',\n  'red-green.bt601.vp9.webm',\n  'red-green.mp4',\n  'red-green.theora.ogv',\n];\n\nexport const g = makeTestGroup(GPUTest);\n\nfunction createExternalTextureSamplingTestPipeline(t: GPUTest): GPURenderPipeline {\n  const pipeline = t.device.createRenderPipeline({\n    vertex: {\n      module: t.device.createShaderModule({\n        code: `\n        @stage(vertex) fn main(@builtin(vertex_index) VertexIndex : u32) -> @builtin(position) vec4<f32> {\n            var pos = array<vec4<f32>, 6>(\n              vec4<f32>( 1.0,  1.0, 0.0, 1.0),\n              vec4<f32>( 1.0, -1.0, 0.0, 1.0),\n              vec4<f32>(-1.0, -1.0, 0.0, 1.0),\n              vec4<f32>( 1.0,  1.0, 0.0, 1.0),\n              vec4<f32>(-1.0, -1.0, 0.0, 1.0),\n              vec4<f32>(-1.0,  1.0, 0.0, 1.0)\n            );\n            return pos[VertexIndex];\n        }\n        `,\n      }),\n      entryPoint: 'main',\n    },\n    fragment: {\n      module: t.device.createShaderModule({\n        code: `\n        @group(0) @binding(0) var s : sampler;\n        @group(0) @binding(1) var t : texture_external;\n\n        @stage(fragment) fn main(@builtin(position) FragCoord : vec4<f32>)\n                                 -> @location(0) vec4<f32> {\n            return textureSampleLevel(t, s, FragCoord.xy / vec2<f32>(16.0, 16.0));\n        }\n        `,\n      }),\n      entryPoint: 'main',\n      targets: [\n        {\n          format: kFormat,\n        },\n      ],\n    },\n    primitive: { topology: 'triangle-list' },\n  });\n\n  return pipeline;\n}\n\nfunction createExternalTextureSamplingTestBindGroup(\n  t: GPUTest,\n  video: HTMLVideoElement,\n  pipeline: GPURenderPipeline\n): GPUBindGroup {\n  const linearSampler = t.device.createSampler();\n\n  const externalTextureDescriptor = { source: video };\n  const externalTexture = t.device.importExternalTexture(externalTextureDescriptor);\n\n  const bindGroup = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n      {\n        binding: 0,\n        resource: linearSampler,\n      },\n      {\n        binding: 1,\n        resource: externalTexture,\n      },\n    ],\n  });\n\n  return bindGroup;\n}\n\ng.test('importExternalTexture,sample')\n  .desc(\n    `\nTests that we can import an HTMLVideoElement into a GPUExternalTexture, sample from it for all\nsupported video formats {vp8, vp9, ogg, mp4}, and ensure the GPUExternalTexture is destroyed by\na microtask.\nTODO: Multiplanar scenarios\n`\n  )\n  .params(u =>\n    u //\n      .combine('videoSource', kVideoSources)\n  )\n  .fn(async t => {\n    const videoUrl = getResourcePath(t.params.videoSource);\n    const video = document.createElement('video');\n    video.src = videoUrl;\n\n    await startPlayingAndWaitForVideo(video, () => {\n      const colorAttachment = t.device.createTexture({\n        format: kFormat,\n        size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n        usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n      });\n\n      const pipeline = createExternalTextureSamplingTestPipeline(t);\n\n      const bindGroup = createExternalTextureSamplingTestBindGroup(t, video, pipeline);\n\n      const commandEncoder = t.device.createCommandEncoder();\n      const passEncoder = commandEncoder.beginRenderPass({\n        colorAttachments: [\n          {\n            view: colorAttachment.createView(),\n            clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n            loadOp: 'clear',\n            storeOp: 'store',\n          },\n        ],\n      });\n      passEncoder.setPipeline(pipeline);\n      passEncoder.setBindGroup(0, bindGroup);\n      passEncoder.draw(6);\n      passEncoder.end();\n      t.device.queue.submit([commandEncoder.finish()]);\n\n      // Top left corner should be red. Sample a few pixels away from the edges to avoid compression\n      // artifacts.\n      t.expectSinglePixelIn2DTexture(\n        colorAttachment,\n        kFormat,\n        { x: 2, y: 2 },\n        {\n          exp: new Uint8Array([0xff, 0x00, 0x00, 0xff]),\n        }\n      );\n\n      // Bottom right corner should be green. Sample a few pixels away from the edges to avoid\n      // compression artifacts.\n      t.expectSinglePixelIn2DTexture(\n        colorAttachment,\n        kFormat,\n        { x: kWidth - 3, y: kHeight - 3 },\n        {\n          exp: new Uint8Array([0x00, 0xff, 0x00, 0xff]),\n        }\n      );\n    });\n  });\n\ng.test('importExternalTexture,destroy')\n  .desc(\n    `\nTests that a GPUExternalTexture is destroyed by a microtask and that using it after it has been\ndestroyed results in an error.\n`\n  )\n  .fn(async t => {\n    const videoUrl = getResourcePath('red-green.webmvp8.webm');\n    const video = document.createElement('video');\n    video.src = videoUrl;\n\n    const colorAttachment = t.device.createTexture({\n      format: kFormat,\n      size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n    const passDescriptor = {\n      colorAttachments: [\n        {\n          view: colorAttachment.createView(),\n          clearValue: [0, 0, 0, 1],\n          loadOp: 'clear',\n          storeOp: 'store',\n        },\n      ],\n    } as const;\n\n    const bindGroupLayout = t.device.createBindGroupLayout({\n      entries: [{ binding: 0, visibility: GPUShaderStage.FRAGMENT, externalTexture: {} }],\n    });\n\n    let bindGroup: GPUBindGroup;\n    const useExternalTexture = () => {\n      const commandEncoder = t.device.createCommandEncoder();\n      const passEncoder = commandEncoder.beginRenderPass(passDescriptor);\n      passEncoder.setBindGroup(0, bindGroup);\n      passEncoder.end();\n      return commandEncoder.finish();\n    };\n\n    await startPlayingAndWaitForVideo(video, async () => {\n      // 1. Enqueue a microtask which uses the GPUExternalTexture. This should happen immediately\n      // after the current microtask - before the GPUExternalTexture is destroyed.\n      const microtask1 = Promise.resolve().then(() => {\n        const commandBuffer = useExternalTexture();\n        t.expectGPUError('validation', () => t.device.queue.submit([commandBuffer]), false);\n      });\n\n      // 2. importExternalTexture enqueues a microtask that destroys the GPUExternalTexture.\n      const externalTexture = t.device.importExternalTexture({ source: video });\n      // Set `bindGroup` here, which will then be used in microtask1 and microtask3.\n      bindGroup = t.device.createBindGroup({\n        layout: bindGroupLayout,\n        entries: [{ binding: 0, resource: externalTexture }],\n      });\n\n      // 3. Enqueue a microtask which uses the GPUExternalTexture. This should happen immediately\n      // after the microtask which destroys the GPUExternalTexture.\n      const microtask3 = Promise.resolve().then(() => {\n        const commandBuffer = useExternalTexture();\n        t.expectGPUError('validation', () => t.device.queue.submit([commandBuffer]), true);\n      });\n\n      // Now make sure the test doesn't end before all of those microtasks complete.\n      await microtask1;\n      await microtask3;\n    });\n  });\n\ng.test('importExternalTexture,compute')\n  .desc(\n    `\nTests that we can import an HTMLVideoElement into a GPUExternalTexture and use it in a compute shader.\n`\n  )\n  .fn(async t => {\n    const videoUrl = getResourcePath('red-green.webmvp8.webm');\n    const video = document.createElement('video');\n    video.src = videoUrl;\n\n    await startPlayingAndWaitForVideo(video, () => {\n      const externalTextureDescriptor = { source: video };\n      const externalTexture = t.device.importExternalTexture(externalTextureDescriptor);\n\n      const outputTexture = t.device.createTexture({\n        format: 'rgba8unorm',\n        size: [2, 1, 1],\n        usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.STORAGE_BINDING,\n      });\n\n      const pipeline = t.device.createComputePipeline({\n        compute: {\n          // Shader will load a pixel near the upper left and lower right corners, which are then\n          // stored in storage texture.\n          module: t.device.createShaderModule({\n            code: `\n              @group(0) @binding(0) var t : texture_external;\n              @group(0) @binding(1) var outImage : texture_storage_2d<rgba8unorm, write>;\n\n              @stage(compute) @workgroup_size(1) fn main() {\n                var red : vec4<f32> = textureLoad(t, vec2<i32>(10,10));\n                textureStore(outImage, vec2<i32>(0, 0), red);\n                var green : vec4<f32> = textureLoad(t, vec2<i32>(70,118));\n                textureStore(outImage, vec2<i32>(1, 0), green);\n                return;\n              }\n            `,\n          }),\n          entryPoint: 'main',\n        },\n      });\n\n      const bg = t.device.createBindGroup({\n        entries: [\n          { binding: 0, resource: externalTexture },\n          { binding: 1, resource: outputTexture.createView() },\n        ],\n        layout: pipeline.getBindGroupLayout(0),\n      });\n\n      const encoder = t.device.createCommandEncoder();\n      const pass = encoder.beginComputePass();\n      pass.setPipeline(pipeline);\n      pass.setBindGroup(0, bg);\n      pass.dispatch(1);\n      pass.end();\n      t.device.queue.submit([encoder.finish()]);\n\n      // Pixel loaded from top left corner should be red.\n      t.expectSinglePixelIn2DTexture(\n        outputTexture,\n        kFormat,\n        { x: 0, y: 0 },\n        {\n          exp: new Uint8Array([0xff, 0x00, 0x00, 0xff]),\n        }\n      );\n\n      // Pixel loaded from Bottom right corner should be green.\n      t.expectSinglePixelIn2DTexture(\n        outputTexture,\n        kFormat,\n        { x: 1, y: 0 },\n        {\n          exp: new Uint8Array([0x00, 0xff, 0x00, 0xff]),\n        }\n      );\n    });\n  });\n"],"file":"video.spec.js"}