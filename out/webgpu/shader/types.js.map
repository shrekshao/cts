{"version":3,"sources":["../../../src/webgpu/shader/types.ts"],"names":["keysOf","kScalarTypeInfo","layout","alignment","size","supportsAtomics","undefined","kScalarTypes","kVectorContainerTypeInfo","arrayLength","kVectorContainerTypes","kMatrixContainerTypeInfo","innerLength","kMatrixContainerTypes"],"mappings":"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","sourcesContent":["import { keysOf } from '../../common/util/data_tables.js';\n\n/** WGSL plain scalar type names. */\nexport type ScalarType = 'i32' | 'u32' | 'f32' | 'bool';\n\n/** Info for each plain scalar type. */\nexport const kScalarTypeInfo = /* prettier-ignore */ {\n  'i32':    { layout: { alignment:  4, size:  4 }, supportsAtomics:  true },\n  'u32':    { layout: { alignment:  4, size:  4 }, supportsAtomics:  true },\n  'f32':    { layout: { alignment:  4, size:  4 }, supportsAtomics: false },\n  'bool':   { layout:                   undefined, supportsAtomics: false },\n} as const;\n/** List of all plain scalar types. */\nexport const kScalarTypes = keysOf(kScalarTypeInfo);\n\n/** Info for each vecN<> container type. */\nexport const kVectorContainerTypeInfo = /* prettier-ignore */ {\n  'vec2':   { layout: { alignment:  8, size:  8 }, arrayLength: 2 },\n  'vec3':   { layout: { alignment: 16, size: 12 }, arrayLength: 3 },\n  'vec4':   { layout: { alignment: 16, size: 16 }, arrayLength: 4 },\n} as const;\n/** List of all vecN<> container types. */\nexport const kVectorContainerTypes = keysOf(kVectorContainerTypeInfo);\n\n/** Info for each matNxN<> container type. */\nexport const kMatrixContainerTypeInfo = /* prettier-ignore */ {\n  'mat2x2': { layout: { alignment:  8, size: 16 }, arrayLength: 2, innerLength: 2 },\n  'mat3x2': { layout: { alignment:  8, size: 24 }, arrayLength: 3, innerLength: 2 },\n  'mat4x2': { layout: { alignment:  8, size: 32 }, arrayLength: 4, innerLength: 2 },\n  'mat2x3': { layout: { alignment: 16, size: 32 }, arrayLength: 2, innerLength: 3 },\n  'mat3x3': { layout: { alignment: 16, size: 48 }, arrayLength: 3, innerLength: 3 },\n  'mat4x3': { layout: { alignment: 16, size: 64 }, arrayLength: 4, innerLength: 3 },\n  'mat2x4': { layout: { alignment: 16, size: 32 }, arrayLength: 2, innerLength: 4 },\n  'mat3x4': { layout: { alignment: 16, size: 48 }, arrayLength: 3, innerLength: 4 },\n  'mat4x4': { layout: { alignment: 16, size: 64 }, arrayLength: 4, innerLength: 4 },\n} as const;\n/** List of all matNxN<> container types. */\nexport const kMatrixContainerTypes = keysOf(kMatrixContainerTypeInfo);\n"],"file":"types.js"}