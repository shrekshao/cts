{"version":3,"sources":["../../../../src/webgpu/shader/validation/shader_validation_test.ts"],"names":["GPUTest","ShaderValidationTest","expectCompileResult","result","code","device","pushErrorScope","shaderModule","createShaderModule","promise","popErrorScope","eventualAsyncExpectation","niceStack","compilationInfo","gpuValidationError","message","rec","validationFailed","GPUValidationError","indexOf","debug","info","messages","type","lineNum","linePos","messagesLog","map","m","join"],"mappings":";AAAA;AACA,GADA,SAASA,OAAT,QAAwB,mBAAxB,C,CAEA;AACA;AACA;AACA,OAAO,MAAMC,oBAAN,SAAmCD,OAAnC,CAA2C;AAChD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEE,EAAAA,mBAAmB,CAACC,MAAD,EAA2BC,IAA3B,EAAyC;AAC1D;AACA;AACA,QAAID,MAAM,KAAK,IAAf,EAAqB;AACnB,WAAKE,MAAL,CAAYC,cAAZ,CAA2B,YAA3B;AACD;;AAED,UAAMC,YAAY,GAAG,KAAKF,MAAL,CAAYG,kBAAZ,CAA+B,EAAEJ,IAAF,EAA/B,CAArB;;AAEA,QAAID,MAAM,KAAK,IAAf,EAAqB;AACnB,YAAMM,OAAO,GAAG,KAAKJ,MAAL,CAAYK,aAAZ,EAAhB;;AAEA,WAAKC,wBAAL,CAA8B,MAAMC,SAAN,IAAmB;AAC/C;AACA;AACA,YAAI,CAACL,YAAY,CAACM,eAAlB,EAAmC;AACjC,gBAAMC,kBAAkB,GAAG,MAAML,OAAjC;AACA,cAAI,CAACK,kBAAL,EAAyB;AACvBF,YAAAA,SAAS,CAACG,OAAV,GAAoB,qCAApB;AACA,iBAAKC,GAAL,CAASC,gBAAT,CAA0BL,SAA1B;AACD,WAHD,MAGO,IAAIE,kBAAkB,YAAYI,kBAAlC,EAAsD;AAC3D,gBAAI,OAAOf,MAAP,KAAkB,QAAlB,IAA8BW,kBAAkB,CAACC,OAAnB,CAA2BI,OAA3B,CAAmChB,MAAnC,MAA+C,CAAC,CAAlF,EAAqF;AACnFS,cAAAA,SAAS,CAACG,OAAV,GAAqB;AACnC,GAAGZ,MAAO,OAAMW,kBAAkB,CAACC,OAAQ,EAD7B;AAEA,mBAAKC,GAAL,CAASC,gBAAT,CAA0BL,SAA1B;AACD,aAJD,MAIO;AACLA,cAAAA,SAAS,CAACG,OAAV,GAAqB,qCAAoCD,kBAAkB,CAACC,OAAQ,EAApF;AACA,mBAAKC,GAAL,CAASI,KAAT,CAAeR,SAAf;AACD;AACF;AACD;AACD;;AAED,YAAI,OAAOT,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,gBAAMkB,IAAI,GAAG,MAAMd,YAAY,CAACM,eAAb,EAAnB;AACA,eAAK,MAAME,OAAX,IAAsBM,IAAI,CAACC,QAA3B,EAAqC;AACnC,gBAAIP,OAAO,CAACQ,IAAR,KAAiB,OAAjB,IAA4BR,OAAO,CAACA,OAAR,CAAgBI,OAAhB,CAAwBhB,MAAxB,MAAoC,CAAC,CAArE,EAAwE;AACtES,cAAAA,SAAS,CAACG,OAAV,GAAqB;AACnC,EAAEA,OAAO,CAACS,OAAQ,IAAGT,OAAO,CAACU,OAAQ,KAAIV,OAAO,CAACA,OAAQ,EAD3C;AAEA,mBAAKC,GAAL,CAASI,KAAT,CAAeR,SAAf;AACA;AACD;AACF;AACD;;AAEA;AACA,gBAAMc,WAAW,GAAGL,IAAI,CAACC,QAAL;AACjBK,UAAAA,GADiB,CACbC,CAAC,IAAK,GAAEA,CAAC,CAACJ,OAAQ,IAAGI,CAAC,CAACH,OAAQ,KAAIG,CAAC,CAACL,IAAK,KAAIK,CAAC,CAACb,OAAQ,EAD3C;AAEjBc,UAAAA,IAFiB,CAEZ,IAFY,CAApB;AAGAjB,UAAAA,SAAS,CAACG,OAAV,GAAqB;AAC/B,GAAGZ,MAAO,MAAKuB,WAAY,EADjB;AAEA,eAAKV,GAAL,CAASC,gBAAT,CAA0BL,SAA1B;AACD;AACF,OAzCD;AA0CD;AACF,GAlE+C","sourcesContent":["import { GPUTest } from '../../gpu_test.js';\n\n/**\n * Base fixture for WGSL shader validation tests.\n */\nexport class ShaderValidationTest extends GPUTest {\n  /**\n   * Add a test expectation for whether a createShaderModule call succeeds or not.\n   *\n   * @example\n   * ```ts\n   * t.expectCompileResult(true, `wgsl code`); // Expect success\n   * t.expectCompileResult(false, `wgsl code`); // Expect validation error with any error string\n   * t.expectCompileResult('substr', `wgsl code`); // Expect validation error containing 'substr'\n   * ```\n   */\n  expectCompileResult(result: boolean | string, code: string) {\n    // If an error is expected, push an error scope to catch it.\n    // Otherwise, the test harness will catch unexpected errors.\n    if (result !== true) {\n      this.device.pushErrorScope('validation');\n    }\n\n    const shaderModule = this.device.createShaderModule({ code });\n\n    if (result !== true) {\n      const promise = this.device.popErrorScope();\n\n      this.eventualAsyncExpectation(async niceStack => {\n        // TODO: This is a non-compliant fallback path for Chrome, which doesn't\n        // implement .compilationInfo() yet. Remove it.\n        if (!shaderModule.compilationInfo) {\n          const gpuValidationError = await promise;\n          if (!gpuValidationError) {\n            niceStack.message = 'Compilation succeeded unexpectedly.';\n            this.rec.validationFailed(niceStack);\n          } else if (gpuValidationError instanceof GPUValidationError) {\n            if (typeof result === 'string' && gpuValidationError.message.indexOf(result) === -1) {\n              niceStack.message = `Compilation failed, but message missing expected substring \\\n«${result}» - ${gpuValidationError.message}`;\n              this.rec.validationFailed(niceStack);\n            } else {\n              niceStack.message = `Compilation failed, as expected - ${gpuValidationError.message}`;\n              this.rec.debug(niceStack);\n            }\n          }\n          return;\n        }\n\n        if (typeof result === 'string') {\n          const info = await shaderModule.compilationInfo();\n          for (const message of info.messages) {\n            if (message.type === 'error' && message.message.indexOf(result) !== -1) {\n              niceStack.message = `Compilation failed, as expected - \\\n${message.lineNum}:${message.linePos}: ${message.message}`;\n              this.rec.debug(niceStack);\n              return;\n            }\n          }\n          // Here, the expected string was not found.\n\n          // TODO: Pretty-print error messages, with source context.\n          const messagesLog = info.messages\n            .map(m => `${m.lineNum}:${m.linePos}: ${m.type}: ${m.message}`)\n            .join('\\n');\n          niceStack.message = `Compilation failed, but no error message with expected substring \\\n«${result}»\\n${messagesLog}`;\n          this.rec.validationFailed(niceStack);\n        }\n      });\n    }\n  }\n}\n"],"file":"shader_validation_test.js"}