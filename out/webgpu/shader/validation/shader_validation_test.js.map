{"version":3,"sources":["../../../../src/webgpu/shader/validation/shader_validation_test.ts"],"names":["ErrorWithExtra","GPUTest","ShaderValidationTest","expectCompileResult","expectedResult","code","shaderModule","expectGPUError","device","createShaderModule","error","eventualAsyncExpectation","compilationInfo","messagesLog","messages","map","m","lineNum","linePos","type","message","join","extra","some","rec","validationFailed","debug","wrapInEntryPoint","enabledExtensions","enableDirectives","x"],"mappings":";AAAA;AACA,GADA,SAASA,cAAT,QAA+B,8BAA/B,CACA,SAASC,OAAT,QAAwB,mBAAxB;AAEA;AACA;AACA;AACA,OAAO,MAAMC,oBAAN,SAAmCD,OAAnC,CAA2C;AAChD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEE,EAAAA,mBAAmB,CAACC,cAAD,EAA0BC,IAA1B,EAAwC;AACzD,QAAIC,YAAJ;AACA,SAAKC,cAAL;AACE,gBADF;AAEE,UAAM;AACJD,MAAAA,YAAY,GAAG,KAAKE,MAAL,CAAYC,kBAAZ,CAA+B,EAAEJ,IAAF,EAA/B,CAAf;AACD,KAJH;AAKED,IAAAA,cAAc,KAAK,IALrB;;;AAQA,UAAMM,KAAK,GAAG,IAAIV,cAAJ,CAAmB,EAAnB,EAAuB,OAAO,EAAEM,YAAF,EAAP,CAAvB,CAAd;AACA,SAAKK,wBAAL,CAA8B,YAAY;AACxC,YAAMC,eAAe,GAAG,MAAMN,YAAY,CAAEM,eAAd,EAA9B;;AAEA;AACA,YAAMC,WAAW,GAAGD,eAAe,CAACE,QAAhB;AACjBC,MAAAA,GADiB,CACb,CAAAC,CAAC,KAAK,GAAEA,CAAC,CAACC,OAAQ,IAAGD,CAAC,CAACE,OAAQ,KAAIF,CAAC,CAACG,IAAK,KAAIH,CAAC,CAACI,OAAQ,EAD3C;AAEjBC,MAAAA,IAFiB,CAEZ,IAFY,CAApB;AAGAX,MAAAA,KAAK,CAACY,KAAN,CAAYV,eAAZ,GAA8BA,eAA9B;;AAEA,UAAIA,eAAe,CAACE,QAAhB,CAAyBS,IAAzB,CAA8B,CAAAP,CAAC,KAAIA,CAAC,CAACG,IAAF,KAAW,OAA9C,CAAJ,EAA4D;AAC1D,YAAIf,cAAJ,EAAoB;AAClBM,UAAAA,KAAK,CAACU,OAAN,GAAiB,+CAAD,GAAkDP,WAAlE;AACA,eAAKW,GAAL,CAASC,gBAAT,CAA0Bf,KAA1B;AACD,SAHD,MAGO;AACLA,UAAAA,KAAK,CAACU,OAAN,GAAiB,mDAAD,GAAsDP,WAAtE;AACA,eAAKW,GAAL,CAASE,KAAT,CAAehB,KAAf;AACD;AACF,OARD,MAQO;AACL,YAAI,CAACN,cAAL,EAAqB;AACnBM,UAAAA,KAAK,CAACU,OAAN,GAAiB,qDAAD,GAAwDP,WAAxE;AACA,eAAKW,GAAL,CAASC,gBAAT,CAA0Bf,KAA1B;AACD,SAHD,MAGO;AACLA,UAAAA,KAAK,CAACU,OAAN,GAAiB,qDAAD,GAAwDP,WAAxE;AACA,eAAKW,GAAL,CAASE,KAAT,CAAehB,KAAf;AACD;AACF;AACF,KA1BD;AA2BD;;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEiB,EAAAA,gBAAgB,CAACtB,IAAD,EAAeuB,iBAA2B,GAAG,EAA7C,EAAiD;AAC/D,UAAMC,gBAAgB,GAAGD,iBAAiB,CAACb,GAAlB,CAAsB,CAAAe,CAAC,KAAK,UAASA,CAAE,GAAvC,EAA2CT,IAA3C,CAAgD,UAAhD,CAAzB;;AAEA,WAAQ;AACZ,QAAQQ,gBAAiB;AACzB;AACA;AACA;AACA,UAAUxB,IAAK;AACf,QANI;AAOD,GApE+C","sourcesContent":["import { ErrorWithExtra } from '../../../common/util/util.js';\nimport { GPUTest } from '../../gpu_test.js';\n\n/**\n * Base fixture for WGSL shader validation tests.\n */\nexport class ShaderValidationTest extends GPUTest {\n  /**\n   * Add a test expectation for whether a createShaderModule call succeeds or not.\n   *\n   * @example\n   * ```ts\n   * t.expectCompileResult(true, `wgsl code`); // Expect success\n   * t.expectCompileResult(false, `wgsl code`); // Expect validation error with any error string\n   * ```\n   */\n  expectCompileResult(expectedResult: boolean, code: string) {\n    let shaderModule: GPUShaderModule;\n    this.expectGPUError(\n      'validation',\n      () => {\n        shaderModule = this.device.createShaderModule({ code });\n      },\n      expectedResult !== true\n    );\n\n    const error = new ErrorWithExtra('', () => ({ shaderModule }));\n    this.eventualAsyncExpectation(async () => {\n      const compilationInfo = await shaderModule!.compilationInfo();\n\n      // MAINTENANCE_TODO: Pretty-print error messages with source context.\n      const messagesLog = compilationInfo.messages\n        .map(m => `${m.lineNum}:${m.linePos}: ${m.type}: ${m.message}`)\n        .join('\\n');\n      error.extra.compilationInfo = compilationInfo;\n\n      if (compilationInfo.messages.some(m => m.type === 'error')) {\n        if (expectedResult) {\n          error.message = `Unexpected compilationInfo 'error' message.\\n` + messagesLog;\n          this.rec.validationFailed(error);\n        } else {\n          error.message = `Found expected compilationInfo 'error' message.\\n` + messagesLog;\n          this.rec.debug(error);\n        }\n      } else {\n        if (!expectedResult) {\n          error.message = `Missing expected compilationInfo 'error' message.\\n` + messagesLog;\n          this.rec.validationFailed(error);\n        } else {\n          error.message = `No compilationInfo 'error' messages, as expected.\\n` + messagesLog;\n          this.rec.debug(error);\n        }\n      }\n    });\n  }\n\n  /**\n   * Wraps the code fragment into an entry point.\n   *\n   * @example\n   * ```ts\n   * t.wrapInEntryPoint(`var i = 0;`);\n   * ```\n   */\n  wrapInEntryPoint(code: string, enabledExtensions: string[] = []) {\n    const enableDirectives = enabledExtensions.map(x => `enable ${x};`).join('\\n      ');\n\n    return `\n      ${enableDirectives}\n\n      @compute @workgroup_size(1)\n      fn main() {\n        ${code}\n      }`;\n  }\n}\n"],"file":"shader_validation_test.js"}