{"version":3,"sources":["../../../../src/webgpu/shader/validation/shader_validation_test.ts"],"names":["ErrorWithExtra","GPUTest","ShaderValidationTest","expectCompileResult","expectedResult","code","shaderModule","expectGPUError","device","createShaderModule","error","eventualAsyncExpectation","compilationInfo","messagesLog","messages","map","m","lineNum","linePos","type","message","join","extra","msg","indexOf","rec","debug","validationFailed","some"],"mappings":";AAAA;AACA,GADA,SAASA,cAAT,QAA+B,8BAA/B,CACA,SAASC,OAAT,QAAwB,mBAAxB;AAEA;AACA;AACA;AACA,OAAO,MAAMC,oBAAN,SAAmCD,OAAnC,CAA2C;AAChD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEE,EAAAA,mBAAmB,CAACC,cAAD,EAAmCC,IAAnC,EAAiD;AAClE,QAAIC,YAAJ;AACA,SAAKC,cAAL;AACE,gBADF;AAEE,UAAM;AACJD,MAAAA,YAAY,GAAG,KAAKE,MAAL,CAAYC,kBAAZ,CAA+B,EAAEJ,IAAF,EAA/B,CAAf;AACD,KAJH;AAKED,IAAAA,cAAc,KAAK,IALrB;;;AAQA,UAAMM,KAAK,GAAG,IAAIV,cAAJ,CAAmB,EAAnB,EAAuB,OAAO,EAAEM,YAAF,EAAP,CAAvB,CAAd;AACA,SAAKK,wBAAL,CAA8B,YAAY;AACxC,YAAMC,eAAe,GAAG,MAAMN,YAAY,CAAEM,eAAd,EAA9B;;AAEA;AACA,YAAMC,WAAW,GAAGD,eAAe,CAACE,QAAhB;AACjBC,MAAAA,GADiB,CACbC,CAAC,IAAK,GAAEA,CAAC,CAACC,OAAQ,IAAGD,CAAC,CAACE,OAAQ,KAAIF,CAAC,CAACG,IAAK,KAAIH,CAAC,CAACI,OAAQ,EAD3C;AAEjBC,MAAAA,IAFiB,CAEZ,IAFY,CAApB;AAGAX,MAAAA,KAAK,CAACY,KAAN,CAAYV,eAAZ,GAA8BA,eAA9B;;AAEA,UAAI,OAAOR,cAAP,KAA0B,QAA9B,EAAwC;AACtC,aAAK,MAAMmB,GAAX,IAAkBX,eAAe,CAACE,QAAlC,EAA4C;AAC1C,cAAIS,GAAG,CAACJ,IAAJ,KAAa,OAAb,IAAwBI,GAAG,CAACH,OAAJ,CAAYI,OAAZ,CAAoBpB,cAApB,MAAwC,CAAC,CAArE,EAAwE;AACtEM,YAAAA,KAAK,CAACU,OAAN;AACG,iEAAoDhB,cAAe,MAApE;AACAS,YAAAA,WAFF;AAGA,iBAAKY,GAAL,CAASC,KAAT,CAAehB,KAAf;AACA;AACD;AACF;;AAED;AACAA,QAAAA,KAAK,CAACU,OAAN,GAAiB,+BAA8BhB,cAAe,MAA9C,GAAsDS,WAAtE;AACA,aAAKY,GAAL,CAASE,gBAAT,CAA0BjB,KAA1B;AACA;AACD;;AAED,UAAIE,eAAe,CAACE,QAAhB,CAAyBc,IAAzB,CAA8BZ,CAAC,IAAIA,CAAC,CAACG,IAAF,KAAW,OAA9C,CAAJ,EAA4D;AAC1D,YAAIf,cAAJ,EAAoB;AAClBM,UAAAA,KAAK,CAACU,OAAN,GAAiB,+CAAD,GAAkDP,WAAlE;AACA,eAAKY,GAAL,CAASE,gBAAT,CAA0BjB,KAA1B;AACD,SAHD,MAGO;AACLA,UAAAA,KAAK,CAACU,OAAN,GAAiB,mDAAD,GAAsDP,WAAtE;AACA,eAAKY,GAAL,CAASC,KAAT,CAAehB,KAAf;AACD;AACF,OARD,MAQO;AACL,YAAI,CAACN,cAAL,EAAqB;AACnBM,UAAAA,KAAK,CAACU,OAAN,GAAiB,qDAAD,GAAwDP,WAAxE;AACA,eAAKY,GAAL,CAASE,gBAAT,CAA0BjB,KAA1B;AACD,SAHD,MAGO;AACLA,UAAAA,KAAK,CAACU,OAAN,GAAiB,qDAAD,GAAwDP,WAAxE;AACA,eAAKY,GAAL,CAASC,KAAT,CAAehB,KAAf;AACD;AACF;AACF,KA3CD;AA4CD,GApE+C","sourcesContent":["import { ErrorWithExtra } from '../../../common/util/util.js';\nimport { GPUTest } from '../../gpu_test.js';\n\n/**\n * Base fixture for WGSL shader validation tests.\n */\nexport class ShaderValidationTest extends GPUTest {\n  /**\n   * Add a test expectation for whether a createShaderModule call succeeds or not.\n   *\n   * @example\n   * ```ts\n   * t.expectCompileResult(true, `wgsl code`); // Expect success\n   * t.expectCompileResult(false, `wgsl code`); // Expect validation error with any error string\n   * t.expectCompileResult('substr', `wgsl code`); // Expect validation error containing 'substr'\n   * ```\n   *\n   * MAINTENANCE_TODO(gpuweb/gpuweb#1813): Remove the \"string\" overload if there are no standard error codes.\n   */\n  expectCompileResult(expectedResult: boolean | string, code: string) {\n    let shaderModule: GPUShaderModule;\n    this.expectGPUError(\n      'validation',\n      () => {\n        shaderModule = this.device.createShaderModule({ code });\n      },\n      expectedResult !== true\n    );\n\n    const error = new ErrorWithExtra('', () => ({ shaderModule }));\n    this.eventualAsyncExpectation(async () => {\n      const compilationInfo = await shaderModule!.compilationInfo();\n\n      // MAINTENANCE_TODO: Pretty-print error messages with source context.\n      const messagesLog = compilationInfo.messages\n        .map(m => `${m.lineNum}:${m.linePos}: ${m.type}: ${m.message}`)\n        .join('\\n');\n      error.extra.compilationInfo = compilationInfo;\n\n      if (typeof expectedResult === 'string') {\n        for (const msg of compilationInfo.messages) {\n          if (msg.type === 'error' && msg.message.indexOf(expectedResult) !== -1) {\n            error.message =\n              `Found expected compilationInfo message substring «${expectedResult}».\\n` +\n              messagesLog;\n            this.rec.debug(error);\n            return;\n          }\n        }\n\n        // Here, no error message was found, but one was expected.\n        error.message = `Missing expected substring «${expectedResult}».\\n` + messagesLog;\n        this.rec.validationFailed(error);\n        return;\n      }\n\n      if (compilationInfo.messages.some(m => m.type === 'error')) {\n        if (expectedResult) {\n          error.message = `Unexpected compilationInfo 'error' message.\\n` + messagesLog;\n          this.rec.validationFailed(error);\n        } else {\n          error.message = `Found expected compilationInfo 'error' message.\\n` + messagesLog;\n          this.rec.debug(error);\n        }\n      } else {\n        if (!expectedResult) {\n          error.message = `Missing expected compilationInfo 'error' message.\\n` + messagesLog;\n          this.rec.validationFailed(error);\n        } else {\n          error.message = `No compilationInfo 'error' messages, as expected.\\n` + messagesLog;\n          this.rec.debug(error);\n        }\n      }\n    });\n  }\n}\n"],"file":"shader_validation_test.js"}