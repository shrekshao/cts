{"version":3,"sources":["../../../../../src/webgpu/shader/validation/parse/literal.spec.ts"],"names":["description","makeTestGroup","ShaderValidationTest","g","test","desc","params","u","combine","beginSubcases","fn","t","code","val","expectCompileResult","wrapInEntryPoint","kAbstractIntNonNegative","Set","kAbstractIntNegative","kI32","kU32","kValidIntegers","kInvalidIntegers","has","kValidI32","kInvalidI32","beforeAllSubcases","includes","selectDeviceOrSkipTestCase","extensionList","kValidU32","kInvalidU32","kF32","kF16","kAbstractFloat","kValidFloats","kInvalidFloats","kInvalidF16s","kValidF32","kInvalidF32","kValidF16","kInvalidF16","unimplemented"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI,+BAArB,CAEP,SAASC,aAAT,QAA8B,4CAA9B;AACA,SAASC,oBAAT,QAAqC,8BAArC;;AAEA,OAAO,MAAMC,CAAC,GAAGF,aAAa,CAACC,oBAAD,CAAvB;;AAEPC,CAAC,CAACC,IAAF,CAAO,OAAP;AACGC,IADH,CACS,qCADT;AAEGC,MAFH,CAEU,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAF,CAAU,KAAV,EAAiB,CAAC,MAAD,EAAS,OAAT,CAAjB,EAAoCC,aAApC,EAFf;AAGGC,EAHH,CAGM,CAAAC,CAAC,KAAI;AACP,QAAMC,IAAI,GAAI,cAAaD,CAAC,CAACL,MAAF,CAASO,GAAI,GAAxC;AACAF,EAAAA,CAAC,CAACG,mBAAF,CAAsB,IAAtB,EAA4BH,CAAC,CAACI,gBAAF,CAAmBH,IAAnB,CAA5B;AACD,CANH;;AAQA,MAAMI,uBAAuB,GAAG,IAAIC,GAAJ,CAAQ;AACtC,OADsC,EAC7B;AACT,KAFsC,EAE/B;AACP,GAHsC,EAGjC;AACL,MAJsC,EAI9B;AACR,YALsC,CAKxB;AALwB,CAAR,CAAhC;;AAQA,MAAMC,oBAAoB,GAAG,IAAID,GAAJ,CAAQ;AACnC,QADmC,EACzB;AACV,MAFmC,EAE3B;AACR,OAHmC,EAG1B;AACT,aAJmC,EAIpB;AACf,aALmC,CAKpB;AALoB,CAAR,CAA7B;;AAQA,MAAME,IAAI,GAAG,IAAIF,GAAJ,CAAQ;AACnB,KADmB,EACZ;AACP,aAFmB,EAEJ;AACf,cAHmB,CAGH;AAHG,CAAR,CAAb;;AAMA,MAAMG,IAAI,GAAG,IAAIH,GAAJ,CAAQ;AACnB,KADmB,EACZ;AACP,IAFmB,EAEb;AACN,aAHmB,CAGJ;AAHI,CAAR,CAAb;;AAMA;AACE,QAAMI,cAAc,GAAG,IAAIJ,GAAJ,CAAQ;AAC7B,KAAGD,uBAD0B;AAE7B,KAAGE,oBAF0B;AAG7B,KAAGC,IAH0B;AAI7B,KAAGC,IAJ0B,CAAR,CAAvB;;AAMA,QAAME,gBAAgB,GAAG,IAAIL,GAAJ,CAAQ;AAC/B,QAD+B,EACvB;AACR,eAF+B,EAEhB;AACf,gBAH+B,EAGf;AAChB,cAJ+B,EAIjB;AACd,eAL+B,EAKhB;AACf,eAN+B,EAMhB;AACf,OAP+B,CAOxB;AAPwB,GAAR,CAAzB;AASAd,EAAAA,CAAC,CAACC,IAAF,CAAO,cAAP;AACGC,EAAAA,IADH,CACS,2EADT;AAEGC,EAAAA,MAFH,CAEU,CAAAC,CAAC;AACPA,EAAAA,CAAC,CAACC,OAAF,CAAU,KAAV,EAAiB,IAAIS,GAAJ,CAAQ,CAAC,GAAGI,cAAJ,EAAoB,GAAGC,gBAAvB,CAAR,CAAjB,EAAoEb,aAApE,EAHJ;;AAKGC,EAAAA,EALH,CAKM,CAAAC,CAAC,KAAI;AACP,UAAMC,IAAI,GAAI,cAAaD,CAAC,CAACL,MAAF,CAASO,GAAI,GAAxC;AACAF,IAAAA,CAAC,CAACG,mBAAF,CAAsBO,cAAc,CAACE,GAAf,CAAmBZ,CAAC,CAACL,MAAF,CAASO,GAA5B,CAAtB,EAAwDF,CAAC,CAACI,gBAAF,CAAmBH,IAAnB,CAAxD;AACD,GARH;AASD;;AAED;AACE,QAAMY,SAAS,GAAG,IAAIP,GAAJ,CAAQ,CAAC,GAAGD,uBAAJ,EAA6B,GAAGE,oBAAhC,EAAsD,GAAGC,IAAzD,CAAR,CAAlB;AACA,QAAMM,WAAW,GAAG,IAAIR,GAAJ,CAAQ;AAC1B,KAAGG,IADuB;AAE1B,cAF0B,EAEZ;AACd,eAH0B,EAGX;AACf,eAJ0B,EAIX;AACf,gBAL0B,EAKV;AAChB,OAN0B,EAMnB;AACP,QAP0B,EAOlB;AACR,QAR0B,CAQlB;AARkB,GAAR,CAApB;AAUAjB,EAAAA,CAAC,CAACC,IAAF,CAAO,KAAP;AACGC,EAAAA,IADH,CACS,yFADT;AAEGC,EAAAA,MAFH,CAEU,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAF,CAAU,KAAV,EAAiB,IAAIS,GAAJ,CAAQ,CAAC,GAAGO,SAAJ,EAAe,GAAGC,WAAlB,CAAR,CAAjB,EAA0DhB,aAA1D,EAFf;AAGGiB,EAAAA,iBAHH,CAGqB,CAAAf,CAAC,KAAI;AACtB,QAAIA,CAAC,CAACL,MAAF,CAASO,GAAT,CAAac,QAAb,CAAsB,GAAtB,CAAJ,EAAgC;AAC9BhB,MAAAA,CAAC,CAACiB,0BAAF,CAA6B,YAA7B;AACD;AACF,GAPH;AAQGlB,EAAAA,EARH,CAQM,CAAAC,CAAC,KAAI;AACP,UAAM,EAAEE,GAAF,KAAUF,CAAC,CAACL,MAAlB;AACA,UAAMM,IAAI,GAAI,mBAAkBC,GAAI,GAApC;AACA,UAAMgB,aAAa,GAAGhB,GAAG,CAACc,QAAJ,CAAa,GAAb,IAAoB,CAAC,KAAD,CAApB,GAA8B,EAApD;AACAhB,IAAAA,CAAC,CAACG,mBAAF,CAAsBU,SAAS,CAACD,GAAV,CAAcV,GAAd,CAAtB,EAA0CF,CAAC,CAACI,gBAAF,CAAmBH,IAAnB,EAAyBiB,aAAzB,CAA1C;AACD,GAbH;AAcD;;AAED;AACE,QAAMC,SAAS,GAAG,IAAIb,GAAJ,CAAQ;AACxB,KAAGD,uBADqB;AAExB,KAAGI,IAFqB;AAGxB,cAHwB,CAGV;AAHU,GAAR,CAAlB;AAKA,QAAMW,WAAW,GAAG,IAAId,GAAJ,CAAQ;AAC1B,KAAGC,oBADuB;AAE1B,KAAGC,IAFuB;AAG1B,cAH0B,EAGZ;AACd,eAJ0B,EAIX;AACf,MAL0B,EAKpB;AACN,OAN0B,EAMnB;AACP,QAP0B,EAOlB;AACR,QAR0B,CAQlB;AARkB,GAAR,CAApB;AAUAhB,EAAAA,CAAC,CAACC,IAAF,CAAO,KAAP;AACGC,EAAAA,IADH;AAEK,+FAFL;;AAIGC,EAAAA,MAJH,CAIU,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAF,CAAU,KAAV,EAAiB,IAAIS,GAAJ,CAAQ,CAAC,GAAGa,SAAJ,EAAe,GAAGC,WAAlB,CAAR,CAAjB,EAA0DtB,aAA1D,EAJf;AAKGiB,EAAAA,iBALH,CAKqB,CAAAf,CAAC,KAAI;AACtB,QAAIA,CAAC,CAACL,MAAF,CAASO,GAAT,CAAac,QAAb,CAAsB,GAAtB,CAAJ,EAAgC;AAC9BhB,MAAAA,CAAC,CAACiB,0BAAF,CAA6B,YAA7B;AACD;AACF,GATH;AAUGlB,EAAAA,EAVH,CAUM,CAAAC,CAAC,KAAI;AACP,UAAM,EAAEE,GAAF,KAAUF,CAAC,CAACL,MAAlB;AACA,UAAMM,IAAI,GAAI,mBAAkBC,GAAI,GAApC;AACA,UAAMgB,aAAa,GAAGhB,GAAG,CAACc,QAAJ,CAAa,GAAb,IAAoB,CAAC,KAAD,CAApB,GAA8B,EAApD;AACAhB,IAAAA,CAAC,CAACG,mBAAF,CAAsBgB,SAAS,CAACP,GAAV,CAAcV,GAAd,CAAtB,EAA0CF,CAAC,CAACI,gBAAF,CAAmBH,IAAnB,EAAyBiB,aAAzB,CAA1C;AACD,GAfH;AAgBD;;AAED,MAAMG,IAAI,GAAG,IAAIf,GAAJ,CAAQ;AACnB,IADmB,EACb;AACN,MAFmB,EAEX;AACR,SAHmB,EAGR;AACX,MAJmB,EAIX;AACR,MALmB,EAKX;AACR,SANmB,EAMR;AACX,SAPmB,EAOR;AACX,QARmB,EAQT;AACV,OATmB,EASV;AACT,SAVmB,CAUR;AAVQ,CAAR,CAAb;;AAaA,MAAMgB,IAAI,GAAG,IAAIhB,GAAJ,CAAQ;AACnB,IADmB,EACb;AACN,IAFmB,EAEb;AACN,KAHmB,EAGZ;AACP,QAJmB,EAIT;AACV,SALmB,EAKR;AACX,SANmB,EAMR;AACX,QAPmB,EAOT;AACV,SARmB,EAQR;AACX,SATmB,EASR;AACX,WAVmB,CAUN;AAVM,CAAR,CAAb;;AAaA,MAAMiB,cAAc,GAAG,IAAIjB,GAAJ,CAAQ;AAC7B,KAD6B,EACtB;AACP,IAF6B,EAEvB;AACN,KAH6B,EAGtB;AACP,QAJ6B,EAInB;AACV,KAL6B,EAKtB;AACP,OAN6B,EAMpB;AACT,OAP6B,EAOpB;AACT,QAR6B,EAQnB;AACV,QAT6B,EASnB;AACV,OAV6B,EAUpB;AACT,MAX6B,EAWrB;AACR,MAZ6B,EAYrB;AACR,UAb6B,EAajB;AACZ,UAd6B,EAcjB;AACZ,UAf6B,EAejB;AACZ,UAhB6B,CAgBjB;AAhBiB,CAAR,CAAvB;;AAmBA;AACE,QAAMkB,YAAY,GAAG,IAAIlB,GAAJ,CAAQ,CAAC,GAAGe,IAAJ,EAAU,GAAGC,IAAb,EAAmB,GAAGC,cAAtB,CAAR,CAArB;AACA,QAAME,cAAc,GAAG,IAAInB,GAAJ,CAAQ;AAC7B,MAD6B,EACvB;AACN,QAF6B,EAErB;AACR,UAH6B,EAGnB;AACV,QAJ6B,EAIrB;AACR,SAL6B,EAKpB;AACT,SAN6B,EAMpB;AACT,QAP6B,EAOrB;AACR,SAR6B,EAQpB;AACT,sBAT6B,EASP;AACtB,wBAV6B,EAUL;AACxB,mBAX6B,CAWV;AAXU,GAAR,CAAvB;AAaA,QAAMoB,YAAY,GAAG,IAAIpB,GAAJ,CAAQ;AAC3B,SAD2B,EAClB;AACT,WAF2B,EAEhB;AACX,UAH2B,EAGjB;AACV,gBAJ2B,EAIX;AAChB,kBAL2B,EAKT;AAClB,SAN2B,EAMlB;AACT,QAP2B,CAOnB;AAPmB,GAAR,CAArB;;AAUAd,EAAAA,CAAC,CAACC,IAAF,CAAO,gBAAP;AACGC,EAAAA,IADH,CACS,sEADT;AAEGC,EAAAA,MAFH,CAEU,CAAAC,CAAC;AACPA,EAAAA,CAAC;AACEC,EAAAA,OADH,CACW,KADX,EACkB,IAAIS,GAAJ,CAAQ,CAAC,GAAGkB,YAAJ,EAAkB,GAAGC,cAArB,EAAqC,GAAGC,YAAxC,CAAR,CADlB;AAEG5B,EAAAA,aAFH,EAHJ;;AAOGiB,EAAAA,iBAPH,CAOqB,CAAAf,CAAC,KAAI;AACtB,QAAIsB,IAAI,CAACV,GAAL,CAASZ,CAAC,CAACL,MAAF,CAASO,GAAlB,KAA0BwB,YAAY,CAACd,GAAb,CAAiBZ,CAAC,CAACL,MAAF,CAASO,GAA1B,CAA9B,EAA8D;AAC5DF,MAAAA,CAAC,CAACiB,0BAAF,CAA6B,YAA7B;AACD;AACF,GAXH;AAYGlB,EAAAA,EAZH,CAYM,CAAAC,CAAC,KAAI;AACP,UAAMC,IAAI,GAAI,cAAaD,CAAC,CAACL,MAAF,CAASO,GAAI,GAAxC;AACA,UAAMgB,aAAa,GAAGI,IAAI,CAACV,GAAL,CAASZ,CAAC,CAACL,MAAF,CAASO,GAAlB,KAA0BwB,YAAY,CAACd,GAAb,CAAiBZ,CAAC,CAACL,MAAF,CAASO,GAA1B,CAA1B,GAA2D,CAAC,KAAD,CAA3D,GAAqE,EAA3F;AACAF,IAAAA,CAAC,CAACG,mBAAF;AACEqB,IAAAA,YAAY,CAACZ,GAAb,CAAiBZ,CAAC,CAACL,MAAF,CAASO,GAA1B,CADF;AAEEF,IAAAA,CAAC,CAACI,gBAAF,CAAmBH,IAAnB,EAAyBiB,aAAzB,CAFF;;AAID,GAnBH;AAoBD;;AAED;AACE,QAAMS,SAAS,GAAG,IAAIrB,GAAJ,CAAQ;AACxB,KAAGe,IADqB;AAExB,KAAGE,cAFqB;AAGxB,KAHwB,EAGnB;AACL,MAJwB,CAIlB;AAJkB,GAAR,CAAlB;AAMA,QAAMK,WAAW,GAAG,IAAItB,GAAJ,CAAQ;AAC1B,KAAGgB,IADuB,EACjB;AACT,MAF0B,EAEpB;AACN,MAH0B,EAGpB;AACN,MAJ0B,EAIpB;AACN,MAL0B,EAKpB;AACN,QAN0B,EAMlB;AACR,UAP0B,EAOhB;AACV,QAR0B,EAQlB;AACR,SAT0B,EASjB;AACT,SAV0B,EAUjB;AACT,QAX0B,EAWlB;AACR,SAZ0B,EAYjB;AACT,sBAb0B,EAaJ;AACtB,wBAd0B,EAcF;AACxB,mBAf0B,CAeP;AAfO,GAAR,CAApB;;AAkBA9B,EAAAA,CAAC,CAACC,IAAF,CAAO,KAAP;AACGC,EAAAA,IADH,CACS,sEADT;AAEGC,EAAAA,MAFH,CAEU,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAF,CAAU,KAAV,EAAiB,IAAIS,GAAJ,CAAQ,CAAC,GAAGqB,SAAJ,EAAe,GAAGC,WAAlB,CAAR,CAAjB,EAA0D9B,aAA1D,EAFf;AAGGiB,EAAAA,iBAHH,CAGqB,CAAAf,CAAC,KAAI;AACtB,QAAIsB,IAAI,CAACV,GAAL,CAASZ,CAAC,CAACL,MAAF,CAASO,GAAlB,CAAJ,EAA4B;AAC1BF,MAAAA,CAAC,CAACiB,0BAAF,CAA6B,YAA7B;AACD;AACF,GAPH;AAQGlB,EAAAA,EARH,CAQM,CAAAC,CAAC,KAAI;AACP,UAAM,EAAEE,GAAF,KAAUF,CAAC,CAACL,MAAlB;AACA,UAAMM,IAAI,GAAI,mBAAkBC,GAAI,GAApC;AACA,UAAMgB,aAAa,GAAGI,IAAI,CAACV,GAAL,CAASV,GAAT,IAAgB,CAAC,KAAD,CAAhB,GAA0B,EAAhD;AACAF,IAAAA,CAAC,CAACG,mBAAF,CAAsBwB,SAAS,CAACf,GAAV,CAAcV,GAAd,CAAtB,EAA0CF,CAAC,CAACI,gBAAF,CAAmBH,IAAnB,EAAyBiB,aAAzB,CAA1C;AACD,GAbH;AAcD;;AAED;AACE,QAAMW,SAAS,GAAG,IAAIvB,GAAJ,CAAQ;AACxB,KAAGgB,IADqB;AAExB,KAAGC,cAFqB;AAGxB,KAHwB,EAGnB;AACL,MAJwB,CAIlB;AAJkB,GAAR,CAAlB;AAMA,QAAMO,WAAW,GAAG,IAAIxB,GAAJ,CAAQ;AAC1B,KAAGe,IADuB;AAE1B,MAF0B,EAEpB;AACN,MAH0B,EAGpB;AACN,MAJ0B,EAIpB;AACN,SAL0B,EAKjB;AACT,WAN0B,EAMf;AACX,UAP0B,EAOhB;AACV,gBAR0B,EAQV;AAChB,kBAT0B,CASR;AATQ,GAAR,CAApB;;AAYA7B,EAAAA,CAAC,CAACC,IAAF,CAAO,KAAP;AACGC,EAAAA,IADH;AAEK;AACP;AACA;AACA;AACA,CANE;;AAQGC,EAAAA,MARH,CAQU,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAF,CAAU,KAAV,EAAiB,IAAIS,GAAJ,CAAQ,CAAC,GAAGuB,SAAJ,EAAe,GAAGC,WAAlB,CAAR,CAAjB,EAA0DhC,aAA1D,EARf;AASGiC,EAAAA,aATH;AAUD","sourcesContent":["export const description = `Validation tests for literals`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { ShaderValidationTest } from '../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('bools')\n  .desc(`Test that valid bools are accepted.`)\n  .params(u => u.combine('val', ['true', 'false']).beginSubcases())\n  .fn(t => {\n    const code = `var test = ${t.params.val};`;\n    t.expectCompileResult(true, t.wrapInEntryPoint(code));\n  });\n\nconst kAbstractIntNonNegative = new Set([\n  '0x123', // hex number\n  '123', // signed number, no suffix\n  '0', // zero\n  '0x3f', // hex with 'f' as last character\n  '2147483647', // max signed int\n]);\n\nconst kAbstractIntNegative = new Set([\n  '-0x123', // hex number\n  '-123', // signed number, no suffix\n  '-0x3f', // hex with 'f' as last character\n  '-2147483647', // nagative of max signed int\n  '-2147483648', // min signed int\n]);\n\nconst kI32 = new Set([\n  '94i', // signed number\n  '2147483647i', // max signed int\n  '-2147483648i', // min signed int\n]);\n\nconst kU32 = new Set([\n  '42u', // unsigned number\n  '0u', // min unsigned int\n  '4294967295u', // max unsigned int\n]);\n\n{\n  const kValidIntegers = new Set([\n    ...kAbstractIntNonNegative,\n    ...kAbstractIntNegative,\n    ...kI32,\n    ...kU32,\n  ]);\n  const kInvalidIntegers = new Set([\n    '0123', // Integer does not start with zero\n    '2147483648i', // max signed int + 1\n    '-2147483649i', // min signed int - 1\n    '4294967295', // a untyped lhs will be i32, so this is too big\n    '4294967295i', // max unsigned int with i suffix\n    '4294967296u', // max unsigned int + 1\n    '-1u', // negative unsigned\n  ]);\n  g.test('abstract_int')\n    .desc(`Test that valid integers are accepted, and invalid integers are rejected.`)\n    .params(u =>\n      u.combine('val', new Set([...kValidIntegers, ...kInvalidIntegers])).beginSubcases()\n    )\n    .fn(t => {\n      const code = `var test = ${t.params.val};`;\n      t.expectCompileResult(kValidIntegers.has(t.params.val), t.wrapInEntryPoint(code));\n    });\n}\n\n{\n  const kValidI32 = new Set([...kAbstractIntNonNegative, ...kAbstractIntNegative, ...kI32]);\n  const kInvalidI32 = new Set([\n    ...kU32,\n    '2147483648', // max signed int + 1\n    '2147483648i', // max signed int + 1\n    '-2147483649', // min signed int - 1\n    '-2147483649i', // min signed int - 1\n    '1.0', // no conversion from float\n    '1.0f', // no conversion from float\n    '1.0h', // no conversion from float\n  ]);\n  g.test('i32')\n    .desc(`Test that valid signed integers are accepted, and invalid signed integers are rejected.`)\n    .params(u => u.combine('val', new Set([...kValidI32, ...kInvalidI32])).beginSubcases())\n    .beforeAllSubcases(t => {\n      if (t.params.val.includes('h')) {\n        t.selectDeviceOrSkipTestCase('shader-f16');\n      }\n    })\n    .fn(t => {\n      const { val } = t.params;\n      const code = `var test: i32 = ${val};`;\n      const extensionList = val.includes('h') ? ['f16'] : [];\n      t.expectCompileResult(kValidI32.has(val), t.wrapInEntryPoint(code, extensionList));\n    });\n}\n\n{\n  const kValidU32 = new Set([\n    ...kAbstractIntNonNegative,\n    ...kU32,\n    '4294967295', // max unsigned\n  ]);\n  const kInvalidU32 = new Set([\n    ...kAbstractIntNegative,\n    ...kI32,\n    '4294967296', // max unsigned int + 1\n    '4294967296u', // min unsigned int + 1\n    '-1', // min unsigned int - 1\n    '1.0', // no conversion from float\n    '1.0f', // no conversion from float\n    '1.0h', // no conversion from float\n  ]);\n  g.test('u32')\n    .desc(\n      `Test that valid unsigned integers are accepted, and invalid unsigned integers are rejected.`\n    )\n    .params(u => u.combine('val', new Set([...kValidU32, ...kInvalidU32])).beginSubcases())\n    .beforeAllSubcases(t => {\n      if (t.params.val.includes('h')) {\n        t.selectDeviceOrSkipTestCase('shader-f16');\n      }\n    })\n    .fn(t => {\n      const { val } = t.params;\n      const code = `var test: u32 = ${val};`;\n      const extensionList = val.includes('h') ? ['f16'] : [];\n      t.expectCompileResult(kValidU32.has(val), t.wrapInEntryPoint(code, extensionList));\n    });\n}\n\nconst kF32 = new Set([\n  '0f', // Zero float\n  '0.0f', // Zero float\n  '12.223f', // float value\n  '12.f', // .f\n  '.12f', // No leading number with a f\n  '2.4e+4f', // Positive exponent with f suffix\n  '2.4e-2f', // Negative exponent with f suffix\n  '2.e+4f', // Exponent without decimals\n  '1e-4f', // Exponennt without decimal point\n  '0x1P+4f', // Hex float no decimal\n]);\n\nconst kF16 = new Set([\n  '0h', // Zero half\n  '1h', // Half no decimal\n  '.1h', // Half no leading value\n  '1.1e2h', // Exponent half no sign\n  '1.1E+2h', // Exponent half, plus (uppercase E)\n  '2.4e-2h', // Exponent half, negative\n  '0xep2h', // Hexfloat half lower case p\n  '0xEp-2h', // Hexfloat uppcase hex value\n  '0x3p+2h', // Hex float half positive exponent\n  '0x3.2p+2h', // Hex float with decimal half\n]);\n\nconst kAbstractFloat = new Set([\n  '0.0', // Zero float without suffix\n  '.0', // Zero float without leading value\n  '12.', // No decimal points\n  '00012.', // Leading zeros allowed\n  '.12', // No leading digits\n  '1.2e2', // Exponent without sign (lowercase e)\n  '1.2E2', // Exponent without sign (uppercase e)\n  '1.2e+2', // positive exponent\n  '2.4e-2', // Negative exponent\n  '.1e-2', // Exponent without leading number\n  '0x.3', // Hex float, lowercase X\n  '0X.3', // Hex float, uppercase X\n  '0xa.fp+2', // Hex float, lowercase p\n  '0xa.fP+2', // Hex float, uppercase p\n  '0xE.fp+2', // Uppercase E (as hex, but matches non hex exponent char)\n  '0X1.fp-4', // Hex float negative exponent\n]);\n\n{\n  const kValidFloats = new Set([...kF32, ...kF16, ...kAbstractFloat]);\n  const kInvalidFloats = new Set([\n    '.f', // Must have a number\n    '.e-2', // Exponent without leading values\n    '1.e&2f', // Exponent invalid sign\n    '1.ef', // Exponent without value\n    '1.e+f', // Exponent sign no value\n    '0x.p2', // Hex float no value\n    '0x1p', // Hex float missing exponent\n    '0x1p^', // Hex float invalid exponent\n    '1.0e+999999999999f', // Too big\n    '0x1.0p+999999999999f', // Too big hex\n    '0x1.00000001pf0', // Mantissa too big\n  ]);\n  const kInvalidF16s = new Set([\n    '1.1eh', // Missing exponent value\n    '1.1e%2h', // Invalid exponent sign\n    '1.1e+h', // Missing exponent with sign\n    '1.0e+999999h', // Too large\n    '0x1.0p+999999h', // Too large hex\n    '0xf.h', // Having suffix \"h\" without \"p\" or \"P\"\n    '0x3h', // Having suffix \"h\" without \"p\" or \"P\"\n  ]);\n\n  g.test('abstract_float')\n    .desc(`Test that valid floats are accepted, and invalid floats are rejected`)\n    .params(u =>\n      u\n        .combine('val', new Set([...kValidFloats, ...kInvalidFloats, ...kInvalidF16s]))\n        .beginSubcases()\n    )\n    .beforeAllSubcases(t => {\n      if (kF16.has(t.params.val) || kInvalidF16s.has(t.params.val)) {\n        t.selectDeviceOrSkipTestCase('shader-f16');\n      }\n    })\n    .fn(t => {\n      const code = `var test = ${t.params.val};`;\n      const extensionList = kF16.has(t.params.val) || kInvalidF16s.has(t.params.val) ? ['f16'] : [];\n      t.expectCompileResult(\n        kValidFloats.has(t.params.val),\n        t.wrapInEntryPoint(code, extensionList)\n      );\n    });\n}\n\n{\n  const kValidF32 = new Set([\n    ...kF32,\n    ...kAbstractFloat,\n    '1', // AbstractInt\n    '-1', // AbstractInt\n  ]);\n  const kInvalidF32 = new Set([\n    ...kF16, // no conversion\n    '1u', // unsigned\n    '1i', // signed\n    '1h', // half float\n    '.f', // Must have a number\n    '.e-2', // Exponent without leading values\n    '1.e&2f', // Exponent invalid sign\n    '1.ef', // Exponent without value\n    '1.e+f', // Exponent sign no value\n    '0x.p2', // Hex float no value\n    '0x1p', // Hex float missing exponent\n    '0x1p^', // Hex float invalid exponent\n    '1.0e+999999999999f', // Too big\n    '0x1.0p+999999999999f', // Too big hex\n    '0x1.00000001pf0', // Mantissa too big\n  ]);\n\n  g.test('f32')\n    .desc(`Test that valid floats are accepted, and invalid floats are rejected`)\n    .params(u => u.combine('val', new Set([...kValidF32, ...kInvalidF32])).beginSubcases())\n    .beforeAllSubcases(t => {\n      if (kF16.has(t.params.val)) {\n        t.selectDeviceOrSkipTestCase('shader-f16');\n      }\n    })\n    .fn(t => {\n      const { val } = t.params;\n      const code = `var test: f32 = ${val};`;\n      const extensionList = kF16.has(val) ? ['f16'] : [];\n      t.expectCompileResult(kValidF32.has(val), t.wrapInEntryPoint(code, extensionList));\n    });\n}\n\n{\n  const kValidF16 = new Set([\n    ...kF16,\n    ...kAbstractFloat,\n    '1', // AbstractInt\n    '-1', // AbstractInt\n  ]);\n  const kInvalidF16 = new Set([\n    ...kF32,\n    '1i', // signed int\n    '1u', // unsigned int\n    '1f', // no conversion from f32 to f16\n    '1.1eh', // Missing exponent value\n    '1.1e%2h', // Invalid exponent sign\n    '1.1e+h', // Missing exponent with sign\n    '1.0e+999999h', // Too large\n    '0x1.0p+999999h', // Too large hex\n  ]);\n\n  g.test('f16')\n    .desc(\n      `\nTest that valid half floats are accepted, and invalid half floats are rejected\n\nTODO: Need to inject the 'enable fp16' into the shader to enable the parsing.\n`\n    )\n    .params(u => u.combine('val', new Set([...kValidF16, ...kInvalidF16])).beginSubcases())\n    .unimplemented();\n}\n"],"file":"literal.spec.js"}