{"version":3,"sources":["../../../../../src/webgpu/shader/validation/parse/comments.spec.ts"],"names":["description","makeTestGroup","ShaderValidationTest","g","test","desc","fn","t","code","expectCompileResult","params","u","combine","beginSubcases","blankspace","includes","terminated"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI,+BAArB,CAEP,SAASC,aAAT,QAA8B,4CAA9B;AACA,SAASC,oBAAT,QAAqC,8BAArC;;AAEA,OAAO,MAAMC,CAAC,GAAGF,aAAa,CAACC,oBAAD,CAAvB;;AAEPC,CAAC,CAACC,IAAF,CAAO,UAAP;AACGC,IADH,CACS,oEADT;AAEGC,EAFH,CAEM,CAAAC,CAAC,KAAI;AACP,QAAMC,IAAI,GAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAbI;AAcAD,EAAAA,CAAC,CAACE,mBAAF,CAAsB,IAAtB,EAA4BD,IAA5B;AACD,CAlBH;;AAoBAL,CAAC,CAACC,IAAF,CAAO,kBAAP;AACGC,IADH,CACS,0CADT;AAEGC,EAFH,CAEM,CAAAC,CAAC,KAAI;AACP,QAAMC,IAAI,GAAI;AAClB;AACA;AACA;AACA;AACA,kCALI;AAMAD,EAAAA,CAAC,CAACE,mBAAF,CAAsB,IAAtB,EAA4BD,IAA5B;AACD,CAVH;;AAYAL,CAAC,CAACC,IAAF,CAAO,0BAAP;AACGC,IADH,CACS,kFADT;AAEGK,MAFH,CAEU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,YADX,EACyB;AACrB,CAAC,GAAD,EAAM,OAAN,CADqB;AAErB,CAAC,IAAD,EAAO,KAAP,CAFqB;AAGrB,CAAC,QAAD,EAAW,WAAX,CAHqB;AAIrB,CAAC,QAAD,EAAW,cAAX,CAJqB;AAKrB,CAAC,QAAD,EAAW,WAAX,CALqB;AAMrB,CAAC,QAAD,EAAW,iBAAX,CANqB;AAOrB,CAAC,cAAD,EAAiB,2BAAjB,CAPqB;AAQrB,CAAC,QAAD,EAAW,WAAX,CARqB;AASrB,CAAC,QAAD,EAAW,gBAAX,CATqB;AAUrB,CAAC,QAAD,EAAW,qBAAX,CAVqB,CADzB;;AAaGC,aAbH,EAHJ;;AAkBGP,EAlBH,CAkBM,CAAAC,CAAC,KAAI;AACP,QAAMC,IAAI,GAAI,kBAAiBD,CAAC,CAACG,MAAF,CAASI,UAAT,CAAoB,CAApB,CAAuB,6CAAtD;;AAEAP,EAAAA,CAAC,CAACE,mBAAF,CAAsB,CAAC,GAAD,EAAM,IAAN,EAAYM,QAAZ,CAAqBR,CAAC,CAACG,MAAF,CAASI,UAAT,CAAoB,CAApB,CAArB,CAAtB,EAAoEN,IAApE;AACD,CAtBH;;AAwBAL,CAAC,CAACC,IAAF,CAAO,4BAAP;AACGC,IADH,CACS,sDADT;AAEGK,MAFH,CAEU,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAF,CAAU,YAAV,EAAwB,CAAC,IAAD,EAAO,KAAP,CAAxB,EAAuCC,aAAvC,EAFf;AAGGP,EAHH,CAGM,CAAAC,CAAC,KAAI;AACP,QAAMC,IAAI,GAAI;AAClB;AACA;AACA;AACA,GAAGD,CAAC,CAACG,MAAF,CAASM,UAAT,GAAsB,IAAtB,GAA6B,EAAG,EAJ/B;;AAMAT,EAAAA,CAAC,CAACE,mBAAF,CAAsBF,CAAC,CAACG,MAAF,CAASM,UAA/B,EAA2CR,IAA3C;AACD,CAXH","sourcesContent":["export const description = `Validation tests for comments`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { ShaderValidationTest } from '../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('comments')\n  .desc(`Test that valid comments are handled correctly, including nesting.`)\n  .fn(t => {\n    const code = `\n/**\n * Here is my shader.\n *\n * /* I can nest /**/ comments. */\n * // I can nest line comments too.\n **/\n@fragment // This is the stage\nfn main(/*\nno\nparameters\n*/) -> @location(0) vec4<f32> {\n  return/*block_comments_delimit_tokens*/vec4<f32>(.4, .2, .3, .1);\n}/* terminated block comments are OK at EOF...*/`;\n    t.expectCompileResult(true, code);\n  });\n\ng.test('line_comment_eof')\n  .desc(`Test that line comments can come at EOF.`)\n  .fn(t => {\n    const code = `\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n// line comments are OK at EOF...`;\n    t.expectCompileResult(true, code);\n  });\n\ng.test('line_comment_terminators')\n  .desc(`Test that line comments are terminated by any blankspace other than space and \\t`)\n  .params(u =>\n    u\n      .combine('blankspace', [\n        [' ', 'space'],\n        ['\\t', 'tab'],\n        ['\\u000a', 'line_feed'],\n        ['\\u000b', 'vertical_tab'],\n        ['\\u000c', 'form_feed'],\n        ['\\u000d', 'carriage_return'],\n        ['\\u000d\\u000a', 'carriage_return_line_feed'],\n        ['\\u0085', 'next_line'],\n        ['\\u2028', 'line_separator'],\n        ['\\u2029', 'paragraph_separator'],\n      ])\n      .beginSubcases()\n  )\n  .fn(t => {\n    const code = `// Line comment${t.params.blankspace[0]}const invalid_outside_comment = should_fail`;\n\n    t.expectCompileResult([' ', '\\t'].includes(t.params.blankspace[0]), code);\n  });\n\ng.test('unterminated_block_comment')\n  .desc(`Test that unterminated block comments cause an error`)\n  .params(u => u.combine('terminated', [true, false]).beginSubcases())\n  .fn(t => {\n    const code = `\n/**\n * Unterminated block comment.\n *\n ${t.params.terminated ? '*/' : ''}`;\n\n    t.expectCompileResult(t.params.terminated, code);\n  });\n"],"file":"comments.spec.js"}