{"version":3,"file":"align.spec.js","names":["description","makeTestGroup","ShaderValidationTest","g","kValidAlign","Set","kInvalidAlign","test","desc","params","u","combine","fn","t","v","align","replace","code","expectCompileResult","has","name","storage","uniform","beginSubcases","beforeAllSubcases","type","includes","selectDeviceOrSkipTestCase","address_space","startsWith","skip","fails"],"sources":["../../../../../src/webgpu/shader/validation/parse/align.spec.ts"],"sourcesContent":["export const description = `Validation tests for @align`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { ShaderValidationTest } from '../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\nconst kValidAlign = new Set([\n  '',\n  '@align(1)',\n  '@align(4)',\n  '@align(4i)',\n  '@align(4u)',\n  '@align(0x4)',\n  '@align(4,)',\n  '@align(u_val)',\n  '@align(i_val)',\n  '@align(i_val + 4 - 6)',\n  '@align(1073741824)',\n  '@\\talign\\t(4)',\n  '@/^comment^/align/^comment^/(4)',\n]);\nconst kInvalidAlign = new Set([\n  '@malign(4)',\n  '@align()',\n  '@align 4)',\n  '@align(4',\n  '@align(4, 2)',\n  '@align(4,)',\n  '@align(3)', // Not a power of 2\n  '@align(f_val)',\n  '@align(1.0)',\n  '@align(4f)',\n  '@align(4h)',\n  '@align',\n  '@align(0)',\n  '@align(-4)',\n  '@align(2147483646)', // Not a power of 2\n  '@align(2147483648)', // Larger then max i32\n]);\n\ng.test('align_parsing')\n  .desc(`Test that @align is parsed correctly.`)\n  .params(u => u.combine('align', new Set([...kValidAlign, ...kInvalidAlign])))\n  .fn(t => {\n    const v = t.params.align.replace(/\\^/g, '*');\n    const code = `\nconst i_val: i32 = 4;\nconst u_val: u32 = 4;\nconst f_val: f32 = 4.2;\nstruct B {\n  ${v} a: i32,\n}\n\n@group(0) @binding(0)\nvar<uniform> uniform_buffer: B;\n\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}`;\n    t.expectCompileResult(kValidAlign.has(t.params.align), code);\n  });\n\ng.test('align_required_alignment')\n  .desc('Test that the align with an invalid size is an error')\n  .params(u =>\n    u\n      .combine('address_space', ['storage', 'uniform'])\n      // These test a few cases:\n      //  * 1 -- Invalid, alignment smaller then all the required alignments\n      //  * alignment -- Valid, the required alignment\n      //  * 32 -- Valid, an alignment larger then the required alignment.\n      .combine('align', [1, 2, 'alignment', 32])\n      .combine('type', [\n        { name: 'i32', storage: 4, uniform: 4 },\n        { name: 'u32', storage: 4, uniform: 4 },\n        { name: 'f32', storage: 4, uniform: 4 },\n        { name: 'f16', storage: 2, uniform: 2 },\n        { name: 'atomic<i32>', storage: 4, uniform: 4 },\n        { name: 'vec2<i32>', storage: 8, uniform: 8 },\n        { name: 'vec2<f16>', storage: 4, uniform: 4 },\n        { name: 'vec3<u32>', storage: 16, uniform: 16 },\n        { name: 'vec3<f16>', storage: 8, uniform: 8 },\n        { name: 'vec4<f32>', storage: 16, uniform: 16 },\n        { name: 'vec4<f16>', storage: 8, uniform: 8 },\n        { name: 'mat2x2<f32>', storage: 8, uniform: 8 },\n        { name: 'mat3x2<f32>', storage: 8, uniform: 8 },\n        { name: 'mat4x2<f32>', storage: 8, uniform: 8 },\n        { name: 'mat2x2<f16>', storage: 4, uniform: 4 },\n        { name: 'mat3x2<f16>', storage: 4, uniform: 4 },\n        { name: 'mat4x2<f16>', storage: 4, uniform: 4 },\n        { name: 'mat2x3<f32>', storage: 16, uniform: 16 },\n        { name: 'mat3x3<f32>', storage: 16, uniform: 16 },\n        { name: 'mat4x3<f32>', storage: 16, uniform: 16 },\n        { name: 'mat2x3<f16>', storage: 8, uniform: 8 },\n        { name: 'mat3x3<f16>', storage: 8, uniform: 8 },\n        { name: 'mat4x3<f16>', storage: 8, uniform: 8 },\n        { name: 'mat2x4<f32>', storage: 16, uniform: 16 },\n        { name: 'mat3x4<f32>', storage: 16, uniform: 16 },\n        { name: 'mat4x4<f32>', storage: 16, uniform: 16 },\n        { name: 'mat2x4<f16>', storage: 8, uniform: 8 },\n        { name: 'mat3x4<f16>', storage: 8, uniform: 8 },\n        { name: 'mat4x4<f16>', storage: 8, uniform: 8 },\n        { name: 'array<vec2<i32>, 2>', storage: 8, uniform: 16 },\n        { name: 'array<vec4<i32>, 2>', storage: 8, uniform: 16 },\n        { name: 'S', storage: 8, uniform: 16 },\n      ])\n      .beginSubcases()\n  )\n  .beforeAllSubcases(t => {\n    if (t.params.type.name.includes('f16')) {\n      t.selectDeviceOrSkipTestCase('shader-f16');\n    }\n  })\n  .fn(t => {\n    // While this would fail validation, it doesn't fail for any reasons related to alignment.\n    // Atomics are not allowed in uniform address space as they have to be read_write.\n    if (t.params.address_space === 'uniform' && t.params.type.name.startsWith('atomic')) {\n      t.skip('No atomics in uniform address space');\n    }\n\n    let code = '';\n    if (t.params.type.name.includes('f16')) {\n      code += 'enable f16;\\n';\n    }\n\n    // Testing the struct case, generate the structf\n    if (t.params.type.name === 'S') {\n      code += `struct S {\n        a: mat4x2<f32>,          // Align 8\n        b: array<vec${\n          t.params.address_space === 'storage' ? 2 : 4\n        }<i32>, 2>,  // Storage align 8, uniform 16\n      }\n      `;\n    }\n\n    let align = t.params.align;\n    if (t.params.align === 'alignment') {\n      // Alignment value listed in the spec\n      if (t.params.address_space === 'storage') {\n        align = `${t.params.type.storage}`;\n      } else {\n        align = `${t.params.type.uniform}`;\n      }\n    }\n\n    let address_space = 'uniform';\n    if (t.params.address_space === 'storage') {\n      // atomics require read_write, not just the default of read\n      address_space = 'storage, read_write';\n    }\n\n    code += `struct MyStruct {\n      @align(${align}) a: ${t.params.type.name},\n    }\n\n    @group(0) @binding(0)\n    var<${address_space}> a : MyStruct;`;\n\n    code += `\n    @fragment\n    fn main() -> @location(0) vec4<f32> {\n      return vec4<f32>(.4, .2, .3, .1);\n    }`;\n\n    const fails =\n      // An alignment of 1 is never valid as it is smaller then all required alignments.\n      t.params.align === 1 ||\n      // Except for f16, 2 should also fail as being too small.\n      (t.params.align === 2 && t.params.type.name !== 'f16') ||\n      // An array of `vec2` in uniform will not validate because, while the alignment on the array\n      // itself is fine, the `vec2` element inside the array will have the wrong alignment. Uniform\n      // requires that inner vec2 to have an align 16 which can only be done by specifying `vec4`\n      // instead.\n      (t.params.address_space === 'uniform' && t.params.type.name.startsWith('array<vec2'));\n\n    t.expectCompileResult(!fails, code);\n  });\n"],"mappings":"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,CAAC,EAAEC,OAAO,EAAE,CAAC,CAAC,CAAC;AAC/C,EAAEF,IAAI,EAAE,aAAa,EAAEC,OAAO,EAAE,CAAC,EAAEC,OAAO,EAAE,CAAC,CAAC,CAAC;AAC/C,EAAEF,IAAI,EAAE,aAAa,EAAEC,OAAO,EAAE,CAAC,EAAEC,OAAO,EAAE,CAAC,CAAC,CAAC;AAC/C,EAAEF,IAAI,EAAE,aAAa,EAAEC,OAAO,EAAE,CAAC,EAAEC,OAAO,EAAE,CAAC,CAAC,CAAC;AAC/C,EAAEF,IAAI,EAAE,aAAa,EAAEC,OAAO,EAAE,CAAC,EAAEC,OAAO,EAAE,CAAC,CAAC,CAAC;AAC/C,EAAEF,IAAI,EAAE,aAAa,EAAEC,OAAO,EAAE,EAAE,EAAEC,OAAO,EAAE,EAAE,CAAC,CAAC;AACjD,EAAEF,IAAI,EAAE,aAAa,EAAEC,OAAO,EAAE,EAAE,EAAEC,OAAO,EAAE,EAAE,CAAC,CAAC;AACjD,EAAEF,IAAI,EAAE,aAAa,EAAEC,OAAO,EAAE,EAAE,EAAEC,OAAO,EAAE,EAAE,CAAC,CAAC;AACjD,EAAEF,IAAI,EAAE,aAAa,EAAEC,OAAO,EAAE,CAAC,EAAEC,OAAO,EAAE,CAAC,CAAC,CAAC;AAC/C,EAAEF,IAAI,EAAE,aAAa,EAAEC,OAAO,EAAE,CAAC,EAAEC,OAAO,EAAE,CAAC,CAAC,CAAC;AAC/C,EAAEF,IAAI,EAAE,aAAa,EAAEC,OAAO,EAAE,CAAC,EAAEC,OAAO,EAAE,CAAC,CAAC,CAAC;AAC/C,EAAEF,IAAI,EAAE,aAAa,EAAEC,OAAO,EAAE,EAAE,EAAEC,OAAO,EAAE,EAAE,CAAC,CAAC;AACjD,EAAEF,IAAI,EAAE,aAAa,EAAEC,OAAO,EAAE,EAAE,EAAEC,OAAO,EAAE,EAAE,CAAC,CAAC;AACjD,EAAEF,IAAI,EAAE,aAAa,EAAEC,OAAO,EAAE,EAAE,EAAEC,OAAO,EAAE,EAAE,CAAC,CAAC;AACjD,EAAEF,IAAI,EAAE,aAAa,EAAEC,OAAO,EAAE,CAAC,EAAEC,OAAO,EAAE,CAAC,CAAC,CAAC;AAC/C,EAAEF,IAAI,EAAE,aAAa,EAAEC,OAAO,EAAE,CAAC,EAAEC,OAA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"}