{"version":3,"sources":["../../../../../src/webgpu/shader/validation/parse/builtin.spec.ts"],"names":["description","makeTestGroup","ShaderValidationTest","g","kValidBuiltin","Set","kInvalidBuiltin","test","desc","params","u","combine","fn","t","v","builtin","replace","code","expectCompileResult","has"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI,+BAArB,CAEP,SAASC,aAAT,QAA8B,4CAA9B;AACA,SAASC,oBAAT,QAAqC,8BAArC;;AAEA,OAAO,MAAMC,CAAC,GAAGF,aAAa,CAACC,oBAAD,CAAvB;;AAEP,MAAME,aAAa,GAAG,IAAIC,GAAJ,CAAQ;AAC3B,oBAD2B;AAE3B,qBAF2B;AAG3B,wBAH2B;AAI3B,0EAJ2B,CAAR,CAAtB;;AAMA,MAAMC,eAAe,GAAG,IAAID,GAAJ,CAAQ;AAC7B,qBAD6B;AAE7B,UAF6B;AAG7B,YAH6B;AAI7B,mBAJ6B;AAK7B,oBAL6B;AAM7B,mBAN6B;AAO7B,gCAP6B;AAQ7B,sBAR6B;AAS7B,aAT6B,CAAR,CAAxB;;;AAYAF,CAAC,CAACI,IAAF,CAAO,OAAP;AACGC,IADH,CACS,yCADT;AAEGC,MAFH,CAEU,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAF,CAAU,SAAV,EAAqB,IAAIN,GAAJ,CAAQ,CAAC,GAAGD,aAAJ,EAAmB,GAAGE,eAAtB,CAAR,CAArB,CAFf;AAGGM,EAHH,CAGM,CAAAC,CAAC,KAAI;AACP,QAAMC,CAAC,GAAGD,CAAC,CAACJ,MAAF,CAASM,OAAT,CAAiBC,OAAjB,CAAyB,KAAzB,EAAgC,GAAhC,CAAV;AACA,QAAMC,IAAI,GAAI;AAClB;AACA,eAAeH,CAAE;AACjB;AACA,EAJI;AAKAD,EAAAA,CAAC,CAACK,mBAAF,CAAsBd,aAAa,CAACe,GAAd,CAAkBN,CAAC,CAACJ,MAAF,CAASM,OAA3B,CAAtB,EAA2DE,IAA3D;AACD,CAXH","sourcesContent":["export const description = `Validation tests for @builtin`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { ShaderValidationTest } from '../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\nconst kValidBuiltin = new Set([\n  `@builtin(position)`,\n  `@builtin(position,)`,\n  `@ \\n builtin(position)`,\n  `@/^ comment ^/builtin/^ comment ^/\\n\\n(\\t/^comment^/position/^comment^/)`,\n]);\nconst kInvalidBuiltin = new Set([\n  `@abuiltin(position)`,\n  `@builtin`,\n  `@builtin()`,\n  `@builtin position`,\n  `@builtin position)`,\n  `@builtin(position`,\n  `@builtin(position, frag_depth)`,\n  `@builtin(identifier)`,\n  `@builtin(2)`,\n]);\n\ng.test('parse')\n  .desc(`Test that @builtin is parsed correctly.`)\n  .params(u => u.combine('builtin', new Set([...kValidBuiltin, ...kInvalidBuiltin])))\n  .fn(t => {\n    const v = t.params.builtin.replace(/\\^/g, '*');\n    const code = `\n@vertex\nfn main() -> ${v} vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}`;\n    t.expectCompileResult(kValidBuiltin.has(t.params.builtin), code);\n  });\n"],"file":"builtin.spec.js"}