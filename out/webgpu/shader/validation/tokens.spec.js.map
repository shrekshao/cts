{"version":3,"sources":["../../../../src/webgpu/shader/validation/tokens.spec.ts"],"names":["description","makeTestGroup","ShaderValidationTest","g","test","desc","fn","t","expectCompileResult","params","u","combine","beginSubcases","code","placement","contains_null","blankspace","includes","terminated","kValidIdentifiers","Set","kInvalidIdentifiers","ident","has"],"mappings":"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","sourcesContent":["export const description = `Validation tests for tokenization`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\n\nimport { ShaderValidationTest } from './shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('empty')\n  .desc(`Test that an empty source file is consumed successfully.`)\n  .fn(t => {\n    t.expectCompileResult(true, '');\n  });\n\ng.test('null_characters')\n  .desc(`Test that WGSL source containing a null character is rejected.`)\n  .params(u =>\n    u\n      .combine('contains_null', [true, false])\n      .combine('placement', ['comment', 'delimiter', 'eol'])\n      .beginSubcases()\n  )\n  .fn(t => {\n    let code = '';\n    if (t.params.placement === 'comment') {\n      code = `// Here is a ${t.params.contains_null ? '\\0' : 'Z'} character`;\n    } else if (t.params.placement === 'delimiter') {\n      code = `let${t.params.contains_null ? '\\0' : ' '}name : i32 = 0;`;\n    } else if (t.params.placement === 'eol') {\n      code = `let name : i32 = 0;${t.params.contains_null ? '\\0' : ''}`;\n    }\n    t.expectCompileResult(!t.params.contains_null, code);\n  });\n\ng.test('whitespace')\n  .desc(`Test that all whitespace characters act as delimiters.`)\n  .fn(t => {\n    const code = `\nlet space:i32=0;\nlet\\thorizontal_tab:i32=0;\nlet\\nlinefeed:i32=0;\nlet\\vvertical_tab:i32=0;\nlet\\fformfeed:i32=0;\nlet\\rcarriage_return:i32=0;\n`;\n    t.expectCompileResult(true, code);\n  });\n\ng.test('comments')\n  .desc(`Test that valid comments are handled correctly, including nesting.`)\n  .fn(t => {\n    const code = `\n/**\n * Here is my shader.\n *\n * /* I can nest /**/ comments. */\n * // I can nest line comments too.\n **/\n@stage(fragment) // This is the stage\nfn main(/*\nno\nparameters\n*/) -> @location(0) vec4<f32> {\n  return/*block_comments_delimit_tokens*/vec4<f32>(.4, .2, .3, .1);\n}/* terminated block comments are OK at EOF...*/`;\n    t.expectCompileResult(true, code);\n  });\n\ng.test('line_comment_terminators')\n  .desc(`Test that line comments are terminated by any blankspace other than space and \\t`)\n  .params(u => u.combine('blankspace', [' ', '\\t', '\\n', '\\v', '\\f', '\\r']).beginSubcases())\n  .fn(t => {\n    const code = `// Line comment${t.params.blankspace}let invalid_outside_comment = should_fail`;\n\n    t.expectCompileResult([' ', '\\t'].includes(t.params.blankspace), code);\n  });\n\ng.test('unterminated_block_comment')\n  .desc(`Test that unterminated block comments cause an error`)\n  .params(u => u.combine('terminated', [true, false]).beginSubcases())\n  .fn(t => {\n    const code = `\n/**\n * Unterminated block comment.\n *\n ${t.params.terminated ? '*/' : ''}`;\n\n    t.expectCompileResult(t.params.terminated, code);\n  });\n\nconst kValidIdentifiers = new Set(['foo', 'Foo', '_foo0', '_0foo', 'foo__0']);\nconst kInvalidIdentifiers = new Set([\n  '_', // Single underscore is a syntactic token for phony assignment.\n  '__foo', // Leading double underscore is reserved.\n  '0foo', // Must start with single underscore or a letter.\n  // No punctuation:\n  'foo.bar',\n  'foo-bar',\n  'foo+bar',\n  'foo#bar',\n  'foo!bar',\n  'foo\\\\bar',\n  'foo/bar',\n  'foo,bar',\n  'foo@bar',\n  'foo::bar',\n  // Keywords:\n  'array',\n  'atomic',\n  'bitcast',\n  'bool',\n  'break',\n  'case',\n  'continue',\n  'continuing',\n  'default',\n  'discard',\n  'enable',\n  'else',\n  'f32',\n  'fallthrough',\n  'false',\n  'fn',\n  'for',\n  'function',\n  'i32',\n  'if',\n  'let',\n  'loop',\n  'mat2x2',\n  'mat2x3',\n  'mat2x4',\n  'mat3x2',\n  'mat3x3',\n  'mat3x4',\n  'mat4x2',\n  'mat4x3',\n  'mat4x4',\n  'override',\n  'private',\n  'ptr',\n  'return',\n  'sampler',\n  'sampler_comparison',\n  'storage',\n  'struct',\n  'switch',\n  'texture_1d',\n  'texture_2d',\n  'texture_2d_array',\n  'texture_3d',\n  'texture_cube',\n  'texture_cube_array',\n  'texture_depth_2d',\n  'texture_depth_2d_array',\n  'texture_depth_cube',\n  'texture_depth_cube_array',\n  'texture_depth_multisampled_2d',\n  'texture_multisampled_2d',\n  'texture_storage_1d',\n  'texture_storage_2d',\n  'texture_storage_2d_array',\n  'texture_storage_3d',\n  'true',\n  'type',\n  'u32',\n  'uniform',\n  'var',\n  'vec2',\n  'vec3',\n  'vec4',\n  'while',\n  'workgroup',\n]);\ng.test('identifiers')\n  .desc(\n    `Test that valid identifiers are accepted, and invalid identifiers are rejected.\n\nTODO: Add reserved words, when they've been refined.`\n  )\n  .params(u =>\n    u.combine('ident', new Set([...kValidIdentifiers, ...kInvalidIdentifiers])).beginSubcases()\n  )\n  .fn(t => {\n    const code = `var<private> ${t.params.ident} : i32;`;\n    t.expectCompileResult(kValidIdentifiers.has(t.params.ident), code);\n  });\n"],"file":"tokens.spec.js"}