{"version":3,"sources":["../../../../src/webgpu/shader/validation/variable_and_const.spec.ts"],"names":["description","makeTestGroup","ShaderValidationTest","g","kScalarType","kContainerTypes","undefined","getType","scalarType","containerType","type","test","desc","params","u","combine","fn","t","variableOrConstant","lhsContainerType","lhsScalarType","rhsContainerType","rhsScalarType","lhsType","rhsType","code","expectation","expectCompileResult","storageClass"],"mappings":"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","sourcesContent":["export const description = `\nPositive and negative validation tests for variable and const.\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\n\nimport { ShaderValidationTest } from './shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\nconst kScalarType = ['i32', 'f32', 'u32', 'bool'] as const;\ntype ScalarType = 'i32' | 'f32' | 'u32' | 'bool';\n\nconst kContainerTypes = [\n  undefined,\n  'vec2',\n  'vec3',\n  'vec4',\n  'mat2x2',\n  'mat2x3',\n  'mat2x4',\n  'mat3x2',\n  'mat3x3',\n  'mat3x4',\n  'mat4x2',\n  'mat4x3',\n  'mat4x4',\n  'array',\n] as const;\ntype ContainerType =\n  | undefined\n  | 'vec2'\n  | 'vec3'\n  | 'vec4'\n  | 'mat2x2'\n  | 'mat2x3'\n  | 'mat2x4'\n  | 'mat3x2'\n  | 'mat3x3'\n  | 'mat3x4'\n  | 'mat4x2'\n  | 'mat4x3'\n  | 'mat4x4'\n  | 'array';\n\nfunction getType(scalarType: ScalarType, containerType: ContainerType) {\n  let type = '';\n  switch (containerType) {\n    case undefined: {\n      type = scalarType;\n      break;\n    }\n    case 'array': {\n      // TODO(sarahM0): 12 is a random number here. find a solution to replace it.\n      type = `array<${scalarType}, 12>`;\n      break;\n    }\n    default: {\n      type = `${containerType}<${scalarType}>`;\n      break;\n    }\n  }\n  return type;\n}\n\ng.test('initializer_type')\n  .desc(\n    `\n  If present, the initializer's type must match the store type of the variable.\n  Testing scalars, vectors, and matrices of every dimension and type.\n  TODO: add test for: structs - arrays of vectors and matrices - arrays of different length\n`\n  )\n  .params(u =>\n    u\n      .combine('variableOrConstant', ['var', 'const'])\n      .combine('lhsContainerType', kContainerTypes)\n      .combine('lhsScalarType', kScalarType)\n      .combine('rhsContainerType', kContainerTypes)\n      .combine('rhsScalarType', kScalarType)\n  )\n  .fn(t => {\n    const {\n      variableOrConstant,\n      lhsContainerType,\n      lhsScalarType,\n      rhsContainerType,\n      rhsScalarType,\n    } = t.params;\n\n    const lhsType = getType(lhsScalarType, lhsContainerType);\n    const rhsType = getType(rhsScalarType, rhsContainerType);\n\n    const code = `\n      [[stage(fragment)]]\n      fn main() {\n        ${variableOrConstant} a : ${lhsType} = ${rhsType}();\n      }\n    `;\n\n    const expectation = lhsScalarType === rhsScalarType && lhsContainerType === rhsContainerType;\n    t.expectCompileResult(expectation, code);\n  });\n\ng.test('io_shareable_type')\n  .desc(\n    `\n  The following types are IO-shareable:\n  - numeric scalar types\n  - numeric vector types\n  - Matrix Types\n  - Array Types if its element type is IO-shareable, and the array is not runtime-sized\n  - Structure Types if all its members are IO-shareable\n\n  As a result these are not IO-shareable:\n  - boolean\n  - vector of booleans\n  - array of booleans\n  - matrix of booleans\n  - array runtime sized -> cannot be used outside of a struct, so no cts for this\n  - struct with bool component\n  - struct with runtime array\n\n  Control case: 'private' is used to make sure when only the storage class changes, the shader\n  becomes invalid and nothing else is wrong.\n  TODO: add test for: struct - struct with bool component - struct with runtime array`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['in', 'out', 'private'])\n      .combine('containerType', kContainerTypes)\n      .combine('scalarType', kScalarType)\n  )\n  .fn(t => {\n    const { storageClass, containerType, scalarType } = t.params;\n    const type = containerType ? `${containerType}<${scalarType}>` : scalarType;\n\n    let code;\n    if (`${storageClass}` === 'in') {\n      code = `\n        struct MyInputs {\n          [[location(0)]] a : ${type};\n        };\n\n        [[stage(fragment)]]\n        fn main(inputs : MyInputs) {\n        }\n      `;\n    } else if (`${storageClass}` === 'out') {\n      code = `\n        struct MyOutputs {\n          [[location(0)]] a : ${type};\n        };\n\n        [[stage(fragment)]]\n        fn main() -> MyOutputs {\n          return MyOutputs();\n        }\n      `;\n    } else {\n      code = `\n      var<${storageClass}> a : ${type} = ${type}();\n\n      [[stage(fragment)]]\n      fn main() {\n      }\n      `;\n    }\n\n    const expectation = storageClass === 'private' || scalarType !== 'bool';\n    t.expectCompileResult(expectation, code);\n  });\n"],"file":"variable_and_const.spec.js"}