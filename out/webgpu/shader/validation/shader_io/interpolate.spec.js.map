{"version":3,"sources":["../../../../../src/webgpu/shader/validation/shader_io/interpolate.spec.ts"],"names":["description","makeTestGroup","ShaderValidationTest","generateShader","g","kValidInterpolationAttributes","Set","test","desc","params","u","combine","beginSubcases","fn","t","stage","use_struct","skip","interpolate","type","sampling","code","attribute","io","expectCompileResult","has","includes"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI,gDAArB,CAEP,SAASC,aAAT,QAA8B,4CAA9B;AACA,SAASC,oBAAT,QAAqC,8BAArC;;AAEA,SAASC,cAAT,QAA+B,WAA/B;;AAEA,OAAO,MAAMC,CAAC,GAAGH,aAAa,CAACC,oBAAD,CAAvB;;AAEP;AACA,MAAMG,6BAA6B,GAAG,IAAIC,GAAJ,CAAQ;AAC5C,EAD4C;AAE5C,oBAF4C;AAG5C,2BAH4C;AAI5C,mCAJ4C;AAK5C,qCAL4C;AAM5C,mCAN4C;AAO5C,sBAP4C;AAQ5C,8BAR4C;AAS5C,gCAT4C;AAU5C,8BAV4C,CAAR,CAAtC;;;AAaAF,CAAC,CAACG,IAAF,CAAO,mBAAP;AACGC,IADH,CACS,wFADT;AAEGC,MAFH,CAEU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,OADX,EACoB,CAAC,QAAD,EAAW,UAAX,CADpB;AAEGA,OAFH,CAEW,IAFX,EAEiB,CAAC,IAAD,EAAO,KAAP,CAFjB;AAGGA,OAHH,CAGW,YAHX,EAGyB,CAAC,IAAD,EAAO,KAAP,CAHzB;AAIGA,OAJH,CAIW,MAJX,EAImB,CAAC,EAAD,EAAK,MAAL,EAAa,aAAb,EAA4B,QAA5B,CAJnB;AAKGA,OALH,CAKW,UALX,EAKuB,CAAC,EAAD,EAAK,QAAL,EAAe,UAAf,EAA2B,QAA3B,CALvB;AAMGC,aANH,EAHJ;;AAWGC,EAXH,CAWMC,CAAC,IAAI;AACP,MAAIA,CAAC,CAACL,MAAF,CAASM,KAAT,KAAmB,QAAnB,IAA+BD,CAAC,CAACL,MAAF,CAASO,UAAT,KAAwB,KAA3D,EAAkE;AAChEF,IAAAA,CAAC,CAACG,IAAF,CAAO,qEAAP;AACD;;AAED,MAAIC,WAAW,GAAG,EAAlB;AACA,MAAIJ,CAAC,CAACL,MAAF,CAASU,IAAT,KAAkB,EAAlB,IAAwBL,CAAC,CAACL,MAAF,CAASW,QAAT,KAAsB,EAAlD,EAAsD;AACpDF,IAAAA,WAAW,GAAG,eAAd;AACA,QAAIJ,CAAC,CAACL,MAAF,CAASU,IAAT,KAAkB,EAAtB,EAA0B;AACxBD,MAAAA,WAAW,IAAK,GAAEJ,CAAC,CAACL,MAAF,CAASU,IAAK,IAAhC;AACD;AACDD,IAAAA,WAAW,IAAK,GAAEJ,CAAC,CAACL,MAAF,CAASW,QAAS,GAApC;AACD;AACD,QAAMC,IAAI,GAAGlB,cAAc,CAAC;AAC1BmB,IAAAA,SAAS,EAAE,iBAAiBJ,WADF;AAE1BC,IAAAA,IAAI,EAAE,KAFoB;AAG1BJ,IAAAA,KAAK,EAAED,CAAC,CAACL,MAAF,CAASM,KAHU;AAI1BQ,IAAAA,EAAE,EAAET,CAAC,CAACL,MAAF,CAASc,EAJa;AAK1BP,IAAAA,UAAU,EAAEF,CAAC,CAACL,MAAF,CAASO,UALK,EAAD,CAA3B;;;AAQAF,EAAAA,CAAC,CAACU,mBAAF,CAAsBnB,6BAA6B,CAACoB,GAA9B,CAAkCP,WAAlC,CAAtB,EAAsEG,IAAtE;AACD,CAjCH;;AAmCAjB,CAAC,CAACG,IAAF,CAAO,kBAAP;AACGC,IADH,CACS,4EADT;AAEGC,MAFH,CAEU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,OADX,EACoB,CAAC,QAAD,EAAW,UAAX,CADpB;AAEGA,OAFH,CAEW,WAFX,EAEwB,CAAC,cAAD,EAAiB,oBAAjB,CAFxB;AAGGA,OAHH,CAGW,YAHX,EAGyB,CAAC,IAAD,EAAO,KAAP,CAHzB;AAIGC,aAJH,EAHJ;;AASGC,EATH,CASMC,CAAC,IAAI;AACP;AACEA,EAAAA,CAAC,CAACL,MAAF,CAASM,KAAT,KAAmB,QAAnB;AACAD,EAAAA,CAAC,CAACL,MAAF,CAASO,UAAT,KAAwB,KADxB;AAEA,GAACF,CAAC,CAACL,MAAF,CAASa,SAAT,CAAmBI,QAAnB,CAA4B,UAA5B,CAHH;AAIE;AACAZ,IAAAA,CAAC,CAACG,IAAF,CAAO,qEAAP;AACD;;AAED,QAAMI,IAAI,GAAGlB,cAAc,CAAC;AAC1BmB,IAAAA,SAAS,EAAER,CAAC,CAACL,MAAF,CAASa,SAAT,GAAsB,oBADP;AAE1BH,IAAAA,IAAI,EAAE,WAFoB;AAG1BJ,IAAAA,KAAK,EAAED,CAAC,CAACL,MAAF,CAASM,KAHU;AAI1BQ,IAAAA,EAAE,EAAET,CAAC,CAACL,MAAF,CAASM,KAAT,KAAmB,UAAnB,GAAgC,IAAhC,GAAuC,KAJjB;AAK1BC,IAAAA,UAAU,EAAEF,CAAC,CAACL,MAAF,CAASO,UALK,EAAD,CAA3B;;AAOAF,EAAAA,CAAC,CAACU,mBAAF,CAAsBV,CAAC,CAACL,MAAF,CAASa,SAAT,KAAuB,cAA7C,EAA6DD,IAA7D;AACD,CA1BH;;AA4BAjB,CAAC,CAACG,IAAF,CAAO,gBAAP;AACGC,IADH,CACS,wFADT;AAEGC,MAFH,CAEU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,OADX,EACoB,CAAC,QAAD,EAAW,UAAX,CADpB;AAEGA,OAFH,CAEW,MAFX,EAEmB,CAAC,KAAD,EAAQ,KAAR,EAAe,WAAf,EAA4B,WAA5B,CAFnB;AAGGA,OAHH,CAGW,YAHX,EAGyB,CAAC,IAAD,EAAO,KAAP,CAHzB;AAIGA,OAJH,CAIW,WAJX,EAIwBN,6BAJxB;AAKGO,aALH,EAHJ;;AAUGC,EAVH,CAUMC,CAAC,IAAI;AACP,MAAIA,CAAC,CAACL,MAAF,CAASM,KAAT,KAAmB,QAAnB,IAA+BD,CAAC,CAACL,MAAF,CAASO,UAAT,KAAwB,KAA3D,EAAkE;AAChEF,IAAAA,CAAC,CAACG,IAAF,CAAO,qEAAP;AACD;;AAED,QAAMI,IAAI,GAAGlB,cAAc,CAAC;AAC1BmB,IAAAA,SAAS,EAAE,iBAAiBR,CAAC,CAACL,MAAF,CAASa,SADX;AAE1BH,IAAAA,IAAI,EAAEL,CAAC,CAACL,MAAF,CAASU,IAFW;AAG1BJ,IAAAA,KAAK,EAAED,CAAC,CAACL,MAAF,CAASM,KAHU;AAI1BQ,IAAAA,EAAE,EAAET,CAAC,CAACL,MAAF,CAASM,KAAT,KAAmB,QAAnB,GAA8B,KAA9B,GAAsC,IAJhB;AAK1BC,IAAAA,UAAU,EAAEF,CAAC,CAACL,MAAF,CAASO,UALK,EAAD,CAA3B;;;AAQAF,EAAAA,CAAC,CAACU,mBAAF,CAAsBV,CAAC,CAACL,MAAF,CAASa,SAAT,KAAuB,oBAA7C,EAAmED,IAAnE;AACD,CAxBH","sourcesContent":["export const description = `Validation tests for the interpolate attribute`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { ShaderValidationTest } from '../shader_validation_test.js';\n\nimport { generateShader } from './util.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\n// List of valid interpolation attributes.\nconst kValidInterpolationAttributes = new Set([\n  '',\n  '@interpolate(flat)',\n  '@interpolate(perspective)',\n  '@interpolate(perspective, center)',\n  '@interpolate(perspective, centroid)',\n  '@interpolate(perspective, sample)',\n  '@interpolate(linear)',\n  '@interpolate(linear, center)',\n  '@interpolate(linear, centroid)',\n  '@interpolate(linear, sample)',\n]);\n\ng.test('type_and_sampling')\n  .desc(`Test that all combinations of interpolation type and sampling are validated correctly.`)\n  .params(u =>\n    u\n      .combine('stage', ['vertex', 'fragment'] as const)\n      .combine('io', ['in', 'out'] as const)\n      .combine('use_struct', [true, false] as const)\n      .combine('type', ['', 'flat', 'perspective', 'linear'] as const)\n      .combine('sampling', ['', 'center', 'centroid', 'sample'] as const)\n      .beginSubcases()\n  )\n  .fn(t => {\n    if (t.params.stage === 'vertex' && t.params.use_struct === false) {\n      t.skip('vertex output must include a position builtin, so must use a struct');\n    }\n\n    let interpolate = '';\n    if (t.params.type !== '' || t.params.sampling !== '') {\n      interpolate = '@interpolate(';\n      if (t.params.type !== '') {\n        interpolate += `${t.params.type}, `;\n      }\n      interpolate += `${t.params.sampling})`;\n    }\n    const code = generateShader({\n      attribute: '@location(0)' + interpolate,\n      type: 'f32',\n      stage: t.params.stage,\n      io: t.params.io,\n      use_struct: t.params.use_struct,\n    });\n\n    t.expectCompileResult(kValidInterpolationAttributes.has(interpolate), code);\n  });\n\ng.test('require_location')\n  .desc(`Test that the interpolate attribute is only accepted with user-defined IO.`)\n  .params(u =>\n    u\n      .combine('stage', ['vertex', 'fragment'] as const)\n      .combine('attribute', ['@location(0)', '@builtin(position)'] as const)\n      .combine('use_struct', [true, false] as const)\n      .beginSubcases()\n  )\n  .fn(t => {\n    if (\n      t.params.stage === 'vertex' &&\n      t.params.use_struct === false &&\n      !t.params.attribute.includes('position')\n    ) {\n      t.skip('vertex output must include a position builtin, so must use a struct');\n    }\n\n    const code = generateShader({\n      attribute: t.params.attribute + `@interpolate(flat)`,\n      type: 'vec4<f32>',\n      stage: t.params.stage,\n      io: t.params.stage === 'fragment' ? 'in' : 'out',\n      use_struct: t.params.use_struct,\n    });\n    t.expectCompileResult(t.params.attribute === '@location(0)', code);\n  });\n\ng.test('integral_types')\n  .desc(`Test that the implementation requires @interpolate(flat) for integral user-defined IO.`)\n  .params(u =>\n    u\n      .combine('stage', ['vertex', 'fragment'] as const)\n      .combine('type', ['i32', 'u32', 'vec2<i32>', 'vec4<u32>'] as const)\n      .combine('use_struct', [true, false] as const)\n      .combine('attribute', kValidInterpolationAttributes)\n      .beginSubcases()\n  )\n  .fn(t => {\n    if (t.params.stage === 'vertex' && t.params.use_struct === false) {\n      t.skip('vertex output must include a position builtin, so must use a struct');\n    }\n\n    const code = generateShader({\n      attribute: '@location(0)' + t.params.attribute,\n      type: t.params.type,\n      stage: t.params.stage,\n      io: t.params.stage === 'vertex' ? 'out' : 'in',\n      use_struct: t.params.use_struct,\n    });\n\n    t.expectCompileResult(t.params.attribute === '@interpolate(flat)', code);\n  });\n"],"file":"interpolate.spec.js"}