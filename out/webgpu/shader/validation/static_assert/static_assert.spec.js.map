{"version":3,"file":"static_assert.spec.js","names":["description","makeTestGroup","ShaderValidationTest","g","buildStaticAssert","expect_true","expr","scope","stmt","kConditionCases","true_literal","not_false","const_eq_literal_int","const_eq_literal_float","binary_op_eq_const","any","min_max","test","desc","params","u","combine","Object","keys","beginSubcases","fn","t","constants","case","expectCompileResult","staticAssert","stage"],"sources":["../../../../../src/webgpu/shader/validation/static_assert/static_assert.spec.ts"],"sourcesContent":["export const description = `Validation tests for static_assert`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { ShaderValidationTest } from '../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\n/**\n * Builds a static_assert() statement, which checks that @p expr is equal to @p expect_true.\n * @param expect_true true if @p expr should evaluate to true\n * @param expr the constant expression\n * @param scope module-scope or function-scope constant expression\n * @returns the WGSL code\n */\nfunction buildStaticAssert(expect_true: boolean, expr: string, scope: 'module' | 'function') {\n  const stmt = expect_true ? `static_assert ${expr};` : `static_assert !(${expr});`;\n  return scope === 'module' ? stmt : `fn f() { ${stmt} }`;\n}\n\nconst kConditionCases = {\n  true_literal: `true`,\n  not_false: `!false`,\n  const_eq_literal_int: `one == 1`,\n  const_eq_literal_float: `one == 1.0`,\n  binary_op_eq_const: `one+1 == two`,\n  any: `any(vec3(false, true, false))`,\n  min_max: `min(three, max(two, one)) == 2`,\n};\n\ng.test('constant_expression')\n  .desc(`Test that static_assert validates the condition expression.`)\n  .params(u =>\n    u\n      .combine('case', Object.keys(kConditionCases) as Array<keyof typeof kConditionCases>)\n      .combine('scope', ['module', 'function'] as const)\n      .beginSubcases()\n  )\n  .fn(t => {\n    const constants = `\nconst one = 1;\nconst two = 2;\nconst three = 2;\n`;\n    const expr = kConditionCases[t.params.case];\n    t.expectCompileResult(true, constants + buildStaticAssert(true, expr, t.params.scope));\n    t.expectCompileResult(false, constants + buildStaticAssert(false, expr, t.params.scope));\n  });\n\ng.test('evaluation_stage')\n  .desc(`Test that the static_assert expression must be a constant expression.`)\n  .params(u =>\n    u\n      .combine('scope', ['module', 'function'] as const)\n      .combine('stage', ['constant', 'override', 'runtime'] as const)\n      .beginSubcases()\n  )\n  .fn(t => {\n    const staticAssert = buildStaticAssert(true, 'value', t.params.scope);\n    switch (t.params.stage) {\n      case 'constant':\n        t.expectCompileResult(true, `const value = true;\\n${staticAssert}`);\n        break;\n      case 'override':\n        t.expectCompileResult(false, `override value = true;\\n${staticAssert}`);\n        break;\n      case 'runtime':\n        t.expectCompileResult(false, `var<private> value = true;\\n${staticAssert}`);\n        break;\n    }\n  });\n"],"mappings":";AAAA;AAAA,GAAA,OAAO,MAAMA,WAAW,GAAI,oCAAmC,CAE/D,SAASC,aAAa,QAAQ,4CAA4C;AAC1E,SAASC,oBAAoB,QAAQ,8BAA8B;;AAEnE,OAAO,MAAMC,CAAC,GAAGF,aAAa,CAACC,oBAAoB,CAAC;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,iBAAiB,CAACC,WAAoB,EAAEC,IAAY,EAAEC,KAA4B,EAAE;EAC3F,MAAMC,IAAI,GAAGH,WAAW,GAAI,iBAAgBC,IAAK,GAAE,GAAI,mBAAkBA,IAAK,IAAG;EACjF,OAAOC,KAAK,KAAK,QAAQ,GAAGC,IAAI,GAAI,YAAWA,IAAK,IAAG;AACzD;;AAEA,MAAMC,eAAe,GAAG;EACtBC,YAAY,EAAG,MAAK;EACpBC,SAAS,EAAG,QAAO;EACnBC,oBAAoB,EAAG,UAAS;EAChCC,sBAAsB,EAAG,YAAW;EACpCC,kBAAkB,EAAG,cAAa;EAClCC,GAAG,EAAG,+BAA8B;EACpCC,OAAO,EAAG;AACZ,CAAC;;AAEDb,CAAC,CAACc,IAAI,CAAC,qBAAqB,CAAC;AAC1BC,IAAI,CAAE,6DAA4D,CAAC;AACnEC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,MAAM,EAAEC,MAAM,CAACC,IAAI,CAACd,eAAe,CAAC,CAAwC;AACpFY,OAAO,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAU;AACjDG,aAAa,EAAE,CACnB;;AACAC,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAMC,SAAS,GAAI;AACvB;AACA;AACA;AACA,CAAC;EACG,MAAMrB,IAAI,GAAGG,eAAe,CAACiB,CAAC,CAACP,MAAM,CAACS,IAAI,CAAC;EAC3CF,CAAC,CAACG,mBAAmB,CAAC,IAAI,EAAEF,SAAS,GAAGvB,iBAAiB,CAAC,IAAI,EAAEE,IAAI,EAAEoB,CAAC,CAACP,MAAM,CAACZ,KAAK,CAAC,CAAC;EACtFmB,CAAC,CAACG,mBAAmB,CAAC,KAAK,EAAEF,SAAS,GAAGvB,iBAAiB,CAAC,KAAK,EAAEE,IAAI,EAAEoB,CAAC,CAACP,MAAM,CAACZ,KAAK,CAAC,CAAC;AAC1F,CAAC,CAAC;;AAEJJ,CAAC,CAACc,IAAI,CAAC,kBAAkB,CAAC;AACvBC,IAAI,CAAE,uEAAsE,CAAC;AAC7EC,MAAM,CAAC,CAAAC,CAAC;AACPA,CAAC;AACEC,OAAO,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAU;AACjDA,OAAO,CAAC,OAAO,EAAE,CAAC,UAAU,EAAE,UAAU,EAAE,SAAS,CAAC,CAAU;AAC9DG,aAAa,EAAE,CACnB;;AACAC,EAAE,CAAC,CAAAC,CAAC,KAAI;EACP,MAAMI,YAAY,GAAG1B,iBAAiB,CAAC,IAAI,EAAE,OAAO,EAAEsB,CAAC,CAACP,MAAM,CAACZ,KAAK,CAAC;EACrE,QAAQmB,CAAC,CAACP,MAAM,CAACY,KAAK;IACpB,KAAK,UAAU;MACbL,CAAC,CAACG,mBAAmB,CAAC,IAAI,EAAG,wBAAuBC,YAAa,EAAC,CAAC;MACnE;IACF,KAAK,UAAU;MACbJ,CAAC,CAACG,mBAAmB,CAAC,KAAK,EAAG,2BAA0BC,YAAa,EAAC,CAAC;MACvE;IACF,KAAK,SAAS;MACZJ,CAAC,CAACG,mBAAmB,CAAC,KAAK,EAAG,+BAA8BC,YAAa,EAAC,CAAC;MAC3E,MAAM;;AAEZ,CAAC,CAAC"}