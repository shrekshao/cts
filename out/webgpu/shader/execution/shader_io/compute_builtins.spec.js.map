{"version":3,"sources":["../../../../../src/webgpu/shader/execution/shader_io/compute_builtins.spec.ts"],"names":["description","makeTestGroup","iterRange","GPUTest","g","test","desc","params","u","combine","combineWithParams","groupSize","x","y","z","numGroups","beginSubcases","fn","t","invocationsPerGroup","totalInvocations","structures","local_id","local_index","global_id","group_id","num_groups","method","wgsl","pipeline","device","createComputePipeline","compute","module","createShaderModule","code","entryPoint","createBuffer","size","binding","buffer","usage","GPUBufferUsage","STORAGE","COPY_SRC","trackForCleanup","bindGroupEntries","push","resource","localIdBuffer","localIndexBuffer","globalIdBuffer","groupIdBuffer","numGroupsBuffer","bindGroup","createBindGroup","layout","getBindGroupLayout","entries","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatch","dispatchBuffer","Uint32Array","BYTES_PER_ELEMENT","INDIRECT","mappedAtCreation","dispatchData","getMappedRange","unmap","dispatchIndirect","endPass","queue","submit","finish","checkEachIndex","output","name","getBuiltinValue","gz","gy","gx","lz","ly","lx","groupIndex","localIndex","globalIndex","expected","Error","undefined","expectGPUBufferValuesEqual","expectGPUBufferValuesPassCheck","outputData","_","localId","type","typedLength","getGlobalId","groupId"],"mappings":"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","sourcesContent":["export const description = `Test compute shader builtin variables`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { iterRange } from '../../../../common/util/util.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n// Test that the values for each input builtin are correct.\ng.test('inputs')\n  .desc(`Test compute shader builtin inputs values`)\n  .params(u =>\n    u\n      .combine('method', ['param', 'struct', 'mixed'] as const)\n      .combine('dispatch', ['direct', 'indirect'] as const)\n      .combineWithParams([\n        {\n          groupSize: { x: 1, y: 1, z: 1 },\n          numGroups: { x: 1, y: 1, z: 1 },\n        },\n        {\n          groupSize: { x: 8, y: 4, z: 2 },\n          numGroups: { x: 1, y: 1, z: 1 },\n        },\n        {\n          groupSize: { x: 1, y: 1, z: 1 },\n          numGroups: { x: 8, y: 4, z: 2 },\n        },\n        {\n          groupSize: { x: 3, y: 7, z: 5 },\n          numGroups: { x: 13, y: 9, z: 11 },\n        },\n      ] as const)\n      .beginSubcases()\n  )\n  .fn(async t => {\n    const invocationsPerGroup = t.params.groupSize.x * t.params.groupSize.y * t.params.groupSize.z;\n    const totalInvocations =\n      invocationsPerGroup * t.params.numGroups.x * t.params.numGroups.y * t.params.numGroups.z;\n\n    // Generate the structures, parameters, and builtin expressions used in the shader.\n    let params = '';\n    let structures = '';\n    let local_id = '';\n    let local_index = '';\n    let global_id = '';\n    let group_id = '';\n    let num_groups = '';\n    switch (t.params.method) {\n      case 'param':\n        params = `\n          @builtin(local_invocation_id) local_id : vec3<u32>,\n          @builtin(local_invocation_index) local_index : u32,\n          @builtin(global_invocation_id) global_id : vec3<u32>,\n          @builtin(workgroup_id) group_id : vec3<u32>,\n          @builtin(num_workgroups) num_groups : vec3<u32>,\n        `;\n        local_id = 'local_id';\n        local_index = 'local_index';\n        global_id = 'global_id';\n        group_id = 'group_id';\n        num_groups = 'num_groups';\n        break;\n      case 'struct':\n        structures = `struct Inputs {\n            @builtin(local_invocation_id) local_id : vec3<u32>;\n            @builtin(local_invocation_index) local_index : u32;\n            @builtin(global_invocation_id) global_id : vec3<u32>;\n            @builtin(workgroup_id) group_id : vec3<u32>;\n            @builtin(num_workgroups) num_groups : vec3<u32>;\n          };`;\n        params = `inputs : Inputs`;\n        local_id = 'inputs.local_id';\n        local_index = 'inputs.local_index';\n        global_id = 'inputs.global_id';\n        group_id = 'inputs.group_id';\n        num_groups = 'inputs.num_groups';\n        break;\n      case 'mixed':\n        structures = `struct InputsA {\n          @builtin(local_invocation_index) local_index : u32;\n          @builtin(global_invocation_id) global_id : vec3<u32>;\n        };\n        struct InputsB {\n          @builtin(workgroup_id) group_id : vec3<u32>;\n        };`;\n        params = `@builtin(local_invocation_id) local_id : vec3<u32>,\n                  inputsA : InputsA,\n                  inputsB : InputsB,\n                  @builtin(num_workgroups) num_groups : vec3<u32>,`;\n        local_id = 'local_id';\n        local_index = 'inputsA.local_index';\n        global_id = 'inputsA.global_id';\n        group_id = 'inputsB.group_id';\n        num_groups = 'num_groups';\n        break;\n    }\n\n    // WGSL shader that stores every builtin value to a buffer, for every invocation in the grid.\n    const wgsl = `\n      struct S {\n        data : array<u32>;\n      };\n      struct V {\n        data : array<vec3<u32>>;\n      };\n      @group(0) @binding(0) var<storage, write> local_id_out : V;\n      @group(0) @binding(1) var<storage, write> local_index_out : S;\n      @group(0) @binding(2) var<storage, write> global_id_out : V;\n      @group(0) @binding(3) var<storage, write> group_id_out : V;\n      @group(0) @binding(4) var<storage, write> num_groups_out : V;\n\n      ${structures}\n\n      let group_width = ${t.params.groupSize.x}u;\n      let group_height = ${t.params.groupSize.y}u;\n      let group_depth = ${t.params.groupSize.z}u;\n\n      @stage(compute) @workgroup_size(group_width, group_height, group_depth)\n      fn main(\n        ${params}\n        ) {\n        let group_index = ((${group_id}.z * ${num_groups}.y) + ${group_id}.y) * ${num_groups}.x + ${group_id}.x;\n        let global_index = group_index * ${invocationsPerGroup}u + ${local_index};\n        local_id_out.data[global_index] = ${local_id};\n        local_index_out.data[global_index] = ${local_index};\n        global_id_out.data[global_index] = ${global_id};\n        group_id_out.data[global_index] = ${group_id};\n        num_groups_out.data[global_index] = ${num_groups};\n      }\n    `;\n\n    const pipeline = t.device.createComputePipeline({\n      compute: {\n        module: t.device.createShaderModule({\n          code: wgsl,\n        }),\n        entryPoint: 'main',\n      },\n    });\n\n    // Helper to create a `size`-byte buffer with binding number `binding`.\n    function createBuffer(size: number, binding: number) {\n      const buffer = t.device.createBuffer({\n        size,\n        usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n      });\n      t.trackForCleanup(buffer);\n\n      bindGroupEntries.push({\n        binding,\n        resource: {\n          buffer,\n        },\n      });\n\n      return buffer;\n    }\n\n    // Create the output buffers.\n    const bindGroupEntries: GPUBindGroupEntry[] = [];\n    const localIdBuffer = createBuffer(totalInvocations * 16, 0);\n    const localIndexBuffer = createBuffer(totalInvocations * 4, 1);\n    const globalIdBuffer = createBuffer(totalInvocations * 16, 2);\n    const groupIdBuffer = createBuffer(totalInvocations * 16, 3);\n    const numGroupsBuffer = createBuffer(totalInvocations * 16, 4);\n\n    const bindGroup = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: bindGroupEntries,\n    });\n\n    // Run the shader.\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bindGroup);\n    switch (t.params.dispatch) {\n      case 'direct':\n        pass.dispatch(t.params.numGroups.x, t.params.numGroups.y, t.params.numGroups.z);\n        break;\n      case 'indirect': {\n        const dispatchBuffer = t.device.createBuffer({\n          size: 3 * Uint32Array.BYTES_PER_ELEMENT,\n          usage: GPUBufferUsage.INDIRECT,\n          mappedAtCreation: true,\n        });\n        t.trackForCleanup(dispatchBuffer);\n        const dispatchData = new Uint32Array(dispatchBuffer.getMappedRange());\n        dispatchData[0] = t.params.numGroups.x;\n        dispatchData[1] = t.params.numGroups.y;\n        dispatchData[2] = t.params.numGroups.z;\n        dispatchBuffer.unmap();\n        pass.dispatchIndirect(dispatchBuffer, 0);\n        break;\n      }\n    }\n    pass.endPass();\n    t.queue.submit([encoder.finish()]);\n\n    type vec3 = { x: number; y: number; z: number };\n\n    // Helper to check that the vec3<u32> value at each index of the provided `output` buffer\n    // matches the expected value for that invocation, as generated by the `getBuiltinValue`\n    // function. The `name` parameter is the builtin name, used for error messages.\n    const checkEachIndex = (\n      output: Uint32Array,\n      name: string,\n      getBuiltinValue: (groupId: vec3, localId: vec3) => vec3\n    ) => {\n      // Loop over workgroups.\n      for (let gz = 0; gz < t.params.numGroups.z; gz++) {\n        for (let gy = 0; gy < t.params.numGroups.y; gy++) {\n          for (let gx = 0; gx < t.params.numGroups.x; gx++) {\n            // Loop over invocations within a group.\n            for (let lz = 0; lz < t.params.groupSize.z; lz++) {\n              for (let ly = 0; ly < t.params.groupSize.y; ly++) {\n                for (let lx = 0; lx < t.params.groupSize.x; lx++) {\n                  const groupIndex = (gz * t.params.numGroups.y + gy) * t.params.numGroups.x + gx;\n                  const localIndex = (lz * t.params.groupSize.y + ly) * t.params.groupSize.x + lx;\n                  const globalIndex = groupIndex * invocationsPerGroup + localIndex;\n                  const expected = getBuiltinValue(\n                    { x: gx, y: gy, z: gz },\n                    { x: lx, y: ly, z: lz }\n                  );\n                  if (output[globalIndex * 4 + 0] !== expected.x) {\n                    return new Error(\n                      `${name}.x failed at group(${gx},${gy},${gz}) local(${lx},${ly},${lz}))\\n` +\n                        `    expected: ${expected.x}\\n` +\n                        `    got:      ${output[globalIndex * 4 + 0]}`\n                    );\n                  }\n                  if (output[globalIndex * 4 + 1] !== expected.y) {\n                    return new Error(\n                      `${name}.y failed at group(${gx},${gy},${gz}) local(${lx},${ly},${lz}))\\n` +\n                        `    expected: ${expected.y}\\n` +\n                        `    got:      ${output[globalIndex * 4 + 1]}`\n                    );\n                  }\n                  if (output[globalIndex * 4 + 2] !== expected.z) {\n                    return new Error(\n                      `${name}.z failed at group(${gx},${gy},${gz}) local(${lx},${ly},${lz}))\\n` +\n                        `    expected: ${expected.z}\\n` +\n                        `    got:      ${output[globalIndex * 4 + 2]}`\n                    );\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      return undefined;\n    };\n\n    // Check @builtin(local_invocation_index) values.\n    t.expectGPUBufferValuesEqual(\n      localIndexBuffer,\n      new Uint32Array([...iterRange(totalInvocations, x => x % invocationsPerGroup)])\n    );\n\n    // Check @builtin(local_invocation_id) values.\n    t.expectGPUBufferValuesPassCheck(\n      localIdBuffer,\n      outputData => checkEachIndex(outputData, 'local_invocation_id', (_, localId) => localId),\n      { type: Uint32Array, typedLength: totalInvocations * 4 }\n    );\n\n    // Check @builtin(global_invocation_id) values.\n    const getGlobalId = (groupId: vec3, localId: vec3) => {\n      return {\n        x: groupId.x * t.params.groupSize.x + localId.x,\n        y: groupId.y * t.params.groupSize.y + localId.y,\n        z: groupId.z * t.params.groupSize.z + localId.z,\n      };\n    };\n    t.expectGPUBufferValuesPassCheck(\n      globalIdBuffer,\n      outputData => checkEachIndex(outputData, 'global_invocation_id', getGlobalId),\n      { type: Uint32Array, typedLength: totalInvocations * 4 }\n    );\n\n    // Check @builtin(workgroup_id) values.\n    t.expectGPUBufferValuesPassCheck(\n      groupIdBuffer,\n      outputData => checkEachIndex(outputData, 'workgroup_id', (groupId, _) => groupId),\n      { type: Uint32Array, typedLength: totalInvocations * 4 }\n    );\n\n    // Check @builtin(num_workgroups) values.\n    t.expectGPUBufferValuesPassCheck(\n      numGroupsBuffer,\n      outputData => checkEachIndex(outputData, 'num_workgroups', () => t.params.numGroups),\n      { type: Uint32Array, typedLength: totalInvocations * 4 }\n    );\n  });\n"],"file":"compute_builtins.spec.js"}