{"version":3,"sources":["../../../../../src/webgpu/shader/execution/builtin/insertBits.spec.ts"],"names":["description","makeTestGroup","GPUTest","i32Bits","TypeI32","u32","TypeU32","u32Bits","vec2","vec3","vec4","TypeVec","run","g","test","uniqueId","specURL","desc","params","u","combine","fn","t","cfg","scalarType","signed","T","width","V","x","y","z","w","undefined","all_1","all_0","low_1","low_0","high_1","high_0","pattern","input","expected"],"mappings":"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","sourcesContent":["export const description = `\nExecution Tests for the 'insertBits' builtin function\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport {\n  i32Bits,\n  TypeI32,\n  u32,\n  TypeU32,\n  u32Bits,\n  vec2,\n  vec3,\n  vec4,\n  TypeVec,\n} from '../../../util/conversion.js';\n\nimport { Config, run } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('integer_builtin_functions,insertBits')\n  .uniqueId('xxxxxxxxxxxxxxxx')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#integer-builtin-functions')\n  .desc(\n    `\ninsertBits:\nT is i32, u32, vecN<i32>, or vecN<u32> insertBits(e: T, newbits:T, offset: u32, count: u32) -> T\n\nSets bits in an integer.\n\nWhen T is a scalar type, then:\n\n* w is the bit width of T\n* o = min(offset,w)\n* c = min(count, w - o)\n* The result is e if c is 0.\n* Otherwise, bits o..o+c-1 of the result are copied from bits 0..c-1 of newbits. Other bits of the result are copied from e.\nComponent-wise when T is a vector.\n\nPlease read the following guidelines before contributing:\nhttps://github.com/gpuweb/cts/blob/main/docs/plan_autogen.md\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('signed', [false, true])\n      .combine('width', [1, 2, 3, 4])\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    const scalarType = t.params.signed ? TypeI32 : TypeU32;\n    const T = t.params.width === 1 ? scalarType : TypeVec(t.params.width, scalarType);\n\n    const V = (x: number, y?: number, z?: number, w?: number) => {\n      y = y === undefined ? x : y;\n      z = z === undefined ? x : z;\n      w = w === undefined ? x : w;\n\n      if (t.params.signed) {\n        switch (t.params.width) {\n          case 1:\n            return i32Bits(x);\n          case 2:\n            return vec2(i32Bits(x), i32Bits(y));\n          case 3:\n            return vec3(i32Bits(x), i32Bits(y), i32Bits(z));\n          default:\n            return vec4(i32Bits(x), i32Bits(y), i32Bits(z), i32Bits(w));\n        }\n      } else {\n        switch (t.params.width) {\n          case 1:\n            return u32Bits(x);\n          case 2:\n            return vec2(u32Bits(x), u32Bits(y));\n          case 3:\n            return vec3(u32Bits(x), u32Bits(y), u32Bits(z));\n          default:\n            return vec4(u32Bits(x), u32Bits(y), u32Bits(z), u32Bits(w));\n        }\n      }\n    };\n\n    const all_1 = V(0b11111111111111111111111111111111);\n    const all_0 = V(0b00000000000000000000000000000000);\n    const low_1 = V(0b00000000000000000000000000000001);\n    const low_0 = V(0b11111111111111111111111111111110);\n    const high_1 = V(0b10000000000000000000000000000000);\n    const high_0 = V(0b01111111111111111111111111111111);\n    const pattern = V(\n      0b10001001010100100010010100100010,\n      0b11001110001100111000110011100011,\n      0b10101010101010101010101010101010,\n      0b01010101010101010101010101010101\n    );\n\n    run(t, 'insertBits', [T, T, TypeU32, TypeU32], T, cfg, [\n      { input: [all_0, all_0, u32(0), u32(32)], expected: all_0 },\n      { input: [all_0, all_0, u32(1), u32(10)], expected: all_0 },\n      { input: [all_0, all_0, u32(2), u32(5)], expected: all_0 },\n      { input: [all_0, all_0, u32(0), u32(1)], expected: all_0 },\n      { input: [all_0, all_0, u32(31), u32(1)], expected: all_0 },\n\n      { input: [all_0, all_1, u32(0), u32(32)], expected: all_1 },\n      { input: [all_1, all_0, u32(0), u32(32)], expected: all_0 },\n      { input: [all_0, all_1, u32(0), u32(1)], expected: low_1 },\n      { input: [all_1, all_0, u32(0), u32(1)], expected: low_0 },\n      { input: [all_0, all_1, u32(31), u32(1)], expected: high_1 },\n      { input: [all_1, all_0, u32(31), u32(1)], expected: high_0 },\n      { input: [all_0, all_1, u32(1), u32(10)], expected: V(0b00000000000000000000011111111110) },\n      { input: [all_1, all_0, u32(1), u32(10)], expected: V(0b11111111111111111111100000000001) },\n      { input: [all_0, all_1, u32(2), u32(5)], expected: V(0b00000000000000000000000001111100) },\n      { input: [all_1, all_0, u32(2), u32(5)], expected: V(0b11111111111111111111111110000011) },\n\n      // Patterns\n      { input: [all_0, pattern, u32(0), u32(32)], expected: pattern },\n      { input: [all_1, pattern, u32(0), u32(32)], expected: pattern },\n      {\n        input: [all_0, pattern, u32(1), u32(31)],\n        expected: V(\n          0b00010010101001000100101001000100,\n          0b10011100011001110001100111000110,\n          0b01010101010101010101010101010100,\n          0b10101010101010101010101010101010\n        ),\n      },\n      {\n        input: [all_1, pattern, u32(1), u32(31)],\n        expected: V(\n          0b00010010101001000100101001000101,\n          0b10011100011001110001100111000111,\n          0b01010101010101010101010101010101,\n          0b10101010101010101010101010101011\n        ),\n      },\n      {\n        input: [all_0, pattern, u32(14), u32(18)],\n        expected: V(\n          0b10001001010010001000000000000000,\n          0b11100011001110001100000000000000,\n          0b10101010101010101000000000000000,\n          0b01010101010101010100000000000000\n        ),\n      },\n      {\n        input: [all_1, pattern, u32(14), u32(18)],\n        expected: V(\n          0b10001001010010001011111111111111,\n          0b11100011001110001111111111111111,\n          0b10101010101010101011111111111111,\n          0b01010101010101010111111111111111\n        ),\n      },\n      {\n        input: [all_0, pattern, u32(14), u32(7)],\n        expected: V(\n          0b00000000000010001000000000000000,\n          0b00000000000110001100000000000000,\n          0b00000000000010101000000000000000,\n          0b00000000000101010100000000000000\n        ),\n      },\n      {\n        input: [all_1, pattern, u32(14), u32(7)],\n        expected: V(\n          0b11111111111010001011111111111111,\n          0b11111111111110001111111111111111,\n          0b11111111111010101011111111111111,\n          0b11111111111101010111111111111111\n        ),\n      },\n      {\n        input: [all_0, pattern, u32(14), u32(4)],\n        expected: V(\n          0b00000000000000001000000000000000,\n          0b00000000000000001100000000000000,\n          0b00000000000000101000000000000000,\n          0b00000000000000010100000000000000\n        ),\n      },\n      {\n        input: [all_1, pattern, u32(14), u32(4)],\n        expected: V(\n          0b11111111111111001011111111111111,\n          0b11111111111111001111111111111111,\n          0b11111111111111101011111111111111,\n          0b11111111111111010111111111111111\n        ),\n      },\n      {\n        input: [all_0, pattern, u32(14), u32(3)],\n        expected: V(\n          0b00000000000000001000000000000000,\n          0b00000000000000001100000000000000,\n          0b00000000000000001000000000000000,\n          0b00000000000000010100000000000000\n        ),\n      },\n      {\n        input: [all_1, pattern, u32(14), u32(3)],\n        expected: V(\n          0b11111111111111101011111111111111,\n          0b11111111111111101111111111111111,\n          0b11111111111111101011111111111111,\n          0b11111111111111110111111111111111\n        ),\n      },\n      {\n        input: [all_0, pattern, u32(18), u32(3)],\n        expected: V(\n          0b00000000000010000000000000000000,\n          0b00000000000011000000000000000000,\n          0b00000000000010000000000000000000,\n          0b00000000000101000000000000000000\n        ),\n      },\n      {\n        input: [all_1, pattern, u32(18), u32(3)],\n        expected: V(\n          0b11111111111010111111111111111111,\n          0b11111111111011111111111111111111,\n          0b11111111111010111111111111111111,\n          0b11111111111101111111111111111111\n        ),\n      },\n      {\n        input: [pattern, all_0, u32(1), u32(31)],\n        expected: V(\n          0b00000000000000000000000000000000,\n          0b00000000000000000000000000000001,\n          0b00000000000000000000000000000000,\n          0b00000000000000000000000000000001\n        ),\n      },\n      {\n        input: [pattern, all_1, u32(1), u32(31)],\n        expected: V(\n          0b11111111111111111111111111111110,\n          0b11111111111111111111111111111111,\n          0b11111111111111111111111111111110,\n          0b11111111111111111111111111111111\n        ),\n      },\n      {\n        input: [pattern, all_0, u32(14), u32(18)],\n        expected: V(\n          0b00000000000000000010010100100010,\n          0b00000000000000000000110011100011,\n          0b00000000000000000010101010101010,\n          0b00000000000000000001010101010101\n        ),\n      },\n      {\n        input: [pattern, all_1, u32(14), u32(18)],\n        expected: V(\n          0b11111111111111111110010100100010,\n          0b11111111111111111100110011100011,\n          0b11111111111111111110101010101010,\n          0b11111111111111111101010101010101\n        ),\n      },\n      {\n        input: [pattern, all_0, u32(14), u32(7)],\n        expected: V(\n          0b10001001010000000010010100100010,\n          0b11001110001000000000110011100011,\n          0b10101010101000000010101010101010,\n          0b01010101010000000001010101010101\n        ),\n      },\n      {\n        input: [pattern, all_1, u32(14), u32(7)],\n        expected: V(\n          0b10001001010111111110010100100010,\n          0b11001110001111111100110011100011,\n          0b10101010101111111110101010101010,\n          0b01010101010111111101010101010101\n        ),\n      },\n      {\n        input: [pattern, all_0, u32(14), u32(4)],\n        expected: V(\n          0b10001001010100000010010100100010,\n          0b11001110001100000000110011100011,\n          0b10101010101010000010101010101010,\n          0b01010101010101000001010101010101\n        ),\n      },\n      {\n        input: [pattern, all_1, u32(14), u32(4)],\n        expected: V(\n          0b10001001010100111110010100100010,\n          0b11001110001100111100110011100011,\n          0b10101010101010111110101010101010,\n          0b01010101010101111101010101010101\n        ),\n      },\n      {\n        input: [pattern, all_0, u32(14), u32(3)],\n        expected: V(\n          0b10001001010100100010010100100010,\n          0b11001110001100100000110011100011,\n          0b10101010101010100010101010101010,\n          0b01010101010101000001010101010101\n        ),\n      },\n      {\n        input: [pattern, all_1, u32(14), u32(3)],\n        expected: V(\n          0b10001001010100111110010100100010,\n          0b11001110001100111100110011100011,\n          0b10101010101010111110101010101010,\n          0b01010101010101011101010101010101\n        ),\n      },\n      {\n        input: [pattern, all_0, u32(18), u32(3)],\n        expected: V(\n          0b10001001010000100010010100100010,\n          0b11001110001000111000110011100011,\n          0b10101010101000101010101010101010,\n          0b01010101010000010101010101010101\n        ),\n      },\n      {\n        input: [pattern, all_1, u32(18), u32(3)],\n        expected: V(\n          0b10001001010111100010010100100010,\n          0b11001110001111111000110011100011,\n          0b10101010101111101010101010101010,\n          0b01010101010111010101010101010101\n        ),\n      },\n      {\n        input: [pattern, pattern, u32(18), u32(3)],\n        expected: V(\n          0b10001001010010100010010100100010,\n          0b11001110001011111000110011100011,\n          0b10101010101010101010101010101010,\n          0b01010101010101010101010101010101\n        ),\n      },\n      {\n        input: [pattern, pattern, u32(14), u32(7)],\n        expected: V(\n          0b10001001010010001010010100100010,\n          0b11001110001110001100110011100011,\n          0b10101010101010101010101010101010,\n          0b01010101010101010101010101010101\n        ),\n      },\n\n      // Start overflow\n      { input: [all_0, pattern, u32(50), u32(3)], expected: all_0 },\n      { input: [all_1, pattern, u32(50), u32(3)], expected: all_1 },\n      { input: [pattern, pattern, u32(50), u32(3)], expected: pattern },\n\n      // End overflow\n      { input: [all_0, pattern, u32(0), u32(99)], expected: pattern },\n      { input: [all_1, pattern, u32(0), u32(99)], expected: pattern },\n      { input: [all_0, low_1, u32(31), u32(99)], expected: high_1 },\n      {\n        input: [pattern, pattern, u32(20), u32(99)],\n        expected: V(\n          0b01010010001000100010010100100010,\n          0b11001110001100111000110011100011,\n          0b10101010101010101010101010101010,\n          0b01010101010101010101010101010101\n        ),\n      },\n\n      // Zero count\n      { input: [pattern, all_1, u32(0), u32(0)], expected: pattern },\n      { input: [pattern, all_1, u32(1), u32(0)], expected: pattern },\n      { input: [pattern, all_1, u32(2), u32(0)], expected: pattern },\n      { input: [pattern, all_1, u32(31), u32(0)], expected: pattern },\n      { input: [pattern, all_1, u32(32), u32(0)], expected: pattern },\n      { input: [pattern, all_1, u32(0), u32(0)], expected: pattern },\n    ]);\n  });\n"],"file":"insertBits.spec.js"}