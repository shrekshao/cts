{"version":3,"sources":["../../../../../src/webgpu/shader/execution/builtin/ldexp.spec.ts"],"names":["description","makeTestGroup","GPUTest","f32","i32","TypeF32","TypeI32","biasedRange","linearRange","correctlyRoundedThreshold","kValue","run","g","test","uniqueId","specURL","desc","params","u","combine","undefined","fn","t","truthFunc","e1","e2","i32_e2","result","Math","pow","value","Number","isFinite","positive","max","min","input","expected","e1_range","concat","e2_range","map","x","round","cases","forEach","c","cfg","cmpFloats"],"mappings":"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","sourcesContent":["export const description = `\nExecution Tests for the 'ldexp' builtin function\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { f32, i32, TypeF32, TypeI32 } from '../../../util/conversion.js';\nimport { biasedRange, linearRange } from '../../../util/math.js';\n\nimport { Case, Config, correctlyRoundedThreshold, kValue, run } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('float_builtin_functions,ldexp')\n  .uniqueId('358f6e4501a32907')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\nldexp:\nT is f32 or vecN<f32> I is i32 or vecN<i32>, where I is a scalar if T is a scalar, or a vector when T is a vector ldexp(e1: T ,e2: I ) -> T Returns e1 * 2e2. Component-wise when T is a vector. (GLSLstd450Ldexp)\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const truthFunc = (e1: number, e2: number): Case | undefined => {\n      const i32_e2 = i32(e2);\n      const result = e1 * Math.pow(2, i32_e2.value as number);\n      // Unclear what the expected behaviour for values that overflow f32 bounds, see https://github.com/gpuweb/gpuweb/issues/2631\n      if (!Number.isFinite(result)) {\n        return undefined;\n      } else if (result > kValue.f32.positive.max) {\n        return undefined;\n      } else if (result < kValue.f32.positive.min) {\n        return undefined;\n      }\n      return { input: [f32(e1), i32_e2], expected: f32(result) };\n    };\n\n    let e1_range: Array<number> = [];\n    //  -2^32 < x <= -1, biased towards -1\n    e1_range = e1_range.concat(biasedRange(-1, -(2 ** 32), 50));\n    // -1 <= x <= 0, linearly spread\n    e1_range = e1_range.concat(linearRange(-1, 0, 20));\n    // 0 <= x <= -1, linearly spread\n    e1_range = e1_range.concat(linearRange(0, 1, 20));\n    // 1 <= x < 2^32, biased towards 1\n    e1_range = e1_range.concat(biasedRange(1, 2 ** 32, 50));\n\n    let e2_range: Array<number> = [];\n    //  -127 < x <= 0, biased towards 0\n    e2_range = e2_range.concat(biasedRange(0, -127, 20).map(x => Math.round(x)));\n    //  0 <= x < 128, biased towards 0\n    e2_range = e2_range.concat(biasedRange(0, 128, 20).map(x => Math.round(x)));\n\n    let cases: Array<Case> = [];\n    e1_range.forEach(e1 => {\n      e2_range.forEach(e2 => {\n        const c = truthFunc(e1, e2);\n        if (c !== undefined) {\n          cases = cases.concat(c);\n        }\n      });\n    });\n    const cfg: Config = t.params;\n    cfg.cmpFloats = correctlyRoundedThreshold();\n    run(t, 'ldexp', [TypeF32, TypeI32], TypeF32, cfg, cases);\n  });\n"],"file":"ldexp.spec.js"}