{"version":3,"sources":["../../../../../src/webgpu/shader/execution/builtin/extractBits.spec.ts"],"names":["description","makeTestGroup","GPUTest","i32Bits","TypeI32","u32","TypeU32","u32Bits","vec2","vec3","vec4","TypeVec","run","g","test","uniqueId","specURL","desc","params","u","combine","fn","t","cfg","T","width","V","x","y","z","w","undefined","all_1","all_0","low_1","high_1","pattern","input","expected"],"mappings":"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","sourcesContent":["export const description = `\nExecution Tests for the 'extractBits' builtin function\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport {\n  i32Bits,\n  TypeI32,\n  u32,\n  TypeU32,\n  u32Bits,\n  vec2,\n  vec3,\n  vec4,\n  TypeVec,\n} from '../../../util/conversion.js';\n\nimport { Config, run } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('integer_builtin_functions,extractBits_unsigned')\n  .uniqueId('xxxxxxxxxxxxxxxx')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#integer-builtin-functions')\n  .desc(\n    `\nextractBits:\nT is u32 or vecN<u32> extractBits(e: T, offset: u32, count: u32) -> T\n\nReads bits from an integer, without sign extension.\n\nWhen T is a scalar type, then:\n\n* w is the bit width of T\n* o = min(offset,w)\n* c = min(count, w - o)\n* The result is 0 if c is 0.\n* Otherwise, bits 0..c-1 of the result are copied from bits o..o+c-1 of e. Other bits of the result are 0.\n\nComponent-wise when T is a vector.\n\nPlease read the following guidelines before contributing:\nhttps://github.com/gpuweb/cts/blob/main/docs/plan_autogen.md\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('width', [1, 2, 3, 4])\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n\n    const T = t.params.width === 1 ? TypeU32 : TypeVec(t.params.width, TypeU32);\n\n    const V = (x: number, y?: number, z?: number, w?: number) => {\n      y = y === undefined ? x : y;\n      z = z === undefined ? x : z;\n      w = w === undefined ? x : w;\n\n      switch (t.params.width) {\n        case 1:\n          return u32Bits(x);\n        case 2:\n          return vec2(u32Bits(x), u32Bits(y));\n        case 3:\n          return vec3(u32Bits(x), u32Bits(y), u32Bits(z));\n        default:\n          return vec4(u32Bits(x), u32Bits(y), u32Bits(z), u32Bits(w));\n      }\n    };\n\n    const all_1 = V(0b11111111111111111111111111111111);\n    const all_0 = V(0b00000000000000000000000000000000);\n    const low_1 = V(0b00000000000000000000000000000001);\n    const high_1 = V(0b10000000000000000000000000000000);\n    const pattern = V(\n      0b00000000000111011100000000000000,\n      0b11111111111000000011111111111111,\n      0b00000000010101010101000000000000,\n      0b00000000001010101010100000000000\n    );\n\n    run(t, 'extractBits', [T, TypeU32, TypeU32], T, cfg, [\n      { input: [all_0, u32(0), u32(32)], expected: all_0 },\n      { input: [all_0, u32(1), u32(10)], expected: all_0 },\n      { input: [all_0, u32(2), u32(5)], expected: all_0 },\n      { input: [all_0, u32(0), u32(1)], expected: all_0 },\n      { input: [all_0, u32(31), u32(1)], expected: all_0 },\n\n      { input: [all_1, u32(0), u32(32)], expected: all_1 },\n      {\n        input: [all_1, u32(1), u32(10)],\n        expected: V(0b00000000000000000000001111111111),\n      },\n      {\n        input: [all_1, u32(2), u32(5)],\n        expected: V(0b00000000000000000000000000011111),\n      },\n      { input: [all_1, u32(0), u32(1)], expected: low_1 },\n      { input: [all_1, u32(31), u32(1)], expected: low_1 },\n\n      // Patterns\n      { input: [pattern, u32(0), u32(32)], expected: pattern },\n      {\n        input: [pattern, u32(1), u32(31)],\n        expected: V(\n          0b00000000000011101110000000000000,\n          0b01111111111100000001111111111111,\n          0b00000000001010101010100000000000,\n          0b00000000000101010101010000000000\n        ),\n      },\n      {\n        input: [pattern, u32(14), u32(18)],\n        expected: V(\n          0b00000000000000000000000001110111,\n          0b00000000000000111111111110000000,\n          0b00000000000000000000000101010101,\n          0b00000000000000000000000010101010\n        ),\n      },\n      {\n        input: [pattern, u32(14), u32(7)],\n        expected: V(\n          0b00000000000000000000000001110111,\n          0b00000000000000000000000000000000,\n          0b00000000000000000000000001010101,\n          0b00000000000000000000000000101010\n        ),\n      },\n      {\n        input: [pattern, u32(14), u32(4)],\n        expected: V(\n          0b00000000000000000000000000000111,\n          0b00000000000000000000000000000000,\n          0b00000000000000000000000000000101,\n          0b00000000000000000000000000001010\n        ),\n      },\n      {\n        input: [pattern, u32(14), u32(3)],\n        expected: V(\n          0b00000000000000000000000000000111,\n          0b00000000000000000000000000000000,\n          0b00000000000000000000000000000101,\n          0b00000000000000000000000000000010\n        ),\n      },\n      {\n        input: [pattern, u32(18), u32(3)],\n        expected: V(\n          0b00000000000000000000000000000111,\n          0b00000000000000000000000000000000,\n          0b00000000000000000000000000000101,\n          0b00000000000000000000000000000010\n        ),\n      },\n      { input: [low_1, u32(0), u32(1)], expected: low_1 },\n      { input: [high_1, u32(31), u32(1)], expected: low_1 },\n\n      // End overflow\n      { input: [low_1, u32(0), u32(99)], expected: low_1 },\n      { input: [high_1, u32(31), u32(99)], expected: low_1 },\n      { input: [pattern, u32(0), u32(99)], expected: pattern },\n      {\n        input: [pattern, u32(14), u32(99)],\n        expected: V(\n          0b00000000000000000000000001110111,\n          0b00000000000000111111111110000000,\n          0b00000000000000000000000101010101,\n          0b00000000000000000000000010101010\n        ),\n      },\n\n      // Zero count\n      { input: [all_1, u32(0), u32(0)], expected: all_0 },\n      { input: [all_0, u32(0), u32(0)], expected: all_0 },\n      { input: [low_1, u32(0), u32(0)], expected: all_0 },\n      { input: [high_1, u32(31), u32(0)], expected: all_0 },\n      { input: [pattern, u32(0), u32(0)], expected: all_0 },\n    ]);\n  });\n\ng.test('integer_builtin_functions,extractBits_signed')\n  .uniqueId('xxxxxxxxxxxxxxxx')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#integer-builtin-functions')\n  .desc(\n    `\nextractBits:\nT is i32 or vecN<i32> extractBits(e: T, offset: u32, count: u32) -> T\n\nReads bits from an integer, with sign extension.\n\nWhen T is a scalar type, then:\n\n* w is the bit width of T\n* o = min(offset,w)\n* c = min(count, w - o)\n* The result is 0 if c is 0.\n* Otherwise, bits 0..c-1 of the result are copied from bits o..o+c-1 of e. Other bits of the result are the same as bit c-1 of the result.\n\nComponent-wise when T is a vector.\n\nPlease read the following guidelines before contributing:\nhttps://github.com/gpuweb/cts/blob/main/docs/plan_autogen.md\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('width', [1, 2, 3, 4])\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n\n    const T = t.params.width === 1 ? TypeI32 : TypeVec(t.params.width, TypeI32);\n\n    const V = (x: number, y?: number, z?: number, w?: number) => {\n      y = y === undefined ? x : y;\n      z = z === undefined ? x : z;\n      w = w === undefined ? x : w;\n\n      switch (t.params.width) {\n        case 1:\n          return i32Bits(x);\n        case 2:\n          return vec2(i32Bits(x), i32Bits(y));\n        case 3:\n          return vec3(i32Bits(x), i32Bits(y), i32Bits(z));\n        default:\n          return vec4(i32Bits(x), i32Bits(y), i32Bits(z), i32Bits(w));\n      }\n    };\n\n    const all_1 = V(0b11111111111111111111111111111111);\n    const all_0 = V(0b00000000000000000000000000000000);\n    const low_1 = V(0b00000000000000000000000000000001);\n    const high_1 = V(0b10000000000000000000000000000000);\n    const pattern = V(\n      0b00000000000111011100000000000000,\n      0b11111111111000000011111111111111,\n      0b00000000010101010101000000000000,\n      0b00000000001010101010100000000000\n    );\n\n    run(t, 'extractBits', [T, TypeU32, TypeU32], T, cfg, [\n      { input: [all_0, u32(0), u32(32)], expected: all_0 },\n      { input: [all_0, u32(1), u32(10)], expected: all_0 },\n      { input: [all_0, u32(2), u32(5)], expected: all_0 },\n      { input: [all_0, u32(0), u32(1)], expected: all_0 },\n      { input: [all_0, u32(31), u32(1)], expected: all_0 },\n\n      { input: [all_1, u32(0), u32(32)], expected: all_1 },\n      { input: [all_1, u32(1), u32(10)], expected: all_1 },\n      { input: [all_1, u32(2), u32(5)], expected: all_1 },\n      { input: [all_1, u32(0), u32(1)], expected: all_1 },\n      { input: [all_1, u32(31), u32(1)], expected: all_1 },\n\n      // Patterns\n      { input: [pattern, u32(0), u32(32)], expected: pattern },\n      {\n        input: [pattern, u32(1), u32(31)],\n        expected: V(\n          0b00000000000011101110000000000000,\n          0b11111111111100000001111111111111,\n          0b00000000001010101010100000000000,\n          0b00000000000101010101010000000000\n        ),\n      },\n      {\n        input: [pattern, u32(14), u32(18)],\n        expected: V(\n          0b00000000000000000000000001110111,\n          0b11111111111111111111111110000000,\n          0b00000000000000000000000101010101,\n          0b00000000000000000000000010101010\n        ),\n      },\n      {\n        input: [pattern, u32(14), u32(7)],\n        expected: V(\n          0b11111111111111111111111111110111,\n          0b00000000000000000000000000000000,\n          0b11111111111111111111111111010101,\n          0b00000000000000000000000000101010\n        ),\n      },\n      {\n        input: [pattern, u32(14), u32(4)],\n        expected: V(\n          0b00000000000000000000000000000111,\n          0b00000000000000000000000000000000,\n          0b00000000000000000000000000000101,\n          0b11111111111111111111111111111010\n        ),\n      },\n      {\n        input: [pattern, u32(14), u32(3)],\n        expected: V(\n          0b11111111111111111111111111111111,\n          0b00000000000000000000000000000000,\n          0b11111111111111111111111111111101,\n          0b00000000000000000000000000000010\n        ),\n      },\n      {\n        input: [pattern, u32(18), u32(3)],\n        expected: V(\n          0b11111111111111111111111111111111,\n          0b00000000000000000000000000000000,\n          0b11111111111111111111111111111101,\n          0b00000000000000000000000000000010\n        ),\n      },\n      { input: [low_1, u32(0), u32(1)], expected: all_1 },\n      { input: [high_1, u32(31), u32(1)], expected: all_1 },\n\n      // End overflow\n      { input: [low_1, u32(0), u32(99)], expected: low_1 },\n      { input: [high_1, u32(31), u32(99)], expected: all_1 },\n      { input: [pattern, u32(0), u32(99)], expected: pattern },\n      {\n        input: [pattern, u32(14), u32(99)],\n        expected: V(\n          0b00000000000000000000000001110111,\n          0b11111111111111111111111110000000,\n          0b00000000000000000000000101010101,\n          0b00000000000000000000000010101010\n        ),\n      },\n\n      // Zero count\n      { input: [all_1, u32(0), u32(0)], expected: all_0 },\n      { input: [all_0, u32(0), u32(0)], expected: all_0 },\n      { input: [low_1, u32(0), u32(0)], expected: all_0 },\n      { input: [high_1, u32(31), u32(0)], expected: all_0 },\n      { input: [pattern, u32(0), u32(0)], expected: all_0 },\n    ]);\n  });\n"],"file":"extractBits.spec.js"}