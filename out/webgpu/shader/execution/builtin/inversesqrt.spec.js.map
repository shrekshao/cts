{"version":3,"sources":["../../../../../src/webgpu/shader/execution/builtin/inversesqrt.spec.ts"],"names":["description","makeTestGroup","GPUTest","f32","f32Bits","TypeF32","u32","biasedRange","linearRange","kBit","run","ulpThreshold","g","test","uniqueId","specURL","desc","params","u","combine","undefined","fn","t","truthFunc","x","input","expected","Math","sqrt","cases","infinity","positive","concat","min","map","cfg","cmpFloats"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAFO,CAIP,SAASC,aAAT,QAA8B,4CAA9B;AACA,SAASC,OAAT,QAAwB,sBAAxB;AACA,SAASC,GAAT,EAAcC,OAAd,EAAuBC,OAAvB,EAAgCC,GAAhC,QAA2C,6BAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,uBAAzC;;AAEA,SAAuBC,IAAvB,EAA6BC,GAA7B,EAAkCC,YAAlC,QAAsD,cAAtD;;AAEA,OAAO,MAAMC,CAAC,GAAGX,aAAa,CAACC,OAAD,CAAvB;;AAEPU,CAAC,CAACC,IAAF,CAAO,qCAAP;AACGC,QADH,CACY,kBADZ;AAEGC,OAFH,CAEW,sEAFX;AAGGC,IAHH;AAIK;AACL;AACA;AACA;AACA;AACA;AACA,CAVA;;AAYGC,MAZH,CAYU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,cADX,EAC2B,CAAC,SAAD,EAAY,WAAZ,EAAyB,YAAzB,CAD3B;AAEGA,OAFH,CAEW,WAFX,EAEwB,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAFxB,CAbJ;;AAiBGC,EAjBH,CAiBM,MAAMC,CAAN,IAAW;AACb;AACA,QAAMC,SAAS,GAAIC,CAAD,IAAqB;AACrC,WAAO,EAAEC,KAAK,EAAEtB,GAAG,CAACqB,CAAD,CAAZ,EAAiBE,QAAQ,EAAEvB,GAAG,CAAC,IAAIwB,IAAI,CAACC,IAAL,CAAUJ,CAAV,CAAL,CAA9B,EAAP;AACD,GAFD;;AAIA;AACA,MAAIK,KAAkB,GAAG;AACvB,IAAEJ,KAAK,EAAErB,OAAO,CAACK,IAAI,CAACN,GAAL,CAAS2B,QAAT,CAAkBC,QAAnB,CAAhB,EAA8CL,QAAQ,EAAEvB,GAAG,CAAC,CAAD,CAA3D,EADuB;AAEvB,IAAEsB,KAAK,EAAEtB,GAAG,CAAC,CAAD,CAAZ,EAAiBuB,QAAQ,EAAEvB,GAAG,CAAC,CAAD,CAA9B,EAFuB,CAAzB;;;AAKA;AACA0B,EAAAA,KAAK,GAAGA,KAAK,CAACG,MAAN;AACNxB,EAAAA,WAAW,CAACJ,OAAO,CAACK,IAAI,CAACN,GAAL,CAAS4B,QAAT,CAAkBE,GAAnB,CAAR,EAAiC9B,GAAG,CAAC,CAAD,CAApC,EAAyCG,GAAG,CAAC,GAAD,CAA5C,CAAX,CAA8D4B,GAA9D,CAAkEV,CAAC,IAAID,SAAS,CAACC,CAAD,CAAhF,CADM,CAAR;;AAGA;AACAK,EAAAA,KAAK,GAAGA,KAAK,CAACG,MAAN,CAAazB,WAAW,CAACJ,GAAG,CAAC,CAAD,CAAJ,EAASA,GAAG,CAAC,KAAK,EAAN,CAAZ,EAAuBG,GAAG,CAAC,IAAD,CAA1B,CAAX,CAA6C4B,GAA7C,CAAiDV,CAAC,IAAID,SAAS,CAACC,CAAD,CAA/D,CAAb,CAAR;;AAEA,QAAMW,GAAW,GAAGb,CAAC,CAACL,MAAtB;AACAkB,EAAAA,GAAG,CAACC,SAAJ,GAAgBzB,YAAY,CAAC,CAAD,CAA5B;AACAD,EAAAA,GAAG,CAACY,CAAD,EAAI,aAAJ,EAAmB,CAACjB,OAAD,CAAnB,EAA8BA,OAA9B,EAAuC8B,GAAvC,EAA4CN,KAA5C,CAAH;AACD,CAvCH","sourcesContent":["export const description = `\nExecution Tests for the 'inverseSqrt' builtin function\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { f32, f32Bits, TypeF32, u32 } from '../../../util/conversion.js';\nimport { biasedRange, linearRange } from '../../../util/math.js';\n\nimport { Case, Config, kBit, run, ulpThreshold } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('float_builtin_functions,inverseSqrt')\n  .uniqueId('84fc180ad82c5618')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\ninverseSqrt:\nT is f32 or vecN<f32> inverseSqrt(e: T ) -> T Returns the reciprocal of sqrt(e). Component-wise when T is a vector. (GLSLstd450InverseSqrt)\n\nPlease read the following guidelines before contributing:\nhttps://github.com/gpuweb/cts/blob/main/docs/plan_autogen.md\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    // [1]: Need to decide what the ground-truth is.\n    const truthFunc = (x: number): Case => {\n      return { input: f32(x), expected: f32(1 / Math.sqrt(x)) };\n    };\n\n    // Well defined cases\n    let cases: Array<Case> = [\n      { input: f32Bits(kBit.f32.infinity.positive), expected: f32(0) },\n      { input: f32(1), expected: f32(1) },\n    ];\n\n    // 0 < x <= 1 linearly spread\n    cases = cases.concat(\n      linearRange(f32Bits(kBit.f32.positive.min), f32(1), u32(100)).map(x => truthFunc(x))\n    );\n    // 1 <= x < 2^32, biased towards 1\n    cases = cases.concat(biasedRange(f32(1), f32(2 ** 32), u32(1000)).map(x => truthFunc(x)));\n\n    const cfg: Config = t.params;\n    cfg.cmpFloats = ulpThreshold(2);\n    run(t, 'inverseSqrt', [TypeF32], TypeF32, cfg, cases);\n  });\n"],"file":"inversesqrt.spec.js"}