{"version":3,"sources":["../../../../../src/webgpu/shader/execution/builtin/min.spec.ts"],"names":["description","makeTestGroup","GPUTest","i32","i32Bits","TypeI32","TypeU32","u32","correctlyRoundedThreshold","run","g","test","uniqueId","specURL","desc","params","u","combine","undefined","fn","t","cfg","cmpFloats","input","expected"],"mappings":"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","sourcesContent":["export const description = `\nExecution Tests for the 'min' builtin function\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { i32, i32Bits, TypeI32, TypeU32, u32 } from '../../../util/conversion.js';\n\nimport { Config, correctlyRoundedThreshold, run } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('integer_builtin_functions,unsigned_min')\n  .uniqueId('29aba7ede5b93cdd')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#integer-builtin-functions')\n  .desc(\n    `\nunsigned min:\nT is u32 or vecN<u32> min(e1: T ,e2: T) -> T Returns e1 if e1 is less than e2, and e2 otherwise. Component-wise when T is a vector. (GLSLstd450UMin)\n\nPlease read the following guidelines before contributing:\nhttps://github.com/gpuweb/cts/blob/main/docs/plan_autogen.md\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    cfg.cmpFloats = correctlyRoundedThreshold();\n\n    run(t, 'min', [TypeU32, TypeU32], TypeU32, cfg, [\n      { input: [u32(1), u32(1)], expected: u32(1) },\n      { input: [u32(0), u32(0)], expected: u32(0) },\n      { input: [u32(0xffffffff), u32(0xffffffff)], expected: u32(0xffffffff) },\n      { input: [u32(1), u32(2)], expected: u32(1) },\n      { input: [u32(2), u32(1)], expected: u32(1) },\n      { input: [u32(0x70000000), u32(0x80000000)], expected: u32(0x70000000) },\n      { input: [u32(0x80000000), u32(0x70000000)], expected: u32(0x70000000) },\n      { input: [u32(0), u32(0xffffffff)], expected: u32(0) },\n      { input: [u32(0xffffffff), u32(0)], expected: u32(0) },\n      { input: [u32(0), u32(0xffffffff)], expected: u32(0) },\n    ]);\n  });\n\ng.test('integer_builtin_functions,signed_min')\n  .uniqueId('60c8ecdf409b45fc')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#integer-builtin-functions')\n  .desc(\n    `\nsigned min:\nT is i32 or vecN<i32> min(e1: T ,e2: T) -> T Returns e1 if e1 is less than e2, and e2 otherwise. Component-wise when T is a vector. (GLSLstd45SUMin)\n\nPlease read the following guidelines before contributing:\nhttps://github.com/gpuweb/cts/blob/main/docs/plan_autogen.md\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    cfg.cmpFloats = correctlyRoundedThreshold();\n\n    run(t, 'min', [TypeI32, TypeI32], TypeI32, cfg, [\n      { input: [i32(1), i32(1)], expected: i32(1) },\n      { input: [i32(0), i32(0)], expected: i32(0) },\n      { input: [i32(-1), i32(-1)], expected: i32(-1) },\n      { input: [i32(1), i32(2)], expected: i32(1) },\n      { input: [i32(2), i32(1)], expected: i32(1) },\n      { input: [i32(-1), i32(-2)], expected: i32(-2) },\n      { input: [i32(-2), i32(-1)], expected: i32(-2) },\n      { input: [i32(1), i32(-1)], expected: i32(-1) },\n      { input: [i32(-1), i32(1)], expected: i32(-1) },\n      { input: [i32Bits(0x70000000), i32Bits(0x80000000)], expected: i32Bits(0x80000000) },\n      { input: [i32Bits(0x80000000), i32Bits(0x70000000)], expected: i32Bits(0x80000000) },\n      { input: [i32Bits(0xffffffff), i32(0)], expected: i32Bits(0xffffffff) },\n      { input: [i32(0), i32Bits(0xffffffff)], expected: i32Bits(0xffffffff) },\n    ]);\n  });\n"],"file":"min.spec.js"}