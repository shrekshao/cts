{"version":3,"sources":["../../../../../src/webgpu/shader/execution/builtin/cos.spec.ts"],"names":["description","makeTestGroup","GPUTest","f32","TypeF32","absThreshold","run","g","test","uniqueId","specURL","desc","params","u","combine","undefined","fn","t","cases","Array","i","length","angle","Math","PI","input","expected","cos","cfg","cmpFloats"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAFO,CAIP,SAASC,aAAT,QAA8B,4CAA9B;AACA,SAASC,OAAT,QAAwB,sBAAxB;AACA,SAASC,GAAT,EAAcC,OAAd,QAA6B,6BAA7B;;AAEA,SAASC,YAAT,EAAqCC,GAArC,QAAgD,cAAhD;;AAEA,OAAO,MAAMC,CAAC,GAAGN,aAAa,CAACC,OAAD,CAAvB;;AAEPK,CAAC,CAACC,IAAF,CAAO,6BAAP;AACGC,QADH,CACY,kBADZ;AAEGC,OAFH,CAEW,sEAFX;AAGGC,IAHH;AAIK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAZA;;AAcGC,MAdH,CAcU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,cADX,EAC2B,CAAC,SAAD,EAAY,WAAZ,EAAyB,YAAzB,CAD3B;AAEGA,OAFH,CAEW,WAFX,EAEwB,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAFxB,CAfJ;;AAmBGC,EAnBH,CAmBM,MAAMC,CAAN,IAAW;AACb,QAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAgB,IAAhB,CAAd;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC;AACA,UAAME,KAAK,GAAG,CAACC,IAAI,CAACC,EAAN,GAAY,MAAMD,IAAI,CAACC,EAAX,GAAgBJ,CAAjB,IAAuBF,KAAK,CAACG,MAAN,GAAe,CAAtC,CAAzB;AACAH,IAAAA,KAAK,CAACE,CAAD,CAAL,GAAW,EAAEK,KAAK,EAAEtB,GAAG,CAACmB,KAAD,CAAZ,EAAqBI,QAAQ,EAAEvB,GAAG,CAACoB,IAAI,CAACI,GAAL,CAASL,KAAT,CAAD,CAAlC,EAAX;AACD;;AAED,QAAMM,GAAW,GAAGX,CAAC,CAACL,MAAtB;AACAgB,EAAAA,GAAG,CAACC,SAAJ,GAAgBxB,YAAY,CAAC,KAAK,CAAC,EAAP,CAA5B;AACAC,EAAAA,GAAG,CAACW,CAAD,EAAI,KAAJ,EAAW,CAACb,OAAD,CAAX,EAAsBA,OAAtB,EAA+BwB,GAA/B,EAAoCV,KAApC,CAAH;AACD,CA9BH","sourcesContent":["export const description = `\nExecution Tests for the 'cos' builtin function\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { f32, TypeF32 } from '../../../util/conversion.js';\n\nimport { absThreshold, Case, Config, run } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('float_builtin_functions,cos')\n  .uniqueId('650973d690dcd841')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\ncos:\nT is f32 or vecN<f32> cos(e: T ) -> T Returns the cosine of e. Component-wise when T is a vector. (GLSLstd450Cos)\n\nPlease read the following guidelines before contributing:\nhttps://github.com/gpuweb/cts/blob/main/docs/plan_autogen.md\n\nTODO(#792): Decide what the ground-truth is for these tests. [1]\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cases = new Array<Case>(1000);\n    for (let i = 0; i < cases.length; i++) {\n      // [1]: Need to decide what the ground-truth is.\n      const angle = -Math.PI + (2.0 * Math.PI * i) / (cases.length - 1);\n      cases[i] = { input: f32(angle), expected: f32(Math.cos(angle)) };\n    }\n\n    const cfg: Config = t.params;\n    cfg.cmpFloats = absThreshold(2 ** -11);\n    run(t, 'cos', [TypeF32], TypeF32, cfg, cases);\n  });\n"],"file":"cos.spec.js"}