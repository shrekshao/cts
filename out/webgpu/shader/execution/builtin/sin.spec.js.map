{"version":3,"sources":["../../../../../src/webgpu/shader/execution/builtin/sin.spec.ts"],"names":["description","makeTestGroup","GPUTest","f32","TypeF32","linearRange","absThreshold","run","g","test","uniqueId","specURL","desc","params","u","combine","undefined","fn","t","truthFunc","x","input","expected","Math","sin","cases","PI","map","cfg","cmpFloats"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAFO,CAIP,SAASC,aAAT,QAA8B,4CAA9B;AACA,SAASC,OAAT,QAAwB,sBAAxB;AACA,SAASC,GAAT,EAAcC,OAAd,QAA6B,6BAA7B;AACA,SAASC,WAAT,QAA4B,uBAA5B;;AAEA,SAASC,YAAT,EAAqCC,GAArC,QAAgD,cAAhD;;AAEA,OAAO,MAAMC,CAAC,GAAGP,aAAa,CAACC,OAAD,CAAvB;;AAEPM,CAAC,CAACC,IAAF,CAAO,6BAAP;AACGC,QADH,CACY,kBADZ;AAEGC,OAFH,CAEW,sEAFX;AAGGC,IAHH;AAIK;AACL;AACA;AACA;AACA;AACA,CATA;;AAWGC,MAXH,CAWU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,cADX,EAC2B,CAAC,SAAD,EAAY,WAAZ,EAAyB,YAAzB,CAD3B;AAEGA,OAFH,CAEW,WAFX,EAEwB,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAFxB,CAZJ;;AAgBGC,EAhBH,CAgBM,OAAMC,CAAN,KAAW;AACb;AACA,QAAMC,SAAS,GAAG,CAACC,CAAD,KAAqB;AACrC,WAAO,EAAEC,KAAK,EAAElB,GAAG,CAACiB,CAAD,CAAZ,EAAiBE,QAAQ,EAAEnB,GAAG,CAACoB,IAAI,CAACC,GAAL,CAASJ,CAAT,CAAD,CAA9B,EAAP;AACD,GAFD;;AAIA;AACA,QAAMK,KAAK,GAAGpB,WAAW,CAAC,CAACkB,IAAI,CAACG,EAAP,EAAWH,IAAI,CAACG,EAAhB,EAAoB,IAApB,CAAX,CAAqCC,GAArC,CAAyC,CAAAP,CAAC,KAAID,SAAS,CAACC,CAAD,CAAvD,CAAd;;AAEA,QAAMQ,GAAW,GAAGV,CAAC,CAACL,MAAtB;AACAe,EAAAA,GAAG,CAACC,SAAJ,GAAgBvB,YAAY,CAAC,KAAK,CAAC,EAAP,CAA5B;AACAC,EAAAA,GAAG,CAACW,CAAD,EAAI,KAAJ,EAAW,CAACd,OAAD,CAAX,EAAsBA,OAAtB,EAA+BwB,GAA/B,EAAoCH,KAApC,CAAH;AACD,CA5BH","sourcesContent":["export const description = `\nExecution Tests for the 'sin' builtin function\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { f32, TypeF32 } from '../../../util/conversion.js';\nimport { linearRange } from '../../../util/math.js';\n\nimport { absThreshold, Case, Config, run } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('float_builtin_functions,sin')\n  .uniqueId('d10f3745e5ea639d')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\nsin:\nT is f32 or vecN<f32> sin(e: T ) -> T Returns the sine of e. Component-wise when T is a vector. (GLSLstd450Sin)\n\nTODO(#792): Decide what the ground-truth is for these tests. [1]\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    // [1]: Need to decide what the ground-truth is.\n    const truthFunc = (x: number): Case => {\n      return { input: f32(x), expected: f32(Math.sin(x)) };\n    };\n\n    // Spec defines accuracy on [-π, π]\n    const cases = linearRange(-Math.PI, Math.PI, 1000).map(x => truthFunc(x));\n\n    const cfg: Config = t.params;\n    cfg.cmpFloats = absThreshold(2 ** -11);\n    run(t, 'sin', [TypeF32], TypeF32, cfg, cases);\n  });\n"],"file":"sin.spec.js"}