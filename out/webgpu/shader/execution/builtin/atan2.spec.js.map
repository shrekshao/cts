{"version":3,"sources":["../../../../../src/webgpu/shader/execution/builtin/atan2.spec.ts"],"names":["description","makeTestGroup","assert","GPUTest","f32","TypeF32","biasedRange","linearRange","kValue","run","ulpThreshold","g","test","uniqueId","specURL","desc","params","u","combine","undefined","fn","t","truthFunc","y","x","input","expected","Math","atan2","numeric_range","concat","negative","max","positive","min","cases","map","forEach","y_idx","x_idx","cfg","cmpFloats"],"mappings":"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","sourcesContent":["export const description = `\nExecution Tests for the 'atan2' builtin function\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert } from '../../../../common/util/util.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { f32, TypeF32 } from '../../../util/conversion.js';\nimport { biasedRange, linearRange } from '../../../util/math.js';\n\nimport { Case, Config, kValue, run, ulpThreshold } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('float_builtin_functions,atan2')\n  .uniqueId('cc85953f226ac95c')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\natan2:\nT is f32 or vecN<f32> atan2(e1: T ,e2: T ) -> T Returns the arc tangent of e1 over e2. Component-wise when T is a vector. (GLSLstd450Atan2)\n\nTODO(#792): Decide what the ground-truth is for these tests. [1]\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    // [1]: Need to decide what the ground-truth is.\n    const truthFunc = (y: number, x: number): Case => {\n      assert(x !== 0, 'atan2 is undefined for x = 0');\n      return { input: [f32(y), f32(x)], expected: f32(Math.atan2(y, x)) };\n    };\n\n    let numeric_range: Array<number> = [];\n    //  -2^32 < x <= -1, biased towards -1\n    numeric_range = numeric_range.concat(biasedRange(-1.0, -(2 ** 32), 50));\n    // -1 <= x < 0, linearly spread\n    numeric_range = numeric_range.concat(linearRange(-1.0, kValue.f32.negative.max, 20));\n    // 0 < x < -1, linearly spread\n    numeric_range = numeric_range.concat(linearRange(kValue.f32.positive.min, 1.0, 20));\n    // 1 <= x < 2^32, biased towards 1\n    numeric_range = numeric_range.concat(biasedRange(1.0, 2 ** 32, 20));\n\n    let cases: Array<Case> = [];\n    cases = cases.concat(numeric_range.map(x => truthFunc(0.0, x)));\n    numeric_range.forEach((y, y_idx) => {\n      numeric_range.forEach((x, x_idx) => {\n        if (x_idx >= y_idx) {\n          cases = cases.concat(truthFunc(y, x));\n        }\n      });\n    });\n    const cfg: Config = t.params;\n    cfg.cmpFloats = ulpThreshold(4096);\n    run(t, 'atan2', [TypeF32, TypeF32], TypeF32, cfg, cases);\n  });\n"],"file":"atan2.spec.js"}