{"version":3,"sources":["../../../../../src/webgpu/shader/execution/builtin/builtin.ts"],"names":["Colors","f32","ScalarType","Scalar","Vector","TypeVec","TypeU32","VectorType","correctlyRounded","diffULP","absThreshold","diff","got","expected","Number","isFinite","Math","abs","ulpThreshold","ulp","correctlyRoundedThreshold","compare","cmpFloats","gTy","type","eTy","matched","red","toString","g","e","isFloat","kind","value","green","gLen","elements","length","eLen","gElements","Array","eElements","i","max","cmp","join","Error","anyOf","values","failed","push","toComparator","input","undefined","storageType","ty","width","elementType","fromStorage","expr","toStorage","kValueStride","run","t","builtin","parameterTypes","returnType","cfg","storageClass","cases","expect","vectorize","packed","packScalarsToVector","maxInputSize","device","limits","maxUniformBufferBindingSize","maxStorageBufferBindingSize","casesPerBatch","floor","batchCases","slice","min","runBatch","paramExpr","map","source","inputSize","inputData","Uint8Array","caseStride","caseIdx","caseBase","paramIdx","offset","params","copyTo","inputBuffer","makeBufferWithContents","GPUBufferUsage","COPY_SRC","UNIFORM","STORAGE","outputBufferSize","outputBuffer","createBuffer","size","usage","COPY_DST","module","createShaderModule","code","pipeline","createComputePipeline","compute","entryPoint","group","createBindGroup","layout","getBindGroupLayout","entries","binding","resource","buffer","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatch","endPass","queue","submit","finish","checkExpectation","outputData","outputs","read","errs","c","expectGPUBufferValuesPassCheck","typedLength","vectorWidth","packedCases","packedParameterTypes","p","packedReturnType","clampCaseIdx","idx","packedInputs","inputElements","comparators","packedComparator","d","kBit","i32","positive","negative","u32","zero","subnormal","nan","s","q","infinity","powTwo","toMinus1","toMinus2","toMinus3","toMinus4","toMinus5","toMinus6","toMinus7","toMinus8","toMinus9","toMinus10","toMinus11","toMinus12","toMinus13","toMinus14","toMinus15","toMinus16","toMinus17","toMinus18","toMinus19","toMinus20","toMinus21","toMinus22","toMinus23","toMinus24","toMinus25","toMinus26","toMinus27","toMinus28","toMinus29","toMinus30","toMinus31","to0","to1","to2","to3","to4","to5","to6","to7","to8","to9","to10","to11","to12","to13","to14","to15","to16","to17","to18","to19","to20","to21","to22","to23","to24","to25","to26","to27","to28","to29","to30","to31","negPowTwo","kValue","pow","to32","toMinus32"],"mappings":"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","sourcesContent":["import { Colors } from '../../../../common/util/colors.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport {\n  f32,\n  ScalarType,\n  Scalar,\n  Vector,\n  Value,\n  Type,\n  TypeVec,\n  TypeU32,\n  VectorType,\n} from '../../../util/conversion.js';\nimport { correctlyRounded, diffULP } from '../../../util/math.js';\n\n/** Comparison describes the result of a Comparator function. */\nexport interface Comparison {\n  matched: boolean; // True if the two values were considered a match\n  got: string; // The string representation of the 'got' value (possibly with markup)\n  expected: string; // The string representation of the 'expected' value (possibly with markup)\n}\n\n/** FloatMatch is a function that compares whether the two floating point numbers match. */\nexport interface FloatMatch {\n  (got: number, expected: number): boolean;\n}\n\n/** Comparator is a function that compares whether the provided value matches an expectation. */\nexport interface Comparator {\n  (got: Value, cmpFloats: FloatMatch): Comparison;\n}\n\n/**\n * @returns a FloatMatch that returns true iff the two numbers are equal to, or\n * less than the specified absolute error threshold.\n */\nexport function absThreshold(diff: number): FloatMatch {\n  return (got, expected) => {\n    if (got === expected) {\n      return true;\n    }\n    if (!Number.isFinite(got) || !Number.isFinite(expected)) {\n      return false;\n    }\n    return Math.abs(got - expected) <= diff;\n  };\n}\n\n/**\n * @returns a FloatMatch that returns true iff the two numbers are within or\n * equal to the specified ULP threshold value.\n */\nexport function ulpThreshold(ulp: number): FloatMatch {\n  return (got, expected) => {\n    if (got === expected) {\n      return true;\n    }\n    return diffULP(got, expected) <= ulp;\n  };\n}\n\n/**\n * @returns a FloatMatch that returns true iff |expected| is a correctly round\n * to |got|.\n * |got| must be expressible as a float32.\n */\nexport function correctlyRoundedThreshold(): FloatMatch {\n  return (got, expected) => {\n    return correctlyRounded(f32(got), expected);\n  };\n}\n\n// compare() compares 'got' to 'expected', returning the Comparison information.\nfunction compare(got: Value, expected: Value, cmpFloats: FloatMatch): Comparison {\n  {\n    // Check types\n    const gTy = got.type;\n    const eTy = expected.type;\n    if (gTy !== eTy) {\n      return {\n        matched: false,\n        got: `${Colors.red(gTy.toString())}(${got})`,\n        expected: `${Colors.red(eTy.toString())}(${expected})`,\n      };\n    }\n  }\n\n  if (got instanceof Scalar) {\n    const g = got;\n    const e = expected as Scalar;\n    const isFloat = g.type.kind === 'f32';\n    const matched =\n      (isFloat && cmpFloats(g.value as number, e.value as number)) ||\n      (!isFloat && g.value === e.value);\n    return {\n      matched,\n      got: g.toString(),\n      expected: matched ? Colors.green(e.toString()) : Colors.red(e.toString()),\n    };\n  }\n  if (got instanceof Vector) {\n    const gLen = got.elements.length;\n    const eLen = (expected as Vector).elements.length;\n    let matched = gLen === eLen;\n    const gElements = new Array<string>(gLen);\n    const eElements = new Array<string>(eLen);\n    for (let i = 0; i < Math.max(gLen, eLen); i++) {\n      if (i < gLen && i < eLen) {\n        const g = got.elements[i];\n        const e = (expected as Vector).elements[i];\n        const cmp = compare(g, e, cmpFloats);\n        matched = matched && cmp.matched;\n        gElements[i] = cmp.got;\n        eElements[i] = cmp.expected;\n        continue;\n      }\n      matched = false;\n      if (i < gLen) {\n        gElements[i] = got.elements[i].toString();\n      }\n      if (i < eLen) {\n        eElements[i] = (expected as Vector).elements[i].toString();\n      }\n    }\n    return {\n      matched,\n      got: `${got.type}(${gElements.join(', ')})`,\n      expected: `${expected.type}(${eElements.join(', ')})`,\n    };\n  }\n  throw new Error(`unhandled type '${typeof got}`);\n}\n\n/** @returns a Comparator that checks whether a test value matches any of the provided values */\nexport function anyOf(...values: Value[]): Comparator {\n  return (got, cmpFloats) => {\n    const failed: Array<string> = [];\n    for (const e of values) {\n      const cmp = compare(got, e, cmpFloats);\n      if (cmp.matched) {\n        return cmp;\n      }\n      failed.push(cmp.expected);\n    }\n    return { matched: false, got: got.toString(), expected: failed.join(' or ') };\n  };\n}\n\n// Helper for converting Values to Comparators.\nfunction toComparator(input: Value | Comparator): Comparator {\n  if ((input as Value).type !== undefined) {\n    return (got, cmpFloats) => compare(got, input as Value, cmpFloats);\n  }\n  return input as Comparator;\n}\n\n/** Case is a single builtin test case. */\nexport type Case = {\n  // The input value to the builtin\n  input: Value | Array<Value>;\n  // The expected value, or comparator\n  expected: Value | Comparator;\n};\n\n/** CaseList is a list of Cases */\nexport type CaseList = Array<Case>;\n\n/** The storage class to use on test input buffers */\nexport type StorageClass = 'uniform' | 'storage_r' | 'storage_rw';\n\n/** Configuration for running a builtin test */\nexport type Config = {\n  // Where the input values are read from\n  storageClass: StorageClass;\n  // If defined, scalar test cases will be packed into vectors of the given\n  // width, which must be 2, 3 or 4.\n  // Requires that all parameters of the builtin overload are of a scalar type,\n  // and the return type of the builtin overload is also a scalar type.\n  // If the number of test cases is not a multiple of the vector width, then the\n  // last scalar value is repeated to fill the last vector value.\n  vectorize?: number;\n  // The FloatMatch to use when comparing floating point numbers.\n  // If undefined, floating point numbers must match exactly.\n  cmpFloats?: FloatMatch;\n};\n\n// Helper for returning the WGSL storage type for the given Type.\nfunction storageType(ty: Type): Type {\n  if (ty instanceof ScalarType) {\n    if (ty.kind === 'bool') {\n      return TypeU32;\n    }\n  }\n  if (ty instanceof VectorType) {\n    return TypeVec(ty.width, storageType(ty.elementType) as ScalarType);\n  }\n  return ty;\n}\n\n// Helper for converting a value of the type 'ty' from the storage type.\nfunction fromStorage(ty: Type, expr: string): string {\n  if (ty instanceof ScalarType) {\n    if (ty.kind === 'bool') {\n      return `${expr} != 0u`;\n    }\n  }\n  if (ty instanceof VectorType) {\n    if (ty.elementType.kind === 'bool') {\n      return `${expr} != vec${ty.width}<u32>(0u)`;\n    }\n  }\n  return expr;\n}\n\n// Helper for converting a value of the type 'ty' to the storage type.\nfunction toStorage(ty: Type, expr: string): string {\n  if (ty instanceof ScalarType) {\n    if (ty.kind === 'bool') {\n      return `select(0u, 1u, ${expr})`;\n    }\n  }\n  if (ty instanceof VectorType) {\n    if (ty.elementType.kind === 'bool') {\n      return `select(vec${ty.width}<u32>(0u), vec${ty.width}<u32>(1u), ${expr})`;\n    }\n  }\n  return expr;\n}\n\n// Currently all values are packed into buffers of 16 byte strides\nconst kValueStride = 16;\n\n/**\n * Runs the list of builtin tests, possibly splitting the tests into multiple\n * dispatches to keep the input data within the buffer binding limits.\n * run() will pack the scalar test cases into smaller set of vectorized tests\n * if `cfg.vectorize` is defined.\n * @param t the GPUTest\n * @param builtin the builtin being tested\n * @param parameterTypes the list of builtin parameter types\n * @param returnType the return type for the builtin overload\n * @param cfg test configuration values\n * @param cases list of test cases\n */\nexport function run(\n  t: GPUTest,\n  builtin: string,\n  parameterTypes: Array<Type>,\n  returnType: Type,\n  cfg: Config = { storageClass: 'storage_r' },\n  cases: CaseList\n) {\n  const cmpFloats =\n    cfg.cmpFloats !== undefined ? cfg.cmpFloats : (got: number, expect: number) => got === expect;\n\n  // If the 'vectorize' config option was provided, pack the cases into vectors.\n  if (cfg.vectorize !== undefined) {\n    const packed = packScalarsToVector(parameterTypes, returnType, cases, cfg.vectorize);\n    cases = packed.cases;\n    parameterTypes = packed.parameterTypes;\n    returnType = packed.returnType;\n  }\n\n  // The size of the input buffer max exceed the maximum buffer binding size,\n  // so chunk the tests up into batches that fit into the limits.\n  const maxInputSize =\n    cfg.storageClass === 'uniform'\n      ? t.device.limits.maxUniformBufferBindingSize\n      : t.device.limits.maxStorageBufferBindingSize;\n  const casesPerBatch = Math.floor(maxInputSize / (parameterTypes.length * kValueStride));\n  for (let i = 0; i < cases.length; i += casesPerBatch) {\n    const batchCases = cases.slice(i, Math.min(i + casesPerBatch, cases.length));\n    runBatch(t, builtin, parameterTypes, returnType, batchCases, cfg.storageClass, cmpFloats);\n  }\n}\n\n/**\n * Runs the list of builtin tests. The input data must fit within the buffer\n * binding limits of the given storageClass.\n * @param t the GPUTest\n * @param builtin the builtin being tested\n * @param parameterTypes the list of builtin parameter types\n * @param returnType the return type for the builtin overload\n * @param cases list of test cases that fit within the binding limits of the device\n * @param storageClass the storage class to use for the input buffer\n * @param cmpFloats the method to compare floating point numbers\n */\nfunction runBatch(\n  t: GPUTest,\n  builtin: string,\n  parameterTypes: Array<Type>,\n  returnType: Type,\n  cases: CaseList,\n  storageClass: StorageClass,\n  cmpFloats: FloatMatch\n) {\n  // returns the WGSL expression to load the ith parameter of the given type from the input buffer\n  const paramExpr = (ty: Type, i: number) => fromStorage(ty, `inputs.test[i].param${i}`);\n\n  // resolves to the expression that calls the builtin\n  const expr = toStorage(\n    returnType,\n    builtin + '(' + parameterTypes.map(paramExpr).join(', ') + ')'\n  );\n\n  // the full WGSL shader source\n  const source = `\nstruct Parameters {\n${parameterTypes\n  .map((ty, i) => `  [[size(${kValueStride})]] param${i} : ${storageType(ty)};`)\n  .join('\\n')}\n};\n\nstruct Inputs {\n  test : array<Parameters, ${cases.length}>;\n};\n\nstruct Outputs {\n  test : [[stride(${kValueStride})]] array<${storageType(returnType)}, ${cases.length}>;\n};\n\n${\n  storageClass === 'uniform'\n    ? `[[group(0), binding(0)]] var<uniform> inputs : Inputs;`\n    : `[[group(0), binding(0)]] var<storage, ${\n        storageClass === 'storage_r' ? 'read' : 'read_write'\n      }> inputs : Inputs;`\n}\n[[group(0), binding(1)]] var<storage, write> outputs : Outputs;\n\n[[stage(compute), workgroup_size(1)]]\nfn main() {\n  for(var i = 0; i < ${cases.length}; i = i + 1) {\n    outputs.test[i] = ${expr};\n  }\n}\n`;\n\n  const inputSize = cases.length * parameterTypes.length * kValueStride;\n\n  // Holds all the parameter values for all cases\n  const inputData = new Uint8Array(inputSize);\n\n  // Pack all the input parameter values into the inputData buffer\n  {\n    const caseStride = kValueStride * parameterTypes.length;\n    for (let caseIdx = 0; caseIdx < cases.length; caseIdx++) {\n      const caseBase = caseIdx * caseStride;\n      for (let paramIdx = 0; paramIdx < parameterTypes.length; paramIdx++) {\n        const offset = caseBase + paramIdx * kValueStride;\n        const params = cases[caseIdx].input;\n        if (params instanceof Array) {\n          params[paramIdx].copyTo(inputData, offset);\n        } else {\n          params.copyTo(inputData, offset);\n        }\n      }\n    }\n  }\n  const inputBuffer = t.makeBufferWithContents(\n    inputData,\n    GPUBufferUsage.COPY_SRC |\n      (storageClass === 'uniform' ? GPUBufferUsage.UNIFORM : GPUBufferUsage.STORAGE)\n  );\n\n  // Construct a buffer to hold the results of the builtin tests\n  const outputBufferSize = cases.length * kValueStride;\n  const outputBuffer = t.device.createBuffer({\n    size: outputBufferSize,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE,\n  });\n\n  const module = t.device.createShaderModule({ code: source });\n  const pipeline = t.device.createComputePipeline({\n    compute: { module, entryPoint: 'main' },\n  });\n\n  const group = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n      { binding: 0, resource: { buffer: inputBuffer } },\n      { binding: 1, resource: { buffer: outputBuffer } },\n    ],\n  });\n\n  const encoder = t.device.createCommandEncoder();\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, group);\n  pass.dispatch(1);\n  pass.endPass();\n\n  t.queue.submit([encoder.finish()]);\n\n  const checkExpectation = (outputData: Uint8Array) => {\n    // Read the outputs from the output buffer\n    const outputs = new Array<Value>(cases.length);\n    for (let i = 0; i < cases.length; i++) {\n      outputs[i] = returnType.read(outputData, i * kValueStride);\n    }\n\n    // The list of expectation failures\n    const errs: string[] = [];\n\n    // For each case...\n    for (let caseIdx = 0; caseIdx < cases.length; caseIdx++) {\n      const c = cases[caseIdx];\n      const got = outputs[caseIdx];\n      const cmp = toComparator(c.expected)(got, cmpFloats);\n      if (!cmp.matched) {\n        errs.push(`${builtin}(${c.input instanceof Array ? c.input.join(', ') : c.input})\n    returned: ${cmp.got}\n    expected: ${cmp.expected}`);\n      }\n    }\n\n    return errs.length > 0 ? new Error(errs.join('\\n\\n')) : undefined;\n  };\n\n  t.expectGPUBufferValuesPassCheck(outputBuffer, checkExpectation, {\n    type: Uint8Array,\n    typedLength: outputBufferSize,\n  });\n}\n\n/**\n * Packs a list of scalar test cases into a smaller list of vector cases.\n * Requires that all parameters of the builtin overload are of a scalar type,\n * and the return type of the builtin overload is also a scalar type.\n * If `cases.length` is not a multiple of `vectorWidth`, then the last scalar\n * test case value is repeated to fill the vector value.\n */\nfunction packScalarsToVector(\n  parameterTypes: Array<Type>,\n  returnType: Type,\n  cases: CaseList,\n  vectorWidth: number\n): { cases: CaseList; parameterTypes: Array<Type>; returnType: Type } {\n  // Validate that the parameters and return type are all vectorizable\n  for (let i = 0; i < parameterTypes.length; i++) {\n    const ty = parameterTypes[i];\n    if (!(ty instanceof ScalarType)) {\n      throw new Error(\n        `packScalarsToVector() can only be used on scalar parameter types, but the ${i}'th parameter type is a ${ty}'`\n      );\n    }\n  }\n  if (!(returnType instanceof ScalarType)) {\n    throw new Error(\n      `packScalarsToVector() can only be used with a scalar return type, but the return type is a ${returnType}'`\n    );\n  }\n\n  const packedCases: Array<Case> = [];\n  const packedParameterTypes = parameterTypes.map(p => TypeVec(vectorWidth, p as ScalarType));\n  const packedReturnType = new VectorType(vectorWidth, returnType as ScalarType);\n\n  const clampCaseIdx = (idx: number) => Math.min(idx, cases.length - 1);\n\n  let caseIdx = 0;\n  while (caseIdx < cases.length) {\n    // Construct the vectorized inputs from the scalar cases\n    const packedInputs = new Array<Vector>(parameterTypes.length);\n    for (let paramIdx = 0; paramIdx < parameterTypes.length; paramIdx++) {\n      const inputElements = new Array<Scalar>(vectorWidth);\n      for (let i = 0; i < vectorWidth; i++) {\n        const input = cases[clampCaseIdx(caseIdx + i)].input;\n        inputElements[i] = (input instanceof Array ? input[paramIdx] : input) as Scalar;\n      }\n      packedInputs[paramIdx] = new Vector(inputElements);\n    }\n\n    // Gather the comparators for the packed cases\n    const comparators = new Array<Comparator>(vectorWidth);\n    for (let i = 0; i < vectorWidth; i++) {\n      comparators[i] = toComparator(cases[clampCaseIdx(caseIdx + i)].expected);\n    }\n    const packedComparator = (got: Value, cmpFloats: FloatMatch) => {\n      let matched = true;\n      const gElements = new Array<string>(vectorWidth);\n      const eElements = new Array<string>(vectorWidth);\n      for (let i = 0; i < vectorWidth; i++) {\n        const d = comparators[i]((got as Vector).elements[i], cmpFloats);\n        matched = matched && d.matched;\n        gElements[i] = d.got;\n        eElements[i] = d.expected;\n      }\n      return {\n        matched,\n        got: `${packedReturnType}(${gElements.join(', ')})`,\n        expected: `${packedReturnType}(${eElements.join(', ')})`,\n      };\n    };\n\n    // Append the new packed case\n    packedCases.push({ input: packedInputs, expected: packedComparator });\n    caseIdx += vectorWidth;\n  }\n\n  return {\n    cases: packedCases,\n    parameterTypes: packedParameterTypes,\n    returnType: packedReturnType,\n  };\n}\n\n// MAINTENANCE_TODO(sarahM0): Perhaps instead of kBit and kValue tables we could have one table\n// where every value is a Scalar instead of either bits or value?\n// Then tests wouldn't need most of the Scalar.fromX calls,\n// and you would probably need fewer table entries in total\n// (since each Scalar has both bits and value).\nexport const kBit = {\n  // Limits of int32\n  i32: {\n    positive: {\n      min: 0x0000_0000, // 0\n      max: 0x7fff_ffff, // 2147483647\n    },\n    negative: {\n      min: 0x8000_0000, // -2147483648\n      max: 0x0000_0000, // 0\n    },\n  },\n\n  // Limits of uint32\n  u32: {\n    min: 0x0000_0000,\n    max: 0xffff_ffff,\n  },\n\n  // Limits of f32\n  f32: {\n    positive: {\n      min: 0x0080_0000,\n      max: 0x7f7f_ffff,\n      zero: 0x0000_0000,\n    },\n    negative: {\n      max: 0x8080_0000,\n      min: 0xff7f_ffff,\n      zero: 0x8000_0000,\n    },\n    subnormal: {\n      positive: {\n        min: 0x0000_0001,\n        max: 0x007f_ffff,\n      },\n      negative: {\n        max: 0x8000_0001,\n        min: 0x807f_ffff,\n      },\n    },\n    nan: {\n      negative: {\n        s: 0xff80_0001,\n        q: 0xffc0_0001,\n      },\n      positive: {\n        s: 0x7f80_0001,\n        q: 0x7fc0_0001,\n      },\n    },\n    infinity: {\n      positive: 0x7f80_0000,\n      negative: 0xff80_0000,\n    },\n  },\n\n  // 32-bit representation of power(2, n) n = {-31, ..., 31}\n  // A uint32 representation as a JS `number`\n  // {toMinus31, ..., to31} ie. {-31, ..., 31}\n  powTwo: {\n    toMinus1: 0x3f00_0000,\n    toMinus2: 0x3e80_0000,\n    toMinus3: 0x3e00_0000,\n    toMinus4: 0x3d80_0000,\n    toMinus5: 0x3d00_0000,\n    toMinus6: 0x3c80_0000,\n    toMinus7: 0x3c00_0000,\n    toMinus8: 0x3b80_0000,\n    toMinus9: 0x3b00_0000,\n    toMinus10: 0x3a80_0000,\n    toMinus11: 0x3a00_0000,\n    toMinus12: 0x3980_0000,\n    toMinus13: 0x3900_0000,\n    toMinus14: 0x3880_0000,\n    toMinus15: 0x3800_0000,\n    toMinus16: 0x3780_0000,\n    toMinus17: 0x3700_0000,\n    toMinus18: 0x3680_0000,\n    toMinus19: 0x3600_0000,\n    toMinus20: 0x3580_0000,\n    toMinus21: 0x3500_0000,\n    toMinus22: 0x3480_0000,\n    toMinus23: 0x3400_0000,\n    toMinus24: 0x3380_0000,\n    toMinus25: 0x3300_0000,\n    toMinus26: 0x3280_0000,\n    toMinus27: 0x3200_0000,\n    toMinus28: 0x3180_0000,\n    toMinus29: 0x3100_0000,\n    toMinus30: 0x3080_0000,\n    toMinus31: 0x3000_0000,\n\n    to0: 0x0000_0001,\n    to1: 0x0000_0002,\n    to2: 0x0000_0004,\n    to3: 0x0000_0008,\n    to4: 0x0000_0010,\n    to5: 0x0000_0020,\n    to6: 0x0000_0040,\n    to7: 0x0000_0080,\n    to8: 0x0000_0100,\n    to9: 0x0000_0200,\n    to10: 0x0000_0400,\n    to11: 0x0000_0800,\n    to12: 0x0000_1000,\n    to13: 0x0000_2000,\n    to14: 0x0000_4000,\n    to15: 0x0000_8000,\n    to16: 0x0001_0000,\n    to17: 0x0002_0000,\n    to18: 0x0004_0000,\n    to19: 0x0008_0000,\n    to20: 0x0010_0000,\n    to21: 0x0020_0000,\n    to22: 0x0040_0000,\n    to23: 0x0080_0000,\n    to24: 0x0100_0000,\n    to25: 0x0200_0000,\n    to26: 0x0400_0000,\n    to27: 0x0800_0000,\n    to28: 0x1000_0000,\n    to29: 0x2000_0000,\n    to30: 0x4000_0000,\n    to31: 0x8000_0000,\n  },\n\n  // 32-bit representation of  of -1 * power(2, n) n = {-31, ..., 31}\n  // An int32 represented as a JS `number`\n  // {toMinus31, ..., to31} ie. {-31, ..., 31}\n  negPowTwo: {\n    toMinus1: 0xbf00_0000,\n    toMinus2: 0xbe80_0000,\n    toMinus3: 0xbe00_0000,\n    toMinus4: 0xbd80_0000,\n    toMinus5: 0xbd00_0000,\n    toMinus6: 0xbc80_0000,\n    toMinus7: 0xbc00_0000,\n    toMinus8: 0xbb80_0000,\n    toMinus9: 0xbb00_0000,\n    toMinus10: 0xba80_0000,\n    toMinus11: 0xba00_0000,\n    toMinus12: 0xb980_0000,\n    toMinus13: 0xb900_0000,\n    toMinus14: 0xb880_0000,\n    toMinus15: 0xb800_0000,\n    toMinus16: 0xb780_0000,\n    toMinus17: 0xb700_0000,\n    toMinus18: 0xb680_0000,\n    toMinus19: 0xb600_0000,\n    toMinus20: 0xb580_0000,\n    toMinus21: 0xb500_0000,\n    toMinus22: 0xb480_0000,\n    toMinus23: 0xb400_0000,\n    toMinus24: 0xb380_0000,\n    toMinus25: 0xb300_0000,\n    toMinus26: 0xb280_0000,\n    toMinus27: 0xb200_0000,\n    toMinus28: 0xb180_0000,\n    toMinus29: 0xb100_0000,\n    toMinus30: 0xb080_0000,\n    toMinus31: 0xb000_0000,\n\n    to0: 0xffff_ffff,\n    to1: 0xffff_fffe,\n    to2: 0xffff_fffc,\n    to3: 0xffff_fff8,\n    to4: 0xffff_fff0,\n    to5: 0xffff_ffe0,\n    to6: 0xffff_ffc0,\n    to7: 0xffff_ff80,\n    to8: 0xffff_ff00,\n    to9: 0xffff_fe00,\n    to10: 0xffff_fc00,\n    to11: 0xffff_f800,\n    to12: 0xffff_f000,\n    to13: 0xffff_e000,\n    to14: 0xffff_c000,\n    to15: 0xffff_8000,\n    to16: 0xffff_0000,\n    to17: 0xfffe_0000,\n    to18: 0xfffc_0000,\n    to19: 0xfff8_0000,\n    to20: 0xfff0_0000,\n    to21: 0xffe0_0000,\n    to22: 0xffc0_0000,\n    to23: 0xff80_0000,\n    to24: 0xff00_0000,\n    to25: 0xfe00_0000,\n    to26: 0xfc00_0000,\n    to27: 0xf800_0000,\n    to28: 0xf000_0000,\n    to29: 0xe000_0000,\n    to30: 0xc000_0000,\n    to31: 0x8000_0000,\n  },\n} as const;\n\nexport const kValue = {\n  powTwo: {\n    to0: Math.pow(2, 0),\n    to1: Math.pow(2, 1),\n    to2: Math.pow(2, 2),\n    to3: Math.pow(2, 3),\n    to4: Math.pow(2, 4),\n    to5: Math.pow(2, 5),\n    to6: Math.pow(2, 6),\n    to7: Math.pow(2, 7),\n    to8: Math.pow(2, 8),\n    to9: Math.pow(2, 9),\n    to10: Math.pow(2, 10),\n    to11: Math.pow(2, 11),\n    to12: Math.pow(2, 12),\n    to13: Math.pow(2, 13),\n    to14: Math.pow(2, 14),\n    to15: Math.pow(2, 15),\n    to16: Math.pow(2, 16),\n    to17: Math.pow(2, 17),\n    to18: Math.pow(2, 18),\n    to19: Math.pow(2, 19),\n    to20: Math.pow(2, 20),\n    to21: Math.pow(2, 21),\n    to22: Math.pow(2, 22),\n    to23: Math.pow(2, 23),\n    to24: Math.pow(2, 24),\n    to25: Math.pow(2, 25),\n    to26: Math.pow(2, 26),\n    to27: Math.pow(2, 27),\n    to28: Math.pow(2, 28),\n    to29: Math.pow(2, 29),\n    to30: Math.pow(2, 30),\n    to31: Math.pow(2, 31),\n    to32: Math.pow(2, 32),\n\n    toMinus1: Math.pow(2, -1),\n    toMinus2: Math.pow(2, -2),\n    toMinus3: Math.pow(2, -3),\n    toMinus4: Math.pow(2, -4),\n    toMinus5: Math.pow(2, -5),\n    toMinus6: Math.pow(2, -6),\n    toMinus7: Math.pow(2, -7),\n    toMinus8: Math.pow(2, -8),\n    toMinus9: Math.pow(2, -9),\n    toMinus10: Math.pow(2, -10),\n    toMinus11: Math.pow(2, -11),\n    toMinus12: Math.pow(2, -12),\n    toMinus13: Math.pow(2, -13),\n    toMinus14: Math.pow(2, -14),\n    toMinus15: Math.pow(2, -15),\n    toMinus16: Math.pow(2, -16),\n    toMinus17: Math.pow(2, -17),\n    toMinus18: Math.pow(2, -18),\n    toMinus19: Math.pow(2, -19),\n    toMinus20: Math.pow(2, -20),\n    toMinus21: Math.pow(2, -21),\n    toMinus22: Math.pow(2, -22),\n    toMinus23: Math.pow(2, -23),\n    toMinus24: Math.pow(2, -24),\n    toMinus25: Math.pow(2, -25),\n    toMinus26: Math.pow(2, -26),\n    toMinus27: Math.pow(2, -27),\n    toMinus28: Math.pow(2, -28),\n    toMinus29: Math.pow(2, -29),\n    toMinus30: Math.pow(2, -30),\n    toMinus31: Math.pow(2, -31),\n    toMinus32: Math.pow(2, -32),\n  },\n  negPowTwo: {\n    to0: -Math.pow(2, 0),\n    to1: -Math.pow(2, 1),\n    to2: -Math.pow(2, 2),\n    to3: -Math.pow(2, 3),\n    to4: -Math.pow(2, 4),\n    to5: -Math.pow(2, 5),\n    to6: -Math.pow(2, 6),\n    to7: -Math.pow(2, 7),\n    to8: -Math.pow(2, 8),\n    to9: -Math.pow(2, 9),\n    to10: -Math.pow(2, 10),\n    to11: -Math.pow(2, 11),\n    to12: -Math.pow(2, 12),\n    to13: -Math.pow(2, 13),\n    to14: -Math.pow(2, 14),\n    to15: -Math.pow(2, 15),\n    to16: -Math.pow(2, 16),\n    to17: -Math.pow(2, 17),\n    to18: -Math.pow(2, 18),\n    to19: -Math.pow(2, 19),\n    to20: -Math.pow(2, 20),\n    to21: -Math.pow(2, 21),\n    to22: -Math.pow(2, 22),\n    to23: -Math.pow(2, 23),\n    to24: -Math.pow(2, 24),\n    to25: -Math.pow(2, 25),\n    to26: -Math.pow(2, 26),\n    to27: -Math.pow(2, 27),\n    to28: -Math.pow(2, 28),\n    to29: -Math.pow(2, 29),\n    to30: -Math.pow(2, 30),\n    to31: -Math.pow(2, 31),\n    to32: -Math.pow(2, 32),\n\n    toMinus1: -Math.pow(2, -1),\n    toMinus2: -Math.pow(2, -2),\n    toMinus3: -Math.pow(2, -3),\n    toMinus4: -Math.pow(2, -4),\n    toMinus5: -Math.pow(2, -5),\n    toMinus6: -Math.pow(2, -6),\n    toMinus7: -Math.pow(2, -7),\n    toMinus8: -Math.pow(2, -8),\n    toMinus9: -Math.pow(2, -9),\n    toMinus10: -Math.pow(2, -10),\n    toMinus11: -Math.pow(2, -11),\n    toMinus12: -Math.pow(2, -12),\n    toMinus13: -Math.pow(2, -13),\n    toMinus14: -Math.pow(2, -14),\n    toMinus15: -Math.pow(2, -15),\n    toMinus16: -Math.pow(2, -16),\n    toMinus17: -Math.pow(2, -17),\n    toMinus18: -Math.pow(2, -18),\n    toMinus19: -Math.pow(2, -19),\n    toMinus20: -Math.pow(2, -20),\n    toMinus21: -Math.pow(2, -21),\n    toMinus22: -Math.pow(2, -22),\n    toMinus23: -Math.pow(2, -23),\n    toMinus24: -Math.pow(2, -24),\n    toMinus25: -Math.pow(2, -25),\n    toMinus26: -Math.pow(2, -26),\n    toMinus27: -Math.pow(2, -27),\n    toMinus28: -Math.pow(2, -28),\n    toMinus29: -Math.pow(2, -29),\n    toMinus30: -Math.pow(2, -30),\n    toMinus31: -Math.pow(2, -31),\n    toMinus32: -Math.pow(2, -32),\n  },\n} as const;\n"],"file":"builtin.js"}