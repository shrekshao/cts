{"version":3,"sources":["../../../../../src/webgpu/shader/execution/builtin/fract.spec.ts"],"names":["description","makeTestGroup","GPUTest","f32","f32Bits","TypeF32","anyOf","correctlyRoundedThreshold","kBit","run","g","test","uniqueId","specURL","desc","params","u","combine","undefined","fn","t","cfg","cmpFloats","input","positive","zero","expected","negative","min","max","subnormal"],"mappings":"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","sourcesContent":["export const description = `\nExecution Tests for the 'fract' builtin function\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { f32, f32Bits, TypeF32 } from '../../../util/conversion.js';\n\nimport { anyOf, Config, correctlyRoundedThreshold, kBit, run } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('float_builtin_functions,fract')\n  .uniqueId('58222ecf6f963798')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\nfract:\nT is f32 or vecN<f32> fract(e: T ) -> T Returns the fractional bits of e (e.g. e - floor(e)). Component-wise when T is a vector. (GLSLstd450Fract)\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    cfg.cmpFloats = correctlyRoundedThreshold();\n    run(t, 'fract', [TypeF32], TypeF32, cfg, [\n      // Zeroes\n      { input: f32Bits(kBit.f32.positive.zero), expected: f32(0) },\n      { input: f32Bits(kBit.f32.negative.zero), expected: f32(0) },\n\n      // Positive numbers\n      { input: f32Bits(0x3dcccccd), expected: f32Bits(0x3dcccccd) }, // ~0.1 -> ~0.1\n      { input: f32(0.5), expected: f32(0.5) }, // 0.5 -> 0.5\n      { input: f32Bits(0x3f666666), expected: f32Bits(0x3f666666) }, // ~0.9 -> ~0.9\n      { input: f32Bits(0x3f800000), expected: f32(0) }, // 1 -> 0\n      { input: f32Bits(0x40000000), expected: f32(0) }, // 2 -> 0\n      { input: f32Bits(0x3f8e147b), expected: f32Bits(0x3de147b0) }, // ~1.11 -> ~0.11\n      { input: f32Bits(0x41200069), expected: f32Bits(0x38d20000) }, // ~10.0001 -> ~0.0001\n\n      // Negative numbers\n      { input: f32Bits(0xbdcccccd), expected: f32Bits(0x3f666666) }, // ~-0.1 -> ~0.9\n      { input: f32(-0.5), expected: f32(0.5) }, // -0.5 -> 0.5\n      { input: f32Bits(0xbf666666), expected: f32Bits(0x3dccccd0) }, // ~-0.9 -> ~0.1\n      { input: f32Bits(0xbf800000), expected: f32(0) }, // -1 -> 0\n      { input: f32Bits(0xc0000000), expected: f32(0) }, // -2 -> 0\n      { input: f32Bits(0xbf8e147b), expected: f32Bits(0x3f63d70a) }, // ~-1.11 -> ~0.89\n      { input: f32Bits(0xc1200419), expected: f32Bits(0x3f7fbe70) }, // ~-10.0001 -> ~0.999\n\n      // Min and Max f32\n      { input: f32Bits(kBit.f32.positive.min), expected: f32Bits(kBit.f32.positive.min) },\n      { input: f32Bits(kBit.f32.positive.max), expected: f32(0) },\n      // For negative numbers on the extremes, here and below, different backends disagree on if this should be 1\n      // exactly vs very close to 1. I think what is occurring is that if the calculation is internally done in f32,\n      // i.e. rounding/flushing each step, you end up with one value, but if all of the math is done in a higher\n      // precision, and then converted at the end, you end up with a different value.\n      { input: f32Bits(kBit.f32.negative.max), expected: anyOf(f32Bits(0x3f7fffff), f32(1)) },\n      { input: f32Bits(kBit.f32.negative.min), expected: f32(0) },\n\n      // Subnormal f32\n      // prettier-ignore\n      { input: f32Bits(kBit.f32.subnormal.positive.max), expected: anyOf(f32(0), f32Bits(kBit.f32.subnormal.positive.max)) },\n      // prettier-ignore\n      { input: f32Bits(kBit.f32.subnormal.positive.min), expected: anyOf(f32(0), f32Bits(kBit.f32.subnormal.positive.min)) },\n      // Similar to above when these values are not immediately flushed to zero, how the back end internally calculates\n      // the value will dictate if the end value is 1 or very close to 1.\n      // prettier-ignore\n      { input: f32Bits(kBit.f32.subnormal.negative.max), expected: anyOf(f32(0), f32Bits(0x3f7fffff), f32(1)) },\n      // prettier-ignore\n      { input: f32Bits(kBit.f32.subnormal.negative.min), expected: anyOf(f32(0), f32Bits(0x3f7fffff), f32(1)) },\n    ]);\n  });\n"],"file":"fract.spec.js"}