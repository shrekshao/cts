{"version":3,"sources":["../../../../../src/webgpu/shader/execution/builtin/clamp.spec.ts"],"names":["description","makeTestGroup","GPUTest","f32","f32Bits","i32","i32Bits","TypeF32","TypeI32","TypeU32","u32","u32Bits","isSubnormalScalar","anyOf","correctlyRoundedThreshold","kBit","run","g","generateTestCases","test_values","cases","Array","forEach","e","ei","f","fi","gi","precise_expected","expected","push","input","test","uniqueId","specURL","desc","params","u","combine","undefined","fn","t","cfg","cmpFloats","min","max","negative","positive","infinity","subnormal"],"mappings":"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","sourcesContent":["export const description = `\nExecution Tests for the 'clamp' builtin function\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport {\n  f32,\n  f32Bits,\n  i32,\n  i32Bits,\n  Scalar,\n  TypeF32,\n  TypeI32,\n  TypeU32,\n  u32,\n  u32Bits,\n} from '../../../util/conversion.js';\nimport { isSubnormalScalar } from '../../../util/math.js';\n\nimport { anyOf, Case, Config, correctlyRoundedThreshold, kBit, run } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n/** Generate set of clamp test cases from an ascending list of values */\nfunction generateTestCases(test_values: Array<Scalar>): Array<Case> {\n  const cases = new Array<Case>();\n  test_values.forEach((e, ei) => {\n    test_values.forEach((f, fi) => {\n      test_values.forEach((g, gi) => {\n        // This is enforcing that low <= high, since most backends languages\n        // have undefined behaviour for high < low, so implementations would\n        // need to polyfill, and it is unclear if this was intended.\n        //\n        // https://github.com/gpuweb/gpuweb/issues/2557 discusses changing the\n        // spec to explicitly require low <= high.\n        if (fi <= gi) {\n          // Intentionally not using clamp from math.ts or other TypeScript\n          // defined clamp to avoid rounding issues from going in/out of\n          // `number` type.\n          const precise_expected = ei <= fi ? f : ei <= gi ? e : g;\n          const expected = isSubnormalScalar(precise_expected)\n            ? anyOf(precise_expected, f32(0.0))\n            : precise_expected;\n          cases.push({ input: [e, f, g], expected });\n        }\n      });\n    });\n  });\n  return cases;\n}\n\ng.test('integer_builtin_functions,unsigned_clamp')\n  .uniqueId('386458e12e52645b')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#integer-builtin-functions')\n  .desc(\n    `\nunsigned clamp:\nT is u32 or vecN<u32> clamp(e: T , low: T, high: T) -> T Returns min(max(e, low), high). Component-wise when T is a vector. (GLSLstd450UClamp)\n\nPlease read the following guidelines before contributing:\nhttps://github.com/gpuweb/cts/blob/main/docs/plan_autogen.md\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    cfg.cmpFloats = correctlyRoundedThreshold();\n\n    // This array must be strictly increasing, since that ordering determines\n    // the expected values.\n    const test_values: Array<Scalar> = [\n      u32Bits(kBit.u32.min),\n      u32(1),\n      u32(2),\n      u32(0x70000000),\n      u32(0x80000000),\n      u32Bits(kBit.u32.max),\n    ];\n\n    run(t, 'clamp', [TypeU32, TypeU32, TypeU32], TypeU32, cfg, generateTestCases(test_values));\n  });\n\ng.test('integer_builtin_functions,signed_clamp')\n  .uniqueId('da51d3c8cc902ab2')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#integer-builtin-functions')\n  .desc(\n    `\nsigned clamp:\nT is i32 or vecN<i32> clamp(e: T , low: T, high: T) -> T Returns min(max(e, low), high). Component-wise when T is a vector. (GLSLstd450SClamp)\n\nPlease read the following guidelines before contributing:\nhttps://github.com/gpuweb/cts/blob/main/docs/plan_autogen.md\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    cfg.cmpFloats = correctlyRoundedThreshold();\n\n    // This array must be strictly increasing, since that ordering determines\n    // the expected values.\n    const test_values: Array<Scalar> = [\n      i32Bits(kBit.i32.negative.min),\n      i32(-2),\n      i32(-1),\n      i32(0),\n      i32(1),\n      i32(2),\n      i32Bits(0x70000000),\n      i32Bits(kBit.i32.positive.max),\n    ];\n\n    run(t, 'clamp', [TypeI32, TypeI32, TypeI32], TypeI32, cfg, generateTestCases(test_values));\n  });\n\ng.test('float_builtin_functions,clamp')\n  .uniqueId('88e39c61e6dbd26f')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\nclamp:\nT is f32 or vecN<f32> clamp(e: T , low: T, high: T) -> T Returns min(max(e, low), high). Component-wise when T is a vector. (GLSLstd450NClamp)\n\nPlease read the following guidelines before contributing:\nhttps://github.com/gpuweb/cts/blob/main/docs/plan_autogen.md\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    cfg.cmpFloats = correctlyRoundedThreshold();\n\n    // This array must be strictly increasing, since that ordering determines\n    // the expected values.\n    const test_values: Array<Scalar> = [\n      f32Bits(kBit.f32.infinity.negative),\n      f32Bits(kBit.f32.negative.min),\n      f32(-10.0),\n      f32(-1.0),\n      f32Bits(kBit.f32.negative.max),\n      f32Bits(kBit.f32.subnormal.negative.min),\n      f32Bits(kBit.f32.subnormal.negative.max),\n      f32(0.0),\n      f32Bits(kBit.f32.subnormal.positive.min),\n      f32Bits(kBit.f32.subnormal.positive.max),\n      f32Bits(kBit.f32.positive.min),\n      f32(1.0),\n      f32(10.0),\n      f32Bits(kBit.f32.positive.max),\n      f32Bits(kBit.f32.infinity.positive),\n    ];\n\n    run(t, 'clamp', [TypeF32, TypeF32, TypeF32], TypeF32, cfg, generateTestCases(test_values));\n  });\n"],"file":"clamp.spec.js"}