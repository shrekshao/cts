{"version":3,"sources":["../../../../../src/webgpu/shader/execution/builtin/log.spec.ts"],"names":["description","makeTestGroup","GPUTest","f32","f32Bits","TypeF32","biasedRange","linearRange","absThreshold","kBit","kValue","run","ulpThreshold","g","test","uniqueId","specURL","desc","params","u","combine","undefined","fn","t","truthFunc","x","f32_x","input","expected","Math","log","value","cases","concat","infinity","negative","positive","min","map","cfg","cmpFloats","got"],"mappings":"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","sourcesContent":["export const description = `\nExecution Tests for the 'log' builtin function\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { f32, f32Bits, TypeF32 } from '../../../util/conversion.js';\nimport { biasedRange, linearRange } from '../../../util/math.js';\n\nimport { absThreshold, Case, Config, kBit, kValue, run, ulpThreshold } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('float_builtin_functions,log')\n  .uniqueId('7cd6780116b47d00')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\nlog:\nT is f32 or vecN<f32> log(e: T ) -> T Returns the natural logarithm of e. Component-wise when T is a vector. (GLSLstd450Log)\n\nTODO(#792): Decide what the ground-truth is for these tests. [1]\n`\n  )\n  .params(u =>\n    // u\n    //   .combine('storageClass', ['uniform'] as const)\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    // [1]: Need to decide what the ground-truth is.\n    const truthFunc = (x: number): Case => {\n      const f32_x = f32(x);\n      return { input: f32_x, expected: f32(Math.log(f32_x.value as number)) };\n    };\n\n    // log's accuracy is defined in three regions { [0, 0.5), [0.5, 2.0], (2.0, +âˆž] }\n    let cases: Array<Case> = [];\n    cases = cases.concat({ input: f32(0), expected: f32Bits(kBit.f32.infinity.negative) });\n    cases = cases.concat(linearRange(kValue.f32.positive.min, 0.5, 20).map(x => truthFunc(x)));\n    cases = cases.concat(linearRange(0.5, 2.0, 20).map(x => truthFunc(x)));\n    cases = cases.concat(biasedRange(2.0, 2 ** 32, 1000).map(x => truthFunc(x)));\n\n    const cfg: Config = t.params;\n    cfg.cmpFloats = (got: number, expected: number): boolean => {\n      if (expected >= 0.5 && expected <= 2.0) {\n        return absThreshold(2 ** -21)(got, expected);\n      }\n      return ulpThreshold(3)(got, expected);\n    };\n    run(t, 'log', [TypeF32], TypeF32, cfg, cases);\n  });\n"],"file":"log.spec.js"}