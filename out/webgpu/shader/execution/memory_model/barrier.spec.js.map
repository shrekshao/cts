{"version":3,"sources":["../../../../../src/webgpu/shader/execution/memory_model/barrier.spec.ts"],"names":["description","makeTestGroup","GPUTest","MemoryModelTester","buildTestShader","MemoryType","TestType","buildResultShader","ResultType","g","memoryModelTestParams","workgroupSize","testingWorkgroups","maxWorkgroups","shufflePct","barrierPct","memStressPct","memStressIterations","memStressStoreFirstPct","memStressStoreSecondPct","preStressPct","preStressIterations","preStressStoreFirstPct","preStressStoreSecondPct","scratchMemorySize","stressLineSize","stressTargetLines","stressStrategyBalancePct","permuteFirst","permuteSecond","memStride","aliasedMemory","numMemLocations","numReadOutputs","numBehaviors","storageMemoryBarrierStoreLoadTestCode","workgroupMemoryBarrierStoreLoadTestCode","test","desc","paramsSimple","memType","NonAtomicStorageClass","_testCode","NonAtomicWorkgroupClass","fn","t","resultCode","testShader","params","IntraWorkgroup","resultShader","TwoBehavior","memModelTester","run"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B,mGADO,CAGP,SAASC,aAAT,QAA8B,4CAA9B;AACA,SAASC,OAAT,QAAwB,sBAAxB;;AAEA;;AAEEC,iBAFF;AAGEC,eAHF;AAIEC,UAJF;AAKEC,QALF;AAMEC,iBANF;AAOEC,UAPF;AAQO,yBARP;;AAUA,OAAO,MAAMC,CAAC,GAAGR,aAAa,CAACC,OAAD,CAAvB;;AAEP;AACA,MAAMQ,qBAA4C,GAAG;AACnDC,EAAAA,aAAa,EAAE,GADoC;AAEnDC,EAAAA,iBAAiB,EAAE,GAFgC;AAGnDC,EAAAA,aAAa,EAAE,IAHoC;AAInDC,EAAAA,UAAU,EAAE,GAJuC;AAKnDC,EAAAA,UAAU,EAAE,GALuC;AAMnDC,EAAAA,YAAY,EAAE,GANqC;AAOnDC,EAAAA,mBAAmB,EAAE,IAP8B;AAQnDC,EAAAA,sBAAsB,EAAE,EAR2B;AASnDC,EAAAA,uBAAuB,EAAE,EAT0B;AAUnDC,EAAAA,YAAY,EAAE,GAVqC;AAWnDC,EAAAA,mBAAmB,EAAE,IAX8B;AAYnDC,EAAAA,sBAAsB,EAAE,EAZ2B;AAanDC,EAAAA,uBAAuB,EAAE,EAb0B;AAcnDC,EAAAA,iBAAiB,EAAE,IAdgC;AAenDC,EAAAA,cAAc,EAAE,EAfmC;AAgBnDC,EAAAA,iBAAiB,EAAE,CAhBgC;AAiBnDC,EAAAA,wBAAwB,EAAE,EAjByB;AAkBnDC,EAAAA,YAAY,EAAE,GAlBqC;AAmBnDC,EAAAA,aAAa,EAAE,GAnBoC;AAoBnDC,EAAAA,SAAS,EAAE,CApBwC;AAqBnDC,EAAAA,aAAa,EAAE,KArBoC;AAsBnDC,EAAAA,eAAe,EAAE,CAtBkC;AAuBnDC,EAAAA,cAAc,EAAE,CAvBmC;AAwBnDC,EAAAA,YAAY,EAAE,CAxBqC,EAArD;;;AA2BA,MAAMC,qCAAqC,GAAI;AAC/C;AACA;AACA;AACA;AACA,CALA;;AAOA,MAAMC,uCAAuC,GAAI;AACjD;AACA;AACA;AACA;AACA,CALA;;AAOA3B,CAAC,CAAC4B,IAAF,CAAO,8BAAP;AACGC,IADH;AAEK;AACL;AACA;AACA,KALA;;AAOGC,YAPH,CAOgB;AACZ,EAAEC,OAAO,EAAEnC,UAAU,CAACoC,qBAAtB,EAA6CC,SAAS,EAAEP,qCAAxD,EADY;AAEZ;AACEK,EAAAA,OAAO,EAAEnC,UAAU,CAACsC,uBADtB;AAEED,EAAAA,SAAS,EAAEN,uCAFb,EAFY,CAPhB;;;AAcGQ,EAdH,CAcM,OAAMC,CAAN,KAAW;AACb,QAAMC,UAAU,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA,KANI;AAOA,QAAMC,UAAU,GAAG3C,eAAe;AAChCyC,EAAAA,CAAC,CAACG,MAAF,CAASN,SADuB;AAEhCG,EAAAA,CAAC,CAACG,MAAF,CAASR,OAFuB;AAGhClC,EAAAA,QAAQ,CAAC2C,cAHuB,CAAlC;;AAKA,QAAMC,YAAY,GAAG3C,iBAAiB;AACpCuC,EAAAA,UADoC;AAEpCxC,EAAAA,QAAQ,CAAC2C,cAF2B;AAGpCzC,EAAAA,UAAU,CAAC2C,WAHyB,CAAtC;;AAKA,QAAMC,cAAc,GAAG,IAAIjD,iBAAJ;AACrB0C,EAAAA,CADqB;AAErBnC,EAAAA,qBAFqB;AAGrBqC,EAAAA,UAHqB;AAIrBG,EAAAA,YAJqB,CAAvB;;AAMA,QAAME,cAAc,CAACC,GAAf,CAAmB,EAAnB,EAAuB,CAAvB,CAAN;AACD,CAvCH","sourcesContent":["export const description = `\nTests for non-atomic memory synchronization within a workgroup in the presence of a WebGPU barrier`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\nimport {\n  MemoryModelTestParams,\n  MemoryModelTester,\n  buildTestShader,\n  MemoryType,\n  TestType,\n  buildResultShader,\n  ResultType,\n} from './memory_model_setup.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n// A reasonable parameter set, determined heuristically.\nconst memoryModelTestParams: MemoryModelTestParams = {\n  workgroupSize: 256,\n  testingWorkgroups: 512,\n  maxWorkgroups: 1024,\n  shufflePct: 100,\n  barrierPct: 100,\n  memStressPct: 100,\n  memStressIterations: 1024,\n  memStressStoreFirstPct: 50,\n  memStressStoreSecondPct: 50,\n  preStressPct: 100,\n  preStressIterations: 1024,\n  preStressStoreFirstPct: 50,\n  preStressStoreSecondPct: 50,\n  scratchMemorySize: 2048,\n  stressLineSize: 64,\n  stressTargetLines: 2,\n  stressStrategyBalancePct: 50,\n  permuteFirst: 109,\n  permuteSecond: 419,\n  memStride: 4,\n  aliasedMemory: false,\n  numMemLocations: 1,\n  numReadOutputs: 1,\n  numBehaviors: 2,\n};\n\nconst storageMemoryBarrierStoreLoadTestCode = `\n  test_locations.value[x_0] = 1u;\n  workgroupBarrier();\n  let r0 = test_locations.value[x_1];\n  atomicStore(&results.value[shuffled_workgroup * workgroupXSize + id_1].r0, r0);\n`;\n\nconst workgroupMemoryBarrierStoreLoadTestCode = `\n  wg_test_locations[x_0] = 1u;\n  workgroupBarrier();\n  let r0 = wg_test_locations[x_1];\n  atomicStore(&results.value[shuffled_workgroup * workgroupXSize + id_1].r0, r0);\n`;\n\ng.test('workgroup_barrier_store_load')\n  .desc(\n    `Checks whether the workgroup barrier properly synchronizes a non-atomic write and read on\n    separate threads in the same workgroup. Within a workgroup, the barrier should force an invocation\n    after the barrier to read a write from an invocation before the barrier.\n    `\n  )\n  .paramsSimple([\n    { memType: MemoryType.NonAtomicStorageClass, _testCode: storageMemoryBarrierStoreLoadTestCode },\n    {\n      memType: MemoryType.NonAtomicWorkgroupClass,\n      _testCode: workgroupMemoryBarrierStoreLoadTestCode,\n    },\n  ])\n  .fn(async t => {\n    const resultCode = `\n      if (r0 == 1u) {\n        atomicAdd(&test_results.seq, 1u);\n      } else if (r0 == 0u) {\n        atomicAdd(&test_results.weak, 1u);\n      }\n    `;\n    const testShader = buildTestShader(\n      t.params._testCode,\n      t.params.memType,\n      TestType.IntraWorkgroup\n    );\n    const resultShader = buildResultShader(\n      resultCode,\n      TestType.IntraWorkgroup,\n      ResultType.TwoBehavior\n    );\n    const memModelTester = new MemoryModelTester(\n      t,\n      memoryModelTestParams,\n      testShader,\n      resultShader\n    );\n    await memModelTester.run(20, 1);\n  });\n"],"file":"barrier.spec.js"}