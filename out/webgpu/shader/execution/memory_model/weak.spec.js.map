{"version":3,"sources":["../../../../../src/webgpu/shader/execution/memory_model/weak.spec.ts"],"names":["description","makeTestGroup","GPUTest","MemoryModelTester","buildTestShader","MemoryType","TestType","buildResultShader","ResultType","g","memoryModelTestParams","workgroupSize","testingWorkgroups","maxWorkgroups","shufflePct","barrierPct","memStressPct","memStressIterations","memStressStoreFirstPct","memStressStoreSecondPct","preStressPct","preStressIterations","preStressStoreFirstPct","preStressStoreSecondPct","scratchMemorySize","stressLineSize","stressTargetLines","stressStrategyBalancePct","permuteFirst","permuteSecond","memStride","aliasedMemory","numBehaviors","workgroupMemoryMessagePassingTestCode","storageMemoryMessagePassingTestCode","test","desc","paramsSimple","memType","AtomicWorkgroupClass","_testCode","AtomicStorageClass","fn","t","testShader","params","IntraWorkgroup","messagePassingResultShader","FourBehavior","memModelTester","run","workgroupMemoryStoreTestCode","storageMemoryStoreTestCode","workgroupMemoryLoadBufferTestCode","storageMemoryLoadBufferTestCode","workgroupMemoryReadTestCode","storageMemoryReadTestCode","workgroupMemoryStoreBufferTestCode","storageMemoryStoreBufferTestCode","workgroupMemory2P2WTestCode","storageMemory2P2WTestCode"],"mappings":"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","sourcesContent":["export const description = `\nTests for properties of the WebGPU memory model involving two memory locations.\nSpecifically, the acquire/release ordering provided by WebGPU's barriers can be used to disallow\nweak behaviors in several classic memory model litmus tests.`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\nimport {\n  MemoryModelTestParams,\n  MemoryModelTester,\n  buildTestShader,\n  MemoryType,\n  TestType,\n  buildResultShader,\n  ResultType,\n} from './memory_model_setup.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n// A reasonable parameter set, determined heuristically.\nconst memoryModelTestParams: MemoryModelTestParams = {\n  workgroupSize: 256,\n  testingWorkgroups: 739,\n  maxWorkgroups: 885,\n  shufflePct: 0,\n  barrierPct: 0,\n  memStressPct: 0,\n  memStressIterations: 1024,\n  memStressStoreFirstPct: 50,\n  memStressStoreSecondPct: 50,\n  preStressPct: 100,\n  preStressIterations: 33,\n  preStressStoreFirstPct: 0,\n  preStressStoreSecondPct: 100,\n  scratchMemorySize: 1408,\n  stressLineSize: 4,\n  stressTargetLines: 11,\n  stressStrategyBalancePct: 0,\n  permuteFirst: 109,\n  permuteSecond: 419,\n  memStride: 2,\n  aliasedMemory: false,\n  numBehaviors: 4,\n};\n\nconst workgroupMemoryMessagePassingTestCode = `\n  atomicStore(&wg_test_locations[x_0], 1u);\n  workgroupBarrier();\n  atomicStore(&wg_test_locations[y_0], 1u);\n  let r0 = atomicLoad(&wg_test_locations[y_1]);\n  workgroupBarrier();\n  let r1 = atomicLoad(&wg_test_locations[x_1]);\n  atomicStore(&results.value[shuffled_workgroup * workgroupXSize + id_1].r0, r0);\n  atomicStore(&results.value[shuffled_workgroup * workgroupXSize + id_1].r1, r1);\n`;\n\nconst storageMemoryMessagePassingTestCode = `\n  atomicStore(&test_locations.value[x_0], 1u);\n  storageBarrier();\n  atomicStore(&test_locations.value[y_0], 1u);\n  let r0 = atomicLoad(&test_locations.value[y_1]);\n  storageBarrier();\n  let r1 = atomicLoad(&test_locations.value[x_1]);\n  atomicStore(&results.value[shuffled_workgroup * u32(workgroupXSize) + id_1].r0, r0);\n  atomicStore(&results.value[shuffled_workgroup * u32(workgroupXSize) + id_1].r1, r1);\n`;\n\ng.test('message_passing')\n  .desc(\n    `Checks whether two reads on one thread can observe two writes in another thread in a way\n    that is inconsistent with sequential consistency. In the message passing litmus test, one\n    thread writes the value 1 to some location x and then 1 to some location y. The second thread\n    reads y and then x. If the second thread reads y == 1 and x == 0, then sequential consistency\n    has not been respected. The acquire/release semantics of WebGPU's barrier functions should disallow\n    this behavior within a workgroup.\n    `\n  )\n  .paramsSimple([\n    { memType: MemoryType.AtomicWorkgroupClass, _testCode: workgroupMemoryMessagePassingTestCode },\n    { memType: MemoryType.AtomicStorageClass, _testCode: storageMemoryMessagePassingTestCode },\n  ])\n  .fn(async t => {\n    const testShader = buildTestShader(\n      t.params._testCode,\n      t.params.memType,\n      TestType.IntraWorkgroup\n    );\n    const messagePassingResultShader = buildResultShader(\n      `\n      if ((r0 == 0u && r1 == 0u)) {\n        atomicAdd(&test_results.seq0, 1u);\n      } else if ((r0 == 1u && r1 == 1u)) {\n        atomicAdd(&test_results.seq1, 1u);\n      } else if ((r0 == 0u && r1 == 1u)) {\n        atomicAdd(&test_results.interleaved, 1u);\n      } else if ((r0 == 1u && r1 == 0u)) {\n        atomicAdd(&test_results.weak, 1u);\n      }\n      `,\n      TestType.IntraWorkgroup,\n      ResultType.FourBehavior\n    );\n    const memModelTester = new MemoryModelTester(\n      t,\n      memoryModelTestParams,\n      testShader,\n      messagePassingResultShader\n    );\n    await memModelTester.run(40, 3);\n  });\n\nconst workgroupMemoryStoreTestCode = `\n  atomicStore(&wg_test_locations[x_0], 2u);\n  workgroupBarrier();\n  atomicStore(&wg_test_locations[y_0], 1u);\n  let r0 = atomicLoad(&wg_test_locations[y_1]);\n  workgroupBarrier();\n  atomicStore(&wg_test_locations[x_1], 1u);\n  workgroupBarrier();\n  atomicStore(&results.value[shuffled_workgroup * workgroupXSize + id_1].r0, r0);\n  atomicStore(&test_locations.value[shuffled_workgroup * workgroupXSize * stress_params.mem_stride * 2u + x_1], atomicLoad(&wg_test_locations[x_1]));\n`;\n\nconst storageMemoryStoreTestCode = `\n  atomicStore(&test_locations.value[x_0], 2u);\n  storageBarrier();\n  atomicStore(&test_locations.value[y_0], 1u);\n  let r0 = atomicLoad(&test_locations.value[y_1]);\n  storageBarrier();\n  atomicStore(&test_locations.value[x_1], 1u);\n  atomicStore(&results.value[shuffled_workgroup * workgroupXSize + id_1].r0, r0);\n`;\n\ng.test('store')\n  .desc(\n    `In the store litmus test, one thread writes 2 to some memory location x and then 1 to some memory location\n     y. A second thread reads the value of y and then writes 1 to x. If the read on the second thread returns 1,\n     but the value of x in memory after the test ends is 2, then there has been a re-ordering which is not allowed\n     when using WebGPU's barriers.\n    `\n  )\n  .paramsSimple([\n    { memType: MemoryType.AtomicWorkgroupClass, _testCode: workgroupMemoryStoreTestCode },\n    { memType: MemoryType.AtomicStorageClass, _testCode: storageMemoryStoreTestCode },\n  ])\n  .fn(async t => {\n    const testShader = buildTestShader(\n      t.params._testCode,\n      t.params.memType,\n      TestType.IntraWorkgroup\n    );\n    const messagePassingResultShader = buildResultShader(\n      `\n      if ((r0 == 1u && mem_x_0 == 1u)) {\n        atomicAdd(&test_results.seq0, 1u);\n      } else if ((r0 == 0u && mem_x_0 == 2u)) {\n        atomicAdd(&test_results.seq1, 1u);\n      } else if ((r0 == 0u && mem_x_0 == 1u)) {\n        atomicAdd(&test_results.interleaved, 1u);\n      } else if ((r0 == 1u && mem_x_0 == 2u)) {\n        atomicAdd(&test_results.weak, 1u);\n      }\n      `,\n      TestType.IntraWorkgroup,\n      ResultType.FourBehavior\n    );\n    const memModelTester = new MemoryModelTester(\n      t,\n      memoryModelTestParams,\n      testShader,\n      messagePassingResultShader\n    );\n    await memModelTester.run(40, 3);\n  });\n\nconst workgroupMemoryLoadBufferTestCode = `\n  let r0 = atomicLoad(&wg_test_locations[y_0]);\n  workgroupBarrier();\n  atomicStore(&wg_test_locations[x_0], 1u);\n  let r1 = atomicLoad(&wg_test_locations[x_1]);\n  workgroupBarrier();\n  atomicStore(&wg_test_locations[y_1], 1u);\n  atomicStore(&results.value[shuffled_workgroup * workgroupXSize + id_0].r0, r0);\n  atomicStore(&results.value[shuffled_workgroup * workgroupXSize + id_1].r1, r1);\n`;\n\nconst storageMemoryLoadBufferTestCode = `\n  let r0 = atomicLoad(&test_locations.value[y_0]);\n  storageBarrier();\n  atomicStore(&test_locations.value[x_0], 1u);\n  let r1 = atomicLoad(&test_locations.value[x_1]);\n  storageBarrier();\n  atomicStore(&test_locations.value[y_1], 1u);\n  atomicStore(&results.value[shuffled_workgroup * workgroupXSize + id_0].r0, r0);\n  atomicStore(&results.value[shuffled_workgroup * workgroupXSize + id_1].r1, r1);\n`;\n\ng.test('load_buffer')\n  .desc(\n    `In the load buffer litmus test, one thread reads from memory location y and then writes 1 to memory location x.\n     A second thread reads from x and then writes 1 to y. If both threads read the value 0, then the loads have been\n     buffered or re-ordered, which is not allowed when used in conjunction with WebGPU's barriers.\n    `\n  )\n  .paramsSimple([\n    { memType: MemoryType.AtomicWorkgroupClass, _testCode: workgroupMemoryLoadBufferTestCode },\n    { memType: MemoryType.AtomicStorageClass, _testCode: storageMemoryLoadBufferTestCode },\n  ])\n  .fn(async t => {\n    const testShader = buildTestShader(\n      t.params._testCode,\n      t.params.memType,\n      TestType.IntraWorkgroup\n    );\n    const messagePassingResultShader = buildResultShader(\n      `\n      if ((r0 == 1u && r1 == 0u)) {\n        atomicAdd(&test_results.seq0, 1u);\n      } else if ((r0 == 0u && r1 == 1u)) {\n        atomicAdd(&test_results.seq1, 1u);\n      } else if ((r0 == 0u && r1 == 0u)) {\n        atomicAdd(&test_results.interleaved, 1u);\n      } else if ((r0 == 1u && r1 == 1u)) {\n        atomicAdd(&test_results.weak, 1u);\n      }\n      `,\n      TestType.IntraWorkgroup,\n      ResultType.FourBehavior\n    );\n    const memModelTester = new MemoryModelTester(\n      t,\n      memoryModelTestParams,\n      testShader,\n      messagePassingResultShader\n    );\n    await memModelTester.run(40, 3);\n  });\n\nconst workgroupMemoryReadTestCode = `\n  atomicStore(&wg_test_locations[x_0], 1u);\n  workgroupBarrier();\n  atomicExchange(&wg_test_locations[y_0], 1u);\n  atomicExchange(&wg_test_locations[y_1], 2u);\n  workgroupBarrier();\n  let r0 = atomicLoad(&wg_test_locations[x_1]);\n  workgroupBarrier();\n  atomicStore(&results.value[shuffled_workgroup * workgroupXSize + id_1].r0, r0);\n  atomicStore(&test_locations.value[shuffled_workgroup * workgroupXSize * stress_params.mem_stride * 2u + y_1], atomicLoad(&wg_test_locations[y_1]));\n`;\n\nconst storageMemoryReadTestCode = `\n  atomicStore(&test_locations.value[x_0], 1u);\n  storageBarrier();\n  atomicExchange(&test_locations.value[y_0], 1u);\n  atomicExchange(&test_locations.value[y_1], 2u);\n  storageBarrier();\n  let r0 = atomicLoad(&test_locations.value[x_1]);\n  atomicStore(&results.value[shuffled_workgroup * workgroupXSize + id_1].r0, r0);\n`;\n\ng.test('read')\n  .desc(\n    `In the read litmus test, one thread writes 1 to memory location x and then 1 to memory location y. A second thread\n     first writes 2 to y and then reads from x. If the value read by the second thread is 0 but the value in memory of y\n     after the test completes is 2, then there has been some re-ordering of instructions disallowed when using WebGPU's\n     barrier. Additionally, both writes to y are RMWs, so that the barrier forces the correct acquire/release memory ordering\n     synchronization.\n    `\n  )\n  .paramsSimple([\n    { memType: MemoryType.AtomicWorkgroupClass, _testCode: workgroupMemoryReadTestCode },\n    { memType: MemoryType.AtomicStorageClass, _testCode: storageMemoryReadTestCode },\n  ])\n  .fn(async t => {\n    const testShader = buildTestShader(\n      t.params._testCode,\n      t.params.memType,\n      TestType.IntraWorkgroup\n    );\n    const messagePassingResultShader = buildResultShader(\n      `\n      if ((r0 == 1u && mem_y_0 == 2u)) {\n        atomicAdd(&test_results.seq0, 1u);\n      } else if ((r0 == 0u && mem_y_0 == 1u)) {\n        atomicAdd(&test_results.seq1, 1u);\n      } else if ((r0 == 1u && mem_y_0 == 1u)) {\n        atomicAdd(&test_results.interleaved, 1u);\n      } else if ((r0 == 0u && mem_y_0 == 2u)) {\n        atomicAdd(&test_results.weak, 1u);\n      }\n      `,\n      TestType.IntraWorkgroup,\n      ResultType.FourBehavior\n    );\n    const memModelTester = new MemoryModelTester(\n      t,\n      memoryModelTestParams,\n      testShader,\n      messagePassingResultShader\n    );\n    await memModelTester.run(40, 3);\n  });\n\nconst workgroupMemoryStoreBufferTestCode = `\n  atomicStore(&wg_test_locations[x_0], 1u);\n  workgroupBarrier();\n  let r0 = atomicAdd(&wg_test_locations[y_0], 0u);\n  atomicExchange(&wg_test_locations[y_1], 1u);\n  workgroupBarrier();\n  let r1 = atomicLoad(&wg_test_locations[x_1]);\n  atomicStore(&results.value[shuffled_workgroup * workgroupXSize + id_0].r0, r0);\n  atomicStore(&results.value[shuffled_workgroup * workgroupXSize + id_1].r1, r1);\n`;\n\nconst storageMemoryStoreBufferTestCode = `\n  atomicStore(&test_locations.value[x_0], 1u);\n  storageBarrier();\n  let r0 = atomicAdd(&test_locations.value[y_0], 0u);\n  atomicExchange(&test_locations.value[y_1], 1u);\n  storageBarrier();\n  let r1 = atomicLoad(&test_locations.value[x_1]);\n  atomicStore(&results.value[shuffled_workgroup * workgroupXSize + id_0].r0, r0);\n  atomicStore(&results.value[shuffled_workgroup * workgroupXSize + id_1].r1, r1);\n`;\n\ng.test('store_buffer')\n  .desc(\n    `In the store buffer litmus test, one thread writes 1 to memory location x and then reads from memory location\n     y. A second thread writes 1 to y and then reads from x. If both reads return 0, then stores have been buffered\n     or some other re-ordering has occurred that is disallowed by WebGPU's barriers. Additionally, both the read\n     and store to y are RMWs to achieve the necessary synchronization across threads.\n    `\n  )\n  .paramsSimple([\n    { memType: MemoryType.AtomicWorkgroupClass, _testCode: workgroupMemoryStoreBufferTestCode },\n    { memType: MemoryType.AtomicStorageClass, _testCode: storageMemoryStoreBufferTestCode },\n  ])\n  .fn(async t => {\n    const testShader = buildTestShader(\n      t.params._testCode,\n      t.params.memType,\n      TestType.IntraWorkgroup\n    );\n    const messagePassingResultShader = buildResultShader(\n      `\n      if ((r0 == 1u && r1 == 0u)) {\n        atomicAdd(&test_results.seq0, 1u);\n      } else if ((r0 == 0u && r1 == 1u)) {\n        atomicAdd(&test_results.seq1, 1u);\n      } else if ((r0 == 1u && r1 == 1u)) {\n        atomicAdd(&test_results.interleaved, 1u);\n      } else if ((r0 == 0u && r1 == 0u)) {\n        atomicAdd(&test_results.weak, 1u);\n      }\n      `,\n      TestType.IntraWorkgroup,\n      ResultType.FourBehavior\n    );\n    const memModelTester = new MemoryModelTester(\n      t,\n      memoryModelTestParams,\n      testShader,\n      messagePassingResultShader\n    );\n    await memModelTester.run(40, 3);\n  });\n\nconst workgroupMemory2P2WTestCode = `\n  atomicStore(&wg_test_locations[x_0], 2u);\n  workgroupBarrier();\n  atomicExchange(&wg_test_locations[y_0], 1u);\n  atomicExchange(&wg_test_locations[y_1], 2u);\n  workgroupBarrier();\n  atomicStore(&wg_test_locations[x_1], 1u);\n  workgroupBarrier();\n  atomicStore(&test_locations.value[shuffled_workgroup * workgroupXSize * stress_params.mem_stride * 2u + x_1], atomicLoad(&wg_test_locations[x_1]));\n  atomicStore(&test_locations.value[shuffled_workgroup * workgroupXSize * stress_params.mem_stride * 2u + y_1], atomicLoad(&wg_test_locations[y_1]));\n`;\n\nconst storageMemory2P2WTestCode = `\n  atomicStore(&test_locations.value[x_0], 2u);\n  storageBarrier();\n  atomicExchange(&test_locations.value[y_0], 1u);\n  atomicExchange(&test_locations.value[y_1], 2u);\n  storageBarrier();\n  atomicStore(&test_locations.value[x_1], 1u);\n`;\n\ng.test('2_plus_2_write')\n  .desc(\n    `In the 2+2 write litmus test, one thread stores 2 to memory location x and then 1 to memory location y.\n     A second thread stores 2 to y and then 1 to x. If at the end of the test both memory locations are set to 2,\n     then some disallowed re-ordering has occurred. Both writes to y are RMWs to achieve the required synchronization.\n    `\n  )\n  .paramsSimple([\n    { memType: MemoryType.AtomicWorkgroupClass, _testCode: workgroupMemory2P2WTestCode },\n    { memType: MemoryType.AtomicStorageClass, _testCode: storageMemory2P2WTestCode },\n  ])\n  .fn(async t => {\n    const testShader = buildTestShader(\n      t.params._testCode,\n      t.params.memType,\n      TestType.IntraWorkgroup\n    );\n    const messagePassingResultShader = buildResultShader(\n      `\n      if ((mem_x_0 == 1u && mem_y_0 == 2u)) {\n        atomicAdd(&test_results.seq0, 1u);\n      } else if ((mem_x_0 == 2u && mem_y_0 == 1u)) {\n        atomicAdd(&test_results.seq1, 1u);\n      } else if ((mem_x_0 == 1u && mem_y_0 == 1u)) {\n        atomicAdd(&test_results.interleaved, 1u);\n      } else if ((mem_x_0 == 2u && mem_y_0 == 2u)) {\n        atomicAdd(&test_results.weak, 1u);\n      }\n      `,\n      TestType.IntraWorkgroup,\n      ResultType.FourBehavior\n    );\n    const memModelTester = new MemoryModelTester(\n      t,\n      memoryModelTestParams,\n      testShader,\n      messagePassingResultShader\n    );\n    await memModelTester.run(40, 3);\n  });\n"],"file":"weak.spec.js"}