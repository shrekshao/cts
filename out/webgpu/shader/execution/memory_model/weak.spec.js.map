{"version":3,"sources":["../../../../../src/webgpu/shader/execution/memory_model/weak.spec.ts"],"names":["description","makeTestGroup","GPUTest","MemoryModelTester","buildTestShader","MemoryType","TestType","buildResultShader","ResultType","g","memoryModelTestParams","workgroupSize","testingWorkgroups","maxWorkgroups","shufflePct","barrierPct","memStressPct","memStressIterations","memStressStoreFirstPct","memStressStoreSecondPct","preStressPct","preStressIterations","preStressStoreFirstPct","preStressStoreSecondPct","scratchMemorySize","stressLineSize","stressTargetLines","stressStrategyBalancePct","permuteFirst","permuteSecond","memStride","aliasedMemory","numMemLocations","numReadOutputs","numBehaviors","workgroupMemoryMessagePassingTestCode","storageMemoryMessagePassingTestCode","test","desc","paramsSimple","memType","AtomicWorkgroupClass","_testCode","AtomicStorageClass","fn","t","testShader","params","IntraWorkgroup","messagePassingResultShader","FourBehavior","memModelTester","run"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA,6DAHO,CAKP,SAASC,aAAT,QAA8B,4CAA9B;AACA,SAASC,OAAT,QAAwB,sBAAxB;;AAEA;;AAEEC,iBAFF;AAGEC,eAHF;AAIEC,UAJF;AAKEC,QALF;AAMEC,iBANF;AAOEC,UAPF;AAQO,yBARP;;AAUA,OAAO,MAAMC,CAAC,GAAGR,aAAa,CAACC,OAAD,CAAvB;;AAEP;AACA,MAAMQ,qBAA4C,GAAG;AACnDC,EAAAA,aAAa,EAAE,GADoC;AAEnDC,EAAAA,iBAAiB,EAAE,GAFgC;AAGnDC,EAAAA,aAAa,EAAE,IAHoC;AAInDC,EAAAA,UAAU,EAAE,GAJuC;AAKnDC,EAAAA,UAAU,EAAE,GALuC;AAMnDC,EAAAA,YAAY,EAAE,GANqC;AAOnDC,EAAAA,mBAAmB,EAAE,IAP8B;AAQnDC,EAAAA,sBAAsB,EAAE,EAR2B;AASnDC,EAAAA,uBAAuB,EAAE,EAT0B;AAUnDC,EAAAA,YAAY,EAAE,GAVqC;AAWnDC,EAAAA,mBAAmB,EAAE,IAX8B;AAYnDC,EAAAA,sBAAsB,EAAE,EAZ2B;AAanDC,EAAAA,uBAAuB,EAAE,EAb0B;AAcnDC,EAAAA,iBAAiB,EAAE,IAdgC;AAenDC,EAAAA,cAAc,EAAE,EAfmC;AAgBnDC,EAAAA,iBAAiB,EAAE,CAhBgC;AAiBnDC,EAAAA,wBAAwB,EAAE,EAjByB;AAkBnDC,EAAAA,YAAY,EAAE,GAlBqC;AAmBnDC,EAAAA,aAAa,EAAE,GAnBoC;AAoBnDC,EAAAA,SAAS,EAAE,CApBwC;AAqBnDC,EAAAA,aAAa,EAAE,KArBoC;AAsBnDC,EAAAA,eAAe,EAAE,CAtBkC;AAuBnDC,EAAAA,cAAc,EAAE,CAvBmC;AAwBnDC,EAAAA,YAAY,EAAE,CAxBqC,EAArD;;;AA2BA,MAAMC,qCAAqC,GAAI;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;;AAWA,MAAMC,mCAAmC,GAAI;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;;AAWA3B,CAAC,CAAC4B,IAAF,CAAO,kCAAP;AACGC,IADH;AAEK;AACL;AACA;AACA;AACA;AACA;AACA,KARA;;AAUGC,YAVH,CAUgB;AACZ,EAAEC,OAAO,EAAEnC,UAAU,CAACoC,oBAAtB,EAA4CC,SAAS,EAAEP,qCAAvD,EADY;AAEZ,EAAEK,OAAO,EAAEnC,UAAU,CAACsC,kBAAtB,EAA0CD,SAAS,EAAEN,mCAArD,EAFY,CAVhB;;AAcGQ,EAdH,CAcM,OAAMC,CAAN,KAAW;AACb,QAAMC,UAAU,GAAG1C,eAAe;AAChCyC,EAAAA,CAAC,CAACE,MAAF,CAASL,SADuB;AAEhCG,EAAAA,CAAC,CAACE,MAAF,CAASP,OAFuB;AAGhClC,EAAAA,QAAQ,CAAC0C,cAHuB,CAAlC;;AAKA,QAAMC,0BAA0B,GAAG1C,iBAAiB;AACjD;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAXwD;AAYlDD,EAAAA,QAAQ,CAAC0C,cAZyC;AAalDxC,EAAAA,UAAU,CAAC0C,YAbuC,CAApD;;AAeA,QAAMC,cAAc,GAAG,IAAIhD,iBAAJ;AACrB0C,EAAAA,CADqB;AAErBnC,EAAAA,qBAFqB;AAGrBoC,EAAAA,UAHqB;AAIrBG,EAAAA,0BAJqB,CAAvB;;AAMA,QAAME,cAAc,CAACC,GAAf,CAAmB,EAAnB,EAAuB,CAAvB,CAAN;AACD,CA1CH","sourcesContent":["export const description = `\nTests for properties of the WebGPU memory model involving two memory locations.\nSpecifically, the acquire/release ordering provided by WebGPU's barriers can be used to disallow\nweak behaviors in several classic memory model litmus tests.`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\nimport {\n  MemoryModelTestParams,\n  MemoryModelTester,\n  buildTestShader,\n  MemoryType,\n  TestType,\n  buildResultShader,\n  ResultType,\n} from './memory_model_setup.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n// A reasonable parameter set, determined heuristically.\nconst memoryModelTestParams: MemoryModelTestParams = {\n  workgroupSize: 256,\n  testingWorkgroups: 512,\n  maxWorkgroups: 1024,\n  shufflePct: 100,\n  barrierPct: 100,\n  memStressPct: 100,\n  memStressIterations: 1024,\n  memStressStoreFirstPct: 50,\n  memStressStoreSecondPct: 50,\n  preStressPct: 100,\n  preStressIterations: 1024,\n  preStressStoreFirstPct: 50,\n  preStressStoreSecondPct: 50,\n  scratchMemorySize: 2048,\n  stressLineSize: 64,\n  stressTargetLines: 2,\n  stressStrategyBalancePct: 50,\n  permuteFirst: 109,\n  permuteSecond: 419,\n  memStride: 4,\n  aliasedMemory: false,\n  numMemLocations: 2,\n  numReadOutputs: 2,\n  numBehaviors: 4,\n};\n\nconst workgroupMemoryMessagePassingTestCode = `\n  atomicStore(&wg_test_locations[x_0], 1u);\n  workgroupBarrier();\n  atomicStore(&wg_test_locations[y_0], 1u);\n  let r0 = atomicLoad(&wg_test_locations[y_1]);\n  workgroupBarrier();\n  let r1 = atomicLoad(&wg_test_locations[x_1]);\n  atomicStore(&results.value[shuffled_workgroup * workgroupXSize + id_1].r0, r0);\n  atomicStore(&results.value[shuffled_workgroup * workgroupXSize + id_1].r1, r1);\n`;\n\nconst storageMemoryMessagePassingTestCode = `\n  atomicStore(&test_locations.value[x_0], 1u);\n  storageBarrier();\n  atomicStore(&test_locations.value[y_0], 1u);\n  let r0 = atomicLoad(&test_locations.value[y_1]);\n  storageBarrier();\n  let r1 = atomicLoad(&test_locations.value[x_1]);\n  atomicStore(&results.value[shuffled_workgroup * u32(workgroupXSize) + id_1].r0, r0);\n  atomicStore(&results.value[shuffled_workgroup * u32(workgroupXSize) + id_1].r1, r1);\n`;\n\ng.test('message_passing_workgroup_memory')\n  .desc(\n    `Checks whether two reads on one thread can observe two writes in another thread in a way\n    that is inconsistent with sequential consistency. In the message passing litmus test, one\n    thread writes the value 1 to some location x and then 1 to some location y. The second thread\n    reads y and then x. If the second thread reads y == 1 and x == 0, then sequential consistency\n    has not been respected. The acquire/release semantics of WebGPU's barrier functions should disallow\n    this behavior within a workgroup.\n    `\n  )\n  .paramsSimple([\n    { memType: MemoryType.AtomicWorkgroupClass, _testCode: workgroupMemoryMessagePassingTestCode },\n    { memType: MemoryType.AtomicStorageClass, _testCode: storageMemoryMessagePassingTestCode },\n  ])\n  .fn(async t => {\n    const testShader = buildTestShader(\n      t.params._testCode,\n      t.params.memType,\n      TestType.IntraWorkgroup\n    );\n    const messagePassingResultShader = buildResultShader(\n      `\n      if ((r0 == 0u && r1 == 0u)) {\n        atomicAdd(&test_results.seq0, 1u);\n      } else if ((r0 == 1u && r1 == 1u)) {\n        atomicAdd(&test_results.seq1, 1u);\n      } else if ((r0 == 0u && r1 == 1u)) {\n        atomicAdd(&test_results.interleaved, 1u);\n      } else if ((r0 == 1u && r1 == 0u)) {\n        atomicAdd(&test_results.weak, 1u);\n      }\n      `,\n      TestType.IntraWorkgroup,\n      ResultType.FourBehavior\n    );\n    const memModelTester = new MemoryModelTester(\n      t,\n      memoryModelTestParams,\n      testShader,\n      messagePassingResultShader\n    );\n    await memModelTester.run(20, 3);\n  });\n"],"file":"weak.spec.js"}