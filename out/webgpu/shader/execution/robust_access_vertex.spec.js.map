{"version":3,"sources":["../../../../src/webgpu/shader/execution/robust_access_vertex.spec.ts"],"names":["description","makeTestGroup","assert","GPUTest","DrawCall","constructor","test","vertexArrays","vertexCount","partialLastNumber","offsetVertexBuffer","keepInstanceStepModeBufferInRange","firstVertex","vertexCountInIndexBuffer","indexCount","firstIndex","baseVertex","instanceCount","firstInstance","vertexBuffers","map","v","i","generateVertexBuffer","insertInto","pass","indexed","indirect","drawIndexedIndirect","drawIndexed","drawIndirect","draw","bindVertexBuffers","indexArray","Uint32Array","_","indexBuffer","makeBufferWithContents","GPUBufferUsage","INDEX","setIndexBuffer","generateIndirectBuffer","generateIndexedIndirectBuffer","currSlot","length","setVertexBuffer","vertexArray","size","byteLength","buffer","device","createBuffer","usage","VERTEX","COPY_DST","queue","writeBuffer","slice","indirectArray","Int32Array","INDIRECT","typeInfoMap","float32","wgslType","sizeInBytes","validationFunc","float32x2","float32x3","float32x4","F","generateBufferContents","numVertices","attributesPerBuffer","typeInfo","arbitraryValues","bufferCount","Float32Array","bufferContents","push","generateVertexBufferDescriptors","type","buffers","currAttribute","arrayStride","stepMode","attributes","Array","fill","shaderLocation","offset","format","generateVertexShaderCode","validValues","vertexIndexOffset","isIndexed","layoutStr","attributeNames","j","vertexShaderCode","join","a","createRenderPipeline","pipeline","vertex","module","createShaderModule","code","entryPoint","fragment","targets","primitive","topology","doTest","dataType","isIndirect","drawCall","colorAttachment","createTexture","width","height","depthOrArrayLayers","GPUTextureUsage","COPY_SRC","RENDER_ATTACHMENT","colorAttachmentView","createView","encoder","createCommandEncoder","beginRenderPass","colorAttachments","view","storeOp","loadValue","r","g","b","setPipeline","endPass","submit","finish","expectSinglePixelIn2DTexture","x","y","exp","Uint8Array","layout","mipLevel","params","u","combineWithParams","expand","p","combine","Object","keys","unless","drawCallTestParameter","errorScale","fn","t","additionalBuffers"],"mappings":"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","sourcesContent":["export const description = `\nTest vertex attributes behave correctly (no crash / data leak) when accessed out of bounds\n\nTest coverage:\n\nThe following is parameterized (all combinations tested):\n\n1) Draw call type? (drawIndexed, drawIndirect, drawIndexedIndirect)\n  - Run the draw call using an index buffer and/or an indirect buffer.\n  - Doesn't test direct draw, as vertex buffer OOB are CPU validated and treated as validation errors.\n  - Also the instance step mode vertex buffer OOB are CPU validated for drawIndexed, so we only test\n    robustness access for vertex step mode vertex buffers.\n\n2) Draw call parameter (vertexCount, firstVertex, indexCount, firstIndex, baseVertex, instanceCount,\n   vertexCountInIndexBuffer)\n  - The parameter which goes out of bounds. Filtered depending on the draw call type.\n  - vertexCount, firstVertex: used for drawIndirect only, test for vertex step mode buffer OOB\n  - instanceCount: used for both drawIndirect and drawIndexedIndirect, test for instance step mode buffer OOB\n  - baseVertex, vertexCountInIndexBuffer: used for both drawIndexed and drawIndexedIndirect, test\n    for vertex step mode buffer OOB. vertexCountInIndexBuffer indicates how many vertices are used\n    within the index buffer, i.e. [0, 1, ..., vertexCountInIndexBuffer-1].\n  - indexCount, firstIndex: used for drawIndexedIndirect only, validate the vertex buffer access\n    when the vertex itself is OOB in index buffer. This never happens in drawIndexed as we have index\n    buffer OOB CPU validation for it.\n\n3) Attribute type (float32, float32x2, float32x3, float32x4)\n  - The input attribute type in the vertex shader\n\n4) Error scale (0, 1, 4, 10^2, 10^4, 10^6)\n  - Offset to add to the correct draw call parameter\n  - 0 For control case\n\n5) Additional vertex buffers (0, +4)\n  - Tests that no OOB occurs if more vertex buffers are used\n\n6) Partial last number and offset vertex buffer (false, true)\n  - Tricky cases that make vertex buffer OOB.\n  - With partial last number enabled, vertex buffer size will be 1 byte less than enough, making the\n    last vertex OOB with 1 byte.\n  - Offset vertex buffer will bind the vertex buffer to render pass with 4 bytes offset, causing OOB\n  - For drawIndexed, these two flags are suppressed for instance step mode vertex buffer to make sure\n    it pass the CPU validation.\n\nThe tests have one instance step mode vertex buffer bound for instanced attributes, to make sure\ninstanceCount / firstInstance are tested.\n\nThe tests include multiple attributes per vertex buffer.\n\nThe vertex buffers are filled by repeating a few values randomly chosen for each test until the\nend of the buffer.\n\nThe tests run a render pipeline which verifies the following:\n1) All vertex attribute values occur in the buffer or are 0 (for control case it can't be 0)\n2) All gl_VertexIndex values are within the index buffer or 0\n\nTODO:\nCurrently firstInstance is not tested, as for drawIndexed it is CPU validated, and for drawIndirect\nand drawIndexedIndirect it should always be 0. Once there is an extension to allow making them non-zero,\nit should be added into drawCallTestParameter list.\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { assert } from '../../../common/util/util.js';\nimport { GPUTest } from '../../gpu_test.js';\n\n// Encapsulates a draw call (either indexed or non-indexed)\nclass DrawCall {\n  private test: GPUTest;\n  private vertexBuffers: GPUBuffer[];\n\n  // Add a float offset when binding vertex buffer\n  private offsetVertexBuffer: boolean;\n\n  // Keep instance step mode vertex buffer in range, in order to test vertex step\n  // mode buffer OOB in drawIndexed. Setting true will suppress partialLastNumber\n  // and offsetVertexBuffer for instance step mode vertex buffer.\n  private keepInstanceStepModeBufferInRange: boolean;\n\n  // Draw\n  public vertexCount: number;\n  public firstVertex: number;\n\n  // DrawIndexed\n  public vertexCountInIndexBuffer: number; // For generating index buffer in drawIndexed and drawIndexedIndirect\n  public indexCount: number; // For accessing index buffer in drawIndexed and drawIndexedIndirect\n  public firstIndex: number;\n  public baseVertex: number;\n\n  // Both Draw and DrawIndexed\n  public instanceCount: number;\n  public firstInstance: number;\n\n  constructor({\n    test,\n    vertexArrays,\n    vertexCount,\n    partialLastNumber,\n    offsetVertexBuffer,\n    keepInstanceStepModeBufferInRange,\n  }: {\n    test: GPUTest;\n    vertexArrays: Float32Array[];\n    vertexCount: number;\n    partialLastNumber: boolean;\n    offsetVertexBuffer: boolean;\n    keepInstanceStepModeBufferInRange: boolean;\n  }) {\n    this.test = test;\n\n    // Default arguments (valid call)\n    this.vertexCount = vertexCount;\n    this.firstVertex = 0;\n    this.vertexCountInIndexBuffer = vertexCount;\n    this.indexCount = vertexCount;\n    this.firstIndex = 0;\n    this.baseVertex = 0;\n    this.instanceCount = vertexCount;\n    this.firstInstance = 0;\n\n    this.offsetVertexBuffer = offsetVertexBuffer;\n    this.keepInstanceStepModeBufferInRange = keepInstanceStepModeBufferInRange;\n\n    // Since vertexInIndexBuffer is mutable, generation of the index buffer should be deferred to right before calling draw\n\n    // Generate vertex buffer\n    this.vertexBuffers = vertexArrays.map((v, i) => {\n      if (i === 0 && keepInstanceStepModeBufferInRange) {\n        // Suppress partialLastNumber for the first vertex buffer, aka the instance step mode buffer\n        return this.generateVertexBuffer(v, false);\n      } else {\n        return this.generateVertexBuffer(v, partialLastNumber);\n      }\n    });\n  }\n\n  // Insert a draw call into |pass| with specified type\n  public insertInto(pass: GPURenderPassEncoder, indexed: boolean, indirect: boolean) {\n    if (indexed) {\n      if (indirect) {\n        this.drawIndexedIndirect(pass);\n      } else {\n        this.drawIndexed(pass);\n      }\n    } else {\n      if (indirect) {\n        this.drawIndirect(pass);\n      } else {\n        this.draw(pass);\n      }\n    }\n  }\n\n  // Insert a draw call into |pass|\n  public draw(pass: GPURenderPassEncoder) {\n    this.bindVertexBuffers(pass);\n    pass.draw(this.vertexCount, this.instanceCount, this.firstVertex, this.firstInstance);\n  }\n\n  // Insert an indexed draw call into |pass|\n  public drawIndexed(pass: GPURenderPassEncoder) {\n    // Generate index buffer\n    const indexArray = new Uint32Array(this.vertexCountInIndexBuffer).map((_, i) => i);\n    const indexBuffer = this.test.makeBufferWithContents(indexArray, GPUBufferUsage.INDEX);\n    this.bindVertexBuffers(pass);\n    pass.setIndexBuffer(indexBuffer, 'uint32');\n    pass.drawIndexed(\n      this.indexCount,\n      this.instanceCount,\n      this.firstIndex,\n      this.baseVertex,\n      this.firstInstance\n    );\n  }\n\n  // Insert an indirect draw call into |pass|\n  public drawIndirect(pass: GPURenderPassEncoder) {\n    this.bindVertexBuffers(pass);\n    pass.drawIndirect(this.generateIndirectBuffer(), 0);\n  }\n\n  // Insert an indexed indirect draw call into |pass|\n  public drawIndexedIndirect(pass: GPURenderPassEncoder) {\n    // Generate index buffer\n    const indexArray = new Uint32Array(this.vertexCountInIndexBuffer).map((_, i) => i);\n    const indexBuffer = this.test.makeBufferWithContents(indexArray, GPUBufferUsage.INDEX);\n    this.bindVertexBuffers(pass);\n    pass.setIndexBuffer(indexBuffer, 'uint32');\n    pass.drawIndexedIndirect(this.generateIndexedIndirectBuffer(), 0);\n  }\n\n  // Bind all vertex buffers generated\n  private bindVertexBuffers(pass: GPURenderPassEncoder) {\n    let currSlot = 0;\n    for (let i = 0; i < this.vertexBuffers.length; i++) {\n      if (i === 0 && this.keepInstanceStepModeBufferInRange) {\n        // Keep the instance step mode buffer in range\n        pass.setVertexBuffer(currSlot++, this.vertexBuffers[i], 0);\n      } else {\n        pass.setVertexBuffer(currSlot++, this.vertexBuffers[i], this.offsetVertexBuffer ? 4 : 0);\n      }\n    }\n  }\n\n  // Create a vertex buffer from |vertexArray|\n  // If |partialLastNumber| is true, delete one byte off the end\n  private generateVertexBuffer(vertexArray: Float32Array, partialLastNumber: boolean): GPUBuffer {\n    let size = vertexArray.byteLength;\n    let length = vertexArray.length;\n    if (partialLastNumber) {\n      size -= 1; // Shave off one byte from the buffer size.\n      length -= 1; // And one whole element from the writeBuffer.\n    }\n    const buffer = this.test.device.createBuffer({\n      size,\n      usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST, // Ensure that buffer can be used by writeBuffer\n    });\n    this.test.device.queue.writeBuffer(buffer, 0, vertexArray.slice(0, length));\n    return buffer;\n  }\n\n  // Create an indirect buffer containing draw call values\n  private generateIndirectBuffer(): GPUBuffer {\n    const indirectArray = new Int32Array([\n      this.vertexCount,\n      this.instanceCount,\n      this.firstVertex,\n      this.firstInstance,\n    ]);\n    return this.test.makeBufferWithContents(indirectArray, GPUBufferUsage.INDIRECT);\n  }\n\n  // Create an indirect buffer containing indexed draw call values\n  private generateIndexedIndirectBuffer(): GPUBuffer {\n    const indirectArray = new Int32Array([\n      this.indexCount,\n      this.instanceCount,\n      this.firstIndex,\n      this.baseVertex,\n      this.firstInstance,\n    ]);\n    return this.test.makeBufferWithContents(indirectArray, GPUBufferUsage.INDIRECT);\n  }\n}\n\n// Parameterize different sized types\ninterface VertexInfo {\n  wgslType: string;\n  sizeInBytes: number;\n  validationFunc: string;\n}\n\nconst typeInfoMap: { [k: string]: VertexInfo } = {\n  float32: {\n    wgslType: 'f32',\n    sizeInBytes: 4,\n    validationFunc: 'return valid(v);',\n  },\n  float32x2: {\n    wgslType: 'vec2<f32>',\n    sizeInBytes: 8,\n    validationFunc: 'return valid(v.x) && valid(v.y);',\n  },\n  float32x3: {\n    wgslType: 'vec3<f32>',\n    sizeInBytes: 12,\n    validationFunc: 'return valid(v.x) && valid(v.y) && valid(v.z);',\n  },\n  float32x4: {\n    wgslType: 'vec4<f32>',\n    sizeInBytes: 16,\n    validationFunc: `return valid(v.x) && valid(v.y) && valid(v.z) && valid(v.w) ||\n                            v.x == 0.0 && v.y == 0.0 && v.z == 0.0 && (v.w == 0.0 || v.w == 1.0);`,\n  },\n};\n\nclass F extends GPUTest {\n  generateBufferContents(\n    numVertices: number,\n    attributesPerBuffer: number,\n    typeInfo: VertexInfo,\n    arbitraryValues: number[],\n    bufferCount: number\n  ): Float32Array[] {\n    // Make an array big enough for the vertices, attributes, and size of each element\n    const vertexArray = new Float32Array(\n      numVertices * attributesPerBuffer * (typeInfo.sizeInBytes / 4)\n    );\n\n    for (let i = 0; i < vertexArray.length; ++i) {\n      vertexArray[i] = arbitraryValues[i % arbitraryValues.length];\n    }\n\n    // Only the first buffer is instance step mode, all others are vertex step mode buffer\n    assert(bufferCount >= 2);\n    const bufferContents: Float32Array[] = [];\n    for (let i = 0; i < bufferCount; i++) {\n      bufferContents.push(vertexArray);\n    }\n\n    return bufferContents;\n  }\n\n  generateVertexBufferDescriptors(\n    bufferCount: number,\n    attributesPerBuffer: number,\n    type: GPUVertexFormat\n  ) {\n    const typeInfo = typeInfoMap[type];\n    // Vertex buffer descriptors\n    const buffers: GPUVertexBufferLayout[] = [];\n    {\n      let currAttribute = 0;\n      for (let i = 0; i < bufferCount; i++) {\n        buffers.push({\n          arrayStride: attributesPerBuffer * typeInfo.sizeInBytes,\n          stepMode: i === 0 ? 'instance' : 'vertex',\n          attributes: Array(attributesPerBuffer)\n            .fill(0)\n            .map((_, i) => ({\n              shaderLocation: currAttribute++,\n              offset: i * typeInfo.sizeInBytes,\n              format: type as GPUVertexFormat,\n            })),\n        });\n      }\n    }\n    return buffers;\n  }\n\n  generateVertexShaderCode({\n    bufferCount,\n    attributesPerBuffer,\n    validValues,\n    typeInfo,\n    vertexIndexOffset,\n    numVertices,\n    isIndexed,\n  }: {\n    bufferCount: number;\n    attributesPerBuffer: number;\n    validValues: number[];\n    typeInfo: VertexInfo;\n    vertexIndexOffset: number;\n    numVertices: number;\n    isIndexed: boolean;\n  }): string {\n    // Create layout and attributes listing\n    let layoutStr = 'struct Attributes {';\n    const attributeNames = [];\n    {\n      let currAttribute = 0;\n      for (let i = 0; i < bufferCount; i++) {\n        for (let j = 0; j < attributesPerBuffer; j++) {\n          layoutStr += `@location(${currAttribute}) a_${currAttribute} : ${typeInfo.wgslType};\\n`;\n          attributeNames.push(`a_${currAttribute}`);\n          currAttribute++;\n        }\n      }\n    }\n    layoutStr += '};';\n\n    const vertexShaderCode: string = `\n      ${layoutStr}\n\n      fn valid(f : f32) -> bool {\n        return ${validValues.map(v => `f == ${v}.0`).join(' || ')};\n      }\n\n      fn validationFunc(v : ${typeInfo.wgslType}) -> bool {\n        ${typeInfo.validationFunc}\n      }\n\n      @stage(vertex) fn main(\n        @builtin(vertex_index) VertexIndex : u32,\n        attributes : Attributes\n        ) -> @builtin(position) vec4<f32> {\n        var attributesInBounds = ${attributeNames\n          .map(a => `validationFunc(attributes.${a})`)\n          .join(' && ')};\n\n        var indexInBoundsCountFromBaseVertex =\n            (VertexIndex >= ${vertexIndexOffset}u &&\n            VertexIndex < ${vertexIndexOffset + numVertices}u);\n        var indexInBounds = VertexIndex == 0u || indexInBoundsCountFromBaseVertex;\n\n        var Position : vec4<f32>;\n        if (attributesInBounds && (${!isIndexed} || indexInBounds)) {\n          // Success case, move the vertex to the right of the viewport to show that at least one case succeed\n          Position = vec4<f32>(0.5, 0.0, 0.0, 1.0);\n        } else {\n          // Failure case, move the vertex to the left of the viewport\n          Position = vec4<f32>(-0.5, 0.0, 0.0, 1.0);\n        }\n        return Position;\n      }`;\n    return vertexShaderCode;\n  }\n\n  createRenderPipeline({\n    bufferCount,\n    attributesPerBuffer,\n    validValues,\n    typeInfo,\n    vertexIndexOffset,\n    numVertices,\n    isIndexed,\n    buffers,\n  }: {\n    bufferCount: number;\n    attributesPerBuffer: number;\n    validValues: number[];\n    typeInfo: VertexInfo;\n    vertexIndexOffset: number;\n    numVertices: number;\n    isIndexed: boolean;\n    buffers: GPUVertexBufferLayout[];\n  }): GPURenderPipeline {\n    const pipeline = this.device.createRenderPipeline({\n      vertex: {\n        module: this.device.createShaderModule({\n          code: this.generateVertexShaderCode({\n            bufferCount,\n            attributesPerBuffer,\n            validValues,\n            typeInfo,\n            vertexIndexOffset,\n            numVertices,\n            isIndexed,\n          }),\n        }),\n        entryPoint: 'main',\n        buffers,\n      },\n      fragment: {\n        module: this.device.createShaderModule({\n          code: `\n            @stage(fragment) fn main() -> @location(0) vec4<f32> {\n              return vec4<f32>(1.0, 0.0, 0.0, 1.0);\n            }`,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: 'rgba8unorm' }],\n      },\n      primitive: { topology: 'point-list' },\n    });\n    return pipeline;\n  }\n\n  doTest({\n    bufferCount,\n    attributesPerBuffer,\n    dataType,\n    validValues,\n    vertexIndexOffset,\n    numVertices,\n    isIndexed,\n    isIndirect,\n    drawCall,\n  }: {\n    bufferCount: number;\n    attributesPerBuffer: number;\n    dataType: GPUVertexFormat;\n    validValues: number[];\n    vertexIndexOffset: number;\n    numVertices: number;\n    isIndexed: boolean;\n    isIndirect: boolean;\n    drawCall: DrawCall;\n  }): void {\n    // Vertex buffer descriptors\n    const buffers: GPUVertexBufferLayout[] = this.generateVertexBufferDescriptors(\n      bufferCount,\n      attributesPerBuffer,\n      dataType\n    );\n\n    // Pipeline setup, texture setup\n    const pipeline = this.createRenderPipeline({\n      bufferCount,\n      attributesPerBuffer,\n      validValues,\n      typeInfo: typeInfoMap[dataType],\n      vertexIndexOffset,\n      numVertices,\n      isIndexed,\n      buffers,\n    });\n\n    const colorAttachment = this.device.createTexture({\n      format: 'rgba8unorm',\n      size: { width: 2, height: 1, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n    const colorAttachmentView = colorAttachment.createView();\n\n    const encoder = this.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: colorAttachmentView,\n          storeOp: 'store',\n          loadValue: { r: 0.0, g: 1.0, b: 0.0, a: 1.0 },\n        },\n      ],\n    });\n    pass.setPipeline(pipeline);\n\n    // Run the draw variant\n    drawCall.insertInto(pass, isIndexed, isIndirect);\n\n    pass.endPass();\n    this.device.queue.submit([encoder.finish()]);\n\n    // Validate we see green on the left pixel, showing that no failure case is detected\n    this.expectSinglePixelIn2DTexture(\n      colorAttachment,\n      'rgba8unorm',\n      { x: 0, y: 0 },\n      { exp: new Uint8Array([0x00, 0xff, 0x00, 0xff]), layout: { mipLevel: 0 } }\n    );\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('vertex_buffer_access')\n  .params(\n    u =>\n      u\n        .combineWithParams([\n          { indexed: false, indirect: true },\n          { indexed: true, indirect: false },\n          { indexed: true, indirect: true },\n        ])\n        .expand('drawCallTestParameter', function* (p) {\n          if (p.indexed) {\n            yield* ['baseVertex', 'vertexCountInIndexBuffer'] as const;\n            if (p.indirect) {\n              yield* ['indexCount', 'instanceCount', 'firstIndex'] as const;\n            }\n          } else if (p.indirect) {\n            yield* ['vertexCount', 'instanceCount', 'firstVertex'] as const;\n          }\n        })\n        .combine('type', Object.keys(typeInfoMap) as GPUVertexFormat[])\n        .combine('additionalBuffers', [0, 4])\n        .combine('partialLastNumber', [false, true])\n        .combine('offsetVertexBuffer', [false, true])\n        .combine('errorScale', [0, 1, 4, 10 ** 2, 10 ** 4, 10 ** 6])\n        .unless(p => p.drawCallTestParameter === 'instanceCount' && p.errorScale > 10 ** 4) // To avoid timeout\n  )\n  .fn(async t => {\n    const p = t.params;\n    const typeInfo = typeInfoMap[p.type];\n\n    // Number of vertices to draw\n    const numVertices = 4;\n    // Each buffer is bound to this many attributes (2 would mean 2 attributes per buffer)\n    const attributesPerBuffer = 2;\n    // Some arbitrary values to fill our buffer with to avoid collisions with other tests\n    const arbitraryValues = [990, 685, 446, 175];\n\n    // A valid value is 0 or one in the buffer\n    const validValues =\n      p.errorScale === 0 && !p.offsetVertexBuffer && !p.partialLastNumber\n        ? arbitraryValues // Control case with no OOB access, must read back valid values in buffer\n        : [0, ...arbitraryValues]; // Testing case with OOB access, can be 0 for OOB data\n\n    // Generate vertex buffer contents. Only the first buffer is instance step mode, all others are vertex step mode\n    const bufferCount = p.additionalBuffers + 2; // At least one instance step mode and one vertex step mode buffer\n    const bufferContents = t.generateBufferContents(\n      numVertices,\n      attributesPerBuffer,\n      typeInfo,\n      arbitraryValues,\n      bufferCount\n    );\n\n    // Mutable draw call\n    const draw = new DrawCall({\n      test: t,\n      vertexArrays: bufferContents,\n      vertexCount: numVertices,\n      partialLastNumber: p.partialLastNumber,\n      offsetVertexBuffer: p.offsetVertexBuffer,\n      keepInstanceStepModeBufferInRange: p.indexed && !p.indirect, // keep instance step mode buffer in range for drawIndexed\n    });\n\n    // Offset the draw call parameter we are testing by |errorScale|\n    draw[p.drawCallTestParameter] += p.errorScale;\n    // Offset the range checks for gl_VertexIndex in the shader if we use BaseVertex\n    let vertexIndexOffset = 0;\n    if (p.drawCallTestParameter === 'baseVertex') {\n      vertexIndexOffset += p.errorScale;\n    }\n\n    t.doTest({\n      bufferCount,\n      attributesPerBuffer,\n      dataType: p.type,\n      validValues,\n      vertexIndexOffset,\n      numVertices,\n      isIndexed: p.indexed,\n      isIndirect: p.indirect,\n      drawCall: draw,\n    });\n  });\n"],"file":"robust_access_vertex.spec.js"}