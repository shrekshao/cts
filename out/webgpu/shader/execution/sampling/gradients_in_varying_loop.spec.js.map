{"version":3,"sources":["../../../../../src/webgpu/shader/execution/sampling/gradients_in_varying_loop.spec.ts"],"names":["description","makeTestGroup","assert","GPUTest","kRTSize","kBytesPerRow","kColorAttachmentFormat","kDX","kDY","DerivativesTest","copyRenderTargetToBuffer","rt","byteLength","buffer","device","createBuffer","size","usage","GPUBufferUsage","COPY_SRC","COPY_DST","commandEncoder","createCommandEncoder","copyTextureToBuffer","texture","mipLevel","origin","bytesPerRow","rowsPerImage","width","height","depthOrArrayLayers","queue","submit","finish","init","pipeline","createRenderPipeline","layout","vertex","module","createShaderModule","code","entryPoint","fragment","targets","format","primitive","topology","drawQuad","numIterations","undefined","uniformBufferSize","uniformBuffer","UNIFORM","uniforms","Int32Array","from","writeBuffer","byteOffset","bindGroup","createBindGroup","entries","binding","resource","getBindGroupLayout","colorAttachment","createTexture","GPUTextureUsage","RENDER_ATTACHMENT","colorAttachmentView","createView","encoder","pass","beginRenderPass","colorAttachments","view","storeOp","clearValue","r","g","b","a","loadOp","setPipeline","setBindGroup","draw","end","test","desc","params","u","combine","fn","t","iterations","result","readGPUBufferRangeTyped","type","Float32Array","typedLength","almostEqual","epsilon","Math","abs","expected_x","expected_y","expect","data","cleanup"],"mappings":"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","sourcesContent":["export const description = `\nTests the behavior of gradient operations in a loop with potentially varying execution.\n`;\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert } from '../../../../common/util/util.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\nconst kRTSize = 8; // Render target size (width and height)\nconst kBytesPerRow = 256; // Byte stride\nconst kColorAttachmentFormat = 'rgba32float';\n\nconst kDX = 0.1; // Desired partial derivative in x\nconst kDY = 0.2; // Desired partial derivative in y\n\n// renders a two-triangle quad with uvs mapped a specific way so that dpdx/dpdy return expected values\nclass DerivativesTest extends GPUTest {\n  copyRenderTargetToBuffer(rt: GPUTexture): GPUBuffer {\n    const byteLength = kRTSize * kBytesPerRow;\n    const buffer = this.device.createBuffer({\n      size: byteLength,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    });\n\n    const commandEncoder = this.device.createCommandEncoder();\n    commandEncoder.copyTextureToBuffer(\n      { texture: rt, mipLevel: 0, origin: [0, 0, 0] },\n      { buffer, bytesPerRow: kBytesPerRow, rowsPerImage: kRTSize },\n      { width: kRTSize, height: kRTSize, depthOrArrayLayers: 1 }\n    );\n    this.queue.submit([commandEncoder.finish()]);\n\n    return buffer;\n  }\n\n  private pipeline: GPURenderPipeline | undefined;\n  async init(): Promise<void> {\n    await super.init();\n\n    this.pipeline = this.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module: this.device.createShaderModule({\n          code: `\n            struct Outputs {\n              @builtin(position) Position : vec4<f32>,\n              @location(0) fragUV : vec2<f32>,\n            };\n\n            @vertex fn main(\n              @builtin(vertex_index) VertexIndex : u32) -> Outputs {\n              // Full screen quad\n              var position : array<vec3<f32>, 6> = array<vec3<f32>, 6>(\n                vec3<f32>(-1.0, 1.0, 0.0),\n                vec3<f32>(1.0, 1.0,  0.0),\n                vec3<f32>(1.0, -1.0, 0.0),\n                vec3<f32>(1.0, -1.0, 0.0),\n                vec3<f32>(-1.0, -1.0,  0.0),\n                vec3<f32>(-1.0, 1.0,  0.0)\n                );\n\n              // Map UVs so that dpdx and dpdy return specific values for the first fragment quad\n              let umax = ${kDX * kRTSize};\n              let vmax = ${kDY * kRTSize};\n              var uv : array<vec2<f32>, 6> = array<vec2<f32>, 6>(\n                vec2<f32>(0.0, 0.0),\n                vec2<f32>(umax, 0.0),\n                vec2<f32>(umax, vmax),\n                vec2<f32>(umax, vmax),\n                vec2<f32>(0.0, vmax),\n                vec2<f32>(0.0, 0.0));\n\n              var output : Outputs;\n              output.fragUV = uv[VertexIndex];\n              output.Position = vec4<f32>(position[VertexIndex], 1.0);\n              return output;\n            }\n            `,\n        }),\n        entryPoint: 'main',\n      },\n      fragment: {\n        module: this.device.createShaderModule({\n          code: `\n            struct Uniforms {\n              numIterations : i32\n            };\n            @binding(0) @group(0) var<uniform> uniforms : Uniforms;\n\n            @fragment fn main(\n              @builtin(position) FragCoord : vec4<f32>,\n              @location(0) fragUV: vec2<f32>) -> @location(0) vec4<f32> {\n\n                // Loop to exercise uniform control flow of gradient operations, to trip FXC's\n                // warning X3570: gradient instruction used in a loop with varying iteration, attempting to unroll the loop\n                var summed_dx : f32 = 0.0;\n                var summed_dy : f32 = 0.0;\n                for (var i = 0; i < uniforms.numIterations; i = i + 1) {\n\n                  // Bogus condition to make this a \"loop with varying iteration\".\n                  if (fragUV.x > 500.0) {\n                    break;\n                  }\n\n                  // Do the gradient operations within the loop\n                  let dx = dpdxCoarse(fragUV.x);\n                  let dy = dpdyCoarse(fragUV.y);\n\n                  summed_dx = summed_dx + dx;\n                  summed_dy = summed_dy + dy;\n                }\n\n                return vec4<f32>(summed_dx, summed_dy, 0.0, 1.0);\n            }\n            `,\n        }),\n        entryPoint: 'main',\n        targets: [{ format: kColorAttachmentFormat }],\n      },\n      primitive: { topology: 'triangle-list' },\n    });\n  }\n\n  // return the render target texture object\n  drawQuad(numIterations: number): GPUTexture {\n    // make sure it's already initialized\n    assert(this.pipeline !== undefined);\n\n    const uniformBufferSize = 4; // numIterations : i32\n\n    const uniformBuffer = this.device.createBuffer({\n      size: uniformBufferSize,\n      usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n    });\n\n    const uniforms = Int32Array.from([numIterations]);\n    this.queue.writeBuffer(\n      uniformBuffer,\n      0,\n      uniforms.buffer,\n      uniforms.byteOffset,\n      uniforms.byteLength\n    );\n\n    const bindGroup = this.device.createBindGroup({\n      entries: [{ binding: 0, resource: { buffer: uniformBuffer } }],\n      layout: this.pipeline.getBindGroupLayout(0),\n    });\n\n    const colorAttachment = this.device.createTexture({\n      format: kColorAttachmentFormat,\n      size: { width: kRTSize, height: kRTSize, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    });\n    const colorAttachmentView = colorAttachment.createView();\n\n    const encoder = this.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: colorAttachmentView,\n          storeOp: 'store',\n          clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 1.0 },\n          loadOp: 'clear',\n        },\n      ],\n    });\n    pass.setPipeline(this.pipeline);\n    pass.setBindGroup(0, bindGroup);\n    pass.draw(6);\n    pass.end();\n    this.device.queue.submit([encoder.finish()]);\n\n    return colorAttachment;\n  }\n}\n\nexport const g = makeTestGroup(DerivativesTest);\n\ng.test('derivative_in_varying_loop')\n  .desc(\n    `\n    Derivative test that invokes dpdx/dpdy in a loop where the compiler cannot determine the\n    number of iterations, nor uniform execution, at compile time. FXC typically unrolls such\n    loops and fails with a timeout. See https://crbug.com/tint/1112.\n    `\n  )\n  .params(u => u.combine('iterations', [1, 2, 3] as const))\n  .fn(async t => {\n    const byteLength = kRTSize * kBytesPerRow;\n\n    const numIterations = t.params.iterations;\n    const result = await t.readGPUBufferRangeTyped(\n      t.copyRenderTargetToBuffer(t.drawQuad(numIterations)),\n      { type: Float32Array, typedLength: byteLength / 4 }\n    );\n\n    const almostEqual = (a: number, b: number, epsilon: number = 0.000001) =>\n      Math.abs(a - b) <= epsilon;\n\n    const expected_x = numIterations * kDX;\n    const expected_y = numIterations * kDY;\n\n    t.expect(\n      almostEqual(result.data[0], expected_x),\n      `Render results with numIterations * dx is ${result.data[0]}, expected: ${expected_x}`\n    );\n    t.expect(\n      almostEqual(result.data[1], expected_y),\n      `Render results with numIterations * dy is ${result.data[1]}, expected: ${expected_y}`\n    );\n\n    result.cleanup();\n  });\n"],"file":"gradients_in_varying_loop.spec.js"}