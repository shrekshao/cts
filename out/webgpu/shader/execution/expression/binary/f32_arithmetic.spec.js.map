{"version":3,"sources":["../../../../../../src/webgpu/shader/execution/expression/binary/f32_arithmetic.spec.ts"],"names":["description","makeTestGroup","GPUTest","correctlyRoundedThreshold","ulpThreshold","kValue","f32","TypeF32","biasedRange","linearRange","quantizeToF32","run","binary","g","fullNumericRange","numeric_range","Array","concat","negative","max","min","subnormal","positive","test","uniqueId","specURL","desc","params","u","combine","undefined","fn","t","cfg","cmpFloats","makeCase","lhs","rhs","f32_lhs","f32_rhs","input","expected","cases","forEach","lhs_numeric_range","rhs_numeric_range","unimplemented"],"mappings":"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","sourcesContent":["export const description = `\nExecution Tests for the f32 arithmetic binary expression operations\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../gpu_test.js';\nimport { correctlyRoundedThreshold, ulpThreshold } from '../../../../util/compare.js';\nimport { kValue } from '../../../../util/constants.js';\nimport { f32, TypeF32 } from '../../../../util/conversion.js';\nimport { biasedRange, linearRange, quantizeToF32 } from '../../../../util/math.js';\nimport { Case, Config, run } from '../expression.js';\n\nimport { binary } from './binary.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n/* Generates an array of numbers spread over the entire range of 32-bit floats */\nfunction fullNumericRange(): Array<number> {\n  let numeric_range = Array<number>();\n  numeric_range = numeric_range.concat(\n    biasedRange(kValue.f32.negative.max, kValue.f32.negative.min, 50)\n  );\n  numeric_range = numeric_range.concat(\n    linearRange(kValue.f32.subnormal.negative.min, kValue.f32.subnormal.negative.max, 10)\n  );\n  numeric_range = numeric_range.concat(0.0);\n  numeric_range = numeric_range.concat(\n    linearRange(kValue.f32.subnormal.positive.min, kValue.f32.subnormal.positive.max, 10)\n  );\n  numeric_range = numeric_range.concat(\n    biasedRange(kValue.f32.positive.min, kValue.f32.positive.max, 50)\n  );\n  return numeric_range;\n}\n\ng.test('addition')\n  .uniqueId('xxxxxxxxx')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x + y\nAccuracy: Correctly rounded\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    cfg.cmpFloats = correctlyRoundedThreshold();\n\n    const makeCase = (lhs: number, rhs: number): Case => {\n      const f32_lhs = quantizeToF32(lhs);\n      const f32_rhs = quantizeToF32(rhs);\n      return { input: [f32(lhs), f32(rhs)], expected: f32(f32_lhs + f32_rhs) };\n    };\n\n    let cases: Array<Case> = [];\n    const numeric_range = fullNumericRange();\n    numeric_range.forEach(lhs => {\n      numeric_range.forEach(rhs => {\n        cases = cases.concat(makeCase(lhs, rhs));\n      });\n    });\n\n    run(t, binary('+'), [TypeF32, TypeF32], TypeF32, cfg, cases);\n  });\n\ng.test('subtraction')\n  .uniqueId('xxxxxxxxx')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x - y\nAccuracy: Correctly rounded\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    cfg.cmpFloats = correctlyRoundedThreshold();\n\n    const makeCase = (lhs: number, rhs: number): Case => {\n      const f32_lhs = quantizeToF32(lhs);\n      const f32_rhs = quantizeToF32(rhs);\n      return { input: [f32(lhs), f32(rhs)], expected: f32(f32_lhs - f32_rhs) };\n    };\n\n    let cases: Array<Case> = [];\n    const numeric_range = fullNumericRange();\n    numeric_range.forEach(lhs => {\n      numeric_range.forEach(rhs => {\n        cases = cases.concat(makeCase(lhs, rhs));\n      });\n    });\n\n    run(t, binary('-'), [TypeF32, TypeF32], TypeF32, cfg, cases);\n  });\n\ng.test('multiplication')\n  .uniqueId('xxxxxxxxx')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x * y\nAccuracy: Correctly rounded\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    cfg.cmpFloats = correctlyRoundedThreshold();\n\n    const makeCase = (lhs: number, rhs: number): Case => {\n      const f32_lhs = quantizeToF32(lhs);\n      const f32_rhs = quantizeToF32(rhs);\n      return { input: [f32(lhs), f32(rhs)], expected: f32(f32_lhs * f32_rhs) };\n    };\n\n    let cases: Array<Case> = [];\n    const numeric_range = fullNumericRange();\n    numeric_range.forEach(lhs => {\n      numeric_range.forEach(rhs => {\n        cases = cases.concat(makeCase(lhs, rhs));\n      });\n    });\n\n    run(t, binary('*'), [TypeF32, TypeF32], TypeF32, cfg, cases);\n  });\n\ng.test('division')\n  .uniqueId('xxxxxxxxx')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x / y\nAccuracy: 2.5 ULP for |y| in the range [2^-126, 2^126]\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    cfg.cmpFloats = ulpThreshold(2.5);\n\n    const makeCase = (lhs: number, rhs: number): Case => {\n      const f32_lhs = quantizeToF32(lhs);\n      const f32_rhs = quantizeToF32(rhs);\n      return { input: [f32(lhs), f32(rhs)], expected: f32(f32_lhs / f32_rhs) };\n    };\n\n    let cases: Array<Case> = [];\n    const lhs_numeric_range = fullNumericRange();\n    const rhs_numeric_range = biasedRange(2 ** -126, 2 ** 126, 200);\n    lhs_numeric_range.forEach(lhs => {\n      rhs_numeric_range.forEach(rhs => {\n        cases = cases.concat(makeCase(lhs, rhs));\n      });\n    });\n\n    run(t, binary('/'), [TypeF32, TypeF32], TypeF32, cfg, cases);\n  });\n\n// Will be implemented as part larger derived accuracy task\ng.test('modulus')\n  .uniqueId('xxxxxxxxx')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x % y\nAccuracy: Derived from x - y * trunc(x/y)\n`\n  )\n  .params(u => u.combine('placeHolder1', ['placeHolder2', 'placeHolder3']))\n  .unimplemented();\n"],"file":"f32_arithmetic.spec.js"}