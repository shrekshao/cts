{"version":3,"sources":["../../../../../../src/webgpu/shader/execution/expression/binary/f32_arithmetic.spec.ts"],"names":["description","makeTestGroup","GPUTest","anyOf","correctlyRoundedThreshold","ulpThreshold","f32","TypeF32","biasedRange","fullF32Range","isSubnormalNumber","quantizeToF32","run","binary","g","calculateResults","lhs","rhs","op","results","value","push","makeCaseImpl","skip_rhs_zero_flush","f32_lhs","f32_rhs","is_lhs_subnormal","is_rhs_subnormal","expected","input","test","specURL","desc","params","u","combine","undefined","fn","t","cfg","cmpFloats","makeCase","l","r","cases","numeric_range","forEach","lhs_numeric_range","rhs_numeric_range","filter","unimplemented"],"mappings":"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","sourcesContent":["export const description = `\nExecution Tests for the f32 arithmetic binary expression operations\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../gpu_test.js';\nimport { anyOf, correctlyRoundedThreshold, ulpThreshold } from '../../../../util/compare.js';\nimport { f32, Scalar, TypeF32 } from '../../../../util/conversion.js';\nimport {\n  biasedRange,\n  fullF32Range,\n  isSubnormalNumber,\n  quantizeToF32,\n} from '../../../../util/math.js';\nimport { Case, Config, run } from '../expression.js';\n\nimport { binary } from './binary.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n/**\n * Produces all of the results for a binary op and a specific pair of params, accounting for if subnormal results can be\n * flushed to zero.\n * Does not account for the inputs being flushed.\n * @param lhs the left hand side to pass into the binary operation\n * @param rhs the rhs hand side to pass into the binary operation\n * @param op callback that implements the truth function for the binary operation\n */\nfunction calculateResults(\n  lhs: number,\n  rhs: number,\n  op: (l: number, r: number) => number\n): Array<Scalar> {\n  const results: Array<Scalar> = [];\n  const value = op(lhs, rhs);\n  results.push(f32(value));\n  if (isSubnormalNumber(value)) {\n    results.push(f32(0.0));\n  }\n  return results;\n}\n\n/**\n * Generates a Case for the params and binary op provide.\n * @param lhs the left hand side to pass into the binary operation\n * @param rhs the rhs hand side to pass into the binary operation\n * @param op callback that implements the truth function for the binary operation\n * @param skip_rhs_zero_flush should the builder skip cases where the rhs would be flushed to 0, this is primarily for\n *                            avoid doing division by 0. The caller is responsible for making sure the initial rhs isn't\n *                            0.\n */\nfunction makeCaseImpl(\n  lhs: number,\n  rhs: number,\n  op: (l: number, r: number) => number,\n  skip_rhs_zero_flush: boolean = false\n): Case {\n  const f32_lhs = quantizeToF32(lhs);\n  const f32_rhs = quantizeToF32(rhs);\n  const is_lhs_subnormal = isSubnormalNumber(f32_lhs);\n  const is_rhs_subnormal = isSubnormalNumber(f32_rhs);\n  const expected = calculateResults(f32_lhs, f32_rhs, op);\n  if (is_lhs_subnormal) {\n    expected.push(...calculateResults(0.0, f32_rhs, op));\n  }\n  if (!skip_rhs_zero_flush && is_rhs_subnormal) {\n    expected.push(...calculateResults(f32_lhs, 0.0, op));\n  }\n  if (!skip_rhs_zero_flush && is_lhs_subnormal && is_rhs_subnormal) {\n    expected.push(...calculateResults(0.0, 0.0, op));\n  }\n\n  return { input: [f32(lhs), f32(rhs)], expected: anyOf(...expected) };\n}\n\ng.test('addition')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x + y\nAccuracy: Correctly rounded\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    cfg.cmpFloats = correctlyRoundedThreshold();\n\n    const makeCase = (lhs: number, rhs: number): Case => {\n      return makeCaseImpl(lhs, rhs, (l: number, r: number): number => {\n        return l + r;\n      });\n    };\n\n    const cases: Array<Case> = [];\n    const numeric_range = fullF32Range();\n    numeric_range.forEach(lhs => {\n      numeric_range.forEach(rhs => {\n        cases.push(makeCase(lhs, rhs));\n      });\n    });\n\n    run(t, binary('+'), [TypeF32, TypeF32], TypeF32, cfg, cases);\n  });\n\ng.test('subtraction')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x - y\nAccuracy: Correctly rounded\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    cfg.cmpFloats = correctlyRoundedThreshold();\n\n    const makeCase = (lhs: number, rhs: number): Case => {\n      return makeCaseImpl(lhs, rhs, (l: number, r: number): number => {\n        return l - r;\n      });\n    };\n\n    const cases: Array<Case> = [];\n    const numeric_range = fullF32Range();\n    numeric_range.forEach(lhs => {\n      numeric_range.forEach(rhs => {\n        cases.push(makeCase(lhs, rhs));\n      });\n    });\n\n    run(t, binary('-'), [TypeF32, TypeF32], TypeF32, cfg, cases);\n  });\n\ng.test('multiplication')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x * y\nAccuracy: Correctly rounded\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    cfg.cmpFloats = correctlyRoundedThreshold();\n\n    const makeCase = (lhs: number, rhs: number): Case => {\n      return makeCaseImpl(lhs, rhs, (l: number, r: number): number => {\n        return l * r;\n      });\n    };\n\n    const cases: Array<Case> = [];\n    const numeric_range = fullF32Range();\n    numeric_range.forEach(lhs => {\n      numeric_range.forEach(rhs => {\n        cases.push(makeCase(lhs, rhs));\n      });\n    });\n\n    run(t, binary('*'), [TypeF32, TypeF32], TypeF32, cfg, cases);\n  });\n\ng.test('division')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x / y\nAccuracy: 2.5 ULP for |y| in the range [2^-126, 2^126]\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    cfg.cmpFloats = ulpThreshold(2.5);\n\n    const makeCase = (lhs: number, rhs: number): Case => {\n      return makeCaseImpl(\n        lhs,\n        rhs,\n        (l: number, r: number): number => {\n          return l / r;\n        },\n        true\n      );\n    };\n\n    const cases: Array<Case> = [];\n    const lhs_numeric_range = fullF32Range();\n    const rhs_numeric_range = biasedRange(2 ** -126, 2 ** 126, 200).filter(value => {\n      return value !== 0.0;\n    });\n    lhs_numeric_range.forEach(lhs => {\n      rhs_numeric_range.forEach(rhs => {\n        cases.push(makeCase(lhs, rhs));\n      });\n    });\n\n    run(t, binary('/'), [TypeF32, TypeF32], TypeF32, cfg, cases);\n  });\n\n// Will be implemented as part larger derived accuracy task\ng.test('modulus')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x % y\nAccuracy: Derived from x - y * trunc(x/y)\n`\n  )\n  .params(u => u.combine('placeHolder1', ['placeHolder2', 'placeHolder3']))\n  .unimplemented();\n"],"file":"f32_arithmetic.spec.js"}