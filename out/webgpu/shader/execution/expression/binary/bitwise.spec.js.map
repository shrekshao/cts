{"version":3,"sources":["../../../../../../src/webgpu/shader/execution/expression/binary/bitwise.spec.ts"],"names":["description","makeTestGroup","GPUTest","i32","scalarType","u32","run","binary","g","test","uniqueId","specURL","desc","params","u","combine","undefined","fn","t","type","V","cases","input","expected","i","lhs","j","rhs","push"],"mappings":"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","sourcesContent":["export const description = `\nExecution Tests for the bitwise binary expression operations\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../gpu_test.js';\nimport { i32, scalarType, u32 } from '../../../../util/conversion.js';\nimport { run } from '../expression.js';\n\nimport { binary } from './binary.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('bitwise_or')\n  .uniqueId('xxxxxxxxx')\n  .specURL('https://www.w3.org/TR/WGSL/#bit-expr')\n  .desc(\n    `\ne1 | e2: T\nT is i32, u32, vecN<i32>, or vecN<u32>\n\nBitwise-or. Component-wise when T is a vector.\n`\n  )\n  .params(u =>\n    u\n      .combine('type', ['i32', 'u32'] as const)\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const type = scalarType(t.params.type);\n    const V = t.params.type === 'i32' ? i32 : u32;\n    const cases = [\n      // Static patterns\n      {\n        input: [V(0b00000000000000000000000000000000), V(0b00000000000000000000000000000000)],\n        expected: V(0b00000000000000000000000000000000),\n      },\n      {\n        input: [V(0b11111111111111111111111111111111), V(0b00000000000000000000000000000000)],\n        expected: V(0b11111111111111111111111111111111),\n      },\n      {\n        input: [V(0b00000000000000000000000000000000), V(0b11111111111111111111111111111111)],\n        expected: V(0b11111111111111111111111111111111),\n      },\n      {\n        input: [V(0b11111111111111111111111111111111), V(0b11111111111111111111111111111111)],\n        expected: V(0b11111111111111111111111111111111),\n      },\n      {\n        input: [V(0b10100100010010100100010010100100), V(0b00000000000000000000000000000000)],\n        expected: V(0b10100100010010100100010010100100),\n      },\n      {\n        input: [V(0b00000000000000000000000000000000), V(0b10100100010010100100010010100100)],\n        expected: V(0b10100100010010100100010010100100),\n      },\n      {\n        input: [V(0b01010010001001010010001001010010), V(0b10100100010010100100010010100100)],\n        expected: V(0b11110110011011110110011011110110),\n      },\n    ];\n    // Permute all combinations of a single bit being set for the LHS and RHS\n    for (let i = 0; i < 32; i++) {\n      const lhs = 1 << i;\n      for (let j = 0; j < 32; j++) {\n        const rhs = 1 << j;\n        cases.push({\n          input: [V(lhs), V(rhs)],\n          expected: V(lhs | rhs),\n        });\n      }\n    }\n    run(t, binary('|'), [type, type], type, t.params, cases);\n  });\n\ng.test('bitwise_and')\n  .uniqueId('xxxxxxxxx')\n  .specURL('https://www.w3.org/TR/WGSL/#bit-expr')\n  .desc(\n    `\ne1 & e2: T\nT is i32, u32, vecN<i32>, or vecN<u32>\n\nBitwise-and. Component-wise when T is a vector.\n`\n  )\n  .params(u =>\n    u\n      .combine('type', ['i32', 'u32'] as const)\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const type = scalarType(t.params.type);\n    const V = t.params.type === 'i32' ? i32 : u32;\n    const cases = [\n      // Static patterns\n      {\n        input: [V(0b00000000000000000000000000000000), V(0b00000000000000000000000000000000)],\n        expected: V(0b00000000000000000000000000000000),\n      },\n      {\n        input: [V(0b11111111111111111111111111111111), V(0b00000000000000000000000000000000)],\n        expected: V(0b00000000000000000000000000000000),\n      },\n      {\n        input: [V(0b00000000000000000000000000000000), V(0b11111111111111111111111111111111)],\n        expected: V(0b00000000000000000000000000000000),\n      },\n      {\n        input: [V(0b11111111111111111111111111111111), V(0b11111111111111111111111111111111)],\n        expected: V(0b11111111111111111111111111111111),\n      },\n      {\n        input: [V(0b10100100010010100100010010100100), V(0b00000000000000000000000000000000)],\n        expected: V(0b00000000000000000000000000000000),\n      },\n      {\n        input: [V(0b10100100010010100100010010100100), V(0b11111111111111111111111111111111)],\n        expected: V(0b10100100010010100100010010100100),\n      },\n      {\n        input: [V(0b00000000000000000000000000000000), V(0b10100100010010100100010010100100)],\n        expected: V(0b00000000000000000000000000000000),\n      },\n      {\n        input: [V(0b11111111111111111111111111111111), V(0b10100100010010100100010010100100)],\n        expected: V(0b10100100010010100100010010100100),\n      },\n      {\n        input: [V(0b01010010001001010010001001010010), V(0b01011011101101011011101101011011)],\n        expected: V(0b01010010001001010010001001010010),\n      },\n    ];\n    // Permute all combinations of a single bit being set for the LHS and all but one bit set for the RHS\n    for (let i = 0; i < 32; i++) {\n      const lhs = 1 << i;\n      for (let j = 0; j < 32; j++) {\n        const rhs = 0xffffffff ^ (1 << j);\n        cases.push({\n          input: [V(lhs), V(rhs)],\n          expected: V(lhs & rhs),\n        });\n      }\n    }\n    run(t, binary('&'), [type, type], type, t.params, cases);\n  });\n\ng.test('bitwise_exclusive_or')\n  .uniqueId('xxxxxxxxx')\n  .specURL('https://www.w3.org/TR/WGSL/#bit-expr')\n  .desc(\n    `\ne1 ^ e2: T\nT is i32, u32, vecN<i32>, or vecN<u32>\n\nBitwise-exclusive-or. Component-wise when T is a vector.\n`\n  )\n  .params(u =>\n    u\n      .combine('type', ['i32', 'u32'] as const)\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const type = scalarType(t.params.type);\n    const V = t.params.type === 'i32' ? i32 : u32;\n    const cases = [\n      // Static patterns\n      {\n        input: [V(0b00000000000000000000000000000000), V(0b00000000000000000000000000000000)],\n        expected: V(0b00000000000000000000000000000000),\n      },\n      {\n        input: [V(0b11111111111111111111111111111111), V(0b00000000000000000000000000000000)],\n        expected: V(0b11111111111111111111111111111111),\n      },\n      {\n        input: [V(0b00000000000000000000000000000000), V(0b11111111111111111111111111111111)],\n        expected: V(0b11111111111111111111111111111111),\n      },\n      {\n        input: [V(0b11111111111111111111111111111111), V(0b11111111111111111111111111111111)],\n        expected: V(0b00000000000000000000000000000000),\n      },\n      {\n        input: [V(0b10100100010010100100010010100100), V(0b00000000000000000000000000000000)],\n        expected: V(0b10100100010010100100010010100100),\n      },\n      {\n        input: [V(0b10100100010010100100010010100100), V(0b11111111111111111111111111111111)],\n        expected: V(0b01011011101101011011101101011011),\n      },\n      {\n        input: [V(0b00000000000000000000000000000000), V(0b10100100010010100100010010100100)],\n        expected: V(0b10100100010010100100010010100100),\n      },\n      {\n        input: [V(0b11111111111111111111111111111111), V(0b10100100010010100100010010100100)],\n        expected: V(0b01011011101101011011101101011011),\n      },\n      {\n        input: [V(0b01010010001001010010001001010010), V(0b01011011101101011011101101011011)],\n        expected: V(0b00001001100100001001100100001001),\n      },\n    ];\n    // Permute all combinations of a single bit being set for the LHS and all but one bit set for the RHS\n    for (let i = 0; i < 32; i++) {\n      const lhs = 1 << i;\n      for (let j = 0; j < 32; j++) {\n        const rhs = 0xffffffff ^ (1 << j);\n        cases.push({\n          input: [V(lhs), V(rhs)],\n          expected: V(lhs ^ rhs),\n        });\n      }\n    }\n    run(t, binary('^'), [type, type], type, t.params, cases);\n  });\n"],"file":"bitwise.spec.js"}