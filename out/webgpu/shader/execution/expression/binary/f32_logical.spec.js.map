{"version":3,"sources":["../../../../../../src/webgpu/shader/execution/expression/binary/f32_logical.spec.ts"],"names":["description","makeTestGroup","GPUTest","anyOf","kValue","bool","f32","TypeBool","TypeF32","biasedRange","flushSubnormalScalar","linearRange","run","binary","g","fullNumericRange","numeric_range","concat","negative","max","min","subnormal","positive","makeCase","lhs","rhs","truthFunc","f32_lhs","f32_rhs","lhs_options","Set","rhs_options","expected","forEach","l","r","result","includes","input","test","uniqueId","specURL","desc","params","u","combine","undefined","fn","t","value","cases"],"mappings":"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","sourcesContent":["export const description = `\nExecution Tests for the f32 logical binary expression operations\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../gpu_test.js';\nimport { anyOf } from '../../../../util/compare.js';\nimport { kValue } from '../../../../util/constants.js';\nimport { bool, f32, Scalar, TypeBool, TypeF32 } from '../../../../util/conversion.js';\nimport { biasedRange, flushSubnormalScalar, linearRange } from '../../../../util/math.js';\nimport { Case, run } from '../expression.js';\n\nimport { binary } from './binary.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n/* Generates an array of numbers spread over the entire range of 32-bit floats */\nfunction fullNumericRange(): Array<number> {\n  let numeric_range: Array<number> = [];\n  numeric_range = numeric_range.concat(\n    biasedRange(kValue.f32.negative.max, kValue.f32.negative.min, 50)\n  );\n  numeric_range = numeric_range.concat(\n    linearRange(kValue.f32.subnormal.negative.min, kValue.f32.subnormal.negative.max, 10)\n  );\n  numeric_range = numeric_range.concat(0.0);\n  numeric_range = numeric_range.concat(\n    linearRange(kValue.f32.subnormal.positive.min, kValue.f32.subnormal.positive.max, 10)\n  );\n  numeric_range = numeric_range.concat(\n    biasedRange(kValue.f32.positive.min, kValue.f32.positive.max, 50)\n  );\n  return numeric_range;\n}\n\n/**\n * @returns a test case for the provided left hand & right hand values and truth function.\n * Handles quantization and subnormals.\n */\nfunction makeCase(\n  lhs: number,\n  rhs: number,\n  truthFunc: (lhs: Scalar, rhs: Scalar) => boolean\n): Case {\n  const f32_lhs = f32(lhs);\n  const f32_rhs = f32(rhs);\n  const lhs_options = new Set([f32_lhs, flushSubnormalScalar(f32_lhs)]);\n  const rhs_options = new Set([f32_rhs, flushSubnormalScalar(f32_rhs)]);\n  let expected: Array<Scalar> = [];\n  lhs_options.forEach(l => {\n    rhs_options.forEach(r => {\n      const result = bool(truthFunc(l, r));\n      if (!expected.includes(result)) {\n        expected = expected.concat(result);\n      }\n    });\n  });\n\n  return { input: [f32_lhs, f32_rhs], expected: anyOf(...expected) };\n}\n\ng.test('equals')\n  .uniqueId('xxxxxxxxx')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x == y\nAccuracy: Correct result\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const truthFunc = (lhs: Scalar, rhs: Scalar): boolean => {\n      return (lhs.value as number) === (rhs.value as number);\n    };\n\n    let cases: Array<Case> = [];\n    const numeric_range = fullNumericRange();\n    numeric_range.forEach(lhs => {\n      numeric_range.forEach(rhs => {\n        cases = cases.concat(makeCase(lhs, rhs, truthFunc));\n      });\n    });\n\n    run(t, binary('=='), [TypeF32, TypeF32], TypeBool, t.params, cases);\n  });\n\ng.test('not_equals')\n  .uniqueId('xxxxxxxxx')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x != y\nAccuracy: Correct result\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const truthFunc = (lhs: Scalar, rhs: Scalar): boolean => {\n      return (lhs.value as number) !== (rhs.value as number);\n    };\n\n    let cases: Array<Case> = [];\n    const numeric_range = fullNumericRange();\n    numeric_range.forEach(lhs => {\n      numeric_range.forEach(rhs => {\n        cases = cases.concat(makeCase(lhs, rhs, truthFunc));\n      });\n    });\n\n    run(t, binary('!='), [TypeF32, TypeF32], TypeBool, t.params, cases);\n  });\n\ng.test('less_than')\n  .uniqueId('xxxxxxxxx')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x < y\nAccuracy: Correct result\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const truthFunc = (lhs: Scalar, rhs: Scalar): boolean => {\n      return (lhs.value as number) < (rhs.value as number);\n    };\n\n    let cases: Array<Case> = [];\n    const numeric_range = fullNumericRange();\n    numeric_range.forEach(lhs => {\n      numeric_range.forEach(rhs => {\n        cases = cases.concat(makeCase(lhs, rhs, truthFunc));\n      });\n    });\n\n    run(t, binary('<'), [TypeF32, TypeF32], TypeBool, t.params, cases);\n  });\n\ng.test('less_equals')\n  .uniqueId('xxxxxxxxx')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x <= y\nAccuracy: Correct result\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const truthFunc = (lhs: Scalar, rhs: Scalar): boolean => {\n      return (lhs.value as number) <= (rhs.value as number);\n    };\n\n    let cases: Array<Case> = [];\n    const numeric_range = fullNumericRange();\n    numeric_range.forEach(lhs => {\n      numeric_range.forEach(rhs => {\n        cases = cases.concat(makeCase(lhs, rhs, truthFunc));\n      });\n    });\n\n    run(t, binary('<='), [TypeF32, TypeF32], TypeBool, t.params, cases);\n  });\n\ng.test('greater_than')\n  .uniqueId('xxxxxxxxx')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x > y\nAccuracy: Correct result\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const truthFunc = (lhs: Scalar, rhs: Scalar): boolean => {\n      return (lhs.value as number) > (rhs.value as number);\n    };\n\n    let cases: Array<Case> = [];\n    const numeric_range = fullNumericRange();\n    numeric_range.forEach(lhs => {\n      numeric_range.forEach(rhs => {\n        cases = cases.concat(makeCase(lhs, rhs, truthFunc));\n      });\n    });\n\n    run(t, binary('>'), [TypeF32, TypeF32], TypeBool, t.params, cases);\n  });\n\ng.test('greater_equals')\n  .uniqueId('xxxxxxxxx')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x >= y\nAccuracy: Correct result\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const truthFunc = (lhs: Scalar, rhs: Scalar): boolean => {\n      return (lhs.value as number) >= (rhs.value as number);\n    };\n\n    let cases: Array<Case> = [];\n    const numeric_range = fullNumericRange();\n    numeric_range.forEach(lhs => {\n      numeric_range.forEach(rhs => {\n        cases = cases.concat(makeCase(lhs, rhs, truthFunc));\n      });\n    });\n\n    run(t, binary('>='), [TypeF32, TypeF32], TypeBool, t.params, cases);\n  });\n"],"file":"f32_logical.spec.js"}