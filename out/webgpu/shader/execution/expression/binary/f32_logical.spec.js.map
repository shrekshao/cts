{"version":3,"sources":["../../../../../../src/webgpu/shader/execution/expression/binary/f32_logical.spec.ts"],"names":["description","makeTestGroup","GPUTest","anyOf","bool","f32","TypeBool","TypeF32","flushSubnormalScalar","fullF32Range","run","binary","g","makeCase","lhs","rhs","truthFunc","f32_lhs","f32_rhs","lhs_options","Set","rhs_options","expected","forEach","l","r","result","includes","push","input","test","specURL","desc","params","u","combine","undefined","fn","t","value","cases","numeric_range"],"mappings":"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","sourcesContent":["export const description = `\nExecution Tests for the f32 logical binary expression operations\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../gpu_test.js';\nimport { anyOf } from '../../../../util/compare.js';\nimport { bool, f32, Scalar, TypeBool, TypeF32 } from '../../../../util/conversion.js';\nimport { flushSubnormalScalar, fullF32Range } from '../../../../util/math.js';\nimport { Case, run } from '../expression.js';\n\nimport { binary } from './binary.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n/**\n * @returns a test case for the provided left hand & right hand values and truth function.\n * Handles quantization and subnormals.\n */\nfunction makeCase(\n  lhs: number,\n  rhs: number,\n  truthFunc: (lhs: Scalar, rhs: Scalar) => boolean\n): Case {\n  const f32_lhs = f32(lhs);\n  const f32_rhs = f32(rhs);\n  const lhs_options = new Set([f32_lhs, flushSubnormalScalar(f32_lhs)]);\n  const rhs_options = new Set([f32_rhs, flushSubnormalScalar(f32_rhs)]);\n  const expected: Array<Scalar> = [];\n  lhs_options.forEach(l => {\n    rhs_options.forEach(r => {\n      const result = bool(truthFunc(l, r));\n      if (!expected.includes(result)) {\n        expected.push(result);\n      }\n    });\n  });\n\n  return { input: [f32_lhs, f32_rhs], expected: anyOf(...expected) };\n}\n\ng.test('equals')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x == y\nAccuracy: Correct result\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const truthFunc = (lhs: Scalar, rhs: Scalar): boolean => {\n      return (lhs.value as number) === (rhs.value as number);\n    };\n\n    const cases: Array<Case> = [];\n    const numeric_range = fullF32Range();\n    numeric_range.forEach(lhs => {\n      numeric_range.forEach(rhs => {\n        cases.push(makeCase(lhs, rhs, truthFunc));\n      });\n    });\n\n    run(t, binary('=='), [TypeF32, TypeF32], TypeBool, t.params, cases);\n  });\n\ng.test('not_equals')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x != y\nAccuracy: Correct result\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const truthFunc = (lhs: Scalar, rhs: Scalar): boolean => {\n      return (lhs.value as number) !== (rhs.value as number);\n    };\n\n    const cases: Array<Case> = [];\n    const numeric_range = fullF32Range();\n    numeric_range.forEach(lhs => {\n      numeric_range.forEach(rhs => {\n        cases.push(makeCase(lhs, rhs, truthFunc));\n      });\n    });\n\n    run(t, binary('!='), [TypeF32, TypeF32], TypeBool, t.params, cases);\n  });\n\ng.test('less_than')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x < y\nAccuracy: Correct result\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const truthFunc = (lhs: Scalar, rhs: Scalar): boolean => {\n      return (lhs.value as number) < (rhs.value as number);\n    };\n\n    const cases: Array<Case> = [];\n    const numeric_range = fullF32Range();\n    numeric_range.forEach(lhs => {\n      numeric_range.forEach(rhs => {\n        cases.push(makeCase(lhs, rhs, truthFunc));\n      });\n    });\n\n    run(t, binary('<'), [TypeF32, TypeF32], TypeBool, t.params, cases);\n  });\n\ng.test('less_equals')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x <= y\nAccuracy: Correct result\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const truthFunc = (lhs: Scalar, rhs: Scalar): boolean => {\n      return (lhs.value as number) <= (rhs.value as number);\n    };\n\n    const cases: Array<Case> = [];\n    const numeric_range = fullF32Range();\n    numeric_range.forEach(lhs => {\n      numeric_range.forEach(rhs => {\n        cases.push(makeCase(lhs, rhs, truthFunc));\n      });\n    });\n\n    run(t, binary('<='), [TypeF32, TypeF32], TypeBool, t.params, cases);\n  });\n\ng.test('greater_than')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x > y\nAccuracy: Correct result\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const truthFunc = (lhs: Scalar, rhs: Scalar): boolean => {\n      return (lhs.value as number) > (rhs.value as number);\n    };\n\n    const cases: Array<Case> = [];\n    const numeric_range = fullF32Range();\n    numeric_range.forEach(lhs => {\n      numeric_range.forEach(rhs => {\n        cases.push(makeCase(lhs, rhs, truthFunc));\n      });\n    });\n\n    run(t, binary('>'), [TypeF32, TypeF32], TypeBool, t.params, cases);\n  });\n\ng.test('greater_equals')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: x >= y\nAccuracy: Correct result\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const truthFunc = (lhs: Scalar, rhs: Scalar): boolean => {\n      return (lhs.value as number) >= (rhs.value as number);\n    };\n\n    const cases: Array<Case> = [];\n    const numeric_range = fullF32Range();\n    numeric_range.forEach(lhs => {\n      numeric_range.forEach(rhs => {\n        cases.push(makeCase(lhs, rhs, truthFunc));\n      });\n    });\n\n    run(t, binary('>='), [TypeF32, TypeF32], TypeBool, t.params, cases);\n  });\n"],"file":"f32_logical.spec.js"}