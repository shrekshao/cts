{"version":3,"sources":["../../../../../../src/webgpu/shader/execution/expression/unary/f32_arithmetic.spec.ts"],"names":["description","makeTestGroup","GPUTest","anyOf","correctlyRoundedThreshold","f32","TypeF32","fullF32Range","isSubnormalNumber","quantizeToF32","run","unary","g","test","uniqueId","specURL","desc","params","u","combine","undefined","fn","t","cfg","cmpFloats","makeCase","x","f32_x","input","expected","cases","neg_norm","neg_sub","pos_sub","pos_norm","map"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAFO,CAIP,SAASC,aAAT,QAA8B,+CAA9B;AACA,SAASC,OAAT,QAAwB,yBAAxB;AACA,SAASC,KAAT,EAAgBC,yBAAhB,QAAiD,6BAAjD;AACA,SAASC,GAAT,EAAcC,OAAd,QAA6B,gCAA7B;AACA,SAASC,YAAT,EAAuBC,iBAAvB,EAA0CC,aAA1C,QAA+D,0BAA/D;AACA,SAAuBC,GAAvB,QAAkC,kBAAlC;;AAEA,SAASC,KAAT,QAAsB,YAAtB;;AAEA,OAAO,MAAMC,CAAC,GAAGX,aAAa,CAACC,OAAD,CAAvB;;AAEPU,CAAC,CAACC,IAAF,CAAO,UAAP;AACGC,QADH,CACY,WADZ;AAEGC,OAFH,CAEW,uDAFX;AAGGC,IAHH;AAIK;AACL;AACA;AACA,CAPA;;AASGC,MATH,CASU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,cADX,EAC2B,CAAC,SAAD,EAAY,WAAZ,EAAyB,YAAzB,CAD3B;AAEGA,OAFH,CAEW,WAFX,EAEwB,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAFxB,CAVJ;;AAcGC,EAdH,CAcM,OAAMC,CAAN,KAAW;AACb,QAAMC,GAAW,GAAGD,CAAC,CAACL,MAAtB;AACAM,EAAAA,GAAG,CAACC,SAAJ,GAAgBpB,yBAAyB,EAAzC;;AAEA,QAAMqB,QAAQ,GAAG,CAACC,CAAD,KAAqB;AACpC,UAAMC,KAAK,GAAGlB,aAAa,CAACiB,CAAD,CAA3B;AACA,QAAIlB,iBAAiB,CAACmB,KAAD,CAArB,EAA8B;AAC5B,aAAO,EAAEC,KAAK,EAAE,CAACvB,GAAG,CAACqB,CAAD,CAAJ,CAAT,EAAmBG,QAAQ,EAAE1B,KAAK,CAACE,GAAG,CAAC,CAACsB,KAAF,CAAJ,EAActB,GAAG,CAAC,GAAD,CAAjB,CAAlC,EAAP;AACD,KAFD,MAEO;AACL,aAAO,EAAEuB,KAAK,EAAE,CAACvB,GAAG,CAACqB,CAAD,CAAJ,CAAT,EAAmBG,QAAQ,EAAExB,GAAG,CAAC,CAACsB,KAAF,CAAhC,EAAP;AACD;AACF,GAPD;;AASA,QAAMG,KAAK,GAAGvB,YAAY,CAAC,EAAEwB,QAAQ,EAAE,GAAZ,EAAiBC,OAAO,EAAE,EAA1B,EAA8BC,OAAO,EAAE,EAAvC,EAA2CC,QAAQ,EAAE,GAArD,EAAD,CAAZ,CAAyEC,GAAzE,CAA6E,CAAAT,CAAC;AAC1FD,EAAAA,QAAQ,CAACC,CAAD,CADI,CAAd;;;AAIAhB,EAAAA,GAAG,CAACY,CAAD,EAAIX,KAAK,CAAC,GAAD,CAAT,EAAgB,CAACL,OAAD,CAAhB,EAA2BA,OAA3B,EAAoCiB,GAApC,EAAyCO,KAAzC,CAAH;AACD,CAhCH","sourcesContent":["export const description = `\nExecution Tests for the f32 arithmetic unary expression operations\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../gpu_test.js';\nimport { anyOf, correctlyRoundedThreshold } from '../../../../util/compare.js';\nimport { f32, TypeF32 } from '../../../../util/conversion.js';\nimport { fullF32Range, isSubnormalNumber, quantizeToF32 } from '../../../../util/math.js';\nimport { Case, Config, run } from '../expression.js';\n\nimport { unary } from './unary.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('negation')\n  .uniqueId('xxxxxxxxx')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: -x\nAccuracy: Correctly rounded\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    cfg.cmpFloats = correctlyRoundedThreshold();\n\n    const makeCase = (x: number): Case => {\n      const f32_x = quantizeToF32(x);\n      if (isSubnormalNumber(f32_x)) {\n        return { input: [f32(x)], expected: anyOf(f32(-f32_x), f32(0.0)) };\n      } else {\n        return { input: [f32(x)], expected: f32(-f32_x) };\n      }\n    };\n\n    const cases = fullF32Range({ neg_norm: 250, neg_sub: 20, pos_sub: 20, pos_norm: 250 }).map(x =>\n      makeCase(x)\n    );\n\n    run(t, unary('-'), [TypeF32], TypeF32, cfg, cases);\n  });\n"],"file":"f32_arithmetic.spec.js"}