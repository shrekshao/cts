{"version":3,"sources":["../../../../../../src/webgpu/shader/execution/expression/unary/f32_arithmetic.spec.ts"],"names":["description","makeTestGroup","GPUTest","TypeF32","negationInterval","fullF32Range","allInputSources","makeUnaryToF32IntervalCase","run","unary","g","test","specURL","desc","params","u","combine","undefined","fn","t","makeCase","x","cases","neg_norm","neg_sub","pos_sub","pos_norm","map"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAFO,CAIP,SAASC,aAAT,QAA8B,+CAA9B;AACA,SAASC,OAAT,QAAwB,yBAAxB;AACA,SAASC,OAAT,QAAwB,gCAAxB;AACA,SAASC,gBAAT,QAAiC,kCAAjC;AACA,SAASC,YAAT,QAA6B,0BAA7B;AACA,SAASC,eAAT,EAAgCC,0BAAhC,EAA4DC,GAA5D,QAAuE,kBAAvE;;AAEA,SAASC,KAAT,QAAsB,YAAtB;;AAEA,OAAO,MAAMC,CAAC,GAAGT,aAAa,CAACC,OAAD,CAAvB;;AAEPQ,CAAC,CAACC,IAAF,CAAO,UAAP;AACGC,OADH,CACW,uDADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA,CANA;;AAQGC,MARH,CAQU,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBV,eAAzB,EAA0CU,OAA1C,CAAkD,WAAlD,EAA+D,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAA/D,CATJ;;AAWGC,EAXH,CAWM,OAAMC,CAAN,KAAW;AACb,QAAMC,QAAQ,GAAG,CAACC,CAAD,KAAqB;AACpC,WAAOd,0BAA0B,CAACc,CAAD,EAAIjB,gBAAJ,CAAjC;AACD,GAFD;;AAIA,QAAMkB,KAAK,GAAGjB,YAAY,CAAC,EAAEkB,QAAQ,EAAE,GAAZ,EAAiBC,OAAO,EAAE,EAA1B,EAA8BC,OAAO,EAAE,EAAvC,EAA2CC,QAAQ,EAAE,GAArD,EAAD,CAAZ,CAAyEC,GAAzE,CAA6E,CAAAN,CAAC;AAC1FD,EAAAA,QAAQ,CAACC,CAAD,CADI,CAAd;;;AAIA,QAAMb,GAAG,CAACW,CAAD,EAAIV,KAAK,CAAC,GAAD,CAAT,EAAgB,CAACN,OAAD,CAAhB,EAA2BA,OAA3B,EAAoCgB,CAAC,CAACL,MAAtC,EAA8CQ,KAA9C,CAAT;AACD,CArBH","sourcesContent":["export const description = `\nExecution Tests for the f32 arithmetic unary expression operations\n`;\n\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../gpu_test.js';\nimport { TypeF32 } from '../../../../util/conversion.js';\nimport { negationInterval } from '../../../../util/f32_interval.js';\nimport { fullF32Range } from '../../../../util/math.js';\nimport { allInputSources, Case, makeUnaryToF32IntervalCase, run } from '../expression.js';\n\nimport { unary } from './unary.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('negation')\n  .specURL('https://www.w3.org/TR/WGSL/#floating-point-evaluation')\n  .desc(\n    `\nExpression: -x\nAccuracy: Correctly rounded\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const makeCase = (x: number): Case => {\n      return makeUnaryToF32IntervalCase(x, negationInterval);\n    };\n\n    const cases = fullF32Range({ neg_norm: 250, neg_sub: 20, pos_sub: 20, pos_norm: 250 }).map(x =>\n      makeCase(x)\n    );\n\n    await run(t, unary('-'), [TypeF32], TypeF32, t.params, cases);\n  });\n"],"file":"f32_arithmetic.spec.js"}