{"version":3,"sources":["../../../../../src/webgpu/shader/execution/expression/expression.ts"],"names":["globalTestConfig","assert","compare","anyOf","ScalarType","Scalar","TypeVec","TypeU32","Vector","VectorType","f32","F32Interval","quantizeToF32","isComparator","e","Array","toComparator","input","got","allInputSources","storageType","ty","kind","width","elementType","fromStorage","expr","toStorage","kValueStride","run","t","expressionBuilder","parameterTypes","returnType","cfg","inputSource","cases","vectorize","undefined","packed","packScalarsToVector","casesPerBatch","Math","floor","device","limits","maxUniformBufferBindingSize","length","maxStorageBufferBindingSize","pushErrorScope","checkResults","i","batchCases","slice","min","push","submitBatch","popErrorScope","then","error","fail","message","forEach","f","outputBufferSize","outputBuffer","createBuffer","size","usage","GPUBufferUsage","COPY_SRC","COPY_DST","STORAGE","pipeline","group","buildPipeline","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","testHeartbeatCallback","queue","submit","finish","checkExpectation","outputData","outputs","read","errs","caseIdx","c","cmp","expected","matched","join","Error","expectGPUBufferValuesPassCheck","type","Uint8Array","typedLength","ith","v","wgslStorageType","wgslOutputs","wgslValues","map","args","_","wgsl","source","module","createShaderModule","code","createComputePipeline","layout","compute","entryPoint","createBindGroup","getBindGroupLayout","entries","binding","resource","buffer","paramExpr","wgslInputVar","inputSize","inputData","caseStride","caseBase","paramIdx","offset","params","copyTo","inputBuffer","makeBufferWithContents","UNIFORM","vectorWidth","packedCases","packedParameterTypes","p","packedReturnType","clampCaseIdx","idx","packedInputs","inputElements","comparators","packedComparator","gElements","eElements","d","elements","makeUnaryToF32IntervalCase","param","ops","intervals","o","makeBinaryToF32IntervalCase","param0","param1","makeTernaryToF32IntervalCase","param2","makeVectorToF32IntervalCase","param_f32","makeVectorPairToF32IntervalCase","param0_f32","param1_f32","makeVectorToVectorIntervalCase"],"mappings":"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","sourcesContent":["import { globalTestConfig } from '../../../../common/framework/test_config.js';\nimport { assert } from '../../../../common/util/util.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { compare, Comparator, anyOf } from '../../../util/compare.js';\nimport {\n  ScalarType,\n  Scalar,\n  Type,\n  TypeVec,\n  TypeU32,\n  Value,\n  Vector,\n  VectorType,\n  f32,\n} from '../../../util/conversion.js';\nimport {\n  BinaryToInterval,\n  F32Interval,\n  PointToInterval,\n  TernaryToInterval,\n  VectorPairToInterval,\n  VectorToInterval,\n  VectorToVector,\n} from '../../../util/f32_interval.js';\nimport { quantizeToF32 } from '../../../util/math.js';\n\nexport type Expectation = Value | F32Interval | F32Interval[] | Comparator;\n\n/** Is this expectation actually a Comparator */\nfunction isComparator(e: Expectation): boolean {\n  return !(\n    e instanceof F32Interval ||\n    e instanceof Scalar ||\n    e instanceof Vector ||\n    e instanceof Array\n  );\n}\n\n/** Helper for converting Values to Comparators */\nexport function toComparator(input: Expectation): Comparator {\n  if (!isComparator(input)) {\n    return got => compare(got, input as Value);\n  }\n  return input as Comparator;\n}\n\n/** Case is a single expression test case. */\nexport type Case = {\n  // The input value(s)\n  input: Value | Array<Value>;\n  // The expected result, or function to check the result\n  expected: Expectation;\n};\n\n/** CaseList is a list of Cases */\nexport type CaseList = Array<Case>;\n\n/** The input value source */\nexport type InputSource =\n  | 'const' // Shader creation time constant values (@const)\n  | 'uniform' // Uniform buffer\n  | 'storage_r' // Read-only storage buffer\n  | 'storage_rw'; // Read-write storage buffer\n\n/** All possible input sources */\nexport const allInputSources: InputSource[] = ['const', 'uniform', 'storage_r', 'storage_rw'];\n\n/** Configuration for running a expression test */\nexport type Config = {\n  // Where the input values are read from\n  inputSource: InputSource;\n  // If defined, scalar test cases will be packed into vectors of the given\n  // width, which must be 2, 3 or 4.\n  // Requires that all parameters of the expression overload are of a scalar\n  // type, and the return type of the expression overload is also a scalar type.\n  // If the number of test cases is not a multiple of the vector width, then the\n  // last scalar value is repeated to fill the last vector value.\n  vectorize?: number;\n};\n\n// Helper for returning the WGSL storage type for the given Type.\nfunction storageType(ty: Type): Type {\n  if (ty instanceof ScalarType) {\n    if (ty.kind === 'bool') {\n      return TypeU32;\n    }\n  }\n  if (ty instanceof VectorType) {\n    return TypeVec(ty.width, storageType(ty.elementType) as ScalarType);\n  }\n  return ty;\n}\n\n// Helper for converting a value of the type 'ty' from the storage type.\nfunction fromStorage(ty: Type, expr: string): string {\n  if (ty instanceof ScalarType) {\n    if (ty.kind === 'bool') {\n      return `${expr} != 0u`;\n    }\n  }\n  if (ty instanceof VectorType) {\n    if (ty.elementType.kind === 'bool') {\n      return `${expr} != vec${ty.width}<u32>(0u)`;\n    }\n  }\n  return expr;\n}\n\n// Helper for converting a value of the type 'ty' to the storage type.\nfunction toStorage(ty: Type, expr: string): string {\n  if (ty instanceof ScalarType) {\n    if (ty.kind === 'bool') {\n      return `select(0u, 1u, ${expr})`;\n    }\n  }\n  if (ty instanceof VectorType) {\n    if (ty.elementType.kind === 'bool') {\n      return `select(vec${ty.width}<u32>(0u), vec${ty.width}<u32>(1u), ${expr})`;\n    }\n  }\n  return expr;\n}\n\n// Currently all values are packed into buffers of 16 byte strides\nconst kValueStride = 16;\n\n// ExpressionBuilder returns the WGSL used to test an expression.\nexport interface ExpressionBuilder {\n  (values: Array<string>): string;\n}\n\n/**\n * Runs the list of expression tests, possibly splitting the tests into multiple\n * dispatches to keep the input data within the buffer binding limits.\n * run() will pack the scalar test cases into smaller set of vectorized tests\n * if `cfg.vectorize` is defined.\n * @param t the GPUTest\n * @param expressionBuilder the expression builder function\n * @param parameterTypes the list of expression parameter types\n * @param returnType the return type for the expression overload\n * @param cfg test configuration values\n * @param cases list of test cases\n */\nexport function run(\n  t: GPUTest,\n  expressionBuilder: ExpressionBuilder,\n  parameterTypes: Array<Type>,\n  returnType: Type,\n  cfg: Config = { inputSource: 'storage_r' },\n  cases: CaseList\n) {\n  // If the 'vectorize' config option was provided, pack the cases into vectors.\n  if (cfg.vectorize !== undefined) {\n    const packed = packScalarsToVector(parameterTypes, returnType, cases, cfg.vectorize);\n    cases = packed.cases;\n    parameterTypes = packed.parameterTypes;\n    returnType = packed.returnType;\n  }\n\n  // The size of the input buffer may exceed the maximum buffer binding size,\n  // so chunk the tests up into batches that fit into the limits.\n  const casesPerBatch = (function () {\n    switch (cfg.inputSource) {\n      case 'const':\n        return 256; // Arbitrary limit, to ensure shaders aren't too large\n      case 'uniform':\n        return Math.floor(\n          t.device.limits.maxUniformBufferBindingSize / (parameterTypes.length * kValueStride)\n        );\n      case 'storage_r':\n      case 'storage_rw':\n        return Math.floor(\n          t.device.limits.maxStorageBufferBindingSize / (parameterTypes.length * kValueStride)\n        );\n    }\n  })();\n\n  // Submit all the batches inside an error scope.\n  // Note: there is no async work between \"push\" and \"pop\" so this is safe to\n  // run concurrently with itself (in other subcases).\n  t.device.pushErrorScope('validation');\n\n  const checkResults: Array<() => void> = [];\n  for (let i = 0; i < cases.length; i += casesPerBatch) {\n    const batchCases = cases.slice(i, Math.min(i + casesPerBatch, cases.length));\n    checkResults.push(\n      submitBatch(t, expressionBuilder, parameterTypes, returnType, batchCases, cfg.inputSource)\n    );\n  }\n\n  // Check GPU validation (shader compilation, pipeline creation, etc) before checking the results.\n  return t.device.popErrorScope().then(error => {\n    if (error !== null) {\n      t.fail(error.message);\n      return;\n    }\n\n    // Check the results\n    checkResults.forEach(f => f());\n  });\n}\n\n/**\n * Submits the list of expression tests. The input data must fit within the\n * buffer binding limits of the given inputSource.\n * @param t the GPUTest\n * @param expressionBuilder the expression builder function\n * @param parameterTypes the list of expression parameter types\n * @param returnType the return type for the expression overload\n * @param cases list of test cases that fit within the binding limits of the device\n * @param inputSource the source of the input values\n * @returns a function that checks the results are as expected\n */\nfunction submitBatch(\n  t: GPUTest,\n  expressionBuilder: ExpressionBuilder,\n  parameterTypes: Array<Type>,\n  returnType: Type,\n  cases: CaseList,\n  inputSource: InputSource\n): () => void {\n  // Construct a buffer to hold the results of the expression tests\n  const outputBufferSize = cases.length * kValueStride;\n  const outputBuffer = t.device.createBuffer({\n    size: outputBufferSize,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE,\n  });\n\n  const [pipeline, group] = buildPipeline(\n    t,\n    expressionBuilder,\n    parameterTypes,\n    returnType,\n    cases,\n    inputSource,\n    outputBuffer\n  );\n\n  const encoder = t.device.createCommandEncoder();\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, group);\n  pass.dispatchWorkgroups(1);\n  pass.end();\n\n  // Heartbeat to ensure CTS runners know we're alive.\n  globalTestConfig.testHeartbeatCallback();\n\n  t.queue.submit([encoder.finish()]);\n\n  // Return a function that can check the results of the shader\n  return () => {\n    const checkExpectation = (outputData: Uint8Array) => {\n      // Read the outputs from the output buffer\n      const outputs = new Array<Value>(cases.length);\n      for (let i = 0; i < cases.length; i++) {\n        outputs[i] = returnType.read(outputData, i * kValueStride);\n      }\n\n      // The list of expectation failures\n      const errs: string[] = [];\n\n      // For each case...\n      for (let caseIdx = 0; caseIdx < cases.length; caseIdx++) {\n        const c = cases[caseIdx];\n        const got = outputs[caseIdx];\n        const cmp = toComparator(c.expected)(got);\n        if (!cmp.matched) {\n          errs.push(`(${c.input instanceof Array ? c.input.join(', ') : c.input})\n    returned: ${cmp.got}\n    expected: ${cmp.expected}`);\n        }\n      }\n\n      return errs.length > 0 ? new Error(errs.join('\\n\\n')) : undefined;\n    };\n\n    // Heartbeat to ensure CTS runners know we're alive.\n    globalTestConfig.testHeartbeatCallback();\n\n    t.expectGPUBufferValuesPassCheck(outputBuffer, checkExpectation, {\n      type: Uint8Array,\n      typedLength: outputBufferSize,\n    });\n  };\n}\n\n/**\n * @param v either an array of T or a single element of type T\n * @param i the value index to\n * @returns the i'th value of v, if v is an array, otherwise v (i must be 0)\n */\nfunction ith<T>(v: T | T[], i: number): T {\n  if (v instanceof Array) {\n    assert(i < v.length);\n    return v[i];\n  }\n  assert(i === 0);\n  return v;\n}\n\n/**\n * Constructs and returns a GPUComputePipeline and GPUBindGroup for running a\n * batch of test cases.\n * @param t the GPUTest\n * @param expressionBuilder the expression builder function\n * @param parameterTypes the list of expression parameter types\n * @param returnType the return type for the expression overload\n * @param cases list of test cases that fit within the binding limits of the device\n * @param inputSource the source of the input values\n * @param outputBuffer the buffer that will hold the output values of the tests\n */\nfunction buildPipeline(\n  t: GPUTest,\n  expressionBuilder: ExpressionBuilder,\n  parameterTypes: Array<Type>,\n  returnType: Type,\n  cases: CaseList,\n  inputSource: InputSource,\n  outputBuffer: GPUBuffer\n): [GPUComputePipeline, GPUBindGroup] {\n  // wgsl declaration of output buffer and binding\n  const wgslStorageType = storageType(returnType);\n  const wgslOutputs = `\nstruct Output {\n  @size(${kValueStride}) value : ${wgslStorageType}\n};\n@group(0) @binding(0) var<storage, read_write> outputs : array<Output, ${cases.length}>;\n`;\n\n  switch (inputSource) {\n    case 'const': {\n      //////////////////////////////////////////////////////////////////////////\n      // Input values are constant values in the WGSL shader\n      //////////////////////////////////////////////////////////////////////////\n      const wgslValues = cases.map(c => {\n        const args = parameterTypes.map((_, i) => `(${ith(c.input, i).wgsl()})`);\n        return `${toStorage(returnType, expressionBuilder(args))}`;\n      });\n\n      // the full WGSL shader source\n      const source = `\n${wgslOutputs}\n\nconst values = array<${wgslStorageType}, ${cases.length}>(\n  ${wgslValues.join(',\\n  ')}\n);\n\n@compute @workgroup_size(1)\nfn main() {\n  for (var i = 0u; i < ${cases.length}; i++) {\n    outputs[i].value = values[i];\n  }\n}\n`;\n\n      // build the shader module\n      const module = t.device.createShaderModule({ code: source });\n\n      // build the pipeline\n      const pipeline = t.device.createComputePipeline({\n        layout: 'auto',\n        compute: { module, entryPoint: 'main' },\n      });\n\n      // build the bind group\n      const group = t.device.createBindGroup({\n        layout: pipeline.getBindGroupLayout(0),\n        entries: [{ binding: 0, resource: { buffer: outputBuffer } }],\n      });\n\n      return [pipeline, group];\n    }\n\n    case 'uniform':\n    case 'storage_r':\n    case 'storage_rw': {\n      //////////////////////////////////////////////////////////////////////////\n      // Input values come from a uniform or storage buffer\n      //////////////////////////////////////////////////////////////////////////\n\n      // returns the WGSL expression to load the ith parameter of the given type from the input buffer\n      const paramExpr = (ty: Type, i: number) => fromStorage(ty, `inputs[i].param${i}`);\n\n      // resolves to the expression that calls the builtin\n      const expr = toStorage(returnType, expressionBuilder(parameterTypes.map(paramExpr)));\n\n      // input binding var<...> declaration\n      const wgslInputVar = (function () {\n        switch (inputSource) {\n          case 'storage_r':\n            return 'var<storage, read>';\n          case 'storage_rw':\n            return 'var<storage, read_write>';\n          case 'uniform':\n            return 'var<uniform>';\n        }\n      })();\n\n      // the full WGSL shader source\n      const source = `\nstruct Input {\n${parameterTypes\n  .map((ty, i) => `  @size(${kValueStride}) param${i} : ${storageType(ty)},`)\n  .join('\\n')}\n};\n\n${wgslOutputs}\n\n@group(0) @binding(1)\n${wgslInputVar} inputs : array<Input, ${cases.length}>;\n\n@compute @workgroup_size(1)\nfn main() {\n  for(var i = 0; i < ${cases.length}; i++) {\n    outputs[i].value = ${expr};\n  }\n}\n`;\n\n      // size in bytes of the input buffer\n      const inputSize = cases.length * parameterTypes.length * kValueStride;\n\n      // Holds all the parameter values for all cases\n      const inputData = new Uint8Array(inputSize);\n\n      // Pack all the input parameter values into the inputData buffer\n      {\n        const caseStride = kValueStride * parameterTypes.length;\n        for (let caseIdx = 0; caseIdx < cases.length; caseIdx++) {\n          const caseBase = caseIdx * caseStride;\n          for (let paramIdx = 0; paramIdx < parameterTypes.length; paramIdx++) {\n            const offset = caseBase + paramIdx * kValueStride;\n            const params = cases[caseIdx].input;\n            if (params instanceof Array) {\n              params[paramIdx].copyTo(inputData, offset);\n            } else {\n              params.copyTo(inputData, offset);\n            }\n          }\n        }\n      }\n\n      // build the input buffer\n      const inputBuffer = t.makeBufferWithContents(\n        inputData,\n        GPUBufferUsage.COPY_SRC |\n          (inputSource === 'uniform' ? GPUBufferUsage.UNIFORM : GPUBufferUsage.STORAGE)\n      );\n\n      // build the shader module\n      const module = t.device.createShaderModule({ code: source });\n\n      // build the pipeline\n      const pipeline = t.device.createComputePipeline({\n        layout: 'auto',\n        compute: { module, entryPoint: 'main' },\n      });\n\n      // build the bind group\n      const group = t.device.createBindGroup({\n        layout: pipeline.getBindGroupLayout(0),\n        entries: [\n          { binding: 0, resource: { buffer: outputBuffer } },\n          { binding: 1, resource: { buffer: inputBuffer } },\n        ],\n      });\n\n      return [pipeline, group];\n    }\n  }\n}\n\n/**\n * Packs a list of scalar test cases into a smaller list of vector cases.\n * Requires that all parameters of the expression overload are of a scalar type,\n * and the return type of the expression overload is also a scalar type.\n * If `cases.length` is not a multiple of `vectorWidth`, then the last scalar\n * test case value is repeated to fill the vector value.\n */\nfunction packScalarsToVector(\n  parameterTypes: Array<Type>,\n  returnType: Type,\n  cases: CaseList,\n  vectorWidth: number\n): { cases: CaseList; parameterTypes: Array<Type>; returnType: Type } {\n  // Validate that the parameters and return type are all vectorizable\n  for (let i = 0; i < parameterTypes.length; i++) {\n    const ty = parameterTypes[i];\n    if (!(ty instanceof ScalarType)) {\n      throw new Error(\n        `packScalarsToVector() can only be used on scalar parameter types, but the ${i}'th parameter type is a ${ty}'`\n      );\n    }\n  }\n  if (!(returnType instanceof ScalarType)) {\n    throw new Error(\n      `packScalarsToVector() can only be used with a scalar return type, but the return type is a ${returnType}'`\n    );\n  }\n\n  const packedCases: Array<Case> = [];\n  const packedParameterTypes = parameterTypes.map(p => TypeVec(vectorWidth, p as ScalarType));\n  const packedReturnType = new VectorType(vectorWidth, returnType);\n\n  const clampCaseIdx = (idx: number) => Math.min(idx, cases.length - 1);\n\n  let caseIdx = 0;\n  while (caseIdx < cases.length) {\n    // Construct the vectorized inputs from the scalar cases\n    const packedInputs = new Array<Vector>(parameterTypes.length);\n    for (let paramIdx = 0; paramIdx < parameterTypes.length; paramIdx++) {\n      const inputElements = new Array<Scalar>(vectorWidth);\n      for (let i = 0; i < vectorWidth; i++) {\n        const input = cases[clampCaseIdx(caseIdx + i)].input;\n        inputElements[i] = (input instanceof Array ? input[paramIdx] : input) as Scalar;\n      }\n      packedInputs[paramIdx] = new Vector(inputElements);\n    }\n\n    // Gather the comparators for the packed cases\n    const comparators = new Array<Comparator>(vectorWidth);\n    for (let i = 0; i < vectorWidth; i++) {\n      comparators[i] = toComparator(cases[clampCaseIdx(caseIdx + i)].expected);\n    }\n    const packedComparator = (got: Value) => {\n      let matched = true;\n      const gElements = new Array<string>(vectorWidth);\n      const eElements = new Array<string>(vectorWidth);\n      for (let i = 0; i < vectorWidth; i++) {\n        const d = comparators[i]((got as Vector).elements[i]);\n        matched = matched && d.matched;\n        gElements[i] = d.got;\n        eElements[i] = d.expected;\n      }\n      return {\n        matched,\n        got: `${packedReturnType}(${gElements.join(', ')})`,\n        expected: `${packedReturnType}(${eElements.join(', ')})`,\n      };\n    };\n\n    // Append the new packed case\n    packedCases.push({ input: packedInputs, expected: packedComparator });\n    caseIdx += vectorWidth;\n  }\n\n  return {\n    cases: packedCases,\n    parameterTypes: packedParameterTypes,\n    returnType: packedReturnType,\n  };\n}\n\n/**\n * Generates a Case for the param and unary interval generator provided.\n * The Case will use use an interval comparator for matching results.\n * @param param the param to pass into the unary operation\n * @param ops callbacks that implement generating an acceptance interval for a unary operation\n */\nexport function makeUnaryToF32IntervalCase(param: number, ...ops: PointToInterval[]): Case {\n  param = quantizeToF32(param);\n\n  const intervals = ops.map(o => o(param));\n  return { input: [f32(param)], expected: anyOf(...intervals) };\n}\n\n/**\n * Generates a Case for the params and binary interval generator provided.\n * The Case will use use an interval comparator for matching results.\n * @param param0 the first param or left hand side to pass into the binary operation\n * @param param1 the second param or rhs hand side to pass into the binary operation\n * @param ops callbacks that implement generating an acceptance interval for a binary operation\n */\nexport function makeBinaryToF32IntervalCase(\n  param0: number,\n  param1: number,\n  ...ops: BinaryToInterval[]\n): Case {\n  param0 = quantizeToF32(param0);\n  param1 = quantizeToF32(param1);\n\n  const intervals = ops.map(o => o(param0, param1));\n  return { input: [f32(param0), f32(param1)], expected: anyOf(...intervals) };\n}\n\n/**\n * Generates a Case for the params and ternary interval generator provided.\n * The Case will use use an interval comparator for matching results.\n * @param param0 the first param to pass into the ternary operation\n * @param param1 the second param to pass into the ternary operation\n * @param param2 the third param to pass into the ternary operation\n * @param ops callbacks that implement generating an acceptance interval for a\n *           ternary operation.\n */\nexport function makeTernaryToF32IntervalCase(\n  param0: number,\n  param1: number,\n  param2: number,\n  ...ops: TernaryToInterval[]\n): Case {\n  param0 = quantizeToF32(param0);\n  param1 = quantizeToF32(param1);\n  param2 = quantizeToF32(param2);\n\n  const intervals = ops.map(o => o(param0, param1, param2));\n  return {\n    input: [f32(param0), f32(param1), f32(param2)],\n    expected: anyOf(...intervals),\n  };\n}\n\n/**\n * Generates a Case for the param and vector interval generator provided.\n * @param param the param to pass into the operation\n * @param ops callbacks that implement generating an acceptance interval for a\n *            vector.\n */\nexport function makeVectorToF32IntervalCase(param: number[], ...ops: VectorToInterval[]): Case {\n  param = param.map(quantizeToF32);\n  const param_f32 = param.map(f32);\n\n  const intervals = ops.map(o => o(param));\n  return {\n    input: [new Vector(param_f32)],\n    expected: anyOf(...intervals),\n  };\n}\n\n/**\n * Generates a Case for the params and vector pair interval generator provided.\n * @param param0 the first param to pass into the operation\n * @param param1 the second param to pass into the operation\n * @param ops callbacks that implement generating an acceptance interval for a\n *            pair of vectors.\n */\nexport function makeVectorPairToF32IntervalCase(\n  param0: number[],\n  param1: number[],\n  ...ops: VectorPairToInterval[]\n): Case {\n  param0 = param0.map(quantizeToF32);\n  param1 = param1.map(quantizeToF32);\n  const param0_f32 = param0.map(f32);\n  const param1_f32 = param1.map(f32);\n\n  const intervals = ops.map(o => o(param0, param1));\n  return {\n    input: [new Vector(param0_f32), new Vector(param1_f32)],\n    expected: anyOf(...intervals),\n  };\n}\n\n/**\n * Generates a Case for the param and vector of intervals generator provided.\n * @param param the param to pass into the operation\n * @param ops callbacks that implement generating an vector of acceptance intervals for a\n *            vector.\n */\nexport function makeVectorToVectorIntervalCase(param: number[], ...ops: VectorToVector[]): Case {\n  param = param.map(quantizeToF32);\n  const param_f32 = param.map(f32);\n\n  const intervals = ops.map(o => o(param));\n  return {\n    input: [new Vector(param_f32)],\n    expected: anyOf(...intervals),\n  };\n}\n"],"file":"expression.js"}