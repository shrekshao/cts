{"version":3,"file":"expression.js","names":["globalTestConfig","assert","objectEquals","unreachable","compare","anyOf","ScalarType","Scalar","TypeVec","TypeU32","Vector","VectorType","f32","u32","i32","Matrix","MatrixType","F32Interval","cartesianProduct","map2DArray","quantizeToF32","quantizeToI32","quantizeToU32","isComparator","e","Array","toComparator","input","got","allInputSources","valueStride","ty","cols","rows","valueStrides","tys","map","reduce","sum","c","storageType","kind","width","elementType","fromStorage","expr","toStorage","getOrCreate","key","create","existing","get","undefined","value","set","run","t","expressionBuilder","parameterTypes","returnType","cfg","inputSource","cases","vectorize","packed","packScalarsToVector","casesPerBatch","Math","floor","min","device","limits","maxUniformBufferBindingSize","maxStorageBufferBindingSize","pipelineCache","Map","checkResults","i","length","batchCases","slice","pushErrorScope","checkBatch","submitBatch","push","popErrorScope","then","error","fail","message","Promise","all","outputBufferSize","outputBuffer","createBuffer","size","usage","GPUBufferUsage","COPY_SRC","COPY_DST","STORAGE","pipeline","group","buildPipeline","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","testHeartbeatCallback","queue","submit","finish","checkExpectation","outputData","outputs","read","errs","caseIdx","cmp","expected","matched","join","Error","expectGPUBufferValuesPassCheck","type","Uint8Array","typedLength","ith","v","wgslValueStride","wgslStorageType","wgslOutputs","forEach","inputTypes","input_str","param_str","wgslValues","args","_","wgsl","wgslBody","unrollConstEvalLoops","source","module","createShaderModule","code","createComputePipeline","layout","compute","entryPoint","createBindGroup","getBindGroupLayout","entries","binding","resource","buffer","paramExpr","wgslInputVar","inputSize","inputData","caseStride","caseBase","offset","paramIdx","params","copyTo","inputBuffer","makeBufferWithContents","UNIFORM","vectorWidth","packedCases","packedParameterTypes","p","packedReturnType","clampCaseIdx","idx","packedInputs","inputElements","comparators","packedComparator","gElements","eElements","d","elements","makeUnaryToF32IntervalCase","param","filter","ops","intervals","o","some","isFinite","generateUnaryToF32IntervalCases","makeBinaryToF32IntervalCase","param0","param1","generateBinaryToF32IntervalCases","param0s","param1s","makeTernaryToF32IntervalCase","param2","generateTernaryToF32IntervalCases","param2s","makeVectorToF32IntervalCase","param_f32","generateVectorToF32IntervalCases","makeVectorPairToF32IntervalCase","param0_f32","param1_f32","generateVectorPairToF32IntervalCases","makeVectorToVectorCase","vectors","generateVectorToVectorCases","makeVectorPairToVectorCase","generateVectorPairToVectorCases","makeMatrixToMatrixCase","results","m","r","generateMatrixToMatrixCases","makeMatrixPairToMatrixCase","generateMatrixPairToMatrixCases","makeMatrixScalarToMatrixCase","mat","scalar","mat_f32","scalar_f32","generateMatrixScalarToMatrixCases","mats","scalars","makeScalarMatrixToMatrixCase","generateScalarMatrixToMatrixCases","makeMatrixVectorToVectorCase","vec","vec_f32","generateMatrixVectorToVectorCases","vecs","makeVectorMatrixToVectorCase","generateVectorMatrixToVectorCases","makeU32ToVectorCase","trunc","param_u32","every","generateU32ToVectorCases","generateBinaryToI32Cases","params0s","params1s","op","generateBinaryToU32Cases","makeScalarVectorBinaryToVectorCase","vector","quantize","scalarize","result","includes","generateScalarVectorBinaryToVectorCases","s","makeVectorScalarBinaryToVectorCase","generateVectorScalarBinaryToVectorCases","generateU32VectorBinaryToVectorCases","generateVectorU32BinaryToVectorCases","generateI32VectorBinaryToVectorCases","generateVectorI32BinaryToVectorCases"],"sources":["../../../../../src/webgpu/shader/execution/expression/expression.ts"],"sourcesContent":["import { globalTestConfig } from '../../../../common/framework/test_config.js';\nimport { assert, objectEquals, unreachable } from '../../../../common/util/util.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { compare, Comparator, anyOf } from '../../../util/compare.js';\nimport {\n  ScalarType,\n  Scalar,\n  Type,\n  TypeVec,\n  TypeU32,\n  Value,\n  Vector,\n  VectorType,\n  f32,\n  u32,\n  i32,\n  Matrix,\n  MatrixType,\n  ScalarBuilder,\n} from '../../../util/conversion.js';\nimport {\n  BinaryToInterval,\n  F32Interval,\n  MatrixPairToMatrix,\n  MatrixScalarToMatrix,\n  MatrixToMatrix,\n  MatrixVectorToVector,\n  PointToInterval,\n  PointToVector,\n  ScalarMatrixToMatrix,\n  TernaryToInterval,\n  VectorMatrixToVector,\n  VectorPairToInterval,\n  VectorPairToVector,\n  VectorToInterval,\n  VectorToVector,\n} from '../../../util/f32_interval.js';\nimport {\n  cartesianProduct,\n  map2DArray,\n  QuantizeFunc,\n  quantizeToF32,\n  quantizeToI32,\n  quantizeToU32,\n} from '../../../util/math.js';\n\nexport type Expectation = Value | F32Interval | F32Interval[] | F32Interval[][] | Comparator;\n\n/** Is this expectation actually a Comparator */\nfunction isComparator(e: Expectation): boolean {\n  return !(\n    e instanceof F32Interval ||\n    e instanceof Scalar ||\n    e instanceof Vector ||\n    e instanceof Matrix ||\n    e instanceof Array\n  );\n}\n\n/** Helper for converting Values to Comparators */\nexport function toComparator(input: Expectation): Comparator {\n  if (!isComparator(input)) {\n    return got => compare(got, input as Value);\n  }\n  return input as Comparator;\n}\n\n/** Case is a single expression test case. */\nexport type Case = {\n  // The input value(s)\n  input: Value | Array<Value>;\n  // The expected result, or function to check the result\n  expected: Expectation;\n};\n\n/** CaseList is a list of Cases */\nexport type CaseList = Array<Case>;\n\n/** The input value source */\nexport type InputSource =\n  | 'const' // Shader creation time constant values (@const)\n  | 'uniform' // Uniform buffer\n  | 'storage_r' // Read-only storage buffer\n  | 'storage_rw'; // Read-write storage buffer\n\n/** All possible input sources */\nexport const allInputSources: InputSource[] = ['const', 'uniform', 'storage_r', 'storage_rw'];\n\n/** Configuration for running a expression test */\nexport type Config = {\n  // Where the input values are read from\n  inputSource: InputSource;\n  // If defined, scalar test cases will be packed into vectors of the given\n  // width, which must be 2, 3 or 4.\n  // Requires that all parameters of the expression overload are of a scalar\n  // type, and the return type of the expression overload is also a scalar type.\n  // If the number of test cases is not a multiple of the vector width, then the\n  // last scalar value is repeated to fill the last vector value.\n  vectorize?: number;\n};\n\n// Helper for returning the stride for a given Type\nfunction valueStride(ty: Type): number {\n  if (ty instanceof MatrixType) {\n    switch (ty.cols) {\n      case 2:\n        switch (ty.rows) {\n          case 2:\n            return 16;\n          case 3:\n            return 32;\n          case 4:\n            return 32;\n        }\n        break;\n      case 3:\n        switch (ty.rows) {\n          case 2:\n            return 32;\n          case 3:\n            return 64;\n          case 4:\n            return 64;\n        }\n        break;\n      case 4:\n        switch (ty.rows) {\n          case 2:\n            return 32;\n          case 3:\n            return 64;\n          case 4:\n            return 64;\n        }\n        break;\n    }\n    unreachable(\n      `Attempted to get stride length for a matrix with dimensions (${ty.cols}x${ty.rows}), which isn't currently handled`\n    );\n  }\n\n  // Handles scalars and vectors\n  return 16;\n}\n\n// Helper for summing up all of the stride values for an array of Types\nfunction valueStrides(tys: Type[]): number {\n  return tys.map(valueStride).reduce((sum, c) => sum + c);\n}\n\n// Helper for returning the WGSL storage type for the given Type.\nfunction storageType(ty: Type): Type {\n  if (ty instanceof ScalarType) {\n    if (ty.kind === 'bool') {\n      return TypeU32;\n    }\n  }\n  if (ty instanceof VectorType) {\n    return TypeVec(ty.width, storageType(ty.elementType) as ScalarType);\n  }\n  return ty;\n}\n\n// Helper for converting a value of the type 'ty' from the storage type.\nfunction fromStorage(ty: Type, expr: string): string {\n  if (ty instanceof ScalarType) {\n    if (ty.kind === 'bool') {\n      return `${expr} != 0u`;\n    }\n  }\n  if (ty instanceof VectorType) {\n    if (ty.elementType.kind === 'bool') {\n      return `${expr} != vec${ty.width}<u32>(0u)`;\n    }\n  }\n  return expr;\n}\n\n// Helper for converting a value of the type 'ty' to the storage type.\nfunction toStorage(ty: Type, expr: string): string {\n  if (ty instanceof ScalarType) {\n    if (ty.kind === 'bool') {\n      return `select(0u, 1u, ${expr})`;\n    }\n  }\n  if (ty instanceof VectorType) {\n    if (ty.elementType.kind === 'bool') {\n      return `select(vec${ty.width}<u32>(0u), vec${ty.width}<u32>(1u), ${expr})`;\n    }\n  }\n  return expr;\n}\n\n// ExpressionBuilder returns the WGSL used to test an expression.\nexport interface ExpressionBuilder {\n  (values: Array<string>): string;\n}\n\n// A Pipeline is a map of WGSL shader source to a built pipeline\ntype PipelineCache = Map<String, GPUComputePipeline>;\n\n/**\n * Searches for an entry with the given key, adding and returning the result of calling\n * @p create if the entry was not found.\n * @param map the cache map\n * @param key the entry's key\n * @param create the function used to construct a value, if not found in the cache\n * @returns the value, either fetched from the cache, or newly built.\n */\nfunction getOrCreate<K, V>(map: Map<K, V>, key: K, create: () => V) {\n  const existing = map.get(key);\n  if (existing !== undefined) {\n    return existing;\n  }\n  const value = create();\n  map.set(key, value);\n  return value;\n}\n/**\n * Runs the list of expression tests, possibly splitting the tests into multiple\n * dispatches to keep the input data within the buffer binding limits.\n * run() will pack the scalar test cases into smaller set of vectorized tests\n * if `cfg.vectorize` is defined.\n * @param t the GPUTest\n * @param expressionBuilder the expression builder function\n * @param parameterTypes the list of expression parameter types\n * @param returnType the return type for the expression overload\n * @param cfg test configuration values\n * @param cases list of test cases\n */\nexport async function run(\n  t: GPUTest,\n  expressionBuilder: ExpressionBuilder,\n  parameterTypes: Array<Type>,\n  returnType: Type,\n  cfg: Config = { inputSource: 'storage_r' },\n  cases: CaseList\n) {\n  // If the 'vectorize' config option was provided, pack the cases into vectors.\n  if (cfg.vectorize !== undefined) {\n    const packed = packScalarsToVector(parameterTypes, returnType, cases, cfg.vectorize);\n    cases = packed.cases;\n    parameterTypes = packed.parameterTypes;\n    returnType = packed.returnType;\n  }\n\n  // The size of the input buffer may exceed the maximum buffer binding size,\n  // so chunk the tests up into batches that fit into the limits. We also split\n  // the cases into smaller batches to help with shader compilation performance.\n  const casesPerBatch = (function () {\n    switch (cfg.inputSource) {\n      case 'const':\n        // Some drivers are slow to optimize shaders with many constant values,\n        // or statements. 32 is an empirically picked number of cases that works\n        // well for most drivers.\n        return 32;\n      case 'uniform':\n        // Some drivers are slow to build pipelines with large uniform buffers.\n        // 2k appears to be a sweet-spot when benchmarking.\n        return Math.floor(\n          Math.min(1024 * 2, t.device.limits.maxUniformBufferBindingSize) /\n            valueStrides(parameterTypes)\n        );\n      case 'storage_r':\n      case 'storage_rw':\n        return Math.floor(\n          t.device.limits.maxStorageBufferBindingSize / valueStrides(parameterTypes)\n        );\n    }\n  })();\n\n  // A cache to hold built shader pipelines.\n  const pipelineCache = new Map<String, GPUComputePipeline>();\n\n  // Submit all the cases in batches, each in a separate error scope.\n  const checkResults: Array<Promise<void>> = [];\n  for (let i = 0; i < cases.length; i += casesPerBatch) {\n    const batchCases = cases.slice(i, Math.min(i + casesPerBatch, cases.length));\n\n    t.device.pushErrorScope('validation');\n\n    const checkBatch = submitBatch(\n      t,\n      expressionBuilder,\n      parameterTypes,\n      returnType,\n      batchCases,\n      cfg.inputSource,\n      pipelineCache\n    );\n\n    checkResults.push(\n      // Check GPU validation (shader compilation, pipeline creation, etc) before checking the batch results.\n      t.device.popErrorScope().then(error => {\n        if (error === null) {\n          checkBatch();\n        } else {\n          t.fail(error.message);\n        }\n      })\n    );\n  }\n\n  // Check the results\n  await Promise.all(checkResults);\n}\n\n/**\n * Submits the list of expression tests. The input data must fit within the\n * buffer binding limits of the given inputSource.\n * @param t the GPUTest\n * @param expressionBuilder the expression builder function\n * @param parameterTypes the list of expression parameter types\n * @param returnType the return type for the expression overload\n * @param cases list of test cases that fit within the binding limits of the device\n * @param inputSource the source of the input values\n * @param pipelineCache the cache of compute pipelines, shared between batches\n * @returns a function that checks the results are as expected\n */\nfunction submitBatch(\n  t: GPUTest,\n  expressionBuilder: ExpressionBuilder,\n  parameterTypes: Array<Type>,\n  returnType: Type,\n  cases: CaseList,\n  inputSource: InputSource,\n  pipelineCache: PipelineCache\n): () => void {\n  // Construct a buffer to hold the results of the expression tests\n  const outputBufferSize = cases.length * valueStride(returnType);\n  const outputBuffer = t.device.createBuffer({\n    size: outputBufferSize,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE,\n  });\n\n  const [pipeline, group] = buildPipeline(\n    t,\n    expressionBuilder,\n    parameterTypes,\n    returnType,\n    cases,\n    inputSource,\n    outputBuffer,\n    pipelineCache\n  );\n\n  const encoder = t.device.createCommandEncoder();\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, group);\n  pass.dispatchWorkgroups(1);\n  pass.end();\n\n  // Heartbeat to ensure CTS runners know we're alive.\n  globalTestConfig.testHeartbeatCallback();\n\n  t.queue.submit([encoder.finish()]);\n\n  // Return a function that can check the results of the shader\n  return () => {\n    const checkExpectation = (outputData: Uint8Array) => {\n      // Read the outputs from the output buffer\n      const outputs = new Array<Value>(cases.length);\n      for (let i = 0; i < cases.length; i++) {\n        outputs[i] = returnType.read(outputData, i * valueStride(returnType));\n      }\n\n      // The list of expectation failures\n      const errs: string[] = [];\n\n      // For each case...\n      for (let caseIdx = 0; caseIdx < cases.length; caseIdx++) {\n        const c = cases[caseIdx];\n        const got = outputs[caseIdx];\n        const cmp = toComparator(c.expected)(got);\n        if (!cmp.matched) {\n          errs.push(`(${c.input instanceof Array ? c.input.join(', ') : c.input})\n    returned: ${cmp.got}\n    expected: ${cmp.expected}`);\n        }\n      }\n\n      return errs.length > 0 ? new Error(errs.join('\\n\\n')) : undefined;\n    };\n\n    // Heartbeat to ensure CTS runners know we're alive.\n    globalTestConfig.testHeartbeatCallback();\n\n    t.expectGPUBufferValuesPassCheck(outputBuffer, checkExpectation, {\n      type: Uint8Array,\n      typedLength: outputBufferSize,\n    });\n  };\n}\n\n/**\n * @param v either an array of T or a single element of type T\n * @param i the value index to\n * @returns the i'th value of v, if v is an array, otherwise v (i must be 0)\n */\nfunction ith<T>(v: T | T[], i: number): T {\n  if (v instanceof Array) {\n    assert(i < v.length);\n    return v[i];\n  }\n  assert(i === 0);\n  return v;\n}\n\n/**\n * Constructs and returns a GPUComputePipeline and GPUBindGroup for running a\n * batch of test cases. If a pre-created pipeline can be found in\n * @p pipelineCache, then this may be returned instead of creating a new\n * pipeline.\n * @param t the GPUTest\n * @param expressionBuilder the expression builder function\n * @param parameterTypes the list of expression parameter types\n * @param returnType the return type for the expression overload\n * @param cases list of test cases that fit within the binding limits of the device\n * @param inputSource the source of the input values\n * @param outputBuffer the buffer that will hold the output values of the tests\n * @param pipelineCache the cache of compute pipelines, shared between batches\n */\nfunction buildPipeline(\n  t: GPUTest,\n  expressionBuilder: ExpressionBuilder,\n  parameterTypes: Array<Type>,\n  returnType: Type,\n  cases: CaseList,\n  inputSource: InputSource,\n  outputBuffer: GPUBuffer,\n  pipelineCache: PipelineCache\n): [GPUComputePipeline, GPUBindGroup] {\n  // wgsl declaration of output buffer and binding\n  const wgslValueStride = valueStride(returnType);\n  const wgslStorageType = storageType(returnType);\n  const wgslOutputs = `\nstruct Output {\n  @size(${wgslValueStride}) value : ${wgslStorageType}\n};\n@group(0) @binding(0) var<storage, read_write> outputs : array<Output, ${cases.length}>;\n`;\n\n  cases.forEach(c => {\n    const inputTypes = c.input instanceof Array ? c.input.map(i => i.type) : [c.input.type];\n    if (!objectEquals(inputTypes, parameterTypes)) {\n      const input_str = `[${inputTypes.join(',')}]`;\n      const param_str = `[${parameterTypes.join(',')}]`;\n      throw new Error(\n        `case input types ${input_str} do not match provided runner parameter types ${param_str}`\n      );\n    }\n  });\n\n  switch (inputSource) {\n    case 'const': {\n      //////////////////////////////////////////////////////////////////////////\n      // Input values are constant values in the WGSL shader\n      //////////////////////////////////////////////////////////////////////////\n      const wgslValues = cases.map(c => {\n        const args = parameterTypes.map((_, i) => `(${ith(c.input, i).wgsl()})`);\n        return `${toStorage(returnType, expressionBuilder(args))}`;\n      });\n\n      const wgslBody = globalTestConfig.unrollConstEvalLoops\n        ? wgslValues.map((_, i) => `outputs[${i}].value = values[${i}];`).join('\\n  ')\n        : `for (var i = 0u; i < ${cases.length}; i++) {\n    outputs[i].value = values[i];\n  }`;\n\n      // the full WGSL shader source\n      const source = `\n${wgslOutputs}\n\nconst values = array<${wgslStorageType}, ${cases.length}>(\n  ${wgslValues.join(',\\n  ')}\n);\n\n@compute @workgroup_size(1)\nfn main() {\n  ${wgslBody}\n}\n`;\n\n      // build the shader module\n      const module = t.device.createShaderModule({ code: source });\n\n      // build the pipeline\n      const pipeline = t.device.createComputePipeline({\n        layout: 'auto',\n        compute: { module, entryPoint: 'main' },\n      });\n\n      // build the bind group\n      const group = t.device.createBindGroup({\n        layout: pipeline.getBindGroupLayout(0),\n        entries: [{ binding: 0, resource: { buffer: outputBuffer } }],\n      });\n\n      return [pipeline, group];\n    }\n\n    case 'uniform':\n    case 'storage_r':\n    case 'storage_rw': {\n      //////////////////////////////////////////////////////////////////////////\n      // Input values come from a uniform or storage buffer\n      //////////////////////////////////////////////////////////////////////////\n\n      // returns the WGSL expression to load the ith parameter of the given type from the input buffer\n      const paramExpr = (ty: Type, i: number) => fromStorage(ty, `inputs[i].param${i}`);\n\n      // resolves to the expression that calls the builtin\n      const expr = toStorage(returnType, expressionBuilder(parameterTypes.map(paramExpr)));\n\n      // input binding var<...> declaration\n      const wgslInputVar = (function () {\n        switch (inputSource) {\n          case 'storage_r':\n            return 'var<storage, read>';\n          case 'storage_rw':\n            return 'var<storage, read_write>';\n          case 'uniform':\n            return 'var<uniform>';\n        }\n      })();\n\n      // the full WGSL shader source\n      const source = `\nstruct Input {\n${parameterTypes\n  .map((ty, i) => `  @size(${valueStride(ty)}) param${i} : ${storageType(ty)},`)\n  .join('\\n')}\n};\n\n${wgslOutputs}\n\n@group(0) @binding(1)\n${wgslInputVar} inputs : array<Input, ${cases.length}>;\n\n@compute @workgroup_size(1)\nfn main() {\n  for(var i = 0; i < ${cases.length}; i++) {\n    outputs[i].value = ${expr};\n  }\n}\n`;\n\n      // size in bytes of the input buffer\n      const inputSize = cases.length * valueStrides(parameterTypes);\n\n      // Holds all the parameter values for all cases\n      const inputData = new Uint8Array(inputSize);\n\n      // Pack all the input parameter values into the inputData buffer\n      {\n        const caseStride = valueStrides(parameterTypes);\n        for (let caseIdx = 0; caseIdx < cases.length; caseIdx++) {\n          const caseBase = caseIdx * caseStride;\n          let offset = caseBase;\n          for (let paramIdx = 0; paramIdx < parameterTypes.length; paramIdx++) {\n            const params = cases[caseIdx].input;\n            if (params instanceof Array) {\n              params[paramIdx].copyTo(inputData, offset);\n            } else {\n              params.copyTo(inputData, offset);\n            }\n            offset += valueStride(parameterTypes[paramIdx]);\n          }\n        }\n      }\n\n      // build the compute pipeline, if the shader hasn't been compiled already.\n      const pipeline = getOrCreate(pipelineCache, source, () => {\n        // build the shader module\n        const module = t.device.createShaderModule({ code: source });\n\n        // build the pipeline\n        return t.device.createComputePipeline({\n          layout: 'auto',\n          compute: { module, entryPoint: 'main' },\n        });\n      });\n\n      // build the input buffer\n      const inputBuffer = t.makeBufferWithContents(\n        inputData,\n        GPUBufferUsage.COPY_SRC |\n          (inputSource === 'uniform' ? GPUBufferUsage.UNIFORM : GPUBufferUsage.STORAGE)\n      );\n\n      // build the bind group\n      const group = t.device.createBindGroup({\n        layout: pipeline.getBindGroupLayout(0),\n        entries: [\n          { binding: 0, resource: { buffer: outputBuffer } },\n          { binding: 1, resource: { buffer: inputBuffer } },\n        ],\n      });\n\n      return [pipeline, group];\n    }\n  }\n}\n\n/**\n * Packs a list of scalar test cases into a smaller list of vector cases.\n * Requires that all parameters of the expression overload are of a scalar type,\n * and the return type of the expression overload is also a scalar type.\n * If `cases.length` is not a multiple of `vectorWidth`, then the last scalar\n * test case value is repeated to fill the vector value.\n */\nfunction packScalarsToVector(\n  parameterTypes: Array<Type>,\n  returnType: Type,\n  cases: CaseList,\n  vectorWidth: number\n): { cases: CaseList; parameterTypes: Array<Type>; returnType: Type } {\n  // Validate that the parameters and return type are all vectorizable\n  for (let i = 0; i < parameterTypes.length; i++) {\n    const ty = parameterTypes[i];\n    if (!(ty instanceof ScalarType)) {\n      throw new Error(\n        `packScalarsToVector() can only be used on scalar parameter types, but the ${i}'th parameter type is a ${ty}'`\n      );\n    }\n  }\n  if (!(returnType instanceof ScalarType)) {\n    throw new Error(\n      `packScalarsToVector() can only be used with a scalar return type, but the return type is a ${returnType}'`\n    );\n  }\n\n  const packedCases: Array<Case> = [];\n  const packedParameterTypes = parameterTypes.map(p => TypeVec(vectorWidth, p as ScalarType));\n  const packedReturnType = new VectorType(vectorWidth, returnType);\n\n  const clampCaseIdx = (idx: number) => Math.min(idx, cases.length - 1);\n\n  let caseIdx = 0;\n  while (caseIdx < cases.length) {\n    // Construct the vectorized inputs from the scalar cases\n    const packedInputs = new Array<Vector>(parameterTypes.length);\n    for (let paramIdx = 0; paramIdx < parameterTypes.length; paramIdx++) {\n      const inputElements = new Array<Scalar>(vectorWidth);\n      for (let i = 0; i < vectorWidth; i++) {\n        const input = cases[clampCaseIdx(caseIdx + i)].input;\n        inputElements[i] = (input instanceof Array ? input[paramIdx] : input) as Scalar;\n      }\n      packedInputs[paramIdx] = new Vector(inputElements);\n    }\n\n    // Gather the comparators for the packed cases\n    const comparators = new Array<Comparator>(vectorWidth);\n    for (let i = 0; i < vectorWidth; i++) {\n      comparators[i] = toComparator(cases[clampCaseIdx(caseIdx + i)].expected);\n    }\n    const packedComparator = (got: Value) => {\n      let matched = true;\n      const gElements = new Array<string>(vectorWidth);\n      const eElements = new Array<string>(vectorWidth);\n      for (let i = 0; i < vectorWidth; i++) {\n        const d = comparators[i]((got as Vector).elements[i]);\n        matched = matched && d.matched;\n        gElements[i] = d.got;\n        eElements[i] = d.expected;\n      }\n      return {\n        matched,\n        got: `${packedReturnType}(${gElements.join(', ')})`,\n        expected: `${packedReturnType}(${eElements.join(', ')})`,\n      };\n    };\n\n    // Append the new packed case\n    packedCases.push({ input: packedInputs, expected: packedComparator });\n    caseIdx += vectorWidth;\n  }\n\n  return {\n    cases: packedCases,\n    parameterTypes: packedParameterTypes,\n    returnType: packedReturnType,\n  };\n}\n\n/**\n * Indicates bounds that acceptance intervals need to be within to avoid inputs\n * being filtered out. This is used for const-eval tests, since going OOB will\n * cause a validation error not an execution error.\n */\nexport type IntervalFilter =\n  | 'f32-only' // Expected to be f32 finite\n  | 'unfiltered'; // No expectations\n\n/**\n * @returns a Case for the param and unary interval generator provided\n * The Case will use use an interval comparator for matching results.\n * @param param the param to pass in\n * @param filter what interval filtering to apply\n * @param ops callbacks that implement generating an acceptance interval for an\n *            unary operation\n */\nfunction makeUnaryToF32IntervalCase(\n  param: number,\n  filter: IntervalFilter,\n  ...ops: PointToInterval[]\n): Case | undefined {\n  param = quantizeToF32(param);\n\n  const intervals = ops.map(o => o(param));\n  if (filter === 'f32-only' && intervals.some(i => !i.isFinite())) {\n    return undefined;\n  }\n  return { input: [f32(param)], expected: anyOf(...intervals) };\n}\n\n/**\n * @returns an array of Cases for operations over a range of inputs\n * @param params array of inputs to try\n * @param filter what interval filtering to apply\n * @param ops callbacks that implement generating an acceptance interval for an\n *            unary operation\n */\nexport function generateUnaryToF32IntervalCases(\n  params: number[],\n  filter: IntervalFilter,\n  ...ops: PointToInterval[]\n): Case[] {\n  return params.reduce((cases, e) => {\n    const c = makeUnaryToF32IntervalCase(e, filter, ...ops);\n    if (c !== undefined) {\n      cases.push(c);\n    }\n    return cases;\n  }, new Array<Case>());\n}\n\n/**\n * @returns a Case for the params and binary interval generator provided\n * The Case will use use an interval comparator for matching results.\n * @param param0 the first param or left hand side to pass in\n * @param param1 the second param or rhs hand side to pass in\n * @param filter what interval filtering to apply\n * @param ops callbacks that implement generating an acceptance interval for a\n *            binary operation\n */\nfunction makeBinaryToF32IntervalCase(\n  param0: number,\n  param1: number,\n  filter: IntervalFilter,\n  ...ops: BinaryToInterval[]\n): Case | undefined {\n  param0 = quantizeToF32(param0);\n  param1 = quantizeToF32(param1);\n\n  const intervals = ops.map(o => o(param0, param1));\n  if (filter === 'f32-only' && intervals.some(i => !i.isFinite())) {\n    return undefined;\n  }\n  return { input: [f32(param0), f32(param1)], expected: anyOf(...intervals) };\n}\n\n/**\n * @returns an array of Cases for operations over a range of inputs\n * @param param0s array of inputs to try for the first param\n * @param param1s array of inputs to try for the second param\n * @param filter what interval filtering to apply\n * @param ops callbacks that implement generating an acceptance interval for a\n *            binary operation\n */\nexport function generateBinaryToF32IntervalCases(\n  param0s: number[],\n  param1s: number[],\n  filter: IntervalFilter,\n  ...ops: BinaryToInterval[]\n): Case[] {\n  return cartesianProduct(param0s, param1s).reduce((cases, e) => {\n    const c = makeBinaryToF32IntervalCase(e[0], e[1], filter, ...ops);\n    if (c !== undefined) {\n      cases.push(c);\n    }\n    return cases;\n  }, new Array<Case>());\n}\n\n/**\n * @returns a Case for the params and ternary interval generator provided\n * The Case will use use an interval comparator for matching results.\n * @param param0 the first param to pass in\n * @param param1 the second param to pass in\n * @param param2 the third param to pass in\n * @param filter what interval filtering to apply\n * @param ops callbacks that implement generating an acceptance interval for a\n *            ternary operation.\n */\nfunction makeTernaryToF32IntervalCase(\n  param0: number,\n  param1: number,\n  param2: number,\n  filter: IntervalFilter,\n  ...ops: TernaryToInterval[]\n): Case | undefined {\n  param0 = quantizeToF32(param0);\n  param1 = quantizeToF32(param1);\n  param2 = quantizeToF32(param2);\n\n  const intervals = ops.map(o => o(param0, param1, param2));\n  if (filter === 'f32-only' && intervals.some(i => !i.isFinite())) {\n    return undefined;\n  }\n  return {\n    input: [f32(param0), f32(param1), f32(param2)],\n    expected: anyOf(...intervals),\n  };\n}\n\n/**\n * @returns an array of Cases for operations over a range of inputs\n * @param param0s array of inputs to try for the first param\n * @param param1s array of inputs to try for the second param\n * @param param2s array of inputs to try for the third param\n * @param filter what interval filtering to apply\n * @param ops callbacks that implement generating an acceptance interval for a\n *            ternary operation.\n */\nexport function generateTernaryToF32IntervalCases(\n  param0s: number[],\n  param1s: number[],\n  param2s: number[],\n  filter: IntervalFilter,\n  ...ops: TernaryToInterval[]\n): Case[] {\n  return cartesianProduct(param0s, param1s, param2s).reduce((cases, e) => {\n    const c = makeTernaryToF32IntervalCase(e[0], e[1], e[2], filter, ...ops);\n    if (c !== undefined) {\n      cases.push(c);\n    }\n    return cases;\n  }, new Array<Case>());\n}\n\n/**\n * @returns a Case for the param and vector interval generator provided\n * @param param the param to pass in\n * @param filter what interval filtering to apply\n * @param ops callbacks that implement generating an acceptance interval for a\n *            vector.\n */\nfunction makeVectorToF32IntervalCase(\n  param: number[],\n  filter: IntervalFilter,\n  ...ops: VectorToInterval[]\n): Case | undefined {\n  param = param.map(quantizeToF32);\n  const param_f32 = param.map(f32);\n\n  const intervals = ops.map(o => o(param));\n  if (filter === 'f32-only' && intervals.some(i => !i.isFinite())) {\n    return undefined;\n  }\n  return {\n    input: [new Vector(param_f32)],\n    expected: anyOf(...intervals),\n  };\n}\n\n/**\n * @returns an array of Cases for operations over a range of inputs\n * @param params array of inputs to try\n * @param filter what interval filtering to apply\n * @param ops callbacks that implement generating an acceptance interval for a\n *            vector.\n */\nexport function generateVectorToF32IntervalCases(\n  params: number[][],\n  filter: IntervalFilter,\n  ...ops: VectorToInterval[]\n): Case[] {\n  return params.reduce((cases, e) => {\n    const c = makeVectorToF32IntervalCase(e, filter, ...ops);\n    if (c !== undefined) {\n      cases.push(c);\n    }\n    return cases;\n  }, new Array<Case>());\n}\n\n/**\n * @returns a Case for the params and vector pair interval generator provided\n * @param param0 the first param to pass in\n * @param param1 the second param to pass in\n * @param filter what interval filtering to apply\n * @param ops callbacks that implement generating an acceptance interval for a\n *            pair of vectors.\n */\nfunction makeVectorPairToF32IntervalCase(\n  param0: number[],\n  param1: number[],\n  filter: IntervalFilter,\n  ...ops: VectorPairToInterval[]\n): Case | undefined {\n  param0 = param0.map(quantizeToF32);\n  param1 = param1.map(quantizeToF32);\n  const param0_f32 = param0.map(f32);\n  const param1_f32 = param1.map(f32);\n\n  const intervals = ops.map(o => o(param0, param1));\n  if (filter === 'f32-only' && intervals.some(i => !i.isFinite())) {\n    return undefined;\n  }\n  return {\n    input: [new Vector(param0_f32), new Vector(param1_f32)],\n    expected: anyOf(...intervals),\n  };\n}\n\n/**\n * @returns an array of Cases for operations over a range of inputs\n * @param param0s array of inputs to try for the first input\n * @param param1s array of inputs to try for the second input\n * @param filter what interval filtering to apply\n * @param ops callbacks that implement generating an acceptance interval for a\n *            pair of vectors.\n */\nexport function generateVectorPairToF32IntervalCases(\n  param0s: number[][],\n  param1s: number[][],\n  filter: IntervalFilter,\n  ...ops: VectorPairToInterval[]\n): Case[] {\n  return cartesianProduct(param0s, param1s).reduce((cases, e) => {\n    const c = makeVectorPairToF32IntervalCase(e[0], e[1], filter, ...ops);\n    if (c !== undefined) {\n      cases.push(c);\n    }\n    return cases;\n  }, new Array<Case>());\n}\n\n/**\n * @returns a Case for the param and vector of intervals generator provided\n * @param param the param to pass in\n * @param filter what interval filtering to apply\n * @param ops callbacks that implement generating an vector of acceptance\n *            intervals for a vector.\n */\nfunction makeVectorToVectorCase(\n  param: number[],\n  filter: IntervalFilter,\n  ...ops: VectorToVector[]\n): Case | undefined {\n  param = param.map(quantizeToF32);\n  const param_f32 = param.map(f32);\n\n  const vectors = ops.map(o => o(param));\n  if (filter === 'f32-only' && vectors.some(v => v.some(e => !e.isFinite()))) {\n    return undefined;\n  }\n  return {\n    input: [new Vector(param_f32)],\n    expected: anyOf(...vectors),\n  };\n}\n\n/**\n * @returns an array of Cases for operations over a range of inputs\n * @param params array of inputs to try\n * @param filter what interval filtering to apply\n * @param ops callbacks that implement generating an vector of acceptance\n *            intervals for a vector.\n */\nexport function generateVectorToVectorCases(\n  params: number[][],\n  filter: IntervalFilter,\n  ...ops: VectorToVector[]\n): Case[] {\n  return params.reduce((cases, e) => {\n    const c = makeVectorToVectorCase(e, filter, ...ops);\n    if (c !== undefined) {\n      cases.push(c);\n    }\n    return cases;\n  }, new Array<Case>());\n}\n\n/**\n * @returns a Case for the params and vector of intervals generator provided\n * @param param0 the first param to pass in\n * @param param1 the second param to pass in\n * @param filter what interval filtering to apply\n * @param ops callbacks that implement generating an vector of acceptance\n *            intervals for a pair of vectors.\n */\nfunction makeVectorPairToVectorCase(\n  param0: number[],\n  param1: number[],\n  filter: IntervalFilter,\n  ...ops: VectorPairToVector[]\n): Case | undefined {\n  param0 = param0.map(quantizeToF32);\n  param1 = param1.map(quantizeToF32);\n  const param0_f32 = param0.map(f32);\n  const param1_f32 = param1.map(f32);\n\n  const vectors = ops.map(o => o(param0, param1));\n  if (filter === 'f32-only' && vectors.some(v => v.some(e => !e.isFinite()))) {\n    return undefined;\n  }\n  return {\n    input: [new Vector(param0_f32), new Vector(param1_f32)],\n    expected: anyOf(...vectors),\n  };\n}\n\n/**\n * @returns an array of Cases for operations over a range of inputs\n * @param param0s array of inputs to try for the first input\n * @param param1s array of inputs to try for the second input\n * @param filter what interval filtering to apply\n * @param ops callbacks that implement generating an vector of acceptance\n *            intervals for a pair of vectors.\n */\nexport function generateVectorPairToVectorCases(\n  param0s: number[][],\n  param1s: number[][],\n  filter: IntervalFilter,\n  ...ops: VectorPairToVector[]\n): Case[] {\n  return cartesianProduct(param0s, param1s).reduce((cases, e) => {\n    const c = makeVectorPairToVectorCase(e[0], e[1], filter, ...ops);\n    if (c !== undefined) {\n      cases.push(c);\n    }\n    return cases;\n  }, new Array<Case>());\n}\n\n/**\n * @returns a Case for the param and an array of interval generators provided\n * @param param the param to pass in\n * @param filter what interval filtering to apply\n * @param ops callbacks that implement generating a matrix of acceptance\n *            intervals for a matrix.\n */\nfunction makeMatrixToMatrixCase(\n  param: number[][],\n  filter: IntervalFilter,\n  ...ops: MatrixToMatrix[]\n): Case | undefined {\n  param = map2DArray(param, quantizeToF32);\n  const param_f32 = map2DArray(param, f32);\n\n  const results = ops.map(o => o(param));\n  if (filter === 'f32-only' && results.some(m => m.some(c => c.some(r => !r.isFinite())))) {\n    return undefined;\n  }\n\n  return {\n    input: [new Matrix(param_f32)],\n    expected: anyOf(...results),\n  };\n}\n\n/**\n * @returns an array of Cases for operations over a range of inputs\n * @param params array of inputs to try\n * @param filter what interval filtering to apply\n * @param ops callbacks that implement generating a matrix of acceptance\n *            intervals for a matrix.\n */\nexport function generateMatrixToMatrixCases(\n  params: number[][][],\n  filter: IntervalFilter,\n  ...ops: MatrixToMatrix[]\n): Case[] {\n  return params.reduce((cases, e) => {\n    const c = makeMatrixToMatrixCase(e, filter, ...ops);\n    if (c !== undefined) {\n      cases.push(c);\n    }\n    return cases;\n  }, new Array<Case>());\n}\n\n/**\n * @returns a Case for the params and matrix of intervals generator provided\n * @param param0 the first param to pass in\n * @param param1 the second param to pass in\n * @param filter what interval filtering to apply\n * @param ops callbacks that implement generating an matrix of acceptance\n *            intervals for a pair of matrices.\n */\nfunction makeMatrixPairToMatrixCase(\n  param0: number[][],\n  param1: number[][],\n  filter: IntervalFilter,\n  ...ops: MatrixPairToMatrix[]\n): Case | undefined {\n  param0 = map2DArray(param0, quantizeToF32);\n  param1 = map2DArray(param1, quantizeToF32);\n  const param0_f32 = map2DArray(param0, f32);\n  const param1_f32 = map2DArray(param1, f32);\n\n  const results = ops.map(o => o(param0, param1));\n  if (filter === 'f32-only' && results.some(m => m.some(c => c.some(r => !r.isFinite())))) {\n    return undefined;\n  }\n  return {\n    input: [new Matrix(param0_f32), new Matrix(param1_f32)],\n    expected: anyOf(...results),\n  };\n}\n\n/**\n * @returns an array of Cases for operations over a range of inputs\n * @param param0s array of inputs to try for the first input\n * @param param1s array of inputs to try for the second input\n * @param filter what interval filtering to apply\n * @param ops callbacks that implement generating an matrix of acceptance\n *            intervals for a pair of matrices.\n */\nexport function generateMatrixPairToMatrixCases(\n  param0s: number[][][],\n  param1s: number[][][],\n  filter: IntervalFilter,\n  ...ops: MatrixPairToMatrix[]\n): Case[] {\n  return cartesianProduct(param0s, param1s).reduce((cases, e) => {\n    const c = makeMatrixPairToMatrixCase(e[0], e[1], filter, ...ops);\n    if (c !== undefined) {\n      cases.push(c);\n    }\n    return cases;\n  }, new Array<Case>());\n}\n\n/**\n * @returns a Case for the params and matrix of intervals generator provided\n * @param mat the matrix param to pass in\n * @param scalar the scalar to pass in\n * @param filter what interval filtering to apply\n * @param ops callbacks that implement generating an matrix of acceptance\n *            intervals for a pair of matrices.\n */\nfunction makeMatrixScalarToMatrixCase(\n  mat: number[][],\n  scalar: number,\n  filter: IntervalFilter,\n  ...ops: MatrixScalarToMatrix[]\n): Case | undefined {\n  mat = map2DArray(mat, quantizeToF32);\n  scalar = quantizeToF32(scalar);\n  const mat_f32 = map2DArray(mat, f32);\n  const scalar_f32 = f32(scalar);\n\n  const results = ops.map(o => o(mat, scalar));\n  if (filter === 'f32-only' && results.some(m => m.some(c => c.some(r => !r.isFinite())))) {\n    return undefined;\n  }\n  return {\n    input: [new Matrix(mat_f32), scalar_f32],\n    expected: anyOf(...results),\n  };\n}\n\n/**\n * @returns an array of Cases for operations over a range of inputs\n * @param mats array of inputs to try for the matrix input\n * @param scalars array of inputs to try for the scalar input\n * @param filter what interval filtering to apply\n * @param ops callbacks that implement generating an matrix of acceptance\n *            intervals for a pair of matrices.\n */\nexport function generateMatrixScalarToMatrixCases(\n  mats: number[][][],\n  scalars: number[],\n  filter: IntervalFilter,\n  ...ops: MatrixScalarToMatrix[]\n): Case[] {\n  // Cannot use cartesianProduct here, due to heterogeneous types\n  const cases: Case[] = [];\n  mats.forEach(mat => {\n    scalars.forEach(scalar => {\n      const c = makeMatrixScalarToMatrixCase(mat, scalar, filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n    });\n  });\n  return cases;\n}\n\n/**\n * @returns a Case for the params and matrix of intervals generator provided\n * @param mat the matrix param to pass in\n * @param scalar the scalar to pass in\n * @param filter what interval filtering to apply\n * @param ops callbacks that implement generating an matrix of acceptance\n *            intervals for a pair of matrices.\n */\nfunction makeScalarMatrixToMatrixCase(\n  scalar: number,\n  mat: number[][],\n  filter: IntervalFilter,\n  ...ops: ScalarMatrixToMatrix[]\n): Case | undefined {\n  mat = map2DArray(mat, quantizeToF32);\n  scalar = quantizeToF32(scalar);\n  const mat_f32 = map2DArray(mat, f32);\n  const scalar_f32 = f32(scalar);\n\n  const results = ops.map(o => o(scalar, mat));\n  if (filter === 'f32-only' && results.some(m => m.some(c => c.some(r => !r.isFinite())))) {\n    return undefined;\n  }\n  return {\n    input: [scalar_f32, new Matrix(mat_f32)],\n    expected: anyOf(...results),\n  };\n}\n\n/**\n * @returns an array of Cases for operations over a range of inputs\n * @param scalars array of inputs to try for the scalar input\n * @param mats array of inputs to try for the matrix input\n * @param filter what interval filtering to apply\n * @param ops callbacks that implement generating an matrix of acceptance\n *            intervals for a pair of matrices.\n */\nexport function generateScalarMatrixToMatrixCases(\n  scalars: number[],\n  mats: number[][][],\n  filter: IntervalFilter,\n  ...ops: ScalarMatrixToMatrix[]\n): Case[] {\n  // Cannot use cartesianProduct here, due to heterogeneous types\n  const cases: Case[] = [];\n  mats.forEach(mat => {\n    scalars.forEach(scalar => {\n      const c = makeScalarMatrixToMatrixCase(scalar, mat, filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n    });\n  });\n  return cases;\n}\n\n/**\n * @returns a Case for the params and the vector of intervals generator provided\n * @param mat the matrix param to pass in\n * @param vec the vector to pass in\n * @param filter what interval filtering to apply\n * @param ops callbacks that implement generating a vector of acceptance\n *            intervals for a matrix and a vector.\n */\nfunction makeMatrixVectorToVectorCase(\n  mat: number[][],\n  vec: number[],\n  filter: IntervalFilter,\n  ...ops: MatrixVectorToVector[]\n): Case | undefined {\n  mat = map2DArray(mat, quantizeToF32);\n  vec = vec.map(quantizeToF32);\n  const mat_f32 = map2DArray(mat, f32);\n  const vec_f32 = vec.map(f32);\n\n  const results = ops.map(o => o(mat, vec));\n  if (filter === 'f32-only' && results.some(v => v.some(e => !e.isFinite()))) {\n    return undefined;\n  }\n  return {\n    input: [new Matrix(mat_f32), new Vector(vec_f32)],\n    expected: anyOf(...results),\n  };\n}\n\n/**\n * @returns an array of Cases for operations over a range of inputs\n * @param mats array of inputs to try for the matrix input\n * @param vecs array of inputs to try for the vector input\n * @param filter what interval filtering to apply\n * @param ops callbacks that implement generating a vector of acceptance\n *            intervals for a matrix and a vector.\n */\nexport function generateMatrixVectorToVectorCases(\n  mats: number[][][],\n  vecs: number[][],\n  filter: IntervalFilter,\n  ...ops: MatrixVectorToVector[]\n): Case[] {\n  // Cannot use cartesianProduct here, due to heterogeneous types\n  const cases: Case[] = [];\n  mats.forEach(mat => {\n    vecs.forEach(vec => {\n      const c = makeMatrixVectorToVectorCase(mat, vec, filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n    });\n  });\n  return cases;\n}\n\n/**\n * @returns a Case for the params and the vector of intervals generator provided\n * @param vec the vector to pass in\n * @param mat the matrix param to pass in\n * @param filter what interval filtering to apply\n * @param ops callbacks that implement generating a vector of acceptance\n *            intervals for a vector and a matrix.\n */\nfunction makeVectorMatrixToVectorCase(\n  vec: number[],\n  mat: number[][],\n  filter: IntervalFilter,\n  ...ops: VectorMatrixToVector[]\n): Case | undefined {\n  vec = vec.map(quantizeToF32);\n  mat = map2DArray(mat, quantizeToF32);\n  const vec_f32 = vec.map(f32);\n  const mat_f32 = map2DArray(mat, f32);\n\n  const results = ops.map(o => o(vec, mat));\n  if (filter === 'f32-only' && results.some(v => v.some(e => !e.isFinite()))) {\n    return undefined;\n  }\n  return {\n    input: [new Vector(vec_f32), new Matrix(mat_f32)],\n    expected: anyOf(...results),\n  };\n}\n\n/**\n * @returns an array of Cases for operations over a range of inputs\n * @param vecs array of inputs to try for the vector input\n * @param mats array of inputs to try for the matrix input\n * @param filter what interval filtering to apply\n * @param ops callbacks that implement generating a vector of acceptance\n *            intervals for a vector and a matrix.\n */\nexport function generateVectorMatrixToVectorCases(\n  vecs: number[][],\n  mats: number[][][],\n  filter: IntervalFilter,\n  ...ops: VectorMatrixToVector[]\n): Case[] {\n  // Cannot use cartesianProduct here, due to heterogeneous types\n  const cases: Case[] = [];\n  vecs.forEach(vec => {\n    mats.forEach(mat => {\n      const c = makeVectorMatrixToVectorCase(vec, mat, filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n    });\n  });\n  return cases;\n}\n\n/**\n * @returns a Case for the param and vector of intervals generator provided\n * The input is treated as an unsigned int.\n * @param param the param to pass in\n * @param filter what interval filtering to apply\n * @param ops callbacks that implement generating an acceptance\n *            interval for an unsigned int.\n */\nfunction makeU32ToVectorCase(\n  param: number,\n  filter: IntervalFilter,\n  ...ops: PointToVector[]\n): Case | undefined {\n  param = Math.trunc(param);\n  const param_u32 = u32(param);\n\n  const vectors = ops.map(o => o(param));\n  if (filter === 'f32-only' && vectors.some(v => !v.every(e => e.isFinite()))) {\n    return undefined;\n  }\n  return {\n    input: param_u32,\n    expected: anyOf(...vectors),\n  };\n}\n\n/**\n * @returns an array of Cases for operations over a range of inputs\n * The input is treated as an unsigned int.\n * @param params array of inputs to try\n * @param filter what interval filtering to apply\n * @param ops callbacks that implement generating an acceptance\n *            interval for an unsigned int.\n */\nexport function generateU32ToVectorCases(\n  params: number[],\n  filter: IntervalFilter,\n  ...ops: PointToVector[]\n): Case[] {\n  return params.reduce((cases, e) => {\n    const c = makeU32ToVectorCase(e, filter, ...ops);\n    if (c !== undefined) {\n      cases.push(c);\n    }\n    return cases;\n  }, new Array<Case>());\n}\n\n/**\n * A function that performs a binary operation on x and y, and returns the expected\n * result.\n */\nexport interface BinaryOp {\n  (x: number, y: number): number | undefined;\n}\n\n/**\n * @returns an array of Cases for operations over a range of inputs\n * @param param0s array of inputs to try for the first param\n * @param param1s array of inputs to try for the second param\n * @param op callback called on each pair of inputs to produce each case\n */\nexport function generateBinaryToI32Cases(params0s: number[], params1s: number[], op: BinaryOp) {\n  return cartesianProduct(params0s, params1s).reduce((cases, e) => {\n    const expected = op(e[0], e[1]);\n    if (expected !== undefined) {\n      cases.push({ input: [i32(e[0]), i32(e[1])], expected: i32(expected) });\n    }\n    return cases;\n  }, new Array<Case>());\n}\n\n/**\n * @returns an array of Cases for operations over a range of inputs\n * @param param0s array of inputs to try for the first param\n * @param param1s array of inputs to try for the second param\n * @param op callback called on each pair of inputs to produce each case\n */\nexport function generateBinaryToU32Cases(params0s: number[], params1s: number[], op: BinaryOp) {\n  return cartesianProduct(params0s, params1s).reduce((cases, e) => {\n    const expected = op(e[0], e[1]);\n    if (expected !== undefined) {\n      cases.push({ input: [u32(e[0]), u32(e[1])], expected: u32(expected) });\n    }\n    return cases;\n  }, new Array<Case>());\n}\n\n/**\n * @returns a Case for the input params with op applied\n * @param scalar scalar param\n * @param vector vector param (2, 3, or 4 elements)\n * @param op the op to apply to scalar and vector\n * @param quantize function to quantize all values in vectors and scalars\n * @param scalarize function to convert numbers to Scalars\n */\nfunction makeScalarVectorBinaryToVectorCase(\n  scalar: number,\n  vector: number[],\n  op: BinaryOp,\n  quantize: QuantizeFunc,\n  scalarize: ScalarBuilder\n): Case | undefined {\n  scalar = quantize(scalar);\n  vector = vector.map(quantize);\n  const result = vector.map(v => op(scalar, v));\n  if (result.includes(undefined)) {\n    return undefined;\n  }\n  return {\n    input: [scalarize(scalar), new Vector(vector.map(scalarize))],\n    expected: new Vector((result as number[]).map(scalarize)),\n  };\n}\n\n/**\n * @returns array of Case for the input params with op applied\n * @param scalars array of scalar params\n * @param vectors array of vector params (2, 3, or 4 elements)\n * @param op the op to apply to each pair of scalar and vector\n * @param quantize function to quantize all values in vectors and scalars\n * @param scalarize function to convert numbers to Scalars\n */\nfunction generateScalarVectorBinaryToVectorCases(\n  scalars: number[],\n  vectors: number[][],\n  op: BinaryOp,\n  quantize: QuantizeFunc,\n  scalarize: ScalarBuilder\n): Case[] {\n  const cases = new Array<Case>();\n  scalars.forEach(s => {\n    vectors.forEach(v => {\n      const c = makeScalarVectorBinaryToVectorCase(s, v, op, quantize, scalarize);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n    });\n  });\n  return cases;\n}\n\n/**\n * @returns a Case for the input params with op applied\n * @param vector vector param (2, 3, or 4 elements)\n * @param scalar scalar param\n * @param op the op to apply to vector and scalar\n * @param quantize function to quantize all values in vectors and scalars\n * @param scalarize function to convert numbers to Scalars\n */\nfunction makeVectorScalarBinaryToVectorCase(\n  vector: number[],\n  scalar: number,\n  op: BinaryOp,\n  quantize: QuantizeFunc,\n  scalarize: ScalarBuilder\n): Case | undefined {\n  vector = vector.map(quantize);\n  scalar = quantize(scalar);\n  const result = vector.map(v => op(v, scalar));\n  if (result.includes(undefined)) {\n    return undefined;\n  }\n  return {\n    input: [new Vector(vector.map(scalarize)), scalarize(scalar)],\n    expected: new Vector((result as number[]).map(scalarize)),\n  };\n}\n\n/**\n * @returns array of Case for the input params with op applied\n * @param vectors array of vector params (2, 3, or 4 elements)\n * @param scalars array of scalar params\n * @param op the op to apply to each pair of vector and scalar\n * @param quantize function to quantize all values in vectors and scalars\n * @param scalarize function to convert numbers to Scalars\n */\nfunction generateVectorScalarBinaryToVectorCases(\n  vectors: number[][],\n  scalars: number[],\n  op: BinaryOp,\n  quantize: QuantizeFunc,\n  scalarize: ScalarBuilder\n): Case[] {\n  const cases = new Array<Case>();\n  scalars.forEach(s => {\n    vectors.forEach(v => {\n      const c = makeVectorScalarBinaryToVectorCase(v, s, op, quantize, scalarize);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n    });\n  });\n  return cases;\n}\n\n/**\n * @returns array of Case for the input params with op applied\n * @param scalars array of scalar params\n * @param vectors array of vector params (2, 3, or 4 elements)\n * @param op he op to apply to each pair of scalar and vector\n */\nexport function generateU32VectorBinaryToVectorCases(\n  scalars: number[],\n  vectors: number[][],\n  op: BinaryOp\n): Case[] {\n  return generateScalarVectorBinaryToVectorCases(scalars, vectors, op, quantizeToU32, u32);\n}\n\n/**\n * @returns array of Case for the input params with op applied\n * @param vectors array of vector params (2, 3, or 4 elements)\n * @param scalars array of scalar params\n * @param op he op to apply to each pair of vector and scalar\n */\nexport function generateVectorU32BinaryToVectorCases(\n  vectors: number[][],\n  scalars: number[],\n  op: BinaryOp\n): Case[] {\n  return generateVectorScalarBinaryToVectorCases(vectors, scalars, op, quantizeToU32, u32);\n}\n\n/**\n * @returns array of Case for the input params with op applied\n * @param scalars array of scalar params\n * @param vectors array of vector params (2, 3, or 4 elements)\n * @param op he op to apply to each pair of scalar and vector\n */\nexport function generateI32VectorBinaryToVectorCases(\n  scalars: number[],\n  vectors: number[][],\n  op: BinaryOp\n): Case[] {\n  return generateScalarVectorBinaryToVectorCases(scalars, vectors, op, quantizeToI32, i32);\n}\n\n/**\n * @returns array of Case for the input params with op applied\n * @param vectors array of vector params (2, 3, or 4 elements)\n * @param scalars array of scalar params\n * @param op he op to apply to each pair of vector and scalar\n */\nexport function generateVectorI32BinaryToVectorCases(\n  vectors: number[][],\n  scalars: number[],\n  op: BinaryOp\n): Case[] {\n  return generateVectorScalarBinaryToVectorCases(vectors, scalars, op, quantizeToI32, i32);\n}\n"],"mappings":"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"}