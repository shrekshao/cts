{"version":3,"file":"case_cache.js","names":["dataCache","deserializeComparator","Scalar","Vector","serializeValue","deserializeValue","deserializeF32Interval","F32Interval","serializeF32Interval","serializeExpectation","e","kind","value","Array","map","i","Function","comp","undefined","data","deserializeExpectation","serializeCase","c","input","v","expected","deserializeCase","CaseCache","constructor","name","builders","path","get","fetch","build","built","cases","Promise","resolve","serialize","serialized","JSON","stringify","deserialize","parse","casesByName","caseData","makeCaseCache"],"sources":["../../../../../src/webgpu/shader/execution/expression/case_cache.ts"],"sourcesContent":["import { Cacheable, dataCache } from '../../../../common/framework/data_cache.js';\nimport { SerializedComparator, deserializeComparator } from '../../../util/compare.js';\nimport {\n  Scalar,\n  Vector,\n  serializeValue,\n  SerializedValue,\n  deserializeValue,\n} from '../../../util/conversion.js';\nimport {\n  deserializeF32Interval,\n  F32Interval,\n  SerializedF32Interval,\n  serializeF32Interval,\n} from '../../../util/f32_interval.js';\n\nimport { Case, CaseList, Expectation } from './expression.js';\n\n/**\n * SerializedExpectationValue holds the serialized form of an Expectation when\n * the Expectation is a Value\n * This form can be safely encoded to JSON.\n */\ntype SerializedExpectationValue = {\n  kind: 'value';\n  value: SerializedValue;\n};\n\n/**\n * SerializedExpectationValue holds the serialized form of an Expectation when\n * the Expectation is an Interval\n * This form can be safely encoded to JSON.\n */\ntype SerializedExpectationInterval = {\n  kind: 'interval';\n  value: SerializedF32Interval;\n};\n\n/**\n * SerializedExpectationValue holds the serialized form of an Expectation when\n * the Expectation is a list of Intervals\n * This form can be safely encoded to JSON.\n */\ntype SerializedExpectationIntervals = {\n  kind: 'intervals';\n  value: SerializedF32Interval[];\n};\n\n/**\n * SerializedExpectationValue holds the serialized form of an Expectation when\n * the Expectation is a Comparator\n * This form can be safely encoded to JSON.\n */\ntype SerializedExpectationComparator = {\n  kind: 'comparator';\n  value: SerializedComparator;\n};\n\n/**\n * SerializedExpectation holds the serialized form of an Expectation.\n * This form can be safely encoded to JSON.\n */\nexport type SerializedExpectation =\n  | SerializedExpectationValue\n  | SerializedExpectationInterval\n  | SerializedExpectationIntervals\n  | SerializedExpectationComparator;\n\n/** serializeExpectation() converts an Expectation to a SerializedExpectation */\nexport function serializeExpectation(e: Expectation): SerializedExpectation {\n  if (e instanceof Scalar || e instanceof Vector) {\n    return { kind: 'value', value: serializeValue(e) };\n  }\n  if (e instanceof F32Interval) {\n    return { kind: 'interval', value: serializeF32Interval(e) };\n  }\n  if (e instanceof Array) {\n    return { kind: 'intervals', value: e.map(i => serializeF32Interval(i)) };\n  }\n  if (e instanceof Function) {\n    const comp = (e as unknown) as SerializedComparator;\n    if (comp.kind !== undefined && comp.data !== undefined) {\n      return { kind: 'comparator', value: { kind: comp.kind, data: comp.data } };\n    }\n    throw 'cannot serialize comparator';\n  }\n  throw 'cannot serialize expectation';\n}\n\n/** deserializeExpectation() converts a SerializedExpectation to a Expectation */\nexport function deserializeExpectation(data: SerializedExpectation): Expectation {\n  switch (data.kind) {\n    case 'value':\n      return deserializeValue(data.value);\n    case 'interval':\n      return deserializeF32Interval(data.value);\n    case 'intervals':\n      return data.value.map(i => deserializeF32Interval(i));\n    case 'comparator':\n      return deserializeComparator(data.value);\n  }\n}\n\n/**\n * SerializedCase holds the serialized form of a Case.\n * This form can be safely encoded to JSON.\n */\nexport type SerializedCase = {\n  input: SerializedValue | SerializedValue[];\n  expected: SerializedExpectation;\n};\n\n/** serializeCase() converts an Case to a SerializedCase */\nexport function serializeCase(c: Case): SerializedCase {\n  return {\n    input: c.input instanceof Array ? c.input.map(v => serializeValue(v)) : serializeValue(c.input),\n    expected: serializeExpectation(c.expected),\n  };\n}\n\n/** serializeCase() converts an SerializedCase to a Case */\nexport function deserializeCase(data: SerializedCase): Case {\n  return {\n    input:\n      data.input instanceof Array\n        ? data.input.map(v => deserializeValue(v))\n        : deserializeValue(data.input),\n    expected: deserializeExpectation(data.expected),\n  };\n}\n\n/** CaseListBuilder is a function that builds a CaseList */\nexport type CaseListBuilder = () => CaseList;\n\n/**\n * CaseCache is a cache of CaseList.\n * CaseCache implements the Cacheable interface, so the cases can be pre-built\n * and stored in the data cache, reducing computation costs at CTS runtime.\n */\nexport class CaseCache implements Cacheable<Record<string, CaseList>> {\n  /**\n   * Constructor\n   * @param name the name of the cache. This must be globally unique.\n   * @param builders a Record of case-list name to case-list builder.\n   */\n  constructor(name: string, builders: Record<string, CaseListBuilder>) {\n    this.path = `webgpu/shader/execution/case-cache/${name}.json`;\n    this.builders = builders;\n  }\n\n  /** get() returns the list of cases with the given name */\n  public async get(name: string): Promise<CaseList> {\n    const data = await dataCache.fetch(this);\n    return data[name];\n  }\n\n  /**\n   * build() implements the Cacheable.build interface.\n   * @returns the data.\n   */\n  build(): Promise<Record<string, CaseList>> {\n    const built: Record<string, CaseList> = {};\n    for (const name in this.builders) {\n      const cases = this.builders[name]();\n      built[name] = cases;\n    }\n    return Promise.resolve(built);\n  }\n\n  /**\n   * serialize() implements the Cacheable.serialize interface.\n   * @returns the serialized data.\n   */\n  serialize(data: Record<string, CaseList>): string {\n    const serialized: Record<string, SerializedCase[]> = {};\n    for (const name in data) {\n      serialized[name] = data[name].map(c => serializeCase(c));\n    }\n    return JSON.stringify(serialized);\n  }\n\n  /**\n   * deserialize() implements the Cacheable.deserialize interface.\n   * @returns the deserialize data.\n   */\n  deserialize(serialized: string): Record<string, CaseList> {\n    const data = JSON.parse(serialized) as Record<string, SerializedCase[]>;\n    const casesByName: Record<string, CaseList> = {};\n    for (const name in data) {\n      const cases = data[name].map(caseData => deserializeCase(caseData));\n      casesByName[name] = cases;\n    }\n    return casesByName;\n  }\n\n  public readonly path: string;\n  private readonly builders: Record<string, CaseListBuilder>;\n}\n\nexport function makeCaseCache(name: string, builders: Record<string, CaseListBuilder>): CaseCache {\n  return new CaseCache(name, builders);\n}\n"],"mappings":"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"}