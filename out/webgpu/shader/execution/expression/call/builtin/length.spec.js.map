{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/length.spec.ts"],"names":["description","makeTestGroup","GPUTest","TypeF32","TypeVec","lengthInterval","fullF32Range","kVectorTestValues","allInputSources","makeUnaryToF32IntervalCase","makeVectorToF32IntervalCase","run","builtin","g","makeCaseVecF32","x","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","makeCase","cases","map"],"mappings":"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","sourcesContent":["export const description = `\nExecution tests for the 'length' builtin function\n\nS is AbstractFloat, f32, f16\nT is S or vecN<S>\n@const fn length(e: T ) -> f32\nReturns the length of e (e.g. abs(e) if T is a scalar, or sqrt(e[0]^2 + e[1]^2 + ...) if T is a vector).\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { TypeF32, TypeVec } from '../../../../../util/conversion.js';\nimport { lengthInterval } from '../../../../../util/f32_interval.js';\nimport { fullF32Range, kVectorTestValues } from '../../../../../util/math.js';\nimport {\n  allInputSources,\n  Case,\n  makeUnaryToF32IntervalCase,\n  makeVectorToF32IntervalCase,\n  run,\n} from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n/** @returns a `length` Case for a vector of f32s input */\nconst makeCaseVecF32 = (x: number[]): Case => {\n  return makeVectorToF32IntervalCase(x, lengthInterval);\n};\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`f32 tests`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const makeCase = (x: number): Case => {\n      return makeUnaryToF32IntervalCase(x, lengthInterval);\n    };\n    const cases: Case[] = fullF32Range().map(makeCase);\n\n    await run(t, builtin('length'), [TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('f32_vec2')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`f32 tests using vec2s`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases: Case[] = kVectorTestValues[2].map(makeCaseVecF32);\n\n    await run(t, builtin('length'), [TypeVec(2, TypeF32)], TypeF32, t.params, cases);\n  });\n\ng.test('f32_vec3')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`f32 tests using vec3s`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases: Case[] = kVectorTestValues[3].map(makeCaseVecF32);\n\n    await run(t, builtin('length'), [TypeVec(3, TypeF32)], TypeF32, t.params, cases);\n  });\n\ng.test('f32_vec4')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`f32 tests using vec4s`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases: Case[] = kVectorTestValues[4].map(makeCaseVecF32);\n\n    await run(t, builtin('length'), [TypeVec(4, TypeF32)], TypeF32, t.params, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"file":"length.spec.js"}