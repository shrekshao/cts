{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/utils.ts"],"names":["generateCoordBoundaries","numDimensions","ret","Error","name","i","j","k","push","generateOffsets","undefined","val","v"],"mappings":";AAAA;AACA,G,CADA;AACA;AACA;AACA;AACA;AACA,GACA,OAAO,SAASA,uBAAT,CAAiCC,aAAjC,EAAwD,CAC7D,MAAMC,GAAG,GAAG,CAAC,WAAD,CAAZ;;AAEA,MAAID,aAAa,GAAG,CAAhB,IAAqBA,aAAa,GAAG,CAAzC,EAA4C;AAC1C,UAAM,IAAIE,KAAJ,CAAW,0BAAyBF,aAAc,EAAlD,CAAN;AACD;;AAED,QAAMG,IAAI,GAAG,KAAb;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,aAApB,EAAmC,EAAEI,CAArC,EAAwC;AACtC,SAAK,MAAMC,CAAX,IAAgB,CAAC,KAAD,EAAQ,KAAR,CAAhB,EAAgC;AAC9B,WAAK,MAAMC,CAAX,IAAgB,CAAC,MAAD,EAAS,UAAT,CAAhB,EAAsC;AACpCL,QAAAA,GAAG,CAACM,IAAJ,CAAU,GAAEJ,IAAI,CAACC,CAAD,CAAI,IAAGC,CAAE,IAAGC,CAAE,EAA9B;AACD;AACF;AACF;;AAED,SAAOL,GAAP;AACD;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASO,eAAT,CAAyBR,aAAzB,EAAgD;AACrD,MAAIA,aAAa,GAAG,CAAhB,IAAqBA,aAAa,GAAG,CAAzC,EAA4C;AAC1C,UAAM,IAAIE,KAAJ,CAAW,2CAA0CF,aAAc,EAAnE,CAAN;AACD;AACD,QAAMC,GAAqC,GAAG,CAACQ,SAAD,CAA9C;AACA,OAAK,MAAMC,GAAX,IAAkB,CAAC,CAAC,CAAF,EAAK,CAAC,CAAN,EAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAAlB,EAAwC;AACtC,UAAMC,CAAC,GAAG,EAAV;AACA,SAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,aAApB,EAAmC,EAAEI,CAArC,EAAwC;AACtCO,MAAAA,CAAC,CAACJ,IAAF,CAAOG,GAAP;AACD;AACDT,IAAAA,GAAG,CAACM,IAAJ,CAASI,CAAT;AACD;AACD,SAAOV,GAAP;AACD","sourcesContent":["/**\n * Generates the boundary entries for the given number of dimensions\n *\n * @param numDimensions: The number of dimensions to generate for\n * @returns an array of generated coord boundaries\n */\nexport function generateCoordBoundaries(numDimensions: number) {\n  const ret = ['in-bounds'];\n\n  if (numDimensions < 1 || numDimensions > 3) {\n    throw new Error(`invalid numDimensions: ${numDimensions}`);\n  }\n\n  const name = 'xyz';\n  for (let i = 0; i < numDimensions; ++i) {\n    for (const j of ['min', 'max']) {\n      for (const k of ['wrap', 'boundary']) {\n        ret.push(`${name[i]}-${j}-${k}`);\n      }\n    }\n  }\n\n  return ret;\n}\n\n/**\n * Generates a set of offset values to attempt in the range [-9, 8].\n *\n * @param numDimensions: The number of dimensions to generate for\n * @return an array of generated offset values\n */\nexport function generateOffsets(numDimensions: number) {\n  if (numDimensions < 2 || numDimensions > 3) {\n    throw new Error(`generateOffsets: invalid numDimensions: ${numDimensions}`);\n  }\n  const ret: Array<undefined | Array<number>> = [undefined];\n  for (const val of [-9, -8, 0, 1, 7, 8]) {\n    const v = [];\n    for (let i = 0; i < numDimensions; ++i) {\n      v.push(val);\n    }\n    ret.push(v);\n  }\n  return ret;\n}\n"],"file":"utils.js"}