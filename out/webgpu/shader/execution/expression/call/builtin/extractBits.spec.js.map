{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/extractBits.spec.ts"],"names":["description","makeTestGroup","GPUTest","i32Bits","TypeI32","u32","TypeU32","u32Bits","vec2","vec3","vec4","TypeVec","run","builtin","g","test","specURL","desc","params","u","combine","fn","t","cfg","T","width","V","x","y","z","w","undefined","all_1","all_0","low_1","high_1","pattern","input","expected"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAFO,CAIP,SAASC,aAAT,QAA8B,kDAA9B;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA;AACEC,OADF;AAEEC,OAFF;AAGEC,GAHF;AAIEC,OAJF;AAKEC,OALF;AAMEC,IANF;AAOEC,IAPF;AAQEC,IARF;AASEC,OATF;AAUO,mCAVP;AAWA,SAAiBC,GAAjB,QAA4B,qBAA5B;;AAEA,SAASC,OAAT,QAAwB,cAAxB;;AAEA,OAAO,MAAMC,CAAC,GAAGb,aAAa,CAACC,OAAD,CAAvB;;AAEPY,CAAC,CAACC,IAAF,CAAO,KAAP;AACGC,OADH,CACW,uDADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CApBA;;AAsBGC,MAtBH,CAsBU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,cADX,EAC2B,CAAC,SAAD,EAAY,WAAZ,EAAyB,YAAzB,CAD3B;AAEGA,OAFH,CAEW,OAFX,EAEoB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAFpB,CAvBJ;;AA2BGC,EA3BH,CA2BM,OAAMC,CAAN,KAAW;AACb,QAAMC,GAAW,GAAGD,CAAC,CAACJ,MAAtB;;AAEA,QAAMM,CAAC,GAAGF,CAAC,CAACJ,MAAF,CAASO,KAAT,KAAmB,CAAnB,GAAuBnB,OAAvB,GAAiCK,OAAO,CAACW,CAAC,CAACJ,MAAF,CAASO,KAAV,EAAiBnB,OAAjB,CAAlD;;AAEA,QAAMoB,CAAC,GAAG,CAACC,CAAD,EAAYC,CAAZ,EAAwBC,CAAxB,EAAoCC,CAApC,KAAmD;AAC3DF,IAAAA,CAAC,GAAGA,CAAC,KAAKG,SAAN,GAAkBJ,CAAlB,GAAsBC,CAA1B;AACAC,IAAAA,CAAC,GAAGA,CAAC,KAAKE,SAAN,GAAkBJ,CAAlB,GAAsBE,CAA1B;AACAC,IAAAA,CAAC,GAAGA,CAAC,KAAKC,SAAN,GAAkBJ,CAAlB,GAAsBG,CAA1B;;AAEA,YAAQR,CAAC,CAACJ,MAAF,CAASO,KAAjB;AACE,WAAK,CAAL;AACE,eAAOlB,OAAO,CAACoB,CAAD,CAAd;AACF,WAAK,CAAL;AACE,eAAOnB,IAAI,CAACD,OAAO,CAACoB,CAAD,CAAR,EAAapB,OAAO,CAACqB,CAAD,CAApB,CAAX;AACF,WAAK,CAAL;AACE,eAAOnB,IAAI,CAACF,OAAO,CAACoB,CAAD,CAAR,EAAapB,OAAO,CAACqB,CAAD,CAApB,EAAyBrB,OAAO,CAACsB,CAAD,CAAhC,CAAX;AACF;AACE,eAAOnB,IAAI,CAACH,OAAO,CAACoB,CAAD,CAAR,EAAapB,OAAO,CAACqB,CAAD,CAApB,EAAyBrB,OAAO,CAACsB,CAAD,CAAhC,EAAqCtB,OAAO,CAACuB,CAAD,CAA5C,CAAX,CARJ;;AAUD,GAfD;;AAiBA,QAAME,KAAK,GAAGN,CAAC,CAAC,kCAAD,CAAf;AACA,QAAMO,KAAK,GAAGP,CAAC,CAAC,kCAAD,CAAf;AACA,QAAMQ,KAAK,GAAGR,CAAC,CAAC,kCAAD,CAAf;AACA,QAAMS,MAAM,GAAGT,CAAC,CAAC,kCAAD,CAAhB;AACA,QAAMU,OAAO,GAAGV,CAAC;AACf,oCADe;AAEf,oCAFe;AAGf,oCAHe;AAIf,oCAJe,CAAjB;;;AAOAd,EAAAA,GAAG,CAACU,CAAD,EAAIT,OAAO,CAAC,aAAD,CAAX,EAA4B,CAACW,CAAD,EAAIlB,OAAJ,EAAaA,OAAb,CAA5B,EAAmDkB,CAAnD,EAAsDD,GAAtD,EAA2D;AAC5D,IAAEc,KAAK,EAAE,CAACJ,KAAD,EAAQ5B,GAAG,CAAC,CAAD,CAAX,EAAgBA,GAAG,CAAC,EAAD,CAAnB,CAAT,EAAmCiC,QAAQ,EAAEL,KAA7C,EAD4D;AAE5D,IAAEI,KAAK,EAAE,CAACJ,KAAD,EAAQ5B,GAAG,CAAC,CAAD,CAAX,EAAgBA,GAAG,CAAC,EAAD,CAAnB,CAAT,EAAmCiC,QAAQ,EAAEL,KAA7C,EAF4D;AAG5D,IAAEI,KAAK,EAAE,CAACJ,KAAD,EAAQ5B,GAAG,CAAC,CAAD,CAAX,EAAgBA,GAAG,CAAC,CAAD,CAAnB,CAAT,EAAkCiC,QAAQ,EAAEL,KAA5C,EAH4D;AAI5D,IAAEI,KAAK,EAAE,CAACJ,KAAD,EAAQ5B,GAAG,CAAC,CAAD,CAAX,EAAgBA,GAAG,CAAC,CAAD,CAAnB,CAAT,EAAkCiC,QAAQ,EAAEL,KAA5C,EAJ4D;AAK5D,IAAEI,KAAK,EAAE,CAACJ,KAAD,EAAQ5B,GAAG,CAAC,EAAD,CAAX,EAAiBA,GAAG,CAAC,CAAD,CAApB,CAAT,EAAmCiC,QAAQ,EAAEL,KAA7C,EAL4D;;AAO5D,IAAEI,KAAK,EAAE,CAACL,KAAD,EAAQ3B,GAAG,CAAC,CAAD,CAAX,EAAgBA,GAAG,CAAC,EAAD,CAAnB,CAAT,EAAmCiC,QAAQ,EAAEN,KAA7C,EAP4D;AAQ5D;AACEK,IAAAA,KAAK,EAAE,CAACL,KAAD,EAAQ3B,GAAG,CAAC,CAAD,CAAX,EAAgBA,GAAG,CAAC,EAAD,CAAnB,CADT;AAEEiC,IAAAA,QAAQ,EAAEZ,CAAC,CAAC,kCAAD,CAFb,EAR4D;;AAY5D;AACEW,IAAAA,KAAK,EAAE,CAACL,KAAD,EAAQ3B,GAAG,CAAC,CAAD,CAAX,EAAgBA,GAAG,CAAC,CAAD,CAAnB,CADT;AAEEiC,IAAAA,QAAQ,EAAEZ,CAAC,CAAC,kCAAD,CAFb,EAZ4D;;AAgB5D,IAAEW,KAAK,EAAE,CAACL,KAAD,EAAQ3B,GAAG,CAAC,CAAD,CAAX,EAAgBA,GAAG,CAAC,CAAD,CAAnB,CAAT,EAAkCiC,QAAQ,EAAEJ,KAA5C,EAhB4D;AAiB5D,IAAEG,KAAK,EAAE,CAACL,KAAD,EAAQ3B,GAAG,CAAC,EAAD,CAAX,EAAiBA,GAAG,CAAC,CAAD,CAApB,CAAT,EAAmCiC,QAAQ,EAAEJ,KAA7C,EAjB4D;;AAmB5D;AACA,IAAEG,KAAK,EAAE,CAACD,OAAD,EAAU/B,GAAG,CAAC,CAAD,CAAb,EAAkBA,GAAG,CAAC,EAAD,CAArB,CAAT,EAAqCiC,QAAQ,EAAEF,OAA/C,EApB4D;AAqB5D;AACEC,IAAAA,KAAK,EAAE,CAACD,OAAD,EAAU/B,GAAG,CAAC,CAAD,CAAb,EAAkBA,GAAG,CAAC,EAAD,CAArB,CADT;AAEEiC,IAAAA,QAAQ,EAAEZ,CAAC;AACT,sCADS;AAET,sCAFS;AAGT,sCAHS;AAIT,sCAJS,CAFb,EArB4D;;;AA8B5D;AACEW,IAAAA,KAAK,EAAE,CAACD,OAAD,EAAU/B,GAAG,CAAC,EAAD,CAAb,EAAmBA,GAAG,CAAC,EAAD,CAAtB,CADT;AAEEiC,IAAAA,QAAQ,EAAEZ,CAAC;AACT,sCADS;AAET,sCAFS;AAGT,sCAHS;AAIT,sCAJS,CAFb,EA9B4D;;;AAuC5D;AACEW,IAAAA,KAAK,EAAE,CAACD,OAAD,EAAU/B,GAAG,CAAC,EAAD,CAAb,EAAmBA,GAAG,CAAC,CAAD,CAAtB,CADT;AAEEiC,IAAAA,QAAQ,EAAEZ,CAAC;AACT,sCADS;AAET,sCAFS;AAGT,sCAHS;AAIT,sCAJS,CAFb,EAvC4D;;;AAgD5D;AACEW,IAAAA,KAAK,EAAE,CAACD,OAAD,EAAU/B,GAAG,CAAC,EAAD,CAAb,EAAmBA,GAAG,CAAC,CAAD,CAAtB,CADT;AAEEiC,IAAAA,QAAQ,EAAEZ,CAAC;AACT,sCADS;AAET,sCAFS;AAGT,sCAHS;AAIT,sCAJS,CAFb,EAhD4D;;;AAyD5D;AACEW,IAAAA,KAAK,EAAE,CAACD,OAAD,EAAU/B,GAAG,CAAC,EAAD,CAAb,EAAmBA,GAAG,CAAC,CAAD,CAAtB,CADT;AAEEiC,IAAAA,QAAQ,EAAEZ,CAAC;AACT,sCADS;AAET,sCAFS;AAGT,sCAHS;AAIT,sCAJS,CAFb,EAzD4D;;;AAkE5D;AACEW,IAAAA,KAAK,EAAE,CAACD,OAAD,EAAU/B,GAAG,CAAC,EAAD,CAAb,EAAmBA,GAAG,CAAC,CAAD,CAAtB,CADT;AAEEiC,IAAAA,QAAQ,EAAEZ,CAAC;AACT,sCADS;AAET,sCAFS;AAGT,sCAHS;AAIT,sCAJS,CAFb,EAlE4D;;;AA2E5D,IAAEW,KAAK,EAAE,CAACH,KAAD,EAAQ7B,GAAG,CAAC,CAAD,CAAX,EAAgBA,GAAG,CAAC,CAAD,CAAnB,CAAT,EAAkCiC,QAAQ,EAAEJ,KAA5C,EA3E4D;AA4E5D,IAAEG,KAAK,EAAE,CAACF,MAAD,EAAS9B,GAAG,CAAC,EAAD,CAAZ,EAAkBA,GAAG,CAAC,CAAD,CAArB,CAAT,EAAoCiC,QAAQ,EAAEJ,KAA9C,EA5E4D;;AA8E5D;AACA,IAAEG,KAAK,EAAE,CAACH,KAAD,EAAQ7B,GAAG,CAAC,CAAD,CAAX,EAAgBA,GAAG,CAAC,EAAD,CAAnB,CAAT,EAAmCiC,QAAQ,EAAEJ,KAA7C,EA/E4D;AAgF5D,IAAEG,KAAK,EAAE,CAACF,MAAD,EAAS9B,GAAG,CAAC,EAAD,CAAZ,EAAkBA,GAAG,CAAC,EAAD,CAArB,CAAT,EAAqCiC,QAAQ,EAAEJ,KAA/C,EAhF4D;AAiF5D,IAAEG,KAAK,EAAE,CAACD,OAAD,EAAU/B,GAAG,CAAC,CAAD,CAAb,EAAkBA,GAAG,CAAC,EAAD,CAArB,CAAT,EAAqCiC,QAAQ,EAAEF,OAA/C,EAjF4D;AAkF5D;AACEC,IAAAA,KAAK,EAAE,CAACD,OAAD,EAAU/B,GAAG,CAAC,EAAD,CAAb,EAAmBA,GAAG,CAAC,EAAD,CAAtB,CADT;AAEEiC,IAAAA,QAAQ,EAAEZ,CAAC;AACT,sCADS;AAET,sCAFS;AAGT,sCAHS;AAIT,sCAJS,CAFb,EAlF4D;;;;AA4F5D;AACA,IAAEW,KAAK,EAAE,CAACL,KAAD,EAAQ3B,GAAG,CAAC,CAAD,CAAX,EAAgBA,GAAG,CAAC,CAAD,CAAnB,CAAT,EAAkCiC,QAAQ,EAAEL,KAA5C,EA7F4D;AA8F5D,IAAEI,KAAK,EAAE,CAACJ,KAAD,EAAQ5B,GAAG,CAAC,CAAD,CAAX,EAAgBA,GAAG,CAAC,CAAD,CAAnB,CAAT,EAAkCiC,QAAQ,EAAEL,KAA5C,EA9F4D;AA+F5D,IAAEI,KAAK,EAAE,CAACH,KAAD,EAAQ7B,GAAG,CAAC,CAAD,CAAX,EAAgBA,GAAG,CAAC,CAAD,CAAnB,CAAT,EAAkCiC,QAAQ,EAAEL,KAA5C,EA/F4D;AAgG5D,IAAEI,KAAK,EAAE,CAACF,MAAD,EAAS9B,GAAG,CAAC,EAAD,CAAZ,EAAkBA,GAAG,CAAC,CAAD,CAArB,CAAT,EAAoCiC,QAAQ,EAAEL,KAA9C,EAhG4D;AAiG5D,IAAEI,KAAK,EAAE,CAACD,OAAD,EAAU/B,GAAG,CAAC,CAAD,CAAb,EAAkBA,GAAG,CAAC,CAAD,CAArB,CAAT,EAAoCiC,QAAQ,EAAEL,KAA9C,EAjG4D,CAA3D,CAAH;;AAmGD,CA/JH;;AAiKAnB,CAAC,CAACC,IAAF,CAAO,KAAP;AACGC,OADH,CACW,uDADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CApBA;;AAsBGC,MAtBH,CAsBU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,cADX,EAC2B,CAAC,SAAD,EAAY,WAAZ,EAAyB,YAAzB,CAD3B;AAEGA,OAFH,CAEW,OAFX,EAEoB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAFpB,CAvBJ;;AA2BGC,EA3BH,CA2BM,OAAMC,CAAN,KAAW;AACb,QAAMC,GAAW,GAAGD,CAAC,CAACJ,MAAtB;;AAEA,QAAMM,CAAC,GAAGF,CAAC,CAACJ,MAAF,CAASO,KAAT,KAAmB,CAAnB,GAAuBrB,OAAvB,GAAiCO,OAAO,CAACW,CAAC,CAACJ,MAAF,CAASO,KAAV,EAAiBrB,OAAjB,CAAlD;;AAEA,QAAMsB,CAAC,GAAG,CAACC,CAAD,EAAYC,CAAZ,EAAwBC,CAAxB,EAAoCC,CAApC,KAAmD;AAC3DF,IAAAA,CAAC,GAAGA,CAAC,KAAKG,SAAN,GAAkBJ,CAAlB,GAAsBC,CAA1B;AACAC,IAAAA,CAAC,GAAGA,CAAC,KAAKE,SAAN,GAAkBJ,CAAlB,GAAsBE,CAA1B;AACAC,IAAAA,CAAC,GAAGA,CAAC,KAAKC,SAAN,GAAkBJ,CAAlB,GAAsBG,CAA1B;;AAEA,YAAQR,CAAC,CAACJ,MAAF,CAASO,KAAjB;AACE,WAAK,CAAL;AACE,eAAOtB,OAAO,CAACwB,CAAD,CAAd;AACF,WAAK,CAAL;AACE,eAAOnB,IAAI,CAACL,OAAO,CAACwB,CAAD,CAAR,EAAaxB,OAAO,CAACyB,CAAD,CAApB,CAAX;AACF,WAAK,CAAL;AACE,eAAOnB,IAAI,CAACN,OAAO,CAACwB,CAAD,CAAR,EAAaxB,OAAO,CAACyB,CAAD,CAApB,EAAyBzB,OAAO,CAAC0B,CAAD,CAAhC,CAAX;AACF;AACE,eAAOnB,IAAI,CAACP,OAAO,CAACwB,CAAD,CAAR,EAAaxB,OAAO,CAACyB,CAAD,CAApB,EAAyBzB,OAAO,CAAC0B,CAAD,CAAhC,EAAqC1B,OAAO,CAAC2B,CAAD,CAA5C,CAAX,CARJ;;AAUD,GAfD;;AAiBA,QAAME,KAAK,GAAGN,CAAC,CAAC,kCAAD,CAAf;AACA,QAAMO,KAAK,GAAGP,CAAC,CAAC,kCAAD,CAAf;AACA,QAAMQ,KAAK,GAAGR,CAAC,CAAC,kCAAD,CAAf;AACA,QAAMS,MAAM,GAAGT,CAAC,CAAC,kCAAD,CAAhB;AACA,QAAMU,OAAO,GAAGV,CAAC;AACf,oCADe;AAEf,oCAFe;AAGf,oCAHe;AAIf,oCAJe,CAAjB;;;AAOAd,EAAAA,GAAG,CAACU,CAAD,EAAIT,OAAO,CAAC,aAAD,CAAX,EAA4B,CAACW,CAAD,EAAIlB,OAAJ,EAAaA,OAAb,CAA5B,EAAmDkB,CAAnD,EAAsDD,GAAtD,EAA2D;AAC5D,IAAEc,KAAK,EAAE,CAACJ,KAAD,EAAQ5B,GAAG,CAAC,CAAD,CAAX,EAAgBA,GAAG,CAAC,EAAD,CAAnB,CAAT,EAAmCiC,QAAQ,EAAEL,KAA7C,EAD4D;AAE5D,IAAEI,KAAK,EAAE,CAACJ,KAAD,EAAQ5B,GAAG,CAAC,CAAD,CAAX,EAAgBA,GAAG,CAAC,EAAD,CAAnB,CAAT,EAAmCiC,QAAQ,EAAEL,KAA7C,EAF4D;AAG5D,IAAEI,KAAK,EAAE,CAACJ,KAAD,EAAQ5B,GAAG,CAAC,CAAD,CAAX,EAAgBA,GAAG,CAAC,CAAD,CAAnB,CAAT,EAAkCiC,QAAQ,EAAEL,KAA5C,EAH4D;AAI5D,IAAEI,KAAK,EAAE,CAACJ,KAAD,EAAQ5B,GAAG,CAAC,CAAD,CAAX,EAAgBA,GAAG,CAAC,CAAD,CAAnB,CAAT,EAAkCiC,QAAQ,EAAEL,KAA5C,EAJ4D;AAK5D,IAAEI,KAAK,EAAE,CAACJ,KAAD,EAAQ5B,GAAG,CAAC,EAAD,CAAX,EAAiBA,GAAG,CAAC,CAAD,CAApB,CAAT,EAAmCiC,QAAQ,EAAEL,KAA7C,EAL4D;;AAO5D,IAAEI,KAAK,EAAE,CAACL,KAAD,EAAQ3B,GAAG,CAAC,CAAD,CAAX,EAAgBA,GAAG,CAAC,EAAD,CAAnB,CAAT,EAAmCiC,QAAQ,EAAEN,KAA7C,EAP4D;AAQ5D,IAAEK,KAAK,EAAE,CAACL,KAAD,EAAQ3B,GAAG,CAAC,CAAD,CAAX,EAAgBA,GAAG,CAAC,EAAD,CAAnB,CAAT,EAAmCiC,QAAQ,EAAEN,KAA7C,EAR4D;AAS5D,IAAEK,KAAK,EAAE,CAACL,KAAD,EAAQ3B,GAAG,CAAC,CAAD,CAAX,EAAgBA,GAAG,CAAC,CAAD,CAAnB,CAAT,EAAkCiC,QAAQ,EAAEN,KAA5C,EAT4D;AAU5D,IAAEK,KAAK,EAAE,CAACL,KAAD,EAAQ3B,GAAG,CAAC,CAAD,CAAX,EAAgBA,GAAG,CAAC,CAAD,CAAnB,CAAT,EAAkCiC,QAAQ,EAAEN,KAA5C,EAV4D;AAW5D,IAAEK,KAAK,EAAE,CAACL,KAAD,EAAQ3B,GAAG,CAAC,EAAD,CAAX,EAAiBA,GAAG,CAAC,CAAD,CAApB,CAAT,EAAmCiC,QAAQ,EAAEN,KAA7C,EAX4D;;AAa5D;AACA,IAAEK,KAAK,EAAE,CAACD,OAAD,EAAU/B,GAAG,CAAC,CAAD,CAAb,EAAkBA,GAAG,CAAC,EAAD,CAArB,CAAT,EAAqCiC,QAAQ,EAAEF,OAA/C,EAd4D;AAe5D;AACEC,IAAAA,KAAK,EAAE,CAACD,OAAD,EAAU/B,GAAG,CAAC,CAAD,CAAb,EAAkBA,GAAG,CAAC,EAAD,CAArB,CADT;AAEEiC,IAAAA,QAAQ,EAAEZ,CAAC;AACT,sCADS;AAET,sCAFS;AAGT,sCAHS;AAIT,sCAJS,CAFb,EAf4D;;;AAwB5D;AACEW,IAAAA,KAAK,EAAE,CAACD,OAAD,EAAU/B,GAAG,CAAC,EAAD,CAAb,EAAmBA,GAAG,CAAC,EAAD,CAAtB,CADT;AAEEiC,IAAAA,QAAQ,EAAEZ,CAAC;AACT,sCADS;AAET,sCAFS;AAGT,sCAHS;AAIT,sCAJS,CAFb,EAxB4D;;;AAiC5D;AACEW,IAAAA,KAAK,EAAE,CAACD,OAAD,EAAU/B,GAAG,CAAC,EAAD,CAAb,EAAmBA,GAAG,CAAC,CAAD,CAAtB,CADT;AAEEiC,IAAAA,QAAQ,EAAEZ,CAAC;AACT,sCADS;AAET,sCAFS;AAGT,sCAHS;AAIT,sCAJS,CAFb,EAjC4D;;;AA0C5D;AACEW,IAAAA,KAAK,EAAE,CAACD,OAAD,EAAU/B,GAAG,CAAC,EAAD,CAAb,EAAmBA,GAAG,CAAC,CAAD,CAAtB,CADT;AAEEiC,IAAAA,QAAQ,EAAEZ,CAAC;AACT,sCADS;AAET,sCAFS;AAGT,sCAHS;AAIT,sCAJS,CAFb,EA1C4D;;;AAmD5D;AACEW,IAAAA,KAAK,EAAE,CAACD,OAAD,EAAU/B,GAAG,CAAC,EAAD,CAAb,EAAmBA,GAAG,CAAC,CAAD,CAAtB,CADT;AAEEiC,IAAAA,QAAQ,EAAEZ,CAAC;AACT,sCADS;AAET,sCAFS;AAGT,sCAHS;AAIT,sCAJS,CAFb,EAnD4D;;;AA4D5D;AACEW,IAAAA,KAAK,EAAE,CAACD,OAAD,EAAU/B,GAAG,CAAC,EAAD,CAAb,EAAmBA,GAAG,CAAC,CAAD,CAAtB,CADT;AAEEiC,IAAAA,QAAQ,EAAEZ,CAAC;AACT,sCADS;AAET,sCAFS;AAGT,sCAHS;AAIT,sCAJS,CAFb,EA5D4D;;;AAqE5D,IAAEW,KAAK,EAAE,CAACH,KAAD,EAAQ7B,GAAG,CAAC,CAAD,CAAX,EAAgBA,GAAG,CAAC,CAAD,CAAnB,CAAT,EAAkCiC,QAAQ,EAAEN,KAA5C,EArE4D;AAsE5D,IAAEK,KAAK,EAAE,CAACF,MAAD,EAAS9B,GAAG,CAAC,EAAD,CAAZ,EAAkBA,GAAG,CAAC,CAAD,CAArB,CAAT,EAAoCiC,QAAQ,EAAEN,KAA9C,EAtE4D;;AAwE5D;AACA,IAAEK,KAAK,EAAE,CAACH,KAAD,EAAQ7B,GAAG,CAAC,CAAD,CAAX,EAAgBA,GAAG,CAAC,EAAD,CAAnB,CAAT,EAAmCiC,QAAQ,EAAEJ,KAA7C,EAzE4D;AA0E5D,IAAEG,KAAK,EAAE,CAACF,MAAD,EAAS9B,GAAG,CAAC,EAAD,CAAZ,EAAkBA,GAAG,CAAC,EAAD,CAArB,CAAT,EAAqCiC,QAAQ,EAAEN,KAA/C,EA1E4D;AA2E5D,IAAEK,KAAK,EAAE,CAACD,OAAD,EAAU/B,GAAG,CAAC,CAAD,CAAb,EAAkBA,GAAG,CAAC,EAAD,CAArB,CAAT,EAAqCiC,QAAQ,EAAEF,OAA/C,EA3E4D;AA4E5D;AACEC,IAAAA,KAAK,EAAE,CAACD,OAAD,EAAU/B,GAAG,CAAC,EAAD,CAAb,EAAmBA,GAAG,CAAC,EAAD,CAAtB,CADT;AAEEiC,IAAAA,QAAQ,EAAEZ,CAAC;AACT,sCADS;AAET,sCAFS;AAGT,sCAHS;AAIT,sCAJS,CAFb,EA5E4D;;;;AAsF5D;AACA,IAAEW,KAAK,EAAE,CAACL,KAAD,EAAQ3B,GAAG,CAAC,CAAD,CAAX,EAAgBA,GAAG,CAAC,CAAD,CAAnB,CAAT,EAAkCiC,QAAQ,EAAEL,KAA5C,EAvF4D;AAwF5D,IAAEI,KAAK,EAAE,CAACJ,KAAD,EAAQ5B,GAAG,CAAC,CAAD,CAAX,EAAgBA,GAAG,CAAC,CAAD,CAAnB,CAAT,EAAkCiC,QAAQ,EAAEL,KAA5C,EAxF4D;AAyF5D,IAAEI,KAAK,EAAE,CAACH,KAAD,EAAQ7B,GAAG,CAAC,CAAD,CAAX,EAAgBA,GAAG,CAAC,CAAD,CAAnB,CAAT,EAAkCiC,QAAQ,EAAEL,KAA5C,EAzF4D;AA0F5D,IAAEI,KAAK,EAAE,CAACF,MAAD,EAAS9B,GAAG,CAAC,EAAD,CAAZ,EAAkBA,GAAG,CAAC,CAAD,CAArB,CAAT,EAAoCiC,QAAQ,EAAEL,KAA9C,EA1F4D;AA2F5D,IAAEI,KAAK,EAAE,CAACD,OAAD,EAAU/B,GAAG,CAAC,CAAD,CAAb,EAAkBA,GAAG,CAAC,CAAD,CAArB,CAAT,EAAoCiC,QAAQ,EAAEL,KAA9C,EA3F4D,CAA3D,CAAH;;AA6FD,CAzJH","sourcesContent":["export const description = `\nExecution tests for the 'extractBits' builtin function\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport {\n  i32Bits,\n  TypeI32,\n  u32,\n  TypeU32,\n  u32Bits,\n  vec2,\n  vec3,\n  vec4,\n  TypeVec,\n} from '../../../../../util/conversion.js';\nimport { Config, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('u32')\n  .specURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions')\n  .desc(\n    `\nT is u32 or vecN<u32>\n@const fn extractBits(\n  e: T,\n  offset: u32,\n  count: u32) -> T\nReads bits from an integer, without sign extension.\n\nWhen T is a scalar type, then:\n  w is the bit width of T\n  o = min(offset,w)\n  c = min(count, w - o)\n\nThe result is 0 if c is 0.\nOtherwise, bits 0..c-1 of the result are copied from bits o..o+c-1 of e.\nOther bits of the result are 0.\nComponent-wise when T is a vector.\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('width', [1, 2, 3, 4])\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n\n    const T = t.params.width === 1 ? TypeU32 : TypeVec(t.params.width, TypeU32);\n\n    const V = (x: number, y?: number, z?: number, w?: number) => {\n      y = y === undefined ? x : y;\n      z = z === undefined ? x : z;\n      w = w === undefined ? x : w;\n\n      switch (t.params.width) {\n        case 1:\n          return u32Bits(x);\n        case 2:\n          return vec2(u32Bits(x), u32Bits(y));\n        case 3:\n          return vec3(u32Bits(x), u32Bits(y), u32Bits(z));\n        default:\n          return vec4(u32Bits(x), u32Bits(y), u32Bits(z), u32Bits(w));\n      }\n    };\n\n    const all_1 = V(0b11111111111111111111111111111111);\n    const all_0 = V(0b00000000000000000000000000000000);\n    const low_1 = V(0b00000000000000000000000000000001);\n    const high_1 = V(0b10000000000000000000000000000000);\n    const pattern = V(\n      0b00000000000111011100000000000000,\n      0b11111111111000000011111111111111,\n      0b00000000010101010101000000000000,\n      0b00000000001010101010100000000000\n    );\n\n    run(t, builtin('extractBits'), [T, TypeU32, TypeU32], T, cfg, [\n      { input: [all_0, u32(0), u32(32)], expected: all_0 },\n      { input: [all_0, u32(1), u32(10)], expected: all_0 },\n      { input: [all_0, u32(2), u32(5)], expected: all_0 },\n      { input: [all_0, u32(0), u32(1)], expected: all_0 },\n      { input: [all_0, u32(31), u32(1)], expected: all_0 },\n\n      { input: [all_1, u32(0), u32(32)], expected: all_1 },\n      {\n        input: [all_1, u32(1), u32(10)],\n        expected: V(0b00000000000000000000001111111111),\n      },\n      {\n        input: [all_1, u32(2), u32(5)],\n        expected: V(0b00000000000000000000000000011111),\n      },\n      { input: [all_1, u32(0), u32(1)], expected: low_1 },\n      { input: [all_1, u32(31), u32(1)], expected: low_1 },\n\n      // Patterns\n      { input: [pattern, u32(0), u32(32)], expected: pattern },\n      {\n        input: [pattern, u32(1), u32(31)],\n        expected: V(\n          0b00000000000011101110000000000000,\n          0b01111111111100000001111111111111,\n          0b00000000001010101010100000000000,\n          0b00000000000101010101010000000000\n        ),\n      },\n      {\n        input: [pattern, u32(14), u32(18)],\n        expected: V(\n          0b00000000000000000000000001110111,\n          0b00000000000000111111111110000000,\n          0b00000000000000000000000101010101,\n          0b00000000000000000000000010101010\n        ),\n      },\n      {\n        input: [pattern, u32(14), u32(7)],\n        expected: V(\n          0b00000000000000000000000001110111,\n          0b00000000000000000000000000000000,\n          0b00000000000000000000000001010101,\n          0b00000000000000000000000000101010\n        ),\n      },\n      {\n        input: [pattern, u32(14), u32(4)],\n        expected: V(\n          0b00000000000000000000000000000111,\n          0b00000000000000000000000000000000,\n          0b00000000000000000000000000000101,\n          0b00000000000000000000000000001010\n        ),\n      },\n      {\n        input: [pattern, u32(14), u32(3)],\n        expected: V(\n          0b00000000000000000000000000000111,\n          0b00000000000000000000000000000000,\n          0b00000000000000000000000000000101,\n          0b00000000000000000000000000000010\n        ),\n      },\n      {\n        input: [pattern, u32(18), u32(3)],\n        expected: V(\n          0b00000000000000000000000000000111,\n          0b00000000000000000000000000000000,\n          0b00000000000000000000000000000101,\n          0b00000000000000000000000000000010\n        ),\n      },\n      { input: [low_1, u32(0), u32(1)], expected: low_1 },\n      { input: [high_1, u32(31), u32(1)], expected: low_1 },\n\n      // End overflow\n      { input: [low_1, u32(0), u32(99)], expected: low_1 },\n      { input: [high_1, u32(31), u32(99)], expected: low_1 },\n      { input: [pattern, u32(0), u32(99)], expected: pattern },\n      {\n        input: [pattern, u32(14), u32(99)],\n        expected: V(\n          0b00000000000000000000000001110111,\n          0b00000000000000111111111110000000,\n          0b00000000000000000000000101010101,\n          0b00000000000000000000000010101010\n        ),\n      },\n\n      // Zero count\n      { input: [all_1, u32(0), u32(0)], expected: all_0 },\n      { input: [all_0, u32(0), u32(0)], expected: all_0 },\n      { input: [low_1, u32(0), u32(0)], expected: all_0 },\n      { input: [high_1, u32(31), u32(0)], expected: all_0 },\n      { input: [pattern, u32(0), u32(0)], expected: all_0 },\n    ]);\n  });\n\ng.test('i32')\n  .specURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions')\n  .desc(\n    `\nT is i32 or vecN<i32>\n@const fn extractBits(\n  e: T,\n  offset: u32,\n  count: u32) -> T\nReads bits from an integer, with sign extension.\n\nWhen T is a scalar type, then:\n  w is the bit width of T\n  o = min(offset,w)\n  c = min(count, w - o)\n\nThe result is 0 if c is 0.\nOtherwise, bits 0..c-1 of the result are copied from bits o..o+c-1 of e.\nOther bits of the result are the same as bit c-1 of the result.\nComponent-wise when T is a vector.\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('width', [1, 2, 3, 4])\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n\n    const T = t.params.width === 1 ? TypeI32 : TypeVec(t.params.width, TypeI32);\n\n    const V = (x: number, y?: number, z?: number, w?: number) => {\n      y = y === undefined ? x : y;\n      z = z === undefined ? x : z;\n      w = w === undefined ? x : w;\n\n      switch (t.params.width) {\n        case 1:\n          return i32Bits(x);\n        case 2:\n          return vec2(i32Bits(x), i32Bits(y));\n        case 3:\n          return vec3(i32Bits(x), i32Bits(y), i32Bits(z));\n        default:\n          return vec4(i32Bits(x), i32Bits(y), i32Bits(z), i32Bits(w));\n      }\n    };\n\n    const all_1 = V(0b11111111111111111111111111111111);\n    const all_0 = V(0b00000000000000000000000000000000);\n    const low_1 = V(0b00000000000000000000000000000001);\n    const high_1 = V(0b10000000000000000000000000000000);\n    const pattern = V(\n      0b00000000000111011100000000000000,\n      0b11111111111000000011111111111111,\n      0b00000000010101010101000000000000,\n      0b00000000001010101010100000000000\n    );\n\n    run(t, builtin('extractBits'), [T, TypeU32, TypeU32], T, cfg, [\n      { input: [all_0, u32(0), u32(32)], expected: all_0 },\n      { input: [all_0, u32(1), u32(10)], expected: all_0 },\n      { input: [all_0, u32(2), u32(5)], expected: all_0 },\n      { input: [all_0, u32(0), u32(1)], expected: all_0 },\n      { input: [all_0, u32(31), u32(1)], expected: all_0 },\n\n      { input: [all_1, u32(0), u32(32)], expected: all_1 },\n      { input: [all_1, u32(1), u32(10)], expected: all_1 },\n      { input: [all_1, u32(2), u32(5)], expected: all_1 },\n      { input: [all_1, u32(0), u32(1)], expected: all_1 },\n      { input: [all_1, u32(31), u32(1)], expected: all_1 },\n\n      // Patterns\n      { input: [pattern, u32(0), u32(32)], expected: pattern },\n      {\n        input: [pattern, u32(1), u32(31)],\n        expected: V(\n          0b00000000000011101110000000000000,\n          0b11111111111100000001111111111111,\n          0b00000000001010101010100000000000,\n          0b00000000000101010101010000000000\n        ),\n      },\n      {\n        input: [pattern, u32(14), u32(18)],\n        expected: V(\n          0b00000000000000000000000001110111,\n          0b11111111111111111111111110000000,\n          0b00000000000000000000000101010101,\n          0b00000000000000000000000010101010\n        ),\n      },\n      {\n        input: [pattern, u32(14), u32(7)],\n        expected: V(\n          0b11111111111111111111111111110111,\n          0b00000000000000000000000000000000,\n          0b11111111111111111111111111010101,\n          0b00000000000000000000000000101010\n        ),\n      },\n      {\n        input: [pattern, u32(14), u32(4)],\n        expected: V(\n          0b00000000000000000000000000000111,\n          0b00000000000000000000000000000000,\n          0b00000000000000000000000000000101,\n          0b11111111111111111111111111111010\n        ),\n      },\n      {\n        input: [pattern, u32(14), u32(3)],\n        expected: V(\n          0b11111111111111111111111111111111,\n          0b00000000000000000000000000000000,\n          0b11111111111111111111111111111101,\n          0b00000000000000000000000000000010\n        ),\n      },\n      {\n        input: [pattern, u32(18), u32(3)],\n        expected: V(\n          0b11111111111111111111111111111111,\n          0b00000000000000000000000000000000,\n          0b11111111111111111111111111111101,\n          0b00000000000000000000000000000010\n        ),\n      },\n      { input: [low_1, u32(0), u32(1)], expected: all_1 },\n      { input: [high_1, u32(31), u32(1)], expected: all_1 },\n\n      // End overflow\n      { input: [low_1, u32(0), u32(99)], expected: low_1 },\n      { input: [high_1, u32(31), u32(99)], expected: all_1 },\n      { input: [pattern, u32(0), u32(99)], expected: pattern },\n      {\n        input: [pattern, u32(14), u32(99)],\n        expected: V(\n          0b00000000000000000000000001110111,\n          0b11111111111111111111111110000000,\n          0b00000000000000000000000101010101,\n          0b00000000000000000000000010101010\n        ),\n      },\n\n      // Zero count\n      { input: [all_1, u32(0), u32(0)], expected: all_0 },\n      { input: [all_0, u32(0), u32(0)], expected: all_0 },\n      { input: [low_1, u32(0), u32(0)], expected: all_0 },\n      { input: [high_1, u32(31), u32(0)], expected: all_0 },\n      { input: [pattern, u32(0), u32(0)], expected: all_0 },\n    ]);\n  });\n"],"file":"extractBits.spec.js"}