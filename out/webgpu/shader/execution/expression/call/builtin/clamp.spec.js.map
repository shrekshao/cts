{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/clamp.spec.ts"],"names":["description","makeTestGroup","GPUTest","anyOf","correctlyRoundedMatch","kBit","f32","f32Bits","i32","i32Bits","TypeF32","TypeI32","TypeU32","u32","u32Bits","isSubnormalScalar","run","builtin","g","calculateMinMaxClamp","ei","fi","gi","Math","min","max","calculateMedianClamp","sort","a","b","generateIntegerTestCases","test_values","cases","Array","forEach","e","f","expected_idx","precise_expected","expected","push","input","generateFloatTestCases","expected_values","includes","contains_subnormals","filter","x","length","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","negative","positive","cfg","cmpFloats","infinity","subnormal"],"mappings":"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","sourcesContent":["export const description = `\nExecution tests for the 'clamp' builtin function\n\nS is AbstractInt, i32, or u32\nT is S or vecN<S>\n@const fn clamp(e: T , low: T, high: T) -> T\nReturns min(max(e,low),high). Component-wise when T is a vector.\n\nS is AbstractFloat, f32, f16\nT is S or vecN<S>\n@const clamp(e: T , low: T , high: T) -> T\nReturns either min(max(e,low),high), or the median of the three values e, low, high.\nComponent-wise when T is a vector.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { anyOf, correctlyRoundedMatch } from '../../../../../util/compare.js';\nimport { kBit } from '../../../../../util/constants.js';\nimport {\n  f32,\n  f32Bits,\n  i32,\n  i32Bits,\n  Scalar,\n  TypeF32,\n  TypeI32,\n  TypeU32,\n  u32,\n  u32Bits,\n} from '../../../../../util/conversion.js';\nimport { isSubnormalScalar } from '../../../../../util/math.js';\nimport { Case, Config, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n/**\n * Calculates clamp using the min-max formula.\n * clamp(e, f, g) = min(max(e, f), g)\n *\n * Operates on indices of an ascending sorted array, instead of the actual\n * values to avoid rounding issues.\n *\n * @returns the index of the clamped value\n */\nfunction calculateMinMaxClamp(ei: number, fi: number, gi: number): number {\n  return Math.min(Math.max(ei, fi), gi);\n}\n\n/**\n * Calculates clamp as the median of three numbers\n *\n * Operates on indices of an ascending sorted array, instead of the actual\n * values to avoid rounding issues.\n *\n * @returns the index of the clamped value\n */\nfunction calculateMedianClamp(ei: number, fi: number, gi: number): number {\n  return [ei, fi, gi].sort((a, b) => {\n    return a - b;\n  })[1];\n}\n\n/** @returns a set of clamp test cases from an ascending list of integer values */\nfunction generateIntegerTestCases(test_values: Array<Scalar>): Array<Case> {\n  const cases = new Array<Case>();\n  test_values.forEach((e, ei) => {\n    test_values.forEach((f, fi) => {\n      test_values.forEach((g, gi) => {\n        const expected_idx = calculateMinMaxClamp(ei, fi, gi);\n        const precise_expected = test_values[expected_idx];\n        const expected = isSubnormalScalar(precise_expected)\n          ? anyOf(precise_expected, f32(0.0))\n          : precise_expected;\n        cases.push({ input: [e, f, g], expected });\n      });\n    });\n  });\n  return cases;\n}\n\n/** @returns a set of clamp test cases from an ascending list of floating point values */\nfunction generateFloatTestCases(test_values: Array<Scalar>): Array<Case> {\n  const cases = new Array<Case>();\n  test_values.forEach((e, ei) => {\n    test_values.forEach((f, fi) => {\n      test_values.forEach((g, gi) => {\n        // Spec allows backends for floats to either return the min-max formula or median of 3 numbers\n        const expected_values: Array<Scalar> = [];\n        {\n          const expected_idx = calculateMinMaxClamp(ei, fi, gi);\n          const precise_expected = test_values[expected_idx];\n          if (!expected_values.includes(precise_expected)) {\n            expected_values.push(precise_expected);\n          }\n        }\n        {\n          const expected_idx = calculateMedianClamp(ei, fi, gi);\n          const precise_expected = test_values[expected_idx];\n          if (!expected_values.includes(precise_expected)) {\n            expected_values.push(precise_expected);\n          }\n        }\n        const contains_subnormals =\n          expected_values.filter(x => {\n            return isSubnormalScalar(x);\n          }).length > 0;\n        if (contains_subnormals) {\n          expected_values.push(f32(0.0));\n        }\n        cases.push({ input: [e, f, g], expected: anyOf(...expected_values) });\n      });\n    });\n  });\n  return cases;\n}\n\ng.test('abstract_int')\n  .specURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions')\n  .desc(`abstract int tests`)\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('u32')\n  .specURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions')\n  .desc(`u32 tests`)\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    // This array must be strictly increasing, since that ordering determines\n    // the expected values.\n    const test_values: Array<Scalar> = [\n      u32Bits(kBit.u32.min),\n      u32(1),\n      u32(2),\n      u32(0x70000000),\n      u32(0x80000000),\n      u32Bits(kBit.u32.max),\n    ];\n\n    run(\n      t,\n      builtin('clamp'),\n      [TypeU32, TypeU32, TypeU32],\n      TypeU32,\n      t.params,\n      generateIntegerTestCases(test_values)\n    );\n  });\n\ng.test('i32')\n  .specURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions')\n  .desc(`i32 tests`)\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    // This array must be strictly increasing, since that ordering determines\n    // the expected values.\n    const test_values: Array<Scalar> = [\n      i32Bits(kBit.i32.negative.min),\n      i32(-2),\n      i32(-1),\n      i32(0),\n      i32(1),\n      i32(2),\n      i32Bits(0x70000000),\n      i32Bits(kBit.i32.positive.max),\n    ];\n\n    run(\n      t,\n      builtin('clamp'),\n      [TypeI32, TypeI32, TypeI32],\n      TypeI32,\n      t.params,\n      generateIntegerTestCases(test_values)\n    );\n  });\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f32 tests`)\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    cfg.cmpFloats = correctlyRoundedMatch();\n\n    // This array must be strictly increasing, since that ordering determines\n    // the expected values.\n    const test_values: Array<Scalar> = [\n      f32Bits(kBit.f32.infinity.negative),\n      f32Bits(kBit.f32.negative.min),\n      f32(-10.0),\n      f32(-1.0),\n      f32Bits(kBit.f32.negative.max),\n      f32Bits(kBit.f32.subnormal.negative.min),\n      f32Bits(kBit.f32.subnormal.negative.max),\n      f32(0.0),\n      f32Bits(kBit.f32.subnormal.positive.min),\n      f32Bits(kBit.f32.subnormal.positive.max),\n      f32Bits(kBit.f32.positive.min),\n      f32(1.0),\n      f32(10.0),\n      f32Bits(kBit.f32.positive.max),\n      f32Bits(kBit.f32.infinity.positive),\n    ];\n\n    run(\n      t,\n      builtin('clamp'),\n      [TypeF32, TypeF32, TypeF32],\n      TypeF32,\n      cfg,\n      generateFloatTestCases(test_values)\n    );\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"file":"clamp.spec.js"}