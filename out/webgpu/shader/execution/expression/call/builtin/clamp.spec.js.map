{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/clamp.spec.ts"],"names":["description","makeTestGroup","GPUTest","kBit","i32","i32Bits","TypeF32","TypeI32","TypeU32","u32","u32Bits","clampIntervals","sparseF32Range","allInputSources","makeTernaryToF32IntervalCase","run","builtin","g","calculateMinMaxClamp","ei","fi","gi","Math","min","max","generateIntegerTestCases","test_values","cases","Array","forEach","e","f","expected_idx","expected","push","input","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","negative","positive","makeCase","x","y","z","values"],"mappings":"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","sourcesContent":["export const description = `\nExecution tests for the 'clamp' builtin function\n\nS is AbstractInt, i32, or u32\nT is S or vecN<S>\n@const fn clamp(e: T , low: T, high: T) -> T\nReturns min(max(e,low),high). Component-wise when T is a vector.\n\nS is AbstractFloat, f32, f16\nT is S or vecN<S>\n@const clamp(e: T , low: T , high: T) -> T\nReturns either min(max(e,low),high), or the median of the three values e, low, high.\nComponent-wise when T is a vector.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { kBit } from '../../../../../util/constants.js';\nimport {\n  i32,\n  i32Bits,\n  Scalar,\n  TypeF32,\n  TypeI32,\n  TypeU32,\n  u32,\n  u32Bits,\n} from '../../../../../util/conversion.js';\nimport { clampIntervals } from '../../../../../util/f32_interval.js';\nimport { sparseF32Range } from '../../../../../util/math.js';\nimport { allInputSources, Case, makeTernaryToF32IntervalCase, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n/**\n * Calculates clamp using the min-max formula.\n * clamp(e, f, g) = min(max(e, f), g)\n *\n * Operates on indices of an ascending sorted array, instead of the actual\n * values to avoid rounding issues.\n *\n * @returns the index of the clamped value\n */\nfunction calculateMinMaxClamp(ei: number, fi: number, gi: number): number {\n  return Math.min(Math.max(ei, fi), gi);\n}\n\n/** @returns a set of clamp test cases from an ascending list of integer values */\nfunction generateIntegerTestCases(test_values: Array<Scalar>): Array<Case> {\n  const cases = new Array<Case>();\n  test_values.forEach((e, ei) => {\n    test_values.forEach((f, fi) => {\n      test_values.forEach((g, gi) => {\n        const expected_idx = calculateMinMaxClamp(ei, fi, gi);\n        const expected = test_values[expected_idx];\n        cases.push({ input: [e, f, g], expected });\n      });\n    });\n  });\n  return cases;\n}\n\ng.test('abstract_int')\n  .specURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions')\n  .desc(`abstract int tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('u32')\n  .specURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions')\n  .desc(`u32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    // This array must be strictly increasing, since that ordering determines\n    // the expected values.\n    const test_values: Array<Scalar> = [\n      u32Bits(kBit.u32.min),\n      u32(1),\n      u32(2),\n      u32(0x70000000),\n      u32(0x80000000),\n      u32Bits(kBit.u32.max),\n    ];\n\n    await run(\n      t,\n      builtin('clamp'),\n      [TypeU32, TypeU32, TypeU32],\n      TypeU32,\n      t.params,\n      generateIntegerTestCases(test_values)\n    );\n  });\n\ng.test('i32')\n  .specURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions')\n  .desc(`i32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    // This array must be strictly increasing, since that ordering determines\n    // the expected values.\n    const test_values: Array<Scalar> = [\n      i32Bits(kBit.i32.negative.min),\n      i32(-2),\n      i32(-1),\n      i32(0),\n      i32(1),\n      i32(2),\n      i32Bits(0x70000000),\n      i32Bits(kBit.i32.positive.max),\n    ];\n\n    await run(\n      t,\n      builtin('clamp'),\n      [TypeI32, TypeI32, TypeI32],\n      TypeI32,\n      t.params,\n      generateIntegerTestCases(test_values)\n    );\n  });\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const makeCase = (x: number, y: number, z: number): Case => {\n      return makeTernaryToF32IntervalCase(x, y, z, ...clampIntervals);\n    };\n\n    // Using sparseF32Range since this will generate N^3 test cases\n    const values = sparseF32Range();\n    const cases: Array<Case> = [];\n    values.forEach(x => {\n      values.forEach(y => {\n        values.forEach(z => {\n          cases.push(makeCase(x, y, z));\n        });\n      });\n    });\n\n    await run(t, builtin('clamp'), [TypeF32, TypeF32, TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"file":"clamp.spec.js"}