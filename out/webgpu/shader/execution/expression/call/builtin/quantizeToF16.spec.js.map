{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/quantizeToF16.spec.ts"],"names":["description","makeTestGroup","GPUTest","kValue","TypeF32","quantizeToF16Interval","fullF32Range","allInputSources","makeUnaryToF32IntervalCase","run","builtin","g","test","specURL","desc","params","u","combine","undefined","fn","t","makeCase","x","cases","f16","negative","min","max","subnormal","positive","map"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARO,CAUP,SAASC,aAAT,QAA8B,kDAA9B;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,MAAT,QAAuB,kCAAvB;AACA,SAASC,OAAT,QAAwB,mCAAxB;AACA,SAASC,qBAAT,QAAsC,qCAAtC;AACA,SAASC,YAAT,QAA6B,6BAA7B;AACA,SAASC,eAAT,EAAgCC,0BAAhC,EAA4DC,GAA5D,QAAuE,qBAAvE;;AAEA,SAASC,OAAT,QAAwB,cAAxB;;AAEA,OAAO,MAAMC,CAAC,GAAGV,aAAa,CAACC,OAAD,CAAvB;;AAEPS,CAAC,CAACC,IAAF,CAAO,KAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH,CAES,WAFT;AAGGC,MAHH,CAGU,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBV,eAAzB,EAA0CU,OAA1C,CAAkD,WAAlD,EAA+D,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAA/D,CAJJ;;AAMGC,EANH,CAMM,OAAMC,CAAN,KAAW;AACb,QAAMC,QAAQ,GAAG,CAACC,CAAD,KAAqB;AACpC,WAAOd,0BAA0B,CAACc,CAAD,EAAIjB,qBAAJ,CAAjC;AACD,GAFD;;AAIA,QAAMkB,KAAK,GAAG;AACZpB,EAAAA,MAAM,CAACqB,GAAP,CAAWC,QAAX,CAAoBC,GADR;AAEZvB,EAAAA,MAAM,CAACqB,GAAP,CAAWC,QAAX,CAAoBE,GAFR;AAGZxB,EAAAA,MAAM,CAACqB,GAAP,CAAWI,SAAX,CAAqBH,QAArB,CAA8BC,GAHlB;AAIZvB,EAAAA,MAAM,CAACqB,GAAP,CAAWI,SAAX,CAAqBH,QAArB,CAA8BE,GAJlB;AAKZxB,EAAAA,MAAM,CAACqB,GAAP,CAAWI,SAAX,CAAqBC,QAArB,CAA8BH,GALlB;AAMZvB,EAAAA,MAAM,CAACqB,GAAP,CAAWI,SAAX,CAAqBC,QAArB,CAA8BF,GANlB;AAOZxB,EAAAA,MAAM,CAACqB,GAAP,CAAWK,QAAX,CAAoBH,GAPR;AAQZvB,EAAAA,MAAM,CAACqB,GAAP,CAAWK,QAAX,CAAoBF,GARR;AASZ,KAAGrB,YAAY,EATH;AAUZwB,EAAAA,GAVY,CAURT,QAVQ,CAAd;;AAYA,QAAMZ,GAAG,CAACW,CAAD,EAAIV,OAAO,CAAC,eAAD,CAAX,EAA8B,CAACN,OAAD,CAA9B,EAAyCA,OAAzC,EAAkDgB,CAAC,CAACL,MAApD,EAA4DQ,KAA5D,CAAT;AACD,CAxBH","sourcesContent":["export const description = `\nExecution tests for the 'quantizeToF16' builtin function\n\nT is f32 or vecN<f32>\n@const fn quantizeToF16(e: T ) -> T\nQuantizes a 32-bit floating point value e as if e were converted to a IEEE 754\nbinary16 value, and then converted back to a IEEE 754 binary32 value.\nComponent-wise when T is a vector.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { kValue } from '../../../../../util/constants.js';\nimport { TypeF32 } from '../../../../../util/conversion.js';\nimport { quantizeToF16Interval } from '../../../../../util/f32_interval.js';\nimport { fullF32Range } from '../../../../../util/math.js';\nimport { allInputSources, Case, makeUnaryToF32IntervalCase, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const makeCase = (x: number): Case => {\n      return makeUnaryToF32IntervalCase(x, quantizeToF16Interval);\n    };\n\n    const cases = [\n      kValue.f16.negative.min,\n      kValue.f16.negative.max,\n      kValue.f16.subnormal.negative.min,\n      kValue.f16.subnormal.negative.max,\n      kValue.f16.subnormal.positive.min,\n      kValue.f16.subnormal.positive.max,\n      kValue.f16.positive.min,\n      kValue.f16.positive.max,\n      ...fullF32Range(),\n    ].map(makeCase);\n\n    await run(t, builtin('quantizeToF16'), [TypeF32], TypeF32, t.params, cases);\n  });\n"],"file":"quantizeToF16.spec.js"}