{"version":3,"file":"refract.spec.js","names":["description","makeTestGroup","GPUTest","f32","TypeF32","TypeVec","Vector","refractInterval","sparseVectorF32Range","quantizeToF32","sparseF32Range","makeCaseCache","allInputSources","run","builtin","g","makeCaseF32","i","s","r","check","map","i_f32","s_f32","r_f32","vectors","some","e","isFinite","undefined","input","expected","generateCasesF32","param_is","param_ss","param_rs","flatMap","filter","c","d","f32_vec2_const","f32_vec2_non_const","f32_vec3_const","f32_vec3_non_const","f32_vec4_const","f32_vec4_non_const","test","specURL","desc","params","u","combine","unimplemented","fn","t","cases","get","inputSource"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/refract.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for the 'refract' builtin function\n\nT is vecN<I>\nI is AbstractFloat, f32, or f16\n@const fn refract(e1: T ,e2: T ,e3: I ) -> T\nFor the incident vector e1 and surface normal e2, and the ratio of indices of\nrefraction e3, let k = 1.0 -e3*e3* (1.0 - dot(e2,e1) * dot(e2,e1)).\nIf k < 0.0, returns the refraction vector 0.0, otherwise return the refraction\nvector e3*e1- (e3* dot(e2,e1) + sqrt(k)) *e2.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { f32, TypeF32, TypeVec, Vector } from '../../../../../util/conversion.js';\nimport { refractInterval } from '../../../../../util/f32_interval.js';\nimport { sparseVectorF32Range, quantizeToF32, sparseF32Range } from '../../../../../util/math.js';\nimport { makeCaseCache } from '../../case_cache.js';\nimport { allInputSources, Case, IntervalFilter, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n// Using a bespoke implementation of make*Case and generate*Cases here\n// since refract is the only builtin with the API signature\n// (vec, vec, scalar) -> vec\n\n/**\n * @returns a Case for `refract`\n * @param i the `i` param for the case\n * @param s the `s` param for the case\n * @param r the `r` param for the case\n * @param check what interval checking to apply\n * */\nfunction makeCaseF32(i: number[], s: number[], r: number, check: IntervalFilter): Case | undefined {\n  i = i.map(quantizeToF32);\n  s = s.map(quantizeToF32);\n  r = quantizeToF32(r);\n\n  const i_f32 = i.map(f32);\n  const s_f32 = s.map(f32);\n  const r_f32 = f32(r);\n\n  const vectors = refractInterval(i, s, r);\n  if (check === 'f32-only' && vectors.some(e => !e.isFinite())) {\n    return undefined;\n  }\n\n  return {\n    input: [new Vector(i_f32), new Vector(s_f32), r_f32],\n    expected: refractInterval(i, s, r),\n  };\n}\n\n/**\n * @returns an array of Cases for `refract`\n * @param param_is array of inputs to try for the `i` param\n * @param param_ss array of inputs to try for the `s` param\n * @param param_rs array of inputs to try for the `r` param\n * @param check what interval checking to apply\n */\nfunction generateCasesF32(\n  param_is: number[][],\n  param_ss: number[][],\n  param_rs: number[],\n  check: IntervalFilter\n): Case[] {\n  // Cannot use `cartesianProduct` here due to heterogeneous param types\n  return param_is\n    .flatMap(i => {\n      return param_ss.flatMap(s => {\n        return param_rs.map(r => {\n          return makeCaseF32(i, s, r, check);\n        });\n      });\n    })\n    .filter((c): c is Case => c !== undefined);\n}\n\nexport const d = makeCaseCache('refract', {\n  f32_vec2_const: () => {\n    return generateCasesF32(\n      sparseVectorF32Range(2),\n      sparseVectorF32Range(2),\n      sparseF32Range(),\n      'f32-only'\n    );\n  },\n  f32_vec2_non_const: () => {\n    return generateCasesF32(\n      sparseVectorF32Range(2),\n      sparseVectorF32Range(2),\n      sparseF32Range(),\n      'unfiltered'\n    );\n  },\n  f32_vec3_const: () => {\n    return generateCasesF32(\n      sparseVectorF32Range(3),\n      sparseVectorF32Range(3),\n      sparseF32Range(),\n      'f32-only'\n    );\n  },\n  f32_vec3_non_const: () => {\n    return generateCasesF32(\n      sparseVectorF32Range(3),\n      sparseVectorF32Range(3),\n      sparseF32Range(),\n      'unfiltered'\n    );\n  },\n  f32_vec4_const: () => {\n    return generateCasesF32(\n      sparseVectorF32Range(4),\n      sparseVectorF32Range(4),\n      sparseF32Range(),\n      'f32-only'\n    );\n  },\n  f32_vec4_non_const: () => {\n    return generateCasesF32(\n      sparseVectorF32Range(4),\n      sparseVectorF32Range(4),\n      sparseF32Range(),\n      'unfiltered'\n    );\n  },\n});\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u => u.combine('inputSource', allInputSources).combine('vectorize', [2, 3, 4] as const))\n  .unimplemented();\n\ng.test('f32_vec2')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`f32 tests using vec2s`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get(\n      t.params.inputSource === 'const' ? 'f32_vec2_const' : 'f32_vec2_non_const'\n    );\n    await run(\n      t,\n      builtin('refract'),\n      [TypeVec(2, TypeF32), TypeVec(2, TypeF32), TypeF32],\n      TypeVec(2, TypeF32),\n      t.params,\n      cases\n    );\n  });\n\ng.test('f32_vec3')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`f32 tests using vec3s`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get(\n      t.params.inputSource === 'const' ? 'f32_vec3_const' : 'f32_vec3_non_const'\n    );\n    await run(\n      t,\n      builtin('refract'),\n      [TypeVec(3, TypeF32), TypeVec(3, TypeF32), TypeF32],\n      TypeVec(3, TypeF32),\n      t.params,\n      cases\n    );\n  });\n\ng.test('f32_vec4')\n  .specURL('https://www.w3.org/TR/WGSL/#numeric-builtin-functions')\n  .desc(`f32 tests using vec4s`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get(\n      t.params.inputSource === 'const' ? 'f32_vec4_const' : 'f32_vec4_non_const'\n    );\n    await run(\n      t,\n      builtin('refract'),\n      [TypeVec(4, TypeF32), TypeVec(4, TypeF32), TypeF32],\n      TypeVec(4, TypeF32),\n      t.params,\n      cases\n    );\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u => u.combine('inputSource', allInputSources).combine('vectorize', [2, 3, 4] as const))\n  .unimplemented();\n"],"mappings":"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"}