{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/ldexp.spec.ts"],"names":["description","makeTestGroup","GPUTest","correctlyRoundedThreshold","kValue","f32","i32","TypeF32","TypeI32","biasedRange","linearRange","quantizeToI32","run","builtin","g","test","uniqueId","specURL","desc","params","u","combine","undefined","fn","t","truthFunc","e1","e2","i32_e2","result","Math","pow","Number","isFinite","positive","max","min","input","expected","e1_range","concat","e2_range","map","x","round","cases","forEach","c","cfg","cmpFloats"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAFO,CAIP,SAASC,aAAT,QAA8B,kDAA9B;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,yBAAT,QAA0C,gCAA1C;AACA,SAASC,MAAT,QAAuB,kCAAvB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,OAAnB,EAA4BC,OAA5B,QAA2C,mCAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,aAAnC,QAAwD,6BAAxD;AACA,SAAuBC,GAAvB,QAAkC,qBAAlC;;AAEA,SAASC,OAAT,QAAwB,cAAxB;;AAEA,OAAO,MAAMC,CAAC,GAAGb,aAAa,CAACC,OAAD,CAAvB;;AAEPY,CAAC,CAACC,IAAF,CAAO,KAAP;AACGC,QADH,CACY,kBADZ;AAEGC,OAFH,CAEW,sEAFX;AAGGC,IAHH;AAIK;AACL;AACA;AACA,CAPA;;AASGC,MATH,CASU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,cADX,EAC2B,CAAC,SAAD,EAAY,WAAZ,EAAyB,YAAzB,CAD3B;AAEGA,OAFH,CAEW,WAFX,EAEwB,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAFxB,CAVJ;;AAcGC,EAdH,CAcM,OAAMC,CAAN,KAAW;AACb,QAAMC,SAAS,GAAG,CAACC,EAAD,EAAaC,EAAb,KAA8C;AAC9D,UAAMC,MAAM,GAAGjB,aAAa,CAACgB,EAAD,CAA5B;AACA,UAAME,MAAM,GAAGH,EAAE,GAAGI,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYH,MAAZ,CAApB;AACA;AACA,QAAI,CAACI,MAAM,CAACC,QAAP,CAAgBJ,MAAhB,CAAL,EAA8B;AAC5B,aAAOP,SAAP;AACD,KAFD,MAEO,IAAIO,MAAM,GAAGzB,MAAM,CAACC,GAAP,CAAW6B,QAAX,CAAoBC,GAAjC,EAAsC;AAC3C,aAAOb,SAAP;AACD,KAFM,MAEA,IAAIO,MAAM,GAAGzB,MAAM,CAACC,GAAP,CAAW6B,QAAX,CAAoBE,GAAjC,EAAsC;AAC3C,aAAOd,SAAP;AACD;AACD,WAAO,EAAEe,KAAK,EAAE,CAAChC,GAAG,CAACqB,EAAD,CAAJ,EAAUpB,GAAG,CAACqB,EAAD,CAAb,CAAT,EAA6BW,QAAQ,EAAEjC,GAAG,CAACwB,MAAD,CAA1C,EAAP;AACD,GAZD;;AAcA,MAAIU,QAAuB,GAAG,EAA9B;AACA;AACAA,EAAAA,QAAQ,GAAGA,QAAQ,CAACC,MAAT,CAAgB/B,WAAW,CAAC,CAAC,CAAF,EAAK,EAAE,KAAK,EAAP,CAAL,EAAiB,EAAjB,CAA3B,CAAX;AACA;AACA8B,EAAAA,QAAQ,GAAGA,QAAQ,CAACC,MAAT,CAAgB9B,WAAW,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,EAAR,CAA3B,CAAX;AACA;AACA6B,EAAAA,QAAQ,GAAGA,QAAQ,CAACC,MAAT,CAAgB9B,WAAW,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,CAA3B,CAAX;AACA;AACA6B,EAAAA,QAAQ,GAAGA,QAAQ,CAACC,MAAT,CAAgB/B,WAAW,CAAC,CAAD,EAAI,KAAK,EAAT,EAAa,EAAb,CAA3B,CAAX;;AAEA,MAAIgC,QAAuB,GAAG,EAA9B;AACA;AACAA,EAAAA,QAAQ,GAAGA,QAAQ,CAACD,MAAT,CAAgB/B,WAAW,CAAC,CAAD,EAAI,CAAC,GAAL,EAAU,EAAV,CAAX,CAAyBiC,GAAzB,CAA6B,CAAAC,CAAC,KAAIb,IAAI,CAACc,KAAL,CAAWD,CAAX,CAAlC,CAAhB,CAAX;AACA;AACAF,EAAAA,QAAQ,GAAGA,QAAQ,CAACD,MAAT,CAAgB/B,WAAW,CAAC,CAAD,EAAI,GAAJ,EAAS,EAAT,CAAX,CAAwBiC,GAAxB,CAA4B,CAAAC,CAAC,KAAIb,IAAI,CAACc,KAAL,CAAWD,CAAX,CAAjC,CAAhB,CAAX;;AAEA,MAAIE,KAAkB,GAAG,EAAzB;AACAN,EAAAA,QAAQ,CAACO,OAAT,CAAiB,CAAApB,EAAE,KAAI;AACrBe,IAAAA,QAAQ,CAACK,OAAT,CAAiB,CAAAnB,EAAE,KAAI;AACrB,YAAMoB,CAAC,GAAGtB,SAAS,CAACC,EAAD,EAAKC,EAAL,CAAnB;AACA,UAAIoB,CAAC,KAAKzB,SAAV,EAAqB;AACnBuB,QAAAA,KAAK,GAAGA,KAAK,CAACL,MAAN,CAAaO,CAAb,CAAR;AACD;AACF,KALD;AAMD,GAPD;AAQA,QAAMC,GAAW,GAAGxB,CAAC,CAACL,MAAtB;AACA6B,EAAAA,GAAG,CAACC,SAAJ,GAAgB9C,yBAAyB,EAAzC;AACAS,EAAAA,GAAG,CAACY,CAAD,EAAIX,OAAO,CAAC,OAAD,CAAX,EAAsB,CAACN,OAAD,EAAUC,OAAV,CAAtB,EAA0CD,OAA1C,EAAmDyC,GAAnD,EAAwDH,KAAxD,CAAH;AACD,CAzDH","sourcesContent":["export const description = `\nExecution Tests for the 'ldexp' builtin function\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { correctlyRoundedThreshold } from '../../../../../util/compare.js';\nimport { kValue } from '../../../../../util/constants.js';\nimport { f32, i32, TypeF32, TypeI32 } from '../../../../../util/conversion.js';\nimport { biasedRange, linearRange, quantizeToI32 } from '../../../../../util/math.js';\nimport { Case, Config, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('f32')\n  .uniqueId('358f6e4501a32907')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\nldexp:\nT is f32 or vecN<f32> I is i32 or vecN<i32>, where I is a scalar if T is a scalar, or a vector when T is a vector ldexp(e1: T ,e2: I ) -> T Returns e1 * 2e2. Component-wise when T is a vector. (GLSLstd450Ldexp)\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const truthFunc = (e1: number, e2: number): Case | undefined => {\n      const i32_e2 = quantizeToI32(e2);\n      const result = e1 * Math.pow(2, i32_e2);\n      // Unclear what the expected behaviour for values that overflow f32 bounds, see https://github.com/gpuweb/gpuweb/issues/2631\n      if (!Number.isFinite(result)) {\n        return undefined;\n      } else if (result > kValue.f32.positive.max) {\n        return undefined;\n      } else if (result < kValue.f32.positive.min) {\n        return undefined;\n      }\n      return { input: [f32(e1), i32(e2)], expected: f32(result) };\n    };\n\n    let e1_range: Array<number> = [];\n    //  -2^32 < x <= -1, biased towards -1\n    e1_range = e1_range.concat(biasedRange(-1, -(2 ** 32), 50));\n    // -1 <= x <= 0, linearly spread\n    e1_range = e1_range.concat(linearRange(-1, 0, 20));\n    // 0 <= x <= -1, linearly spread\n    e1_range = e1_range.concat(linearRange(0, 1, 20));\n    // 1 <= x < 2^32, biased towards 1\n    e1_range = e1_range.concat(biasedRange(1, 2 ** 32, 50));\n\n    let e2_range: Array<number> = [];\n    //  -127 < x <= 0, biased towards 0\n    e2_range = e2_range.concat(biasedRange(0, -127, 20).map(x => Math.round(x)));\n    //  0 <= x < 128, biased towards 0\n    e2_range = e2_range.concat(biasedRange(0, 128, 20).map(x => Math.round(x)));\n\n    let cases: Array<Case> = [];\n    e1_range.forEach(e1 => {\n      e2_range.forEach(e2 => {\n        const c = truthFunc(e1, e2);\n        if (c !== undefined) {\n          cases = cases.concat(c);\n        }\n      });\n    });\n    const cfg: Config = t.params;\n    cfg.cmpFloats = correctlyRoundedThreshold();\n    run(t, builtin('ldexp'), [TypeF32, TypeI32], TypeF32, cfg, cases);\n  });\n"],"file":"ldexp.spec.js"}