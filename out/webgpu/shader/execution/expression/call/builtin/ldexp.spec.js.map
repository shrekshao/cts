{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/ldexp.spec.ts"],"names":["description","makeTestGroup","GPUTest","f32","i32","TypeF32","TypeI32","ldexpInterval","fullF32Range","fullI32Range","quantizeToF32","quantizeToI32","allInputSources","run","builtin","g","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","makeCase","e1","e2","expected","input","cases","forEach","push"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAZO,CAcP,SAASC,aAAT,QAA8B,kDAA9B;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,OAAnB,EAA4BC,OAA5B,QAA2C,mCAA3C;AACA,SAASC,aAAT,QAA8B,qCAA9B;AACA;AACEC,YADF;AAEEC,YAFF;AAGEC,aAHF;AAIEC,aAJF;AAKO,6BALP;AAMA,SAASC,eAAT,EAAgCC,GAAhC,QAA2C,qBAA3C;;AAEA,SAASC,OAAT,QAAwB,cAAxB;;AAEA,OAAO,MAAMC,CAAC,GAAGd,aAAa,CAACC,OAAD,CAAvB;;AAEPa,CAAC,CAACC,IAAF,CAAO,gBAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH;AAGK;AACL,CAJA;;AAMGC,MANH,CAMU,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBT,eAAzB,EAA0CS,OAA1C,CAAkD,WAAlD,EAA+D,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAA/D,CAPJ;;AASGC,aATH;;AAWAR,CAAC,CAACC,IAAF,CAAO,KAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH,CAES,WAFT;AAGGC,MAHH,CAGU,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBT,eAAzB,EAA0CS,OAA1C,CAAkD,WAAlD,EAA+D,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAA/D,CAJJ;;AAMGE,EANH,CAMM,OAAMC,CAAN,KAAW;AACb,QAAMC,QAAQ,GAAG,CAACC,EAAD,EAAaC,EAAb,KAAkC;AACjD;AACA;AACAD,IAAAA,EAAE,GAAGjB,aAAa,CAACiB,EAAD,CAAlB;AACAC,IAAAA,EAAE,GAAGjB,aAAa,CAACiB,EAAD,CAAlB;AACA,UAAMC,QAAQ,GAAGtB,aAAa,CAACoB,EAAD,EAAKC,EAAL,CAA9B;AACA,WAAO,EAAEE,KAAK,EAAE,CAAC3B,GAAG,CAACwB,EAAD,CAAJ,EAAUvB,GAAG,CAACwB,EAAD,CAAb,CAAT,EAA6BC,QAA7B,EAAP;AACD,GAPD;;AASA,QAAME,KAAkB,GAAG,EAA3B;AACAvB,EAAAA,YAAY,GAAGwB,OAAf,CAAuB,CAAAL,EAAE,KAAI;AAC3BlB,IAAAA,YAAY,GAAGuB,OAAf,CAAuB,CAAAJ,EAAE,KAAI;AAC3BG,MAAAA,KAAK,CAACE,IAAN,CAAWP,QAAQ,CAACC,EAAD,EAAKC,EAAL,CAAnB;AACD,KAFD;AAGD,GAJD;AAKA,QAAMf,GAAG,CAACY,CAAD,EAAIX,OAAO,CAAC,OAAD,CAAX,EAAsB,CAACT,OAAD,EAAUC,OAAV,CAAtB,EAA0CD,OAA1C,EAAmDoB,CAAC,CAACN,MAArD,EAA6DY,KAA7D,CAAT;AACD,CAvBH;;AAyBAhB,CAAC,CAACC,IAAF,CAAO,KAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH,CAES,WAFT;AAGGC,MAHH,CAGU,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBT,eAAzB,EAA0CS,OAA1C,CAAkD,WAAlD,EAA+D,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAA/D,CAJJ;;AAMGC,aANH","sourcesContent":["export const description = `\nExecution tests for the 'ldexp' builtin function\n\nS is AbstractFloat, f32, f16\nT is S or vecN<S>\n\nK is AbstractInt, i32\nI is K or vecN<K>, where\n  I is a scalar if T is a scalar, or a vector when T is a vector\n\n@const fn ldexp(e1: T ,e2: I ) -> T\nReturns e1 * 2^e2. Component-wise when T is a vector.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { f32, i32, TypeF32, TypeI32 } from '../../../../../util/conversion.js';\nimport { ldexpInterval } from '../../../../../util/f32_interval.js';\nimport {\n  fullF32Range,\n  fullI32Range,\n  quantizeToF32,\n  quantizeToI32,\n} from '../../../../../util/math.js';\nimport { allInputSources, Case, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const makeCase = (e1: number, e2: number): Case => {\n      // Due to the heterogeneous types of the params to ldexp (f32 & i32),\n      // makeBinaryToF32IntervalCase cannot be used here.\n      e1 = quantizeToF32(e1);\n      e2 = quantizeToI32(e2);\n      const expected = ldexpInterval(e1, e2);\n      return { input: [f32(e1), i32(e2)], expected };\n    };\n\n    const cases: Array<Case> = [];\n    fullF32Range().forEach(e1 => {\n      fullI32Range().forEach(e2 => {\n        cases.push(makeCase(e1, e2));\n      });\n    });\n    await run(t, builtin('ldexp'), [TypeF32, TypeI32], TypeF32, t.params, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"file":"ldexp.spec.js"}