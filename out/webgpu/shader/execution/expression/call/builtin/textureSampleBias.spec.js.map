{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureSampleBias.spec.ts"],"names":["description","makeTestGroup","GPUTest","generateCoordBoundaries","generateOffsets","g","test","specURL","desc","params","u","combine","unimplemented","paramsSubcasesOnly","beginSubcases"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA,CANO,CAQP,SAASC,aAAT,QAA8B,kDAA9B;AACA,SAASC,OAAT,QAAwB,4BAAxB;;AAEA,SAASC,uBAAT,EAAkCC,eAAlC,QAAyD,YAAzD;;AAEA,OAAO,MAAMC,CAAC,GAAGJ,aAAa,CAACC,OAAD,CAAvB;;AAEPG,CAAC,CAACC,IAAF,CAAO,OAAP;AACGC,OADH,CACW,+CADX;AAEGC,IAFH;AAGK;AACL;AACA,CALA;;AAOGC,MAPH,CAOU,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAF,CAAU,OAAV,EAAmB,CAAC,UAAD,EAAa,QAAb,EAAuB,SAAvB,CAAnB,CAPf;AAQGC,aARH;;AAUAP,CAAC,CAACC,IAAF,CAAO,cAAP;AACGC,OADH,CACW,+CADX;AAEGC,IAFH;AAGK;AACL;AACA,CALA;;AAOGC,MAPH,CAOU,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAF,CAAU,OAAV,EAAmB,CAAC,UAAD,EAAa,QAAb,EAAuB,SAAvB,CAAnB,CAPf;AAQGC,aARH;;AAUAP,CAAC,CAACC,IAAF,CAAO,mBAAP;AACGC,OADH,CACW,+CADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAlBA;;AAoBGK,kBApBH,CAoBsB,CAAAH,CAAC;AACnBA,CAAC;AACEC,OADH,CACW,GADX,EACgB,CAAC,eAAD,EAAkB,QAAlB,EAA4B,eAA5B,CADhB;AAEGA,OAFH,CAEW,QAFX,EAEqBR,uBAAuB,CAAC,CAAD,CAF5C;AAGGQ,OAHH,CAGW,MAHX,EAGmB,CAAC,CAAC,IAAF,EAAQ,CAAC,EAAT,EAAa,CAAb,EAAgB,CAAhB,EAAmB,KAAnB,EAA0B,EAA1B,CAHnB;AAIGA,OAJH,CAIW,QAJX,EAIqBP,eAAe,CAAC,CAAD,CAJpC,CArBJ;;AA2BGQ,aA3BH;;AA6BAP,CAAC,CAACC,IAAF,CAAO,mBAAP;AACGC,OADH,CACW,+CADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAnBA;;AAqBGC,MArBH,CAqBU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,cADX,EAC2B,CAAC,YAAD,EAAe,cAAf,CAD3B;AAEGG,aAFH;AAGGH,OAHH,CAGW,GAHX,EAGgB,CAAC,eAAD,EAAkB,QAAlB,EAA4B,eAA5B,CAHhB;AAIGA,OAJH,CAIW,QAJX,EAIqBR,uBAAuB,CAAC,CAAD,CAJ5C;AAKGQ,OALH,CAKW,MALX,EAKmB,CAAC,CAAC,IAAF,EAAQ,CAAC,EAAT,EAAa,CAAb,EAAgB,CAAhB,EAAmB,KAAnB,EAA0B,EAA1B,CALnB;AAMGA,OANH,CAMW,QANX,EAMqBP,eAAe,CAAC,CAAD,CANpC,CAtBJ;;AA8BGQ,aA9BH;;AAgCAP,CAAC,CAACC,IAAF,CAAO,mBAAP;AACGC,OADH,CACW,+CADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CArBA;;AAuBGK,kBAvBH,CAuBsB,CAAAH,CAAC;AACnBA,CAAC;AACEC,OADH,CACW,GADX,EACgB,CAAC,eAAD,EAAkB,QAAlB,EAA4B,eAA5B,CADhB;AAEGA,OAFH,CAEW,QAFX,EAEqBR,uBAAuB,CAAC,CAAD,CAF5C;AAGGQ,OAHH,CAGW,GAHX,EAGgB,CAAC,KAAD,EAAQ,KAAR,CAHhB;AAIGA,OAJH,CAIW,SAJX,EAIsB,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,CAJtB;AAKE,yEALF;AAMGA,OANH,CAMW,MANX,EAMmB,CAAC,CAAC,IAAF,EAAQ,CAAC,EAAT,EAAa,CAAb,EAAgB,CAAhB,EAAmB,KAAnB,EAA0B,EAA1B,CANnB;AAOGA,OAPH,CAOW,QAPX,EAOqBP,eAAe,CAAC,CAAD,CAPpC,CAxBJ;;AAiCGQ,aAjCH;;AAmCAP,CAAC,CAACC,IAAF,CAAO,mBAAP;AACGC,OADH,CACW,+CADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CApBA;;AAsBGK,kBAtBH,CAsBsB,CAAAH,CAAC;AACnBA,CAAC;AACEC,OADH,CACW,GADX,EACgB,CAAC,eAAD,EAAkB,QAAlB,EAA4B,eAA5B,CADhB;AAEGA,OAFH,CAEW,QAFX,EAEqBR,uBAAuB,CAAC,CAAD,CAF5C;AAGGQ,OAHH,CAGW,GAHX,EAGgB,CAAC,KAAD,EAAQ,KAAR,CAHhB;AAIGA,OAJH,CAIW,SAJX,EAIsB,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,CAJtB;AAKE,yEALF;AAMGA,OANH,CAMW,MANX,EAMmB,CAAC,CAAC,IAAF,EAAQ,CAAC,EAAT,EAAa,CAAb,EAAgB,CAAhB,EAAmB,KAAnB,EAA0B,EAA1B,CANnB,CAvBJ;;AA+BGC,aA/BH","sourcesContent":["export const description = `\nExecution tests for the 'textureSampleBias' builtin function\n\nSamples a texture with a bias to the mip level.\nMust only be used in a fragment shader stage.\nMust only be invoked in uniform control flow.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\n\nimport { generateCoordBoundaries, generateOffsets } from './utils.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('stage')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplebias')\n  .desc(\n    `\nTests that 'textureSampleBias' can only be called in 'fragment' shaders.\n`\n  )\n  .params(u => u.combine('stage', ['fragment', 'vertex', 'compute'] as const))\n  .unimplemented();\n\ng.test('control_flow')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplebias')\n  .desc(\n    `\nTests that 'textureSampleBias' can only be called in uniform control flow.\n`\n  )\n  .params(u => u.combine('stage', ['fragment', 'vertex', 'compute'] as const))\n  .unimplemented();\n\ng.test('sampled_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplebias')\n  .desc(\n    `\nfn textureSampleBias(t: texture_2d<f32>, s: sampler, coords: vec2<f32>, bias: f32) -> vec4<f32>\nfn textureSampleBias(t: texture_2d<f32>, s: sampler, coords: vec2<f32>, bias: f32, offset: vec2<i32>) -> vec4<f32>\n\nParameters:\n * t: The sampled texture to read from\n * s: The sampler type\n * coords: The texture coordinates\n * bias: The bias to apply to the mip level before sampling. bias must be between -16.0 and 15.99.\n * offset:\n    - The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n      This offset is applied before applying any texture wrapping modes.\n    - The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    - Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n      .combine('coords', generateCoordBoundaries(2))\n      .combine('bias', [-16.1, -16, 0, 1, 15.99, 16] as const)\n      .combine('offset', generateOffsets(2))\n  )\n  .unimplemented();\n\ng.test('sampled_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplebias')\n  .desc(\n    `\nfn textureSampleBias(t: texture_3d<f32>, s: sampler, coords: vec3<f32>, bias: f32) -> vec4<f32>\nfn textureSampleBias(t: texture_3d<f32>, s: sampler, coords: vec3<f32>, bias: f32, offset: vec3<i32>) -> vec4<f32>\nfn textureSampleBias(t: texture_cube<f32>, s: sampler, coords: vec3<f32>, bias: f32) -> vec4<f32>\n\nParameters:\n * t: The sampled texture to read from\n * s: The sampler type\n * coords: The texture coordinates\n * bias: The bias to apply to the mip level before sampling. bias must be between -16.0 and 15.99.\n * offset:\n    - The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n      This offset is applied before applying any texture wrapping modes.\n    - The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    - Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .params(u =>\n    u\n      .combine('texture_type', ['texture_3d', 'texture_cube'] as const)\n      .beginSubcases()\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n      .combine('coords', generateCoordBoundaries(3))\n      .combine('bias', [-16.1, -16, 0, 1, 15.99, 16] as const)\n      .combine('offset', generateOffsets(3))\n  )\n  .unimplemented();\n\ng.test('arrayed_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplebias')\n  .desc(\n    `\nC: i32, u32\n\nfn textureSampleBias(t: texture_2d_array<f32>, s: sampler, coords: vec2<f32>, array_index: C, bias: f32) -> vec4<f32>\nfn textureSampleBias(t: texture_2d_array<f32>, s: sampler, coords: vec2<f32>, array_index: C, bias: f32, offset: vec2<i32>) -> vec4<f32>\n\nParameters:\n * t: The sampled texture to read from\n * s: The sampler type\n * coords: The texture coordinates\n * array_index: The 0-based texture array index to sample.\n * bias: The bias to apply to the mip level before sampling. bias must be between -16.0 and 15.99.\n * offset:\n    - The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n      This offset is applied before applying any texture wrapping modes.\n    - The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    - Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n      .combine('coords', generateCoordBoundaries(2))\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('C_value', [-1, 0, 1, 2, 3, 4] as const)\n      /* array_index not param'd as out-of-bounds is implementation specific */\n      .combine('bias', [-16.1, -16, 0, 1, 15.99, 16] as const)\n      .combine('offset', generateOffsets(2))\n  )\n  .unimplemented();\n\ng.test('arrayed_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplebias')\n  .desc(\n    `\nC: i32, u32\n\nfn textureSampleBias(t: texture_cube_array<f32>, s: sampler, coords: vec3<f32>, array_index: C, bias: f32) -> vec4<f32>\n\nParameters:\n * t: The sampled texture to read from\n * s: The sampler type\n * coords: The texture coordinates\n * array_index: The 0-based texture array index to sample.\n * bias: The bias to apply to the mip level before sampling. bias must be between -16.0 and 15.99.\n * offset:\n    - The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n      This offset is applied before applying any texture wrapping modes.\n    - The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    - Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n      .combine('coords', generateCoordBoundaries(3))\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('C_value', [-1, 0, 1, 2, 3, 4] as const)\n      /* array_index not param'd as out-of-bounds is implementation specific */\n      .combine('bias', [-16.1, -16, 0, 1, 15.99, 16] as const)\n  )\n  .unimplemented();\n"],"file":"textureSampleBias.spec.js"}