{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/max.spec.ts"],"names":["description","makeTestGroup","GPUTest","kValue","i32","TypeF32","TypeI32","TypeU32","u32","maxInterval","fullF32Range","allInputSources","makeBinaryToF32IntervalCase","run","builtin","generateTestCases","values","makeCase","cases","Array","forEach","e","f","push","g","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","x","y","input","expected","Math","max","test_values","numeric_range","f32","infinity","positive","negative","lhs","rhs"],"mappings":"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","sourcesContent":["export const description = `\nExecution tests for the 'max' builtin function\n\nS is AbstractInt, i32, or u32\nT is S or vecN<S>\n@const fn max(e1: T ,e2: T) -> T\nReturns e2 if e1 is less than e2, and e1 otherwise. Component-wise when T is a vector.\n\nS is AbstractFloat, f32, f16\nT is vecN<S>\n@const fn max(e1: T ,e2: T) -> T\nReturns e2 if e1 is less than e2, and e1 otherwise.\nIf one operand is a NaN, the other is returned.\nIf both operands are NaNs, a NaN is returned.\nComponent-wise when T is a vector.\n\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { kValue } from '../../../../../util/constants.js';\nimport { i32, TypeF32, TypeI32, TypeU32, u32 } from '../../../../../util/conversion.js';\nimport { maxInterval } from '../../../../../util/f32_interval.js';\nimport { fullF32Range } from '../../../../../util/math.js';\nimport { allInputSources, Case, makeBinaryToF32IntervalCase, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\n/** Generate set of max test cases from list of interesting values */\nfunction generateTestCases(\n  values: Array<number>,\n  makeCase: (x: number, y: number) => Case\n): Array<Case> {\n  const cases = new Array<Case>();\n  values.forEach(e => {\n    values.forEach(f => {\n      cases.push(makeCase(e, f));\n    });\n  });\n  return cases;\n}\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('abstract_int')\n  .specURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions')\n  .desc(`abstract int tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('u32')\n  .specURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions')\n  .desc(`u32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const makeCase = (x: number, y: number): Case => {\n      return { input: [u32(x), u32(y)], expected: u32(Math.max(x, y)) };\n    };\n\n    const test_values: Array<number> = [0, 1, 2, 0x70000000, 0x80000000, 0xffffffff];\n    const cases = generateTestCases(test_values, makeCase);\n\n    await run(t, builtin('max'), [TypeU32, TypeU32], TypeU32, t.params, cases);\n  });\n\ng.test('i32')\n  .specURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions')\n  .desc(`i32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const makeCase = (x: number, y: number): Case => {\n      return { input: [i32(x), i32(y)], expected: i32(Math.max(x, y)) };\n    };\n\n    const test_values: Array<number> = [-0x70000000, -2, -1, 0, 1, 2, 0x70000000];\n    const cases = generateTestCases(test_values, makeCase);\n\n    await run(t, builtin('max'), [TypeI32, TypeI32], TypeI32, t.params, cases);\n  });\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const makeCase = (x: number, y: number): Case => {\n      return makeBinaryToF32IntervalCase(x, y, maxInterval);\n    };\n\n    const cases: Array<Case> = [];\n    const numeric_range = fullF32Range();\n    numeric_range.push(kValue.f32.infinity.positive, kValue.f32.infinity.negative);\n    numeric_range.forEach(lhs => {\n      numeric_range.forEach(rhs => {\n        cases.push(makeCase(lhs, rhs));\n      });\n    });\n\n    await run(t, builtin('max'), [TypeF32, TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"file":"max.spec.js"}