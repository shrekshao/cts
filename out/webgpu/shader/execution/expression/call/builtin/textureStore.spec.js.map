{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureStore.spec.ts"],"names":["description","makeTestGroup","GPUTest","TexelFormats","generateCoordBoundaries","g","test","specURL","desc","params","u","combineWithParams","beginSubcases","combine","unimplemented"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbO,CAeP,SAASC,aAAT,QAA8B,kDAA9B;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,YAAT,QAA6B,sBAA7B;;AAEA,SAASC,uBAAT,QAAwC,YAAxC;;AAEA,OAAO,MAAMC,CAAC,GAAGJ,aAAa,CAACC,OAAD,CAAvB;;AAEPG,CAAC,CAACC,IAAF,CAAO,iBAAP;AACGC,OADH,CACW,0CADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbA;;AAeGC,MAfH,CAeU,CAAAC,CAAC;AACPA,CAAC;AACEC,iBADH,CACqBR,YADrB;AAEGS,aAFH;AAGGC,OAHH,CAGW,QAHX,EAGqBT,uBAAuB,CAAC,CAAD,CAH5C;AAIGS,OAJH,CAIW,GAJX,EAIgB,CAAC,KAAD,EAAQ,KAAR,CAJhB,CAhBJ;;AAsBGC,aAtBH;;AAwBAT,CAAC,CAACC,IAAF,CAAO,iBAAP;AACGC,OADH,CACW,0CADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbA;;AAeGC,MAfH,CAeU,CAAAC,CAAC;AACPA,CAAC;AACEC,iBADH,CACqBR,YADrB;AAEGS,aAFH;AAGGC,OAHH,CAGW,QAHX,EAGqBT,uBAAuB,CAAC,CAAD,CAH5C;AAIGS,OAJH,CAIW,GAJX,EAIgB,CAAC,KAAD,EAAQ,KAAR,CAJhB,CAhBJ;;AAsBGC,aAtBH;;AAwBAT,CAAC,CAACC,IAAF,CAAO,uBAAP;AACGC,OADH,CACW,0CADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAdA;;AAgBGC,MAhBH;AAiBI,CAAAC,CAAC;AACCA,CAAC;AACEC,iBADH,CACqBR,YADrB;AAEGS,aAFH;AAGGC,OAHH,CAGW,QAHX,EAGqBT,uBAAuB,CAAC,CAAD,CAH5C;AAIGS,OAJH,CAIW,GAJX,EAIgB,CAAC,KAAD,EAAQ,KAAR,CAJhB;AAKGA,OALH,CAKW,SALX,EAKsB,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,CALtB;AAMF,yEAxBJ;;AA0BGC,aA1BH;;AA4BAT,CAAC,CAACC,IAAF,CAAO,iBAAP;AACGC,OADH,CACW,0CADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbA;;AAeGC,MAfH,CAeU,CAAAC,CAAC;AACPA,CAAC;AACEC,iBADH,CACqBR,YADrB;AAEGS,aAFH;AAGGC,OAHH,CAGW,QAHX,EAGqBT,uBAAuB,CAAC,CAAD,CAH5C;AAIGS,OAJH,CAIW,GAJX,EAIgB,CAAC,KAAD,EAAQ,KAAR,CAJhB,CAhBJ;;AAsBGC,aAtBH","sourcesContent":["export const description = `\nWrites a single texel to a texture.\n\nThe channel format T depends on the storage texel format F.\nSee the texel format table for the mapping of texel format to channel format.\n\nNote: An out-of-bounds access occurs if:\n * any element of coords is outside the range [0, textureDimensions(t)) for the corresponding element, or\n * array_index is outside the range of [0, textureNumLayers(t))\n\nIf an out-of-bounds access occurs, the built-in function may do any of the following:\n * not be executed\n * store value to some in bounds texel\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { TexelFormats } from '../../../../types.js';\n\nimport { generateCoordBoundaries } from './utils.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('store_1d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturestore')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureStore(t: texture_storage_1d<F,write>, coords: C, value: vec4<T>)\n\nParameters:\n * t  The sampled, depth, or external texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * value The new texel value\n`\n  )\n  .params(u =>\n    u\n      .combineWithParams(TexelFormats)\n      .beginSubcases()\n      .combine('coords', generateCoordBoundaries(1))\n      .combine('C', ['i32', 'u32'] as const)\n  )\n  .unimplemented();\n\ng.test('store_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturestore')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureStore(t: texture_storage_2d<F,write>, coords: vec2<C>, value: vec4<T>)\n\nParameters:\n * t  The sampled, depth, or external texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * value The new texel value\n`\n  )\n  .params(u =>\n    u\n      .combineWithParams(TexelFormats)\n      .beginSubcases()\n      .combine('coords', generateCoordBoundaries(2))\n      .combine('C', ['i32', 'u32'] as const)\n  )\n  .unimplemented();\n\ng.test('store_array_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturestore')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureStore(t: texture_storage_2d_array<F,write>, coords: vec2<C>, array_index: C, value: vec4<T>)\n\nParameters:\n * t  The sampled, depth, or external texture to sample.\n * s  The sampler type.\n * array_index The 0-based texture array index\n * coords The texture coordinates used for sampling.\n * value The new texel value\n`\n  )\n  .params(\n    u =>\n      u\n        .combineWithParams(TexelFormats)\n        .beginSubcases()\n        .combine('coords', generateCoordBoundaries(2))\n        .combine('C', ['i32', 'u32'] as const)\n        .combine('C_value', [-1, 0, 1, 2, 3, 4] as const)\n    /* array_index not param'd as out-of-bounds is implementation specific */\n  )\n  .unimplemented();\n\ng.test('store_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturestore')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureStore(t: texture_storage_3d<F,write>, coords: vec3<C>, value: vec4<T>)\n\nParameters:\n * t  The sampled, depth, or external texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * value The new texel value\n`\n  )\n  .params(u =>\n    u\n      .combineWithParams(TexelFormats)\n      .beginSubcases()\n      .combine('coords', generateCoordBoundaries(3))\n      .combine('C', ['i32', 'u32'] as const)\n  )\n  .unimplemented();\n"],"file":"textureStore.spec.js"}