{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/ceil.spec.ts"],"names":["description","makeTestGroup","GPUTest","correctlyRoundedMatch","kBit","f32","f32Bits","TypeF32","fullF32Range","makeUnaryF32Case","run","builtin","g","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","cfg","cmpFloats","makeCase","x","Math","ceil","cases","input","expected","negative","max","min","positive","infinity","map"],"mappings":"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","sourcesContent":["export const description = `\nExecution tests for the 'ceil' builtin function\n\nS is AbstractFloat, f32, f16\nT is S or vecN<S>\n@const fn ceil(e: T ) -> T\nReturns the ceiling of e. Component-wise when T is a vector.\n\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { correctlyRoundedMatch } from '../../../../../util/compare.js';\nimport { kBit } from '../../../../../util/constants.js';\nimport { f32, f32Bits, TypeF32 } from '../../../../../util/conversion.js';\nimport { fullF32Range } from '../../../../../util/math.js';\nimport { Case, Config, makeUnaryF32Case, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f32 tests`)\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    cfg.cmpFloats = correctlyRoundedMatch();\n\n    const makeCase = (x: number): Case => {\n      return makeUnaryF32Case(x, Math.ceil);\n    };\n\n    const cases: Array<Case> = [\n      // Small positive numbers\n      { input: f32(0.1), expected: f32(1.0) },\n      { input: f32(0.9), expected: f32(1.0) },\n      { input: f32(1.1), expected: f32(2.0) },\n      { input: f32(1.9), expected: f32(2.0) },\n\n      // Small negative numbers\n      { input: f32(-0.1), expected: f32(0.0) },\n      { input: f32(-0.9), expected: f32(0.0) },\n      { input: f32(-1.1), expected: f32(-1.0) },\n      { input: f32(-1.9), expected: f32(-1.0) },\n\n      // Min and Max f32\n      { input: f32Bits(kBit.f32.negative.max), expected: f32(0.0) },\n      { input: f32Bits(kBit.f32.negative.min), expected: f32Bits(kBit.f32.negative.min) },\n      { input: f32Bits(kBit.f32.positive.min), expected: f32(1.0) },\n      { input: f32Bits(kBit.f32.positive.max), expected: f32Bits(kBit.f32.positive.max) },\n\n      // Infinity f32\n      { input: f32Bits(kBit.f32.infinity.negative), expected: f32Bits(kBit.f32.infinity.negative) },\n      { input: f32Bits(kBit.f32.infinity.positive), expected: f32Bits(kBit.f32.infinity.positive) },\n      ...fullF32Range().map(x => makeCase(x)),\n    ];\n\n    run(t, builtin('ceil'), [TypeF32], TypeF32, cfg, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"file":"ceil.spec.js"}