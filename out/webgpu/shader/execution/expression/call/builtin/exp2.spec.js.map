{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/exp2.spec.ts"],"names":["description","makeTestGroup","GPUTest","ulpCmp","kBit","kValue","f32","f32Bits","TypeF32","biasedRange","run","builtin","g","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","n","x","Math","abs","makeCase","expected","pow","input","cases","negative","min","infinity","positive","max","map"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAFO,CAIP,SAASC,aAAT,QAA8B,kDAA9B;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,MAAT,QAAuB,gCAAvB;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,kCAA7B;AACA,SAASC,GAAT,EAAcC,OAAd,EAAuBC,OAAvB,QAAsC,mCAAtC;AACA,SAASC,WAAT,QAA4B,6BAA5B;AACA,SAAeC,GAAf,QAA0B,qBAA1B;;AAEA,SAASC,OAAT,QAAwB,cAAxB;;AAEA,OAAO,MAAMC,CAAC,GAAGX,aAAa,CAACC,OAAD,CAAvB;;AAEPU,CAAC,CAACC,IAAF,CAAO,gBAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA,CAPA;;AASGC,MATH,CASU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,cADX,EAC2B,CAAC,SAAD,EAAY,WAAZ,EAAyB,YAAzB,CAD3B;AAEGA,OAFH,CAEW,WAFX,EAEwB,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAFxB,CAVJ;;AAcGC,aAdH;;AAgBAR,CAAC,CAACC,IAAF,CAAO,KAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA,CAPA;;AASGC,MATH,CASU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,cADX,EAC2B,CAAC,SAAD,EAAY,WAAZ,EAAyB,YAAzB,CAD3B;AAEGA,OAFH,CAEW,WAFX,EAEwB,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAFxB,CAVJ;;AAcGE,EAdH,CAcM,OAAMC,CAAN,KAAW;AACb,QAAMC,CAAC,GAAG,CAACC,CAAD,KAAuB;AAC/B,WAAO,IAAI,IAAIC,IAAI,CAACC,GAAL,CAASF,CAAT,CAAf;AACD,GAFD;;AAIA,QAAMG,QAAQ,GAAG,CAACH,CAAD,KAAqB;AACpC,UAAMI,QAAQ,GAAGtB,GAAG,CAACmB,IAAI,CAACI,GAAL,CAAS,CAAT,EAAYL,CAAZ,CAAD,CAApB;AACA,WAAO,EAAEM,KAAK,EAAExB,GAAG,CAACkB,CAAD,CAAZ,EAAiBI,QAAQ,EAAEzB,MAAM,CAACqB,CAAD,EAAII,QAAJ,EAAcL,CAAd,CAAjC,EAAP;AACD,GAHD;;AAKA;AACA,QAAMQ,KAAkB,GAAG;AACzBJ,EAAAA,QAAQ,CAAC,CAAD,CADiB,EACZ;AACbA,EAAAA,QAAQ,CAAC,CAAC,GAAF,CAFiB,EAET;AAChBA,EAAAA,QAAQ,CAACtB,MAAM,CAACC,GAAP,CAAW0B,QAAX,CAAoBC,GAArB,CAHiB,EAGU;AACnC,IAAEH,KAAK,EAAExB,GAAG,CAAC,GAAD,CAAZ,EAAmBsB,QAAQ,EAAErB,OAAO,CAACH,IAAI,CAACE,GAAL,CAAS4B,QAAT,CAAkBC,QAAnB,CAApC,EAJyB,EAI2C;AACpE,KAAG1B,WAAW,CAACJ,MAAM,CAACC,GAAP,CAAW0B,QAAX,CAAoBI,GAArB,EAA0B,CAAC,GAA3B,EAAgC,GAAhC,CAAX,CAAgDC,GAAhD,CAAoD,CAAAb,CAAC,KAAIG,QAAQ,CAACH,CAAD,CAAjE,CALsB;AAMzB,KAAGf,WAAW,CAACJ,MAAM,CAACC,GAAP,CAAW6B,QAAX,CAAoBF,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,CAAX,CAA+CI,GAA/C,CAAmD,CAAAb,CAAC,KAAIG,QAAQ,CAACH,CAAD,CAAhE,CANsB,CAA3B;;;AASAd,EAAAA,GAAG,CAACY,CAAD,EAAIX,OAAO,CAAC,MAAD,CAAX,EAAqB,CAACH,OAAD,CAArB,EAAgCA,OAAhC,EAAyCc,CAAC,CAACN,MAA3C,EAAmDe,KAAnD,CAAH;AACD,CAnCH;;AAqCAnB,CAAC,CAACC,IAAF,CAAO,KAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA,CAPA;;AASGC,MATH,CASU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,cADX,EAC2B,CAAC,SAAD,EAAY,WAAZ,EAAyB,YAAzB,CAD3B;AAEGA,OAFH,CAEW,WAFX,EAEwB,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAFxB,CAVJ;;AAcGC,aAdH","sourcesContent":["export const description = `\nExecution tests for the 'exp2' builtin function\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { ulpCmp } from '../../../../../util/compare.js';\nimport { kBit, kValue } from '../../../../../util/constants.js';\nimport { f32, f32Bits, TypeF32 } from '../../../../../util/conversion.js';\nimport { biasedRange } from '../../../../../util/math.js';\nimport { Case, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is AbstractFloat, f32, f16, vecN<AbstractFloat>, vecN<f32>, or vecN<f16>\n@const fn exp2(e: T ) -> T\nReturns 2 raised to the power e (e.g. 2^e). Component-wise when T is a vector.\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is AbstractFloat, f32, f16, vecN<AbstractFloat>, vecN<f32>, or vecN<f16>\n@const fn exp2(e: T ) -> T\nReturns 2 raised to the power e (e.g. 2^e). Component-wise when T is a vector.\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const n = (x: number): number => {\n      return 3 + 2 * Math.abs(x);\n    };\n\n    const makeCase = (x: number): Case => {\n      const expected = f32(Math.pow(2, x));\n      return { input: f32(x), expected: ulpCmp(x, expected, n) };\n    };\n\n    // floor(log2(max f32 value)) = 127, so exp2(127) will be within range of a f32, but exp2(128) will not\n    const cases: Array<Case> = [\n      makeCase(0), // Returns 1 by definition\n      makeCase(-127), // Returns subnormal value\n      makeCase(kValue.f32.negative.min), // Closest to returning 0 as possible\n      { input: f32(128), expected: f32Bits(kBit.f32.infinity.positive) }, // Overflows\n      ...biasedRange(kValue.f32.negative.max, -127, 100).map(x => makeCase(x)),\n      ...biasedRange(kValue.f32.positive.min, 127, 100).map(x => makeCase(x)),\n    ];\n\n    run(t, builtin('exp2'), [TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is AbstractFloat, f32, f16, vecN<AbstractFloat>, vecN<f32>, or vecN<f16>\n@const fn exp2(e: T ) -> T\nReturns 2 raised to the power e (e.g. 2^e). Component-wise when T is a vector.\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"file":"exp2.spec.js"}