{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/inversesqrt.spec.ts"],"names":["description","makeTestGroup","GPUTest","kValue","TypeF32","inverseSqrtInterval","biasedRange","linearRange","allInputSources","makeUnaryToF32IntervalCase","run","builtin","g","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","makeCase","x","cases","f32","positive","min","map"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,CAPO,CASP,SAASC,aAAT,QAA8B,kDAA9B;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,MAAT,QAAuB,kCAAvB;AACA,SAASC,OAAT,QAAwB,mCAAxB;AACA,SAASC,mBAAT,QAAoC,qCAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,6BAAzC;AACA,SAASC,eAAT,EAAgCC,0BAAhC,EAA4DC,GAA5D,QAAuE,qBAAvE;;AAEA,SAASC,OAAT,QAAwB,cAAxB;;AAEA,OAAO,MAAMC,CAAC,GAAGX,aAAa,CAACC,OAAD,CAAvB;;AAEPU,CAAC,CAACC,IAAF,CAAO,gBAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH,CAES,sBAFT;AAGGC,MAHH,CAGU,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBV,eAAzB,EAA0CU,OAA1C,CAAkD,WAAlD,EAA+D,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAA/D,CAJJ;;AAMGC,aANH;;AAQAR,CAAC,CAACC,IAAF,CAAO,KAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH,CAES,WAFT;AAGGC,MAHH,CAGU,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBV,eAAzB,EAA0CU,OAA1C,CAAkD,WAAlD,EAA+D,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAA/D,CAJJ;;AAMGE,EANH,CAMM,OAAMC,CAAN,KAAW;AACb,QAAMC,QAAQ,GAAG,CAACC,CAAD,KAAqB;AACpC,WAAOf,0BAA0B,CAACe,CAAD,EAAInB,mBAAJ,CAAjC;AACD,GAFD;;AAIA,QAAMoB,KAAkB,GAAG;AACzB;AACA,KAAGlB,WAAW,CAACJ,MAAM,CAACuB,GAAP,CAAWC,QAAX,CAAoBC,GAArB,EAA0B,CAA1B,EAA6B,GAA7B,CAFW;AAGzB;AACA,KAAGtB,WAAW,CAAC,CAAD,EAAI,KAAK,EAAT,EAAa,IAAb,CAJW;AAKzBuB,EAAAA,GALyB,CAKrB,CAAAL,CAAC,KAAID,QAAQ,CAACC,CAAD,CALQ,CAA3B;;AAOA,QAAMd,GAAG,CAACY,CAAD,EAAIX,OAAO,CAAC,aAAD,CAAX,EAA4B,CAACP,OAAD,CAA5B,EAAuCA,OAAvC,EAAgDkB,CAAC,CAACN,MAAlD,EAA0DS,KAA1D,CAAT;AACD,CAnBH;;AAqBAb,CAAC,CAACC,IAAF,CAAO,KAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH,CAES,WAFT;AAGGC,MAHH,CAGU,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBV,eAAzB,EAA0CU,OAA1C,CAAkD,WAAlD,EAA+D,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAA/D,CAJJ;;AAMGC,aANH","sourcesContent":["export const description = `\nExecution tests for the 'inverseSqrt' builtin function\n\nS is AbstractFloat, f32, f16\nT is S or vecN<S>\n@const fn inverseSqrt(e: T ) -> T\nReturns the reciprocal of sqrt(e). Component-wise when T is a vector.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { kValue } from '../../../../../util/constants.js';\nimport { TypeF32 } from '../../../../../util/conversion.js';\nimport { inverseSqrtInterval } from '../../../../../util/f32_interval.js';\nimport { biasedRange, linearRange } from '../../../../../util/math.js';\nimport { allInputSources, Case, makeUnaryToF32IntervalCase, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const makeCase = (x: number): Case => {\n      return makeUnaryToF32IntervalCase(x, inverseSqrtInterval);\n    };\n\n    const cases: Array<Case> = [\n      // 0 < x <= 1 linearly spread\n      ...linearRange(kValue.f32.positive.min, 1, 100),\n      // 1 <= x < 2^32, biased towards 1\n      ...biasedRange(1, 2 ** 32, 1000),\n    ].map(x => makeCase(x));\n\n    await run(t, builtin('inverseSqrt'), [TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"file":"inversesqrt.spec.js"}