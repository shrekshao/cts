{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/exp.spec.ts"],"names":["description","makeTestGroup","GPUTest","kValue","TypeF32","expInterval","biasedRange","linearRange","allInputSources","makeUnaryToF32IntervalCase","run","builtin","g","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","makeCase","x","cases","f32","negative","min","max","positive","map"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,CAPO,CASP,SAASC,aAAT,QAA8B,kDAA9B;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,MAAT,QAAuB,kCAAvB;AACA,SAASC,OAAT,QAAwB,mCAAxB;AACA,SAASC,WAAT,QAA4B,qCAA5B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,6BAAzC;AACA,SAASC,eAAT,EAAgCC,0BAAhC,EAA4DC,GAA5D,QAAuE,qBAAvE;;AAEA,SAASC,OAAT,QAAwB,cAAxB;;AAEA,OAAO,MAAMC,CAAC,GAAGX,aAAa,CAACC,OAAD,CAAvB;;AAEPU,CAAC,CAACC,IAAF,CAAO,gBAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH,CAES,sBAFT;AAGGC,MAHH,CAGU,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBV,eAAzB,EAA0CU,OAA1C,CAAkD,WAAlD,EAA+D,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAA/D,CAJJ;;AAMGC,aANH;;AAQAR,CAAC,CAACC,IAAF,CAAO,KAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH,CAES,WAFT;AAGGC,MAHH,CAGU,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBV,eAAzB,EAA0CU,OAA1C,CAAkD,WAAlD,EAA+D,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAA/D,CAJJ;;AAMGE,EANH,CAMM,OAAMC,CAAN,KAAW;AACb,QAAMC,QAAQ,GAAG,CAACC,CAAD,KAAqB;AACpC,WAAOf,0BAA0B,CAACe,CAAD,EAAInB,WAAJ,CAAjC;AACD,GAFD;;AAIA;AACA;AACA,QAAMoB,KAAkB,GAAG;AACzB,GADyB,EACtB;AACH,GAAC,EAFwB,EAEpB;AACLtB,EAAAA,MAAM,CAACuB,GAAP,CAAWC,QAAX,CAAoBC,GAHK,EAGA;AACzB,KAAGtB,WAAW,CAACH,MAAM,CAACuB,GAAP,CAAWC,QAAX,CAAoBE,GAArB,EAA0B,CAAC,EAA3B,EAA+B,GAA/B,CAJW;AAKzB,KAAGvB,WAAW,CAACH,MAAM,CAACuB,GAAP,CAAWI,QAAX,CAAoBF,GAArB,EAA0B,EAA1B,EAA8B,GAA9B,CALW;AAMzB,KAAGrB,WAAW,CAAC,EAAD,EAAK,GAAL,EAAU,EAAV,CANW,CAMI;AANJ,IAOzBwB,GAPyB,CAOrB,CAAAP,CAAC,KAAID,QAAQ,CAACC,CAAD,CAPQ,CAA3B;;AASA,QAAMd,GAAG,CAACY,CAAD,EAAIX,OAAO,CAAC,KAAD,CAAX,EAAoB,CAACP,OAAD,CAApB,EAA+BA,OAA/B,EAAwCkB,CAAC,CAACN,MAA1C,EAAkDS,KAAlD,CAAT;AACD,CAvBH;;AAyBAb,CAAC,CAACC,IAAF,CAAO,KAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH,CAES,WAFT;AAGGC,MAHH,CAGU,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBV,eAAzB,EAA0CU,OAA1C,CAAkD,WAAlD,EAA+D,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAA/D,CAJJ;;AAMGC,aANH","sourcesContent":["export const description = `\nExecution tests for the 'exp' builtin function\n\nS is AbstractFloat, f32, f16\nT is S or vecN<S>\n@const fn exp(e1: T ) -> T\nReturns the natural exponentiation of e1 (e.g. e^e1). Component-wise when T is a vector.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { kValue } from '../../../../../util/constants.js';\nimport { TypeF32 } from '../../../../../util/conversion.js';\nimport { expInterval } from '../../../../../util/f32_interval.js';\nimport { biasedRange, linearRange } from '../../../../../util/math.js';\nimport { allInputSources, Case, makeUnaryToF32IntervalCase, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const makeCase = (x: number): Case => {\n      return makeUnaryToF32IntervalCase(x, expInterval);\n    };\n\n    // floor(ln(max f32 value)) = 88, so exp(88) will be within range of a f32, but exp(89) will not\n    // floor(ln(max f64 value)) = 709, so exp(709) can be handled by the testing framework, but exp(710) will misbehave\n    const cases: Array<Case> = [\n      0, // Returns 1 by definition\n      -89, // Returns subnormal value\n      kValue.f32.negative.min, // Closest to returning 0 as possible\n      ...biasedRange(kValue.f32.negative.max, -88, 100),\n      ...biasedRange(kValue.f32.positive.min, 88, 100),\n      ...linearRange(89, 709, 10), // Overflows f32, but not f64\n    ].map(x => makeCase(x));\n\n    await run(t, builtin('exp'), [TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"file":"exp.spec.js"}