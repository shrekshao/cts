{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureSampleCompare.spec.ts"],"names":["description","makeTestGroup","GPUTest","generateCoordBoundaries","generateOffsets","g","test","specURL","desc","params","u","combine","unimplemented","paramsSubcasesOnly"],"mappings":"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","sourcesContent":["export const description = `\nSamples a depth texture and compares the sampled depth values against a reference value.\n\nMust only be used in a fragment shader stage.\nMust only be invoked in uniform control flow.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\n\nimport { generateCoordBoundaries, generateOffsets } from './utils.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('stage')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplecompare')\n  .desc(\n    `\nTests that 'textureSampleCompare' can only be called in 'fragment' shaders.\n`\n  )\n  .params(u => u.combine('stage', ['fragment', 'vertex', 'compute'] as const))\n  .unimplemented();\n\ng.test('control_flow')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplecompare')\n  .desc(\n    `\nTests that 'textureSampleCompare' can only be called in uniform control flow.\n`\n  )\n  .params(u => u.combine('stage', ['fragment', 'vertex', 'compute'] as const))\n  .unimplemented();\n\ng.test('2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplecompare')\n  .desc(\n    `\nfn textureSampleCompare(t: texture_depth_2d, s: sampler_comparison, coords: vec2<f32>, depth_ref: f32) -> f32\nfn textureSampleCompare(t: texture_depth_2d, s: sampler_comparison, coords: vec2<f32>, depth_ref: f32, offset: vec2<i32>) -> f32\n\nParameters:\n * t  The depth texture to sample.\n * s  The sampler_comparision type.\n * coords The texture coordinates used for sampling.\n * depth_ref The reference value to compare the sampled depth value against.\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n      .combine('coords', generateCoordBoundaries(2))\n      .combine('depth_ref', [-1 /* smaller ref */, 0 /* equal ref */, 1 /* larger ref */] as const)\n      .combine('offset', generateOffsets(2))\n  )\n  .unimplemented();\n\ng.test('3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplecompare')\n  .desc(\n    `\nfn textureSampleCompare(t: texture_depth_cube, s: sampler_comparison, coords: vec3<f32>, depth_ref: f32) -> f32\n\nParameters:\n * t  The depth texture to sample.\n * s  The sampler_comparision type.\n * coords The texture coordinates used for sampling.\n * depth_ref The reference value to compare the sampled depth value against.\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n      .combine('coords', generateCoordBoundaries(3))\n      .combine('depth_ref', [-1 /* smaller ref */, 0 /* equal ref */, 1 /* larger ref */] as const)\n  )\n  .unimplemented();\n\ng.test('arrayed_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplecompare')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureSampleCompare(t: texture_depth_2d_array, s: sampler_comparison, coords: vec2<f32>, array_index: C, depth_ref: f32) -> f32\nfn textureSampleCompare(t: texture_depth_2d_array, s: sampler_comparison, coords: vec2<f32>, array_index: C, depth_ref: f32, offset: vec2<i32>) -> f32\n\nParameters:\n * t  The depth texture to sample.\n * s  The sampler_comparision type.\n * coords The texture coordinates used for sampling.\n * array_index: The 0-based texture array index to sample.\n * depth_ref The reference value to compare the sampled depth value against.\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n      .combine('coords', generateCoordBoundaries(2))\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('C_value', [-1, 0, 1, 2, 3, 4] as const)\n      /* array_index not param'd as out-of-bounds is implementation specific */\n      .combine('depth_ref', [-1 /* smaller ref */, 0 /* equal ref */, 1 /* larger ref */] as const)\n      .combine('offset', generateOffsets(2))\n  )\n  .unimplemented();\n\ng.test('arrayed_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplecompare')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureSampleCompare(t: texture_depth_cube_array, s: sampler_comparison, coords: vec3<f32>, array_index: C, depth_ref: f32) -> f32\n\nParameters:\n * t  The depth texture to sample.\n * s  The sampler_comparision type.\n * coords The texture coordinates used for sampling.\n * array_index: The 0-based texture array index to sample.\n * depth_ref The reference value to compare the sampled depth value against.\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n      .combine('coords', generateCoordBoundaries(3))\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('C_value', [-1, 0, 1, 2, 3, 4] as const)\n      /* array_index not param'd as out-of-bounds is implementation specific */\n      .combine('depth_ref', [-1 /* smaller ref */, 0 /* equal ref */, 1 /* larger ref */] as const)\n  )\n  .unimplemented();\n"],"file":"textureSampleCompare.spec.js"}