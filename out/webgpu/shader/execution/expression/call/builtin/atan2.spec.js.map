{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/atan2.spec.ts"],"names":["description","makeTestGroup","assert","GPUTest","ulpThreshold","f32","TypeF32","fullF32Range","run","builtin","g","test","uniqueId","specURL","desc","params","u","combine","undefined","fn","t","makeCase","y","x","input","expected","Math","atan2","numeric_range","neg_norm","neg_sub","pos_sub","pos_norm","filter","cases","map","forEach","y_idx","x_idx","push","cfg","cmpFloats"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAFO,CAIP,SAASC,aAAT,QAA8B,kDAA9B;AACA,SAASC,MAAT,QAAuB,uCAAvB;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,YAAT,QAA6B,gCAA7B;AACA,SAASC,GAAT,EAAcC,OAAd,QAA6B,mCAA7B;AACA,SAASC,YAAT,QAA6B,6BAA7B;AACA,SAAuBC,GAAvB,QAAkC,qBAAlC;;AAEA,SAASC,OAAT,QAAwB,cAAxB;;AAEA,OAAO,MAAMC,CAAC,GAAGT,aAAa,CAACE,OAAD,CAAvB;;AAEPO,CAAC,CAACC,IAAF,CAAO,KAAP;AACGC,QADH,CACY,kBADZ;AAEGC,OAFH,CAEW,sEAFX;AAGGC,IAHH;AAIK;AACL;AACA;AACA;AACA;AACA,CATA;;AAWGC,MAXH,CAWU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,cADX,EAC2B,CAAC,SAAD,EAAY,WAAZ,EAAyB,YAAzB,CAD3B;AAEGA,OAFH,CAEW,WAFX,EAEwB,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAFxB,CAZJ;;AAgBGC,EAhBH,CAgBM,OAAMC,CAAN,KAAW;AACb;AACA,QAAMC,QAAQ,GAAG,CAACC,CAAD,EAAYC,CAAZ,KAAgC;AAC/CrB,IAAAA,MAAM,CAACqB,CAAC,KAAK,CAAP,EAAU,8BAAV,CAAN;AACA,WAAO,EAAEC,KAAK,EAAE,CAACnB,GAAG,CAACiB,CAAD,CAAJ,EAASjB,GAAG,CAACkB,CAAD,CAAZ,CAAT,EAA2BE,QAAQ,EAAEpB,GAAG,CAACqB,IAAI,CAACC,KAAL,CAAWL,CAAX,EAAcC,CAAd,CAAD,CAAxC,EAAP;AACD,GAHD;;AAKA,QAAMK,aAAa,GAAGrB,YAAY,CAAC;AACjCsB,IAAAA,QAAQ,EAAE,IADuB;AAEjCC,IAAAA,OAAO,EAAE,GAFwB;AAGjCC,IAAAA,OAAO,EAAE,GAHwB;AAIjCC,IAAAA,QAAQ,EAAE,IAJuB,EAAD,CAAZ;AAKnBC,EAAAA,MALmB,CAKZ,CAAAV,CAAC,KAAI;AACb,WAAOA,CAAC,KAAK,CAAb;AACD,GAPqB,CAAtB;;AASA,QAAMW,KAAkB,GAAGN,aAAa,CAACO,GAAd,CAAkB,CAAAZ,CAAC,KAAIF,QAAQ,CAAC,GAAD,EAAME,CAAN,CAA/B,CAA3B;AACAK,EAAAA,aAAa,CAACQ,OAAd,CAAsB,CAACd,CAAD,EAAIe,KAAJ,KAAc;AAClCT,IAAAA,aAAa,CAACQ,OAAd,CAAsB,CAACb,CAAD,EAAIe,KAAJ,KAAc;AAClC,UAAIA,KAAK,IAAID,KAAb,EAAoB;AAClBH,QAAAA,KAAK,CAACK,IAAN,CAAWlB,QAAQ,CAACC,CAAD,EAAIC,CAAJ,CAAnB;AACD;AACF,KAJD;AAKD,GAND;AAOA,QAAMiB,GAAW,GAAGpB,CAAC,CAACL,MAAtB;AACAyB,EAAAA,GAAG,CAACC,SAAJ,GAAgBrC,YAAY,CAAC,IAAD,CAA5B;AACAI,EAAAA,GAAG,CAACY,CAAD,EAAIX,OAAO,CAAC,OAAD,CAAX,EAAsB,CAACH,OAAD,EAAUA,OAAV,CAAtB,EAA0CA,OAA1C,EAAmDkC,GAAnD,EAAwDN,KAAxD,CAAH;AACD,CA3CH","sourcesContent":["export const description = `\nExecution Tests for the 'atan2' builtin function\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { assert } from '../../../../../../common/util/util.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { ulpThreshold } from '../../../../../util/compare.js';\nimport { f32, TypeF32 } from '../../../../../util/conversion.js';\nimport { fullF32Range } from '../../../../../util/math.js';\nimport { Case, Config, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('f32')\n  .uniqueId('cc85953f226ac95c')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\natan2:\nT is f32 or vecN<f32> atan2(e1: T ,e2: T ) -> T Returns the arc tangent of e1 over e2. Component-wise when T is a vector. (GLSLstd450Atan2)\n\nTODO(#792): Decide what the ground-truth is for these tests. [1]\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    // [1]: Need to decide what the ground-truth is.\n    const makeCase = (y: number, x: number): Case => {\n      assert(x !== 0, 'atan2 is undefined for x = 0');\n      return { input: [f32(y), f32(x)], expected: f32(Math.atan2(y, x)) };\n    };\n\n    const numeric_range = fullF32Range({\n      neg_norm: 1000,\n      neg_sub: 100,\n      pos_sub: 100,\n      pos_norm: 1000,\n    }).filter(x => {\n      return x !== 0;\n    });\n\n    const cases: Array<Case> = numeric_range.map(x => makeCase(0.0, x));\n    numeric_range.forEach((y, y_idx) => {\n      numeric_range.forEach((x, x_idx) => {\n        if (x_idx >= y_idx) {\n          cases.push(makeCase(y, x));\n        }\n      });\n    });\n    const cfg: Config = t.params;\n    cfg.cmpFloats = ulpThreshold(4096);\n    run(t, builtin('atan2'), [TypeF32, TypeF32], TypeF32, cfg, cases);\n  });\n"],"file":"atan2.spec.js"}