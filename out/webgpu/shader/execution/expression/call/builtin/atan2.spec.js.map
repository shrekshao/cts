{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/atan2.spec.ts"],"names":["description","makeTestGroup","GPUTest","anyOf","ulpMatch","f64","TypeF32","fullF32Range","isSubnormalNumber","makeBinaryF32Case","run","builtin","g","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","cfg","cmpFloats","makeCase","y","x","c","Math","atan2","expected","PI","numeric_range","neg_norm","neg_sub","pos_sub","pos_norm","cases","forEach","y_idx","x_idx","push"],"mappings":"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","sourcesContent":["export const description = `\nExecution tests for the 'atan2' builtin function\n\nS is AbstractFloat, f32, f16\nT is S or vecN<S>\n@const fn atan2(e1: T ,e2: T ) -> T\nReturns the arc tangent of e1 over e2. Component-wise when T is a vector.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { anyOf, ulpMatch } from '../../../../../util/compare.js';\nimport { f64, TypeF32 } from '../../../../../util/conversion.js';\nimport { fullF32Range, isSubnormalNumber } from '../../../../../util/math.js';\nimport { Case, Config, makeBinaryF32Case, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nf32 tests\n\nTODO(#792): Decide what the ground-truth is for these tests. [1]\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    cfg.cmpFloats = ulpMatch(4096);\n\n    // [1]: Need to decide what the ground-truth is.\n    const makeCase = (y: number, x: number): Case => {\n      const c = makeBinaryF32Case(y, x, Math.atan2, true);\n      if (isSubnormalNumber(y)) {\n        // If y is subnormal, also expect possible results of atan2(0, x)\n        c.expected = anyOf(c.expected, f64(0), f64(Math.PI), f64(-Math.PI));\n      }\n      return c;\n    };\n\n    const numeric_range = fullF32Range({\n      neg_norm: 100,\n      neg_sub: 10,\n      pos_sub: 10,\n      pos_norm: 100,\n    });\n\n    const cases: Array<Case> = [];\n    numeric_range.forEach((y, y_idx) => {\n      numeric_range.forEach((x, x_idx) => {\n        // atan2(y, 0) is not well defined, so skipping those cases\n        if (!isSubnormalNumber(x)) {\n          if (x_idx >= y_idx) {\n            cases.push(makeCase(y, x));\n          }\n        }\n      });\n    });\n    run(t, builtin('atan2'), [TypeF32, TypeF32], TypeF32, cfg, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"file":"atan2.spec.js"}