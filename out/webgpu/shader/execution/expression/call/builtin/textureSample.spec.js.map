{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureSample.spec.ts"],"names":["description","makeTestGroup","GPUTest","generateCoordBoundaries","generateOffsets","g","test","specURL","desc","params","u","combine","unimplemented","paramsSubcasesOnly","beginSubcases"],"mappings":"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","sourcesContent":["export const description = `\nSamples a texture.\n\nMust only be used in a fragment shader stage.\nMust only be invoked in uniform control flow.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\n\nimport { generateCoordBoundaries, generateOffsets } from './utils.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('stage')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesample')\n  .desc(\n    `\nTests that 'textureSample' can only be called in 'fragment' shaders.\n`\n  )\n  .params(u => u.combine('stage', ['fragment', 'vertex', 'compute'] as const))\n  .unimplemented();\n\ng.test('control_flow')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesample')\n  .desc(\n    `\nTests that 'textureSample' can only be called in uniform control flow.\n`\n  )\n  .params(u => u.combine('stage', ['fragment', 'vertex', 'compute'] as const))\n  .unimplemented();\n\ng.test('sampled_1d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesample')\n  .desc(\n    `\nfn textureSample(t: texture_1d<f32>, s: sampler, coords: f32) -> vec4<f32>\n\nParameters:\n * t  The sampled, depth, or external texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('coords', generateCoordBoundaries(1))\n  )\n  .unimplemented();\n\ng.test('sampled_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesample')\n  .desc(\n    `\nfn textureSample(t: texture_2d<f32>, s: sampler, coords: vec2<f32>) -> vec4<f32>\nfn textureSample(t: texture_2d<f32>, s: sampler, coords: vec2<f32>, offset: vec2<i32>) -> vec4<f32>\n\nParameters:\n * t  The sampled, depth, or external texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('coords', generateCoordBoundaries(2))\n      .combine('offset', generateOffsets(2))\n  )\n  .unimplemented();\n\ng.test('sampled_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesample')\n  .desc(\n    `\nfn textureSample(t: texture_3d<f32>, s: sampler, coords: vec3<f32>) -> vec4<f32>\nfn textureSample(t: texture_3d<f32>, s: sampler, coords: vec3<f32>, offset: vec3<i32>) -> vec4<f32>\nfn textureSample(t: texture_cube<f32>, s: sampler, coords: vec3<f32>) -> vec4<f32>\n\nParameters:\n * t  The sampled, depth, or external texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .params(u =>\n    u\n      .combine('texture_type', ['texture_3d', 'texture_cube'] as const)\n      .beginSubcases()\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('coords', generateCoordBoundaries(3))\n      .combine('offset', generateOffsets(3))\n  )\n  .unimplemented();\n\ng.test('depth_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesample')\n  .desc(\n    `\nfn textureSample(t: texture_depth_2d, s: sampler, coords: vec2<f32>) -> f32\nfn textureSample(t: texture_depth_2d, s: sampler, coords: vec2<f32>, offset: vec2<i32>) -> f32\n\nParameters:\n * t  The sampled, depth, or external texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('coords', generateCoordBoundaries(2))\n      .combine('offset', generateOffsets(2))\n  )\n  .unimplemented();\n\ng.test('sampled_array_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesample')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureSample(t: texture_2d_array<f32>, s: sampler, coords: vec2<f32>, array_index: C) -> vec4<f32>\nfn textureSample(t: texture_2d_array<f32>, s: sampler, coords: vec2<f32>, array_index: C, offset: vec2<i32>) -> vec4<f32>\n\nParameters:\n * t  The sampled, depth, or external texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * array_index The 0-based texture array index to sample.\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('C_value', [-1, 0, 1, 2, 3, 4] as const)\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('coords', generateCoordBoundaries(2))\n      /* array_index not param'd as out-of-bounds is implementation specific */\n      .combine('offset', generateOffsets(2))\n  )\n  .unimplemented();\n\ng.test('sampled_array_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesample')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureSample(t: texture_cube_array<f32>, s: sampler, coords: vec3<f32>, array_index: C) -> vec4<f32>\n\nParameters:\n * t  The sampled, depth, or external texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * array_index The 0-based texture array index to sample.\n`\n  )\n  .paramsSubcasesOnly(\n    u =>\n      u\n        .combine('C', ['i32', 'u32'] as const)\n        .combine('C_value', [-1, 0, 1, 2, 3, 4] as const)\n        .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n        .combine('coords', generateCoordBoundaries(3))\n    /* array_index not param'd as out-of-bounds is implementation specific */\n  )\n  .unimplemented();\n\ng.test('depth_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesample')\n  .desc(\n    `\nfn textureSample(t: texture_depth_cube, s: sampler, coords: vec3<f32>) -> f32\n\nParameters:\n * t  The sampled, depth, or external texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('coords', generateCoordBoundaries(3))\n  )\n  .unimplemented();\n\ng.test('depth_array_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesample')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureSample(t: texture_depth_2d_array, s: sampler, coords: vec2<f32>, array_index: C) -> f32\nfn textureSample(t: texture_depth_2d_array, s: sampler, coords: vec2<f32>, array_index: C, offset: vec2<i32>) -> f32\n\nParameters:\n * t  The sampled, depth, or external texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * array_index The 0-based texture array index to sample.\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('C_value', [-1, 0, 1, 2, 3, 4] as const)\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n      .combine('coords', generateCoordBoundaries(2))\n      /* array_index not param'd as out-of-bounds is implementation specific */\n      .combine('offset', generateOffsets(2))\n  )\n  .unimplemented();\n\ng.test('depth_array_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesample')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureSample(t: texture_depth_cube_array, s: sampler, coords: vec3<f32>, array_index: C) -> f32\n\nParameters:\n * t  The sampled, depth, or external texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * array_index The 0-based texture array index to sample.\n`\n  )\n  .paramsSubcasesOnly(\n    u =>\n      u\n        .combine('C', ['i32', 'u32'] as const)\n        .combine('C_value', [-1, 0, 1, 2, 3, 4] as const)\n        .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'] as const)\n        .combine('coords', generateCoordBoundaries(3))\n    /* array_index not param'd as out-of-bounds is implementation specific */\n  )\n  .unimplemented();\n"],"file":"textureSample.spec.js"}