{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureDimension.spec.ts"],"names":["description","makeTestGroup","GPUTest","g","test","specURL","desc","params","u","combine","beginSubcases","undefined","unimplemented"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,CAPO,CASP,SAASC,aAAT,QAA8B,kDAA9B;AACA,SAASC,OAAT,QAAwB,4BAAxB;;AAEA,OAAO,MAAMC,CAAC,GAAGF,aAAa,CAACC,OAAD,CAAvB;;AAEPC,CAAC,CAACC,IAAF,CAAO,SAAP;AACGC,OADH,CACW,+CADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAzBA;;AA2BGC,MA3BH,CA2BU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,cADX,EAC2B;AACvB,YADuB;AAEvB,YAFuB;AAGvB,kBAHuB;AAIvB,YAJuB;AAKvB,cALuB;AAMvB,oBANuB;AAOvB,yBAPuB,CAD3B;;AAUGC,aAVH;AAWGD,OAXH,CAWW,cAXX,EAW2B,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CAX3B;AAYGA,OAZH,CAYW,OAZX,EAYoB,CAACE,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,kBAAlB,EAAsC,oBAAtC,CAZpB,CA5BJ;;AA0CGC,aA1CH;;AA4CAT,CAAC,CAACC,IAAF,CAAO,OAAP;AACGC,OADH,CACW,+CADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAnBA;;AAqBGC,MArBH,CAqBU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,cADX,EAC2B;AACvB,kBADuB;AAEvB,wBAFuB;AAGvB,oBAHuB;AAIvB,0BAJuB;AAKvB,+BALuB,CAD3B;;AAQGC,aARH;AASGD,OATH,CASW,OATX,EASoB,CAACE,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,kBAAlB,EAAsC,oBAAtC,CATpB,CAtBJ;;AAiCGC,aAjCH;;AAmCAT,CAAC,CAACC,IAAF,CAAO,SAAP;AACGC,OADH,CACW,+CADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA7BA;;AA+BGC,MA/BH,CA+BU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,cADX,EAC2B;AACvB,YADuB;AAEvB,YAFuB;AAGvB,WAHuB;AAIvB,WAJuB;AAKvB,YALuB;AAMvB,YANuB;AAOvB,aAPuB;AAQvB,SARuB;AASvB,SATuB;AAUvB,UAVuB;AAWvB,UAXuB;AAYvB,UAZuB;AAavB,WAbuB;AAcvB,YAduB;AAevB,YAfuB;AAgBvB,aAhBuB,CAD3B;;AAmBGC,aAnBH;AAoBGD,OApBH,CAoBW,aApBX,EAoB0B,CAAC,MAAD,EAAS,OAAT,EAAkB,YAAlB,CApB1B,CAhCJ;;AAsDGG,aAtDH;;AAwDAT,CAAC,CAACC,IAAF,CAAO,UAAP;AACGC,OADH,CACW,+CADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA;AACA,CARA;;AAUGM,aAVH","sourcesContent":["export const description = `\nExecution tests for the 'textureDimension' builtin function\n\nThe dimensions of the texture in texels.\nFor textures based on cubes, the results are the dimensions of each face of the cube.\nCube faces are square, so the x and y components of the result are equal.\nIf level is outside the range [0, textureNumLevels(t)) then any valid value for the return type may be returned.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('sampled')\n  .specURL('https://www.w3.org/TR/WGSL/#texturedimensions')\n  .desc(\n    `\nT: f32, i32, u32\n\nfn textureDimensions(t: texture_1d<T>) -> u32\nfn textureDimensions(t: texture_1d<T>, level: u32) -> u32\nfn textureDimensions(t: texture_2d<T>) -> vec2<u32>\nfn textureDimensions(t: texture_2d<T>, level: u32) -> vec2<u32>\nfn textureDimensions(t: texture_2d_array<T>) -> vec2<u32>\nfn textureDimensions(t: texture_2d_array<T>, level: u32) -> vec2<u32>\nfn textureDimensions(t: texture_3d<T>) -> vec3<u32>\nfn textureDimensions(t: texture_3d<T>, level: u32) -> vec3<u32>\nfn textureDimensions(t: texture_cube<T>) -> vec2<u32>\nfn textureDimensions(t: texture_cube<T>, level: u32) -> vec2<u32>\nfn textureDimensions(t: texture_cube_array<T>) -> vec2<u32>\nfn textureDimensions(t: texture_cube_array<T>, level: u32) -> vec2<u32>\nfn textureDimensions(t: texture_multisampled_2d<T>)-> vec2<u32>\n\nParameters:\n * t: the sampled texture\n * level:\n   - The mip level, with level 0 containing a full size version of the texture.\n   - If omitted, the dimensions of level 0 are returned.\n`\n  )\n  .params(u =>\n    u\n      .combine('texture_type', [\n        'texture_1d',\n        'texture_2d',\n        'texture_2d_array',\n        'texture_3d',\n        'texture_cube',\n        'texture_cube_array',\n        'texture_multisampled_2d',\n      ] as const)\n      .beginSubcases()\n      .combine('sampled_type', ['f32', 'i32', 'u32'] as const)\n      .combine('level', [undefined, 0, 1, 'textureNumLevels', 'textureNumLevels+1'] as const)\n  )\n  .unimplemented();\n\ng.test('depth')\n  .specURL('https://www.w3.org/TR/WGSL/#texturedimensions')\n  .desc(\n    `\nfn textureDimensions(t: texture_depth_2d) -> vec2<u32>\nfn textureDimensions(t: texture_depth_2d, level: u32) -> vec2<u32>\nfn textureDimensions(t: texture_depth_2d_array) -> vec2<u32>\nfn textureDimensions(t: texture_depth_2d_array, level: u32) -> vec2<u32>\nfn textureDimensions(t: texture_depth_cube) -> vec2<u32>\nfn textureDimensions(t: texture_depth_cube, level: u32) -> vec2<u32>\nfn textureDimensions(t: texture_depth_cube_array) -> vec2<u32>\nfn textureDimensions(t: texture_depth_cube_array, level: u32) -> vec2<u32>\nfn textureDimensions(t: texture_depth_multisampled_2d)-> vec2<u32>\n\nParameters:\n * t: the depth or multisampled texture\n * level:\n   - The mip level, with level 0 containing a full size version of the texture.\n   - If omitted, the dimensions of level 0 are returned.\n`\n  )\n  .params(u =>\n    u\n      .combine('texture_type', [\n        'texture_depth_2d',\n        'texture_depth_2d_array',\n        'texture_depth_cube',\n        'texture_depth_cube_array',\n        'texture_depth_multisampled_2d',\n      ])\n      .beginSubcases()\n      .combine('level', [undefined, 0, 1, 'textureNumLevels', 'textureNumLevels+1'] as const)\n  )\n  .unimplemented();\n\ng.test('storage')\n  .specURL('https://www.w3.org/TR/WGSL/#texturedimensions')\n  .desc(\n    `\nF: rgba8unorm\n   rgba8snorm\n   rgba8uint\n   rgba8sint\n   rgba16uint\n   rgba16sint\n   rgba16float\n   r32uint\n   r32sint\n   r32float\n   rg32uint\n   rg32sint\n   rg32float\n   rgba32uint\n   rgba32sint\n   rgba32float\nA: read, write, read_write\n\nfn textureDimensions(t: texture_storage_1d<F,A>) -> u32\nfn textureDimensions(t: texture_storage_2d<F,A>) -> vec2<u32>\nfn textureDimensions(t: texture_storage_2d_array<F,A>) -> vec2<u32>\nfn textureDimensions(t: texture_storage_3d<F,A>) -> vec3<u32>\n\nParameters:\n * t: the storage texture\n`\n  )\n  .params(u =>\n    u\n      .combine('texel_format', [\n        'rgba8unorm',\n        'rgba8snorm',\n        'rgba8uint',\n        'rgba8sint',\n        'rgba16uint',\n        'rgba16sint',\n        'rgba16float',\n        'r32uint',\n        'r32sint',\n        'r32float',\n        'rg32uint',\n        'rg32sint',\n        'rg32float',\n        'rgba32uint',\n        'rgba32sint',\n        'rgba32float',\n      ] as const)\n      .beginSubcases()\n      .combine('access_mode', ['read', 'write', 'read_write'] as const)\n  )\n  .unimplemented();\n\ng.test('external')\n  .specURL('https://www.w3.org/TR/WGSL/#texturedimensions')\n  .desc(\n    `\nfn textureDimensions(t: texture_external) -> vec2<u32>\n\nParameters:\n * t: the external texture\n`\n  )\n  .unimplemented();\n"],"file":"textureDimension.spec.js"}