{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/atan.spec.ts"],"names":["description","makeTestGroup","GPUTest","ulpThreshold","kBit","kValue","f32","f32Bits","TypeF32","biasedRange","linearRange","run","builtin","g","test","uniqueId","specURL","desc","params","u","combine","undefined","fn","t","makeCase","x","input","expected","Math","atan","cases","infinity","negative","PI","sqrt","positive","min","max","zero","concat","map","cfg","cmpFloats"],"mappings":"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","sourcesContent":["export const description = `\nExecution Tests for the 'atan' builtin function\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { ulpThreshold } from '../../../../../util/compare.js';\nimport { kBit, kValue } from '../../../../../util/constants.js';\nimport { f32, f32Bits, TypeF32 } from '../../../../../util/conversion.js';\nimport { biasedRange, linearRange } from '../../../../../util/math.js';\nimport { Case, Config, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('f32')\n  .uniqueId('b13828d6243d13dd')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\natan:\nT is f32 or vecN<f32> atan(e: T ) -> T Returns the arc tangent of e. Component-wise when T is a vector. (GLSLstd450Atan)\n\nTODO(#792): Decide what the ground-truth is for these tests. [1]\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    // [1]: Need to decide what the ground-truth is.\n    const makeCase = (x: number): Case => {\n      return { input: f32(x), expected: f32(Math.atan(x)) };\n    };\n\n    // Well defined/border cases\n    let cases: Array<Case> = [\n      { input: f32Bits(kBit.f32.infinity.negative), expected: f32(-Math.PI / 2) },\n      { input: f32(-Math.sqrt(3)), expected: f32(-Math.PI / 3) },\n      { input: f32(-1), expected: f32(-Math.PI / 4) },\n      { input: f32(-Math.sqrt(3) / 3), expected: f32(-Math.PI / 6) },\n      { input: f32(Math.sqrt(3) / 3), expected: f32(Math.PI / 6) },\n      { input: f32(1), expected: f32(Math.PI / 4) },\n      { input: f32(Math.sqrt(3)), expected: f32(Math.PI / 3) },\n      { input: f32Bits(kBit.f32.infinity.positive), expected: f32(Math.PI / 2) },\n\n      // Zero-like cases\n      { input: f32(0), expected: f32(0) },\n      { input: f32Bits(kBit.f32.positive.min), expected: f32(0) },\n      { input: f32Bits(kBit.f32.negative.max), expected: f32(0) },\n      { input: f32Bits(kBit.f32.positive.zero), expected: f32(0) },\n      { input: f32Bits(kBit.f32.negative.zero), expected: f32(0) },\n      { input: f32Bits(kBit.f32.positive.min), expected: f32Bits(kBit.f32.positive.min) },\n      { input: f32Bits(kBit.f32.negative.max), expected: f32Bits(kBit.f32.negative.max) },\n      { input: f32Bits(kBit.f32.positive.min), expected: f32Bits(kBit.f32.negative.max) },\n      { input: f32Bits(kBit.f32.negative.max), expected: f32Bits(kBit.f32.positive.min) },\n      { input: f32Bits(kBit.f32.positive.zero), expected: f32Bits(kBit.f32.positive.zero) },\n      { input: f32Bits(kBit.f32.negative.zero), expected: f32Bits(kBit.f32.negative.zero) },\n      { input: f32Bits(kBit.f32.positive.zero), expected: f32Bits(kBit.f32.negative.zero) },\n      { input: f32Bits(kBit.f32.negative.zero), expected: f32Bits(kBit.f32.positive.zero) },\n    ];\n\n    //  -2^32 < x <= -1, biased towards -1\n    cases = cases.concat(biasedRange(-1, -(2 ** 32), 1000).map(x => makeCase(x)));\n    // -1 <= x < 0, linearly spread\n    cases = cases.concat(linearRange(-1, kValue.f32.negative.max, 100).map(x => makeCase(x)));\n    // 0 < x <= 1, linearly spread\n    cases = cases.concat(linearRange(kValue.f32.positive.min, 1, 100).map(x => makeCase(x)));\n    // 1 <= x < 2^32, biased towards 1\n    cases = cases.concat(biasedRange(1, 2 ** 32, 1000).map(x => makeCase(x)));\n\n    const cfg: Config = t.params;\n    cfg.cmpFloats = ulpThreshold(4096);\n    run(t, builtin('atan'), [TypeF32], TypeF32, cfg, cases);\n  });\n"],"file":"atan.spec.js"}