{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/atan.spec.ts"],"names":["description","makeTestGroup","GPUTest","ulpMatch","kBit","f32","f32Bits","TypeF32","fullF32Range","makeUnaryF32Case","run","builtin","g","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","makeCase","x","Math","atan","cases","input","infinity","negative","expected","PI","sqrt","positive","min","max","zero","neg_norm","neg_sub","pos_sub","pos_norm","map","cfg","cmpFloats"],"mappings":"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","sourcesContent":["export const description = `\nExecution tests for the 'atan' builtin function\n\nS is AbstractFloat, f32, f16\nT is S or vecN<S>\n@const fn atan(e: T ) -> T\nReturns the arc tangent of e. Component-wise when T is a vector.\n\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { ulpMatch } from '../../../../../util/compare.js';\nimport { kBit } from '../../../../../util/constants.js';\nimport { f32, f32Bits, TypeF32 } from '../../../../../util/conversion.js';\nimport { fullF32Range } from '../../../../../util/math.js';\nimport { Case, Config, makeUnaryF32Case, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nf32 tests\n\nTODO(#792): Decide what the ground-truth is for these tests. [1]\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    // [1]: Need to decide what the ground-truth is.\n    const makeCase = (x: number): Case => {\n      return makeUnaryF32Case(x, Math.atan);\n    };\n    const cases: Array<Case> = [\n      { input: f32Bits(kBit.f32.infinity.negative), expected: f32(-Math.PI / 2) },\n      { input: f32(-Math.sqrt(3)), expected: f32(-Math.PI / 3) },\n      { input: f32(-1), expected: f32(-Math.PI / 4) },\n      { input: f32(-Math.sqrt(3) / 3), expected: f32(-Math.PI / 6) },\n      { input: f32(Math.sqrt(3) / 3), expected: f32(Math.PI / 6) },\n      { input: f32(1), expected: f32(Math.PI / 4) },\n      { input: f32(Math.sqrt(3)), expected: f32(Math.PI / 3) },\n      { input: f32Bits(kBit.f32.infinity.positive), expected: f32(Math.PI / 2) },\n\n      // Zero-like cases\n      { input: f32(0), expected: f32(0) },\n      { input: f32Bits(kBit.f32.positive.min), expected: f32(0) },\n      { input: f32Bits(kBit.f32.negative.max), expected: f32(0) },\n      { input: f32Bits(kBit.f32.positive.zero), expected: f32(0) },\n      { input: f32Bits(kBit.f32.negative.zero), expected: f32(0) },\n      { input: f32Bits(kBit.f32.positive.min), expected: f32Bits(kBit.f32.positive.min) },\n      { input: f32Bits(kBit.f32.negative.max), expected: f32Bits(kBit.f32.negative.max) },\n      { input: f32Bits(kBit.f32.positive.min), expected: f32Bits(kBit.f32.negative.max) },\n      { input: f32Bits(kBit.f32.negative.max), expected: f32Bits(kBit.f32.positive.min) },\n      { input: f32Bits(kBit.f32.positive.zero), expected: f32Bits(kBit.f32.positive.zero) },\n      { input: f32Bits(kBit.f32.negative.zero), expected: f32Bits(kBit.f32.negative.zero) },\n      { input: f32Bits(kBit.f32.positive.zero), expected: f32Bits(kBit.f32.negative.zero) },\n      { input: f32Bits(kBit.f32.negative.zero), expected: f32Bits(kBit.f32.positive.zero) },\n      ...fullF32Range({ neg_norm: 1000, neg_sub: 100, pos_sub: 100, pos_norm: 1000 }).map(x =>\n        makeCase(x)\n      ),\n    ];\n\n    const cfg: Config = t.params;\n    cfg.cmpFloats = ulpMatch(4096);\n    run(t, builtin('atan'), [TypeF32], TypeF32, cfg, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"file":"atan.spec.js"}