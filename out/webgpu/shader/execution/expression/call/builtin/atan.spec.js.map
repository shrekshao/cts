{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/atan.spec.ts"],"names":["description","makeTestGroup","GPUTest","ulpThreshold","kBit","f32","f32Bits","TypeF32","fullF32Range","run","builtin","g","test","uniqueId","specURL","desc","params","u","combine","undefined","fn","t","makeCase","x","input","expected","Math","atan","cases","infinity","negative","PI","sqrt","positive","min","max","zero","neg_norm","neg_sub","pos_sub","pos_norm","map","cfg","cmpFloats"],"mappings":"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","sourcesContent":["export const description = `\nExecution Tests for the 'atan' builtin function\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { ulpThreshold } from '../../../../../util/compare.js';\nimport { kBit } from '../../../../../util/constants.js';\nimport { f32, f32Bits, TypeF32 } from '../../../../../util/conversion.js';\nimport { fullF32Range } from '../../../../../util/math.js';\nimport { Case, Config, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('f32')\n  .uniqueId('b13828d6243d13dd')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\natan:\nT is f32 or vecN<f32> atan(e: T ) -> T Returns the arc tangent of e. Component-wise when T is a vector. (GLSLstd450Atan)\n\nTODO(#792): Decide what the ground-truth is for these tests. [1]\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    // [1]: Need to decide what the ground-truth is.\n    const makeCase = (x: number): Case => {\n      return { input: f32(x), expected: f32(Math.atan(x)) };\n    };\n\n    // Well defined/border cases\n    const cases: Array<Case> = [\n      { input: f32Bits(kBit.f32.infinity.negative), expected: f32(-Math.PI / 2) },\n      { input: f32(-Math.sqrt(3)), expected: f32(-Math.PI / 3) },\n      { input: f32(-1), expected: f32(-Math.PI / 4) },\n      { input: f32(-Math.sqrt(3) / 3), expected: f32(-Math.PI / 6) },\n      { input: f32(Math.sqrt(3) / 3), expected: f32(Math.PI / 6) },\n      { input: f32(1), expected: f32(Math.PI / 4) },\n      { input: f32(Math.sqrt(3)), expected: f32(Math.PI / 3) },\n      { input: f32Bits(kBit.f32.infinity.positive), expected: f32(Math.PI / 2) },\n\n      // Zero-like cases\n      { input: f32(0), expected: f32(0) },\n      { input: f32Bits(kBit.f32.positive.min), expected: f32(0) },\n      { input: f32Bits(kBit.f32.negative.max), expected: f32(0) },\n      { input: f32Bits(kBit.f32.positive.zero), expected: f32(0) },\n      { input: f32Bits(kBit.f32.negative.zero), expected: f32(0) },\n      { input: f32Bits(kBit.f32.positive.min), expected: f32Bits(kBit.f32.positive.min) },\n      { input: f32Bits(kBit.f32.negative.max), expected: f32Bits(kBit.f32.negative.max) },\n      { input: f32Bits(kBit.f32.positive.min), expected: f32Bits(kBit.f32.negative.max) },\n      { input: f32Bits(kBit.f32.negative.max), expected: f32Bits(kBit.f32.positive.min) },\n      { input: f32Bits(kBit.f32.positive.zero), expected: f32Bits(kBit.f32.positive.zero) },\n      { input: f32Bits(kBit.f32.negative.zero), expected: f32Bits(kBit.f32.negative.zero) },\n      { input: f32Bits(kBit.f32.positive.zero), expected: f32Bits(kBit.f32.negative.zero) },\n      { input: f32Bits(kBit.f32.negative.zero), expected: f32Bits(kBit.f32.positive.zero) },\n      ...fullF32Range({ neg_norm: 1000, neg_sub: 100, pos_sub: 100, pos_norm: 1000 }).map(x =>\n        makeCase(x)\n      ),\n    ];\n\n    const cfg: Config = t.params;\n    cfg.cmpFloats = ulpThreshold(4096);\n    run(t, builtin('atan'), [TypeF32], TypeF32, cfg, cases);\n  });\n"],"file":"atan.spec.js"}