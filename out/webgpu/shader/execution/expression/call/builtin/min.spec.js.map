{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/min.spec.ts"],"names":["description","makeTestGroup","GPUTest","anyOf","correctlyRoundedThreshold","kBit","f32","f32Bits","i32","i32Bits","TypeF32","TypeI32","TypeU32","u32","isSubnormalScalar","run","builtin","g","generateTestCases","test_values","cases","Array","forEach","e","ei","f","fi","precise_expected","expected","push","input","test","uniqueId","specURL","desc","params","u","combine","undefined","fn","t","cfg","cmpFloats","infinity","negative","min","max","subnormal","positive"],"mappings":"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","sourcesContent":["export const description = `\nExecution Tests for the 'min' builtin function\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { anyOf, correctlyRoundedThreshold } from '../../../../../util/compare.js';\nimport { kBit } from '../../../../../util/constants.js';\nimport {\n  f32,\n  f32Bits,\n  i32,\n  i32Bits,\n  Scalar,\n  TypeF32,\n  TypeI32,\n  TypeU32,\n  u32,\n} from '../../../../../util/conversion.js';\nimport { isSubnormalScalar } from '../../../../../util/math.js';\nimport { Case, Config, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n/** Generate set of min test cases from an ascending list of values */\nfunction generateTestCases(test_values: Array<Scalar>): Array<Case> {\n  const cases = new Array<Case>();\n  test_values.forEach((e, ei) => {\n    test_values.forEach((f, fi) => {\n      const precise_expected = ei <= fi ? e : f;\n      const expected = isSubnormalScalar(precise_expected)\n        ? anyOf(precise_expected, f32(0.0))\n        : precise_expected;\n      cases.push({ input: [e, f], expected });\n    });\n  });\n  return cases;\n}\n\ng.test('u32')\n  .uniqueId('29aba7ede5b93cdd')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#integer-builtin-functions')\n  .desc(\n    `\nunsigned min:\nT is u32 or vecN<u32> min(e1: T ,e2: T) -> T Returns e1 if e1 is less than e2, and e2 otherwise. Component-wise when T is a vector. (GLSLstd450UMin)\n\nPlease read the following guidelines before contributing:\nhttps://github.com/gpuweb/cts/blob/main/docs/plan_autogen.md\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    cfg.cmpFloats = correctlyRoundedThreshold();\n\n    // This array must be strictly increasing, since that ordering determines\n    // the expected values.\n    const test_values: Array<Scalar> = [\n      u32(0),\n      u32(1),\n      u32(2),\n      u32(0x70000000),\n      u32(0x80000000),\n      u32(0xffffffff),\n    ];\n\n    run(t, builtin('min'), [TypeU32, TypeU32], TypeU32, cfg, generateTestCases(test_values));\n  });\n\ng.test('i32')\n  .uniqueId('60c8ecdf409b45fc')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#integer-builtin-functions')\n  .desc(\n    `\nsigned min:\nT is i32 or vecN<i32> min(e1: T ,e2: T) -> T Returns e1 if e1 is less than e2, and e2 otherwise. Component-wise when T is a vector. (GLSLstd45SUMin)\n\nPlease read the following guidelines before contributing:\nhttps://github.com/gpuweb/cts/blob/main/docs/plan_autogen.md\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    cfg.cmpFloats = correctlyRoundedThreshold();\n\n    // This array must be strictly increasing, since that ordering determines\n    // the expected values.\n    const test_values: Array<Scalar> = [\n      i32Bits(0x80000000),\n      i32(-2),\n      i32(-1),\n      i32(0),\n      i32(1),\n      i32(2),\n      i32Bits(0x70000000),\n    ];\n\n    run(t, builtin('min'), [TypeI32, TypeI32], TypeI32, cfg, generateTestCases(test_values));\n  });\n\ng.test('f32')\n  .uniqueId('53efc46faad0f380')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\nmin:\nT is f32 or vecN<f32> min(e1: T ,e2: T ) -> T Returns e2 if e2 is less than e1, and e1 otherwise. If one operand is a NaN, the other is returned. If both operands are NaNs, a NaN is returned. Component-wise when T is a vector. (GLSLstd450NMin)\n\nPlease read the following guidelines before contributing:\nhttps://github.com/gpuweb/cts/blob/main/docs/plan_autogen.md\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    cfg.cmpFloats = correctlyRoundedThreshold();\n\n    // This array must be strictly increasing, since that ordering determines\n    // the expected values.\n    const test_values: Array<Scalar> = [\n      f32Bits(kBit.f32.infinity.negative),\n      f32Bits(kBit.f32.negative.min),\n      f32(-10.0),\n      f32(-1.0),\n      f32Bits(kBit.f32.negative.max),\n      f32Bits(kBit.f32.subnormal.negative.min),\n      f32Bits(kBit.f32.subnormal.negative.max),\n      f32(0.0),\n      f32Bits(kBit.f32.subnormal.positive.min),\n      f32Bits(kBit.f32.subnormal.positive.max),\n      f32Bits(kBit.f32.positive.min),\n      f32(1.0),\n      f32(10.0),\n      f32Bits(kBit.f32.positive.max),\n      f32Bits(kBit.f32.infinity.positive),\n    ];\n\n    run(t, builtin('min'), [TypeF32, TypeF32], TypeF32, cfg, generateTestCases(test_values));\n  });\n"],"file":"min.spec.js"}