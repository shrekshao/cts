{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/min.spec.ts"],"names":["description","makeTestGroup","GPUTest","correctlyRoundedMatch","kBit","kValue","i32","TypeF32","TypeI32","TypeU32","u32","uint32ToFloat32","makeBinaryF32Case","run","builtin","g","generateTestCases","values","makeCase","cases","Array","forEach","e","f","push","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","cfg","cmpFloats","x","y","input","expected","Math","min","test_values","f32","infinity","negative","max","subnormal","positive"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAfO,CAiBP,SAASC,aAAT,QAA8B,kDAA9B;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,qBAAT,QAAsC,gCAAtC;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,kCAA7B;AACA;AACEC,GADF;AAEEC,OAFF;AAGEC,OAHF;AAIEC,OAJF;AAKEC,GALF;AAMEC,eANF;AAOO,mCAPP;AAQA,SAAuBC,iBAAvB,EAA0CC,GAA1C,QAAqD,qBAArD;;AAEA,SAASC,OAAT,QAAwB,cAAxB;;AAEA,OAAO,MAAMC,CAAC,GAAGd,aAAa,CAACC,OAAD,CAAvB;;AAEP;AACA,SAASc,iBAAT;AACEC,MADF;AAEEC,QAFF;AAGe;AACb,QAAMC,KAAK,GAAG,IAAIC,KAAJ,EAAd;AACAH,EAAAA,MAAM,CAACI,OAAP,CAAe,CAAAC,CAAC,KAAI;AAClBL,IAAAA,MAAM,CAACI,OAAP,CAAe,CAAAE,CAAC,KAAI;AAClBJ,MAAAA,KAAK,CAACK,IAAN,CAAWN,QAAQ,CAACI,CAAD,EAAIC,CAAJ,CAAnB;AACD,KAFD;AAGD,GAJD;AAKA,SAAOJ,KAAP;AACD;;AAEDJ,CAAC,CAACU,IAAF,CAAO,cAAP;AACGC,OADH,CACW,uDADX;AAEGC,IAFH,CAES,oBAFT;AAGGC,MAHH,CAGU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,cADX,EAC2B,CAAC,SAAD,EAAY,WAAZ,EAAyB,YAAzB,CAD3B;AAEGA,OAFH,CAEW,WAFX,EAEwB,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAFxB,CAJJ;;AAQGC,aARH;;AAUAjB,CAAC,CAACU,IAAF,CAAO,KAAP;AACGC,OADH,CACW,uDADX;AAEGC,IAFH,CAES,WAFT;AAGGC,MAHH,CAGU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,cADX,EAC2B,CAAC,SAAD,EAAY,WAAZ,EAAyB,YAAzB,CAD3B;AAEGA,OAFH,CAEW,WAFX,EAEwB,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAFxB,CAJJ;;AAQGE,EARH,CAQM,OAAMC,CAAN,KAAW;AACb,QAAMC,GAAW,GAAGD,CAAC,CAACN,MAAtB;AACAO,EAAAA,GAAG,CAACC,SAAJ,GAAgBjC,qBAAqB,EAArC;;AAEA,QAAMe,QAAQ,GAAG,CAACmB,CAAD,EAAYC,CAAZ,KAAgC;AAC/C,WAAO,EAAEC,KAAK,EAAE,CAAC7B,GAAG,CAAC2B,CAAD,CAAJ,EAAS3B,GAAG,CAAC4B,CAAD,CAAZ,CAAT,EAA2BE,QAAQ,EAAE9B,GAAG,CAAC+B,IAAI,CAACC,GAAL,CAASL,CAAT,EAAYC,CAAZ,CAAD,CAAxC,EAAP;AACD,GAFD;;AAIA,QAAMK,WAA0B,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,UAAV,EAAsB,UAAtB,EAAkC,UAAlC,CAAnC;AACA,QAAMxB,KAAK,GAAGH,iBAAiB,CAAC2B,WAAD,EAAczB,QAAd,CAA/B;;AAEAL,EAAAA,GAAG,CAACqB,CAAD,EAAIpB,OAAO,CAAC,KAAD,CAAX,EAAoB,CAACL,OAAD,EAAUA,OAAV,CAApB,EAAwCA,OAAxC,EAAiD0B,GAAjD,EAAsDhB,KAAtD,CAAH;AACD,CApBH;;AAsBAJ,CAAC,CAACU,IAAF,CAAO,KAAP;AACGC,OADH,CACW,uDADX;AAEGC,IAFH,CAES,WAFT;AAGGC,MAHH,CAGU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,cADX,EAC2B,CAAC,SAAD,EAAY,WAAZ,EAAyB,YAAzB,CAD3B;AAEGA,OAFH,CAEW,WAFX,EAEwB,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAFxB,CAJJ;;AAQGE,EARH,CAQM,OAAMC,CAAN,KAAW;AACb,QAAMC,GAAW,GAAGD,CAAC,CAACN,MAAtB;AACAO,EAAAA,GAAG,CAACC,SAAJ,GAAgBjC,qBAAqB,EAArC;;AAEA,QAAMe,QAAQ,GAAG,CAACmB,CAAD,EAAYC,CAAZ,KAAgC;AAC/C,WAAO,EAAEC,KAAK,EAAE,CAACjC,GAAG,CAAC+B,CAAD,CAAJ,EAAS/B,GAAG,CAACgC,CAAD,CAAZ,CAAT,EAA2BE,QAAQ,EAAElC,GAAG,CAACmC,IAAI,CAACC,GAAL,CAASL,CAAT,EAAYC,CAAZ,CAAD,CAAxC,EAAP;AACD,GAFD;;AAIA,QAAMK,WAA0B,GAAG,CAAC,CAAC,UAAF,EAAc,CAAC,CAAf,EAAkB,CAAC,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,UAA/B,CAAnC;AACA,QAAMxB,KAAK,GAAGH,iBAAiB,CAAC2B,WAAD,EAAczB,QAAd,CAA/B;;AAEAL,EAAAA,GAAG,CAACqB,CAAD,EAAIpB,OAAO,CAAC,KAAD,CAAX,EAAoB,CAACN,OAAD,EAAUA,OAAV,CAApB,EAAwCA,OAAxC,EAAiD2B,GAAjD,EAAsDhB,KAAtD,CAAH;AACD,CApBH;;AAsBAJ,CAAC,CAACU,IAAF,CAAO,gBAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH,CAES,sBAFT;AAGGC,MAHH,CAGU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,cADX,EAC2B,CAAC,SAAD,EAAY,WAAZ,EAAyB,YAAzB,CAD3B;AAEGA,OAFH,CAEW,WAFX,EAEwB,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAFxB,CAJJ;;AAQGC,aARH;;AAUAjB,CAAC,CAACU,IAAF,CAAO,KAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH,CAES,WAFT;AAGGC,MAHH,CAGU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,cADX,EAC2B,CAAC,SAAD,EAAY,WAAZ,EAAyB,YAAzB,CAD3B;AAEGA,OAFH,CAEW,WAFX,EAEwB,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAFxB,CAJJ;;AAQGE,EARH,CAQM,OAAMC,CAAN,KAAW;AACb,QAAMC,GAAW,GAAGD,CAAC,CAACN,MAAtB;AACAO,EAAAA,GAAG,CAACC,SAAJ,GAAgBjC,qBAAqB,EAArC;;AAEA,QAAMe,QAAQ,GAAG,CAACmB,CAAD,EAAYC,CAAZ,KAAgC;AAC/C,WAAO1B,iBAAiB,CAACyB,CAAD,EAAIC,CAAJ,EAAOG,IAAI,CAACC,GAAZ,CAAxB;AACD,GAFD;;AAIA,QAAMC,WAA0B,GAAG;AACjChC,EAAAA,eAAe,CAACP,IAAI,CAACwC,GAAL,CAASC,QAAT,CAAkBC,QAAnB,CADkB;AAEjCzC,EAAAA,MAAM,CAACuC,GAAP,CAAWE,QAAX,CAAoBJ,GAFa;AAGjC,GAAC,IAHgC;AAIjC,GAAC,GAJgC;AAKjCrC,EAAAA,MAAM,CAACuC,GAAP,CAAWE,QAAX,CAAoBC,GALa;AAMjC1C,EAAAA,MAAM,CAACuC,GAAP,CAAWI,SAAX,CAAqBF,QAArB,CAA8BJ,GANG;AAOjCrC,EAAAA,MAAM,CAACuC,GAAP,CAAWI,SAAX,CAAqBF,QAArB,CAA8BC,GAPG;AAQjC,KARiC;AASjC1C,EAAAA,MAAM,CAACuC,GAAP,CAAWI,SAAX,CAAqBC,QAArB,CAA8BP,GATG;AAUjCrC,EAAAA,MAAM,CAACuC,GAAP,CAAWI,SAAX,CAAqBC,QAArB,CAA8BF,GAVG;AAWjC1C,EAAAA,MAAM,CAACuC,GAAP,CAAWK,QAAX,CAAoBP,GAXa;AAYjC,KAZiC;AAajC,MAbiC;AAcjCrC,EAAAA,MAAM,CAACuC,GAAP,CAAWK,QAAX,CAAoBF,GAda;AAejCpC,EAAAA,eAAe,CAACP,IAAI,CAACwC,GAAL,CAASC,QAAT,CAAkBI,QAAnB,CAfkB,CAAnC;;AAiBA,QAAM9B,KAAK,GAAGH,iBAAiB,CAAC2B,WAAD,EAAczB,QAAd,CAA/B;;AAEAL,EAAAA,GAAG,CAACqB,CAAD,EAAIpB,OAAO,CAAC,KAAD,CAAX,EAAoB,CAACP,OAAD,EAAUA,OAAV,CAApB,EAAwCA,OAAxC,EAAiD4B,GAAjD,EAAsDhB,KAAtD,CAAH;AACD,CApCH;;AAsCAJ,CAAC,CAACU,IAAF,CAAO,KAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH,CAES,WAFT;AAGGC,MAHH,CAGU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,cADX,EAC2B,CAAC,SAAD,EAAY,WAAZ,EAAyB,YAAzB,CAD3B;AAEGA,OAFH,CAEW,WAFX,EAEwB,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAFxB,CAJJ;;AAQGC,aARH","sourcesContent":["export const description = `\nExecution tests for the 'min' builtin function\n\nS is AbstractInt, i32, or u32\nT is S or vecN<S>\n@const fn min(e1: T ,e2: T) -> T\nReturns e1 if e1 is less than e2, and e2 otherwise. Component-wise when T is a vector.\n\nS is AbstractFloat, f32, f16\nT is S or vecN<S>\n@const fn min(e1: T ,e2: T) -> T\nReturns e2 if e2 is less than e1, and e1 otherwise.\nIf one operand is a NaN, the other is returned.\nIf both operands are NaNs, a NaN is returned.\nComponent-wise when T is a vector.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { correctlyRoundedMatch } from '../../../../../util/compare.js';\nimport { kBit, kValue } from '../../../../../util/constants.js';\nimport {\n  i32,\n  TypeF32,\n  TypeI32,\n  TypeU32,\n  u32,\n  uint32ToFloat32,\n} from '../../../../../util/conversion.js';\nimport { Case, Config, makeBinaryF32Case, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n/** Generate set of min test cases from list of interesting values */\nfunction generateTestCases(\n  values: Array<number>,\n  makeCase: (x: number, y: number) => Case\n): Array<Case> {\n  const cases = new Array<Case>();\n  values.forEach(e => {\n    values.forEach(f => {\n      cases.push(makeCase(e, f));\n    });\n  });\n  return cases;\n}\n\ng.test('abstract_int')\n  .specURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions')\n  .desc(`abstract int tests`)\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('u32')\n  .specURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions')\n  .desc(`u32 tests`)\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    cfg.cmpFloats = correctlyRoundedMatch();\n\n    const makeCase = (x: number, y: number): Case => {\n      return { input: [u32(x), u32(y)], expected: u32(Math.min(x, y)) };\n    };\n\n    const test_values: Array<number> = [0, 1, 2, 0x70000000, 0x80000000, 0xffffffff];\n    const cases = generateTestCases(test_values, makeCase);\n\n    run(t, builtin('min'), [TypeU32, TypeU32], TypeU32, cfg, cases);\n  });\n\ng.test('i32')\n  .specURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions')\n  .desc(`i32 tests`)\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    cfg.cmpFloats = correctlyRoundedMatch();\n\n    const makeCase = (x: number, y: number): Case => {\n      return { input: [i32(x), i32(y)], expected: i32(Math.min(x, y)) };\n    };\n\n    const test_values: Array<number> = [-0x70000000, -2, -1, 0, 1, 2, 0x70000000];\n    const cases = generateTestCases(test_values, makeCase);\n\n    run(t, builtin('min'), [TypeI32, TypeI32], TypeI32, cfg, cases);\n  });\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f32 tests`)\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    cfg.cmpFloats = correctlyRoundedMatch();\n\n    const makeCase = (x: number, y: number): Case => {\n      return makeBinaryF32Case(x, y, Math.min);\n    };\n\n    const test_values: Array<number> = [\n      uint32ToFloat32(kBit.f32.infinity.negative),\n      kValue.f32.negative.min,\n      -10.0,\n      -1.0,\n      kValue.f32.negative.max,\n      kValue.f32.subnormal.negative.min,\n      kValue.f32.subnormal.negative.max,\n      0.0,\n      kValue.f32.subnormal.positive.min,\n      kValue.f32.subnormal.positive.max,\n      kValue.f32.positive.min,\n      1.0,\n      10.0,\n      kValue.f32.positive.max,\n      uint32ToFloat32(kBit.f32.infinity.positive),\n    ];\n    const cases = generateTestCases(test_values, makeCase);\n\n    run(t, builtin('min'), [TypeF32, TypeF32], TypeF32, cfg, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"file":"min.spec.js"}