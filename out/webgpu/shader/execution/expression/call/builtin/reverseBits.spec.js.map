{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/reverseBits.spec.ts"],"names":["description","makeTestGroup","GPUTest","TypeU32","u32Bits","TypeI32","i32Bits","run","builtin","g","test","uniqueId","specURL","desc","params","u","combine","undefined","fn","t","cfg","input","expected"],"mappings":"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","sourcesContent":["export const description = `\nExecution Tests for the 'reversBits' builtin function\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { TypeU32, u32Bits, TypeI32, i32Bits } from '../../../../../util/conversion.js';\nimport { Config, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('unsigned')\n  .uniqueId('xxxxxxxxxxxxxxxx')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#integer-builtin-functions')\n  .desc(\n    `\nbit reversal:\nT is i32, u32, vecN<i32>, or vecN<u32> reverseBits(e: T ) -> T Reverses the bits in e: The bit at position k of the result equals the bit at position 31-k of e. Component-wise when T is a vector. (SPIR-V OpBitReverse)\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    // prettier-ignore\n    run(t, builtin('reverseBits'), [TypeU32], TypeU32, cfg, [\n      // Zero\n      { input: u32Bits(0b00000000000000000000000000000000), expected: u32Bits(0b00000000000000000000000000000000) },\n\n      // One\n      { input: u32Bits(0b00000000000000000000000000000001), expected: u32Bits(0b10000000000000000000000000000000) },\n\n      // 0's after leading 1\n      { input: u32Bits(0b00000000000000000000000000000010), expected: u32Bits(0b01000000000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000000000100), expected: u32Bits(0b00100000000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000000001000), expected: u32Bits(0b00010000000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000000010000), expected: u32Bits(0b00001000000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000000100000), expected: u32Bits(0b00000100000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000001000000), expected: u32Bits(0b00000010000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000010000000), expected: u32Bits(0b00000001000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000100000000), expected: u32Bits(0b00000000100000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000001000000000), expected: u32Bits(0b00000000010000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000010000000000), expected: u32Bits(0b00000000001000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000100000000000), expected: u32Bits(0b00000000000100000000000000000000) },\n      { input: u32Bits(0b00000000000000000001000000000000), expected: u32Bits(0b00000000000010000000000000000000) },\n      { input: u32Bits(0b00000000000000000010000000000000), expected: u32Bits(0b00000000000001000000000000000000) },\n      { input: u32Bits(0b00000000000000000100000000000000), expected: u32Bits(0b00000000000000100000000000000000) },\n      { input: u32Bits(0b00000000000000001000000000000000), expected: u32Bits(0b00000000000000010000000000000000) },\n      { input: u32Bits(0b00000000000000010000000000000000), expected: u32Bits(0b00000000000000001000000000000000) },\n      { input: u32Bits(0b00000000000000100000000000000000), expected: u32Bits(0b00000000000000000100000000000000) },\n      { input: u32Bits(0b00000000000001000000000000000000), expected: u32Bits(0b00000000000000000010000000000000) },\n      { input: u32Bits(0b00000000000010000000000000000000), expected: u32Bits(0b00000000000000000001000000000000) },\n      { input: u32Bits(0b00000000000100000000000000000000), expected: u32Bits(0b00000000000000000000100000000000) },\n      { input: u32Bits(0b00000000001000000000000000000000), expected: u32Bits(0b00000000000000000000010000000000) },\n      { input: u32Bits(0b00000000010000000000000000000000), expected: u32Bits(0b00000000000000000000001000000000) },\n      { input: u32Bits(0b00000000100000000000000000000000), expected: u32Bits(0b00000000000000000000000100000000) },\n      { input: u32Bits(0b00000001000000000000000000000000), expected: u32Bits(0b00000000000000000000000010000000) },\n      { input: u32Bits(0b00000010000000000000000000000000), expected: u32Bits(0b00000000000000000000000001000000) },\n      { input: u32Bits(0b00000100000000000000000000000000), expected: u32Bits(0b00000000000000000000000000100000) },\n      { input: u32Bits(0b00001000000000000000000000000000), expected: u32Bits(0b00000000000000000000000000010000) },\n      { input: u32Bits(0b00010000000000000000000000000000), expected: u32Bits(0b00000000000000000000000000001000) },\n      { input: u32Bits(0b00100000000000000000000000000000), expected: u32Bits(0b00000000000000000000000000000100) },\n      { input: u32Bits(0b01000000000000000000000000000000), expected: u32Bits(0b00000000000000000000000000000010) },\n      { input: u32Bits(0b10000000000000000000000000000000), expected: u32Bits(0b00000000000000000000000000000001) },\n\n      // 1's after leading 1\n      { input: u32Bits(0b00000000000000000000000000000011), expected: u32Bits(0b11000000000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000000000111), expected: u32Bits(0b11100000000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000000001111), expected: u32Bits(0b11110000000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000000011111), expected: u32Bits(0b11111000000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000000111111), expected: u32Bits(0b11111100000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000001111111), expected: u32Bits(0b11111110000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000011111111), expected: u32Bits(0b11111111000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000111111111), expected: u32Bits(0b11111111100000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000001111111111), expected: u32Bits(0b11111111110000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000011111111111), expected: u32Bits(0b11111111111000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000111111111111), expected: u32Bits(0b11111111111100000000000000000000) },\n      { input: u32Bits(0b00000000000000000001111111111111), expected: u32Bits(0b11111111111110000000000000000000) },\n      { input: u32Bits(0b00000000000000000011111111111111), expected: u32Bits(0b11111111111111000000000000000000) },\n      { input: u32Bits(0b00000000000000000111111111111111), expected: u32Bits(0b11111111111111100000000000000000) },\n      { input: u32Bits(0b00000000000000001111111111111111), expected: u32Bits(0b11111111111111110000000000000000) },\n      { input: u32Bits(0b00000000000000011111111111111111), expected: u32Bits(0b11111111111111111000000000000000) },\n      { input: u32Bits(0b00000000000000111111111111111111), expected: u32Bits(0b11111111111111111100000000000000) },\n      { input: u32Bits(0b00000000000001111111111111111111), expected: u32Bits(0b11111111111111111110000000000000) },\n      { input: u32Bits(0b00000000000011111111111111111111), expected: u32Bits(0b11111111111111111111000000000000) },\n      { input: u32Bits(0b00000000000111111111111111111111), expected: u32Bits(0b11111111111111111111100000000000) },\n      { input: u32Bits(0b00000000001111111111111111111111), expected: u32Bits(0b11111111111111111111110000000000) },\n      { input: u32Bits(0b00000000011111111111111111111111), expected: u32Bits(0b11111111111111111111111000000000) },\n      { input: u32Bits(0b00000000111111111111111111111111), expected: u32Bits(0b11111111111111111111111100000000) },\n      { input: u32Bits(0b00000001111111111111111111111111), expected: u32Bits(0b11111111111111111111111110000000) },\n      { input: u32Bits(0b00000011111111111111111111111111), expected: u32Bits(0b11111111111111111111111111000000) },\n      { input: u32Bits(0b00000111111111111111111111111111), expected: u32Bits(0b11111111111111111111111111100000) },\n      { input: u32Bits(0b00001111111111111111111111111111), expected: u32Bits(0b11111111111111111111111111110000) },\n      { input: u32Bits(0b00011111111111111111111111111111), expected: u32Bits(0b11111111111111111111111111111000) },\n      { input: u32Bits(0b00111111111111111111111111111111), expected: u32Bits(0b11111111111111111111111111111100) },\n      { input: u32Bits(0b01111111111111111111111111111111), expected: u32Bits(0b11111111111111111111111111111110) },\n      { input: u32Bits(0b11111111111111111111111111111111), expected: u32Bits(0b11111111111111111111111111111111) },\n\n      // random after leading 1\n      { input: u32Bits(0b00000000000000000000000000000110), expected: u32Bits(0b01100000000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000000001101), expected: u32Bits(0b10110000000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000000011101), expected: u32Bits(0b10111000000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000000111001), expected: u32Bits(0b10011100000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000001101111), expected: u32Bits(0b11110110000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000011111111), expected: u32Bits(0b11111111000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000111101111), expected: u32Bits(0b11110111100000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000001111111111), expected: u32Bits(0b11111111110000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000011111110001), expected: u32Bits(0b10001111111000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000111011011101), expected: u32Bits(0b10111011011100000000000000000000) },\n      { input: u32Bits(0b00000000000000000001101101111111), expected: u32Bits(0b11111110110110000000000000000000) },\n      { input: u32Bits(0b00000000000000000011111111011111), expected: u32Bits(0b11111011111111000000000000000000) },\n      { input: u32Bits(0b00000000000000000101111001110101), expected: u32Bits(0b10101110011110100000000000000000) },\n      { input: u32Bits(0b00000000000000001101111011110111), expected: u32Bits(0b11101111011110110000000000000000) },\n      { input: u32Bits(0b00000000000000011111111111110011), expected: u32Bits(0b11001111111111111000000000000000) },\n      { input: u32Bits(0b00000000000000111111111110111111), expected: u32Bits(0b11111101111111111100000000000000) },\n      { input: u32Bits(0b00000000000001111111011111111111), expected: u32Bits(0b11111111111011111110000000000000) },\n      { input: u32Bits(0b00000000000011111111111111111111), expected: u32Bits(0b11111111111111111111000000000000) },\n      { input: u32Bits(0b00000000000111110101011110111111), expected: u32Bits(0b11111101111010101111100000000000) },\n      { input: u32Bits(0b00000000001111101111111111110111), expected: u32Bits(0b11101111111111110111110000000000) },\n      { input: u32Bits(0b00000000011111111111010000101111), expected: u32Bits(0b11110100001011111111111000000000) },\n      { input: u32Bits(0b00000000111111111111001111111011), expected: u32Bits(0b11011111110011111111111100000000) },\n      { input: u32Bits(0b00000001111111011111101111111111), expected: u32Bits(0b11111111110111111011111110000000) },\n      { input: u32Bits(0b00000011101011111011110111111011), expected: u32Bits(0b11011111101111011111010111000000) },\n      { input: u32Bits(0b00000111111110111111111111111111), expected: u32Bits(0b11111111111111111101111111100000) },\n      { input: u32Bits(0b00001111000000011011011110111111), expected: u32Bits(0b11111101111011011000000011110000) },\n      { input: u32Bits(0b00011110101111011111111111111111), expected: u32Bits(0b11111111111111111011110101111000) },\n      { input: u32Bits(0b00110110111111100111111110111101), expected: u32Bits(0b10111101111111100111111101101100) },\n      { input: u32Bits(0b01010111111101111111011111011111), expected: u32Bits(0b11111011111011111110111111101010) },\n      { input: u32Bits(0b11100010011110101101101110101111), expected: u32Bits(0b11110101110110110101111001000111) },\n    ]);\n  });\n\ng.test('signed')\n  .uniqueId('xxxxxxxxxxxxxxxx')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#integer-builtin-functions')\n  .desc(\n    `\nbit reversal:\nT is i32, u32, vecN<i32>, or vecN<u32> reverseBits(e: T ) -> T Reverses the bits in e: The bit at position k of the result equals the bit at position 31-k of e. Component-wise when T is a vector. (SPIR-V OpBitReverse)\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    // prettier-ignore\n    run(t, builtin('reverseBits'), [TypeI32], TypeI32, cfg, [\n      // Zero\n      { input: i32Bits(0b00000000000000000000000000000000), expected: i32Bits(0b00000000000000000000000000000000) },\n\n      // One\n      { input: i32Bits(0b00000000000000000000000000000001), expected: i32Bits(0b10000000000000000000000000000000) },\n\n      // 0's after leading 1\n      { input: i32Bits(0b00000000000000000000000000000010), expected: i32Bits(0b01000000000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000000000100), expected: i32Bits(0b00100000000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000000001000), expected: i32Bits(0b00010000000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000000010000), expected: i32Bits(0b00001000000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000000100000), expected: i32Bits(0b00000100000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000001000000), expected: i32Bits(0b00000010000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000010000000), expected: i32Bits(0b00000001000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000100000000), expected: i32Bits(0b00000000100000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000001000000000), expected: i32Bits(0b00000000010000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000010000000000), expected: i32Bits(0b00000000001000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000100000000000), expected: i32Bits(0b00000000000100000000000000000000) },\n      { input: i32Bits(0b00000000000000000001000000000000), expected: i32Bits(0b00000000000010000000000000000000) },\n      { input: i32Bits(0b00000000000000000010000000000000), expected: i32Bits(0b00000000000001000000000000000000) },\n      { input: i32Bits(0b00000000000000000100000000000000), expected: i32Bits(0b00000000000000100000000000000000) },\n      { input: i32Bits(0b00000000000000001000000000000000), expected: i32Bits(0b00000000000000010000000000000000) },\n      { input: i32Bits(0b00000000000000010000000000000000), expected: i32Bits(0b00000000000000001000000000000000) },\n      { input: i32Bits(0b00000000000000100000000000000000), expected: i32Bits(0b00000000000000000100000000000000) },\n      { input: i32Bits(0b00000000000001000000000000000000), expected: i32Bits(0b00000000000000000010000000000000) },\n      { input: i32Bits(0b00000000000010000000000000000000), expected: i32Bits(0b00000000000000000001000000000000) },\n      { input: i32Bits(0b00000000000100000000000000000000), expected: i32Bits(0b00000000000000000000100000000000) },\n      { input: i32Bits(0b00000000001000000000000000000000), expected: i32Bits(0b00000000000000000000010000000000) },\n      { input: i32Bits(0b00000000010000000000000000000000), expected: i32Bits(0b00000000000000000000001000000000) },\n      { input: i32Bits(0b00000000100000000000000000000000), expected: i32Bits(0b00000000000000000000000100000000) },\n      { input: i32Bits(0b00000001000000000000000000000000), expected: i32Bits(0b00000000000000000000000010000000) },\n      { input: i32Bits(0b00000010000000000000000000000000), expected: i32Bits(0b00000000000000000000000001000000) },\n      { input: i32Bits(0b00000100000000000000000000000000), expected: i32Bits(0b00000000000000000000000000100000) },\n      { input: i32Bits(0b00001000000000000000000000000000), expected: i32Bits(0b00000000000000000000000000010000) },\n      { input: i32Bits(0b00010000000000000000000000000000), expected: i32Bits(0b00000000000000000000000000001000) },\n      { input: i32Bits(0b00100000000000000000000000000000), expected: i32Bits(0b00000000000000000000000000000100) },\n      { input: i32Bits(0b01000000000000000000000000000000), expected: i32Bits(0b00000000000000000000000000000010) },\n      { input: i32Bits(0b10000000000000000000000000000000), expected: i32Bits(0b00000000000000000000000000000001) },\n\n      // 1's after leading 1\n      { input: i32Bits(0b00000000000000000000000000000011), expected: i32Bits(0b11000000000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000000000111), expected: i32Bits(0b11100000000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000000001111), expected: i32Bits(0b11110000000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000000011111), expected: i32Bits(0b11111000000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000000111111), expected: i32Bits(0b11111100000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000001111111), expected: i32Bits(0b11111110000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000011111111), expected: i32Bits(0b11111111000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000111111111), expected: i32Bits(0b11111111100000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000001111111111), expected: i32Bits(0b11111111110000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000011111111111), expected: i32Bits(0b11111111111000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000111111111111), expected: i32Bits(0b11111111111100000000000000000000) },\n      { input: i32Bits(0b00000000000000000001111111111111), expected: i32Bits(0b11111111111110000000000000000000) },\n      { input: i32Bits(0b00000000000000000011111111111111), expected: i32Bits(0b11111111111111000000000000000000) },\n      { input: i32Bits(0b00000000000000000111111111111111), expected: i32Bits(0b11111111111111100000000000000000) },\n      { input: i32Bits(0b00000000000000001111111111111111), expected: i32Bits(0b11111111111111110000000000000000) },\n      { input: i32Bits(0b00000000000000011111111111111111), expected: i32Bits(0b11111111111111111000000000000000) },\n      { input: i32Bits(0b00000000000000111111111111111111), expected: i32Bits(0b11111111111111111100000000000000) },\n      { input: i32Bits(0b00000000000001111111111111111111), expected: i32Bits(0b11111111111111111110000000000000) },\n      { input: i32Bits(0b00000000000011111111111111111111), expected: i32Bits(0b11111111111111111111000000000000) },\n      { input: i32Bits(0b00000000000111111111111111111111), expected: i32Bits(0b11111111111111111111100000000000) },\n      { input: i32Bits(0b00000000001111111111111111111111), expected: i32Bits(0b11111111111111111111110000000000) },\n      { input: i32Bits(0b00000000011111111111111111111111), expected: i32Bits(0b11111111111111111111111000000000) },\n      { input: i32Bits(0b00000000111111111111111111111111), expected: i32Bits(0b11111111111111111111111100000000) },\n      { input: i32Bits(0b00000001111111111111111111111111), expected: i32Bits(0b11111111111111111111111110000000) },\n      { input: i32Bits(0b00000011111111111111111111111111), expected: i32Bits(0b11111111111111111111111111000000) },\n      { input: i32Bits(0b00000111111111111111111111111111), expected: i32Bits(0b11111111111111111111111111100000) },\n      { input: i32Bits(0b00001111111111111111111111111111), expected: i32Bits(0b11111111111111111111111111110000) },\n      { input: i32Bits(0b00011111111111111111111111111111), expected: i32Bits(0b11111111111111111111111111111000) },\n      { input: i32Bits(0b00111111111111111111111111111111), expected: i32Bits(0b11111111111111111111111111111100) },\n      { input: i32Bits(0b01111111111111111111111111111111), expected: i32Bits(0b11111111111111111111111111111110) },\n      { input: i32Bits(0b11111111111111111111111111111111), expected: i32Bits(0b11111111111111111111111111111111) },\n\n      // random after leading 1\n      { input: i32Bits(0b00000000000000000000000000000110), expected: i32Bits(0b01100000000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000000001101), expected: i32Bits(0b10110000000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000000011101), expected: i32Bits(0b10111000000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000000111001), expected: i32Bits(0b10011100000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000001101111), expected: i32Bits(0b11110110000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000011111111), expected: i32Bits(0b11111111000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000111101111), expected: i32Bits(0b11110111100000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000001111111111), expected: i32Bits(0b11111111110000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000011111110001), expected: i32Bits(0b10001111111000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000111011011101), expected: i32Bits(0b10111011011100000000000000000000) },\n      { input: i32Bits(0b00000000000000000001101101111111), expected: i32Bits(0b11111110110110000000000000000000) },\n      { input: i32Bits(0b00000000000000000011111111011111), expected: i32Bits(0b11111011111111000000000000000000) },\n      { input: i32Bits(0b00000000000000000101111001110101), expected: i32Bits(0b10101110011110100000000000000000) },\n      { input: i32Bits(0b00000000000000001101111011110111), expected: i32Bits(0b11101111011110110000000000000000) },\n      { input: i32Bits(0b00000000000000011111111111110011), expected: i32Bits(0b11001111111111111000000000000000) },\n      { input: i32Bits(0b00000000000000111111111110111111), expected: i32Bits(0b11111101111111111100000000000000) },\n      { input: i32Bits(0b00000000000001111111011111111111), expected: i32Bits(0b11111111111011111110000000000000) },\n      { input: i32Bits(0b00000000000011111111111111111111), expected: i32Bits(0b11111111111111111111000000000000) },\n      { input: i32Bits(0b00000000000111110101011110111111), expected: i32Bits(0b11111101111010101111100000000000) },\n      { input: i32Bits(0b00000000001111101111111111110111), expected: i32Bits(0b11101111111111110111110000000000) },\n      { input: i32Bits(0b00000000011111111111010000101111), expected: i32Bits(0b11110100001011111111111000000000) },\n      { input: i32Bits(0b00000000111111111111001111111011), expected: i32Bits(0b11011111110011111111111100000000) },\n      { input: i32Bits(0b00000001111111011111101111111111), expected: i32Bits(0b11111111110111111011111110000000) },\n      { input: i32Bits(0b00000011101011111011110111111011), expected: i32Bits(0b11011111101111011111010111000000) },\n      { input: i32Bits(0b00000111111110111111111111111111), expected: i32Bits(0b11111111111111111101111111100000) },\n      { input: i32Bits(0b00001111000000011011011110111111), expected: i32Bits(0b11111101111011011000000011110000) },\n      { input: i32Bits(0b00011110101111011111111111111111), expected: i32Bits(0b11111111111111111011110101111000) },\n      { input: i32Bits(0b00110110111111100111111110111101), expected: i32Bits(0b10111101111111100111111101101100) },\n      { input: i32Bits(0b01010111111101111111011111011111), expected: i32Bits(0b11111011111011111110111111101010) },\n      { input: i32Bits(0b11100010011110101101101110101111), expected: i32Bits(0b11110101110110110101111001000111) },\n    ]);\n  });\n"],"file":"reverseBits.spec.js"}