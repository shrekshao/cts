{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/reverseBits.spec.ts"],"names":["description","makeTestGroup","GPUTest","TypeU32","u32Bits","TypeI32","i32Bits","allInputSources","run","builtin","g","test","specURL","desc","params","u","combine","undefined","fn","t","cfg","input","expected"],"mappings":"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","sourcesContent":["export const description = `\nExecution tests for the 'reversBits' builtin function\n\nS is i32, u32\nT is S or vecN<S>\n@const fn reverseBits(e: T ) -> T\nReverses the bits in e: The bit at position k of the result equals the bit at position 31-k of e.\nComponent-wise when T is a vector.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { TypeU32, u32Bits, TypeI32, i32Bits } from '../../../../../util/conversion.js';\nimport { allInputSources, Config, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('u32')\n  .specURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions')\n  .desc(`u32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    // prettier-ignore\n    await run(t, builtin('reverseBits'), [TypeU32], TypeU32, cfg, [\n      // Zero\n      { input: u32Bits(0b00000000000000000000000000000000), expected: u32Bits(0b00000000000000000000000000000000) },\n\n      // One\n      { input: u32Bits(0b00000000000000000000000000000001), expected: u32Bits(0b10000000000000000000000000000000) },\n\n      // 0's after leading 1\n      { input: u32Bits(0b00000000000000000000000000000010), expected: u32Bits(0b01000000000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000000000100), expected: u32Bits(0b00100000000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000000001000), expected: u32Bits(0b00010000000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000000010000), expected: u32Bits(0b00001000000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000000100000), expected: u32Bits(0b00000100000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000001000000), expected: u32Bits(0b00000010000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000010000000), expected: u32Bits(0b00000001000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000100000000), expected: u32Bits(0b00000000100000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000001000000000), expected: u32Bits(0b00000000010000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000010000000000), expected: u32Bits(0b00000000001000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000100000000000), expected: u32Bits(0b00000000000100000000000000000000) },\n      { input: u32Bits(0b00000000000000000001000000000000), expected: u32Bits(0b00000000000010000000000000000000) },\n      { input: u32Bits(0b00000000000000000010000000000000), expected: u32Bits(0b00000000000001000000000000000000) },\n      { input: u32Bits(0b00000000000000000100000000000000), expected: u32Bits(0b00000000000000100000000000000000) },\n      { input: u32Bits(0b00000000000000001000000000000000), expected: u32Bits(0b00000000000000010000000000000000) },\n      { input: u32Bits(0b00000000000000010000000000000000), expected: u32Bits(0b00000000000000001000000000000000) },\n      { input: u32Bits(0b00000000000000100000000000000000), expected: u32Bits(0b00000000000000000100000000000000) },\n      { input: u32Bits(0b00000000000001000000000000000000), expected: u32Bits(0b00000000000000000010000000000000) },\n      { input: u32Bits(0b00000000000010000000000000000000), expected: u32Bits(0b00000000000000000001000000000000) },\n      { input: u32Bits(0b00000000000100000000000000000000), expected: u32Bits(0b00000000000000000000100000000000) },\n      { input: u32Bits(0b00000000001000000000000000000000), expected: u32Bits(0b00000000000000000000010000000000) },\n      { input: u32Bits(0b00000000010000000000000000000000), expected: u32Bits(0b00000000000000000000001000000000) },\n      { input: u32Bits(0b00000000100000000000000000000000), expected: u32Bits(0b00000000000000000000000100000000) },\n      { input: u32Bits(0b00000001000000000000000000000000), expected: u32Bits(0b00000000000000000000000010000000) },\n      { input: u32Bits(0b00000010000000000000000000000000), expected: u32Bits(0b00000000000000000000000001000000) },\n      { input: u32Bits(0b00000100000000000000000000000000), expected: u32Bits(0b00000000000000000000000000100000) },\n      { input: u32Bits(0b00001000000000000000000000000000), expected: u32Bits(0b00000000000000000000000000010000) },\n      { input: u32Bits(0b00010000000000000000000000000000), expected: u32Bits(0b00000000000000000000000000001000) },\n      { input: u32Bits(0b00100000000000000000000000000000), expected: u32Bits(0b00000000000000000000000000000100) },\n      { input: u32Bits(0b01000000000000000000000000000000), expected: u32Bits(0b00000000000000000000000000000010) },\n      { input: u32Bits(0b10000000000000000000000000000000), expected: u32Bits(0b00000000000000000000000000000001) },\n\n      // 1's after leading 1\n      { input: u32Bits(0b00000000000000000000000000000011), expected: u32Bits(0b11000000000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000000000111), expected: u32Bits(0b11100000000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000000001111), expected: u32Bits(0b11110000000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000000011111), expected: u32Bits(0b11111000000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000000111111), expected: u32Bits(0b11111100000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000001111111), expected: u32Bits(0b11111110000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000011111111), expected: u32Bits(0b11111111000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000111111111), expected: u32Bits(0b11111111100000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000001111111111), expected: u32Bits(0b11111111110000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000011111111111), expected: u32Bits(0b11111111111000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000111111111111), expected: u32Bits(0b11111111111100000000000000000000) },\n      { input: u32Bits(0b00000000000000000001111111111111), expected: u32Bits(0b11111111111110000000000000000000) },\n      { input: u32Bits(0b00000000000000000011111111111111), expected: u32Bits(0b11111111111111000000000000000000) },\n      { input: u32Bits(0b00000000000000000111111111111111), expected: u32Bits(0b11111111111111100000000000000000) },\n      { input: u32Bits(0b00000000000000001111111111111111), expected: u32Bits(0b11111111111111110000000000000000) },\n      { input: u32Bits(0b00000000000000011111111111111111), expected: u32Bits(0b11111111111111111000000000000000) },\n      { input: u32Bits(0b00000000000000111111111111111111), expected: u32Bits(0b11111111111111111100000000000000) },\n      { input: u32Bits(0b00000000000001111111111111111111), expected: u32Bits(0b11111111111111111110000000000000) },\n      { input: u32Bits(0b00000000000011111111111111111111), expected: u32Bits(0b11111111111111111111000000000000) },\n      { input: u32Bits(0b00000000000111111111111111111111), expected: u32Bits(0b11111111111111111111100000000000) },\n      { input: u32Bits(0b00000000001111111111111111111111), expected: u32Bits(0b11111111111111111111110000000000) },\n      { input: u32Bits(0b00000000011111111111111111111111), expected: u32Bits(0b11111111111111111111111000000000) },\n      { input: u32Bits(0b00000000111111111111111111111111), expected: u32Bits(0b11111111111111111111111100000000) },\n      { input: u32Bits(0b00000001111111111111111111111111), expected: u32Bits(0b11111111111111111111111110000000) },\n      { input: u32Bits(0b00000011111111111111111111111111), expected: u32Bits(0b11111111111111111111111111000000) },\n      { input: u32Bits(0b00000111111111111111111111111111), expected: u32Bits(0b11111111111111111111111111100000) },\n      { input: u32Bits(0b00001111111111111111111111111111), expected: u32Bits(0b11111111111111111111111111110000) },\n      { input: u32Bits(0b00011111111111111111111111111111), expected: u32Bits(0b11111111111111111111111111111000) },\n      { input: u32Bits(0b00111111111111111111111111111111), expected: u32Bits(0b11111111111111111111111111111100) },\n      { input: u32Bits(0b01111111111111111111111111111111), expected: u32Bits(0b11111111111111111111111111111110) },\n      { input: u32Bits(0b11111111111111111111111111111111), expected: u32Bits(0b11111111111111111111111111111111) },\n\n      // random after leading 1\n      { input: u32Bits(0b00000000000000000000000000000110), expected: u32Bits(0b01100000000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000000001101), expected: u32Bits(0b10110000000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000000011101), expected: u32Bits(0b10111000000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000000111001), expected: u32Bits(0b10011100000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000001101111), expected: u32Bits(0b11110110000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000011111111), expected: u32Bits(0b11111111000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000111101111), expected: u32Bits(0b11110111100000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000001111111111), expected: u32Bits(0b11111111110000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000011111110001), expected: u32Bits(0b10001111111000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000111011011101), expected: u32Bits(0b10111011011100000000000000000000) },\n      { input: u32Bits(0b00000000000000000001101101111111), expected: u32Bits(0b11111110110110000000000000000000) },\n      { input: u32Bits(0b00000000000000000011111111011111), expected: u32Bits(0b11111011111111000000000000000000) },\n      { input: u32Bits(0b00000000000000000101111001110101), expected: u32Bits(0b10101110011110100000000000000000) },\n      { input: u32Bits(0b00000000000000001101111011110111), expected: u32Bits(0b11101111011110110000000000000000) },\n      { input: u32Bits(0b00000000000000011111111111110011), expected: u32Bits(0b11001111111111111000000000000000) },\n      { input: u32Bits(0b00000000000000111111111110111111), expected: u32Bits(0b11111101111111111100000000000000) },\n      { input: u32Bits(0b00000000000001111111011111111111), expected: u32Bits(0b11111111111011111110000000000000) },\n      { input: u32Bits(0b00000000000011111111111111111111), expected: u32Bits(0b11111111111111111111000000000000) },\n      { input: u32Bits(0b00000000000111110101011110111111), expected: u32Bits(0b11111101111010101111100000000000) },\n      { input: u32Bits(0b00000000001111101111111111110111), expected: u32Bits(0b11101111111111110111110000000000) },\n      { input: u32Bits(0b00000000011111111111010000101111), expected: u32Bits(0b11110100001011111111111000000000) },\n      { input: u32Bits(0b00000000111111111111001111111011), expected: u32Bits(0b11011111110011111111111100000000) },\n      { input: u32Bits(0b00000001111111011111101111111111), expected: u32Bits(0b11111111110111111011111110000000) },\n      { input: u32Bits(0b00000011101011111011110111111011), expected: u32Bits(0b11011111101111011111010111000000) },\n      { input: u32Bits(0b00000111111110111111111111111111), expected: u32Bits(0b11111111111111111101111111100000) },\n      { input: u32Bits(0b00001111000000011011011110111111), expected: u32Bits(0b11111101111011011000000011110000) },\n      { input: u32Bits(0b00011110101111011111111111111111), expected: u32Bits(0b11111111111111111011110101111000) },\n      { input: u32Bits(0b00110110111111100111111110111101), expected: u32Bits(0b10111101111111100111111101101100) },\n      { input: u32Bits(0b01010111111101111111011111011111), expected: u32Bits(0b11111011111011111110111111101010) },\n      { input: u32Bits(0b11100010011110101101101110101111), expected: u32Bits(0b11110101110110110101111001000111) },\n    ]);\n  });\n\ng.test('i32')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#integer-builtin-functions')\n  .desc(`i32 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    // prettier-ignore\n    await run(t, builtin('reverseBits'), [TypeI32], TypeI32, cfg, [\n      // Zero\n      { input: i32Bits(0b00000000000000000000000000000000), expected: i32Bits(0b00000000000000000000000000000000) },\n\n      // One\n      { input: i32Bits(0b00000000000000000000000000000001), expected: i32Bits(0b10000000000000000000000000000000) },\n\n      // 0's after leading 1\n      { input: i32Bits(0b00000000000000000000000000000010), expected: i32Bits(0b01000000000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000000000100), expected: i32Bits(0b00100000000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000000001000), expected: i32Bits(0b00010000000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000000010000), expected: i32Bits(0b00001000000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000000100000), expected: i32Bits(0b00000100000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000001000000), expected: i32Bits(0b00000010000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000010000000), expected: i32Bits(0b00000001000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000100000000), expected: i32Bits(0b00000000100000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000001000000000), expected: i32Bits(0b00000000010000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000010000000000), expected: i32Bits(0b00000000001000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000100000000000), expected: i32Bits(0b00000000000100000000000000000000) },\n      { input: i32Bits(0b00000000000000000001000000000000), expected: i32Bits(0b00000000000010000000000000000000) },\n      { input: i32Bits(0b00000000000000000010000000000000), expected: i32Bits(0b00000000000001000000000000000000) },\n      { input: i32Bits(0b00000000000000000100000000000000), expected: i32Bits(0b00000000000000100000000000000000) },\n      { input: i32Bits(0b00000000000000001000000000000000), expected: i32Bits(0b00000000000000010000000000000000) },\n      { input: i32Bits(0b00000000000000010000000000000000), expected: i32Bits(0b00000000000000001000000000000000) },\n      { input: i32Bits(0b00000000000000100000000000000000), expected: i32Bits(0b00000000000000000100000000000000) },\n      { input: i32Bits(0b00000000000001000000000000000000), expected: i32Bits(0b00000000000000000010000000000000) },\n      { input: i32Bits(0b00000000000010000000000000000000), expected: i32Bits(0b00000000000000000001000000000000) },\n      { input: i32Bits(0b00000000000100000000000000000000), expected: i32Bits(0b00000000000000000000100000000000) },\n      { input: i32Bits(0b00000000001000000000000000000000), expected: i32Bits(0b00000000000000000000010000000000) },\n      { input: i32Bits(0b00000000010000000000000000000000), expected: i32Bits(0b00000000000000000000001000000000) },\n      { input: i32Bits(0b00000000100000000000000000000000), expected: i32Bits(0b00000000000000000000000100000000) },\n      { input: i32Bits(0b00000001000000000000000000000000), expected: i32Bits(0b00000000000000000000000010000000) },\n      { input: i32Bits(0b00000010000000000000000000000000), expected: i32Bits(0b00000000000000000000000001000000) },\n      { input: i32Bits(0b00000100000000000000000000000000), expected: i32Bits(0b00000000000000000000000000100000) },\n      { input: i32Bits(0b00001000000000000000000000000000), expected: i32Bits(0b00000000000000000000000000010000) },\n      { input: i32Bits(0b00010000000000000000000000000000), expected: i32Bits(0b00000000000000000000000000001000) },\n      { input: i32Bits(0b00100000000000000000000000000000), expected: i32Bits(0b00000000000000000000000000000100) },\n      { input: i32Bits(0b01000000000000000000000000000000), expected: i32Bits(0b00000000000000000000000000000010) },\n      { input: i32Bits(0b10000000000000000000000000000000), expected: i32Bits(0b00000000000000000000000000000001) },\n\n      // 1's after leading 1\n      { input: i32Bits(0b00000000000000000000000000000011), expected: i32Bits(0b11000000000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000000000111), expected: i32Bits(0b11100000000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000000001111), expected: i32Bits(0b11110000000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000000011111), expected: i32Bits(0b11111000000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000000111111), expected: i32Bits(0b11111100000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000001111111), expected: i32Bits(0b11111110000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000011111111), expected: i32Bits(0b11111111000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000111111111), expected: i32Bits(0b11111111100000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000001111111111), expected: i32Bits(0b11111111110000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000011111111111), expected: i32Bits(0b11111111111000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000111111111111), expected: i32Bits(0b11111111111100000000000000000000) },\n      { input: i32Bits(0b00000000000000000001111111111111), expected: i32Bits(0b11111111111110000000000000000000) },\n      { input: i32Bits(0b00000000000000000011111111111111), expected: i32Bits(0b11111111111111000000000000000000) },\n      { input: i32Bits(0b00000000000000000111111111111111), expected: i32Bits(0b11111111111111100000000000000000) },\n      { input: i32Bits(0b00000000000000001111111111111111), expected: i32Bits(0b11111111111111110000000000000000) },\n      { input: i32Bits(0b00000000000000011111111111111111), expected: i32Bits(0b11111111111111111000000000000000) },\n      { input: i32Bits(0b00000000000000111111111111111111), expected: i32Bits(0b11111111111111111100000000000000) },\n      { input: i32Bits(0b00000000000001111111111111111111), expected: i32Bits(0b11111111111111111110000000000000) },\n      { input: i32Bits(0b00000000000011111111111111111111), expected: i32Bits(0b11111111111111111111000000000000) },\n      { input: i32Bits(0b00000000000111111111111111111111), expected: i32Bits(0b11111111111111111111100000000000) },\n      { input: i32Bits(0b00000000001111111111111111111111), expected: i32Bits(0b11111111111111111111110000000000) },\n      { input: i32Bits(0b00000000011111111111111111111111), expected: i32Bits(0b11111111111111111111111000000000) },\n      { input: i32Bits(0b00000000111111111111111111111111), expected: i32Bits(0b11111111111111111111111100000000) },\n      { input: i32Bits(0b00000001111111111111111111111111), expected: i32Bits(0b11111111111111111111111110000000) },\n      { input: i32Bits(0b00000011111111111111111111111111), expected: i32Bits(0b11111111111111111111111111000000) },\n      { input: i32Bits(0b00000111111111111111111111111111), expected: i32Bits(0b11111111111111111111111111100000) },\n      { input: i32Bits(0b00001111111111111111111111111111), expected: i32Bits(0b11111111111111111111111111110000) },\n      { input: i32Bits(0b00011111111111111111111111111111), expected: i32Bits(0b11111111111111111111111111111000) },\n      { input: i32Bits(0b00111111111111111111111111111111), expected: i32Bits(0b11111111111111111111111111111100) },\n      { input: i32Bits(0b01111111111111111111111111111111), expected: i32Bits(0b11111111111111111111111111111110) },\n      { input: i32Bits(0b11111111111111111111111111111111), expected: i32Bits(0b11111111111111111111111111111111) },\n\n      // random after leading 1\n      { input: i32Bits(0b00000000000000000000000000000110), expected: i32Bits(0b01100000000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000000001101), expected: i32Bits(0b10110000000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000000011101), expected: i32Bits(0b10111000000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000000111001), expected: i32Bits(0b10011100000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000001101111), expected: i32Bits(0b11110110000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000011111111), expected: i32Bits(0b11111111000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000111101111), expected: i32Bits(0b11110111100000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000001111111111), expected: i32Bits(0b11111111110000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000011111110001), expected: i32Bits(0b10001111111000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000111011011101), expected: i32Bits(0b10111011011100000000000000000000) },\n      { input: i32Bits(0b00000000000000000001101101111111), expected: i32Bits(0b11111110110110000000000000000000) },\n      { input: i32Bits(0b00000000000000000011111111011111), expected: i32Bits(0b11111011111111000000000000000000) },\n      { input: i32Bits(0b00000000000000000101111001110101), expected: i32Bits(0b10101110011110100000000000000000) },\n      { input: i32Bits(0b00000000000000001101111011110111), expected: i32Bits(0b11101111011110110000000000000000) },\n      { input: i32Bits(0b00000000000000011111111111110011), expected: i32Bits(0b11001111111111111000000000000000) },\n      { input: i32Bits(0b00000000000000111111111110111111), expected: i32Bits(0b11111101111111111100000000000000) },\n      { input: i32Bits(0b00000000000001111111011111111111), expected: i32Bits(0b11111111111011111110000000000000) },\n      { input: i32Bits(0b00000000000011111111111111111111), expected: i32Bits(0b11111111111111111111000000000000) },\n      { input: i32Bits(0b00000000000111110101011110111111), expected: i32Bits(0b11111101111010101111100000000000) },\n      { input: i32Bits(0b00000000001111101111111111110111), expected: i32Bits(0b11101111111111110111110000000000) },\n      { input: i32Bits(0b00000000011111111111010000101111), expected: i32Bits(0b11110100001011111111111000000000) },\n      { input: i32Bits(0b00000000111111111111001111111011), expected: i32Bits(0b11011111110011111111111100000000) },\n      { input: i32Bits(0b00000001111111011111101111111111), expected: i32Bits(0b11111111110111111011111110000000) },\n      { input: i32Bits(0b00000011101011111011110111111011), expected: i32Bits(0b11011111101111011111010111000000) },\n      { input: i32Bits(0b00000111111110111111111111111111), expected: i32Bits(0b11111111111111111101111111100000) },\n      { input: i32Bits(0b00001111000000011011011110111111), expected: i32Bits(0b11111101111011011000000011110000) },\n      { input: i32Bits(0b00011110101111011111111111111111), expected: i32Bits(0b11111111111111111011110101111000) },\n      { input: i32Bits(0b00110110111111100111111110111101), expected: i32Bits(0b10111101111111100111111101101100) },\n      { input: i32Bits(0b01010111111101111111011111011111), expected: i32Bits(0b11111011111011111110111111101010) },\n      { input: i32Bits(0b11100010011110101101101110101111), expected: i32Bits(0b11110101110110110101111001000111) },\n    ]);\n  });\n"],"file":"reverseBits.spec.js"}