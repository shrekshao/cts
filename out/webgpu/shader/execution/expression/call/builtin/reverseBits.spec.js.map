{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/reverseBits.spec.ts"],"names":["description","makeTestGroup","GPUTest","TypeU32","u32Bits","TypeI32","i32Bits","run","builtin","g","test","specURL","desc","params","u","combine","undefined","fn","t","cfg","input","expected"],"mappings":"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","sourcesContent":["export const description = `\nExecution tests for the 'reversBits' builtin function\n\nS is i32, u32\nT is S or vecN<S>\n@const fn reverseBits(e: T ) -> T\nReverses the bits in e: The bit at position k of the result equals the bit at position 31-k of e.\nComponent-wise when T is a vector.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { TypeU32, u32Bits, TypeI32, i32Bits } from '../../../../../util/conversion.js';\nimport { Config, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('u32')\n  .specURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions')\n  .desc(`u32 tests`)\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    // prettier-ignore\n    run(t, builtin('reverseBits'), [TypeU32], TypeU32, cfg, [\n      // Zero\n      { input: u32Bits(0b00000000000000000000000000000000), expected: u32Bits(0b00000000000000000000000000000000) },\n\n      // One\n      { input: u32Bits(0b00000000000000000000000000000001), expected: u32Bits(0b10000000000000000000000000000000) },\n\n      // 0's after leading 1\n      { input: u32Bits(0b00000000000000000000000000000010), expected: u32Bits(0b01000000000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000000000100), expected: u32Bits(0b00100000000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000000001000), expected: u32Bits(0b00010000000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000000010000), expected: u32Bits(0b00001000000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000000100000), expected: u32Bits(0b00000100000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000001000000), expected: u32Bits(0b00000010000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000010000000), expected: u32Bits(0b00000001000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000100000000), expected: u32Bits(0b00000000100000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000001000000000), expected: u32Bits(0b00000000010000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000010000000000), expected: u32Bits(0b00000000001000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000100000000000), expected: u32Bits(0b00000000000100000000000000000000) },\n      { input: u32Bits(0b00000000000000000001000000000000), expected: u32Bits(0b00000000000010000000000000000000) },\n      { input: u32Bits(0b00000000000000000010000000000000), expected: u32Bits(0b00000000000001000000000000000000) },\n      { input: u32Bits(0b00000000000000000100000000000000), expected: u32Bits(0b00000000000000100000000000000000) },\n      { input: u32Bits(0b00000000000000001000000000000000), expected: u32Bits(0b00000000000000010000000000000000) },\n      { input: u32Bits(0b00000000000000010000000000000000), expected: u32Bits(0b00000000000000001000000000000000) },\n      { input: u32Bits(0b00000000000000100000000000000000), expected: u32Bits(0b00000000000000000100000000000000) },\n      { input: u32Bits(0b00000000000001000000000000000000), expected: u32Bits(0b00000000000000000010000000000000) },\n      { input: u32Bits(0b00000000000010000000000000000000), expected: u32Bits(0b00000000000000000001000000000000) },\n      { input: u32Bits(0b00000000000100000000000000000000), expected: u32Bits(0b00000000000000000000100000000000) },\n      { input: u32Bits(0b00000000001000000000000000000000), expected: u32Bits(0b00000000000000000000010000000000) },\n      { input: u32Bits(0b00000000010000000000000000000000), expected: u32Bits(0b00000000000000000000001000000000) },\n      { input: u32Bits(0b00000000100000000000000000000000), expected: u32Bits(0b00000000000000000000000100000000) },\n      { input: u32Bits(0b00000001000000000000000000000000), expected: u32Bits(0b00000000000000000000000010000000) },\n      { input: u32Bits(0b00000010000000000000000000000000), expected: u32Bits(0b00000000000000000000000001000000) },\n      { input: u32Bits(0b00000100000000000000000000000000), expected: u32Bits(0b00000000000000000000000000100000) },\n      { input: u32Bits(0b00001000000000000000000000000000), expected: u32Bits(0b00000000000000000000000000010000) },\n      { input: u32Bits(0b00010000000000000000000000000000), expected: u32Bits(0b00000000000000000000000000001000) },\n      { input: u32Bits(0b00100000000000000000000000000000), expected: u32Bits(0b00000000000000000000000000000100) },\n      { input: u32Bits(0b01000000000000000000000000000000), expected: u32Bits(0b00000000000000000000000000000010) },\n      { input: u32Bits(0b10000000000000000000000000000000), expected: u32Bits(0b00000000000000000000000000000001) },\n\n      // 1's after leading 1\n      { input: u32Bits(0b00000000000000000000000000000011), expected: u32Bits(0b11000000000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000000000111), expected: u32Bits(0b11100000000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000000001111), expected: u32Bits(0b11110000000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000000011111), expected: u32Bits(0b11111000000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000000111111), expected: u32Bits(0b11111100000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000001111111), expected: u32Bits(0b11111110000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000011111111), expected: u32Bits(0b11111111000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000111111111), expected: u32Bits(0b11111111100000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000001111111111), expected: u32Bits(0b11111111110000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000011111111111), expected: u32Bits(0b11111111111000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000111111111111), expected: u32Bits(0b11111111111100000000000000000000) },\n      { input: u32Bits(0b00000000000000000001111111111111), expected: u32Bits(0b11111111111110000000000000000000) },\n      { input: u32Bits(0b00000000000000000011111111111111), expected: u32Bits(0b11111111111111000000000000000000) },\n      { input: u32Bits(0b00000000000000000111111111111111), expected: u32Bits(0b11111111111111100000000000000000) },\n      { input: u32Bits(0b00000000000000001111111111111111), expected: u32Bits(0b11111111111111110000000000000000) },\n      { input: u32Bits(0b00000000000000011111111111111111), expected: u32Bits(0b11111111111111111000000000000000) },\n      { input: u32Bits(0b00000000000000111111111111111111), expected: u32Bits(0b11111111111111111100000000000000) },\n      { input: u32Bits(0b00000000000001111111111111111111), expected: u32Bits(0b11111111111111111110000000000000) },\n      { input: u32Bits(0b00000000000011111111111111111111), expected: u32Bits(0b11111111111111111111000000000000) },\n      { input: u32Bits(0b00000000000111111111111111111111), expected: u32Bits(0b11111111111111111111100000000000) },\n      { input: u32Bits(0b00000000001111111111111111111111), expected: u32Bits(0b11111111111111111111110000000000) },\n      { input: u32Bits(0b00000000011111111111111111111111), expected: u32Bits(0b11111111111111111111111000000000) },\n      { input: u32Bits(0b00000000111111111111111111111111), expected: u32Bits(0b11111111111111111111111100000000) },\n      { input: u32Bits(0b00000001111111111111111111111111), expected: u32Bits(0b11111111111111111111111110000000) },\n      { input: u32Bits(0b00000011111111111111111111111111), expected: u32Bits(0b11111111111111111111111111000000) },\n      { input: u32Bits(0b00000111111111111111111111111111), expected: u32Bits(0b11111111111111111111111111100000) },\n      { input: u32Bits(0b00001111111111111111111111111111), expected: u32Bits(0b11111111111111111111111111110000) },\n      { input: u32Bits(0b00011111111111111111111111111111), expected: u32Bits(0b11111111111111111111111111111000) },\n      { input: u32Bits(0b00111111111111111111111111111111), expected: u32Bits(0b11111111111111111111111111111100) },\n      { input: u32Bits(0b01111111111111111111111111111111), expected: u32Bits(0b11111111111111111111111111111110) },\n      { input: u32Bits(0b11111111111111111111111111111111), expected: u32Bits(0b11111111111111111111111111111111) },\n\n      // random after leading 1\n      { input: u32Bits(0b00000000000000000000000000000110), expected: u32Bits(0b01100000000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000000001101), expected: u32Bits(0b10110000000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000000011101), expected: u32Bits(0b10111000000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000000111001), expected: u32Bits(0b10011100000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000001101111), expected: u32Bits(0b11110110000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000011111111), expected: u32Bits(0b11111111000000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000000111101111), expected: u32Bits(0b11110111100000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000001111111111), expected: u32Bits(0b11111111110000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000011111110001), expected: u32Bits(0b10001111111000000000000000000000) },\n      { input: u32Bits(0b00000000000000000000111011011101), expected: u32Bits(0b10111011011100000000000000000000) },\n      { input: u32Bits(0b00000000000000000001101101111111), expected: u32Bits(0b11111110110110000000000000000000) },\n      { input: u32Bits(0b00000000000000000011111111011111), expected: u32Bits(0b11111011111111000000000000000000) },\n      { input: u32Bits(0b00000000000000000101111001110101), expected: u32Bits(0b10101110011110100000000000000000) },\n      { input: u32Bits(0b00000000000000001101111011110111), expected: u32Bits(0b11101111011110110000000000000000) },\n      { input: u32Bits(0b00000000000000011111111111110011), expected: u32Bits(0b11001111111111111000000000000000) },\n      { input: u32Bits(0b00000000000000111111111110111111), expected: u32Bits(0b11111101111111111100000000000000) },\n      { input: u32Bits(0b00000000000001111111011111111111), expected: u32Bits(0b11111111111011111110000000000000) },\n      { input: u32Bits(0b00000000000011111111111111111111), expected: u32Bits(0b11111111111111111111000000000000) },\n      { input: u32Bits(0b00000000000111110101011110111111), expected: u32Bits(0b11111101111010101111100000000000) },\n      { input: u32Bits(0b00000000001111101111111111110111), expected: u32Bits(0b11101111111111110111110000000000) },\n      { input: u32Bits(0b00000000011111111111010000101111), expected: u32Bits(0b11110100001011111111111000000000) },\n      { input: u32Bits(0b00000000111111111111001111111011), expected: u32Bits(0b11011111110011111111111100000000) },\n      { input: u32Bits(0b00000001111111011111101111111111), expected: u32Bits(0b11111111110111111011111110000000) },\n      { input: u32Bits(0b00000011101011111011110111111011), expected: u32Bits(0b11011111101111011111010111000000) },\n      { input: u32Bits(0b00000111111110111111111111111111), expected: u32Bits(0b11111111111111111101111111100000) },\n      { input: u32Bits(0b00001111000000011011011110111111), expected: u32Bits(0b11111101111011011000000011110000) },\n      { input: u32Bits(0b00011110101111011111111111111111), expected: u32Bits(0b11111111111111111011110101111000) },\n      { input: u32Bits(0b00110110111111100111111110111101), expected: u32Bits(0b10111101111111100111111101101100) },\n      { input: u32Bits(0b01010111111101111111011111011111), expected: u32Bits(0b11111011111011111110111111101010) },\n      { input: u32Bits(0b11100010011110101101101110101111), expected: u32Bits(0b11110101110110110101111001000111) },\n    ]);\n  });\n\ng.test('i32')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#integer-builtin-functions')\n  .desc(`i32 tests`)\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    // prettier-ignore\n    run(t, builtin('reverseBits'), [TypeI32], TypeI32, cfg, [\n      // Zero\n      { input: i32Bits(0b00000000000000000000000000000000), expected: i32Bits(0b00000000000000000000000000000000) },\n\n      // One\n      { input: i32Bits(0b00000000000000000000000000000001), expected: i32Bits(0b10000000000000000000000000000000) },\n\n      // 0's after leading 1\n      { input: i32Bits(0b00000000000000000000000000000010), expected: i32Bits(0b01000000000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000000000100), expected: i32Bits(0b00100000000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000000001000), expected: i32Bits(0b00010000000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000000010000), expected: i32Bits(0b00001000000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000000100000), expected: i32Bits(0b00000100000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000001000000), expected: i32Bits(0b00000010000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000010000000), expected: i32Bits(0b00000001000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000100000000), expected: i32Bits(0b00000000100000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000001000000000), expected: i32Bits(0b00000000010000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000010000000000), expected: i32Bits(0b00000000001000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000100000000000), expected: i32Bits(0b00000000000100000000000000000000) },\n      { input: i32Bits(0b00000000000000000001000000000000), expected: i32Bits(0b00000000000010000000000000000000) },\n      { input: i32Bits(0b00000000000000000010000000000000), expected: i32Bits(0b00000000000001000000000000000000) },\n      { input: i32Bits(0b00000000000000000100000000000000), expected: i32Bits(0b00000000000000100000000000000000) },\n      { input: i32Bits(0b00000000000000001000000000000000), expected: i32Bits(0b00000000000000010000000000000000) },\n      { input: i32Bits(0b00000000000000010000000000000000), expected: i32Bits(0b00000000000000001000000000000000) },\n      { input: i32Bits(0b00000000000000100000000000000000), expected: i32Bits(0b00000000000000000100000000000000) },\n      { input: i32Bits(0b00000000000001000000000000000000), expected: i32Bits(0b00000000000000000010000000000000) },\n      { input: i32Bits(0b00000000000010000000000000000000), expected: i32Bits(0b00000000000000000001000000000000) },\n      { input: i32Bits(0b00000000000100000000000000000000), expected: i32Bits(0b00000000000000000000100000000000) },\n      { input: i32Bits(0b00000000001000000000000000000000), expected: i32Bits(0b00000000000000000000010000000000) },\n      { input: i32Bits(0b00000000010000000000000000000000), expected: i32Bits(0b00000000000000000000001000000000) },\n      { input: i32Bits(0b00000000100000000000000000000000), expected: i32Bits(0b00000000000000000000000100000000) },\n      { input: i32Bits(0b00000001000000000000000000000000), expected: i32Bits(0b00000000000000000000000010000000) },\n      { input: i32Bits(0b00000010000000000000000000000000), expected: i32Bits(0b00000000000000000000000001000000) },\n      { input: i32Bits(0b00000100000000000000000000000000), expected: i32Bits(0b00000000000000000000000000100000) },\n      { input: i32Bits(0b00001000000000000000000000000000), expected: i32Bits(0b00000000000000000000000000010000) },\n      { input: i32Bits(0b00010000000000000000000000000000), expected: i32Bits(0b00000000000000000000000000001000) },\n      { input: i32Bits(0b00100000000000000000000000000000), expected: i32Bits(0b00000000000000000000000000000100) },\n      { input: i32Bits(0b01000000000000000000000000000000), expected: i32Bits(0b00000000000000000000000000000010) },\n      { input: i32Bits(0b10000000000000000000000000000000), expected: i32Bits(0b00000000000000000000000000000001) },\n\n      // 1's after leading 1\n      { input: i32Bits(0b00000000000000000000000000000011), expected: i32Bits(0b11000000000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000000000111), expected: i32Bits(0b11100000000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000000001111), expected: i32Bits(0b11110000000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000000011111), expected: i32Bits(0b11111000000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000000111111), expected: i32Bits(0b11111100000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000001111111), expected: i32Bits(0b11111110000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000011111111), expected: i32Bits(0b11111111000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000111111111), expected: i32Bits(0b11111111100000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000001111111111), expected: i32Bits(0b11111111110000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000011111111111), expected: i32Bits(0b11111111111000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000111111111111), expected: i32Bits(0b11111111111100000000000000000000) },\n      { input: i32Bits(0b00000000000000000001111111111111), expected: i32Bits(0b11111111111110000000000000000000) },\n      { input: i32Bits(0b00000000000000000011111111111111), expected: i32Bits(0b11111111111111000000000000000000) },\n      { input: i32Bits(0b00000000000000000111111111111111), expected: i32Bits(0b11111111111111100000000000000000) },\n      { input: i32Bits(0b00000000000000001111111111111111), expected: i32Bits(0b11111111111111110000000000000000) },\n      { input: i32Bits(0b00000000000000011111111111111111), expected: i32Bits(0b11111111111111111000000000000000) },\n      { input: i32Bits(0b00000000000000111111111111111111), expected: i32Bits(0b11111111111111111100000000000000) },\n      { input: i32Bits(0b00000000000001111111111111111111), expected: i32Bits(0b11111111111111111110000000000000) },\n      { input: i32Bits(0b00000000000011111111111111111111), expected: i32Bits(0b11111111111111111111000000000000) },\n      { input: i32Bits(0b00000000000111111111111111111111), expected: i32Bits(0b11111111111111111111100000000000) },\n      { input: i32Bits(0b00000000001111111111111111111111), expected: i32Bits(0b11111111111111111111110000000000) },\n      { input: i32Bits(0b00000000011111111111111111111111), expected: i32Bits(0b11111111111111111111111000000000) },\n      { input: i32Bits(0b00000000111111111111111111111111), expected: i32Bits(0b11111111111111111111111100000000) },\n      { input: i32Bits(0b00000001111111111111111111111111), expected: i32Bits(0b11111111111111111111111110000000) },\n      { input: i32Bits(0b00000011111111111111111111111111), expected: i32Bits(0b11111111111111111111111111000000) },\n      { input: i32Bits(0b00000111111111111111111111111111), expected: i32Bits(0b11111111111111111111111111100000) },\n      { input: i32Bits(0b00001111111111111111111111111111), expected: i32Bits(0b11111111111111111111111111110000) },\n      { input: i32Bits(0b00011111111111111111111111111111), expected: i32Bits(0b11111111111111111111111111111000) },\n      { input: i32Bits(0b00111111111111111111111111111111), expected: i32Bits(0b11111111111111111111111111111100) },\n      { input: i32Bits(0b01111111111111111111111111111111), expected: i32Bits(0b11111111111111111111111111111110) },\n      { input: i32Bits(0b11111111111111111111111111111111), expected: i32Bits(0b11111111111111111111111111111111) },\n\n      // random after leading 1\n      { input: i32Bits(0b00000000000000000000000000000110), expected: i32Bits(0b01100000000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000000001101), expected: i32Bits(0b10110000000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000000011101), expected: i32Bits(0b10111000000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000000111001), expected: i32Bits(0b10011100000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000001101111), expected: i32Bits(0b11110110000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000011111111), expected: i32Bits(0b11111111000000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000000111101111), expected: i32Bits(0b11110111100000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000001111111111), expected: i32Bits(0b11111111110000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000011111110001), expected: i32Bits(0b10001111111000000000000000000000) },\n      { input: i32Bits(0b00000000000000000000111011011101), expected: i32Bits(0b10111011011100000000000000000000) },\n      { input: i32Bits(0b00000000000000000001101101111111), expected: i32Bits(0b11111110110110000000000000000000) },\n      { input: i32Bits(0b00000000000000000011111111011111), expected: i32Bits(0b11111011111111000000000000000000) },\n      { input: i32Bits(0b00000000000000000101111001110101), expected: i32Bits(0b10101110011110100000000000000000) },\n      { input: i32Bits(0b00000000000000001101111011110111), expected: i32Bits(0b11101111011110110000000000000000) },\n      { input: i32Bits(0b00000000000000011111111111110011), expected: i32Bits(0b11001111111111111000000000000000) },\n      { input: i32Bits(0b00000000000000111111111110111111), expected: i32Bits(0b11111101111111111100000000000000) },\n      { input: i32Bits(0b00000000000001111111011111111111), expected: i32Bits(0b11111111111011111110000000000000) },\n      { input: i32Bits(0b00000000000011111111111111111111), expected: i32Bits(0b11111111111111111111000000000000) },\n      { input: i32Bits(0b00000000000111110101011110111111), expected: i32Bits(0b11111101111010101111100000000000) },\n      { input: i32Bits(0b00000000001111101111111111110111), expected: i32Bits(0b11101111111111110111110000000000) },\n      { input: i32Bits(0b00000000011111111111010000101111), expected: i32Bits(0b11110100001011111111111000000000) },\n      { input: i32Bits(0b00000000111111111111001111111011), expected: i32Bits(0b11011111110011111111111100000000) },\n      { input: i32Bits(0b00000001111111011111101111111111), expected: i32Bits(0b11111111110111111011111110000000) },\n      { input: i32Bits(0b00000011101011111011110111111011), expected: i32Bits(0b11011111101111011111010111000000) },\n      { input: i32Bits(0b00000111111110111111111111111111), expected: i32Bits(0b11111111111111111101111111100000) },\n      { input: i32Bits(0b00001111000000011011011110111111), expected: i32Bits(0b11111101111011011000000011110000) },\n      { input: i32Bits(0b00011110101111011111111111111111), expected: i32Bits(0b11111111111111111011110101111000) },\n      { input: i32Bits(0b00110110111111100111111110111101), expected: i32Bits(0b10111101111111100111111101101100) },\n      { input: i32Bits(0b01010111111101111111011111011111), expected: i32Bits(0b11111011111011111110111111101010) },\n      { input: i32Bits(0b11100010011110101101101110101111), expected: i32Bits(0b11110101110110110101111001000111) },\n    ]);\n  });\n"],"file":"reverseBits.spec.js"}