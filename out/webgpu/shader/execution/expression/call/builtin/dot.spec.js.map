{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/dot.spec.ts"],"names":["description","makeTestGroup","GPUTest","TypeF32","TypeVec","dotInterval","sparseF32Range","allInputSources","makeVectorPairToF32IntervalCase","run","builtin","g","kVectorTestValues","flatMap","f","test","specURL","desc","params","u","combine","unimplemented","fn","t","makeCase","x","y","cases","i","map","j"],"mappings":"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","sourcesContent":["export const description = `\nExecution tests for the 'dot' builtin function\n\nT is AbstractInt, AbstractFloat, i32, u32, f32, or f16\n@const fn dot(e1: vecN<T>,e2: vecN<T>) -> T\nReturns the dot product of e1 and e2.\n\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { TypeF32, TypeVec } from '../../../../../util/conversion.js';\nimport { dotInterval } from '../../../../../util/f32_interval.js';\nimport { sparseF32Range } from '../../../../../util/math.js';\nimport { allInputSources, Case, makeVectorPairToF32IntervalCase, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n/**\n * Set of vectors, indexed by dimension, that contain interesting float values\n *\n * The tests do not do the simple option for coverage of computing the cartesian\n * product of all of the interesting float values N times for vecN tests,\n * because that creates a huge number of tests for vec3 and vec4, leading to\n * time outs.\n * Instead they insert the interesting f32 values into each location of the\n * vector to get a spread of testing over the entire range. This reduces the\n * number of cases being run substantially, but maintains coverage.\n */\nconst kVectorTestValues = {\n  2: sparseF32Range().flatMap(f => [\n    [f, 1.0],\n    [1.0, f],\n  ]),\n  3: sparseF32Range().flatMap(f => [\n    [f, 1.0, 2.0],\n    [1.0, f, 2.0],\n    [1.0, 2.0, f],\n  ]),\n  4: sparseF32Range().flatMap(f => [\n    [f, 1.0, 2.0, 3.0],\n    [1.0, f, 2.0, 3.0],\n    [1.0, 2.0, f, 3.0],\n    [1.0, 2.0, 3.0, f],\n  ]),\n};\n\ng.test('abstract_int')\n  .specURL('https://www.w3.org/TR/WGSL/#vector-builtin-functions')\n  .desc(`abstract int tests`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .unimplemented();\n\ng.test('i32')\n  .specURL('https://www.w3.org/TR/WGSL/#vector-builtin-functions')\n  .desc(`i32 tests`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .unimplemented();\n\ng.test('u32')\n  .specURL('https://www.w3.org/TR/WGSL/#vector-builtin-functions')\n  .desc(`u32 tests`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .unimplemented();\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#vector-builtin-functions')\n  .desc(`abstract float test`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .unimplemented();\n\ng.test('f32_vec2')\n  .specURL('https://www.w3.org/TR/WGSL/#vector-builtin-functions')\n  .desc(`f32 tests using vec2s`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const makeCase = (x: number[], y: number[]): Case => {\n      return makeVectorPairToF32IntervalCase(x, y, dotInterval);\n    };\n\n    const cases: Case[] = kVectorTestValues[2].flatMap(i => {\n      return kVectorTestValues[2].map(j => {\n        return makeCase(i, j);\n      });\n    });\n\n    await run(\n      t,\n      builtin('dot'),\n      [TypeVec(2, TypeF32), TypeVec(2, TypeF32)],\n      TypeF32,\n      t.params,\n      cases\n    );\n  });\n\ng.test('f32_vec3')\n  .specURL('https://www.w3.org/TR/WGSL/#vector-builtin-functions')\n  .desc(`f32 tests using vec3s`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const makeCase = (x: number[], y: number[]): Case => {\n      return makeVectorPairToF32IntervalCase(x, y, dotInterval);\n    };\n\n    const cases: Case[] = kVectorTestValues[3].flatMap(i => {\n      return kVectorTestValues[3].map(j => {\n        return makeCase(i, j);\n      });\n    });\n\n    await run(\n      t,\n      builtin('dot'),\n      [TypeVec(3, TypeF32), TypeVec(3, TypeF32)],\n      TypeF32,\n      t.params,\n      cases\n    );\n  });\n\ng.test('f32_vec4')\n  .specURL('https://www.w3.org/TR/WGSL/#vector-builtin-functions')\n  .desc(`f32 tests using vec4s`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const makeCase = (x: number[], y: number[]): Case => {\n      return makeVectorPairToF32IntervalCase(x, y, dotInterval);\n    };\n\n    const cases: Case[] = kVectorTestValues[4].flatMap(i => {\n      return kVectorTestValues[4].map(j => {\n        return makeCase(i, j);\n      });\n    });\n\n    await run(\n      t,\n      builtin('dot'),\n      [TypeVec(4, TypeF32), TypeVec(4, TypeF32)],\n      TypeF32,\n      t.params,\n      cases\n    );\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#vector-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u => u.combine('inputSource', allInputSources))\n  .unimplemented();\n"],"file":"dot.spec.js"}