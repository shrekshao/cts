{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureSampleGrad.spec.ts"],"names":["description","makeTestGroup","GPUTest","generateCoordBoundaries","generateOffsets","g","test","specURL","desc","paramsSubcasesOnly","u","combine","unimplemented"],"mappings":"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","sourcesContent":["export const description = `\nSamples a texture using explicit gradients.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\n\nimport { generateCoordBoundaries, generateOffsets } from './utils.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('sampled_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplegrad')\n  .desc(\n    `\nfn textureSampleGrad(t: texture_2d<f32>, s: sampler, coords: vec2<f32>, ddx: vec2<f32>, ddy: vec2<f32>) -> vec4<f32>\nfn textureSampleGrad(t: texture_2d<f32>, s: sampler, coords: vec2<f32>, ddx: vec2<f32>, ddy: vec2<f32>, offset: vec2<i32>) -> vec4<f32>\n\nParameters:\n * t  The sampled texture.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * ddx The x direction derivative vector used to compute the sampling locations\n * ddy The y direction derivative vector used to compute the sampling locations\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n      .combine('coords', generateCoordBoundaries(2))\n      .combine('offset', generateOffsets(2))\n  )\n  .unimplemented();\n\ng.test('sampled_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplegrad')\n  .desc(\n    `\nfn textureSampleGrad(t: texture_3d<f32>, s: sampler, coords: vec3<f32>, ddx: vec3<f32>, ddy: vec3<f32>) -> vec4<f32>\nfn textureSampleGrad(t: texture_3d<f32>, s: sampler, coords: vec3<f32>, ddx: vec3<f32>, ddy: vec3<f32>, offset: vec3<i32>) -> vec4<f32>\nfn textureSampleGrad(t: texture_cube<f32>, s: sampler, coords: vec3<f32>, ddx: vec3<f32>, ddy: vec3<f32>) -> vec4<f32>\n\nParameters:\n * t  The sampled texture.\n * s  The sampler type.\n * ddx The x direction derivative vector used to compute the sampling locations\n * ddy The y direction derivative vector used to compute the sampling locations\n * coords The texture coordinates used for sampling.\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n      .combine('coords', generateCoordBoundaries(3))\n      .combine('offset', generateOffsets(3))\n  )\n  .unimplemented();\n\ng.test('sampled_array_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplegrad')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureSampleGrad(t: texture_2d_array<f32>, s: sampler, coords: vec2<f32>, array_index: C, ddx: vec2<f32>, ddy: vec2<f32>) -> vec4<f32>\nfn textureSampleGrad(t: texture_2d_array<f32>, s: sampler, coords: vec2<f32>, array_index: C, ddx: vec2<f32>, ddy: vec2<f32>, offset: vec2<i32>) -> vec4<f32>\n\nParameters:\n * t  The sampled texture.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * array_index The 0-based texture array index to sample.\n * ddx The x direction derivative vector used to compute the sampling locations\n * ddy The y direction derivative vector used to compute the sampling locations\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('C_value', [-1, 0, 1, 2, 3, 4] as const)\n      .combine('coords', generateCoordBoundaries(2))\n      /* array_index not param'd as out-of-bounds is implementation specific */\n      .combine('offset', generateOffsets(2))\n  )\n  .unimplemented();\n\ng.test('sampled_array_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplegrad')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureSampleGrad(t: texture_cube_array<f32>, s: sampler, coords: vec3<f32>, array_index: C, ddx: vec3<f32>, ddy: vec3<f32>) -> vec4<f32>\n\nParameters:\n * t  The sampled texture.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * array_index The 0-based texture array index to sample.\n * ddx The x direction derivative vector used to compute the sampling locations\n * ddy The y direction derivative vector used to compute the sampling locations\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('C_value', [-1, 0, 1, 2, 3, 4] as const)\n      .combine('coords', generateCoordBoundaries(3))\n  )\n  .unimplemented();\n"],"file":"textureSampleGrad.spec.js"}