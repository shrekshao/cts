{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/log.spec.ts"],"names":["description","makeTestGroup","GPUTest","kValue","TypeF32","logInterval","biasedRange","fullF32Range","linearRange","allInputSources","makeUnaryToF32IntervalCase","run","builtin","g","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","makeCase","x","cases","f32","positive","min","map"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,CAPO,CASP,SAASC,aAAT,QAA8B,kDAA9B;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,MAAT,QAAuB,kCAAvB;AACA,SAASC,OAAT,QAAwB,mCAAxB;AACA,SAASC,WAAT,QAA4B,qCAA5B;AACA,SAASC,WAAT,EAAsBC,YAAtB,EAAoCC,WAApC,QAAuD,6BAAvD;AACA,SAASC,eAAT,EAAgCC,0BAAhC,EAA4DC,GAA5D,QAAuE,qBAAvE;;AAEA,SAASC,OAAT,QAAwB,cAAxB;;AAEA,OAAO,MAAMC,CAAC,GAAGZ,aAAa,CAACC,OAAD,CAAvB;;AAEPW,CAAC,CAACC,IAAF,CAAO,gBAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH,CAES,sBAFT;AAGGC,MAHH,CAGU,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBV,eAAzB,EAA0CU,OAA1C,CAAkD,WAAlD,EAA+D,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAA/D,CAJJ;;AAMGC,aANH;;AAQAR,CAAC,CAACC,IAAF,CAAO,KAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA,CAPA;;AASGC,MATH,CASU,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBV,eAAzB,EAA0CU,OAA1C,CAAkD,WAAlD,EAA+D,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAA/D,CAVJ;;AAYGE,EAZH,CAYM,OAAMC,CAAN,KAAW;AACb;AACA,QAAMC,QAAQ,GAAG,CAACC,CAAD,KAAqB;AACpC,WAAOf,0BAA0B,CAACe,CAAD,EAAIpB,WAAJ,CAAjC;AACD,GAFD;;AAIA,QAAMqB,KAAkB,GAAG;AACzB;AACA,KAAGlB,WAAW,CAACL,MAAM,CAACwB,GAAP,CAAWC,QAAX,CAAoBC,GAArB,EAA0B,GAA1B,EAA+B,EAA/B,CAFW;AAGzB,KAAGrB,WAAW,CAAC,GAAD,EAAM,GAAN,EAAW,EAAX,CAHW;AAIzB,KAAGF,WAAW,CAAC,GAAD,EAAM,KAAK,EAAX,EAAe,IAAf,CAJW;AAKzB,KAAGC,YAAY,EALU;AAMzBuB,EAAAA,GANyB,CAMrB,CAAAL,CAAC,KAAID,QAAQ,CAACC,CAAD,CANQ,CAA3B;;AAQA,QAAMd,GAAG,CAACY,CAAD,EAAIX,OAAO,CAAC,KAAD,CAAX,EAAoB,CAACR,OAAD,CAApB,EAA+BA,OAA/B,EAAwCmB,CAAC,CAACN,MAA1C,EAAkDS,KAAlD,CAAT;AACD,CA3BH;;AA6BAb,CAAC,CAACC,IAAF,CAAO,KAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH,CAES,WAFT;AAGGC,MAHH,CAGU,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBV,eAAzB,EAA0CU,OAA1C,CAAkD,WAAlD,EAA+D,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAA/D,CAJJ;;AAMGC,aANH","sourcesContent":["export const description = `\nExecution tests for the 'log' builtin function\n\nS is AbstractFloat, f32, f16\nT is S or vecN<S>\n@const fn log(e: T ) -> T\nReturns the natural logarithm of e. Component-wise when T is a vector.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { kValue } from '../../../../../util/constants.js';\nimport { TypeF32 } from '../../../../../util/conversion.js';\nimport { logInterval } from '../../../../../util/f32_interval.js';\nimport { biasedRange, fullF32Range, linearRange } from '../../../../../util/math.js';\nimport { allInputSources, Case, makeUnaryToF32IntervalCase, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nf32 tests\n\nTODO(#792): Decide what the ground-truth is for these tests. [1]\n`\n  )\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    // [1]: Need to decide what the ground-truth is.\n    const makeCase = (x: number): Case => {\n      return makeUnaryToF32IntervalCase(x, logInterval);\n    };\n\n    const cases: Array<Case> = [\n      // log's accuracy is defined in three regions { [0, 0.5), [0.5, 2.0], (2.0, +âˆž] }\n      ...linearRange(kValue.f32.positive.min, 0.5, 20),\n      ...linearRange(0.5, 2.0, 20),\n      ...biasedRange(2.0, 2 ** 32, 1000),\n      ...fullF32Range(),\n    ].map(x => makeCase(x));\n\n    await run(t, builtin('log'), [TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"file":"log.spec.js"}