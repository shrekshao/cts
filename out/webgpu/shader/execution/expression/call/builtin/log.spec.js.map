{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/log.spec.ts"],"names":["description","makeTestGroup","GPUTest","absThreshold","ulpThreshold","kValue","f32","TypeF32","biasedRange","linearRange","quantizeToF32","run","builtin","g","test","uniqueId","specURL","desc","params","u","combine","undefined","fn","t","makeCase","x","f32_x","input","expected","Math","log","runRange","match","cases","cfg","cmpFloats","range","positive","min","map"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAFO,CAIP,SAASC,aAAT,QAA8B,kDAA9B;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,YAAT,EAAmCC,YAAnC,QAAuD,gCAAvD;AACA,SAASC,MAAT,QAAuB,kCAAvB;AACA,SAASC,GAAT,EAAcC,OAAd,QAA6B,mCAA7B;AACA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,aAAnC,QAAwD,6BAAxD;AACA,SAAiCC,GAAjC,QAA4C,qBAA5C;;AAEA,SAASC,OAAT,QAAwB,cAAxB;;AAEA,OAAO,MAAMC,CAAC,GAAGZ,aAAa,CAACC,OAAD,CAAvB;;AAEPW,CAAC,CAACC,IAAF,CAAO,KAAP;AACGC,QADH,CACY,kBADZ;AAEGC,OAFH,CAEW,sEAFX;AAGGC,IAHH;AAIK;AACL;AACA;AACA;AACA;AACA,CATA;;AAWGC,MAXH,CAWU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,cADX,EAC2B,CAAC,SAAD,EAAY,WAAZ,EAAyB,YAAzB,CAD3B;AAEGA,OAFH,CAEW,WAFX,EAEwB,CAACC,SAAD,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAFxB;AAGGD,OAHH,CAGW,OAHX,EAGoB,CAAC,KAAD,EAAQ,KAAR,EAAe,MAAf,CAHpB,CAZJ;;AAiBGE,EAjBH,CAiBM,OAAMC,CAAN,KAAW;AACb;AACA,QAAMC,QAAQ,GAAG,CAACC,CAAD,KAAqB;AACpC,UAAMC,KAAK,GAAGhB,aAAa,CAACe,CAAD,CAA3B;AACA,WAAO,EAAEE,KAAK,EAAErB,GAAG,CAACmB,CAAD,CAAZ,EAAiBG,QAAQ,EAAEtB,GAAG,CAACuB,IAAI,CAACC,GAAL,CAASJ,KAAT,CAAD,CAA9B,EAAP;AACD,GAHD;;AAKA,QAAMK,QAAQ,GAAG,CAACC,KAAD,EAAoBC,KAApB,KAAwC;AACvD,UAAMC,GAAW,GAAGX,CAAC,CAACL,MAAtB;AACAgB,IAAAA,GAAG,CAACC,SAAJ,GAAgBH,KAAhB;AACArB,IAAAA,GAAG,CAACY,CAAD,EAAIX,OAAO,CAAC,KAAD,CAAX,EAAoB,CAACL,OAAD,CAApB,EAA+BA,OAA/B,EAAwC2B,GAAxC,EAA6CD,KAA7C,CAAH;AACD,GAJD;;AAMA;AACA,UAAQV,CAAC,CAACL,MAAF,CAASkB,KAAjB;AACE,SAAK,KAAL,EAAY;AACVL,MAAAA,QAAQ;AACN3B,MAAAA,YAAY,CAAC,CAAD,CADN;AAENK,MAAAA,WAAW,CAACJ,MAAM,CAACC,GAAP,CAAW+B,QAAX,CAAoBC,GAArB,EAA0B,GAA1B,EAA+B,EAA/B,CAAX,CAA8CC,GAA9C,CAAkD,CAAAd,CAAC,KAAID,QAAQ,CAACC,CAAD,CAA/D,CAFM,CAAR;;AAIA;AACF,SAAK,KAAL,EAAY;AACVM,MAAAA,QAAQ;AACN5B,MAAAA,YAAY,CAAC,KAAK,CAAC,EAAP,CADN;AAENM,MAAAA,WAAW,CAAC,GAAD,EAAM,GAAN,EAAW,EAAX,CAAX,CAA0B8B,GAA1B,CAA8B,CAAAd,CAAC,KAAID,QAAQ,CAACC,CAAD,CAA3C,CAFM,CAAR;;AAIA;AACF,SAAK,MAAL,EAAa;AACXM,MAAAA,QAAQ;AACN3B,MAAAA,YAAY,CAAC,CAAD,CADN;AAENI,MAAAA,WAAW,CAAC,GAAD,EAAM,KAAK,EAAX,EAAe,IAAf,CAAX,CAAgC+B,GAAhC,CAAoC,CAAAd,CAAC,KAAID,QAAQ,CAACC,CAAD,CAAjD,CAFM,CAAR;;AAIA,YAlBJ;;AAoBD,CAnDH","sourcesContent":["export const description = `\nExecution Tests for the 'log' builtin function\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { absThreshold, FloatMatch, ulpThreshold } from '../../../../../util/compare.js';\nimport { kValue } from '../../../../../util/constants.js';\nimport { f32, TypeF32 } from '../../../../../util/conversion.js';\nimport { biasedRange, linearRange, quantizeToF32 } from '../../../../../util/math.js';\nimport { Case, CaseList, Config, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('f32')\n  .uniqueId('7cd6780116b47d00')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#float-builtin-functions')\n  .desc(\n    `\nlog:\nT is f32 or vecN<f32> log(e: T ) -> T Returns the natural logarithm of e. Component-wise when T is a vector. (GLSLstd450Log)\n\nTODO(#792): Decide what the ground-truth is for these tests. [1]\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n      .combine('range', ['low', 'mid', 'high'] as const)\n  )\n  .fn(async t => {\n    // [1]: Need to decide what the ground-truth is.\n    const makeCase = (x: number): Case => {\n      const f32_x = quantizeToF32(x);\n      return { input: f32(x), expected: f32(Math.log(f32_x)) };\n    };\n\n    const runRange = (match: FloatMatch, cases: CaseList) => {\n      const cfg: Config = t.params;\n      cfg.cmpFloats = match;\n      run(t, builtin('log'), [TypeF32], TypeF32, cfg, cases);\n    };\n\n    // log's accuracy is defined in three regions { [0, 0.5), [0.5, 2.0], (2.0, +∞] }\n    switch (t.params.range) {\n      case 'low': // [0, 0.5)\n        runRange(\n          ulpThreshold(3),\n          linearRange(kValue.f32.positive.min, 0.5, 20).map(x => makeCase(x))\n        );\n        break;\n      case 'mid': // [0.5, 2.0]\n        runRange(\n          absThreshold(2 ** -21),\n          linearRange(0.5, 2.0, 20).map(x => makeCase(x))\n        );\n        break;\n      case 'high': // (2.0, +∞]\n        runRange(\n          ulpThreshold(3),\n          biasedRange(2.0, 2 ** 32, 1000).map(x => makeCase(x))\n        );\n        break;\n    }\n  });\n"],"file":"log.spec.js"}