{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/log.spec.ts"],"names":["description","makeTestGroup","GPUTest","absMatch","ulpMatch","kValue","TypeF32","biasedRange","linearRange","makeUnaryF32Case","run","builtin","g","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","makeCase","x","Math","log","runRange","match","cases","cfg","cmpFloats","range","f32","positive","min","map"],"mappings":"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","sourcesContent":["export const description = `\nExecution tests for the 'log' builtin function\n\nS is AbstractFloat, f32, f16\nT is S or vecN<S>\n@const fn log(e: T ) -> T\nReturns the natural logarithm of e. Component-wise when T is a vector.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { absMatch, FloatMatch, ulpMatch } from '../../../../../util/compare.js';\nimport { kValue } from '../../../../../util/constants.js';\nimport { TypeF32 } from '../../../../../util/conversion.js';\nimport { biasedRange, linearRange } from '../../../../../util/math.js';\nimport { Case, CaseList, Config, makeUnaryF32Case, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n      .combine('range', ['low', 'mid', 'high'] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nf32 tests\n\nTODO(#792): Decide what the ground-truth is for these tests. [1]\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n      .combine('range', ['low', 'mid', 'high'] as const)\n  )\n  .fn(async t => {\n    // [1]: Need to decide what the ground-truth is.\n    const makeCase = (x: number): Case => {\n      return makeUnaryF32Case(x, Math.log);\n    };\n\n    const runRange = (match: FloatMatch, cases: CaseList) => {\n      const cfg: Config = t.params;\n      cfg.cmpFloats = match;\n      run(t, builtin('log'), [TypeF32], TypeF32, cfg, cases);\n    };\n\n    // log's accuracy is defined in three regions { [0, 0.5), [0.5, 2.0], (2.0, +∞] }\n    switch (t.params.range) {\n      case 'low': // [0, 0.5)\n        runRange(\n          ulpMatch(3),\n          linearRange(kValue.f32.positive.min, 0.5, 20).map(x => makeCase(x))\n        );\n        break;\n      case 'mid': // [0.5, 2.0]\n        runRange(\n          absMatch(2 ** -21),\n          linearRange(0.5, 2.0, 20).map(x => makeCase(x))\n        );\n        break;\n      case 'high': // (2.0, +∞]\n        runRange(\n          ulpMatch(3),\n          biasedRange(2.0, 2 ** 32, 1000).map(x => makeCase(x))\n        );\n        break;\n    }\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n      .combine('range', ['low', 'mid', 'high'] as const)\n  )\n  .unimplemented();\n"],"file":"log.spec.js"}