{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/fract.spec.ts"],"names":["description","makeTestGroup","GPUTest","correctlyRoundedMatch","anyOf","kBit","kValue","f32","f32Bits","TypeF32","isSubnormalNumber","makeUnaryF32Case","run","builtin","g","test","specURL","desc","params","u","combine","undefined","unimplemented","fn","t","cfg","cmpFloats","makeCase","x","result","Math","floor","input","expected","cases","positive","zero","negative","min","max","subnormal"],"mappings":"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","sourcesContent":["export const description = `\nExecution tests for the 'fract' builtin function\n\nS is AbstractFloat, f32, f16\nT is S or vecN<S>\n@const fn fract(e: T ) -> T\nReturns the fractional part of e, computed as e - floor(e).\nComponent-wise when T is a vector.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { correctlyRoundedMatch, anyOf } from '../../../../../util/compare.js';\nimport { kBit, kValue } from '../../../../../util/constants.js';\nimport { f32, f32Bits, TypeF32 } from '../../../../../util/conversion.js';\nimport { isSubnormalNumber } from '../../../../../util/math.js';\nimport { Case, Config, makeUnaryF32Case, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('abstract_float')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`abstract float tests`)\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f32 tests`)\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    cfg.cmpFloats = correctlyRoundedMatch();\n\n    const makeCase = (x: number): Case => {\n      const result = x - Math.floor(x);\n      if (result < 1.0 || isSubnormalNumber(x)) {\n        return makeUnaryF32Case(x, x => x - Math.floor(x));\n      }\n      // Very small negative numbers can lead to catastrophic cancellation, thus calculating a fract of 1.0, which is\n      // technically not a fractional part.\n      // Some platforms return the nearest number less than 1, and others 1.0.\n      // https://github.com/gpuweb/gpuweb/issues/2822 has been filed to clarify.\n      return { input: f32(x), expected: anyOf(f32(1.0), f32Bits(0x3f7f_ffff)) };\n    };\n\n    const cases: Array<Case> = [\n      // Zeroes\n      { input: f32Bits(kBit.f32.positive.zero), expected: f32(0) },\n      { input: f32Bits(kBit.f32.negative.zero), expected: f32(0) },\n\n      // Positive numbers\n      makeCase(0.1), // ~0.1 -> ~0.1\n      makeCase(0.5), // 0.5 -> 0.5\n      makeCase(0.9), // ~0.9 -> ~0.9\n      makeCase(1), // 1 -> 0\n      makeCase(2), // 2 -> 0\n      makeCase(1.11), // ~1.11 -> ~0.11\n      makeCase(10.0001), // ~10.0001 -> ~0.0001\n\n      // Negative numbers\n      makeCase(-0.1), // ~-0.1 -> ~0.9\n      makeCase(-0.5), // -0.5 -> 0.5\n      makeCase(-0.9), // ~-0.9 -> ~0.1\n      makeCase(-1), // -1 -> 0\n      makeCase(-2), // -2 -> 0\n      makeCase(-1.11), // ~-1.11 -> ~0.89\n      makeCase(-10.0001), // -10.0001 -> ~0.9999\n\n      // Min and Max f32\n      makeCase(kValue.f32.positive.min),\n      makeCase(kValue.f32.positive.max),\n      makeCase(kValue.f32.negative.max),\n      makeCase(kValue.f32.negative.min),\n\n      // Subnormal f32\n      makeCase(kValue.f32.subnormal.positive.min),\n      makeCase(kValue.f32.subnormal.positive.max),\n      makeCase(kValue.f32.subnormal.negative.max),\n      makeCase(kValue.f32.subnormal.negative.min),\n    ];\n\n    // prettier-ignore\n    run(t, builtin('fract'), [TypeF32], TypeF32, cfg, cases);\n  });\n\ng.test('f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(`f16 tests`)\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [undefined, 2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"file":"fract.spec.js"}