{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureGather.spec.ts"],"names":["description","makeTestGroup","GPUTest","generateCoordBoundaries","generateOffsets","g","test","specURL","desc","paramsSubcasesOnly","u","combine","unimplemented"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAtBO,CAwBP,SAASC,aAAT,QAA8B,kDAA9B;AACA,SAASC,OAAT,QAAwB,4BAAxB;;AAEA,SAASC,uBAAT,EAAkCC,eAAlC,QAAyD,YAAzD;;AAEA,OAAO,MAAMC,CAAC,GAAGJ,aAAa,CAACC,OAAD,CAAvB;;AAEPG,CAAC,CAACC,IAAF,CAAO,mBAAP;AACGC,OADH,CACW,2CADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAxBA;;AA0BGC,kBA1BH,CA0BsB,CAAAC,CAAC;AACnBA,CAAC;AACEC,OADH,CACW,GADX,EACgB,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CADhB;AAEGA,OAFH,CAEW,GAFX,EAEgB,CAAC,eAAD,EAAkB,QAAlB,EAA4B,eAA5B,CAFhB;AAGGA,OAHH,CAGW,GAHX,EAGgB,CAAC,KAAD,EAAQ,KAAR,CAHhB;AAIGA,OAJH,CAIW,SAJX,EAIsB,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,CAJtB;AAKGA,OALH,CAKW,QALX,EAKqBR,uBAAuB,CAAC,CAAD,CAL5C;AAMGQ,OANH,CAMW,QANX,EAMqBP,eAAe,CAAC,CAAD,CANpC,CA3BJ;;AAmCGQ,aAnCH;;AAqCAP,CAAC,CAACC,IAAF,CAAO,mBAAP;AACGC,OADH,CACW,2CADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAjBA;;AAmBGC,kBAnBH,CAmBsB,CAAAC,CAAC;AACnBA,CAAC;AACEC,OADH,CACW,GADX,EACgB,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CADhB;AAEGA,OAFH,CAEW,GAFX,EAEgB,CAAC,eAAD,EAAkB,QAAlB,EAA4B,eAA5B,CAFhB;AAGGA,OAHH,CAGW,GAHX,EAGgB,CAAC,KAAD,EAAQ,KAAR,CAHhB;AAIGA,OAJH,CAIW,SAJX,EAIsB,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,CAJtB;AAKGA,OALH,CAKW,QALX,EAKqBR,uBAAuB,CAAC,CAAD,CAL5C,CApBJ;;AA2BGS,aA3BH;;AA6BAP,CAAC,CAACC,IAAF,CAAO,yBAAP;AACGC,OADH,CACW,2CADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAzBA;;AA2BGC,kBA3BH,CA2BsB,CAAAC,CAAC;AACnBA,CAAC;AACEC,OADH,CACW,GADX,EACgB,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CADhB;AAEGA,OAFH,CAEW,GAFX,EAEgB,CAAC,eAAD,EAAkB,QAAlB,EAA4B,eAA5B,CAFhB;AAGGA,OAHH,CAGW,GAHX,EAGgB,CAAC,KAAD,EAAQ,KAAR,CAHhB;AAIGA,OAJH,CAIW,SAJX,EAIsB,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,CAJtB;AAKGA,OALH,CAKW,QALX,EAKqBR,uBAAuB,CAAC,CAAD,CAL5C;AAME,yEANF;AAOGQ,OAPH,CAOW,QAPX,EAOqBP,eAAe,CAAC,CAAD,CAPpC,CA5BJ;;AAqCGQ,aArCH;;AAuCAP,CAAC,CAACC,IAAF,CAAO,yBAAP;AACGC,OADH,CACW,2CADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAlBA;;AAoBGC,kBApBH;AAqBI,CAAAC,CAAC;AACCA,CAAC;AACEC,OADH,CACW,GADX,EACgB,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CADhB;AAEGA,OAFH,CAEW,GAFX,EAEgB,CAAC,eAAD,EAAkB,QAAlB,EAA4B,eAA5B,CAFhB;AAGGA,OAHH,CAGW,GAHX,EAGgB,CAAC,KAAD,EAAQ,KAAR,CAHhB;AAIGA,OAJH,CAIW,SAJX,EAIsB,CAAC,CAAC,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,EAAiB,CAAjB,CAJtB;AAKGA,OALH,CAKW,QALX,EAKqBR,uBAAuB,CAAC,CAAD,CAL5C;AAMF,yEA5BJ;;AA8BGS,aA9BH;;AAgCAP,CAAC,CAACC,IAAF,CAAO,iBAAP;AACGC,OADH,CACW,2CADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAjBA;;AAmBGC,kBAnBH,CAmBsB,CAAAC,CAAC;AACnBA,CAAC;AACEC,OADH,CACW,GADX,EACgB,CAAC,eAAD,EAAkB,QAAlB,EAA4B,eAA5B,CADhB;AAEGA,OAFH,CAEW,QAFX,EAEqBR,uBAAuB,CAAC,CAAD,CAF5C;AAGGQ,OAHH,CAGW,QAHX,EAGqBP,eAAe,CAAC,CAAD,CAHpC,CApBJ;;AAyBGQ,aAzBH;;AA2BAP,CAAC,CAACC,IAAF,CAAO,iBAAP;AACGC,OADH,CACW,2CADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,CAVA;;AAYGC,kBAZH,CAYsB,CAAAC,CAAC;AACnBA,CAAC;AACEC,OADH,CACW,GADX,EACgB,CAAC,eAAD,EAAkB,QAAlB,EAA4B,eAA5B,CADhB;AAEGA,OAFH,CAEW,QAFX,EAEqBR,uBAAuB,CAAC,CAAD,CAF5C,CAbJ;;AAiBGS,aAjBH;;AAmBAP,CAAC,CAACC,IAAF,CAAO,uBAAP;AACGC,OADH,CACW,2CADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CApBA;;AAsBGC,kBAtBH,CAsBsB,CAAAC,CAAC;AACnBA,CAAC;AACEC,OADH,CACW,GADX,EACgB,CAAC,eAAD,EAAkB,QAAlB,EAA4B,eAA5B,CADhB;AAEGA,OAFH,CAEW,GAFX,EAEgB,CAAC,KAAD,EAAQ,KAAR,CAFhB;AAGGA,OAHH,CAGW,QAHX,EAGqBR,uBAAuB,CAAC,CAAD,CAH5C;AAIE,yEAJF;AAKGQ,OALH,CAKW,QALX,EAKqBP,eAAe,CAAC,CAAD,CALpC,CAvBJ;;AA8BGQ,aA9BH;;AAgCAP,CAAC,CAACC,IAAF,CAAO,uBAAP;AACGC,OADH,CACW,2CADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbA;;AAeGC,kBAfH;AAgBI,CAAAC,CAAC;AACCA,CAAC;AACEC,OADH,CACW,GADX,EACgB,CAAC,eAAD,EAAkB,QAAlB,EAA4B,eAA5B,CADhB;AAEGA,OAFH,CAEW,GAFX,EAEgB,CAAC,KAAD,EAAQ,KAAR,CAFhB;AAGGA,OAHH,CAGW,QAHX,EAGqBR,uBAAuB,CAAC,CAAD,CAH5C;AAIF,yEArBJ;;AAuBGS,aAvBH","sourcesContent":["export const description = `\nExecution tests for the 'textureGather' builtin function\n\nA texture gather operation reads from a 2D, 2D array, cube, or cube array texture, computing a four-component vector as follows:\n * Find the four texels that would be used in a sampling operation with linear filtering, from mip level 0:\n   - Use the specified coordinate, array index (when present), and offset (when present).\n   - The texels are adjacent, forming a square, when considering their texture space coordinates (u,v).\n   - Selected texels at the texture edge, cube face edge, or cube corners are handled as in ordinary texture sampling.\n * For each texel, read one channel and convert it into a scalar value.\n   - For non-depth textures, a zero-based component parameter specifies the channel to use.\n     * If the texture format supports the specified channel, i.e. has more than component channels:\n       - Yield scalar value v[component] when the texel value is v.\n     * Otherwise:\n       - Yield 0.0 when component is 1 or 2.\n       - Yield 1.0 when component is 3 (the alpha channel).\n   - For depth textures, yield the texel value. (Depth textures only have one channel.)\n * Yield the four-component vector, arranging scalars produced by the previous step into components according to the relative coordinates of the texels, as follows:\n   - Result component  Relative texel coordinate\n      x (umin,vmax)\n      y (umax,vmax)\n      z (umax,vmin)\n      w (umin,vmin)\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\n\nimport { generateCoordBoundaries, generateOffsets } from './utils.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('sampled_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturegather')\n  .desc(\n    `\nC: i32, u32\nT: i32, u32, f32\n\nfn textureGather(component: C, t: texture_2d<T>, s: sampler, coords: vec2<f32>) -> vec4<T>\nfn textureGather(component: C, t: texture_2d<T>, s: sampler, coords: vec2<f32>, offset: vec2<i32>) -> vec4<T>\n\nParameters:\n * component:\n    - The index of the channel to read from the selected texels.\n    - When provided, the component expression must a creation-time expression (e.g. 1).\n    - Its value must be at least 0 and at most 3. Values outside of this range will result in a shader-creation error.\n * t: The sampled texture to read from\n * s: The sampler type\n * coords: The texture coordinates\n * offset:\n    - The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n      This offset is applied before applying any texture wrapping modes.\n    - The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    - Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('T', ['f32', 'i32', 'u32'] as const)\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('C_value', [-1, 0, 1, 2, 3, 4] as const)\n      .combine('coords', generateCoordBoundaries(2))\n      .combine('offset', generateOffsets(2))\n  )\n  .unimplemented();\n\ng.test('sampled_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturegather')\n  .desc(\n    `\nC: i32, u32\nT: i32, u32, f32\n\nfn textureGather(component: C, t: texture_cube<T>, s: sampler, coords: vec3<f32>) -> vec4<T>\n\nParameters:\n * component:\n    - The index of the channel to read from the selected texels.\n    - When provided, the component expression must a creation-time expression (e.g. 1).\n    - Its value must be at least 0 and at most 3. Values outside of this range will result in a shader-creation error.\n * t: The sampled texture to read from\n * s: The sampler type\n * coords: The texture coordinates\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('T', ['f32', 'i32', 'u32'] as const)\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('C_value', [-1, 0, 1, 2, 3, 4] as const)\n      .combine('coords', generateCoordBoundaries(3))\n  )\n  .unimplemented();\n\ng.test('sampled_array_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturegather')\n  .desc(\n    `\nC: i32, u32\nT: i32, u32, f32\n\nfn textureGather(component: C, t: texture_2d_array<T>, s: sampler, coords: vec2<f32>, array_index: C) -> vec4<T>\nfn textureGather(component: C, t: texture_2d_array<T>, s: sampler, coords: vec2<f32>, array_index: C, offset: vec2<i32>) -> vec4<T>\n\nParameters:\n * component:\n    - The index of the channel to read from the selected texels.\n    - When provided, the component expression must a creation-time expression (e.g. 1).\n    - Its value must be at least 0 and at most 3. Values outside of this range will result in a shader-creation error.\n * t: The sampled texture to read from\n * s: The sampler type\n * coords: The texture coordinates\n * array_index: The 0-based texture array index\n * offset:\n    - The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n      This offset is applied before applying any texture wrapping modes.\n    - The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    - Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('T', ['f32', 'i32', 'u32'] as const)\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('C_value', [-1, 0, 1, 2, 3, 4] as const)\n      .combine('coords', generateCoordBoundaries(2))\n      /* array_index not param'd as out-of-bounds is implementation specific */\n      .combine('offset', generateOffsets(2))\n  )\n  .unimplemented();\n\ng.test('sampled_array_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturegather')\n  .desc(\n    `\nC: i32, u32\nT: i32, u32, f32\n\nfn textureGather(component: C, t: texture_cube_array<T>, s: sampler, coords: vec3<f32>, array_index: C) -> vec4<T>\n\nParameters:\n * component:\n    - The index of the channel to read from the selected texels.\n    - When provided, the component expression must a creation-time expression (e.g. 1).\n    - Its value must be at least 0 and at most 3. Values outside of this range will result in a shader-creation error.\n * t: The sampled texture to read from\n * s: The sampler type\n * coords: The texture coordinates\n * array_index: The 0-based texture array index\n`\n  )\n  .paramsSubcasesOnly(\n    u =>\n      u\n        .combine('T', ['f32', 'i32', 'u32'] as const)\n        .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n        .combine('C', ['i32', 'u32'] as const)\n        .combine('C_value', [-1, 0, 1, 2, 3, 4] as const)\n        .combine('coords', generateCoordBoundaries(3))\n    /* array_index not param'd as out-of-bounds is implementation specific */\n  )\n  .unimplemented();\n\ng.test('depth_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturegather')\n  .desc(\n    `\nfn textureGather(t: texture_depth_2d, s: sampler, coords: vec2<f32>) -> vec4<f32>\nfn textureGather(t: texture_depth_2d, s: sampler, coords: vec2<f32>, offset: vec2<i32>) -> vec4<f32>\n\nParameters:\n * t: The depth texture to read from\n * s: The sampler type\n * coords: The texture coordinates\n * offset:\n    - The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n      This offset is applied before applying any texture wrapping modes.\n    - The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    - Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n      .combine('coords', generateCoordBoundaries(2))\n      .combine('offset', generateOffsets(2))\n  )\n  .unimplemented();\n\ng.test('depth_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturegather')\n  .desc(\n    `\nfn textureGather(t: texture_depth_cube, s: sampler, coords: vec3<f32>) -> vec4<f32>\n\nParameters:\n * t: The depth texture to read from\n * s: The sampler type\n * coords: The texture coordinates\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n      .combine('coords', generateCoordBoundaries(3))\n  )\n  .unimplemented();\n\ng.test('depth_array_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturegather')\n  .desc(\n    `\nC: i32, u32\n\nfn textureGather(t: texture_depth_2d_array, s: sampler, coords: vec2<f32>, array_index: C) -> vec4<f32>\nfn textureGather(t: texture_depth_2d_array, s: sampler, coords: vec2<f32>, array_index: C, offset: vec2<i32>) -> vec4<f32>\n\nParameters:\n * t: The depth texture to read from\n * s: The sampler type\n * coords: The texture coordinates\n * array_index: The 0-based texture array index\n * offset:\n    - The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n      This offset is applied before applying any texture wrapping modes.\n    - The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    - Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('coords', generateCoordBoundaries(2))\n      /* array_index not param'd as out-of-bounds is implementation specific */\n      .combine('offset', generateOffsets(2))\n  )\n  .unimplemented();\n\ng.test('depth_array_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturegather')\n  .desc(\n    `\nC: i32, u32\n\nfn textureGather(t: texture_depth_cube_array, s: sampler, coords: vec3<f32>, array_index: C) -> vec4<f32>\n\nParameters:\n * t: The depth texture to read from\n * s: The sampler type\n * coords: The texture coordinates\n * array_index: The 0-based texture array index\n`\n  )\n  .paramsSubcasesOnly(\n    u =>\n      u\n        .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n        .combine('C', ['i32', 'u32'] as const)\n        .combine('coords', generateCoordBoundaries(3))\n    /* array_index not param'd as out-of-bounds is implementation specific */\n  )\n  .unimplemented();\n"],"file":"textureGather.spec.js"}