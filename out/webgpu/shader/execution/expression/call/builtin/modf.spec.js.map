{"version":3,"file":"modf.spec.js","names":["description","makeTestGroup","GPUTest","f32","toVector","TypeF32","TypeVec","modfInterval","fullF32Range","quantizeToF32","vectorF32Range","makeCaseCache","allInputSources","run","g","wholeBuilder","value","fractBuilder","makeVectorCaseFract","v","map","fs","e","fract","input","expected","makeVectorCaseWhole","ws","whole","d","f32_fract","makeCase","n","f32_whole","f32_vec2_fract","f32_vec2_whole","f32_vec3_fract","f32_vec3_whole","f32_vec4_fract","f32_vec4_whole","test","specURL","desc","params","u","combine","fn","t","cases","get","unimplemented"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/modf.spec.ts"],"sourcesContent":["export const description = `\nExecution tests for the 'modf' builtin function\n\nT is f32 or f16\n@const fn modf(e:T) -> result_struct\nSplits |e| into fractional and whole number parts.\nThe whole part is (|e| % 1.0), and the fractional part is |e| minus the whole part.\nReturns the result_struct for the given type.\n\nS is f32 or f16\nT is vecN<S>\n@const fn modf(e:T) -> result_struct\nSplits the components of |e| into fractional and whole number parts.\nThe |i|'th component of the whole and fractional parts equal the whole and fractional parts of modf(e[i]).\nReturns the result_struct for the given type.\n\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { f32, toVector, TypeF32, TypeVec } from '../../../../../util/conversion.js';\nimport { modfInterval } from '../../../../../util/f32_interval.js';\nimport { fullF32Range, quantizeToF32, vectorF32Range } from '../../../../../util/math.js';\nimport { makeCaseCache } from '../../case_cache.js';\nimport { allInputSources, Case, ExpressionBuilder, run } from '../../expression.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n/* @returns an ExpressionBuilder that evaluates modf and returns .whole from the result structure */\nfunction wholeBuilder(): ExpressionBuilder {\n  return value => `modf(${value}).whole`;\n}\n\n/* @returns an ExpressionBuilder that evaluates modf and returns .fract from the result structure */\nfunction fractBuilder(): ExpressionBuilder {\n  return value => `modf(${value}).fract`;\n}\n\n/* @returns a fract Case for a given vector input */\nfunction makeVectorCaseFract(v: number[]): Case {\n  v = v.map(quantizeToF32);\n  const fs = v.map(e => {\n    return modfInterval(e).fract;\n  });\n\n  return { input: toVector(v, f32), expected: fs };\n}\n\n/* @returns a fract Case for a given vector input */\nfunction makeVectorCaseWhole(v: number[]): Case {\n  v = v.map(quantizeToF32);\n  const ws = v.map(e => {\n    return modfInterval(e).whole;\n  });\n\n  return { input: toVector(v, f32), expected: ws };\n}\n\nexport const d = makeCaseCache('modf', {\n  f32_fract: () => {\n    const makeCase = (n: number): Case => {\n      n = quantizeToF32(n);\n      return { input: f32(n), expected: modfInterval(n).fract };\n    };\n    return fullF32Range().map(makeCase);\n  },\n  f32_whole: () => {\n    const makeCase = (n: number): Case => {\n      n = quantizeToF32(n);\n      return { input: f32(n), expected: modfInterval(n).whole };\n    };\n    return fullF32Range().map(makeCase);\n  },\n  f32_vec2_fract: () => {\n    return vectorF32Range(2).map(makeVectorCaseFract);\n  },\n  f32_vec2_whole: () => {\n    return vectorF32Range(2).map(makeVectorCaseWhole);\n  },\n  f32_vec3_fract: () => {\n    return vectorF32Range(3).map(makeVectorCaseFract);\n  },\n  f32_vec3_whole: () => {\n    return vectorF32Range(3).map(makeVectorCaseWhole);\n  },\n  f32_vec4_fract: () => {\n    return vectorF32Range(4).map(makeVectorCaseFract);\n  },\n  f32_vec4_whole: () => {\n    return vectorF32Range(4).map(makeVectorCaseWhole);\n  },\n});\n\ng.test('f32_fract')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is f32\n\nstruct __modf_result_f32 {\n  fract : f32, // fractional part\n  whole : f32  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get('f32_fract');\n    await run(t, fractBuilder(), [TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('f32_whole')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is f32\n\nstruct __modf_result_f32 {\n  fract : f32, // fractional part\n  whole : f32  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get('f32_whole');\n    await run(t, wholeBuilder(), [TypeF32], TypeF32, t.params, cases);\n  });\n\ng.test('f32_vec2_fract')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec2<f32>\n\nstruct __modf_result_vec2_f32 {\n  fract : vec2<f32>, // fractional part\n  whole : vec2<f32>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get('f32_vec2_fract');\n    await run(t, fractBuilder(), [TypeVec(2, TypeF32)], TypeVec(2, TypeF32), t.params, cases);\n  });\n\ng.test('f32_vec2_whole')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec2<f32>\n\nstruct __modf_result_vec2_f32 {\n  fract : vec2<f32>, // fractional part\n  whole : vec2<f32>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get('f32_vec2_whole');\n    await run(t, wholeBuilder(), [TypeVec(2, TypeF32)], TypeVec(2, TypeF32), t.params, cases);\n  });\n\ng.test('f32_vec3_fract')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec3<f32>\n\nstruct __modf_result_vec3_f32 {\n  fract : vec3<f32>, // fractional part\n  whole : vec3<f32>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get('f32_vec3_fract');\n    await run(t, fractBuilder(), [TypeVec(3, TypeF32)], TypeVec(3, TypeF32), t.params, cases);\n  });\n\ng.test('f32_vec3_whole')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec3<f32>\n\nstruct __modf_result_vec3_f32 {\n  fract : vec3<f32>, // fractional part\n  whole : vec3<f32>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get('f32_vec3_whole');\n    await run(t, wholeBuilder(), [TypeVec(3, TypeF32)], TypeVec(3, TypeF32), t.params, cases);\n  });\n\ng.test('f32_vec4_fract')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec4<f32>\n\nstruct __modf_result_vec4_f32 {\n  fract : vec4<f32>, // fractional part\n  whole : vec4<f32>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get('f32_vec4_fract');\n    await run(t, fractBuilder(), [TypeVec(4, TypeF32)], TypeVec(4, TypeF32), t.params, cases);\n  });\n\ng.test('f32_vec4_whole')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec4<f32>\n\nstruct __modf_result_vec4_f32 {\n  fract : vec4<f32>, // fractional part\n  whole : vec4<f32>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .fn(async t => {\n    const cases = await d.get('f32_vec4_whole');\n    await run(t, wholeBuilder(), [TypeVec(4, TypeF32)], TypeVec(4, TypeF32), t.params, cases);\n  });\n\ng.test('f16_fract')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is f16\n\nstruct __modf_result_f16 {\n  fract : f16, // fractional part\n  whole : f16  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .unimplemented();\n\ng.test('f16_whole')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is f16\n\nstruct __modf_result_f16 {\n  fract : f16, // fractional part\n  whole : f16  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .unimplemented();\n\ng.test('f16_vec2_fract')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec2<f16>\n\nstruct __modf_result_vec2_f16 {\n  fract : vec2<f16>, // fractional part\n  whole : vec2<f16>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .unimplemented();\n\ng.test('f16_vec2_whole')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec2<f16>\n\nstruct __modf_result_vec2_f16 {\n  fract : vec2<f16>, // fractional part\n  whole : vec2<f16>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .unimplemented();\n\ng.test('f16_vec3_fract')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec3<f16>\n\nstruct __modf_result_vec3_f16 {\n  fract : vec3<f16>, // fractional part\n  whole : vec3<f16>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .unimplemented();\n\ng.test('f16_vec3_whole')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec3<f16>\n\nstruct __modf_result_vec3_f16 {\n  fract : vec3<f16>, // fractional part\n  whole : vec3<f16>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .unimplemented();\n\ng.test('f16_vec4_fract')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec4<f16>\n\nstruct __modf_result_vec4_f16 {\n  fract : vec4<f16>, // fractional part\n  whole : vec4<f16>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .unimplemented();\n\ng.test('f16_vec4_whole')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vec4<f16>\n\nstruct __modf_result_vec4_f16 {\n  fract : vec4<f16>, // fractional part\n  whole : vec4<f16>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .unimplemented();\n"],"mappings":"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"}