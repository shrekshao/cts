{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/modf.spec.ts"],"names":["description","makeTestGroup","GPUTest","g","test","specURL","desc","params","u","combine","unimplemented"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAFO,CAIP,SAASC,aAAT,QAA8B,kDAA9B;AACA,SAASC,OAAT,QAAwB,4BAAxB;;AAEA,OAAO,MAAMC,CAAC,GAAGF,aAAa,CAACC,OAAD,CAAvB;;AAEPC,CAAC,CAACC,IAAF,CAAO,YAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXA;;AAaGC,MAbH,CAaU,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAF,CAAU,cAAV,EAA0B,CAAC,SAAD,EAAY,WAAZ,EAAyB,YAAzB,CAA1B,CAbf;AAcGC,aAdH;;AAgBAP,CAAC,CAACC,IAAF,CAAO,YAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXA;;AAaGC,MAbH,CAaU,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAF,CAAU,cAAV,EAA0B,CAAC,SAAD,EAAY,WAAZ,EAAyB,YAAzB,CAA1B,CAbf;AAcGC,aAdH;;AAgBAP,CAAC,CAACC,IAAF,CAAO,YAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXA;;AAaGC,MAbH,CAaU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,cADX,EAC2B,CAAC,SAAD,EAAY,WAAZ,EAAyB,YAAzB,CAD3B;AAEGA,OAFH,CAEW,WAFX,EAEwB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFxB,CAdJ;;AAkBGC,aAlBH;;AAoBAP,CAAC,CAACC,IAAF,CAAO,YAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXA;;AAaGC,MAbH,CAaU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,cADX,EAC2B,CAAC,SAAD,EAAY,WAAZ,EAAyB,YAAzB,CAD3B;AAEGA,OAFH,CAEW,WAFX,EAEwB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFxB,CAdJ;;AAkBGC,aAlBH","sourcesContent":["export const description = `\nExecution tests for the 'modf' builtin function\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('scalar_f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is f32\n@const fn modf(e:T) -> __modf_result\nSplits e into fractional and whole number parts. Returns the __modf_result built-in structure, defined as follows:\nstruct __modf_result {\n  fract : f32, // fractional part\n  whole : f32  // whole part\n}\n`\n  )\n  .params(u => u.combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const))\n  .unimplemented();\n\ng.test('scalar_f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is f16\n@const fn modf(e:T) -> __modf_result_f16\nSplits e into fractional and whole number parts. Returns the __modf_result_f16 built-in structure, defined as if as follows:\nstruct __modf_result_f16 {\n  fract : f16, // fractional part\n  whole : f16  // whole part\n}\n`\n  )\n  .params(u => u.combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const))\n  .unimplemented();\n\ng.test('vector_f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vecN<f32>\n@const fn modf(e:T) -> __modf_result_vecN\nSplits the components of e into fractional and whole number parts. Returns the __modf_result_vecN built-in structure, defined as follows:\nstruct __modf_result_vecN {\n  fract : vecN<f32>, // fractional part\n  whole : vecN<f32>  // whole part\n}\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [2, 3, 4] as const)\n  )\n  .unimplemented();\n\ng.test('vector_f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vecN<f16>\n@const fn modf(e:T) -> __modf_result_vecN_f16\nSplits the components of e into fractional and whole number parts. Returns the __modf_result_vecN_f16 built-in structure, defined as if as follows:\nstruct __modf_result_vecN_f16 {\n  fract : vecN<f16>, // fractional part\n  whole : vecN<f16>  // whole part\n}\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('vectorize', [2, 3, 4] as const)\n  )\n  .unimplemented();\n"],"file":"modf.spec.js"}