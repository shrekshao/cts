{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/modf.spec.ts"],"names":["description","makeTestGroup","GPUTest","allInputSources","g","test","specURL","desc","params","u","combine","unimplemented"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAhBO,CAkBP,SAASC,aAAT,QAA8B,kDAA9B;AACA,SAASC,OAAT,QAAwB,4BAAxB;AACA,SAASC,eAAT,QAAgC,qBAAhC;;AAEA,OAAO,MAAMC,CAAC,GAAGH,aAAa,CAACC,OAAD,CAAvB;;AAEPE,CAAC,CAACC,IAAF,CAAO,YAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,CAVA;;AAYGC,MAZH,CAYU,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBP,eAAzB,CAZf;AAaGQ,aAbH;;AAeAP,CAAC,CAACC,IAAF,CAAO,YAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,CAVA;;AAYGC,MAZH,CAYU,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBP,eAAzB,CAZf;AAaGQ,aAbH;;AAeAP,CAAC,CAACC,IAAF,CAAO,YAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,CAVA;;AAYGC,MAZH,CAYU,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBP,eAAzB,EAA0CO,OAA1C,CAAkD,WAAlD,EAA+D,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAA/D,CAZf;AAaGC,aAbH;;AAeAP,CAAC,CAACC,IAAF,CAAO,YAAP;AACGC,OADH,CACW,qDADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,CAVA;;AAYGC,MAZH,CAYU,CAAAC,CAAC,KAAIA,CAAC,CAACC,OAAF,CAAU,aAAV,EAAyBP,eAAzB,EAA0CO,OAA1C,CAAkD,WAAlD,EAA+D,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAA/D,CAZf;AAaGC,aAbH","sourcesContent":["export const description = `\nExecution tests for the 'modf' builtin function\n\nT is f32 or f16\n@const fn modf(e:T) -> result_struct\nSplits |e| into fractional and whole number parts.\nThe whole part is (|e| % 1.0), and the fractional part is |e| minus the whole part.\nReturns the result_struct for the given type.\n\nS is f32 or f16\nT is vecN<S>\n@const fn modf(e:T) -> result_struct\nSplits the components of |e| into fractional and whole number parts.\nThe |i|'th component of the whole and fractional parts equal the whole and fractional parts of modf(e[i]).\nReturns the result_struct for the given type.\n\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { allInputSources } from '../../expression.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('scalar_f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is f32\n\nstruct __modf_result {\n  fract : f32, // fractional part\n  whole : f32  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .unimplemented();\n\ng.test('scalar_f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is f16\n\nstruct __modf_result_f16 {\n  fract : f16, // fractional part\n  whole : f16  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources))\n  .unimplemented();\n\ng.test('vector_f32')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vecN<f32>\n\nstruct __modf_result_vecN {\n  fract : vecN<f32>, // fractional part\n  whole : vecN<f32>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources).combine('vectorize', [2, 3, 4] as const))\n  .unimplemented();\n\ng.test('vector_f16')\n  .specURL('https://www.w3.org/TR/WGSL/#float-builtin-functions')\n  .desc(\n    `\nT is vecN<f16>\n\nstruct __modf_result_vecN_f16 {\n  fract : vecN<f16>, // fractional part\n  whole : vecN<f16>  // whole part\n}\n`\n  )\n  .params(u => u.combine('inputSource', allInputSources).combine('vectorize', [2, 3, 4] as const))\n  .unimplemented();\n"],"file":"modf.spec.js"}