{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureNumLayers.spec.ts"],"names":["description","makeTestGroup","GPUTest","g","test","specURL","desc","params","u","combine","beginSubcases","unimplemented"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA;AACA;AACA,CAJO,CAMP,SAASC,aAAT,QAA8B,kDAA9B;AACA,SAASC,OAAT,QAAwB,4BAAxB;;AAEA,OAAO,MAAMC,CAAC,GAAGF,aAAa,CAACC,OAAD,CAAvB;;AAEPC,CAAC,CAACC,IAAF,CAAO,SAAP;AACGC,OADH,CACW,8CADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXA;;AAaGC,MAbH,CAaU,CAAAC,CAAC;AACPA,CAAC;AACEC,OADH,CACW,cADX,EAC2B,CAAC,kBAAD,EAAqB,oBAArB,CAD3B;AAEGC,aAFH;AAGGD,OAHH,CAGW,cAHX,EAG2B,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CAH3B,CAdJ;;AAmBGE,aAnBH;;AAqBAR,CAAC,CAACC,IAAF,CAAO,SAAP;AACGC,OADH,CACW,8CADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA;AACA;AACA,CATA;;AAWGC,MAXH,CAWU,CAAAC,CAAC;AACPA,CAAC,CAACC,OAAF,CAAU,cAAV,EAA0B,CAAC,wBAAD,EAA2B,0BAA3B,CAA1B,CAZJ;;AAcGE,aAdH;;AAgBAR,CAAC,CAACC,IAAF,CAAO,SAAP;AACGC,OADH,CACW,8CADX;AAEGC,IAFH;AAGK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA1BA;;AA4BGC,MA5BH,CA4BU,CAAAC,CAAC;AACPA,CAAC;AACEE,aADH;AAEGD,OAFH,CAEW,cAFX,EAE2B;AACvB,YADuB;AAEvB,YAFuB;AAGvB,WAHuB;AAIvB,WAJuB;AAKvB,YALuB;AAMvB,YANuB;AAOvB,aAPuB;AAQvB,SARuB;AASvB,SATuB;AAUvB,UAVuB;AAWvB,UAXuB;AAYvB,UAZuB;AAavB,WAbuB;AAcvB,YAduB;AAevB,YAfuB;AAgBvB,aAhBuB,CAF3B;;AAoBGA,OApBH,CAoBW,aApBX,EAoB0B,CAAC,MAAD,EAAS,OAAT,EAAkB,YAAlB,CApB1B,CA7BJ;;AAmDGE,aAnDH","sourcesContent":["export const description = `\nExecution tests for the 'textureNumLayers' builtin function\n\nReturns the number of layers (elements) of an array texture.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('sampled')\n  .specURL('https://www.w3.org/TR/WGSL/#texturenumlayers')\n  .desc(\n    `\nT, a sampled type.\n\nfn textureNumLayers(t: texture_2d_array<T>) -> u32\nfn textureNumLayers(t: texture_cube_array<T>) -> u32\n\nParameters\n * t The sampled array texture.\n`\n  )\n  .params(u =>\n    u\n      .combine('texture_type', ['texture_2d_array', 'texture_cube_array'] as const)\n      .beginSubcases()\n      .combine('sampled_type', ['f32', 'i32', 'u32'] as const)\n  )\n  .unimplemented();\n\ng.test('arrayed')\n  .specURL('https://www.w3.org/TR/WGSL/#texturenumlayers')\n  .desc(\n    `\nfn textureNumLayers(t: texture_depth_2d_array) -> u32\nfn textureNumLayers(t: texture_depth_cube_array) -> u32\n\nParameters\n * t The depth array texture.\n`\n  )\n  .params(u =>\n    u.combine('texture_type', ['texture_depth_2d_array', 'texture_depth_cube_array'] as const)\n  )\n  .unimplemented();\n\ng.test('storage')\n  .specURL('https://www.w3.org/TR/WGSL/#texturenumlayers')\n  .desc(\n    `\nF: rgba8unorm\n   rgba8snorm\n   rgba8uint\n   rgba8sint\n   rgba16uint\n   rgba16sint\n   rgba16float\n   r32uint\n   r32sint\n   r32float\n   rg32uint\n   rg32sint\n   rg32float\n   rgba32uint\n   rgba32sint\n   rgba32float\nA: read, write, read_write\n\nfn textureNumLayers(t: texture_storage_2d_array<F,A>) -> u32\n\nParameters\n * t The sampled storage array texture.\n`\n  )\n  .params(u =>\n    u\n      .beginSubcases()\n      .combine('texel_format', [\n        'rgba8unorm',\n        'rgba8snorm',\n        'rgba8uint',\n        'rgba8sint',\n        'rgba16uint',\n        'rgba16sint',\n        'rgba16float',\n        'r32uint',\n        'r32sint',\n        'r32float',\n        'rg32uint',\n        'rg32sint',\n        'rg32float',\n        'rgba32uint',\n        'rgba32sint',\n        'rgba32float',\n      ] as const)\n      .combine('access_mode', ['read', 'write', 'read_write'] as const)\n  )\n  .unimplemented();\n"],"file":"textureNumLayers.spec.js"}