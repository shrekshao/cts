{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/insertBits.spec.ts"],"names":["description","makeTestGroup","GPUTest","i32Bits","TypeI32","u32","TypeU32","u32Bits","vec2","vec3","vec4","TypeVec","run","builtin","g","test","uniqueId","specURL","desc","params","u","combine","fn","t","cfg","scalarType","signed","T","width","V","x","y","z","w","undefined","all_1","all_0","low_1","low_0","high_1","high_0","pattern","input","expected"],"mappings":"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","sourcesContent":["export const description = `\nExecution Tests for the 'insertBits' builtin function\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport {\n  i32Bits,\n  TypeI32,\n  u32,\n  TypeU32,\n  u32Bits,\n  vec2,\n  vec3,\n  vec4,\n  TypeVec,\n} from '../../../../../util/conversion.js';\nimport { Config, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('integer')\n  .uniqueId('xxxxxxxxxxxxxxxx')\n  .specURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#integer-builtin-functions')\n  .desc(\n    `\ninsertBits:\nT is i32, u32, vecN<i32>, or vecN<u32> insertBits(e: T, newbits:T, offset: u32, count: u32) -> T\n\nSets bits in an integer.\n\nWhen T is a scalar type, then:\n\n* w is the bit width of T\n* o = min(offset,w)\n* c = min(count, w - o)\n* The result is e if c is 0.\n* Otherwise, bits o..o+c-1 of the result are copied from bits 0..c-1 of newbits. Other bits of the result are copied from e.\nComponent-wise when T is a vector.\n\nPlease read the following guidelines before contributing:\nhttps://github.com/gpuweb/cts/blob/main/docs/plan_autogen.md\n`\n  )\n  .params(u =>\n    u\n      .combine('storageClass', ['uniform', 'storage_r', 'storage_rw'] as const)\n      .combine('signed', [false, true])\n      .combine('width', [1, 2, 3, 4])\n  )\n  .fn(async t => {\n    const cfg: Config = t.params;\n    const scalarType = t.params.signed ? TypeI32 : TypeU32;\n    const T = t.params.width === 1 ? scalarType : TypeVec(t.params.width, scalarType);\n\n    const V = (x: number, y?: number, z?: number, w?: number) => {\n      y = y === undefined ? x : y;\n      z = z === undefined ? x : z;\n      w = w === undefined ? x : w;\n\n      if (t.params.signed) {\n        switch (t.params.width) {\n          case 1:\n            return i32Bits(x);\n          case 2:\n            return vec2(i32Bits(x), i32Bits(y));\n          case 3:\n            return vec3(i32Bits(x), i32Bits(y), i32Bits(z));\n          default:\n            return vec4(i32Bits(x), i32Bits(y), i32Bits(z), i32Bits(w));\n        }\n      } else {\n        switch (t.params.width) {\n          case 1:\n            return u32Bits(x);\n          case 2:\n            return vec2(u32Bits(x), u32Bits(y));\n          case 3:\n            return vec3(u32Bits(x), u32Bits(y), u32Bits(z));\n          default:\n            return vec4(u32Bits(x), u32Bits(y), u32Bits(z), u32Bits(w));\n        }\n      }\n    };\n\n    const all_1 = V(0b11111111111111111111111111111111);\n    const all_0 = V(0b00000000000000000000000000000000);\n    const low_1 = V(0b00000000000000000000000000000001);\n    const low_0 = V(0b11111111111111111111111111111110);\n    const high_1 = V(0b10000000000000000000000000000000);\n    const high_0 = V(0b01111111111111111111111111111111);\n    const pattern = V(\n      0b10001001010100100010010100100010,\n      0b11001110001100111000110011100011,\n      0b10101010101010101010101010101010,\n      0b01010101010101010101010101010101\n    );\n\n    run(t, builtin('insertBits'), [T, T, TypeU32, TypeU32], T, cfg, [\n      { input: [all_0, all_0, u32(0), u32(32)], expected: all_0 },\n      { input: [all_0, all_0, u32(1), u32(10)], expected: all_0 },\n      { input: [all_0, all_0, u32(2), u32(5)], expected: all_0 },\n      { input: [all_0, all_0, u32(0), u32(1)], expected: all_0 },\n      { input: [all_0, all_0, u32(31), u32(1)], expected: all_0 },\n\n      { input: [all_0, all_1, u32(0), u32(32)], expected: all_1 },\n      { input: [all_1, all_0, u32(0), u32(32)], expected: all_0 },\n      { input: [all_0, all_1, u32(0), u32(1)], expected: low_1 },\n      { input: [all_1, all_0, u32(0), u32(1)], expected: low_0 },\n      { input: [all_0, all_1, u32(31), u32(1)], expected: high_1 },\n      { input: [all_1, all_0, u32(31), u32(1)], expected: high_0 },\n      { input: [all_0, all_1, u32(1), u32(10)], expected: V(0b00000000000000000000011111111110) },\n      { input: [all_1, all_0, u32(1), u32(10)], expected: V(0b11111111111111111111100000000001) },\n      { input: [all_0, all_1, u32(2), u32(5)], expected: V(0b00000000000000000000000001111100) },\n      { input: [all_1, all_0, u32(2), u32(5)], expected: V(0b11111111111111111111111110000011) },\n\n      // Patterns\n      { input: [all_0, pattern, u32(0), u32(32)], expected: pattern },\n      { input: [all_1, pattern, u32(0), u32(32)], expected: pattern },\n      {\n        input: [all_0, pattern, u32(1), u32(31)],\n        expected: V(\n          0b00010010101001000100101001000100,\n          0b10011100011001110001100111000110,\n          0b01010101010101010101010101010100,\n          0b10101010101010101010101010101010\n        ),\n      },\n      {\n        input: [all_1, pattern, u32(1), u32(31)],\n        expected: V(\n          0b00010010101001000100101001000101,\n          0b10011100011001110001100111000111,\n          0b01010101010101010101010101010101,\n          0b10101010101010101010101010101011\n        ),\n      },\n      {\n        input: [all_0, pattern, u32(14), u32(18)],\n        expected: V(\n          0b10001001010010001000000000000000,\n          0b11100011001110001100000000000000,\n          0b10101010101010101000000000000000,\n          0b01010101010101010100000000000000\n        ),\n      },\n      {\n        input: [all_1, pattern, u32(14), u32(18)],\n        expected: V(\n          0b10001001010010001011111111111111,\n          0b11100011001110001111111111111111,\n          0b10101010101010101011111111111111,\n          0b01010101010101010111111111111111\n        ),\n      },\n      {\n        input: [all_0, pattern, u32(14), u32(7)],\n        expected: V(\n          0b00000000000010001000000000000000,\n          0b00000000000110001100000000000000,\n          0b00000000000010101000000000000000,\n          0b00000000000101010100000000000000\n        ),\n      },\n      {\n        input: [all_1, pattern, u32(14), u32(7)],\n        expected: V(\n          0b11111111111010001011111111111111,\n          0b11111111111110001111111111111111,\n          0b11111111111010101011111111111111,\n          0b11111111111101010111111111111111\n        ),\n      },\n      {\n        input: [all_0, pattern, u32(14), u32(4)],\n        expected: V(\n          0b00000000000000001000000000000000,\n          0b00000000000000001100000000000000,\n          0b00000000000000101000000000000000,\n          0b00000000000000010100000000000000\n        ),\n      },\n      {\n        input: [all_1, pattern, u32(14), u32(4)],\n        expected: V(\n          0b11111111111111001011111111111111,\n          0b11111111111111001111111111111111,\n          0b11111111111111101011111111111111,\n          0b11111111111111010111111111111111\n        ),\n      },\n      {\n        input: [all_0, pattern, u32(14), u32(3)],\n        expected: V(\n          0b00000000000000001000000000000000,\n          0b00000000000000001100000000000000,\n          0b00000000000000001000000000000000,\n          0b00000000000000010100000000000000\n        ),\n      },\n      {\n        input: [all_1, pattern, u32(14), u32(3)],\n        expected: V(\n          0b11111111111111101011111111111111,\n          0b11111111111111101111111111111111,\n          0b11111111111111101011111111111111,\n          0b11111111111111110111111111111111\n        ),\n      },\n      {\n        input: [all_0, pattern, u32(18), u32(3)],\n        expected: V(\n          0b00000000000010000000000000000000,\n          0b00000000000011000000000000000000,\n          0b00000000000010000000000000000000,\n          0b00000000000101000000000000000000\n        ),\n      },\n      {\n        input: [all_1, pattern, u32(18), u32(3)],\n        expected: V(\n          0b11111111111010111111111111111111,\n          0b11111111111011111111111111111111,\n          0b11111111111010111111111111111111,\n          0b11111111111101111111111111111111\n        ),\n      },\n      {\n        input: [pattern, all_0, u32(1), u32(31)],\n        expected: V(\n          0b00000000000000000000000000000000,\n          0b00000000000000000000000000000001,\n          0b00000000000000000000000000000000,\n          0b00000000000000000000000000000001\n        ),\n      },\n      {\n        input: [pattern, all_1, u32(1), u32(31)],\n        expected: V(\n          0b11111111111111111111111111111110,\n          0b11111111111111111111111111111111,\n          0b11111111111111111111111111111110,\n          0b11111111111111111111111111111111\n        ),\n      },\n      {\n        input: [pattern, all_0, u32(14), u32(18)],\n        expected: V(\n          0b00000000000000000010010100100010,\n          0b00000000000000000000110011100011,\n          0b00000000000000000010101010101010,\n          0b00000000000000000001010101010101\n        ),\n      },\n      {\n        input: [pattern, all_1, u32(14), u32(18)],\n        expected: V(\n          0b11111111111111111110010100100010,\n          0b11111111111111111100110011100011,\n          0b11111111111111111110101010101010,\n          0b11111111111111111101010101010101\n        ),\n      },\n      {\n        input: [pattern, all_0, u32(14), u32(7)],\n        expected: V(\n          0b10001001010000000010010100100010,\n          0b11001110001000000000110011100011,\n          0b10101010101000000010101010101010,\n          0b01010101010000000001010101010101\n        ),\n      },\n      {\n        input: [pattern, all_1, u32(14), u32(7)],\n        expected: V(\n          0b10001001010111111110010100100010,\n          0b11001110001111111100110011100011,\n          0b10101010101111111110101010101010,\n          0b01010101010111111101010101010101\n        ),\n      },\n      {\n        input: [pattern, all_0, u32(14), u32(4)],\n        expected: V(\n          0b10001001010100000010010100100010,\n          0b11001110001100000000110011100011,\n          0b10101010101010000010101010101010,\n          0b01010101010101000001010101010101\n        ),\n      },\n      {\n        input: [pattern, all_1, u32(14), u32(4)],\n        expected: V(\n          0b10001001010100111110010100100010,\n          0b11001110001100111100110011100011,\n          0b10101010101010111110101010101010,\n          0b01010101010101111101010101010101\n        ),\n      },\n      {\n        input: [pattern, all_0, u32(14), u32(3)],\n        expected: V(\n          0b10001001010100100010010100100010,\n          0b11001110001100100000110011100011,\n          0b10101010101010100010101010101010,\n          0b01010101010101000001010101010101\n        ),\n      },\n      {\n        input: [pattern, all_1, u32(14), u32(3)],\n        expected: V(\n          0b10001001010100111110010100100010,\n          0b11001110001100111100110011100011,\n          0b10101010101010111110101010101010,\n          0b01010101010101011101010101010101\n        ),\n      },\n      {\n        input: [pattern, all_0, u32(18), u32(3)],\n        expected: V(\n          0b10001001010000100010010100100010,\n          0b11001110001000111000110011100011,\n          0b10101010101000101010101010101010,\n          0b01010101010000010101010101010101\n        ),\n      },\n      {\n        input: [pattern, all_1, u32(18), u32(3)],\n        expected: V(\n          0b10001001010111100010010100100010,\n          0b11001110001111111000110011100011,\n          0b10101010101111101010101010101010,\n          0b01010101010111010101010101010101\n        ),\n      },\n      {\n        input: [pattern, pattern, u32(18), u32(3)],\n        expected: V(\n          0b10001001010010100010010100100010,\n          0b11001110001011111000110011100011,\n          0b10101010101010101010101010101010,\n          0b01010101010101010101010101010101\n        ),\n      },\n      {\n        input: [pattern, pattern, u32(14), u32(7)],\n        expected: V(\n          0b10001001010010001010010100100010,\n          0b11001110001110001100110011100011,\n          0b10101010101010101010101010101010,\n          0b01010101010101010101010101010101\n        ),\n      },\n\n      // Start overflow\n      { input: [all_0, pattern, u32(50), u32(3)], expected: all_0 },\n      { input: [all_1, pattern, u32(50), u32(3)], expected: all_1 },\n      { input: [pattern, pattern, u32(50), u32(3)], expected: pattern },\n\n      // End overflow\n      { input: [all_0, pattern, u32(0), u32(99)], expected: pattern },\n      { input: [all_1, pattern, u32(0), u32(99)], expected: pattern },\n      { input: [all_0, low_1, u32(31), u32(99)], expected: high_1 },\n      {\n        input: [pattern, pattern, u32(20), u32(99)],\n        expected: V(\n          0b01010010001000100010010100100010,\n          0b11001110001100111000110011100011,\n          0b10101010101010101010101010101010,\n          0b01010101010101010101010101010101\n        ),\n      },\n\n      // Zero count\n      { input: [pattern, all_1, u32(0), u32(0)], expected: pattern },\n      { input: [pattern, all_1, u32(1), u32(0)], expected: pattern },\n      { input: [pattern, all_1, u32(2), u32(0)], expected: pattern },\n      { input: [pattern, all_1, u32(31), u32(0)], expected: pattern },\n      { input: [pattern, all_1, u32(32), u32(0)], expected: pattern },\n      { input: [pattern, all_1, u32(0), u32(0)], expected: pattern },\n    ]);\n  });\n"],"file":"insertBits.spec.js"}