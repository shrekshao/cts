{"version":3,"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureSampleLevel.spec.ts"],"names":["description","makeTestGroup","GPUTest","generateCoordBoundaries","generateOffsets","g","test","specURL","desc","paramsSubcasesOnly","u","combine","undefined","unimplemented","params","beginSubcases"],"mappings":"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","sourcesContent":["export const description = `\nSamples a texture.\n\nMust only be used in a fragment shader stage.\nMust only be invoked in uniform control flow.\n`;\n\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\n\nimport { generateCoordBoundaries, generateOffsets } from './utils.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('sampled_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplelevel')\n  .desc(\n    `\nfn textureSampleLevel(t: texture_2d<f32>, s: sampler, coords: vec2<f32>, level: f32) -> vec4<f32>\nfn textureSampleLevel(t: texture_2d<f32>, s: sampler, coords: vec2<f32>, level: f32, offset: vec2<i32>) -> vec4<f32>\n\nParameters:\n * t  The sampled, depth, or external texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * level\n    * The mip level, with level 0 containing a full size version of the texture.\n    * For the functions where level is a f32, fractional values may interpolate between\n      two levels if the format is filterable according to the Texture Format Capabilities.\n    * When not specified, mip level 0 is sampled.\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n      .combine('coords', generateCoordBoundaries(2))\n      .combine('offset', generateOffsets(2))\n      .combine('level', [undefined, 0, 1, 'textureNumLevels', 'textureNumLevels+1'] as const)\n  )\n  .unimplemented();\n\ng.test('sampled_array_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplelevel')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureSampleLevel(t: texture_2d_array<f32>, s: sampler, coords: vec2<f32>, array_index: C, level: f32) -> vec4<f32>\nfn textureSampleLevel(t: texture_2d_array<f32>, s: sampler, coords: vec2<f32>, array_index: C, level: f32, offset: vec2<i32>) -> vec4<f32>\n\nParameters:\n * t  The sampled, depth, or external texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * array_index The 0-based texture array index to sample.\n * level\n    * The mip level, with level 0 containing a full size version of the texture.\n    * For the functions where level is a f32, fractional values may interpolate between\n      two levels if the format is filterable according to the Texture Format Capabilities.\n    * When not specified, mip level 0 is sampled.\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('C_value', [-1, 0, 1, 2, 3, 4] as const)\n      .combine('coords', generateCoordBoundaries(2))\n      .combine('offset', generateOffsets(2))\n      /* array_index not param'd as out-of-bounds is implementation specific */\n      .combine('level', [undefined, 0, 1, 'textureNumLevels', 'textureNumLevels+1'] as const)\n  )\n  .unimplemented();\n\ng.test('sampled_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplelevel')\n  .desc(\n    `\nfn textureSampleLevel(t: texture_3d<f32>, s: sampler, coords: vec3<f32>, level: f32) -> vec4<f32>\nfn textureSampleLevel(t: texture_3d<f32>, s: sampler, coords: vec3<f32>, level: f32, offset: vec3<i32>) -> vec4<f32>\nfn textureSampleLevel(t: texture_cube<f32>, s: sampler, coords: vec3<f32>, level: f32) -> vec4<f32>\n\nParameters:\n * t  The sampled, depth, or external texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * level\n    * The mip level, with level 0 containing a full size version of the texture.\n    * For the functions where level is a f32, fractional values may interpolate between\n      two levels if the format is filterable according to the Texture Format Capabilities.\n    * When not specified, mip level 0 is sampled.\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .params(u =>\n    u\n      .combine('texture_type', ['texture_3d', 'texture_cube'] as const)\n      .beginSubcases()\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n      .combine('coords', generateCoordBoundaries(3))\n      .combine('offset', generateOffsets(3))\n      .combine('level', [undefined, 0, 1, 'textureNumLevels', 'textureNumLevels+1'] as const)\n  )\n  .unimplemented();\n\ng.test('sampled_array_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplelevel')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureSampleLevel(t: texture_cube_array<f32>, s: sampler, coords: vec3<f32>, array_index: C, level: f32) -> vec4<f32>\n\nParameters:\n * t  The sampled, depth, or external texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * array_index The 0-based texture array index to sample.\n * level\n    * The mip level, with level 0 containing a full size version of the texture.\n    * For the functions where level is a f32, fractional values may interpolate between\n      two levels if the format is filterable according to the Texture Format Capabilities.\n    * When not specified, mip level 0 is sampled.\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('C_value', [-1, 0, 1, 2, 3, 4] as const)\n      .combine('coords', generateCoordBoundaries(3))\n      .combine('offset', generateOffsets(3))\n      /* array_index not param'd as out-of-bounds is implementation specific */\n      .combine('level', [undefined, 0, 1, 'textureNumLevels', 'textureNumLevels+1'] as const)\n  )\n  .unimplemented();\n\ng.test('depth_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplelevel')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureSampleLevel(t: texture_depth_2d, s: sampler, coords: vec2<f32>, level: C) -> f32\nfn textureSampleLevel(t: texture_depth_2d, s: sampler, coords: vec2<f32>, level: C, offset: vec2<i32>) -> f32\n\nParameters:\n * t  The sampled, depth, or external texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * level\n    * The mip level, with level 0 containing a full size version of the texture.\n    * For the functions where level is a f32, fractional values may interpolate between\n      two levels if the format is filterable according to the Texture Format Capabilities.\n    * When not specified, mip level 0 is sampled.\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('C_value', [-1, 0, 1, 2, 3, 4] as const)\n      .combine('coords', generateCoordBoundaries(2))\n      .combine('offset', generateOffsets(2))\n      .combine('level', [undefined, 0, 1, 'textureNumLevels', 'textureNumLevels+1'] as const)\n  )\n  .unimplemented();\n\ng.test('depth_array_2d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplelevel')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureSampleLevel(t: texture_depth_2d_array, s: sampler, coords: vec2<f32>, array_index: C, level: C) -> f32\nfn textureSampleLevel(t: texture_depth_2d_array, s: sampler, coords: vec2<f32>, array_index: C, level: C, offset: vec2<i32>) -> f32\n\nParameters:\n * t  The sampled, depth, or external texture to sample.\n * s  The sampler type.\n * array_index The 0-based texture array index to sample.\n * coords The texture coordinates used for sampling.\n * level\n    * The mip level, with level 0 containing a full size version of the texture.\n    * For the functions where level is a f32, fractional values may interpolate between\n      two levels if the format is filterable according to the Texture Format Capabilities.\n    * When not specified, mip level 0 is sampled.\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('C_value', [-1, 0, 1, 2, 3, 4] as const)\n      .combine('coords', generateCoordBoundaries(2))\n      .combine('offset', generateOffsets(2))\n      /* array_index not param'd as out-of-bounds is implementation specific */\n      .combine('level', [undefined, 0, 1, 'textureNumLevels', 'textureNumLevels+1'] as const)\n  )\n  .unimplemented();\n\ng.test('depth_3d_coords')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplelevel')\n  .desc(\n    `\nC is i32 or u32\n\nfn textureSampleLevel(t: texture_depth_cube, s: sampler, coords: vec3<f32>, level: C) -> f32\nfn textureSampleLevel(t: texture_depth_cube_array, s: sampler, coords: vec3<f32>, array_index: C, level: C) -> f32\n\nParameters:\n * t  The sampled, depth, or external texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * level\n    * The mip level, with level 0 containing a full size version of the texture.\n    * For the functions where level is a f32, fractional values may interpolate between\n      two levels if the format is filterable according to the Texture Format Capabilities.\n    * When not specified, mip level 0 is sampled.\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n  )\n  .params(u =>\n    u\n      .combine('texture_type', ['texture_depth_cube', 'texture_depth_cube_array'] as const)\n      .beginSubcases()\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n      .combine('C', ['i32', 'u32'] as const)\n      .combine('C_value', [-1, 0, 1, 2, 3, 4] as const)\n      .combine('coords', generateCoordBoundaries(3))\n      /* array_index not param'd as out-of-bounds is implementation specific */\n      .combine('level', [undefined, 0, 1, 'textureNumLevels', 'textureNumLevels+1'] as const)\n  )\n  .unimplemented();\n\ng.test('external')\n  .specURL('https://www.w3.org/TR/WGSL/#texturesamplelevel')\n  .desc(\n    `\nfn textureSampleLevel(t: texture_external, s: sampler, coords: vec2<f32>) -> vec4<f32>\n\nParameters:\n * t  The sampled, depth, or external texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n`\n  )\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('S', ['clamp-to-edge', 'repeat', 'mirror-repeat'])\n      .combine('coords', generateCoordBoundaries(2))\n  )\n  .unimplemented();\n"],"file":"textureSampleLevel.spec.js"}