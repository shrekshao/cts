{"version":3,"sources":["../../../../src/webgpu/shader/execution/evaluation_order.spec.ts"],"names":["description","makeTestGroup","GPUTest","TypeI32","g","common_source","test","specURL","desc","paramsSimple","name","_body","_result","fn","t","run","params","body","result","source","outputBufferSize","outputBuffer","device","createBuffer","size","usage","GPUBufferUsage","COPY_SRC","STORAGE","module","createShaderModule","code","pipeline","createComputePipeline","compute","entryPoint","group","createBindGroup","layout","getBindGroupLayout","entries","binding","resource","buffer","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatch","end","queue","submit","finish","checkExpectation","outputData","output","read","got","value","expected","Error","undefined","expectGPUBufferValuesPassCheck","type","Uint8Array","typedLength"],"mappings":"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","sourcesContent":["export const description = `\nExecution Tests for evaluation order of expressions\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { GPUTest } from '../../gpu_test.js';\nimport { TypeI32 } from '../../util/conversion.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nconst common_source = `\nvar<private> a : i32 = 2;\nvar<private> b : i32 = 3;\nvar<private> c : i32 = 4;\n\nvar<private> arr2D : array<array<i32, 10>, 10> = array<array<i32, 10>, 10>(\n  array<i32, 10>( 0,  1,  2,  3,  4,  5,  6,  7,  8,  9),\n  array<i32, 10>(10, 11, 12, 13, 14, 15, 16, 17, 18, 19),\n  array<i32, 10>(20, 22, 22, 23, 24, 25, 26, 27, 28, 29),\n  array<i32, 10>(30, 32, 32, 33, 34, 35, 36, 37, 38, 33),\n  array<i32, 10>(40, 42, 42, 43, 44, 45, 46, 47, 48, 44),\n  array<i32, 10>(50, 52, 52, 53, 54, 55, 56, 57, 58, 55),\n  array<i32, 10>(60, 62, 62, 63, 64, 65, 66, 67, 68, 66),\n  array<i32, 10>(70, 72, 72, 73, 74, 75, 76, 77, 78, 77),\n  array<i32, 10>(80, 82, 82, 83, 84, 85, 86, 87, 88, 98),\n  array<i32, 10>(90, 92, 92, 93, 94, 95, 96, 97, 98, 99),\n);\n\nvar<private> arr1D_zero : array<i32, 50>;\nvar<private> arr2D_zero : array<array<i32, 50>, 50>;\nvar<private> arr3D_zero : array<array<array<i32, 50>, 50>, 50>;\n\nvar<private> vec4_zero : vec4<i32>;\n\nstruct S {\n  x : i32,\n  y : i32,\n  z : i32,\n}\n\nfn mul(p1 : ptr<private, i32>, multiplicand : i32) -> i32 {\n  *p1 = *p1 * multiplicand;\n  return *p1;\n}\n\nfn add(p1 : ptr<private, i32>, addend : i32) -> i32 {\n  *p1 = *p1 + addend;\n  return *p1;\n}\n\nfn sub_mul3(a : i32, a_mul : i32, b : i32, b_mul : i32, c : i32, c_mul : i32) -> i32 {\n  return a * a_mul - b * b_mul - c * c_mul;\n}\n\nfn sub_mul4(a : i32, a_mul : i32, b : i32, b_mul : i32, c : i32, c_mul : i32, d : i32, d_mul : i32) -> i32 {\n  return a * a_mul - b * b_mul - c * c_mul - d * d_mul;\n}\n\nfn set_vec4_x(p : ptr<private, vec4<i32>>, v : i32) -> i32 {\n  (*p).x = v;\n  return 0;\n}\n\nfn make_S(init : i32) -> S {\n  return S(init, init, init);\n}\n\nfn mul3_ret0(p1 : ptr<private, i32>, p2 : ptr<private, i32>, p3 : ptr<private, i32>, multiplicand : i32) -> i32 {\n  *p1 = *p1 * multiplicand;\n  *p2 = *p2 * multiplicand;\n  *p3 = *p3 * multiplicand;\n  return 0;\n}\n`;\n\ng.test('binary_arith')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#arithmetic-expr')\n  .desc('Tests order of evaluation of arithmetic binary expressions.')\n  .paramsSimple([\n    {\n      name: 'BothSE', // SE = Side Effects\n      _body: 'return mul(&a, 10) - mul(&a, 10);',\n      _result: 20 - 200,\n    },\n    {\n      name: 'LeftSE', //\n      _body: 'return mul(&a, 10) - a;',\n      _result: 20 - 20,\n    },\n    {\n      name: 'RightSE', //\n      _body: 'return a - mul(&a, 10);',\n      _result: 2 - 20,\n    },\n    {\n      name: 'ThreeSE',\n      _body: 'return mul(&a, 10) - mul(&a, 10) - mul(&a, 10);',\n      _result: 20 - 200 - 2000,\n    },\n    {\n      name: 'LeftmostSE',\n      _body: 'return mul3_ret0(&a, &b, &c, 10) - a - b - c;',\n      _result: 0 - 20 - 30 - 40,\n    },\n    {\n      name: 'RightmostSE', //\n      _body: 'return a - b - c - mul3_ret0(&a, &b, &c, 10);',\n      _result: 2 - 3 - 4 - 0,\n    },\n    {\n      name: 'MiddleSE', //\n      _body: 'return a - b - mul3_ret0(&a, &b, &c, 10) - c;',\n      _result: 2 - 3 - 0 - 40,\n    },\n    {\n      name: 'LiteralAndSEAndVar', //\n      _body: 'return 1 - mul(&a, 10) - a;',\n      _result: 1 - 20 - 20,\n    },\n    {\n      name: 'VarAndSEAndLiteral', //\n      _body: 'return a - mul(&a, 10) - 1;',\n      _result: 2 - 20 - 1,\n    },\n    {\n      name: 'SEAndVarAndLiteral', //\n      _body: 'return mul(&a, 10) - a - 1;',\n      _result: 20 - 20 - 1,\n    },\n    {\n      name: 'VarAndLiteralAndSE', //\n      _body: 'return a - 1 - mul(&a, 10);',\n      _result: 2 - 1 - 20,\n    },\n    {\n      name: 'MemberAccessAndSE',\n      _body: 'return vec4_zero.x + set_vec4_x(&vec4_zero, 42);',\n      _result: 0,\n    },\n    {\n      name: 'SEAndMemberAccess',\n      _body: 'return set_vec4_x(&vec4_zero, 42) + vec4_zero.x;',\n      _result: 42,\n    },\n  ])\n  .fn(t => run(t, t.params._body, t.params._result));\n\ng.test('binary_logical')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#logical-expr')\n  .desc('Tests order of evaluation of logical binary expressions.')\n  .paramsSimple([\n    {\n      name: 'BothSE',\n      _body:\n        'let r = (add(&a, 1) == 3) && (add(&a, 1) == 4);' + //\n        'return i32(r);',\n      _result: 1,\n    },\n    {\n      name: 'LeftSE',\n      _body:\n        'let r = (add(&a, 1) == 3) && (a == 3);' + //\n        'return i32(r);',\n      _result: 1,\n    },\n    {\n      name: 'RightSE',\n      _body:\n        'let r = (a == 2) && (add(&a, 1) == 3);' + //\n        'return i32(r);',\n      _result: 1,\n    },\n    {\n      name: 'LeftmostSE',\n      _body:\n        'let r = (mul3_ret0(&a, &b, &c, 10) == 0) && (a == 20) && (b == 30) && (c == 40);' +\n        'return i32(r);',\n      _result: 1,\n    },\n    {\n      name: 'RightmostSE',\n      _body:\n        'let r = (a == 2) && (b == 3) && (c == 4) && (mul3_ret0(&a, &b, &c, 10) == 0);' +\n        'return i32(r);',\n      _result: 1,\n    },\n    {\n      name: 'MiddleSE',\n      _body:\n        'let r = (a == 2) && (b == 3) && (mul3_ret0(&a, &b, &c, 10) == 0) && (c == 40);' +\n        'return i32(r);',\n      _result: 1,\n    },\n    {\n      name: 'ShortCircuit_And_LhsOnly',\n      _body:\n        // rhs should not execute\n        'let t = (a != 2) && (mul(&a, 10) == 20);' + //\n        'return a;',\n      _result: 2,\n    },\n    {\n      name: 'ShortCircuit_And_LhsAndRhs',\n      _body:\n        // rhs should execute\n        'let t = (a == 2) && (mul(&a, 10) == 20);' + //\n        'return a;',\n      _result: 20,\n    },\n    {\n      name: 'ShortCircuit_Or_LhsOnly',\n      _body:\n        // rhs should not execute\n        'let t = (a == 2) || (mul(&a, 10) == 20);' + //\n        'let r = (a == 2);' +\n        'return i32(r);',\n      _result: 1,\n    },\n    {\n      name: 'ShortCircuit_Or_LhsAndRhs',\n      _body:\n        // rhs should execute\n        'let t = (a != 2) || (mul(&a, 10) == 20);' + //\n        'let r = (a == 20);' +\n        'return i32(r);',\n      _result: 1,\n    },\n  ])\n  .fn(t => run(t, t.params._body, t.params._result));\n\ng.test('binary_mixed')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#arithmetic-expr')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#logical-expr')\n  .desc('Tests order of evaluation of both arithmetic and logical binary expressions.')\n  .paramsSimple([\n    {\n      name: 'ArithAndLogical',\n      _body: 'return mul(&a, 10) - i32(mul(&a, 10) == 200 && mul(&a, 10) == 2000);',\n      _result: 20 - 1,\n    },\n    {\n      name: 'LogicalAndArith',\n      _body: 'return i32(mul(&a, 10) == 20 && mul(&a, 10) == 200) - mul(&a, 10);',\n      _result: 1 - 2000,\n    },\n    {\n      name: 'ArithAndLogical_ShortCircuit',\n      _body: 'return mul(&a, 10) - i32(mul(&a, 10) != 200 && mul(&a, 10) == 2000);',\n      _result: 20 - 0,\n    },\n    {\n      name: 'LogicalAndArith_ShortCircuit',\n      _body: 'return i32(mul(&a, 10) != 20 && mul(&a, 10) == 200) - mul(&a, 10);',\n      _result: 0 - 200,\n    },\n  ])\n  .fn(t => run(t, t.params._body, t.params._result));\n\ng.test('call')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#function-calls')\n  .desc('Tests order of evaluation of call expressions.')\n  .paramsSimple([\n    {\n      name: 'OneSE', //\n      _body: 'return sub_mul3(mul(&a, 2), 2, a, 3, 3, 4);',\n      _result: 4 * 2 - 4 * 3 - 3 * 4,\n    },\n    {\n      name: 'AllSE',\n      _body: 'return sub_mul3(mul(&a, 2), 2, mul(&a, 2), 3, mul(&a, 2), 4);',\n      _result: 4 * 2 - 8 * 3 - 16 * 4,\n    },\n    {\n      name: 'MiddleNotSE',\n      _body: 'return sub_mul3(mul(&a, 2), 2, a, 3, mul(&a, 2), 4);',\n      _result: 4 * 2 - 4 * 3 - 8 * 4,\n    },\n  ])\n  .fn(t => run(t, t.params._body, t.params._result));\n\ng.test('index_accessor')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#array-access-expr')\n  .desc('Tests order of evaluation of index accessor expressions.')\n  .paramsSimple([\n    {\n      name: 'LeftSE', //\n      _body: 'return arr2D[mul(&a, 2)][a];',\n      _result: 4 * 10 + 4,\n    },\n    {\n      name: 'RightSE', //\n      _body: 'return arr2D[a][mul(&a, 2)];',\n      _result: 2 * 10 + 4,\n    },\n    {\n      name: 'BothSE',\n      _body: 'return arr2D[mul(&a, 2)][mul(&a, 2)];',\n      _result: 4 * 10 + 8,\n    },\n  ])\n  .fn(t => run(t, t.params._body, t.params._result));\n\ng.test('assignment')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#assignment')\n  .desc('Tests order of evaluation of assignment statements.')\n  .paramsSimple([\n    {\n      name: 'ToArray1D',\n      _body:\n        'arr1D_zero[mul(&a, 2)] = mul(&a, 2);' + //\n        'return arr1D_zero[8];',\n      _result: 4,\n    },\n    {\n      name: 'ToArray2D',\n      _body:\n        'arr2D_zero[mul(&a, 2)][mul(&a, 2)] = mul(&a, 2);' + //\n        'return arr2D_zero[8][16];',\n      _result: 4,\n    },\n    {\n      name: 'ToArrayFromArray',\n      _body:\n        'arr2D_zero[4][8] = 123;' +\n        'arr1D_zero[mul(&a, 2)] = arr2D_zero[mul(&a, 2)][mul(&a, 2)];' +\n        'return arr1D_zero[16];',\n      _result: 123,\n    },\n    {\n      name: 'ToArrayIndexedByArrayIndexedBySE',\n      _body:\n        'var arr1 = arr1D_zero;' +\n        'var arr2 = arr1D_zero;' +\n        'arr2[8] = 3;' +\n        'arr1[arr2[mul(&a, 2)]] = mul(&a, 2);' +\n        'return arr1[3];',\n      _result: 4,\n    },\n    {\n      name: 'ToVec_BothSE',\n      _body:\n        'a = 0;' +\n        'vec4_zero[add(&a, 1)] = add(&a, 1);' + //\n        'return vec4_zero[2];',\n      _result: 1,\n    },\n    {\n      name: 'ToVec_LeftSE',\n      _body:\n        'vec4_zero[add(&a, 1)] = a;' + //\n        'return vec4_zero[3];',\n      _result: 2,\n    },\n    {\n      name: 'ToVec_RightSE',\n      _body:\n        'vec4_zero[a] = add(&a, 1);' + //\n        'return vec4_zero[3];',\n      _result: 3,\n    },\n  ])\n  .fn(t => run(t, t.params._body, t.params._result));\n\ng.test('type_constructor')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#type-constructor-expr')\n  .desc('Tests order of evaluation of type constructor expressions.')\n  .paramsSimple([\n    {\n      name: 'Struct',\n      _body:\n        'let r = S(mul(&a, 2), mul(&a, 2), mul(&a, 2));' + //\n        'return sub_mul3(r.x, 2, r.y, 3, r.z, 4);',\n      _result: 4 * 2 - 8 * 3 - 16 * 4,\n    },\n    {\n      name: 'Array1D',\n      _body:\n        'let r = array<i32, 3>(mul(&a, 2), mul(&a, 2), mul(&a, 2));' + //\n        'return sub_mul3(r[0], 2, r[1], 3, r[2], 4);',\n      _result: 4 * 2 - 8 * 3 - 16 * 4,\n    },\n    {\n      name: 'Array2D',\n      _body:\n        'let r = array<array<i32, 2>, 2>(array<i32, 2>(mul(&a, 2), mul(&a, 2)), array<i32, 2>(mul(&a, 2), mul(&a, 2)));' +\n        'return sub_mul4(r[0][0], 2, r[0][1], 3, r[1][0], 4, r[1][1], 5);',\n      _result: 4 * 2 - 8 * 3 - 16 * 4 - 32 * 5,\n    },\n  ])\n  .fn(t => run(t, t.params._body, t.params._result));\n\ng.test('member_accessor')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#struct-access-expr')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#vector-access-expr')\n  .desc('Tests order of evaluation of member accessor expressions.')\n  .paramsSimple([\n    {\n      name: 'Vec',\n      _body: 'return vec3(mul(&a, 2)).x - vec3(mul(&a, 3)).x;',\n      _result: 4 - 12,\n    },\n    {\n      name: 'Struct',\n      _body: 'return make_S(mul(&a, 2)).x - make_S(mul(&a, 3)).x;',\n      _result: 4 - 12,\n    },\n  ])\n  .fn(t => run(t, t.params._body, t.params._result));\n\nfunction run(t: GPUTest, body: string, result: number) {\n  // WGSL source\n  const source =\n    common_source +\n    `\nfn test_body() -> i32 {\n  ${body}\n}\n\n@group(0) @binding(0) var<storage, write> output : i32;\n\n@stage(compute) @workgroup_size(1)\nfn main() {\n  output = test_body();\n}\n`;\n\n  // Construct a buffer to hold the results of the expression tests\n  const outputBufferSize = 4; // result : i32\n  const outputBuffer = t.device.createBuffer({\n    size: outputBufferSize,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE,\n  });\n\n  const module = t.device.createShaderModule({ code: source });\n  const pipeline = t.device.createComputePipeline({\n    compute: { module, entryPoint: 'main' },\n  });\n\n  const group = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [{ binding: 0, resource: { buffer: outputBuffer } }],\n  });\n\n  const encoder = t.device.createCommandEncoder();\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, group);\n  pass.dispatch(1);\n  pass.end();\n\n  t.queue.submit([encoder.finish()]);\n\n  const checkExpectation = (outputData: Uint8Array) => {\n    const output = TypeI32.read(outputData, 0);\n    const got = output.value;\n    const expected = result;\n    if (got !== expected) {\n      return new Error(`returned: ${got}, expected: ${expected}`);\n    }\n    return undefined;\n  };\n\n  t.expectGPUBufferValuesPassCheck(outputBuffer, checkExpectation, {\n    type: Uint8Array,\n    typedLength: outputBufferSize,\n  });\n}\n"],"file":"evaluation_order.spec.js"}