{"version":3,"file":"evaluation_order.spec.js","names":["description","makeTestGroup","GPUTest","TypeI32","g","common_source","test","specURL","desc","paramsSimple","name","_body","_result","fn","t","run","params","body","result","source","outputBufferSize","outputBuffer","device","createBuffer","size","usage","GPUBufferUsage","COPY_SRC","STORAGE","module","createShaderModule","code","pipeline","createComputePipeline","layout","compute","entryPoint","group","createBindGroup","getBindGroupLayout","entries","binding","resource","buffer","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","queue","submit","finish","checkExpectation","outputData","output","read","got","value","expected","Error","undefined","expectGPUBufferValuesPassCheck","type","Uint8Array","typedLength"],"sources":["../../../../src/webgpu/shader/execution/evaluation_order.spec.ts"],"sourcesContent":["export const description = `\nExecution Tests for evaluation order of expressions\n`;\n\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { GPUTest } from '../../gpu_test.js';\nimport { TypeI32 } from '../../util/conversion.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nconst common_source = `\nvar<private> a : i32 = 2;\nvar<private> b : i32 = 3;\nvar<private> c : i32 = 4;\n\nvar<private> arr2D : array<array<i32, 10>, 10> = array<array<i32, 10>, 10>(\n  array<i32, 10>( 0,  1,  2,  3,  4,  5,  6,  7,  8,  9),\n  array<i32, 10>(10, 11, 12, 13, 14, 15, 16, 17, 18, 19),\n  array<i32, 10>(20, 22, 22, 23, 24, 25, 26, 27, 28, 29),\n  array<i32, 10>(30, 32, 32, 33, 34, 35, 36, 37, 38, 33),\n  array<i32, 10>(40, 42, 42, 43, 44, 45, 46, 47, 48, 44),\n  array<i32, 10>(50, 52, 52, 53, 54, 55, 56, 57, 58, 55),\n  array<i32, 10>(60, 62, 62, 63, 64, 65, 66, 67, 68, 66),\n  array<i32, 10>(70, 72, 72, 73, 74, 75, 76, 77, 78, 77),\n  array<i32, 10>(80, 82, 82, 83, 84, 85, 86, 87, 88, 98),\n  array<i32, 10>(90, 92, 92, 93, 94, 95, 96, 97, 98, 99),\n);\n\nvar<private> arr1D_zero : array<i32, 50>;\nvar<private> arr2D_zero : array<array<i32, 50>, 50>;\nvar<private> arr3D_zero : array<array<array<i32, 50>, 50>, 50>;\n\nvar<private> vec4_zero : vec4<i32>;\n\nstruct S {\n  x : i32,\n  y : i32,\n  z : i32,\n}\n\nfn mul(p1 : ptr<private, i32>, multiplicand : i32) -> i32 {\n  *p1 = *p1 * multiplicand;\n  return *p1;\n}\n\nfn add(p1 : ptr<private, i32>, addend : i32) -> i32 {\n  *p1 = *p1 + addend;\n  return *p1;\n}\n\nfn sub_mul3(a : i32, a_mul : i32, b : i32, b_mul : i32, c : i32, c_mul : i32) -> i32 {\n  return a * a_mul - b * b_mul - c * c_mul;\n}\n\nfn sub_mul4(a : i32, a_mul : i32, b : i32, b_mul : i32, c : i32, c_mul : i32, d : i32, d_mul : i32) -> i32 {\n  return a * a_mul - b * b_mul - c * c_mul - d * d_mul;\n}\n\nfn set_vec4_x(p : ptr<private, vec4<i32>>, v : i32) -> i32 {\n  (*p).x = v;\n  return 0;\n}\n\nfn make_S(init : i32) -> S {\n  return S(init, init, init);\n}\n\nfn mul3_ret0(p1 : ptr<private, i32>, p2 : ptr<private, i32>, p3 : ptr<private, i32>, multiplicand : i32) -> i32 {\n  *p1 = *p1 * multiplicand;\n  *p2 = *p2 * multiplicand;\n  *p3 = *p3 * multiplicand;\n  return 0;\n}\n`;\n\ng.test('binary_arith')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#arithmetic-expr')\n  .desc('Tests order of evaluation of arithmetic binary expressions.')\n  .paramsSimple([\n    {\n      name: 'BothSE', // SE = Side Effects\n      _body: 'return mul(&a, 10) - mul(&a, 10);',\n      _result: 20 - 200,\n    },\n    {\n      name: 'LeftSE', //\n      _body: 'return mul(&a, 10) - a;',\n      _result: 20 - 20,\n    },\n    {\n      name: 'RightSE', //\n      _body: 'return a - mul(&a, 10);',\n      _result: 2 - 20,\n    },\n    {\n      name: 'ThreeSE',\n      _body: 'return mul(&a, 10) - mul(&a, 10) - mul(&a, 10);',\n      _result: 20 - 200 - 2000,\n    },\n    {\n      name: 'LeftmostSE',\n      _body: 'return mul3_ret0(&a, &b, &c, 10) - a - b - c;',\n      _result: 0 - 20 - 30 - 40,\n    },\n    {\n      name: 'RightmostSE', //\n      _body: 'return a - b - c - mul3_ret0(&a, &b, &c, 10);',\n      _result: 2 - 3 - 4 - 0,\n    },\n    {\n      name: 'MiddleSE', //\n      _body: 'return a - b - mul3_ret0(&a, &b, &c, 10) - c;',\n      _result: 2 - 3 - 0 - 40,\n    },\n    {\n      name: 'LiteralAndSEAndVar', //\n      _body: 'return 1 - mul(&a, 10) - a;',\n      _result: 1 - 20 - 20,\n    },\n    {\n      name: 'VarAndSEAndLiteral', //\n      _body: 'return a - mul(&a, 10) - 1;',\n      _result: 2 - 20 - 1,\n    },\n    {\n      name: 'SEAndVarAndLiteral', //\n      _body: 'return mul(&a, 10) - a - 1;',\n      _result: 20 - 20 - 1,\n    },\n    {\n      name: 'VarAndLiteralAndSE', //\n      _body: 'return a - 1 - mul(&a, 10);',\n      _result: 2 - 1 - 20,\n    },\n    {\n      name: 'MemberAccessAndSE',\n      _body: 'return vec4_zero.x + set_vec4_x(&vec4_zero, 42);',\n      _result: 0,\n    },\n    {\n      name: 'SEAndMemberAccess',\n      _body: 'return set_vec4_x(&vec4_zero, 42) + vec4_zero.x;',\n      _result: 42,\n    },\n  ])\n  .fn(t => run(t, t.params._body, t.params._result));\n\ng.test('binary_logical')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#logical-expr')\n  .desc('Tests order of evaluation of logical binary expressions.')\n  .paramsSimple([\n    {\n      name: 'BothSE',\n      _body:\n        'let r = (add(&a, 1) == 3) && (add(&a, 1) == 4);' + //\n        'return i32(r);',\n      _result: 1,\n    },\n    {\n      name: 'LeftSE',\n      _body:\n        'let r = (add(&a, 1) == 3) && (a == 3);' + //\n        'return i32(r);',\n      _result: 1,\n    },\n    {\n      name: 'RightSE',\n      _body:\n        'let r = (a == 2) && (add(&a, 1) == 3);' + //\n        'return i32(r);',\n      _result: 1,\n    },\n    {\n      name: 'LeftmostSE',\n      _body:\n        'let r = (mul3_ret0(&a, &b, &c, 10) == 0) && (a == 20) && (b == 30) && (c == 40);' +\n        'return i32(r);',\n      _result: 1,\n    },\n    {\n      name: 'RightmostSE',\n      _body:\n        'let r = (a == 2) && (b == 3) && (c == 4) && (mul3_ret0(&a, &b, &c, 10) == 0);' +\n        'return i32(r);',\n      _result: 1,\n    },\n    {\n      name: 'MiddleSE',\n      _body:\n        'let r = (a == 2) && (b == 3) && (mul3_ret0(&a, &b, &c, 10) == 0) && (c == 40);' +\n        'return i32(r);',\n      _result: 1,\n    },\n    {\n      name: 'ShortCircuit_And_LhsOnly',\n      _body:\n        // rhs should not execute\n        'let t = (a != 2) && (mul(&a, 10) == 20);' + //\n        'return a;',\n      _result: 2,\n    },\n    {\n      name: 'ShortCircuit_And_LhsAndRhs',\n      _body:\n        // rhs should execute\n        'let t = (a == 2) && (mul(&a, 10) == 20);' + //\n        'return a;',\n      _result: 20,\n    },\n    {\n      name: 'ShortCircuit_Or_LhsOnly',\n      _body:\n        // rhs should not execute\n        'let t = (a == 2) || (mul(&a, 10) == 20);' + //\n        'let r = (a == 2);' +\n        'return i32(r);',\n      _result: 1,\n    },\n    {\n      name: 'ShortCircuit_Or_LhsAndRhs',\n      _body:\n        // rhs should execute\n        'let t = (a != 2) || (mul(&a, 10) == 20);' + //\n        'let r = (a == 20);' +\n        'return i32(r);',\n      _result: 1,\n    },\n    {\n      name: 'NoShortCircuit_And',\n      _body:\n        // rhs should execute\n        'let t = (a != 2) & (mul(&a, 10) == 20);' + //\n        'return a;',\n      _result: 20,\n    },\n    {\n      name: 'NoShortCircuit_Or',\n      _body:\n        // rhs should execute\n        'let t = (a == 2) | (mul(&a, 10) == 20);' + //\n        'return a;',\n      _result: 20,\n    },\n  ])\n  .fn(t => run(t, t.params._body, t.params._result));\n\ng.test('binary_mixed')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#arithmetic-expr')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#logical-expr')\n  .desc('Tests order of evaluation of both arithmetic and logical binary expressions.')\n  .paramsSimple([\n    {\n      name: 'ArithAndLogical',\n      _body: 'return mul(&a, 10) - i32(mul(&a, 10) == 200 && mul(&a, 10) == 2000);',\n      _result: 20 - 1,\n    },\n    {\n      name: 'LogicalAndArith',\n      _body: 'return i32(mul(&a, 10) == 20 && mul(&a, 10) == 200) - mul(&a, 10);',\n      _result: 1 - 2000,\n    },\n    {\n      name: 'ArithAndLogical_ShortCircuit',\n      _body: 'return mul(&a, 10) - i32(mul(&a, 10) != 200 && mul(&a, 10) == 2000);',\n      _result: 20 - 0,\n    },\n    {\n      name: 'LogicalAndArith_ShortCircuit',\n      _body: 'return i32(mul(&a, 10) != 20 && mul(&a, 10) == 200) - mul(&a, 10);',\n      _result: 0 - 200,\n    },\n  ])\n  .fn(t => run(t, t.params._body, t.params._result));\n\ng.test('call')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#function-calls')\n  .desc('Tests order of evaluation of call expressions.')\n  .paramsSimple([\n    {\n      name: 'OneSE', //\n      _body: 'return sub_mul3(mul(&a, 2), 2, a, 3, 3, 4);',\n      _result: 4 * 2 - 4 * 3 - 3 * 4,\n    },\n    {\n      name: 'AllSE',\n      _body: 'return sub_mul3(mul(&a, 2), 2, mul(&a, 2), 3, mul(&a, 2), 4);',\n      _result: 4 * 2 - 8 * 3 - 16 * 4,\n    },\n    {\n      name: 'MiddleNotSE',\n      _body: 'return sub_mul3(mul(&a, 2), 2, a, 3, mul(&a, 2), 4);',\n      _result: 4 * 2 - 4 * 3 - 8 * 4,\n    },\n  ])\n  .fn(t => run(t, t.params._body, t.params._result));\n\ng.test('index_accessor')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#array-access-expr')\n  .desc('Tests order of evaluation of index accessor expressions.')\n  .paramsSimple([\n    {\n      name: 'LeftSE', //\n      _body: 'return arr2D[mul(&a, 2)][a];',\n      _result: 4 * 10 + 4,\n    },\n    {\n      name: 'RightSE', //\n      _body: 'return arr2D[a][mul(&a, 2)];',\n      _result: 2 * 10 + 4,\n    },\n    {\n      name: 'BothSE',\n      _body: 'return arr2D[mul(&a, 2)][mul(&a, 2)];',\n      _result: 4 * 10 + 8,\n    },\n  ])\n  .fn(t => run(t, t.params._body, t.params._result));\n\ng.test('assignment')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#assignment')\n  .desc('Tests order of evaluation of assignment statements.')\n  .paramsSimple([\n    {\n      name: 'ToArray1D',\n      _body:\n        'arr1D_zero[mul(&a, 2)] = mul(&a, 2);' + //\n        'return arr1D_zero[8];',\n      _result: 4,\n    },\n    {\n      name: 'ToArray2D',\n      _body:\n        'arr2D_zero[mul(&a, 2)][mul(&a, 2)] = mul(&a, 2);' + //\n        'return arr2D_zero[8][16];',\n      _result: 4,\n    },\n    {\n      name: 'ToArrayFromArray',\n      _body:\n        'arr2D_zero[4][8] = 123;' +\n        'arr1D_zero[mul(&a, 2)] = arr2D_zero[mul(&a, 2)][mul(&a, 2)];' +\n        'return arr1D_zero[16];',\n      _result: 123,\n    },\n    {\n      name: 'ToArrayIndexedByArrayIndexedBySE',\n      _body:\n        'var arr1 = arr1D_zero;' +\n        'var arr2 = arr1D_zero;' +\n        'arr2[8] = 3;' +\n        'arr1[arr2[mul(&a, 2)]] = mul(&a, 2);' +\n        'return arr1[3];',\n      _result: 4,\n    },\n    {\n      name: 'ToVec_BothSE',\n      _body:\n        'a = 0;' +\n        'vec4_zero[add(&a, 1)] = add(&a, 1);' + //\n        'return vec4_zero[2];',\n      _result: 1,\n    },\n    {\n      name: 'ToVec_LeftSE',\n      _body:\n        'vec4_zero[add(&a, 1)] = a;' + //\n        'return vec4_zero[3];',\n      _result: 2,\n    },\n    {\n      name: 'ToVec_RightSE',\n      _body:\n        'vec4_zero[a] = add(&a, 1);' + //\n        'return vec4_zero[3];',\n      _result: 3,\n    },\n  ])\n  .fn(t => run(t, t.params._body, t.params._result));\n\ng.test('type_constructor')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#type-constructor-expr')\n  .desc('Tests order of evaluation of type constructor expressions.')\n  .paramsSimple([\n    {\n      name: 'Struct',\n      _body:\n        'let r = S(mul(&a, 2), mul(&a, 2), mul(&a, 2));' + //\n        'return sub_mul3(r.x, 2, r.y, 3, r.z, 4);',\n      _result: 4 * 2 - 8 * 3 - 16 * 4,\n    },\n    {\n      name: 'Array1D',\n      _body:\n        'let r = array<i32, 3>(mul(&a, 2), mul(&a, 2), mul(&a, 2));' + //\n        'return sub_mul3(r[0], 2, r[1], 3, r[2], 4);',\n      _result: 4 * 2 - 8 * 3 - 16 * 4,\n    },\n    {\n      name: 'Array2D',\n      _body:\n        'let r = array<array<i32, 2>, 2>(array<i32, 2>(mul(&a, 2), mul(&a, 2)), array<i32, 2>(mul(&a, 2), mul(&a, 2)));' +\n        'return sub_mul4(r[0][0], 2, r[0][1], 3, r[1][0], 4, r[1][1], 5);',\n      _result: 4 * 2 - 8 * 3 - 16 * 4 - 32 * 5,\n    },\n  ])\n  .fn(t => run(t, t.params._body, t.params._result));\n\ng.test('member_accessor')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#struct-access-expr')\n  .specURL('https://gpuweb.github.io/gpuweb/wgsl/#vector-access-expr')\n  .desc('Tests order of evaluation of member accessor expressions.')\n  .paramsSimple([\n    {\n      name: 'Vec',\n      _body: 'return vec3(mul(&a, 2)).x - vec3(mul(&a, 3)).x;',\n      _result: 4 - 12,\n    },\n    {\n      name: 'Struct',\n      _body: 'return make_S(mul(&a, 2)).x - make_S(mul(&a, 3)).x;',\n      _result: 4 - 12,\n    },\n  ])\n  .fn(t => run(t, t.params._body, t.params._result));\n\nfunction run(t: GPUTest, body: string, result: number) {\n  // WGSL source\n  const source =\n    common_source +\n    `\nfn test_body() -> i32 {\n  ${body}\n}\n\n@group(0) @binding(0) var<storage, read_write> output : i32;\n\n@compute @workgroup_size(1)\nfn main() {\n  output = test_body();\n}\n`;\n\n  // Construct a buffer to hold the results of the expression tests\n  const outputBufferSize = 4; // result : i32\n  const outputBuffer = t.device.createBuffer({\n    size: outputBufferSize,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE,\n  });\n\n  const module = t.device.createShaderModule({ code: source });\n  const pipeline = t.device.createComputePipeline({\n    layout: 'auto',\n    compute: { module, entryPoint: 'main' },\n  });\n\n  const group = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [{ binding: 0, resource: { buffer: outputBuffer } }],\n  });\n\n  const encoder = t.device.createCommandEncoder();\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, group);\n  pass.dispatchWorkgroups(1);\n  pass.end();\n\n  t.queue.submit([encoder.finish()]);\n\n  const checkExpectation = (outputData: Uint8Array) => {\n    const output = TypeI32.read(outputData, 0);\n    const got = output.value;\n    const expected = result;\n    if (got !== expected) {\n      return new Error(`returned: ${got}, expected: ${expected}`);\n    }\n    return undefined;\n  };\n\n  t.expectGPUBufferValuesPassCheck(outputBuffer, checkExpectation, {\n    type: Uint8Array,\n    typedLength: outputBufferSize,\n  });\n}\n"],"mappings":"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"}