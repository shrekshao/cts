{"version":3,"sources":["../../src/webgpu/capability_info.ts"],"names":["keysOf","makeTable","numericKeysOf","assertTypeTrue","assert","unreachable","GPUConst","kMaxQueryCount","kQueryTypeInfo","feature","undefined","kQueryTypes","kBufferSizeAlignment","kBufferUsageInfo","BufferUsage","MAP_READ","MAP_WRITE","COPY_SRC","COPY_DST","INDEX","VERTEX","UNIFORM","STORAGE","INDIRECT","QUERY_RESOLVE","kBufferUsages","kAllBufferUsageBits","reduce","previousSet","currentUsage","kRegularTextureFormatInfo","kTexFmtInfoHeader","kSizedDepthStencilFormatInfo","kUnsizedDepthStencilFormatInfo","kBCTextureFormatInfo","kETC2TextureFormatInfo","kASTCTextureFormatInfo","kCompressedTextureFormatInfo","kColorTextureFormatInfo","kEncodableTextureFormatInfo","kSizedTextureFormatInfo","kDepthStencilFormatInfo","kUncompressedTextureFormatInfo","kAllTextureFormatInfo","kRegularTextureFormats","kSizedDepthStencilFormats","kUnsizedDepthStencilFormats","kCompressedTextureFormats","kColorTextureFormats","kEncodableTextureFormats","kSizedTextureFormats","kDepthStencilFormats","kUncompressedTextureFormats","kAllTextureFormats","kRenderableColorTextureFormats","filter","v","renderable","kCanvasTextureFormats","kTextureFormatInfo","kTextureFormats","kValidTextureFormatsForCopyE2T","kTextureDimensionInfo","kTextureDimensions","kTextureAspectInfo","kTextureAspects","kCompareFunctionInfo","kCompareFunctions","kStencilOperationInfo","kStencilOperations","kDepthStencilFormatCapabilityInBufferTextureCopy","depth24plus","CopyB2T","CopyT2B","texelAspectSize","depth16unorm","depth32float","stencil8","depthStencilFormatCopyableAspects","type","format","appliedType","depthStencilBufferTextureCopySupported","aspect","supportedAspects","includes","depthStencilFormatAspectSize","textureDimensionAndFormatCompatible","dimension","info","blockWidth","depth","stencil","kTextureUsageInfo","TextureUsage","TEXTURE_BINDING","STORAGE_BINDING","RENDER_ATTACHMENT","kTextureUsages","kTextureViewDimensionInfo","storage","kTextureViewDimensions","kVertexFormatInfo","kVertexFormats","kBindableResources","kMinDynamicBufferOffsetAlignment","kMaxBindingsPerBindGroup","kPerStageBindingLimits","class","max","kPerPipelineBindingLimits","maxDynamic","kBindingKind","uniformBuf","resource","perStageLimitClass","perPipelineLimitClass","storageBuf","filtSamp","sampler","nonFiltSamp","compareSamp","sampledTex","sampledTexMS","storageTex","kValidStagesAll","validStages","ShaderStage","FRAGMENT","COMPUTE","kValidStagesStorageWrite","bufferBindingTypeInfo","d","usage","kBufferBindingTypes","samplerBindingTypeInfo","kSamplerBindingTypes","sampledTextureBindingTypeInfo","multisampled","kTextureSampleTypes","storageTextureBindingTypeInfo","kStorageTextureAccessValues","texBindingTypeInfo","e","texture","storageTexture","bindingTypeInfo","buffer","bufferBindingEntries","includeUndefined","samplerBindingEntries","textureBindingEntries","storageTextureBindingEntries","access","sampledAndStorageBindingEntries","storageTextureFormat","allBindingEntries","kShaderStages","kShaderStageCombinations","kTextureSampleCounts","kBlendFactors","kBlendOperations","kMaxColorAttachments","kMaxVertexBuffers","kMaxVertexAttributes","kMaxVertexBufferArrayStride","kDrawIndirectParametersSize","kDrawIndexedIndirectParametersSize"],"mappings":"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","sourcesContent":["// MAINTENANCE_TODO: The generated Typedoc for this file is hard to navigate because it's\n// alphabetized. Consider using namespaces or renames to fix this?\n\n/* eslint-disable no-sparse-arrays */\n\nimport { keysOf, makeTable, numericKeysOf, valueof } from '../common/util/data_tables.js';\nimport { assertTypeTrue, TypeEqual } from '../common/util/types.js';\nimport { assert, unreachable } from '../common/util/util.js';\n\nimport { GPUConst } from './constants.js';\nimport { ImageCopyType } from './util/texture/layout.js';\n\n// Base device limits can be found in constants.ts.\n\n// Queries\n\n/** Maximum number of queries in GPUQuerySet, by spec. */\nexport const kMaxQueryCount = 8192;\n/** Per-GPUQueryType info. */\nexport type QueryTypeInfo = {\n  /** Optional feature required to use this GPUQueryType. */\n  readonly feature: GPUFeatureName | undefined;\n  // Add fields as needed\n};\nexport const kQueryTypeInfo: {\n  readonly [k in GPUQueryType]: QueryTypeInfo;\n} = /* prettier-ignore */ {\n  // Occlusion query does not require any features.\n  'occlusion':           { feature:  undefined },\n  'timestamp':           { feature: 'timestamp-query' },\n};\n/** List of all GPUQueryType values. */\nexport const kQueryTypes = keysOf(kQueryTypeInfo);\n\n// Buffers\n\n/** Required alignment of a GPUBuffer size, by spec. */\nexport const kBufferSizeAlignment = 4;\n\n/** Per-GPUBufferUsage info. */\nexport const kBufferUsageInfo: {\n  readonly [k in valueof<typeof GPUConst.BufferUsage>]: {};\n} = /* prettier-ignore */ {\n  [GPUConst.BufferUsage.MAP_READ]:      {},\n  [GPUConst.BufferUsage.MAP_WRITE]:     {},\n  [GPUConst.BufferUsage.COPY_SRC]:      {},\n  [GPUConst.BufferUsage.COPY_DST]:      {},\n  [GPUConst.BufferUsage.INDEX]:         {},\n  [GPUConst.BufferUsage.VERTEX]:        {},\n  [GPUConst.BufferUsage.UNIFORM]:       {},\n  [GPUConst.BufferUsage.STORAGE]:       {},\n  [GPUConst.BufferUsage.INDIRECT]:      {},\n  [GPUConst.BufferUsage.QUERY_RESOLVE]: {},\n};\n/** List of all GPUBufferUsage values. */\nexport const kBufferUsages = numericKeysOf<GPUBufferUsageFlags>(kBufferUsageInfo);\nexport const kAllBufferUsageBits = kBufferUsages.reduce(\n  (previousSet, currentUsage) => previousSet | currentUsage,\n  0\n);\n\n// Textures\n\n// Definitions for use locally. To access the table entries, use `kTextureFormatInfo`.\n\n// Note that we repeat the header multiple times in order to make it easier to read.\nconst kRegularTextureFormatInfo = /* prettier-ignore */ makeTable(\n                           ['renderable', 'multisample', 'resolve', 'color', 'depth', 'stencil', 'storage', 'copySrc', 'copyDst', 'sampleType', 'bytesPerBlock', 'blockWidth', 'blockHeight',                'feature', 'baseFormat'] as const,\n                           [            ,              ,          ,    true,   false,     false,          ,      true,      true,             ,                ,            1,             1,                         ,   undefined ] as const, {\n  // 8-bit formats\n  'r8unorm':               [        true,          true,      true,        ,        ,          ,     false,          ,          ,      'float',               1],\n  'r8snorm':               [       false,         false,     false,        ,        ,          ,     false,          ,          ,      'float',               1],\n  'r8uint':                [        true,          true,     false,        ,        ,          ,     false,          ,          ,       'uint',               1],\n  'r8sint':                [        true,          true,     false,        ,        ,          ,     false,          ,          ,       'sint',               1],\n  // 16-bit formats\n  'r16uint':               [        true,          true,     false,        ,        ,          ,     false,          ,          ,       'uint',               2],\n  'r16sint':               [        true,          true,     false,        ,        ,          ,     false,          ,          ,       'sint',               2],\n  'r16float':              [        true,          true,      true,        ,        ,          ,     false,          ,          ,      'float',               2],\n  'rg8unorm':              [        true,          true,      true,        ,        ,          ,     false,          ,          ,      'float',               2],\n  'rg8snorm':              [       false,         false,     false,        ,        ,          ,     false,          ,          ,      'float',               2],\n  'rg8uint':               [        true,          true,     false,        ,        ,          ,     false,          ,          ,       'uint',               2],\n  'rg8sint':               [        true,          true,     false,        ,        ,          ,     false,          ,          ,       'sint',               2],\n  // 32-bit formats\n  'r32uint':               [        true,         false,     false,        ,        ,          ,      true,          ,          ,       'uint',               4],\n  'r32sint':               [        true,         false,     false,        ,        ,          ,      true,          ,          ,       'sint',               4],\n  'r32float':              [        true,          true,     false,        ,        ,          ,      true,          ,          ,      'unfilterable-float',               4],\n  'rg16uint':              [        true,          true,     false,        ,        ,          ,     false,          ,          ,       'uint',               4],\n  'rg16sint':              [        true,          true,     false,        ,        ,          ,     false,          ,          ,       'sint',               4],\n  'rg16float':             [        true,          true,      true,        ,        ,          ,     false,          ,          ,      'float',               4],\n  'rgba8unorm':            [        true,          true,      true,        ,        ,          ,      true,          ,          ,      'float',               4,            ,                ,                          , 'rgba8unorm'],\n  'rgba8unorm-srgb':       [        true,          true,      true,        ,        ,          ,     false,          ,          ,      'float',               4,            ,                ,                          , 'rgba8unorm'],\n  'rgba8snorm':            [       false,         false,     false,        ,        ,          ,      true,          ,          ,      'float',               4],\n  'rgba8uint':             [        true,          true,     false,        ,        ,          ,      true,          ,          ,       'uint',               4],\n  'rgba8sint':             [        true,          true,     false,        ,        ,          ,      true,          ,          ,       'sint',               4],\n  'bgra8unorm':            [        true,          true,      true,        ,        ,          ,     false,          ,          ,      'float',               4,            ,                ,                          , 'bgra8unorm'],\n  'bgra8unorm-srgb':       [        true,          true,      true,        ,        ,          ,     false,          ,          ,      'float',               4,            ,                ,                          , 'bgra8unorm'],\n  // Packed 32-bit formats\n  'rgb10a2unorm':          [        true,          true,      true,        ,        ,          ,     false,          ,          ,      'float',               4],\n  'rg11b10ufloat':         [       false,         false,     false,        ,        ,          ,     false,          ,          ,      'float',               4],\n  'rgb9e5ufloat':          [       false,         false,     false,        ,        ,          ,     false,          ,          ,      'float',               4],\n  // 64-bit formats\n  'rg32uint':              [        true,         false,     false,        ,        ,          ,      true,          ,          ,       'uint',               8],\n  'rg32sint':              [        true,         false,     false,        ,        ,          ,      true,          ,          ,       'sint',               8],\n  'rg32float':             [        true,         false,     false,        ,        ,          ,      true,          ,          ,      'unfilterable-float',               8],\n  'rgba16uint':            [        true,          true,     false,        ,        ,          ,      true,          ,          ,       'uint',               8],\n  'rgba16sint':            [        true,          true,     false,        ,        ,          ,      true,          ,          ,       'sint',               8],\n  'rgba16float':           [        true,          true,      true,        ,        ,          ,      true,          ,          ,      'float',               8],\n  // 128-bit formats\n  'rgba32uint':            [        true,         false,     false,        ,        ,          ,      true,          ,          ,       'uint',              16],\n  'rgba32sint':            [        true,         false,     false,        ,        ,          ,      true,          ,          ,       'sint',              16],\n  'rgba32float':           [        true,         false,     false,        ,        ,          ,      true,          ,          ,      'unfilterable-float',              16],\n} as const);\n/* prettier-ignore */\nconst kTexFmtInfoHeader =  ['renderable', 'multisample', 'resolve', 'color', 'depth', 'stencil', 'storage', 'copySrc', 'copyDst', 'sampleType', 'bytesPerBlock', 'blockWidth', 'blockHeight',                'feature', 'baseFormat'] as const;\nconst kSizedDepthStencilFormatInfo = /* prettier-ignore */ makeTable(kTexFmtInfoHeader,\n                           [        true,          true,     false,   false,        ,          ,     false,     false,     false,             ,                ,            1,             1,                         ,   undefined ] as const, {\n  'depth32float':          [            ,              ,          ,        ,    true,     false,          ,          ,          ,      'depth',               4],\n  'depth16unorm':          [            ,              ,          ,        ,    true,     false,          ,          ,          ,      'depth',               2],\n  'stencil8':              [            ,              ,          ,        ,   false,      true,          ,          ,          ,       'uint',               1],\n} as const);\n\n// Multi aspect sample type are now set to their first aspect\nconst kUnsizedDepthStencilFormatInfo = /* prettier-ignore */ makeTable(kTexFmtInfoHeader,\n                           [        true,          true,     false,   false,        ,          ,     false,     false,     false,             ,       undefined,            1,             1,                         ,   undefined ] as const, {\n  'depth24plus':           [            ,              ,          ,        ,    true,     false,          ,          ,          ,      'depth'],\n  'depth24plus-stencil8':  [            ,              ,          ,        ,    true,      true,          ,          ,          ,      'depth'],\n  // MAINTENANCE_TODO: These should really be sized formats; see below MAINTENANCE_TODO about multi-aspect formats.\n  'depth24unorm-stencil8': [            ,              ,          ,        ,    true,      true,          ,          ,          ,      'depth',                ,             ,              ,  'depth24unorm-stencil8'],\n  'depth32float-stencil8': [            ,              ,          ,        ,    true,      true,          ,          ,          ,      'depth',                ,             ,              ,  'depth32float-stencil8'],\n} as const);\n\n// Separated compressed formats by type\nconst kBCTextureFormatInfo = /* prettier-ignore */ makeTable(kTexFmtInfoHeader,\n                           [       false,         false,     false,    true,   false,     false,     false,      true,      true,             ,                ,            4,             4,                         ,  undefined ] as const, {\n  // Block Compression (BC) formats\n  'bc1-rgba-unorm':        [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',               8,            4,             4, 'texture-compression-bc', 'bc1-rgba-unorm'],\n  'bc1-rgba-unorm-srgb':   [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',               8,            4,             4, 'texture-compression-bc', 'bc1-rgba-unorm'],\n  'bc2-rgba-unorm':        [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,            4,             4, 'texture-compression-bc', 'bc2-rgba-unorm'],\n  'bc2-rgba-unorm-srgb':   [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,            4,             4, 'texture-compression-bc', 'bc2-rgba-unorm'],\n  'bc3-rgba-unorm':        [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,            4,             4, 'texture-compression-bc', 'bc3-rgba-unorm'],\n  'bc3-rgba-unorm-srgb':   [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,            4,             4, 'texture-compression-bc', 'bc3-rgba-unorm'],\n  'bc4-r-unorm':           [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',               8,            4,             4, 'texture-compression-bc'],\n  'bc4-r-snorm':           [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',               8,            4,             4, 'texture-compression-bc'],\n  'bc5-rg-unorm':          [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,            4,             4, 'texture-compression-bc'],\n  'bc5-rg-snorm':          [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,            4,             4, 'texture-compression-bc'],\n  'bc6h-rgb-ufloat':       [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,            4,             4, 'texture-compression-bc'],\n  'bc6h-rgb-float':        [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,            4,             4, 'texture-compression-bc'],\n  'bc7-rgba-unorm':        [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,            4,             4, 'texture-compression-bc', 'bc7-rgba-unorm'],\n  'bc7-rgba-unorm-srgb':   [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,            4,             4, 'texture-compression-bc', 'bc7-rgba-unorm'],\n} as const);\nconst kETC2TextureFormatInfo = /* prettier-ignore */ makeTable(kTexFmtInfoHeader,\n                           [       false,         false,     false,    true,   false,     false,     false,      true,      true,             ,                ,            4,             4,                          , undefined ] as const, {\n  // Ericsson Compression (ETC2) formats\n  'etc2-rgb8unorm':        [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',               8,            4,             4, 'texture-compression-etc2',  'etc2-rgb8unorm'],\n  'etc2-rgb8unorm-srgb':   [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',               8,            4,             4, 'texture-compression-etc2',  'etc2-rgb8unorm'],\n  'etc2-rgb8a1unorm':      [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',               8,            4,             4, 'texture-compression-etc2', 'etc2-rgb8a1unorm'],\n  'etc2-rgb8a1unorm-srgb': [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',               8,            4,             4, 'texture-compression-etc2', 'etc2-rgb8a1unorm'],\n  'etc2-rgba8unorm':       [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,            4,             4, 'texture-compression-etc2', 'etc2-rgba8unorm'],\n  'etc2-rgba8unorm-srgb':  [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,            4,             4, 'texture-compression-etc2', 'etc2-rgba8unorm'],\n  'eac-r11unorm':          [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',               8,            4,             4, 'texture-compression-etc2'],\n  'eac-r11snorm':          [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',               8,            4,             4, 'texture-compression-etc2'],\n  'eac-rg11unorm':         [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,            4,             4, 'texture-compression-etc2'],\n  'eac-rg11snorm':         [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,            4,             4, 'texture-compression-etc2'],\n} as const);\nconst kASTCTextureFormatInfo = /* prettier-ignore */ makeTable(kTexFmtInfoHeader,\n                           [       false,         false,     false,    true,   false,     false,     false,      true,      true,             ,                ,             ,              ,                           , undefined] as const, {\n  // Adaptable Scalable Compression (ASTC) formats\n  'astc-4x4-unorm':        [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,            4,             4, 'texture-compression-astc', 'astc-4x4-unorm'],\n  'astc-4x4-unorm-srgb':   [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,            4,             4, 'texture-compression-astc', 'astc-4x4-unorm'],\n  'astc-5x4-unorm':        [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,            5,             4, 'texture-compression-astc', 'astc-5x4-unorm'],\n  'astc-5x4-unorm-srgb':   [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,            5,             4, 'texture-compression-astc', 'astc-5x4-unorm'],\n  'astc-5x5-unorm':        [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,            5,             5, 'texture-compression-astc', 'astc-5x5-unorm'],\n  'astc-5x5-unorm-srgb':   [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,            5,             5, 'texture-compression-astc', 'astc-5x5-unorm'],\n  'astc-6x5-unorm':        [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,            6,             5, 'texture-compression-astc', 'astc-6x5-unorm'],\n  'astc-6x5-unorm-srgb':   [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,            6,             5, 'texture-compression-astc', 'astc-6x5-unorm'],\n  'astc-6x6-unorm':        [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,            6,             6, 'texture-compression-astc', 'astc-6x6-unorm'],\n  'astc-6x6-unorm-srgb':   [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,            6,             6, 'texture-compression-astc', 'astc-6x6-unorm'],\n  'astc-8x5-unorm':        [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,            8,             5, 'texture-compression-astc', 'astc-8x5-unorm'],\n  'astc-8x5-unorm-srgb':   [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,            8,             5, 'texture-compression-astc', 'astc-8x5-unorm'],\n  'astc-8x6-unorm':        [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,            8,             6, 'texture-compression-astc', 'astc-8x6-unorm'],\n  'astc-8x6-unorm-srgb':   [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,            8,             6, 'texture-compression-astc', 'astc-8x6-unorm'],\n  'astc-8x8-unorm':        [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,            8,             8, 'texture-compression-astc', 'astc-8x8-unorm'],\n  'astc-8x8-unorm-srgb':   [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,            8,             8, 'texture-compression-astc', 'astc-8x8-unorm'],\n  'astc-10x5-unorm':       [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,           10,             5, 'texture-compression-astc', 'astc-10x5-unorm'],\n  'astc-10x5-unorm-srgb':  [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,           10,             5, 'texture-compression-astc', 'astc-10x5-unorm'],\n  'astc-10x6-unorm':       [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,           10,             6, 'texture-compression-astc', 'astc-10x6-unorm'],\n  'astc-10x6-unorm-srgb':  [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,           10,             6, 'texture-compression-astc', 'astc-10x6-unorm'],\n  'astc-10x8-unorm':       [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,           10,             8, 'texture-compression-astc', 'astc-10x8-unorm'],\n  'astc-10x8-unorm-srgb':  [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,           10,             8, 'texture-compression-astc', 'astc-10x8-unorm'],\n  'astc-10x10-unorm':      [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,           10,            10, 'texture-compression-astc', 'astc-10x10-unorm'],\n  'astc-10x10-unorm-srgb': [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,           10,            10, 'texture-compression-astc', 'astc-10x10-unorm'],\n  'astc-12x10-unorm':      [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,           12,            10, 'texture-compression-astc', 'astc-12x10-unorm'],\n  'astc-12x10-unorm-srgb': [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,           12,            10, 'texture-compression-astc', 'astc-12x10-unorm'],\n  'astc-12x12-unorm':      [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,           12,            12, 'texture-compression-astc', 'astc-12x12-unorm'],\n  'astc-12x12-unorm-srgb': [            ,              ,          ,        ,        ,          ,          ,          ,          ,      'float',              16,           12,            12, 'texture-compression-astc', 'astc-12x12-unorm'],\n} as const);\n\n// Definitions for use locally. To access the table entries, use `kTextureFormatInfo`.\n\n// MAINTENANCE_TODO: Consider generating the exports below programmatically by filtering the big list, instead\n// of using these local constants? Requires some type magic though.\n/* prettier-ignore */ const   kCompressedTextureFormatInfo = { ...kBCTextureFormatInfo, ...kETC2TextureFormatInfo, ...kASTCTextureFormatInfo } as const;\n/* prettier-ignore */ const        kColorTextureFormatInfo = { ...kRegularTextureFormatInfo, ...kCompressedTextureFormatInfo } as const;\n/* prettier-ignore */ const    kEncodableTextureFormatInfo = { ...kRegularTextureFormatInfo, ...kSizedDepthStencilFormatInfo } as const;\n/* prettier-ignore */ const        kSizedTextureFormatInfo = { ...kRegularTextureFormatInfo, ...kSizedDepthStencilFormatInfo, ...kCompressedTextureFormatInfo } as const;\n/* prettier-ignore */ const        kDepthStencilFormatInfo = { ...kSizedDepthStencilFormatInfo, ...kUnsizedDepthStencilFormatInfo } as const;\n/* prettier-ignore */ const kUncompressedTextureFormatInfo = { ...kRegularTextureFormatInfo, ...kSizedDepthStencilFormatInfo, ...kUnsizedDepthStencilFormatInfo } as const;\n/* prettier-ignore */ const          kAllTextureFormatInfo = { ...kUncompressedTextureFormatInfo, ...kCompressedTextureFormatInfo } as const;\n\n/** A \"regular\" texture format (uncompressed, sized, single-plane color formats). */\n/* prettier-ignore */ export type      RegularTextureFormat = keyof typeof kRegularTextureFormatInfo;\n/** A sized depth/stencil texture format. */\n/* prettier-ignore */ export type   SizedDepthStencilFormat = keyof typeof kSizedDepthStencilFormatInfo;\n/** An unsized depth/stencil texture format. */\n/* prettier-ignore */ export type UnsizedDepthStencilFormat = keyof typeof kUnsizedDepthStencilFormatInfo;\n/** A compressed (block) texture format. */\n/* prettier-ignore */ export type   CompressedTextureFormat = keyof typeof kCompressedTextureFormatInfo;\n\n/** A color texture format (regular | compressed). */\n/* prettier-ignore */ export type        ColorTextureFormat = keyof typeof kColorTextureFormatInfo;\n/** An encodable texture format (regular | sized depth/stencil). */\n/* prettier-ignore */ export type    EncodableTextureFormat = keyof typeof kEncodableTextureFormatInfo;\n/** A sized texture format (regular | sized depth/stencil | compressed). */\n/* prettier-ignore */ export type        SizedTextureFormat = keyof typeof kSizedTextureFormatInfo;\n/** A depth/stencil format (sized | unsized). */\n/* prettier-ignore */ export type        DepthStencilFormat = keyof typeof kDepthStencilFormatInfo;\n/** An uncompressed (block size 1x1) format (regular | depth/stencil). */\n/* prettier-ignore */ export type UncompressedTextureFormat = keyof typeof kUncompressedTextureFormatInfo;\n\n/* prettier-ignore */ export const      kRegularTextureFormats: readonly      RegularTextureFormat[] = keysOf(     kRegularTextureFormatInfo);\n/* prettier-ignore */ export const   kSizedDepthStencilFormats: readonly   SizedDepthStencilFormat[] = keysOf(  kSizedDepthStencilFormatInfo);\n/* prettier-ignore */ export const kUnsizedDepthStencilFormats: readonly UnsizedDepthStencilFormat[] = keysOf(kUnsizedDepthStencilFormatInfo);\n/* prettier-ignore */ export const   kCompressedTextureFormats: readonly   CompressedTextureFormat[] = keysOf(  kCompressedTextureFormatInfo);\n\n/* prettier-ignore */ export const        kColorTextureFormats: readonly        ColorTextureFormat[] = keysOf(       kColorTextureFormatInfo);\n/* prettier-ignore */ export const    kEncodableTextureFormats: readonly    EncodableTextureFormat[] = keysOf(   kEncodableTextureFormatInfo);\n/* prettier-ignore */ export const        kSizedTextureFormats: readonly        SizedTextureFormat[] = keysOf(       kSizedTextureFormatInfo);\n/* prettier-ignore */ export const        kDepthStencilFormats: readonly        DepthStencilFormat[] = keysOf(       kDepthStencilFormatInfo);\n/* prettier-ignore */ export const kUncompressedTextureFormats: readonly UncompressedTextureFormat[] = keysOf(kUncompressedTextureFormatInfo);\n/* prettier-ignore */ export const          kAllTextureFormats: readonly          GPUTextureFormat[] = keysOf(         kAllTextureFormatInfo);\n\n// CompressedTextureFormat are unrenderable so filter from RegularTextureFormats for color targets is enough\nexport const kRenderableColorTextureFormats = kRegularTextureFormats.filter(\n  v => kColorTextureFormatInfo[v].renderable\n);\n\n// The formats of GPUTextureFormat for canvas context.\nexport const kCanvasTextureFormats = ['bgra8unorm', 'rgba8unorm', 'rgba16float'] as const;\n\n/** Per-GPUTextureFormat info. */\n// Exists just for documentation. Otherwise could be inferred by `makeTable`.\n// MAINTENANCE_TODO: Refactor this to separate per-aspect data for multi-aspect formats. In particular:\n// - bytesPerBlock only makes sense on a per-aspect basis. But this table can't express that.\n//   So we put depth24unorm-stencil8 and depth32float-stencil8 to be unsized formats for now.\nexport type TextureFormatInfo = {\n  /** Whether the format can be used as `RENDER_ATTACHMENT`. */\n  renderable: boolean;\n  /** Whether the format can be used in a multisample texture. */\n  multisample: boolean;\n  /** Whether the texture with the format can be used as a resolve target. */\n  resolve: boolean;\n  /** Whether the format has a color aspect. */\n  color: boolean;\n  /** Whether the format has a depth aspect. */\n  depth: boolean;\n  /** Whether the format has a stencil aspect. */\n  stencil: boolean;\n  /** Whether the format can be used as `STORAGE`. */\n  storage: boolean;\n  /** Whether the format can be used as `COPY_SRC`. */\n  copySrc: boolean;\n  /** Whether the format can be used as `COPY_DST`. */\n  copyDst: boolean;\n  /** Byte size of one texel block, or `undefined` if the format is unsized. */\n  bytesPerBlock: number | undefined;\n  /** Width, in texels, of one texel block. */\n  blockWidth: number;\n  /** Height, in texels, of one texel block. */\n  blockHeight: number;\n  /** Optional feature required to use this format, or `undefined` if none. */\n  feature: GPUFeatureName | undefined;\n  // Add fields as needed\n};\n/** Per-GPUTextureFormat info. */\nexport const kTextureFormatInfo: {\n  readonly [k in GPUTextureFormat]: TextureFormatInfo &\n    // TextureFormatInfo exists just for documentation (and verification of the table data types).\n    // The next line constrains the types so that accessing kTextureFormatInfo with\n    // a subtype of GPUTextureFormat actually returns nicely a constrained info type\n    // (e.g. with `bytesPerBlock: number` instead of `bytesPerBlock: number | undefined`).\n    typeof kAllTextureFormatInfo[k];\n} = kAllTextureFormatInfo;\n/** List of all GPUTextureFormat values. */\n/* prettier-ignore */ export const kTextureFormats: readonly GPUTextureFormat[] = keysOf(kAllTextureFormatInfo);\n\n/** Valid GPUTextureFormats for `copyExternalImageToTexture`, by spec. */\nexport const kValidTextureFormatsForCopyE2T = [\n  'r8unorm',\n  'r16float',\n  'r32float',\n  'rg8unorm',\n  'rg16float',\n  'rg32float',\n  'rgba8unorm',\n  'rgba8unorm-srgb',\n  'bgra8unorm',\n  'bgra8unorm-srgb',\n  'rgb10a2unorm',\n  'rgba16float',\n  'rgba32float',\n] as const;\n\n/** Per-GPUTextureDimension info. */\nexport const kTextureDimensionInfo: {\n  readonly [k in GPUTextureDimension]: {};\n} = /* prettier-ignore */ {\n  '1d': {},\n  '2d': {},\n  '3d': {},\n};\n/** List of all GPUTextureDimension values. */\nexport const kTextureDimensions = keysOf(kTextureDimensionInfo);\n\n/** Per-GPUTextureAspect info. */\nexport const kTextureAspectInfo: {\n  readonly [k in GPUTextureAspect]: {};\n} = /* prettier-ignore */ {\n  'all': {},\n  'depth-only': {},\n  'stencil-only': {},\n};\n/** List of all GPUTextureAspect values. */\nexport const kTextureAspects = keysOf(kTextureAspectInfo);\n\n/** Per-GPUCompareFunction info. */\nexport const kCompareFunctionInfo: {\n  readonly [k in GPUCompareFunction]: {};\n} = /* prettier-ignore */ {\n  'never': {},\n  'less': {},\n  'equal': {},\n  'less-equal': {},\n  'greater': {},\n  'not-equal': {},\n  'greater-equal': {},\n  'always': {},\n};\n/** List of all GPUCompareFunction values. */\nexport const kCompareFunctions = keysOf(kCompareFunctionInfo);\n\n/** Per-GPUStencilOperation info. */\nexport const kStencilOperationInfo: {\n  readonly [k in GPUStencilOperation]: {};\n} = /* prettier-ignore */ {\n  'keep': {},\n  'zero': {},\n  'replace': {},\n  'invert': {},\n  'increment-clamp': {},\n  'decrement-clamp': {},\n  'increment-wrap': {},\n  'decrement-wrap': {},\n};\n/** List of all GPUStencilOperation values. */\nexport const kStencilOperations = keysOf(kStencilOperationInfo);\n\nconst kDepthStencilFormatCapabilityInBufferTextureCopy = {\n  // kUnsizedDepthStencilFormats\n  depth24plus: {\n    CopyB2T: [],\n    CopyT2B: [],\n    texelAspectSize: { 'depth-only': -1, 'stencil-only': -1 },\n  },\n  'depth24plus-stencil8': {\n    CopyB2T: ['stencil-only'],\n    CopyT2B: ['stencil-only'],\n    texelAspectSize: { 'depth-only': -1, 'stencil-only': 1 },\n  },\n\n  // kSizedDepthStencilFormats\n  depth16unorm: {\n    CopyB2T: ['all', 'depth-only'],\n    CopyT2B: ['all', 'depth-only'],\n    texelAspectSize: { 'depth-only': 2, 'stencil-only': -1 },\n  },\n  depth32float: {\n    CopyB2T: [],\n    CopyT2B: ['all', 'depth-only'],\n    texelAspectSize: { 'depth-only': 4, 'stencil-only': -1 },\n  },\n  'depth24unorm-stencil8': {\n    CopyB2T: ['stencil-only'],\n    CopyT2B: ['stencil-only'],\n    texelAspectSize: { 'depth-only': -1, 'stencil-only': 1 },\n  },\n  'depth32float-stencil8': {\n    CopyB2T: ['stencil-only'],\n    CopyT2B: ['depth-only', 'stencil-only'],\n    texelAspectSize: { 'depth-only': 4, 'stencil-only': 1 },\n  },\n  stencil8: {\n    CopyB2T: ['all', 'stencil-only'],\n    CopyT2B: ['all', 'stencil-only'],\n    texelAspectSize: { 'depth-only': -1, 'stencil-only': 1 },\n  },\n} as const;\n\n/**\n * Gets all copyable aspects for copies between texture and buffer for specified depth/stencil format and copy type, by spec.\n */\nexport function depthStencilFormatCopyableAspects(\n  type: ImageCopyType,\n  format: DepthStencilFormat\n): readonly GPUTextureAspect[] {\n  const appliedType = type === 'WriteTexture' ? 'CopyB2T' : type;\n  return kDepthStencilFormatCapabilityInBufferTextureCopy[format][appliedType];\n}\n\n/**\n * Computes whether a copy between a depth/stencil texture aspect and a buffer is supported, by spec.\n */\nexport function depthStencilBufferTextureCopySupported(\n  type: ImageCopyType,\n  format: DepthStencilFormat,\n  aspect: GPUTextureAspect\n): boolean {\n  const supportedAspects: readonly GPUTextureAspect[] = depthStencilFormatCopyableAspects(\n    type,\n    format\n  );\n  return supportedAspects.includes(aspect);\n}\n\n/**\n * Returns the byte size of the depth or stencil aspect of the specified depth/stencil format,\n * or -1 if none.\n */\nexport function depthStencilFormatAspectSize(\n  format: DepthStencilFormat,\n  aspect: 'depth-only' | 'stencil-only'\n) {\n  const texelAspectSize =\n    kDepthStencilFormatCapabilityInBufferTextureCopy[format].texelAspectSize[aspect];\n  assert(texelAspectSize > 0);\n  return texelAspectSize;\n}\n\n/**\n * Returns true iff a texture can be created with the provided GPUTextureDimension\n * (defaulting to 2d) and GPUTextureFormat, by spec.\n */\nexport function textureDimensionAndFormatCompatible(\n  dimension: undefined | GPUTextureDimension,\n  format: GPUTextureFormat\n): boolean {\n  const info = kAllTextureFormatInfo[format];\n  return !(\n    (dimension === '1d' || dimension === '3d') &&\n    (info.blockWidth > 1 || info.depth || info.stencil)\n  );\n}\n\n/** Per-GPUTextureUsage info. */\nexport const kTextureUsageInfo: {\n  readonly [k in valueof<typeof GPUConst.TextureUsage>]: {};\n} = {\n  [GPUConst.TextureUsage.COPY_SRC]: {},\n  [GPUConst.TextureUsage.COPY_DST]: {},\n  [GPUConst.TextureUsage.TEXTURE_BINDING]: {},\n  [GPUConst.TextureUsage.STORAGE_BINDING]: {},\n  [GPUConst.TextureUsage.RENDER_ATTACHMENT]: {},\n};\n/** List of all GPUTextureUsage values. */\nexport const kTextureUsages = numericKeysOf<GPUTextureUsageFlags>(kTextureUsageInfo);\n\n// Texture View\n\n/** Per-GPUTextureViewDimension info. */\nexport type TextureViewDimensionInfo = {\n  /** Whether a storage texture view can have this view dimension. */\n  readonly storage: boolean;\n  // Add fields as needed\n};\n/** Per-GPUTextureViewDimension info. */\nexport const kTextureViewDimensionInfo: {\n  readonly [k in GPUTextureViewDimension]: TextureViewDimensionInfo;\n} = /* prettier-ignore */ {\n  '1d':         { storage: true  },\n  '2d':         { storage: true  },\n  '2d-array':   { storage: true  },\n  'cube':       { storage: false },\n  'cube-array': { storage: false },\n  '3d':         { storage: true  },\n};\n/** List of all GPUTextureDimension values. */\nexport const kTextureViewDimensions = keysOf(kTextureViewDimensionInfo);\n\n// Vertex formats\n\n/** Per-GPUVertexFormat info. */\n// Exists just for documentation. Otherwise could be inferred by `makeTable`.\nexport type VertexFormatInfo = {\n  /** Number of bytes in each component. */\n  readonly bytesPerComponent: 1 | 2 | 4;\n  /** The data encoding (float, normalized, or integer) for each component. */\n  readonly type: 'float' | 'unorm' | 'snorm' | 'uint' | 'sint';\n  /** Number of components. */\n  readonly componentCount: 1 | 2 | 3 | 4;\n  /** The completely matching WGSL type for vertex format */\n  readonly wgslType:\n    | 'f32'\n    | 'vec2<f32>'\n    | 'vec3<f32>'\n    | 'vec4<f32>'\n    | 'u32'\n    | 'vec2<u32>'\n    | 'vec3<u32>'\n    | 'vec4<u32>'\n    | 'i32'\n    | 'vec2<i32>'\n    | 'vec3<i32>'\n    | 'vec4<i32>';\n  // Add fields as needed\n};\n/** Per-GPUVertexFormat info. */\nexport const kVertexFormatInfo: {\n  readonly [k in GPUVertexFormat]: VertexFormatInfo;\n} = /* prettier-ignore */ makeTable(\n               ['bytesPerComponent',  'type', 'componentCount',  'wgslType'] as const,\n               [                   ,        ,                 ,            ] as const, {\n  // 8 bit components\n  'uint8x2':   [                  1,  'uint',                2, 'vec2<u32>'],\n  'uint8x4':   [                  1,  'uint',                4, 'vec4<u32>'],\n  'sint8x2':   [                  1,  'sint',                2, 'vec2<i32>'],\n  'sint8x4':   [                  1,  'sint',                4, 'vec4<i32>'],\n  'unorm8x2':  [                  1, 'unorm',                2, 'vec2<f32>'],\n  'unorm8x4':  [                  1, 'unorm',                4, 'vec4<f32>'],\n  'snorm8x2':  [                  1, 'snorm',                2, 'vec2<f32>'],\n  'snorm8x4':  [                  1, 'snorm',                4, 'vec4<f32>'],\n  // 16 bit components\n  'uint16x2':  [                  2,  'uint',                2, 'vec2<u32>'],\n  'uint16x4':  [                  2,  'uint',                4, 'vec4<u32>'],\n  'sint16x2':  [                  2,  'sint',                2, 'vec2<i32>'],\n  'sint16x4':  [                  2,  'sint',                4, 'vec4<i32>'],\n  'unorm16x2': [                  2, 'unorm',                2, 'vec2<f32>'],\n  'unorm16x4': [                  2, 'unorm',                4, 'vec4<f32>'],\n  'snorm16x2': [                  2, 'snorm',                2, 'vec2<f32>'],\n  'snorm16x4': [                  2, 'snorm',                4, 'vec4<f32>'],\n  'float16x2': [                  2, 'float',                2, 'vec2<f32>'],\n  'float16x4': [                  2, 'float',                4, 'vec4<f32>'],\n  // 32 bit components\n  'float32':   [                  4, 'float',                1,       'f32'],\n  'float32x2': [                  4, 'float',                2, 'vec2<f32>'],\n  'float32x3': [                  4, 'float',                3, 'vec3<f32>'],\n  'float32x4': [                  4, 'float',                4, 'vec4<f32>'],\n  'uint32':    [                  4,  'uint',                1,       'u32'],\n  'uint32x2':  [                  4,  'uint',                2, 'vec2<u32>'],\n  'uint32x3':  [                  4,  'uint',                3, 'vec3<u32>'],\n  'uint32x4':  [                  4,  'uint',                4, 'vec4<u32>'],\n  'sint32':    [                  4,  'sint',                1,       'i32'],\n  'sint32x2':  [                  4,  'sint',                2, 'vec2<i32>'],\n  'sint32x3':  [                  4,  'sint',                3, 'vec3<i32>'],\n  'sint32x4':  [                  4,  'sint',                4, 'vec4<i32>']\n} as const);\n/** List of all GPUVertexFormat values. */\nexport const kVertexFormats = keysOf(kVertexFormatInfo);\n\n// Typedefs for bindings\n\n/**\n * Classes of `PerShaderStage` binding limits. Two bindings with the same class\n * count toward the same `PerShaderStage` limit(s) in the spec (if any).\n */\nexport type PerStageBindingLimitClass =\n  | 'uniformBuf'\n  | 'storageBuf'\n  | 'sampler'\n  | 'sampledTex'\n  | 'storageTex';\n/**\n * Classes of `PerPipelineLayout` binding limits. Two bindings with the same class\n * count toward the same `PerPipelineLayout` limit(s) in the spec (if any).\n */\nexport type PerPipelineBindingLimitClass = PerStageBindingLimitClass;\n\nexport type ValidBindableResource =\n  | 'uniformBuf'\n  | 'storageBuf'\n  | 'filtSamp'\n  | 'nonFiltSamp'\n  | 'compareSamp'\n  | 'sampledTex'\n  | 'sampledTexMS'\n  | 'storageTex';\ntype ErrorBindableResource = 'errorBuf' | 'errorSamp' | 'errorTex';\n\n/**\n * Types of resource binding which have distinct binding rules, by spec\n * (e.g. filtering vs non-filtering sampler, multisample vs non-multisample texture).\n */\nexport type BindableResource = ValidBindableResource | ErrorBindableResource;\nexport const kBindableResources = [\n  'uniformBuf',\n  'storageBuf',\n  'filtSamp',\n  'nonFiltSamp',\n  'compareSamp',\n  'sampledTex',\n  'sampledTexMS',\n  'storageTex',\n  'errorBuf',\n  'errorSamp',\n  'errorTex',\n] as const;\nassertTypeTrue<TypeEqual<BindableResource, typeof kBindableResources[number]>>();\n\n// Bindings\n\n/** Dynamic buffer offsets require offset to be divisible by 256, by spec. */\nexport const kMinDynamicBufferOffsetAlignment = 256;\n\n/** Maximum number of bindings per GPUBindGroup(Layout), by spec. */\nexport const kMaxBindingsPerBindGroup = 16;\n\n/** Default `PerShaderStage` binding limits, by spec. */\nexport const kPerStageBindingLimits: {\n  readonly [k in PerStageBindingLimitClass]: {\n    /** Which `PerShaderStage` binding limit class. */\n    readonly class: k;\n    /** Maximum number of allowed bindings in that class. */\n    readonly max: number;\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  'uniformBuf': { class: 'uniformBuf', max: 12, },\n  'storageBuf': { class: 'storageBuf', max:  8, },\n  'sampler':    { class: 'sampler',    max: 16, },\n  'sampledTex': { class: 'sampledTex', max: 16, },\n  'storageTex': { class: 'storageTex', max:  4, },\n};\n\n/**\n * Default `PerPipelineLayout` binding limits, by spec.\n */\nexport const kPerPipelineBindingLimits: {\n  readonly [k in PerPipelineBindingLimitClass]: {\n    /** Which `PerPipelineLayout` binding limit class. */\n    readonly class: k;\n    /** Maximum number of allowed bindings with `hasDynamicOffset: true` in that class. */\n    readonly maxDynamic: number;\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  'uniformBuf': { class: 'uniformBuf', maxDynamic: 8, },\n  'storageBuf': { class: 'storageBuf', maxDynamic: 4, },\n  'sampler':    { class: 'sampler',    maxDynamic: 0, },\n  'sampledTex': { class: 'sampledTex', maxDynamic: 0, },\n  'storageTex': { class: 'storageTex', maxDynamic: 0, },\n};\n\ninterface BindingKindInfo {\n  readonly resource: ValidBindableResource;\n  readonly perStageLimitClass: typeof kPerStageBindingLimits[PerStageBindingLimitClass];\n  readonly perPipelineLimitClass: typeof kPerPipelineBindingLimits[PerPipelineBindingLimitClass];\n  // Add fields as needed\n}\n\nconst kBindingKind: {\n  readonly [k in ValidBindableResource]: BindingKindInfo;\n} = /* prettier-ignore */ {\n  uniformBuf:   { resource: 'uniformBuf',   perStageLimitClass: kPerStageBindingLimits.uniformBuf, perPipelineLimitClass: kPerPipelineBindingLimits.uniformBuf, },\n  storageBuf:   { resource: 'storageBuf',   perStageLimitClass: kPerStageBindingLimits.storageBuf, perPipelineLimitClass: kPerPipelineBindingLimits.storageBuf, },\n  filtSamp:     { resource: 'filtSamp',     perStageLimitClass: kPerStageBindingLimits.sampler,    perPipelineLimitClass: kPerPipelineBindingLimits.sampler,    },\n  nonFiltSamp:  { resource: 'nonFiltSamp',  perStageLimitClass: kPerStageBindingLimits.sampler,    perPipelineLimitClass: kPerPipelineBindingLimits.sampler,    },\n  compareSamp:  { resource: 'compareSamp',  perStageLimitClass: kPerStageBindingLimits.sampler,    perPipelineLimitClass: kPerPipelineBindingLimits.sampler,    },\n  sampledTex:   { resource: 'sampledTex',   perStageLimitClass: kPerStageBindingLimits.sampledTex, perPipelineLimitClass: kPerPipelineBindingLimits.sampledTex, },\n  sampledTexMS: { resource: 'sampledTexMS', perStageLimitClass: kPerStageBindingLimits.sampledTex, perPipelineLimitClass: kPerPipelineBindingLimits.sampledTex, },\n  storageTex:   { resource: 'storageTex',   perStageLimitClass: kPerStageBindingLimits.storageTex, perPipelineLimitClass: kPerPipelineBindingLimits.storageTex, },\n};\n\n// Binding type info\n\nconst kValidStagesAll = {\n  validStages:\n    GPUConst.ShaderStage.VERTEX | GPUConst.ShaderStage.FRAGMENT | GPUConst.ShaderStage.COMPUTE,\n} as const;\nconst kValidStagesStorageWrite = {\n  validStages: GPUConst.ShaderStage.FRAGMENT | GPUConst.ShaderStage.COMPUTE,\n} as const;\n\n/** Binding type info (including class limits) for the specified GPUBufferBindingLayout. */\nexport function bufferBindingTypeInfo(d: GPUBufferBindingLayout) {\n  /* prettier-ignore */\n  switch (d.type ?? 'uniform') {\n    case 'uniform':           return { usage: GPUConst.BufferUsage.UNIFORM, ...kBindingKind.uniformBuf,  ...kValidStagesAll,          };\n    case 'storage':           return { usage: GPUConst.BufferUsage.STORAGE, ...kBindingKind.storageBuf,  ...kValidStagesStorageWrite, };\n    case 'read-only-storage': return { usage: GPUConst.BufferUsage.STORAGE, ...kBindingKind.storageBuf,  ...kValidStagesAll,          };\n  }\n}\n/** List of all GPUBufferBindingType values. */\nexport const kBufferBindingTypes = ['uniform', 'storage', 'read-only-storage'] as const;\nassertTypeTrue<TypeEqual<GPUBufferBindingType, typeof kBufferBindingTypes[number]>>();\n\n/** Binding type info (including class limits) for the specified GPUSamplerBindingLayout. */\nexport function samplerBindingTypeInfo(d: GPUSamplerBindingLayout) {\n  /* prettier-ignore */\n  switch (d.type ?? 'filtering') {\n    case 'filtering':     return { ...kBindingKind.filtSamp,    ...kValidStagesAll, };\n    case 'non-filtering': return { ...kBindingKind.nonFiltSamp, ...kValidStagesAll, };\n    case 'comparison':    return { ...kBindingKind.compareSamp, ...kValidStagesAll, };\n  }\n}\n/** List of all GPUSamplerBindingType values. */\nexport const kSamplerBindingTypes = ['filtering', 'non-filtering', 'comparison'] as const;\nassertTypeTrue<TypeEqual<GPUSamplerBindingType, typeof kSamplerBindingTypes[number]>>();\n\n/** Binding type info (including class limits) for the specified GPUTextureBindingLayout. */\nexport function sampledTextureBindingTypeInfo(d: GPUTextureBindingLayout) {\n  /* prettier-ignore */\n  if (d.multisampled) {\n    return { usage: GPUConst.TextureUsage.TEXTURE_BINDING, ...kBindingKind.sampledTexMS, ...kValidStagesAll, };\n  } else {\n    return { usage: GPUConst.TextureUsage.TEXTURE_BINDING, ...kBindingKind.sampledTex,   ...kValidStagesAll, };\n  }\n}\n/** List of all GPUTextureSampleType values. */\nexport const kTextureSampleTypes = [\n  'float',\n  'unfilterable-float',\n  'depth',\n  'sint',\n  'uint',\n] as const;\nassertTypeTrue<TypeEqual<GPUTextureSampleType, typeof kTextureSampleTypes[number]>>();\n\n/** Binding type info (including class limits) for the specified GPUStorageTextureBindingLayout. */\nexport function storageTextureBindingTypeInfo(d: GPUStorageTextureBindingLayout) {\n  return {\n    usage: GPUConst.TextureUsage.STORAGE_BINDING,\n    ...kBindingKind.storageTex,\n    ...kValidStagesStorageWrite,\n  };\n}\n/** List of all GPUStorageTextureAccess values. */\nexport const kStorageTextureAccessValues = ['write-only'] as const;\nassertTypeTrue<TypeEqual<GPUStorageTextureAccess, typeof kStorageTextureAccessValues[number]>>();\n\n/** GPUBindGroupLayoutEntry, but only the \"union\" fields, not the common fields. */\nexport type BGLEntry = Omit<GPUBindGroupLayoutEntry, 'binding' | 'visibility'>;\n/** Binding type info (including class limits) for the specified BGLEntry. */\nexport function texBindingTypeInfo(e: BGLEntry) {\n  if (e.texture !== undefined) return sampledTextureBindingTypeInfo(e.texture);\n  if (e.storageTexture !== undefined) return storageTextureBindingTypeInfo(e.storageTexture);\n  unreachable();\n}\n/** BindingTypeInfo (including class limits) for the specified BGLEntry. */\nexport function bindingTypeInfo(e: BGLEntry) {\n  if (e.buffer !== undefined) return bufferBindingTypeInfo(e.buffer);\n  if (e.texture !== undefined) return sampledTextureBindingTypeInfo(e.texture);\n  if (e.sampler !== undefined) return samplerBindingTypeInfo(e.sampler);\n  if (e.storageTexture !== undefined) return storageTextureBindingTypeInfo(e.storageTexture);\n  unreachable('GPUBindGroupLayoutEntry has no BindingLayout');\n}\n\n/**\n * Generate a list of possible buffer-typed BGLEntry values.\n *\n * Note: Generates different `type` options, but not `hasDynamicOffset` options.\n */\nexport function bufferBindingEntries(includeUndefined: boolean): readonly BGLEntry[] {\n  return [\n    ...(includeUndefined ? [{ buffer: { type: undefined } }] : []),\n    { buffer: { type: 'uniform' } },\n    { buffer: { type: 'storage' } },\n    { buffer: { type: 'read-only-storage' } },\n  ] as const;\n}\n/** Generate a list of possible sampler-typed BGLEntry values. */\nexport function samplerBindingEntries(includeUndefined: boolean): readonly BGLEntry[] {\n  return [\n    ...(includeUndefined ? [{ sampler: { type: undefined } }] : []),\n    { sampler: { type: 'comparison' } },\n    { sampler: { type: 'filtering' } },\n    { sampler: { type: 'non-filtering' } },\n  ] as const;\n}\n/**\n * Generate a list of possible texture-typed BGLEntry values.\n *\n * Note: Generates different `multisampled` options, but not `sampleType` or `viewDimension` options.\n */\nexport function textureBindingEntries(includeUndefined: boolean): readonly BGLEntry[] {\n  return [\n    ...(includeUndefined ? [{ texture: { multisampled: undefined } }] : []),\n    { texture: { multisampled: false } },\n    { texture: { multisampled: true } },\n  ] as const;\n}\n/**\n * Generate a list of possible storageTexture-typed BGLEntry values.\n *\n * Note: Generates different `access` options, but not `format` or `viewDimension` options.\n */\nexport function storageTextureBindingEntries(format: GPUTextureFormat): readonly BGLEntry[] {\n  return [{ storageTexture: { access: 'write-only', format } }] as const;\n}\n/** Generate a list of possible texture-or-storageTexture-typed BGLEntry values. */\nexport function sampledAndStorageBindingEntries(\n  includeUndefined: boolean,\n  storageTextureFormat: GPUTextureFormat = 'rgba8unorm'\n): readonly BGLEntry[] {\n  return [\n    ...textureBindingEntries(includeUndefined),\n    ...storageTextureBindingEntries(storageTextureFormat),\n  ] as const;\n}\n/**\n * Generate a list of possible BGLEntry values of every type, but not variants with different:\n * - buffer.hasDynamicOffset\n * - texture.sampleType\n * - texture.viewDimension\n * - storageTexture.viewDimension\n */\nexport function allBindingEntries(\n  includeUndefined: boolean,\n  storageTextureFormat: GPUTextureFormat = 'rgba8unorm'\n): readonly BGLEntry[] {\n  return [\n    ...bufferBindingEntries(includeUndefined),\n    ...samplerBindingEntries(includeUndefined),\n    ...sampledAndStorageBindingEntries(includeUndefined, storageTextureFormat),\n  ] as const;\n}\n\n// Shader stages\n\n/** List of all GPUShaderStage values. */\nexport const kShaderStages: readonly GPUShaderStageFlags[] = [\n  GPUConst.ShaderStage.VERTEX,\n  GPUConst.ShaderStage.FRAGMENT,\n  GPUConst.ShaderStage.COMPUTE,\n];\n/** List of all possible combinations of GPUShaderStage values. */\nexport const kShaderStageCombinations: readonly GPUShaderStageFlags[] = [0, 1, 2, 3, 4, 5, 6, 7];\n\n/**\n * List of all possible texture sampleCount values.\n *\n * MAINTENANCE_TODO: Switch existing tests to use kTextureSampleCounts\n */\nexport const kTextureSampleCounts = [1, 4] as const;\n\n// Blend factors and Blend components\n\n/** List of all GPUBlendFactor values. */\nexport const kBlendFactors: readonly GPUBlendFactor[] = [\n  'zero',\n  'one',\n  'src',\n  'one-minus-src',\n  'src-alpha',\n  'one-minus-src-alpha',\n  'dst',\n  'one-minus-dst',\n  'dst-alpha',\n  'one-minus-dst-alpha',\n  'src-alpha-saturated',\n  'constant',\n  'one-minus-constant',\n];\n\n/** List of all GPUBlendOperation values. */\nexport const kBlendOperations: readonly GPUBlendOperation[] = [\n  'add', //\n  'subtract',\n  'reverse-subtract',\n  'min',\n  'max',\n];\n\n// Pipeline limits\n\n/** Maximum number of color attachments to a render pass, by spec. */\nexport const kMaxColorAttachments = 8;\n/** `maxVertexBuffers` per GPURenderPipeline, by spec. */\nexport const kMaxVertexBuffers = 8;\n/** `maxVertexAttributes` per GPURenderPipeline, by spec. */\nexport const kMaxVertexAttributes = 16;\n/** `maxVertexBufferArrayStride` in a vertex buffer in a GPURenderPipeline, by spec. */\nexport const kMaxVertexBufferArrayStride = 2048;\n\n/** The size of indirect draw parameters in the indirectBuffer of drawIndirect */\nexport const kDrawIndirectParametersSize = 4;\n/** The size of indirect drawIndexed parameters in the indirectBuffer of drawIndexedIndirect */\nexport const kDrawIndexedIndirectParametersSize = 5;\n"],"file":"capability_info.js"}