{"version":3,"sources":["../../../src/webgpu/idl/idl_test.ts"],"names":["Fixture","getGPU","assert","IDLTest","init","assertMember","act","exp","key","assertMemberCount","expKeys","Object","keys","actKeys","length"],"mappings":";AAAA;AACA,GADA,SAASA,OAAT,QAAwB,mCAAxB,CACA,SAASC,MAAT,QAAuB,oCAAvB,CACA,SAASC,MAAT,QAAuB,2BAAvB;;;;;;AAMA;AACA;AACA;AACA,OAAO,MAAMC,OAAN,SAAsBH,OAAtB,CAA8B;AACnC,QAAMI,IAAN,GAA4B;AAC1B;AACAH,IAAAA,MAAM;AACP;;AAED;AACF;AACA;AACEI,EAAAA,YAAY,CAACC,GAAD,EAAqBC,GAArB,EAAyCC,GAAzC,EAAsD;AAChEN,IAAAA,MAAM,CAACM,GAAG,IAAIF,GAAR,EAAa,MAAO,gBAAeE,GAAI,UAAvC,CAAN;AACAN,IAAAA,MAAM,CAACI,GAAG,CAACE,GAAD,CAAH,KAAaD,GAAG,CAACC,GAAD,CAAjB,EAAwB,MAAO,aAAYA,GAAI,SAAQF,GAAG,CAACE,GAAD,CAAM,cAAaD,GAAG,CAACC,GAAD,CAAM,EAAtF,CAAN;AACD;;AAED;AACF;AACA;AACA;AACA;AACA;AACEC,EAAAA,iBAAiB,CAACH,GAAD,EAAqBC,GAArB,EAAyC;AACxD,UAAMG,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYL,GAAZ,CAAhB;AACA,UAAMM,OAAO,GAAGF,MAAM,CAACC,IAAP,CAAYN,GAAZ,CAAhB;AACAJ,IAAAA,MAAM;AACJW,IAAAA,OAAO,CAACC,MAAR,KAAmBJ,OAAO,CAACI,MADvB;AAEJ,UAAO,OAAMD,OAAO,CAACC,MAAO,mBAAkBJ,OAAO,CAACI,MAAO,EAFzD,CAAN;;AAID,GA3BkC","sourcesContent":["import { Fixture } from '../../common/framework/fixture.js';\nimport { getGPU } from '../../common/util/navigator_gpu.js';\nimport { assert } from '../../common/util/util.js';\n\ninterface UnknownObject {\n  [k: string]: unknown;\n}\n\n/**\n * Base fixture for testing the exposed interface is correct (without actually using WebGPU).\n */\nexport class IDLTest extends Fixture {\n  async init(): Promise<void> {\n    // Ensure the GPU provider is initialized\n    getGPU();\n  }\n\n  /**\n   * Asserts that a member of an IDL interface has the expected value.\n   */\n  assertMember(act: UnknownObject, exp: UnknownObject, key: string) {\n    assert(key in act, () => `Expected key ${key} missing`);\n    assert(act[key] === exp[key], () => `Value of [${key}] was ${act[key]}, expected ${exp[key]}`);\n  }\n\n  /**\n   * Asserts that an IDL interface has the same number of keys as the\n   *\n   * MAINTENANCE_TODO: add a way to check for the types of keys with unknown values, like methods and attributes\n   * MAINTENANCE_TODO: handle extensions\n   */\n  assertMemberCount(act: UnknownObject, exp: UnknownObject) {\n    const expKeys = Object.keys(exp);\n    const actKeys = Object.keys(act);\n    assert(\n      actKeys.length === expKeys.length,\n      () => `Had ${actKeys.length} keys, expected ${expKeys.length}`\n    );\n  }\n}\n"],"file":"idl_test.js"}