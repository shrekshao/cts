{"version":3,"sources":["../../../src/common/runtime/server.ts"],"names":["http","DefaultTestFileLoader","prettyPrintLog","Logger","parseQuery","Colors","setGPUProvider","sys","usage","rc","console","log","type","exit","existsSync","enabled","debug","gpuProviderModule","undefined","gpuProviderFlags","i","args","length","a","startsWith","modulePath","require","push","create","globalDebugMode","testcases","allWebGPUTestcases","webgpuQuery","loader","map","Map","testcase","loadCases","name","query","toString","set","runTestcase","expectations","rec","res","record","run","server","createServer","request","response","url","end","runPrefix","terminatePrefix","substr","get","result","message","logs","join","status","statusCode","JSON","stringify","err","close","listen","address","port","catch","ex","error","stack"],"mappings":"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","sourcesContent":["/* eslint no-console: \"off\" */\n\nimport * as http from 'http';\nimport { AddressInfo } from 'net';\n\nimport { DefaultTestFileLoader } from '../internal/file_loader.js';\nimport { prettyPrintLog } from '../internal/logging/log_message.js';\nimport { Logger } from '../internal/logging/logger.js';\nimport { LiveTestCaseResult } from '../internal/logging/result.js';\nimport { parseQuery } from '../internal/query/parseQuery.js';\nimport { TestQueryWithExpectation } from '../internal/query/query.js';\nimport { TestTreeLeaf } from '../internal/tree.js';\nimport { Colors } from '../util/colors.js';\nimport { setGPUProvider } from '../util/navigator_gpu.js';\n\nimport sys from './helper/sys.js';\n\nfunction usage(rc: number): never {\n  console.log('Usage:');\n  console.log(`  tools/run_${sys.type} [OPTIONS...]`);\n  console.log('Options:');\n  console.log('  --colors             Enable ANSI colors in output.');\n  console.log('  --verbose            Print result/log of every test as it runs.');\n  console.log('  --gpu-provider       Path to node module that provides the GPU implementation.');\n  console.log('  --gpu-provider-flag  Flag to set on the gpu-provider as <flag>=<value>');\n  console.log(``);\n  console.log(`Provides an HTTP server used for running tests via an HTTP RPC interface`);\n  console.log(`To run a test, perform an HTTP GET or POST at the URL:`);\n  console.log(`  http://localhost:port/run?<test-name>`);\n  console.log(`To shutdown the server perform an HTTP GET or POST at the URL:`);\n  console.log(`  http://localhost:port/terminate`);\n  return sys.exit(rc);\n}\n\ninterface RunResult {\n  status: string;\n  message: string;\n}\n\ninterface GPUProviderModule {\n  create(flags: string[]): GPU;\n}\n\nif (!sys.existsSync('src/common/runtime/cmdline.ts')) {\n  console.log('Must be run from repository root');\n  usage(1);\n}\n\nColors.enabled = false;\n\nlet debug = false;\nlet gpuProviderModule: GPUProviderModule | undefined = undefined;\n\nconst gpuProviderFlags: string[] = [];\nfor (let i = 0; i < sys.args.length; ++i) {\n  const a = sys.args[i];\n  if (a.startsWith('-')) {\n    if (a === '--colors') {\n      Colors.enabled = true;\n    } else if (a === '--gpu-provider') {\n      const modulePath = sys.args[++i];\n      gpuProviderModule = require(modulePath);\n    } else if (a === '--gpu-provider-flag') {\n      gpuProviderFlags.push(sys.args[++i]);\n    } else if (a === '--help') {\n      usage(1);\n    } else if (a === '--verbose') {\n      debug = true;\n    }\n  }\n}\n\nif (gpuProviderModule) {\n  setGPUProvider(() => gpuProviderModule!.create(gpuProviderFlags));\n}\n\n(async () => {\n  Logger.globalDebugMode = debug;\n  const log = new Logger();\n  const testcases = allWebGPUTestcases();\n\n  async function allWebGPUTestcases() {\n    const webgpuQuery = parseQuery('webgpu:*');\n    const loader = new DefaultTestFileLoader();\n    const map = new Map<string, TestTreeLeaf>();\n    for (const testcase of await loader.loadCases(webgpuQuery)) {\n      const name = testcase.query.toString();\n      map.set(name, testcase);\n    }\n    return map;\n  }\n\n  async function runTestcase(\n    testcase: TestTreeLeaf,\n    expectations: TestQueryWithExpectation[] = []\n  ): Promise<LiveTestCaseResult> {\n    const name = testcase.query.toString();\n    const [rec, res] = log.record(name);\n    await testcase.run(rec, expectations);\n    return res;\n  }\n\n  const server = http.createServer(\n    async (request: http.IncomingMessage, response: http.ServerResponse) => {\n      if (request.url === undefined) {\n        response.end('invalid url');\n        return;\n      }\n\n      const runPrefix = '/run?';\n      const terminatePrefix = '/terminate';\n\n      if (request.url.startsWith(runPrefix)) {\n        const name = request.url.substr(runPrefix.length);\n        try {\n          const testcase = (await testcases).get(name);\n          if (testcase) {\n            const result = await runTestcase(testcase);\n            let message = '';\n            if (result.logs !== undefined) {\n              message = result.logs.map(log => prettyPrintLog(log)).join('\\n');\n            }\n            const status = result.status;\n            const res: RunResult = { status, message };\n            response.statusCode = 200;\n            response.end(JSON.stringify(res));\n          } else {\n            response.statusCode = 404;\n            response.end(`test case '${name}' not found`);\n          }\n        } catch (err) {\n          response.statusCode = 500;\n          response.end(`run failed with error: ${err}`);\n        }\n      } else if (request.url.startsWith(terminatePrefix)) {\n        server.close();\n        sys.exit(1);\n      } else {\n        response.statusCode = 404;\n        response.end('unhandled url request');\n      }\n    }\n  );\n\n  server.listen(0, () => {\n    const address = server.address() as AddressInfo;\n    console.log(`Server listening at [[${address.port}]]`);\n  });\n})().catch(ex => {\n  console.error(ex.stack ?? ex.toString());\n  sys.exit(1);\n});\n"],"file":"server.js"}