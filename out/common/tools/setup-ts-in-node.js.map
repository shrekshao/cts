{"version":3,"sources":["../../../src/common/tools/setup-ts-in-node.js"],"names":["path","require","register","project","resolve","__dirname","compilerOptions","module","transpileOnly","Module","resolveFilename","_resolveFilename","request","parentModule","isMain","startsWith","filename","endsWith","Error","tsRequest","substring","length","call","ex","process","on"],"mappings":";AAAA;AACA,GADA,MAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB,C,CAEA;AACAA,OAAO,CAAC,SAAD,CAAP,CAAmBC,QAAnB,CAA4B;AAC1B;AACAC,EAAAA,OAAO,EAAEH,IAAI,CAACI,OAAL,CAAaC,SAAb,EAAwB,wBAAxB,CAFiB;AAG1BC,EAAAA,eAAe,EAAE;AACfC,IAAAA,MAAM,EAAE,UADO,EAHS;;AAM1BC,EAAAA,aAAa,EAAE,IANW,EAA5B;;AAQA,MAAMC,MAAM,GAAGR,OAAO,CAAC,QAAD,CAAtB;;AAEA;AACA,MAAMS,eAAe,GAAGD,MAAM,CAACE,gBAA/B;AACAF,MAAM,CAACE,gBAAP,GAA0B,CAACC,OAAD,EAAUC,YAAV,EAAwBC,MAAxB,KAAmC;AAC3D,KAAG;AACD,QAAIF,OAAO,CAACG,UAAR,CAAmB,GAAnB,KAA2BF,YAAY,CAACG,QAAb,CAAsBC,QAAtB,CAA+B,KAA/B,CAA/B,EAAsE;AACpE;AACA;AACA,UAAIL,OAAO,CAACK,QAAR,CAAiB,WAAjB,CAAJ,EAAmC;AACjC,cAAM,IAAIC,KAAJ;AACJ,kFAA0EN,OADtE,CAAN;;AAGD;;AAED;AACA,UAAIA,OAAO,CAACK,QAAR,CAAiB,OAAjB,CAAJ,EAA+B;AAC7B;AACD;;AAED,UAAI,CAACL,OAAO,CAACK,QAAR,CAAiB,KAAjB,CAAL,EAA8B;AAC5B,cAAM,IAAIC,KAAJ,CAAU,2CAA2CN,OAArD,CAAN;AACD;;AAED,UAAI;AACF,cAAMO,SAAS,GAAGP,OAAO,CAACQ,SAAR,CAAkB,CAAlB,EAAqBR,OAAO,CAACS,MAAR,GAAiB,MAAMA,MAA5C,IAAsD,KAAxE;AACA,eAAOX,eAAe,CAACY,IAAhB,CAAqB,IAArB,EAA2BH,SAA3B,EAAsCN,YAAtC,EAAoDC,MAApD,CAAP;AACD,OAHD,CAGE,OAAOS,EAAP,EAAW;AACX;AACA;AACD;AACF;AACF,GA3BD,QA2BS,CA3BT;;AA6BA,SAAOb,eAAe,CAACY,IAAhB,CAAqB,IAArB,EAA2BV,OAA3B,EAAoCC,YAApC,EAAkDC,MAAlD,CAAP;AACD,CA/BD;;AAiCAU,OAAO,CAACC,EAAR,CAAW,oBAAX,EAAiC,CAAAF,EAAE,KAAI;AACrC,QAAMA,EAAN;AACD,CAFD","sourcesContent":["const path = require('path');\n\n// Automatically transpile .ts imports\nrequire('ts-node').register({\n  // Specify the project file so ts-node doesn't try to find it itself based on the CWD.\n  project: path.resolve(__dirname, '../../../tsconfig.json'),\n  compilerOptions: {\n    module: 'commonjs',\n  },\n  transpileOnly: true,\n});\nconst Module = require('module');\n\n// Redirect imports of .js files to .ts files\nconst resolveFilename = Module._resolveFilename;\nModule._resolveFilename = (request, parentModule, isMain) => {\n  do {\n    if (request.startsWith('.') && parentModule.filename.endsWith('.ts')) {\n      // Required for browser (because it needs the actual correct file path and\n      // can't do any kind of file resolution).\n      if (request.endsWith('/index.js')) {\n        throw new Error(\n          \"Avoid the name `index.js`; we don't have Node-style path resolution: \" + request\n        );\n      }\n\n      // Import of Node addon modules are valid and should pass through.\n      if (request.endsWith('.node')) {\n        break;\n      }\n\n      if (!request.endsWith('.js')) {\n        throw new Error('All relative imports must end in .js: ' + request);\n      }\n\n      try {\n        const tsRequest = request.substring(0, request.length - '.js'.length) + '.ts';\n        return resolveFilename.call(this, tsRequest, parentModule, isMain);\n      } catch (ex) {\n        // If the .ts file doesn't exist, try .js instead.\n        break;\n      }\n    }\n  } while (0);\n\n  return resolveFilename.call(this, request, parentModule, isMain);\n};\n\nprocess.on('unhandledRejection', ex => {\n  throw ex;\n});\n"],"file":"setup-ts-in-node.js"}