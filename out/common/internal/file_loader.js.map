{"version":3,"sources":["../../../src/common/internal/file_loader.ts"],"names":["assert","parseQuery","loadTreeForQuery","TestFileLoader","EventTarget","importSpecFile","suite","path","url","join","dispatchEvent","MessageEvent","data","import","loadTree","query","subqueriesToExpand","tree","map","s","q","level","loadCases","iterateLeaves","DefaultTestFileLoader","listing"],"mappings":";AAAA;AACA,YAASA,MAAT,QAAuB,iBAAvB;AAEA,SAASC,UAAT,QAA2B,uBAA3B;;;AAGA,SAASC,gBAAT,QAAyD,WAAzD;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;AACA,OAAO,MAAeC,cAAf,SAAsCC,WAAtC,CAAkD;;;;AAIvDC,EAAAA,cAAc,CAACC,KAAD,EAAgBC,IAAhB,EAAmD;AAC/D,UAAMC,GAAG,GAAI,GAAEF,KAAM,IAAGC,IAAI,CAACE,IAAL,CAAU,GAAV,CAAe,UAAvC;AACA,SAAKC,aAAL;AACE,QAAIC,YAAJ,CAA6B,QAA7B,EAAuC,EAAEC,IAAI,EAAE,EAAEJ,GAAF,EAAR,EAAvC,CADF;;AAGA,WAAO,KAAKK,MAAL,CAAYL,GAAZ,CAAP;AACD;;AAEa,QAARM,QAAQ,CAACC,KAAD,EAAmBC,kBAA4B,GAAG,EAAlD,EAAyE;AACrF,UAAMC,IAAI,GAAG,MAAMf,gBAAgB;AACjC,QADiC;AAEjCa,IAAAA,KAFiC;AAGjCC,IAAAA,kBAAkB,CAACE,GAAnB,CAAuB,CAAAC,CAAC,KAAI;AAC1B,YAAMC,CAAC,GAAGnB,UAAU,CAACkB,CAAD,CAApB;AACAnB,MAAAA,MAAM,CAACoB,CAAC,CAACC,KAAF,IAAW,CAAZ,EAAe,MAAO,2DAA0DD,CAAE,EAAlF,CAAN;AACA,aAAOA,CAAP;AACD,KAJD,CAHiC,CAAnC;;AASA,SAAKV,aAAL,CAAmB,IAAIC,YAAJ,CAAuB,QAAvB,CAAnB;AACA,WAAOM,IAAP;AACD;;AAEc,QAATK,SAAS,CAACP,KAAD,EAA4D;AACzE,UAAME,IAAI,GAAG,MAAM,KAAKH,QAAL,CAAcC,KAAd,CAAnB;AACA,WAAOE,IAAI,CAACM,aAAL,EAAP;AACD,GA7BsD;;;AAgCzD,OAAO,MAAMC,qBAAN,SAAoCrB,cAApC,CAAmD;AAC3C,QAAPsB,OAAO,CAACnB,KAAD,EAA2C;AACtD,WAAO,CAAE,MAAM,OAAQ,SAAQA,KAAM,aAAtB,CAAR,EAA6DmB,OAApE;AACD;;AAEDZ,EAAAA,MAAM,CAACN,IAAD,EAAkC;AACtC,WAAO,OAAQ,SAAQA,IAAK,EAArB,CAAP;AACD,GAPuD","sourcesContent":["import { IterableTestGroup } from '../internal/test_group.js';\nimport { assert } from '../util/util.js';\n\nimport { parseQuery } from './query/parseQuery.js';\nimport { TestQuery } from './query/query.js';\nimport { TestSuiteListing } from './test_suite_listing.js';\nimport { loadTreeForQuery, TestTree, TestTreeLeaf } from './tree.js';\n\n// A listing file, e.g. either of:\n// - `src/webgpu/listing.ts` (which is dynamically computed, has a Promise<TestSuiteListing>)\n// - `out/webgpu/listing.js` (which is pre-baked, has a TestSuiteListing)\ninterface ListingFile {\n  listing: Promise<TestSuiteListing> | TestSuiteListing;\n}\n\n// A .spec.ts file, as imported.\nexport interface SpecFile {\n  readonly description: string;\n  readonly g: IterableTestGroup;\n}\n\nexport interface ImportInfo {\n  url: string;\n}\n\ninterface TestFileLoaderEventMap {\n  import: MessageEvent<ImportInfo>;\n  finish: MessageEvent<void>;\n}\n\nexport interface TestFileLoader extends EventTarget {\n  addEventListener<K extends keyof TestFileLoaderEventMap>(\n    type: K,\n    listener: (this: TestFileLoader, ev: TestFileLoaderEventMap[K]) => void,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n  addEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n  removeEventListener<K extends keyof TestFileLoaderEventMap>(\n    type: K,\n    listener: (this: TestFileLoader, ev: TestFileLoaderEventMap[K]) => void,\n    options?: boolean | EventListenerOptions\n  ): void;\n  removeEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | EventListenerOptions\n  ): void;\n}\n\n// Base class for DefaultTestFileLoader and FakeTestFileLoader.\nexport abstract class TestFileLoader extends EventTarget {\n  abstract listing(suite: string): Promise<TestSuiteListing>;\n  protected abstract import(path: string): Promise<SpecFile>;\n\n  importSpecFile(suite: string, path: string[]): Promise<SpecFile> {\n    const url = `${suite}/${path.join('/')}.spec.js`;\n    this.dispatchEvent(\n      new MessageEvent<ImportInfo>('import', { data: { url } })\n    );\n    return this.import(url);\n  }\n\n  async loadTree(query: TestQuery, subqueriesToExpand: string[] = []): Promise<TestTree> {\n    const tree = await loadTreeForQuery(\n      this,\n      query,\n      subqueriesToExpand.map(s => {\n        const q = parseQuery(s);\n        assert(q.level >= 2, () => `subqueriesToExpand entries should not be multi-file:\\n  ${q}`);\n        return q;\n      })\n    );\n    this.dispatchEvent(new MessageEvent<void>('finish'));\n    return tree;\n  }\n\n  async loadCases(query: TestQuery): Promise<IterableIterator<TestTreeLeaf>> {\n    const tree = await this.loadTree(query);\n    return tree.iterateLeaves();\n  }\n}\n\nexport class DefaultTestFileLoader extends TestFileLoader {\n  async listing(suite: string): Promise<TestSuiteListing> {\n    return ((await import(`../../${suite}/listing.js`)) as ListingFile).listing;\n  }\n\n  import(path: string): Promise<SpecFile> {\n    return import(`../../${path}`);\n  }\n}\n"],"file":"file_loader.js"}