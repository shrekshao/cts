{"version":3,"sources":["../../../../src/common/internal/logging/log_message.ts"],"names":["extractImportantStackTrace","LogMessageWithStack","Error","stackHiddenMessage","undefined","timesSeen","constructor","name","ex","message","stack","extra","setStackHidden","incrementTimesSeen","toJSON","m","prettyPrintLog","log","replace"],"mappings":";AAAA;AACA,YAASA,0BAAT,QAA2C,aAA3C;AAEA,OAAO,MAAMC,mBAAN,SAAkCC,KAAlC,CAAwC;;;AAGrCC,EAAAA,kBAAR,GAAiDC,SAAjD;AACQC,EAAAA,SAAR,GAA4B,CAA5B;;AAEAC,EAAAA,WAAW,CAACC,IAAD,EAAeC,EAAf,EAA2C;AACpD,UAAMA,EAAE,CAACC,OAAT;;AAEA,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKG,KAAL,GAAaF,EAAE,CAACE,KAAhB;AACA,QAAI,WAAWF,EAAf,EAAmB;AACjB,WAAKG,KAAL,GAAaH,EAAE,CAACG,KAAhB;AACD;AACF;;AAED;AACAC,EAAAA,cAAc,CAACT,kBAAD,EAA6B;AACzC,SAAKA,kBAAL,KAA4BA,kBAA5B;AACD;;AAED;AACAU,EAAAA,kBAAkB,GAAG;AACnB,SAAKR,SAAL;AACD;;AAEDS,EAAAA,MAAM,GAAW;AACf,QAAIC,CAAC,GAAG,KAAKR,IAAb;AACA,QAAI,KAAKE,OAAT,EAAkBM,CAAC,IAAI,OAAO,KAAKN,OAAjB;AAClB,QAAI,KAAKN,kBAAL,KAA4BC,SAA5B,IAAyC,KAAKM,KAAlD,EAAyD;AACvDK,MAAAA,CAAC,IAAI,OAAOf,0BAA0B,CAAC,IAAD,CAAtC;AACD,KAFD,MAEO,IAAI,KAAKG,kBAAT,EAA6B;AAClCY,MAAAA,CAAC,IAAK,QAAO,KAAKZ,kBAAmB,GAArC;AACD;AACD,QAAI,KAAKE,SAAL,GAAiB,CAArB,EAAwB;AACtBU,MAAAA,CAAC,IAAK,mBAAkB,KAAKV,SAAU,gEAAvC;AACD;AACD,WAAOU,CAAP;AACD,GAtC4C;;;AAyC/C;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAT,CAAwBC,GAAxB,EAA0D;AAC/D,SAAO,SAASA,GAAG,CAACH,MAAJ,GAAaI,OAAb,CAAqB,KAArB,EAA4B,QAA5B,CAAhB;AACD","sourcesContent":["import { ErrorWithExtra } from '../../util/util.js';\nimport { extractImportantStackTrace } from '../stack.js';\n\nexport class LogMessageWithStack extends Error {\n  readonly extra: unknown;\n\n  private stackHiddenMessage: string | undefined = undefined;\n  private timesSeen: number = 1;\n\n  constructor(name: string, ex: Error | ErrorWithExtra) {\n    super(ex.message);\n\n    this.name = name;\n    this.stack = ex.stack;\n    if ('extra' in ex) {\n      this.extra = ex.extra;\n    }\n  }\n\n  /** Set a flag so the stack is not printed in toJSON(). */\n  setStackHidden(stackHiddenMessage: string) {\n    this.stackHiddenMessage ??= stackHiddenMessage;\n  }\n\n  /** Increment the \"seen x times\" counter. */\n  incrementTimesSeen() {\n    this.timesSeen++;\n  }\n\n  toJSON(): string {\n    let m = this.name;\n    if (this.message) m += ': ' + this.message;\n    if (this.stackHiddenMessage === undefined && this.stack) {\n      m += '\\n' + extractImportantStackTrace(this);\n    } else if (this.stackHiddenMessage) {\n      m += `\\n  (${this.stackHiddenMessage})`;\n    }\n    if (this.timesSeen > 1) {\n      m += `\\n  (duplicated ${this.timesSeen} times (possibly non-consecutively); use ?debug=1 to show all)`;\n    }\n    return m;\n  }\n}\n\n/**\n * Returns a string, nicely indented, for debug logs.\n * This is used in the cmdline and wpt runtimes. In WPT, it shows up in the `*-actual.txt` file.\n */\nexport function prettyPrintLog(log: LogMessageWithStack): string {\n  return '  - ' + log.toJSON().replace(/\\n/g, '\\n    ');\n}\n"],"file":"log_message.js"}