{"version":3,"sources":["../../src/unittests/maths.spec.ts"],"names":["description","makeTestGroup","diffULP","UnitTest","g","hexToF32","hex","Float32Array","Uint32Array","buffer","test","paramsSimple","a","b","ulp","fn","t","params","got","expect"],"mappings":"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","sourcesContent":["export const description = `\nUtil math unit tests.\n`;\n\nimport { makeTestGroup } from '../common/framework/test_group.js';\nimport { diffULP } from '../webgpu/util/math.js';\n\nimport { UnitTest } from './unit_test.js';\n\nexport const g = makeTestGroup(UnitTest);\n\ninterface DiffULPCase {\n  a: number;\n  b: number;\n  ulp: number;\n}\n\nfunction hexToF32(hex: number): number {\n  return new Float32Array(new Uint32Array([hex]).buffer)[0];\n}\n\ng.test('test,math,diffULP')\n  .paramsSimple<DiffULPCase>([\n    { a: 0, b: 0, ulp: 0 },\n    { a: 1, b: 2, ulp: 2 ** 23 }, // Single exponent step\n    { a: 2, b: 1, ulp: 2 ** 23 }, // Single exponent step\n    { a: 2, b: 4, ulp: 2 ** 23 }, // Single exponent step\n    { a: 4, b: 2, ulp: 2 ** 23 }, // Single exponent step\n    { a: -1, b: -2, ulp: 2 ** 23 }, // Single exponent step\n    { a: -2, b: -1, ulp: 2 ** 23 }, // Single exponent step\n    { a: -2, b: -4, ulp: 2 ** 23 }, // Single exponent step\n    { a: -4, b: -2, ulp: 2 ** 23 }, // Single exponent step\n    { a: 1, b: 4, ulp: 2 ** 24 }, // Double exponent step\n    { a: 4, b: 1, ulp: 2 ** 24 }, // Double exponent step\n    { a: -1, b: -4, ulp: 2 ** 24 }, // Double exponent step\n    { a: -4, b: -1, ulp: 2 ** 24 }, // Double exponent step\n    { a: hexToF32(0x00800000), b: hexToF32(0x00800001), ulp: 1 }, // Single mantissa step\n    { a: hexToF32(0x00800001), b: hexToF32(0x00800000), ulp: 1 }, // Single mantissa step\n    { a: hexToF32(0x03800000), b: hexToF32(0x03800001), ulp: 1 }, // Single mantissa step\n    { a: hexToF32(0x03800001), b: hexToF32(0x03800000), ulp: 1 }, // Single mantissa step\n    { a: -hexToF32(0x00800000), b: -hexToF32(0x00800001), ulp: 1 }, // Single mantissa step\n    { a: -hexToF32(0x00800001), b: -hexToF32(0x00800000), ulp: 1 }, // Single mantissa step\n    { a: -hexToF32(0x03800000), b: -hexToF32(0x03800001), ulp: 1 }, // Single mantissa step\n    { a: -hexToF32(0x03800001), b: -hexToF32(0x03800000), ulp: 1 }, // Single mantissa step\n    { a: hexToF32(0x00800000), b: hexToF32(0x00800002), ulp: 2 }, // Double mantissa step\n    { a: hexToF32(0x00800002), b: hexToF32(0x00800000), ulp: 2 }, // Double mantissa step\n    { a: hexToF32(0x03800000), b: hexToF32(0x03800002), ulp: 2 }, // Double mantissa step\n    { a: hexToF32(0x03800002), b: hexToF32(0x03800000), ulp: 2 }, // Double mantissa step\n    { a: -hexToF32(0x00800000), b: -hexToF32(0x00800002), ulp: 2 }, // Double mantissa step\n    { a: -hexToF32(0x00800002), b: -hexToF32(0x00800000), ulp: 2 }, // Double mantissa step\n    { a: -hexToF32(0x03800000), b: -hexToF32(0x03800002), ulp: 2 }, // Double mantissa step\n    { a: -hexToF32(0x03800002), b: -hexToF32(0x03800000), ulp: 2 }, // Double mantissa step\n    { a: hexToF32(0x00800000), b: 0, ulp: 1 }, // Normals near 0\n    { a: 0, b: hexToF32(0x00800000), ulp: 1 }, // Normals near 0\n    { a: -hexToF32(0x00800000), b: 0, ulp: 1 }, // Normals near 0\n    { a: 0, b: -hexToF32(0x00800000), ulp: 1 }, // Normals near 0\n    { a: hexToF32(0x00800000), b: -hexToF32(0x00800000), ulp: 2 }, // Normals around 0\n    { a: -hexToF32(0x00800000), b: hexToF32(0x00800000), ulp: 2 }, // Normals around 0\n    { a: hexToF32(0x00000001), b: 0, ulp: 0 }, // Subnormals near 0\n    { a: 0, b: hexToF32(0x00000001), ulp: 0 }, // Subnormals near 0\n    { a: -hexToF32(0x00000001), b: 0, ulp: 0 }, // Subnormals near 0\n    { a: 0, b: -hexToF32(0x00000001), ulp: 0 }, // Subnormals near 0\n    { a: hexToF32(0x00000001), b: -hexToF32(0x00000001), ulp: 0 }, // Subnormals near 0\n    { a: -hexToF32(0x00000001), b: hexToF32(0x00000001), ulp: 0 }, // Subnormals near 0\n    { a: hexToF32(0x00000001), b: hexToF32(0x00800000), ulp: 1 }, // Normal/Subnormal boundary\n    { a: hexToF32(0x00800000), b: hexToF32(0x00000001), ulp: 1 }, // Normal/Subnormal boundary\n    { a: -hexToF32(0x00000001), b: -hexToF32(0x00800000), ulp: 1 }, // Normal/Subnormal boundary\n    { a: -hexToF32(0x00800000), b: -hexToF32(0x00000001), ulp: 1 }, // Normal/Subnormal boundary\n    { a: hexToF32(0x00800001), b: hexToF32(0x00000000), ulp: 2 }, // Just-above-Normal/Subnormal boundary\n    { a: hexToF32(0x00800001), b: hexToF32(0x00000001), ulp: 2 }, // Just-above-Normal/Subnormal boundary\n    { a: hexToF32(0x00800005), b: hexToF32(0x00000001), ulp: 6 }, // Just-above-Normal/Subnormal boundary\n    { a: hexToF32(0x00800005), b: hexToF32(0x00000111), ulp: 6 }, // Just-above-Normal/Subnormal boundary\n  ])\n  .fn(t => {\n    const a = t.params.a;\n    const b = t.params.b;\n    const got = diffULP(a, b);\n    const expect = t.params.ulp;\n    t.expect(got === expect, `diffULP(${a}, ${b}) returned ${got}. Expected ${expect}`);\n  });\n"],"file":"maths.spec.js"}