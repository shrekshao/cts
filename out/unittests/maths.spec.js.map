{"version":3,"sources":["../../src/unittests/maths.spec.ts"],"names":["description","makeTestGroup","diffULP","UnitTest","g","hexToF32","hex","Float32Array","Uint32Array","buffer","test","paramsSimple","a","b","ulp","fn","t","params","got","expect"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAFO,CAIP,SAASC,aAAT,QAA8B,mCAA9B;AACA,SAASC,OAAT,QAAwB,wBAAxB;;AAEA,SAASC,QAAT,QAAyB,gBAAzB;;AAEA,OAAO,MAAMC,CAAC,GAAGH,aAAa,CAACE,QAAD,CAAvB;;;;;;;;AAQP,SAASE,QAAT,CAAkBC,GAAlB,EAAuC;AACrC,SAAO,IAAIC,YAAJ,CAAiB,IAAIC,WAAJ,CAAgB,CAACF,GAAD,CAAhB,EAAuBG,MAAxC,EAAgD,CAAhD,CAAP;AACD;;AAEDL,CAAC,CAACM,IAAF,CAAO,mBAAP;AACGC,YADH,CAC6B;AACzB,EAAEC,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,GAAG,EAAE,CAAnB,EADyB;AAEzB,EAAEF,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,GAAG,EAAE,KAAK,EAAxB,EAFyB,EAEK;AAC9B,EAAEF,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,GAAG,EAAE,KAAK,EAAxB,EAHyB,EAGK;AAC9B,EAAEF,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,GAAG,EAAE,KAAK,EAAxB,EAJyB,EAIK;AAC9B,EAAEF,CAAC,EAAE,CAAL,EAAQC,CAAC,EAAE,CAAX,EAAcC,GAAG,EAAE,KAAK,EAAxB,EALyB,EAKK;AAC9B,EAAEF,CAAC,EAAE,CAAC,CAAN,EAASC,CAAC,EAAE,CAAC,CAAb,EAAgBC,GAAG,EAAE,KAAK,EAA1B,EANyB,EAMO;AAChC,EAAEF,CAAC,EAAE,CAAC,CAAN,EAASC,CAAC,EAAE,CAAC,CAAb,EAAgBC,GAAG,EAAE,KAAK,EAA1B,EAPyB,EAOO;AAChC,EAAEF,CAAC,EAAE,CAAC,CAAN,EAASC,CAAC,EAAE,CAAC,CAAb,EAAgBC,GAAG,EAAE,KAAK,EAA1B,EARyB,EAQO;AAChC,EAAEF,CAAC,EAAE,CAAC,CAAN,EAASC,CAAC,EAAE,CAAC,CAAb,EAAgBC,GAAG,EAAE,KAAK,EAA1B,EATyB,EASO;AAChC,EAAEF,CAAC,EAAEP,QAAQ,CAAC,UAAD,CAAb,EAA2BQ,CAAC,EAAER,QAAQ,CAAC,UAAD,CAAtC,EAAoDS,GAAG,EAAE,CAAzD,EAVyB,EAUqC;AAC9D,EAAEF,CAAC,EAAEP,QAAQ,CAAC,UAAD,CAAb,EAA2BQ,CAAC,EAAER,QAAQ,CAAC,UAAD,CAAtC,EAAoDS,GAAG,EAAE,CAAzD,EAXyB,EAWqC;AAC9D,EAAEF,CAAC,EAAEP,QAAQ,CAAC,UAAD,CAAb,EAA2BQ,CAAC,EAAER,QAAQ,CAAC,UAAD,CAAtC,EAAoDS,GAAG,EAAE,CAAzD,EAZyB,EAYqC;AAC9D,EAAEF,CAAC,EAAEP,QAAQ,CAAC,UAAD,CAAb,EAA2BQ,CAAC,EAAER,QAAQ,CAAC,UAAD,CAAtC,EAAoDS,GAAG,EAAE,CAAzD,EAbyB,EAaqC;AAC9D,EAAEF,CAAC,EAAE,CAACP,QAAQ,CAAC,UAAD,CAAd,EAA4BQ,CAAC,EAAE,CAACR,QAAQ,CAAC,UAAD,CAAxC,EAAsDS,GAAG,EAAE,CAA3D,EAdyB,EAcuC;AAChE,EAAEF,CAAC,EAAE,CAACP,QAAQ,CAAC,UAAD,CAAd,EAA4BQ,CAAC,EAAE,CAACR,QAAQ,CAAC,UAAD,CAAxC,EAAsDS,GAAG,EAAE,CAA3D,EAfyB,EAeuC;AAChE,EAAEF,CAAC,EAAE,CAACP,QAAQ,CAAC,UAAD,CAAd,EAA4BQ,CAAC,EAAE,CAACR,QAAQ,CAAC,UAAD,CAAxC,EAAsDS,GAAG,EAAE,CAA3D,EAhByB,EAgBuC;AAChE,EAAEF,CAAC,EAAE,CAACP,QAAQ,CAAC,UAAD,CAAd,EAA4BQ,CAAC,EAAE,CAACR,QAAQ,CAAC,UAAD,CAAxC,EAAsDS,GAAG,EAAE,CAA3D,EAjByB,EAiBuC;AAChE,EAAEF,CAAC,EAAEP,QAAQ,CAAC,UAAD,CAAb,EAA2BQ,CAAC,EAAE,CAACR,QAAQ,CAAC,UAAD,CAAvC,EAAqDS,GAAG,EAAE,KAAK,EAA/D,EAlByB,EAkB4C;AACrE,EAAEF,CAAC,EAAE,CAACP,QAAQ,CAAC,UAAD,CAAd,EAA4BQ,CAAC,EAAER,QAAQ,CAAC,UAAD,CAAvC,EAAqDS,GAAG,EAAE,KAAK,EAA/D,EAnByB,CAmB4C;AAnB5C,CAD7B;AAsBGC,EAtBH,CAsBMC,CAAC,IAAI;AACP,QAAMJ,CAAC,GAAGI,CAAC,CAACC,MAAF,CAASL,CAAnB;AACA,QAAMC,CAAC,GAAGG,CAAC,CAACC,MAAF,CAASJ,CAAnB;AACA,QAAMK,GAAG,GAAGhB,OAAO,CAACU,CAAD,EAAIC,CAAJ,CAAnB;AACA,QAAMM,MAAM,GAAGH,CAAC,CAACC,MAAF,CAASH,GAAxB;AACAE,EAAAA,CAAC,CAACG,MAAF,CAASD,GAAG,KAAKC,MAAjB,EAA0B,WAAUP,CAAE,KAAIC,CAAE,cAAaK,GAAI,cAAaC,MAAO,EAAjF;AACD,CA5BH","sourcesContent":["export const description = `\nUtil math unit tests.\n`;\n\nimport { makeTestGroup } from '../common/framework/test_group.js';\nimport { diffULP } from '../webgpu/util/math.js';\n\nimport { UnitTest } from './unit_test.js';\n\nexport const g = makeTestGroup(UnitTest);\n\ninterface DiffULPCase {\n  a: number;\n  b: number;\n  ulp: number;\n}\n\nfunction hexToF32(hex: number): number {\n  return new Float32Array(new Uint32Array([hex]).buffer)[0];\n}\n\ng.test('test,math,diffULP')\n  .paramsSimple<DiffULPCase>([\n    { a: 0, b: 0, ulp: 0 },\n    { a: 1, b: 2, ulp: 2 ** 23 }, // Single exponent step\n    { a: 2, b: 1, ulp: 2 ** 23 }, // Single exponent step\n    { a: 2, b: 4, ulp: 2 ** 23 }, // Single exponent step\n    { a: 4, b: 2, ulp: 2 ** 23 }, // Single exponent step\n    { a: -1, b: -2, ulp: 2 ** 23 }, // Single exponent step\n    { a: -2, b: -1, ulp: 2 ** 23 }, // Single exponent step\n    { a: -2, b: -4, ulp: 2 ** 23 }, // Single exponent step\n    { a: -4, b: -2, ulp: 2 ** 23 }, // Single exponent step\n    { a: hexToF32(0x00800000), b: hexToF32(0x00800001), ulp: 1 }, // Single mantissa step\n    { a: hexToF32(0x00800001), b: hexToF32(0x00800000), ulp: 1 }, // Single mantissa step\n    { a: hexToF32(0x03800000), b: hexToF32(0x03800001), ulp: 1 }, // Single mantissa step\n    { a: hexToF32(0x03800001), b: hexToF32(0x03800000), ulp: 1 }, // Single mantissa step\n    { a: -hexToF32(0x00800000), b: -hexToF32(0x00800001), ulp: 1 }, // Single mantissa step\n    { a: -hexToF32(0x00800001), b: -hexToF32(0x00800000), ulp: 1 }, // Single mantissa step\n    { a: -hexToF32(0x03800000), b: -hexToF32(0x03800001), ulp: 1 }, // Single mantissa step\n    { a: -hexToF32(0x03800001), b: -hexToF32(0x03800000), ulp: 1 }, // Single mantissa step\n    { a: hexToF32(0x00800000), b: -hexToF32(0x00800000), ulp: 2 ** 24 }, // Two exponent steps\n    { a: -hexToF32(0x00800000), b: hexToF32(0x00800000), ulp: 2 ** 24 }, // Two exponent steps\n  ])\n  .fn(t => {\n    const a = t.params.a;\n    const b = t.params.b;\n    const got = diffULP(a, b);\n    const expect = t.params.ulp;\n    t.expect(got === expect, `diffULP(${a}, ${b}) returned ${got}. Expected ${expect}`);\n  });\n"],"file":"maths.spec.js"}