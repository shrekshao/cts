{"version":3,"sources":["../../src/unittests/params_builder_toplevel.spec.ts"],"names":["description","kUnitCaseParamsBuilder","makeTestGroup","makeTestGroupForUnitTesting","TestGroupTest","UnitTest","g","test","params","u","combineWithParams","fn","t","fail","paramsSimple","x","expect","paramsSubcasesOnly","a","y","filter","p","unless","t0","ran","Symbol","iterator","push","expectCases"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAFO;AAKP,SAASC,sBAAT,QAAuC,uCAAvC;AACA,SAASC,aAAT,QAA8B,mCAA9B;AACA,SAASC,2BAAT,QAA4C,kCAA5C;;AAEA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,QAAT,QAAyB,gBAAzB;;AAEA,OAAO,MAAMC,CAAC,GAAGJ,aAAa,CAACE,aAAD,CAAvB;;AAEPE,CAAC,CAACC,IAAF,CAAO,uBAAP;AACGC,MADH,CACU,CAAAC,CAAC,KAAIA,CAAC,CAACC,iBAAF,CAAoB,EAApB,CADf;AAEGC,EAFH,CAEM,CAAAC,CAAC,KAAI;AACPA,EAAAA,CAAC,CAACC,IAAF,CAAO,yBAAP;AACD,CAJH;;AAMAP,CAAC,CAACC,IAAF,CAAO,0BAAP;AACGC,MADH,CACU,MAAMP,sBAAsB,CAACS,iBAAvB,CAAyC,EAAzC,CADhB;AAEGC,EAFH,CAEM,CAAAC,CAAC,KAAI;AACPA,EAAAA,CAAC,CAACC,IAAF,CAAO,yBAAP;AACD,CAJH;;AAMAP,CAAC,CAACC,IAAF,CAAO,4BAAP;AACGC,MADH,CACUP,sBAAsB,CAACS,iBAAvB,CAAyC,EAAzC,CADV;AAEGC,EAFH,CAEM,CAAAC,CAAC,KAAI;AACPA,EAAAA,CAAC,CAACC,IAAF,CAAO,yBAAP;AACD,CAJH;;AAMAP,CAAC,CAACC,IAAF,CAAO,0BAAP;AACGO,YADH,CACgB,EADhB;AAEGH,EAFH,CAEM,CAAAC,CAAC,KAAI;AACPA,EAAAA,CAAC,CAACC,IAAF,CAAO,yBAAP;AACD,CAJH;;AAMAP,CAAC,CAACC,IAAF,CAAO,kBAAP;AACGC,MADH,CACU,CAAAC,CAAC;AACPA,CAAC,CAAC;AAAD,CACEC,iBADH,CACqB,CAAC,EAAEK,CAAC,EAAE,CAAL,EAAD,CADrB,CAFJ;;AAKGJ,EALH,CAKM,CAAAC,CAAC,KAAI;AACPA,EAAAA,CAAC,CAACI,MAAF,CAASJ,CAAC,CAACJ,MAAF,CAASO,CAAT,KAAe,CAAxB;AACD,CAPH;;AASAT,CAAC,CAACC,IAAF,CAAO,qBAAP;AACGU,kBADH,CACsB,CAAAR,CAAC;AACnBA,CAAC,CAAC;AAAD,CACEC,iBADH,CACqB,CAAC,EAAEK,CAAC,EAAE,CAAL,EAAD,CADrB,CAFJ;;AAKGJ,EALH,CAKM,CAAAC,CAAC,KAAI;AACPA,EAAAA,CAAC,CAACI,MAAF,CAASJ,CAAC,CAACJ,MAAF,CAASO,CAAT,KAAe,CAAxB;AACD,CAPH;;AASAT,CAAC,CAACC,IAAF,CAAO,QAAP;AACGC,MADH,CACU,CAAAC,CAAC;AACPA,CAAC;AACEC,iBADH,CACqB;AACjB,EAAEQ,CAAC,EAAE,IAAL,EAAWH,CAAC,EAAE,CAAd,EADiB,EACE;AACnB,EAAEG,CAAC,EAAE,KAAL,EAAYC,CAAC,EAAE,CAAf,EAFiB,CADrB;;AAKGC,MALH,CAKU,CAAAC,CAAC,KAAIA,CAAC,CAACH,CALjB,CAFJ;;AASGP,EATH,CASM,CAAAC,CAAC,KAAI;AACPA,EAAAA,CAAC,CAACI,MAAF,CAASJ,CAAC,CAACJ,MAAF,CAASU,CAAlB;AACD,CAXH;;AAaAZ,CAAC,CAACC,IAAF,CAAO,QAAP;AACGC,MADH,CACU,CAAAC,CAAC;AACPA,CAAC;AACEC,iBADH,CACqB;AACjB,EAAEQ,CAAC,EAAE,IAAL,EAAWH,CAAC,EAAE,CAAd,EADiB,EACE;AACnB,EAAEG,CAAC,EAAE,KAAL,EAAYC,CAAC,EAAE,CAAf,EAFiB,CADrB;;AAKGG,MALH,CAKU,CAAAD,CAAC,KAAIA,CAAC,CAACH,CALjB,CAFJ;;AASGP,EATH,CASM,CAAAC,CAAC,KAAI;AACPA,EAAAA,CAAC,CAACI,MAAF,CAAS,CAACJ,CAAC,CAACJ,MAAF,CAASU,CAAnB;AACD,CAXH;;AAaAZ,CAAC,CAACC,IAAF,CAAO,WAAP,EAAoBI,EAApB,CAAuB,CAAAY,EAAE,KAAI;AAC3B,QAAMjB,CAAC,GAAGH,2BAA2B,CAACE,QAAD,CAArC;;AAEA,QAAMmB,GAAiB,GAAG,EAA1B;;AAEAlB,EAAAA,CAAC,CAACC,IAAF,CAAO,WAAP;AACGC,EAAAA,MADH,CACU,CAAAC,CAAC;AACPA,EAAAA,CAAC,CAACC,iBAAF,CAAoB;AAClB,MAAEe,MAAM,CAACC,QAAT,IAAqB;AACnB,WAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuB,EAAEA,CAAzB,EAA4B;AAC1B,aAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuB,EAAEA,CAAzB,EAA4B;AAC1B,gBAAM,EAAEJ,CAAF,EAAKI,CAAL,EAAN;AACD;AACF;AACF,KAPiB,EAApB,CAFJ;;;AAYGR,EAAAA,EAZH,CAYM,CAAAC,CAAC,KAAI;AACPY,IAAAA,GAAG,CAACG,IAAJ,CAASf,CAAC,CAACJ,MAAX;AACD,GAdH;;AAgBAe,EAAAA,EAAE,CAACK,WAAH,CAAetB,CAAf,EAAkB;AAChB,IAAEC,IAAI,EAAE,CAAC,WAAD,CAAR,EAAuBC,MAAM,EAAE,EAAEO,CAAC,EAAE,CAAL,EAAQI,CAAC,EAAE,CAAX,EAA/B,EADgB;AAEhB,IAAEZ,IAAI,EAAE,CAAC,WAAD,CAAR,EAAuBC,MAAM,EAAE,EAAEO,CAAC,EAAE,CAAL,EAAQI,CAAC,EAAE,CAAX,EAA/B,EAFgB;AAGhB,IAAEZ,IAAI,EAAE,CAAC,WAAD,CAAR,EAAuBC,MAAM,EAAE,EAAEO,CAAC,EAAE,CAAL,EAAQI,CAAC,EAAE,CAAX,EAA/B,EAHgB;AAIhB,IAAEZ,IAAI,EAAE,CAAC,WAAD,CAAR,EAAuBC,MAAM,EAAE,EAAEO,CAAC,EAAE,CAAL,EAAQI,CAAC,EAAE,CAAX,EAA/B,EAJgB;AAKhB,IAAEZ,IAAI,EAAE,CAAC,WAAD,CAAR,EAAuBC,MAAM,EAAE,EAAEO,CAAC,EAAE,CAAL,EAAQI,CAAC,EAAE,CAAX,EAA/B,EALgB;AAMhB,IAAEZ,IAAI,EAAE,CAAC,WAAD,CAAR,EAAuBC,MAAM,EAAE,EAAEO,CAAC,EAAE,CAAL,EAAQI,CAAC,EAAE,CAAX,EAA/B,EANgB,CAAlB;;AAQD,CA7BD","sourcesContent":["export const description = `\nUnit tests for parameterization.\n`;\n\nimport { TestParams } from '../common/framework/fixture.js';\nimport { kUnitCaseParamsBuilder } from '../common/framework/params_builder.js';\nimport { makeTestGroup } from '../common/framework/test_group.js';\nimport { makeTestGroupForUnitTesting } from '../common/internal/test_group.js';\n\nimport { TestGroupTest } from './test_group_test.js';\nimport { UnitTest } from './unit_test.js';\n\nexport const g = makeTestGroup(TestGroupTest);\n\ng.test('combine_none,arg_unit')\n  .params(u => u.combineWithParams([]))\n  .fn(t => {\n    t.fail(\"this test shouldn't run\");\n  });\n\ng.test('combine_none,arg_ignored')\n  .params(() => kUnitCaseParamsBuilder.combineWithParams([]))\n  .fn(t => {\n    t.fail(\"this test shouldn't run\");\n  });\n\ng.test('combine_none,plain_builder')\n  .params(kUnitCaseParamsBuilder.combineWithParams([]))\n  .fn(t => {\n    t.fail(\"this test shouldn't run\");\n  });\n\ng.test('combine_none,plain_array')\n  .paramsSimple([])\n  .fn(t => {\n    t.fail(\"this test shouldn't run\");\n  });\n\ng.test('combine_one,case')\n  .params(u =>\n    u //\n      .combineWithParams([{ x: 1 }])\n  )\n  .fn(t => {\n    t.expect(t.params.x === 1);\n  });\n\ng.test('combine_one,subcase')\n  .paramsSubcasesOnly(u =>\n    u //\n      .combineWithParams([{ x: 1 }])\n  )\n  .fn(t => {\n    t.expect(t.params.x === 1);\n  });\n\ng.test('filter')\n  .params(u =>\n    u\n      .combineWithParams([\n        { a: true, x: 1 }, //\n        { a: false, y: 2 },\n      ])\n      .filter(p => p.a)\n  )\n  .fn(t => {\n    t.expect(t.params.a);\n  });\n\ng.test('unless')\n  .params(u =>\n    u\n      .combineWithParams([\n        { a: true, x: 1 }, //\n        { a: false, y: 2 },\n      ])\n      .unless(p => p.a)\n  )\n  .fn(t => {\n    t.expect(!t.params.a);\n  });\n\ng.test('generator').fn(t0 => {\n  const g = makeTestGroupForUnitTesting(UnitTest);\n\n  const ran: TestParams[] = [];\n\n  g.test('generator')\n    .params(u =>\n      u.combineWithParams({\n        *[Symbol.iterator]() {\n          for (let x = 0; x < 3; ++x) {\n            for (let y = 0; y < 2; ++y) {\n              yield { x, y };\n            }\n          }\n        },\n      })\n    )\n    .fn(t => {\n      ran.push(t.params);\n    });\n\n  t0.expectCases(g, [\n    { test: ['generator'], params: { x: 0, y: 0 } },\n    { test: ['generator'], params: { x: 0, y: 1 } },\n    { test: ['generator'], params: { x: 1, y: 0 } },\n    { test: ['generator'], params: { x: 1, y: 1 } },\n    { test: ['generator'], params: { x: 2, y: 0 } },\n    { test: ['generator'], params: { x: 2, y: 1 } },\n  ]);\n});\n"],"file":"params_builder_toplevel.spec.js"}