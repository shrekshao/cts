{"version":3,"sources":["../../src/unittests/test_group_test.ts"],"names":["Logger","TestQuerySingleCase","objectEquals","UnitTest","TestGroupTest","run","g","logger","overrideDebugMode","t","iterate","rc","query","id","test","params","rec","record","toString","results","expectCases","cases","gcases","push","Array","from","c","expect","JSON","stringify"],"mappings":";AAAA;AACA,GADA,SAASA,MAAT,QAAmC,sCAAnC,CACA,SAASC,mBAAT,QAAoC,mCAApC;AAEA,SAASC,YAAT,QAA6B,wBAA7B;;AAEA,SAASC,QAAT,QAAyB,gBAAzB;;AAEA,OAAO,MAAMC,aAAN,SAA4BD,QAA5B,CAAqC;AACjC,QAAHE,GAAG,CAACC,CAAD,EAA4C;AACnD,UAAMC,MAAM,GAAG,IAAIP,MAAJ,CAAW,EAAEQ,iBAAiB,EAAE,IAArB,EAAX,CAAf;AACA,SAAK,MAAMC,CAAX,IAAgBH,CAAC,CAACI,OAAF,EAAhB,EAA6B;AAC3B,WAAK,MAAMC,EAAX,IAAiBF,CAAC,CAACC,OAAF,EAAjB,EAA8B;AAC5B,cAAME,KAAK,GAAG,IAAIX,mBAAJ,CAAwB,IAAxB,EAA8B,CAAC,IAAD,CAA9B,EAAsCU,EAAE,CAACE,EAAH,CAAMC,IAA5C,EAAkDH,EAAE,CAACE,EAAH,CAAME,MAAxD,CAAd;AACA,cAAM,CAACC,GAAD,IAAQT,MAAM,CAACU,MAAP,CAAcL,KAAK,CAACM,QAAN,EAAd,CAAd;AACA,cAAMP,EAAE,CAACN,GAAH,CAAOW,GAAP,EAAYJ,KAAZ,EAAmB,EAAnB,CAAN;AACD;AACF;AACD,WAAOL,MAAM,CAACY,OAAd;AACD;;AAEDC,EAAAA,WAAW,CAACd,CAAD,EAAuBe,KAAvB,EAAkD;AAC3D,UAAMC,MAAM,GAAG,EAAf;AACA,SAAK,MAAMb,CAAX,IAAgBH,CAAC,CAACI,OAAF,EAAhB,EAA6B;AAC3BY,MAAAA,MAAM,CAACC,IAAP,CAAY,GAAGC,KAAK,CAACC,IAAN,CAAWhB,CAAC,CAACC,OAAF,EAAX,EAAwB,CAAAgB,CAAC,KAAIA,CAAC,CAACb,EAA/B,CAAf;AACD;AACD,SAAKc,MAAL;AACEzB,IAAAA,YAAY,CAACoB,MAAD,EAASD,KAAT,CADd;AAEG;AACP,IAAIO,IAAI,CAACC,SAAL,CAAeR,KAAf,CAAsB;AAC1B;AACA,IAAIO,IAAI,CAACC,SAAL,CAAeP,MAAf,CAAuB,EALvB;;AAOD,GAzByC","sourcesContent":["import { Logger, LogResults } from '../common/internal/logging/logger.js';\nimport { TestQuerySingleCase } from '../common/internal/query/query.js';\nimport { IterableTestGroup, TestCaseID } from '../common/internal/test_group.js';\nimport { objectEquals } from '../common/util/util.js';\n\nimport { UnitTest } from './unit_test.js';\n\nexport class TestGroupTest extends UnitTest {\n  async run(g: IterableTestGroup): Promise<LogResults> {\n    const logger = new Logger({ overrideDebugMode: true });\n    for (const t of g.iterate()) {\n      for (const rc of t.iterate()) {\n        const query = new TestQuerySingleCase('xx', ['yy'], rc.id.test, rc.id.params);\n        const [rec] = logger.record(query.toString());\n        await rc.run(rec, query, []);\n      }\n    }\n    return logger.results;\n  }\n\n  expectCases(g: IterableTestGroup, cases: TestCaseID[]): void {\n    const gcases = [];\n    for (const t of g.iterate()) {\n      gcases.push(...Array.from(t.iterate(), c => c.id));\n    }\n    this.expect(\n      objectEquals(gcases, cases),\n      `expected\n  ${JSON.stringify(cases)}\ngot\n  ${JSON.stringify(gcases)}`\n    );\n  }\n}\n"],"file":"test_group_test.js"}