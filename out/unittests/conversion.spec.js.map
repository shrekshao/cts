{"version":3,"sources":["../../src/unittests/conversion.spec.ts"],"names":["description","makeTestGroup","float16BitsToFloat32","float32ToFloat16Bits","UnitTest","g","cases","test","fn","t","forEach","value","expect","Math","abs","toString"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI,2BAArB,CAEP,SAASC,aAAT,QAA8B,kCAA9B;AACA,SAASC,oBAAT,EAA+BC,oBAA/B,QAA2D,8BAA3D;;AAEA,SAASC,QAAT,QAAyB,gBAAzB;;AAEA,OAAO,MAAMC,CAAC,GAAGJ,aAAa,CAACG,QAAD,CAAvB;;AAEP,MAAME,KAAK,GAAG;AACZ,CAAC,oBAAD,EAAuB,CAAvB,CADY;AAEZ,CAAC,oBAAD,EAAuB,gBAAvB,CAFY;AAGZ,CAAC,oBAAD,EAAuB,UAAvB,CAHY;AAIZ,CAAC,oBAAD,EAAuB,KAAvB,CAJY;AAKZ,CAAC,oBAAD,EAAuB,CAAvB,CALY;AAMZ,CAAC,oBAAD,EAAuB,GAAvB,CANY;AAOZ,CAAC,oBAAD,EAAuB,SAAvB,CAPY;AAQZ,CAAC,oBAAD,EAAuB,UAAvB,CARY;AASZ,CAAC,oBAAD,EAAuB,GAAvB,CATY;AAUZ,CAAC,oBAAD,EAAuB,CAAC,SAAxB,CAVY;AAWZ,CAAC,oBAAD,EAAuB,CAAC,GAAxB,CAXY,CAAd;;;AAcAD,CAAC,CAACE,IAAF,CAAO,iCAAP,EAA0CC,EAA1C,CAA6CC,CAAC,IAAI;AAChDH,EAAAA,KAAK,CAACI,OAAN,CAAcC,KAAK,IAAI;AACrB;AACAF,IAAAA,CAAC,CAACG,MAAF,CAASC,IAAI,CAACC,GAAL,CAASZ,oBAAoB,CAACS,KAAK,CAAC,CAAD,CAAN,CAApB,GAAiCA,KAAK,CAAC,CAAD,CAA/C,KAAuD,OAAhE,EAAyEA,KAAK,CAAC,CAAD,CAAL,CAASI,QAAT,CAAkB,CAAlB,CAAzE;AACD,GAHD;AAID,CALD;;AAOAV,CAAC,CAACE,IAAF,CAAO,iCAAP,EAA0CC,EAA1C,CAA6CC,CAAC,IAAI;AAChDH,EAAAA,KAAK,CAACI,OAAN,CAAcC,KAAK,IAAI;AACrB;AACA;AACAF,IAAAA,CAAC,CAACG,MAAF,CAASC,IAAI,CAACC,GAAL,CAASX,oBAAoB,CAACQ,KAAK,CAAC,CAAD,CAAN,CAApB,GAAiCA,KAAK,CAAC,CAAD,CAA/C,KAAuD,CAAhE,EAAmEA,KAAK,CAAC,CAAD,CAAL,CAASI,QAAT,EAAnE;AACD,GAJD;AAKD,CAND","sourcesContent":["export const description = `Unit tests for conversion`;\n\nimport { makeTestGroup } from '../common/internal/test_group.js';\nimport { float16BitsToFloat32, float32ToFloat16Bits } from '../webgpu/util/conversion.js';\n\nimport { UnitTest } from './unit_test.js';\n\nexport const g = makeTestGroup(UnitTest);\n\nconst cases = [\n  [0b0_01111_0000000000, 1],\n  [0b0_00001_0000000000, 0.00006103515625],\n  [0b0_01101_0101010101, 0.33325195],\n  [0b0_11110_1111111111, 65504],\n  [0b0_00000_0000000000, 0],\n  [0b0_01110_0000000000, 0.5],\n  [0b0_01100_1001100110, 0.1999512],\n  [0b0_01111_0000000001, 1.00097656],\n  [0b0_10101_1001000000, 100],\n  [0b1_01100_1001100110, -0.1999512],\n  [0b1_10101_1001000000, -100],\n];\n\ng.test('conversion,float16BitsToFloat32').fn(t => {\n  cases.forEach(value => {\n    // some loose check\n    t.expect(Math.abs(float16BitsToFloat32(value[0]) - value[1]) <= 0.00001, value[0].toString(2));\n  });\n});\n\ng.test('conversion,float32ToFloat16Bits').fn(t => {\n  cases.forEach(value => {\n    // some loose check\n    // Does not handle clamping, underflow, overflow, or denormalized numbers.\n    t.expect(Math.abs(float32ToFloat16Bits(value[1]) - value[0]) <= 1, value[1].toString());\n  });\n});\n"],"file":"conversion.spec.js"}