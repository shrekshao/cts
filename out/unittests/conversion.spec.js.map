{"version":3,"sources":["../../src/unittests/conversion.spec.ts"],"names":["description","makeTestGroup","float16BitsToFloat32","float32ToFloat16Bits","float32ToFloatBits","floatBitsToNormalULPFromZero","floatBitsToNumber","kFloat16Format","kFloat32Format","UnitTest","g","cases","test","fn","t","bits","number","actual","expect","Math","abs","toString","paramsSubcasesOnly","u","combine","signed","exponentBits","mantissaBits","params","bias","value","reconstituted","ulpFromZero","testThrows","b","shouldThrow"],"mappings":"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","sourcesContent":["export const description = `Unit tests for conversion`;\n\nimport { makeTestGroup } from '../common/internal/test_group.js';\nimport {\n  float16BitsToFloat32,\n  float32ToFloat16Bits,\n  float32ToFloatBits,\n  floatBitsToNormalULPFromZero,\n  floatBitsToNumber,\n  kFloat16Format,\n  kFloat32Format,\n} from '../webgpu/util/conversion.js';\n\nimport { UnitTest } from './unit_test.js';\n\nexport const g = makeTestGroup(UnitTest);\n\nconst cases = [\n  [0b0_01111_0000000000, 1],\n  [0b0_00001_0000000000, 0.00006103515625],\n  [0b0_01101_0101010101, 0.33325195],\n  [0b0_11110_1111111111, 65504],\n  [0b0_00000_0000000000, 0],\n  [0b0_01110_0000000000, 0.5],\n  [0b0_01100_1001100110, 0.1999512],\n  [0b0_01111_0000000001, 1.00097656],\n  [0b0_10101_1001000000, 100],\n  [0b1_01100_1001100110, -0.1999512],\n  [0b1_10101_1001000000, -100],\n];\n\ng.test('float16BitsToFloat32').fn(t => {\n  for (const [bits, number] of [\n    ...cases,\n    [0b1_00000_0000000000, -0], // (resulting sign is not actually tested)\n    [0b0_00000_1111111111, 0.00006104], // subnormal f16 input\n    [0b1_00000_1111111111, -0.00006104],\n  ]) {\n    const actual = float16BitsToFloat32(bits);\n    t.expect(\n      // some loose check\n      Math.abs(actual - number) <= 0.00001,\n      `for ${bits.toString(2)}, expected ${number}, got ${actual}`\n    );\n  }\n});\n\ng.test('float32ToFloat16Bits').fn(t => {\n  for (const [bits, number] of [\n    ...cases,\n    [0b0_00000_0000000000, 0.00001], // input that becomes subnormal in f16 is rounded to 0\n    [0b1_00000_0000000000, -0.00001], // and sign is preserved\n  ]) {\n    // some loose check\n    const actual = float32ToFloat16Bits(number);\n    t.expect(\n      Math.abs(actual - bits) <= 1,\n      `for ${number}, expected ${bits.toString(2)}, got ${actual.toString(2)}`\n    );\n  }\n});\n\ng.test('float32ToFloatBits_floatBitsToNumber')\n  .paramsSubcasesOnly(u =>\n    u\n      .combine('signed', [0, 1] as const)\n      .combine('exponentBits', [5, 8])\n      .combine('mantissaBits', [10, 23])\n  )\n  .fn(t => {\n    const { signed, exponentBits, mantissaBits } = t.params;\n    const bias = (1 << (exponentBits - 1)) - 1;\n\n    for (const [, value] of cases) {\n      if (value < 0 && signed === 0) continue;\n      const bits = float32ToFloatBits(value, signed, exponentBits, mantissaBits, bias);\n      const reconstituted = floatBitsToNumber(bits, { signed, exponentBits, mantissaBits, bias });\n      t.expect(Math.abs(reconstituted - value) <= 0.0000001, `${reconstituted} vs ${value}`);\n    }\n  });\n\ng.test('floatBitsToULPFromZero,16').fn(t => {\n  const test = (bits: number, ulpFromZero: number) =>\n    t.expect(floatBitsToNormalULPFromZero(bits, kFloat16Format) === ulpFromZero, bits.toString(2));\n  // Zero\n  test(0b0_00000_0000000000, 0);\n  // Subnormal\n  test(0b0_00000_0000000001, 0);\n  test(0b1_00000_0000000001, 0);\n  test(0b0_00000_1111111111, 0);\n  test(0b1_00000_1111111111, 0);\n  // Normal\n  test(0b0_00001_0000000000, 1); // 0 + 1ULP\n  test(0b1_00001_0000000000, -1); // 0 - 1ULP\n  test(0b0_00001_0000000001, 2); // 0 + 2ULP\n  test(0b1_00001_0000000001, -2); // 0 - 2ULP\n  test(0b0_01110_0000000000, 0b01101_0000000001); // 0.5\n  test(0b1_01110_0000000000, -0b01101_0000000001); // -0.5\n  test(0b0_01110_1111111110, 0b01101_1111111111); // 1.0 - 2ULP\n  test(0b1_01110_1111111110, -0b01101_1111111111); // -(1.0 - 2ULP)\n  test(0b0_01110_1111111111, 0b01110_0000000000); // 1.0 - 1ULP\n  test(0b1_01110_1111111111, -0b01110_0000000000); // -(1.0 - 1ULP)\n  test(0b0_01111_0000000000, 0b01110_0000000001); // 1.0\n  test(0b1_01111_0000000000, -0b01110_0000000001); // -1.0\n  test(0b0_01111_0000000001, 0b01110_0000000010); // 1.0 + 1ULP\n  test(0b1_01111_0000000001, -0b01110_0000000010); // -(1.0 + 1ULP)\n  test(0b0_10000_0000000000, 0b01111_0000000001); // 2.0\n  test(0b1_10000_0000000000, -0b01111_0000000001); // -2.0\n\n  const testThrows = (b: number) =>\n    t.shouldThrow('Error', () => floatBitsToNormalULPFromZero(b, kFloat16Format));\n  // Infinity\n  testThrows(0b0_11111_0000000000);\n  testThrows(0b1_11111_0000000000);\n  // NaN\n  testThrows(0b0_11111_1111111111);\n  testThrows(0b1_11111_1111111111);\n});\n\ng.test('floatBitsToULPFromZero,32').fn(t => {\n  const test = (bits: number, ulpFromZero: number) =>\n    t.expect(floatBitsToNormalULPFromZero(bits, kFloat32Format) === ulpFromZero, bits.toString(2));\n  // Zero\n  test(0b0_00000000_00000000000000000000000, 0);\n  // Subnormal\n  test(0b0_00000000_00000000000000000000001, 0);\n  test(0b1_00000000_00000000000000000000001, 0);\n  test(0b0_00000000_11111111111111111111111, 0);\n  test(0b1_00000000_11111111111111111111111, 0);\n  // Normal\n  test(0b0_00000001_00000000000000000000000, 1); // 0 + 1ULP\n  test(0b1_00000001_00000000000000000000000, -1); // 0 - 1ULP\n  test(0b0_00000001_00000000000000000000001, 2); // 0 + 2ULP\n  test(0b1_00000001_00000000000000000000001, -2); // 0 - 2ULP\n  test(0b0_01111110_00000000000000000000000, 0b01111101_00000000000000000000001); // 0.5\n  test(0b1_01111110_00000000000000000000000, -0b01111101_00000000000000000000001); // -0.5\n  test(0b0_01111110_11111111111111111111110, 0b01111101_11111111111111111111111); // 1.0 - 2ULP\n  test(0b1_01111110_11111111111111111111110, -0b01111101_11111111111111111111111); // -(1.0 - 2ULP)\n  test(0b0_01111110_11111111111111111111111, 0b01111110_00000000000000000000000); // 1.0 - 1ULP\n  test(0b1_01111110_11111111111111111111111, -0b01111110_00000000000000000000000); // -(1.0 - 1ULP)\n  test(0b0_01111111_00000000000000000000000, 0b01111110_00000000000000000000001); // 1.0\n  test(0b1_01111111_00000000000000000000000, -0b01111110_00000000000000000000001); // -1.0\n  test(0b0_01111111_00000000000000000000001, 0b01111110_00000000000000000000010); // 1.0 + 1ULP\n  test(0b1_01111111_00000000000000000000001, -0b01111110_00000000000000000000010); // -(1.0 + 1ULP)\n  test(0b0_11110000_00000000000000000000000, 0b11101111_00000000000000000000001); // 2.0\n  test(0b1_11110000_00000000000000000000000, -0b11101111_00000000000000000000001); // -2.0\n\n  const testThrows = (b: number) =>\n    t.shouldThrow('Error', () => floatBitsToNormalULPFromZero(b, kFloat32Format));\n  // Infinity\n  testThrows(0b0_11111111_00000000000000000000000);\n  testThrows(0b1_11111111_00000000000000000000000);\n  // NaN\n  testThrows(0b0_11111111_11111111111111111111111);\n  testThrows(0b0_11111111_00000000000000000000001);\n  testThrows(0b1_11111111_11111111111111111111111);\n  testThrows(0b1_11111111_00000000000000000000001);\n});\n"],"file":"conversion.spec.js"}