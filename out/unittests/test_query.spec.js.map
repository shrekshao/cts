{"version":3,"sources":["../../src/unittests/test_query.spec.ts"],"names":["description","makeTestGroup","parseQuery","TestQueryMultiFile","TestQueryMultiTest","TestQueryMultiCase","TestQuerySingleCase","UnitTest","F","expectToString","q","exp","expect","toString","expectQueriesEqual","q1","q2","level","isMultiFile","suite","filePathParts","length","i","p1","p2","isMultiTest","testPathParts","isMultiCase","Object","keys","params","key","v1","v2","isNaN","is","expectQueryParse","s","g","test","fn","t","shouldThrow","x","y","c","NaN","undefined"],"mappings":"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","sourcesContent":["export const description = `\nTests for TestQuery\n`;\n\nimport { makeTestGroup } from '../common/framework/test_group.js';\nimport { parseQuery } from '../common/internal/query/parseQuery.js';\nimport {\n  TestQueryMultiFile,\n  TestQueryMultiTest,\n  TestQueryMultiCase,\n  TestQuerySingleCase,\n  TestQuery,\n} from '../common/internal/query/query.js';\n\nimport { UnitTest } from './unit_test.js';\n\nclass F extends UnitTest {\n  expectToString(q: TestQuery, exp: string) {\n    this.expect(q.toString() === exp);\n  }\n\n  expectQueriesEqual(q1: TestQuery, q2: TestQuery) {\n    this.expect(q1.level === q2.level);\n\n    if (q1.level >= 1) {\n      this.expect(q1.isMultiFile === q2.isMultiFile);\n      this.expect(q1.suite === q2.suite);\n      this.expect(q1.filePathParts.length === q2.filePathParts.length);\n      for (let i = 0; i < q1.filePathParts.length; i++) {\n        this.expect(q1.filePathParts[i] === q2.filePathParts[i]);\n      }\n    }\n\n    if (q1.level >= 2) {\n      const p1 = q1 as TestQueryMultiTest;\n      const p2 = q2 as TestQueryMultiTest;\n\n      this.expect(p1.isMultiTest === p2.isMultiTest);\n      this.expect(p1.testPathParts.length === p2.testPathParts.length);\n      for (let i = 0; i < p1.testPathParts.length; i++) {\n        this.expect(p1.testPathParts[i] === p2.testPathParts[i]);\n      }\n    }\n\n    if (q1.level >= 3) {\n      const p1 = q1 as TestQueryMultiCase;\n      const p2 = q2 as TestQueryMultiCase;\n\n      this.expect(p1.isMultiCase === p2.isMultiCase);\n      this.expect(Object.keys(p1.params).length === Object.keys(p2.params).length);\n      for (const key of Object.keys(p1.params)) {\n        this.expect(key in p2.params);\n        const v1 = p1.params[key];\n        const v2 = p2.params[key];\n        this.expect(\n          v1 === v2 ||\n            (typeof v1 === 'number' && isNaN(v1)) === (typeof v2 === 'number' && isNaN(v2))\n        );\n        this.expect(Object.is(v1, -0) === Object.is(v2, -0));\n      }\n    }\n  }\n\n  expectQueryParse(s: string, q: TestQuery) {\n    this.expectQueriesEqual(q, parseQuery(s));\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('constructor').fn(t => {\n  t.shouldThrow('Error', () => new TestQueryMultiTest('suite', [], []));\n\n  t.shouldThrow('Error', () => new TestQueryMultiCase('suite', ['a'], [], {}));\n  t.shouldThrow('Error', () => new TestQueryMultiCase('suite', [], ['c'], {}));\n  t.shouldThrow('Error', () => new TestQueryMultiCase('suite', [], [], {}));\n\n  t.shouldThrow('Error', () => new TestQuerySingleCase('suite', ['a'], [], {}));\n  t.shouldThrow('Error', () => new TestQuerySingleCase('suite', [], ['c'], {}));\n  t.shouldThrow('Error', () => new TestQuerySingleCase('suite', [], [], {}));\n});\n\ng.test('toString').fn(t => {\n  t.expectToString(new TestQueryMultiFile('s', []), 's:*');\n  t.expectToString(new TestQueryMultiFile('s', ['a']), 's:a,*');\n  t.expectToString(new TestQueryMultiFile('s', ['a', 'b']), 's:a,b,*');\n  t.expectToString(new TestQueryMultiTest('s', ['a', 'b'], []), 's:a,b:*');\n  t.expectToString(new TestQueryMultiTest('s', ['a', 'b'], ['c']), 's:a,b:c,*');\n  t.expectToString(new TestQueryMultiTest('s', ['a', 'b'], ['c', 'd']), 's:a,b:c,d,*');\n  t.expectToString(new TestQueryMultiCase('s', ['a', 'b'], ['c', 'd'], {}), 's:a,b:c,d:*');\n  t.expectToString(\n    new TestQueryMultiCase('s', ['a', 'b'], ['c', 'd'], { x: 1 }),\n    's:a,b:c,d:x=1;*'\n  );\n  t.expectToString(\n    new TestQueryMultiCase('s', ['a', 'b'], ['c', 'd'], { x: 1, y: 2 }),\n    's:a,b:c,d:x=1;y=2;*'\n  );\n  t.expectToString(\n    new TestQuerySingleCase('s', ['a', 'b'], ['c', 'd'], { x: 1, y: 2 }),\n    's:a,b:c,d:x=1;y=2'\n  );\n  t.expectToString(new TestQuerySingleCase('s', ['a', 'b'], ['c', 'd'], {}), 's:a,b:c,d:');\n\n  // Test handling of magic param value that convert to NaN/undefined/Infinity/etc.\n  t.expectToString(new TestQuerySingleCase('s', ['a'], ['b'], { c: NaN }), 's:a:b:c=\"_nan_\"');\n  t.expectToString(\n    new TestQuerySingleCase('s', ['a'], ['b'], { c: undefined }),\n    's:a:b:c=\"_undef_\"'\n  );\n  t.expectToString(new TestQuerySingleCase('s', ['a'], ['b'], { c: -0 }), 's:a:b:c=\"_negzero_\"');\n});\n\ng.test('parseQuery').fn(t => {\n  t.expectQueryParse('s:*', new TestQueryMultiFile('s', []));\n  t.expectQueryParse('s:a,*', new TestQueryMultiFile('s', ['a']));\n  t.expectQueryParse('s:a,b,*', new TestQueryMultiFile('s', ['a', 'b']));\n  t.expectQueryParse('s:a,b:*', new TestQueryMultiTest('s', ['a', 'b'], []));\n  t.expectQueryParse('s:a,b:c,*', new TestQueryMultiTest('s', ['a', 'b'], ['c']));\n  t.expectQueryParse('s:a,b:c,d,*', new TestQueryMultiTest('s', ['a', 'b'], ['c', 'd']));\n  t.expectQueryParse('s:a,b:c,d:*', new TestQueryMultiCase('s', ['a', 'b'], ['c', 'd'], {}));\n  t.expectQueryParse(\n    's:a,b:c,d:x=1;*',\n    new TestQueryMultiCase('s', ['a', 'b'], ['c', 'd'], { x: 1 })\n  );\n  t.expectQueryParse(\n    's:a,b:c,d:x=1;y=2;*',\n    new TestQueryMultiCase('s', ['a', 'b'], ['c', 'd'], { x: 1, y: 2 })\n  );\n  t.expectQueryParse(\n    's:a,b:c,d:x=1;y=2',\n    new TestQuerySingleCase('s', ['a', 'b'], ['c', 'd'], { x: 1, y: 2 })\n  );\n  t.expectQueryParse('s:a,b:c,d:', new TestQuerySingleCase('s', ['a', 'b'], ['c', 'd'], {}));\n\n  // Test handling of magic param value that convert to NaN/undefined/Infinity/etc.\n  t.expectQueryParse('s:a:b:c=\"_nan_\"', new TestQuerySingleCase('s', ['a'], ['b'], { c: NaN }));\n  t.expectQueryParse(\n    's:a:b:c=\"_undef_\"',\n    new TestQuerySingleCase('s', ['a'], ['b'], { c: undefined })\n  );\n  t.expectQueryParse('s:a:b:c=\"_negzero_\"', new TestQuerySingleCase('s', ['a'], ['b'], { c: -0 }));\n});\n"],"file":"test_query.spec.js"}