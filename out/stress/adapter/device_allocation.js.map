{"version":3,"sources":["../../../src/stress/adapter/device_allocation.ts"],"names":["description","Fixture","makeTestGroup","g","test","desc","unimplemented"],"mappings":";AAAA;AACA,GADA,OAAO,MAAMA,WAAW,GAAI;AAC5B;AACA,CAFO,CAIP,SAASC,OAAT,QAAwB,mCAAxB;AACA,SAASC,aAAT,QAA8B,sCAA9B;;AAEA,OAAO,MAAMC,CAAC,GAAGD,aAAa,CAACD,OAAD,CAAvB;;AAEPE,CAAC,CAACC,IAAF,CAAO,YAAP;AACGC,IADH;AAEK;AACL;AACA;AACA;AACA;AACA;AACA,qCARA;;AAUGC,aAVH;;AAYAH,CAAC,CAACC,IAAF,CAAO,yBAAP;AACGC,IADH;AAEK;AACL;AACA,YAJA;;AAMGC,aANH;;AAQAH,CAAC,CAACC,IAAF,CAAO,uBAAP;AACGC,IADH;AAEK;AACL;AACA,YAJA;;AAMGC,aANH","sourcesContent":["export const description = `\nStress tests for GPUAdapter.requestDevice.\n`;\n\nimport { Fixture } from '../../common/framework/fixture.js';\nimport { makeTestGroup } from '../../common/framework/test_group.js';\n\nexport const g = makeTestGroup(Fixture);\n\ng.test('coexisting')\n  .desc(\n    `Tests allocation of many coexisting GPUDevice objects.\n\nTODO: These stress tests might not make sense. Allocating lots of GPUDevices is\ncurrently crashy in Chrome, and there's not a great reason for applications to\ndo it. UAs should probably limit the number of simultaneously active devices,\nbut this is effectively blocked on implementing GPUDevice.destroy() to give\napplications the necessary controls.`\n  )\n  .unimplemented();\n\ng.test('continuous,with_destroy')\n  .desc(\n    `Tests allocation and destruction of many GPUDevice objects over time. Objects\nare sequentially requested and destroyed over a very large number of\niterations.`\n  )\n  .unimplemented();\n\ng.test('continuous,no_destroy')\n  .desc(\n    `Tests allocation and implicit GC of many GPUDevice objects over time. Objects\nare sequentially requested and dropped for GC over a very large number of\niterations.`\n  )\n  .unimplemented();\n"],"file":"device_allocation.js"}