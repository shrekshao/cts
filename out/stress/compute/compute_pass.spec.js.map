{"version":3,"sources":["../../../src/stress/compute/compute_pass.spec.ts"],"names":["description","makeTestGroup","assert","iterRange","GPUTest","g","test","desc","fn","t","kNumElements","data","Uint32Array","x","buffer","makeBufferWithContents","GPUBufferUsage","STORAGE","COPY_SRC","pipeline","device","createComputePipeline","compute","module","createShaderModule","code","entryPoint","bindGroup","createBindGroup","layout","getBindGroupLayout","entries","binding","resource","kNumIterations","i","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatch","endPass","queue","submit","finish","expectGPUBufferValuesEqual","stages","buffer1","buffer2","buffer1Binding","buffer2Binding","kTotalAddition","kDimensions","forEach","limits","maxComputeWorkgroupsPerDimension","onSubmittedWorkDone"],"mappings":"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","sourcesContent":["export const description = `\nStress tests covering GPUComputePassEncoder usage.\n`;\n\nimport { makeTestGroup } from '../../common/framework/test_group.js';\nimport { assert, iterRange } from '../../common/util/util.js';\nimport { GPUTest } from '../../webgpu/gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('many')\n  .desc(\n    `Tests execution of a huge number of compute passes using the same\nGPUComputePipeline.`\n  )\n  .fn(async t => {\n    const kNumElements = 64;\n    const data = new Uint32Array([...iterRange(kNumElements, x => x)]);\n    const buffer = t.makeBufferWithContents(data, GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC);\n    const pipeline = t.device.createComputePipeline({\n      compute: {\n        module: t.device.createShaderModule({\n          code: `\n            struct Buffer { data: array<u32>; };\n            @group(0) @binding(0) var<storage, read_write> buffer: Buffer;\n            @stage(compute) @workgroup_size(1) fn main(\n                @builtin(global_invocation_id) id: vec3<u32>) {\n              buffer.data[id.x] = buffer.data[id.x] + 1u;\n            }\n          `,\n        }),\n        entryPoint: 'main',\n      },\n    });\n    const bindGroup = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [{ binding: 0, resource: { buffer } }],\n    });\n    const kNumIterations = 250_000;\n    for (let i = 0; i < kNumIterations; ++i) {\n      const encoder = t.device.createCommandEncoder();\n      const pass = encoder.beginComputePass();\n      pass.setPipeline(pipeline);\n      pass.setBindGroup(0, bindGroup);\n      pass.dispatch(kNumElements);\n      pass.endPass();\n      t.device.queue.submit([encoder.finish()]);\n    }\n    t.expectGPUBufferValuesEqual(\n      buffer,\n      new Uint32Array([...iterRange(kNumElements, x => x + kNumIterations)])\n    );\n  });\n\ng.test('pipeline_churn')\n  .desc(\n    `Tests execution of a huge number of compute passes which each use a different\nGPUComputePipeline.`\n  )\n  .fn(async t => {\n    const buffer = t.makeBufferWithContents(\n      new Uint32Array([0]),\n      GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC\n    );\n    const kNumIterations = 10_000;\n    const stages = iterRange(kNumIterations, i => ({\n      module: t.device.createShaderModule({\n        code: `\n        struct Buffer { data: u32; };\n        @group(0) @binding(0) var<storage, read_write> buffer: Buffer;\n        @stage(compute) @workgroup_size(1) fn main${i}() {\n          buffer.data = buffer.data + 1u;\n        }\n        `,\n      }),\n      entryPoint: `main${i}`,\n    }));\n    for (const compute of stages) {\n      const encoder = t.device.createCommandEncoder();\n      const pipeline = t.device.createComputePipeline({ compute });\n      const bindGroup = t.device.createBindGroup({\n        layout: pipeline.getBindGroupLayout(0),\n        entries: [{ binding: 0, resource: { buffer } }],\n      });\n      const pass = encoder.beginComputePass();\n      pass.setPipeline(pipeline);\n      pass.setBindGroup(0, bindGroup);\n      pass.dispatch(1);\n      pass.endPass();\n      t.device.queue.submit([encoder.finish()]);\n    }\n    t.expectGPUBufferValuesEqual(buffer, new Uint32Array([kNumIterations]));\n  });\n\ng.test('bind_group_churn')\n  .desc(\n    `Tests execution of compute passes which switch between a huge number of bind\ngroups.`\n  )\n  .fn(async t => {\n    const kNumElements = 64;\n    const data = new Uint32Array([...iterRange(kNumElements, x => x)]);\n    const buffer1 = t.makeBufferWithContents(\n      data,\n      GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC\n    );\n    const buffer2 = t.makeBufferWithContents(\n      data,\n      GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC\n    );\n    const module = t.device.createShaderModule({\n      code: `\n        struct Buffer { data: array<u32>; };\n        @group(0) @binding(0) var<storage, read_write> buffer1: Buffer;\n        @group(0) @binding(1) var<storage, read_write> buffer2: Buffer;\n        @stage(compute) @workgroup_size(1) fn main(\n            @builtin(global_invocation_id) id: vec3<u32>) {\n          buffer1.data[id.x] = buffer1.data[id.x] + 1u;\n          buffer2.data[id.x] = buffer2.data[id.x] + 2u;\n        }\n      `,\n    });\n    const kNumIterations = 250_000;\n    const pipeline = t.device.createComputePipeline({ compute: { module, entryPoint: 'main' } });\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    for (let i = 0; i < kNumIterations; ++i) {\n      const buffer1Binding = i % 2;\n      const buffer2Binding = buffer1Binding ^ 1;\n      const bindGroup = t.device.createBindGroup({\n        layout: pipeline.getBindGroupLayout(0),\n        entries: [\n          { binding: buffer1Binding, resource: { buffer: buffer1 } },\n          { binding: buffer2Binding, resource: { buffer: buffer2 } },\n        ],\n      });\n      pass.setBindGroup(0, bindGroup);\n      pass.dispatch(kNumElements);\n    }\n    pass.endPass();\n    t.device.queue.submit([encoder.finish()]);\n    const kTotalAddition = (kNumIterations / 2) * 3;\n    t.expectGPUBufferValuesEqual(\n      buffer1,\n      new Uint32Array([...iterRange(kNumElements, x => x + kTotalAddition)])\n    );\n    t.expectGPUBufferValuesEqual(\n      buffer2,\n      new Uint32Array([...iterRange(kNumElements, x => x + kTotalAddition)])\n    );\n  });\n\ng.test('many_dispatches')\n  .desc(`Tests execution of compute passes with a huge number of dispatch calls`)\n  .fn(async t => {\n    const kNumElements = 64;\n    const data = new Uint32Array([...iterRange(kNumElements, x => x)]);\n    const buffer = t.makeBufferWithContents(data, GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC);\n    const module = t.device.createShaderModule({\n      code: `\n        struct Buffer { data: array<u32>; };\n        @group(0) @binding(0) var<storage, read_write> buffer: Buffer;\n        @stage(compute) @workgroup_size(1) fn main(\n            @builtin(global_invocation_id) id: vec3<u32>) {\n          buffer.data[id.x] = buffer.data[id.x] + 1u;\n        }\n      `,\n    });\n    const kNumIterations = 1_000_000;\n    const pipeline = t.device.createComputePipeline({ compute: { module, entryPoint: 'main' } });\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    const bindGroup = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [{ binding: 0, resource: { buffer } }],\n    });\n    pass.setBindGroup(0, bindGroup);\n    for (let i = 0; i < kNumIterations; ++i) {\n      pass.dispatch(kNumElements);\n    }\n    pass.endPass();\n    t.device.queue.submit([encoder.finish()]);\n    t.expectGPUBufferValuesEqual(\n      buffer,\n      new Uint32Array([...iterRange(kNumElements, x => x + kNumIterations)])\n    );\n  });\n\ng.test('huge_dispatches')\n  .desc(`Tests execution of compute passes with huge dispatch calls`)\n  .fn(async t => {\n    const kDimensions = [512, 512, 128];\n    kDimensions.forEach(x => {\n      assert(x <= t.device.limits.maxComputeWorkgroupsPerDimension);\n    });\n\n    const kNumElements = kDimensions[0] * kDimensions[1] * kDimensions[2];\n    const data = new Uint32Array([...iterRange(kNumElements, x => x)]);\n    const buffer = t.makeBufferWithContents(data, GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC);\n    const module = t.device.createShaderModule({\n      code: `\n        struct Buffer { data: array<u32>; };\n        @group(0) @binding(0) var<storage, read_write> buffer: Buffer;\n        @stage(compute) @workgroup_size(1) fn main(\n            @builtin(global_invocation_id) id: vec3<u32>) {\n          let index = (id.z * 512u + id.y) * 512u + id.x;\n          buffer.data[index] = buffer.data[index] + 1u;\n        }\n      `,\n    });\n    const kNumIterations = 16;\n    const pipeline = t.device.createComputePipeline({ compute: { module, entryPoint: 'main' } });\n    const bindGroup = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [{ binding: 0, resource: { buffer } }],\n    });\n    for (let i = 0; i < kNumIterations; ++i) {\n      const encoder = t.device.createCommandEncoder();\n      const pass = encoder.beginComputePass();\n      pass.setBindGroup(0, bindGroup);\n      pass.setPipeline(pipeline);\n      pass.dispatch(kDimensions[0], kDimensions[1], kDimensions[2]);\n      pass.endPass();\n      t.device.queue.submit([encoder.finish()]);\n      await t.device.queue.onSubmittedWorkDone();\n    }\n    t.expectGPUBufferValuesEqual(\n      buffer,\n      new Uint32Array([...iterRange(kNumElements, x => x + kNumIterations)])\n    );\n  });\n"],"file":"compute_pass.spec.js"}