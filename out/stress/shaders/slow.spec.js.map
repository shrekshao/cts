{"version":3,"sources":["../../../src/stress/shaders/slow.spec.ts"],"names":["description","makeTestGroup","GPUTest","g","test","desc","fn","t","kDispatchSize","data","Uint32Array","buffer","makeBufferWithContents","GPUBufferUsage","STORAGE","COPY_SRC","module","device","createShaderModule","code","pipeline","createComputePipeline","compute","entryPoint","encoder","createCommandEncoder","pass","beginComputePass","setPipeline","bindGroup","createBindGroup","layout","getBindGroupLayout","entries","binding","resource","setBindGroup","dispatch","endPass","queue","submit","finish","expectGPUBufferValuesEqual","Array","fill","createRenderPipeline","vertex","buffers","primitive","topology","fragment","targets","format","uniforms","UNIFORM","renderTarget","createTexture","size","usage","GPUTextureUsage","RENDER_ATTACHMENT","beginRenderPass","colorAttachments","view","createView","loadValue","storeOp","draw","expectSinglePixelIn2DTexture","x","y","exp","Uint8Array"],"mappings":"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","sourcesContent":["export const description = `\nStress tests covering robustness in the presence of slow shaders.\n`;\n\nimport { makeTestGroup } from '../../common/framework/test_group.js';\nimport { GPUTest } from '../../webgpu/gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('compute')\n  .desc(`Tests execution of compute passes with very long-running dispatch operations.`)\n  .fn(async t => {\n    const kDispatchSize = 1000;\n    const data = new Uint32Array(kDispatchSize);\n    const buffer = t.makeBufferWithContents(data, GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC);\n    const module = t.device.createShaderModule({\n      code: `\n        struct Buffer { data: array<u32>; };\n        @group(0) @binding(0) var<storage, read_write> buffer: Buffer;\n        @stage(compute) @workgroup_size(1) fn main(\n            @builtin(global_invocation_id) id: vec3<u32>) {\n          loop {\n            if (buffer.data[id.x] == 1000000u) {\n              break;\n            }\n            buffer.data[id.x] = buffer.data[id.x] + 1u;\n          }\n        }\n      `,\n    });\n    const pipeline = t.device.createComputePipeline({ compute: { module, entryPoint: 'main' } });\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginComputePass();\n    pass.setPipeline(pipeline);\n    const bindGroup = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [{ binding: 0, resource: { buffer } }],\n    });\n    pass.setBindGroup(0, bindGroup);\n    pass.dispatch(kDispatchSize);\n    pass.endPass();\n    t.device.queue.submit([encoder.finish()]);\n    t.expectGPUBufferValuesEqual(buffer, new Uint32Array(new Array(kDispatchSize).fill(1000000)));\n  });\n\ng.test('vertex')\n  .desc(`Tests execution of render passes with a very long-running vertex stage.`)\n  .fn(async t => {\n    const module = t.device.createShaderModule({\n      code: `\n        struct Data { counter: u32; increment: u32; };\n        @group(0) @binding(0) var<uniform> data: Data;\n        @stage(vertex) fn vmain() -> @builtin(position) vec4<f32> {\n          var counter: u32 = data.counter;\n          loop {\n            counter = counter + data.increment;\n            if (counter % 50000000u == 0u) {\n              break;\n            }\n          }\n          return vec4<f32>(1.0, 1.0, 0.0, f32(counter));\n        }\n        @stage(fragment) fn fmain() -> @location(0) vec4<f32> {\n          return vec4<f32>(1.0, 1.0, 0.0, 1.0);\n        }\n      `,\n    });\n\n    const pipeline = t.device.createRenderPipeline({\n      vertex: { module, entryPoint: 'vmain', buffers: [] },\n      primitive: { topology: 'point-list' },\n      fragment: {\n        targets: [{ format: 'rgba8unorm' }],\n        module,\n        entryPoint: 'fmain',\n      },\n    });\n    const uniforms = t.makeBufferWithContents(new Uint32Array([0, 1]), GPUBufferUsage.UNIFORM);\n    const bindGroup = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [\n        {\n          binding: 0,\n          resource: { buffer: uniforms },\n        },\n      ],\n    });\n    const renderTarget = t.device.createTexture({\n      size: [3, 3],\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      format: 'rgba8unorm',\n    });\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: renderTarget.createView(),\n          loadValue: [0, 0, 0, 0],\n          storeOp: 'store',\n        },\n      ],\n    });\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bindGroup);\n    pass.draw(1);\n    pass.endPass();\n    t.device.queue.submit([encoder.finish()]);\n    t.expectSinglePixelIn2DTexture(\n      renderTarget,\n      'rgba8unorm',\n      { x: 1, y: 1 },\n      {\n        exp: new Uint8Array([255, 255, 0, 255]),\n      }\n    );\n  });\n\ng.test('fragment')\n  .desc(`Tests execution of render passes with a very long-running fragment stage.`)\n  .fn(async t => {\n    const module = t.device.createShaderModule({\n      code: `\n        struct Data { counter: u32; increment: u32; };\n        @group(0) @binding(0) var<uniform> data: Data;\n        @stage(vertex) fn vmain() -> @builtin(position) vec4<f32> {\n          return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n        }\n        @stage(fragment) fn fmain() -> @location(0) vec4<f32> {\n          var counter: u32 = data.counter;\n          loop {\n            counter = counter + data.increment;\n            if (counter % 50000000u == 0u) {\n              break;\n            }\n          }\n          return vec4<f32>(1.0, 1.0, 1.0 / f32(counter), 1.0);\n        }\n      `,\n    });\n\n    const pipeline = t.device.createRenderPipeline({\n      vertex: { module, entryPoint: 'vmain', buffers: [] },\n      primitive: { topology: 'point-list' },\n      fragment: {\n        targets: [{ format: 'rgba8unorm' }],\n        module,\n        entryPoint: 'fmain',\n      },\n    });\n    const uniforms = t.makeBufferWithContents(new Uint32Array([0, 1]), GPUBufferUsage.UNIFORM);\n    const bindGroup = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [\n        {\n          binding: 0,\n          resource: { buffer: uniforms },\n        },\n      ],\n    });\n    const renderTarget = t.device.createTexture({\n      size: [3, 3],\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n      format: 'rgba8unorm',\n    });\n    const encoder = t.device.createCommandEncoder();\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          view: renderTarget.createView(),\n          loadValue: [0, 0, 0, 0],\n          storeOp: 'store',\n        },\n      ],\n    });\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(0, bindGroup);\n    pass.draw(1);\n    pass.endPass();\n    t.device.queue.submit([encoder.finish()]);\n    t.expectSinglePixelIn2DTexture(\n      renderTarget,\n      'rgba8unorm',\n      { x: 1, y: 1 },\n      {\n        exp: new Uint8Array([255, 255, 0, 255]),\n      }\n    );\n  });\n"],"file":"slow.spec.js"}