{"version":3,"sources":["../../../src/stress/queue/submit.spec.ts"],"names":["description","makeTestGroup","iterRange","GPUTest","g","test","desc","fn","t","kNumElements","data","Uint32Array","x","buffer","makeBufferWithContents","GPUBufferUsage","STORAGE","COPY_SRC","pipeline","device","createComputePipeline","compute","module","createShaderModule","code","entryPoint","bindGroup","createBindGroup","layout","getBindGroupLayout","entries","binding","resource","encoder","createCommandEncoder","kNumIterations","i","pass","beginComputePass","setPipeline","setBindGroup","dispatch","endPass","queue","submit","finish","expectGPUBufferValuesEqual","buffers","push"],"mappings":"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","sourcesContent":["export const description = `\nStress tests for command submission to GPUQueue objects.\n`;\n\nimport { makeTestGroup } from '../../common/framework/test_group.js';\nimport { iterRange } from '../../common/util/util.js';\nimport { GPUTest } from '../../webgpu/gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('huge_command_buffer')\n  .desc(\n    `Tests submission of huge command buffers to a GPUQueue. Huge buffers are\nencoded by chaining together long sequences of compute passes, with expected\nresults verified at the end of the test.`\n  )\n  .fn(async t => {\n    const kNumElements = 64;\n    const data = new Uint32Array([...iterRange(kNumElements, x => x)]);\n    const buffer = t.makeBufferWithContents(data, GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC);\n    const pipeline = t.device.createComputePipeline({\n      compute: {\n        module: t.device.createShaderModule({\n          code: `\n            struct Buffer { data: array<u32>; };\n            @group(0) @binding(0) var<storage, read_write> buffer: Buffer;\n            @stage(compute) @workgroup_size(1) fn main(\n                @builtin(global_invocation_id) id: vec3<u32>) {\n              buffer.data[id.x] = buffer.data[id.x] + 1u;\n            }\n          `,\n        }),\n        entryPoint: 'main',\n      },\n    });\n    const bindGroup = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [{ binding: 0, resource: { buffer } }],\n    });\n    const encoder = t.device.createCommandEncoder();\n    const kNumIterations = 500_000;\n    for (let i = 0; i < kNumIterations; ++i) {\n      const pass = encoder.beginComputePass();\n      pass.setPipeline(pipeline);\n      pass.setBindGroup(0, bindGroup);\n      pass.dispatch(kNumElements);\n      pass.endPass();\n    }\n    t.device.queue.submit([encoder.finish()]);\n    t.expectGPUBufferValuesEqual(\n      buffer,\n      new Uint32Array([...iterRange(kNumElements, x => x + kNumIterations)])\n    );\n  });\n\ng.test('many_command_buffers')\n  .desc(\n    `Tests submission of a huge number of command buffers to a GPUQueue by a single\nsubmit() call.`\n  )\n  .fn(async t => {\n    const kNumElements = 64;\n    const data = new Uint32Array([...iterRange(kNumElements, x => x)]);\n    const buffer = t.makeBufferWithContents(data, GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC);\n    const pipeline = t.device.createComputePipeline({\n      compute: {\n        module: t.device.createShaderModule({\n          code: `\n            struct Buffer { data: array<u32>; };\n            @group(0) @binding(0) var<storage, read_write> buffer: Buffer;\n            @stage(compute) @workgroup_size(1) fn main(\n                @builtin(global_invocation_id) id: vec3<u32>) {\n              buffer.data[id.x] = buffer.data[id.x] + 1u;\n            }\n          `,\n        }),\n        entryPoint: 'main',\n      },\n    });\n    const bindGroup = t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [{ binding: 0, resource: { buffer } }],\n    });\n    const kNumIterations = 500_000;\n    const buffers = [];\n    for (let i = 0; i < kNumIterations; ++i) {\n      const encoder = t.device.createCommandEncoder();\n      const pass = encoder.beginComputePass();\n      pass.setPipeline(pipeline);\n      pass.setBindGroup(0, bindGroup);\n      pass.dispatch(kNumElements);\n      pass.endPass();\n      buffers.push(encoder.finish());\n    }\n    t.device.queue.submit(buffers);\n    t.expectGPUBufferValuesEqual(\n      buffer,\n      new Uint32Array([...iterRange(kNumElements, x => x + kNumIterations)])\n    );\n  });\n"],"file":"submit.spec.js"}